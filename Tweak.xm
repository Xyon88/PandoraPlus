%hook UserDomainModel

-(bool) shouldHide:(long long) in:(long long) {
	%orig;
	NSLog(@"-(bool) shouldHide:(long long) in:(long long)");
}

-(bool) useCircularImageFor:(long long) {
	%orig;
	NSLog(@"-(bool) useCircularImageFor:(long long)");
}

-(id) getPandoraId {
	%orig;
	NSLog(@"-(id) getPandoraId");
}

-(bool) hasAnnotation {
	%orig;
	NSLog(@"-(bool) hasAnnotation");
}

-(bool) getIsAvailableOffline {
	%orig;
	NSLog(@"-(bool) getIsAvailableOffline");
}

-(id) primaryTitleFor:(long long) {
	%orig;
	NSLog(@"-(id) primaryTitleFor:(long long)");
}

-(id) secondaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) {
	%orig;
	NSLog(@"-(id) secondaryTitleFor:(long long) shouldShowDownloadsOnly:(bool)");
}

-(id) tertiaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) shouldDisregardUserCollection:(bool) {
	%orig;
	NSLog(@"-(id) tertiaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) shouldDisregardUserCollection:(bool)");
}

-(id) mediaImageURLStringFor:(long long) {
	%orig;
	NSLog(@"-(id) mediaImageURLStringFor:(long long)");
}

-(id) mediaImageFor:(long long) {
	%orig;
	NSLog(@"-(id) mediaImageFor:(long long)");
}

-(id) iconDominantColorFor:(long long) {
	%orig;
	NSLog(@"-(id) iconDominantColorFor:(long long)");
}

-(long long) badgeAvailability {
	%orig;
	NSLog(@"-(long long) badgeAvailability");
}

-(long long) badgeExplicitness {
	%orig;
	NSLog(@"-(long long) badgeExplicitness");
}

-(long long) badgeCollectionState {
	%orig;
	NSLog(@"-(long long) badgeCollectionState");
}

-(float) badgeDownloadProgress {
	%orig;
	NSLog(@"-(float) badgeDownloadProgress");
}

-(id) itemType {
	%orig;
	NSLog(@"-(id) itemType");
}

-(id) getDefaultImageFor:(long long) {
	%orig;
	NSLog(@"-(id) getDefaultImageFor:(long long)");
}

%end

%hook BottomNavigationViewModel

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

%end

%hook AutomationMediaSimulator

-(void) simulate:(id) {
	%orig;
	NSLog(@"-(void) simulate:(id)");
}

-(void) setDataLength:(long long) {
	%orig;
	NSLog(@"-(void) setDataLength:(long long)");
}

-(long long) dataLength {
	%orig;
	NSLog(@"-(long long) dataLength");
}

%end

%hook LockScreenControlsManager

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

%end

%hook VoiceHeyPandoraPhraseSpotter

-(void) wakeWordDetected {
	%orig;
	NSLog(@"-(void) wakeWordDetected");
}

%end

%hook HttpConnectionSimulator

-(bool) isReplaying {
	%orig;
	NSLog(@"-(bool) isReplaying");
}

-(void) replayRequest:(id) for:(id) {
	%orig;
	NSLog(@"-(void) replayRequest:(id) for:(id)");
}

-(void) recordRequest:(id) {
	%orig;
	NSLog(@"-(void) recordRequest:(id)");
}

-(void) recordResponse:(id) for:(id) {
	%orig;
	NSLog(@"-(void) recordResponse:(id) for:(id)");
}

-(bool) isRecording {
	%orig;
	NSLog(@"-(bool) isRecording");
}

%end

%hook PMAddSimilarSongsHelper

-(void) runAnimation {
	%orig;
	NSLog(@"-(void) runAnimation");
}

%end

%hook MiniPlayerInteractor

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionBufferStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionBufferStateDidChangeTo:(bool)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

%end

%hook MyPodcastMusicSessionManagerHandler

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

%end

%hook UIEventListener

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

%end

%hook PML2APVContainerNavigationItemController

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

%end

%hook PML2MutedAPVNavigationItemController

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

%end

%hook PandoraPush

-(id) listenerId {
	%orig;
	NSLog(@"-(id) listenerId");
}

%end

%hook PMProfileUpgradePresenter

-(void) presentProfileUpgrade:(id) {
	%orig;
	NSLog(@"-(void) presentProfileUpgrade:(id)");
}

%end

%hook ScreenshotMonitor

-(void) didTakeScreenshot {
	%orig;
	NSLog(@"-(void) didTakeScreenshot");
}

%end

%hook QueueEntryPresentationModel

-(bool) shouldHide:(long long) in:(long long) {
	%orig;
	NSLog(@"-(bool) shouldHide:(long long) in:(long long)");
}

-(bool) useCircularImageFor:(long long) {
	%orig;
	NSLog(@"-(bool) useCircularImageFor:(long long)");
}

-(id) getPandoraId {
	%orig;
	NSLog(@"-(id) getPandoraId");
}

-(bool) hasAnnotation {
	%orig;
	NSLog(@"-(bool) hasAnnotation");
}

-(bool) getIsAvailableOffline {
	%orig;
	NSLog(@"-(bool) getIsAvailableOffline");
}

-(id) primaryTitleFor:(long long) {
	%orig;
	NSLog(@"-(id) primaryTitleFor:(long long)");
}

-(id) secondaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) {
	%orig;
	NSLog(@"-(id) secondaryTitleFor:(long long) shouldShowDownloadsOnly:(bool)");
}

-(id) tertiaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) shouldDisregardUserCollection:(bool) {
	%orig;
	NSLog(@"-(id) tertiaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) shouldDisregardUserCollection:(bool)");
}

-(id) mediaImageURLStringFor:(long long) {
	%orig;
	NSLog(@"-(id) mediaImageURLStringFor:(long long)");
}

-(id) mediaImageFor:(long long) {
	%orig;
	NSLog(@"-(id) mediaImageFor:(long long)");
}

-(id) iconDominantColorFor:(long long) {
	%orig;
	NSLog(@"-(id) iconDominantColorFor:(long long)");
}

-(long long) badgeAvailability {
	%orig;
	NSLog(@"-(long long) badgeAvailability");
}

-(long long) badgeExplicitness {
	%orig;
	NSLog(@"-(long long) badgeExplicitness");
}

-(long long) badgeCollectionState {
	%orig;
	NSLog(@"-(long long) badgeCollectionState");
}

-(float) badgeDownloadProgress {
	%orig;
	NSLog(@"-(float) badgeDownloadProgress");
}

-(id) itemType {
	%orig;
	NSLog(@"-(id) itemType");
}

%end

%hook PMInAppPurchaseDisplayCoordinator

-(void) removeLoadingViewTimeout {
	%orig;
	NSLog(@"-(void) removeLoadingViewTimeout");
}

%end

%hook FBAdViewControllerProxy

+(id) proxyWithViewController:(id) {
	%orig;
	NSLog(@"+(id) proxyWithViewController:(id)");
}

+(id) proxyWithViewController:(id) withView:(id) {
	%orig;
	NSLog(@"+(id) proxyWithViewController:(id) withView:(id)");
}

+(bool) isViewControllerProxy:(id) {
	%orig;
	NSLog(@"+(bool) isViewControllerProxy:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) viewController {
	%orig;
	NSLog(@"+(id) viewController");
}

-(id) initWithViewController:(id) withView:(id) {
	%orig;
	NSLog(@"-(id) initWithViewController:(id) withView:(id)");
}

-(void) checkAndUpdateCurrentViewControllerWithCondition:(id) {
	%orig;
	NSLog(@"-(void) checkAndUpdateCurrentViewControllerWithCondition:(id)");
}

-(id) currentViewController {
	%orig;
	NSLog(@"-(id) currentViewController");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) respondsToSelector:(SEL) {
	%orig;
	NSLog(@"-(bool) respondsToSelector:(SEL)");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) methodSignatureForSelector:(SEL) {
	%orig;
	NSLog(@"-(id) methodSignatureForSelector:(SEL)");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(void) forwardInvocation:(id) {
	%orig;
	NSLog(@"-(void) forwardInvocation:(id)");
}

%end

%hook ABQAFHTTPResponseSerializer

+(id) serializer {
	%orig;
	NSLog(@"+(id) serializer");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) acceptableContentTypes {
	%orig;
	NSLog(@"-(id) acceptableContentTypes");
}

-(void) setAcceptableContentTypes:(id) {
	%orig;
	NSLog(@"-(void) setAcceptableContentTypes:(id)");
}

-(void) setAcceptableStatusCodes:(id) {
	%orig;
	NSLog(@"-(void) setAcceptableStatusCodes:(id)");
}

-(id) acceptableStatusCodes {
	%orig;
	NSLog(@"-(id) acceptableStatusCodes");
}

-(bool) validateResponse:(id) data:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateResponse:(id) data:(id) error:(id*)");
}

-(id) responseObjectForResponse:(id) data:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) responseObjectForResponse:(id) data:(id) error:(id*)");
}

-(unsigned long long) stringEncoding {
	%orig;
	NSLog(@"-(unsigned long long) stringEncoding");
}

-(void) setStringEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setStringEncoding:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook ABQAFCompoundResponseSerializer

+(id) compoundSerializerWithResponseSerializers:(id) {
	%orig;
	NSLog(@"+(id) compoundSerializerWithResponseSerializers:(id)");
}

-(id) responseObjectForResponse:(id) data:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) responseObjectForResponse:(id) data:(id) error:(id*)");
}

-(void) setResponseSerializers:(id) {
	%orig;
	NSLog(@"-(void) setResponseSerializers:(id)");
}

-(id) responseSerializers {
	%orig;
	NSLog(@"-(id) responseSerializers");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook ABQAFImageResponseSerializer

-(id) responseObjectForResponse:(id) data:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) responseObjectForResponse:(id) data:(id) error:(id*)");
}

-(void) setAutomaticallyInflatesResponseImage:(bool) {
	%orig;
	NSLog(@"-(void) setAutomaticallyInflatesResponseImage:(bool)");
}

-(bool) automaticallyInflatesResponseImage {
	%orig;
	NSLog(@"-(bool) automaticallyInflatesResponseImage");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setImageScale:(double) {
	%orig;
	NSLog(@"-(void) setImageScale:(double)");
}

-(double) imageScale {
	%orig;
	NSLog(@"-(double) imageScale");
}

%end

%hook ABQAFPropertyListResponseSerializer

+(id) serializerWithFormat:(unsigned long long) readOptions:(unsigned long long) {
	%orig;
	NSLog(@"+(id) serializerWithFormat:(unsigned long long) readOptions:(unsigned long long)");
}

+(id) serializer {
	%orig;
	NSLog(@"+(id) serializer");
}

-(id) responseObjectForResponse:(id) data:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) responseObjectForResponse:(id) data:(id) error:(id*)");
}

-(void) setReadOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setReadOptions:(unsigned long long)");
}

-(unsigned long long) readOptions {
	%orig;
	NSLog(@"-(unsigned long long) readOptions");
}

-(void) setFormat:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setFormat:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(unsigned long long) format {
	%orig;
	NSLog(@"-(unsigned long long) format");
}

%end

%hook ABQAFXMLParserResponseSerializer

+(id) serializer {
	%orig;
	NSLog(@"+(id) serializer");
}

-(id) responseObjectForResponse:(id) data:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) responseObjectForResponse:(id) data:(id) error:(id*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook ABQAFJSONResponseSerializer

+(id) serializerWithReadingOptions:(unsigned long long) {
	%orig;
	NSLog(@"+(id) serializerWithReadingOptions:(unsigned long long)");
}

+(id) serializer {
	%orig;
	NSLog(@"+(id) serializer");
}

-(void) setReadingOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setReadingOptions:(unsigned long long)");
}

-(id) responseObjectForResponse:(id) data:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) responseObjectForResponse:(id) data:(id) error:(id*)");
}

-(bool) removesKeysWithNullValues {
	%orig;
	NSLog(@"-(bool) removesKeysWithNullValues");
}

-(void) setRemovesKeysWithNullValues:(bool) {
	%orig;
	NSLog(@"-(void) setRemovesKeysWithNullValues:(bool)");
}

-(unsigned long long) readingOptions {
	%orig;
	NSLog(@"-(unsigned long long) readingOptions");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook ABQAFHTTPBodyPart

-(void) setBoundary:(id) {
	%orig;
	NSLog(@"-(void) setBoundary:(id)");
}

-(id) boundary {
	%orig;
	NSLog(@"-(id) boundary");
}

-(void) setBodyContentLength:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBodyContentLength:(unsigned long long)");
}

-(void) setHasInitialBoundary:(bool) {
	%orig;
	NSLog(@"-(void) setHasInitialBoundary:(bool)");
}

-(void) setHasFinalBoundary:(bool) {
	%orig;
	NSLog(@"-(void) setHasFinalBoundary:(bool)");
}

-(bool) transitionToNextPhase {
	%orig;
	NSLog(@"-(bool) transitionToNextPhase");
}

-(bool) hasInitialBoundary {
	%orig;
	NSLog(@"-(bool) hasInitialBoundary");
}

-(id) stringForHeaders {
	%orig;
	NSLog(@"-(id) stringForHeaders");
}

-(bool) hasFinalBoundary {
	%orig;
	NSLog(@"-(bool) hasFinalBoundary");
}

-(long long) readData:(id) intoBuffer:(char*) maxLength:(unsigned long long) {
	%orig;
	NSLog(@"-(long long) readData:(id) intoBuffer:(char*) maxLength:(unsigned long long)");
}

-(unsigned long long) bodyContentLength {
	%orig;
	NSLog(@"-(unsigned long long) bodyContentLength");
}

-(unsigned long long) contentLength {
	%orig;
	NSLog(@"-(unsigned long long) contentLength");
}

-(unsigned long long) stringEncoding {
	%orig;
	NSLog(@"-(unsigned long long) stringEncoding");
}

-(void) setInputStream:(id) {
	%orig;
	NSLog(@"-(void) setInputStream:(id)");
}

-(id) inputStream {
	%orig;
	NSLog(@"-(id) inputStream");
}

-(long long) read:(char*) maxLength:(unsigned long long) {
	%orig;
	NSLog(@"-(long long) read:(char*) maxLength:(unsigned long long)");
}

-(void) setHeaders:(id) {
	%orig;
	NSLog(@"-(void) setHeaders:(id)");
}

-(void) setStringEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setStringEncoding:(unsigned long long)");
}

-(bool) hasBytesAvailable {
	%orig;
	NSLog(@"-(bool) hasBytesAvailable");
}

-(id) headers {
	%orig;
	NSLog(@"-(id) headers");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setBody:(id) {
	%orig;
	NSLog(@"-(void) setBody:(id)");
}

-(id) body {
	%orig;
	NSLog(@"-(id) body");
}

%end

%hook ABQAFStreamingMultipartFormData

-(id) initWithURLRequest:(id) stringEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithURLRequest:(id) stringEncoding:(unsigned long long)");
}

-(void) appendPartWithFormData:(id) name:(id) {
	%orig;
	NSLog(@"-(void) appendPartWithFormData:(id) name:(id)");
}

-(id) requestByFinalizingMultipartFormData {
	%orig;
	NSLog(@"-(id) requestByFinalizingMultipartFormData");
}

-(void) setBoundary:(id) {
	%orig;
	NSLog(@"-(void) setBoundary:(id)");
}

-(void) setBodyStream:(id) {
	%orig;
	NSLog(@"-(void) setBodyStream:(id)");
}

-(bool) appendPartWithFileURL:(id) name:(id) fileName:(id) mimeType:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) appendPartWithFileURL:(id) name:(id) fileName:(id) mimeType:(id) error:(id*)");
}

-(id) boundary {
	%orig;
	NSLog(@"-(id) boundary");
}

-(void) appendPartWithHeaders:(id) body:(id) {
	%orig;
	NSLog(@"-(void) appendPartWithHeaders:(id) body:(id)");
}

-(bool) appendPartWithFileURL:(id) name:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) appendPartWithFileURL:(id) name:(id) error:(id*)");
}

-(void) appendPartWithInputStream:(id) name:(id) fileName:(id) length:(long long) mimeType:(id) {
	%orig;
	NSLog(@"-(void) appendPartWithInputStream:(id) name:(id) fileName:(id) length:(long long) mimeType:(id)");
}

-(void) appendPartWithFileData:(id) name:(id) fileName:(id) mimeType:(id) {
	%orig;
	NSLog(@"-(void) appendPartWithFileData:(id) name:(id) fileName:(id) mimeType:(id)");
}

-(void) throttleBandwidthWithPacketSize:(unsigned long long) delay:(double) {
	%orig;
	NSLog(@"-(void) throttleBandwidthWithPacketSize:(unsigned long long) delay:(double)");
}

-(void) setRequest:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id)");
}

-(unsigned long long) stringEncoding {
	%orig;
	NSLog(@"-(unsigned long long) stringEncoding");
}

-(id) bodyStream {
	%orig;
	NSLog(@"-(id) bodyStream");
}

-(void) setStringEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setStringEncoding:(unsigned long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

%end

%hook ABQAFHTTPRequestSerializer

+(id) serializer {
	%orig;
	NSLog(@"+(id) serializer");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(void) setAuthorizationHeaderFieldWithToken:(id) {
	%orig;
	NSLog(@"-(void) setAuthorizationHeaderFieldWithToken:(id)");
}

-(id) requestWithMethod:(id) URLString:(id) parameters:(id) {
	%orig;
	NSLog(@"-(id) requestWithMethod:(id) URLString:(id) parameters:(id)");
}

-(id) multipartFormRequestWithMethod:(id) URLString:(id) parameters:(id) constructingBodyWithBlock:(id) {
	%orig;
	NSLog(@"-(id) multipartFormRequestWithMethod:(id) URLString:(id) parameters:(id) constructingBodyWithBlock:(id)");
}

-(void) setQueryStringSerializationWithBlock:(id) {
	%orig;
	NSLog(@"-(void) setQueryStringSerializationWithBlock:(id)");
}

-(void) setMutableHTTPRequestHeaders:(id) {
	%orig;
	NSLog(@"-(void) setMutableHTTPRequestHeaders:(id)");
}

-(void) setHTTPMethodsEncodingParametersInURI:(id) {
	%orig;
	NSLog(@"-(void) setHTTPMethodsEncodingParametersInURI:(id)");
}

-(id) mutableHTTPRequestHeaders {
	%orig;
	NSLog(@"-(id) mutableHTTPRequestHeaders");
}

-(void) setQueryStringSerializationStyle:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setQueryStringSerializationStyle:(unsigned long long)");
}

-(void) setQueryStringSerialization:(id) {
	%orig;
	NSLog(@"-(void) setQueryStringSerialization:(id)");
}

-(id) requestBySerializingRequest:(id) withParameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) requestBySerializingRequest:(id) withParameters:(id) error:(id*)");
}

-(id) HTTPRequestHeaders {
	%orig;
	NSLog(@"-(id) HTTPRequestHeaders");
}

-(id) queryStringSerialization {
	%orig;
	NSLog(@"-(id) queryStringSerialization");
}

-(unsigned long long) queryStringSerializationStyle {
	%orig;
	NSLog(@"-(unsigned long long) queryStringSerializationStyle");
}

-(id) HTTPMethodsEncodingParametersInURI {
	%orig;
	NSLog(@"-(id) HTTPMethodsEncodingParametersInURI");
}

-(void) setAuthorizationHeaderFieldWithUsername:(id) password:(id) {
	%orig;
	NSLog(@"-(void) setAuthorizationHeaderFieldWithUsername:(id) password:(id)");
}

-(void) clearAuthorizationHeader {
	%orig;
	NSLog(@"-(void) clearAuthorizationHeader");
}

-(void) setQueryStringSerializationWithStyle:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setQueryStringSerializationWithStyle:(unsigned long long)");
}

-(id) multipartFormRequestWithMethod:(id) URLString:(id) parameters:(id) constructingBodyWithBlock:(id) error:(?) {
	%orig;
	NSLog(@"-(id) multipartFormRequestWithMethod:(id) URLString:(id) parameters:(id) constructingBodyWithBlock:(id) error:(?)");
}

-(id) requestWithMultipartFormRequest:(id) writingStreamContentsToFile:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) requestWithMultipartFormRequest:(id) writingStreamContentsToFile:(id) completionHandler:(id)");
}

-(bool) HTTPShouldUsePipelining {
	%orig;
	NSLog(@"-(bool) HTTPShouldUsePipelining");
}

-(unsigned long long) networkServiceType {
	%orig;
	NSLog(@"-(unsigned long long) networkServiceType");
}

-(unsigned long long) cachePolicy {
	%orig;
	NSLog(@"-(unsigned long long) cachePolicy");
}

-(void) setCachePolicy:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCachePolicy:(unsigned long long)");
}

-(double) timeoutInterval {
	%orig;
	NSLog(@"-(double) timeoutInterval");
}

-(bool) HTTPShouldHandleCookies {
	%orig;
	NSLog(@"-(bool) HTTPShouldHandleCookies");
}

-(bool) allowsCellularAccess {
	%orig;
	NSLog(@"-(bool) allowsCellularAccess");
}

-(void) setHTTPShouldHandleCookies:(bool) {
	%orig;
	NSLog(@"-(void) setHTTPShouldHandleCookies:(bool)");
}

-(void) setValue:(id) forHTTPHeaderField:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forHTTPHeaderField:(id)");
}

-(void) setAllowsCellularAccess:(bool) {
	%orig;
	NSLog(@"-(void) setAllowsCellularAccess:(bool)");
}

-(unsigned long long) stringEncoding {
	%orig;
	NSLog(@"-(unsigned long long) stringEncoding");
}

-(void) setHTTPShouldUsePipelining:(bool) {
	%orig;
	NSLog(@"-(void) setHTTPShouldUsePipelining:(bool)");
}

-(void) setNetworkServiceType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setNetworkServiceType:(unsigned long long)");
}

-(void) setStringEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setStringEncoding:(unsigned long long)");
}

-(void) setTimeoutInterval:(double) {
	%orig;
	NSLog(@"-(void) setTimeoutInterval:(double)");
}

-(id) requestWithMethod:(id) URLString:(id) parameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) requestWithMethod:(id) URLString:(id) parameters:(id) error:(id*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook ABQAFPropertyListRequestSerializer

+(id) serializerWithFormat:(unsigned long long) writeOptions:(unsigned long long) {
	%orig;
	NSLog(@"+(id) serializerWithFormat:(unsigned long long) writeOptions:(unsigned long long)");
}

+(id) serializer {
	%orig;
	NSLog(@"+(id) serializer");
}

-(id) requestBySerializingRequest:(id) withParameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) requestBySerializingRequest:(id) withParameters:(id) error:(id*)");
}

-(void) setWriteOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setWriteOptions:(unsigned long long)");
}

-(unsigned long long) writeOptions {
	%orig;
	NSLog(@"-(unsigned long long) writeOptions");
}

-(void) setFormat:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setFormat:(unsigned long long)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(unsigned long long) format {
	%orig;
	NSLog(@"-(unsigned long long) format");
}

%end

%hook ABQAFJSONRequestSerializer

+(id) serializerWithWritingOptions:(unsigned long long) {
	%orig;
	NSLog(@"+(id) serializerWithWritingOptions:(unsigned long long)");
}

+(id) serializer {
	%orig;
	NSLog(@"+(id) serializer");
}

-(id) requestBySerializingRequest:(id) withParameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) requestBySerializingRequest:(id) withParameters:(id) error:(id*)");
}

-(void) setWritingOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setWritingOptions:(unsigned long long)");
}

-(unsigned long long) writingOptions {
	%orig;
	NSLog(@"-(unsigned long long) writingOptions");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook ABQAFQueryStringPair

-(id) URLEncodedStringValueWithEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(id) URLEncodedStringValueWithEncoding:(unsigned long long)");
}

-(void) setField:(id) {
	%orig;
	NSLog(@"-(void) setField:(id)");
}

-(id) initWithField:(id) value:(id) {
	%orig;
	NSLog(@"-(id) initWithField:(id) value:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) value {
	%orig;
	NSLog(@"-(id) value");
}

-(void) setValue:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id)");
}

-(id) field {
	%orig;
	NSLog(@"-(id) field");
}

%end

%hook ABQAFNetworkReachabilityManager

+(id) managerForAddress:(const sockaddr_in*) {
	%orig;
	NSLog(@"+(id) managerForAddress:(const sockaddr_in*)");
}

+(id) keyPathsForValuesAffectingValueForKey:(id) {
	%orig;
	NSLog(@"+(id) keyPathsForValuesAffectingValueForKey:(id)");
}

+(id) managerForDomain:(id) {
	%orig;
	NSLog(@"+(id) managerForDomain:(id)");
}

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(void) setNetworkReachabilityAssociation:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setNetworkReachabilityAssociation:(unsigned long long)");
}

-(unsigned long long) networkReachabilityAssociation {
	%orig;
	NSLog(@"-(unsigned long long) networkReachabilityAssociation");
}

-(void) setReachabilityStatusChangeBlock:(id) {
	%orig;
	NSLog(@"-(void) setReachabilityStatusChangeBlock:(id)");
}

-(bool) isReachableViaWiFi {
	%orig;
	NSLog(@"-(bool) isReachableViaWiFi");
}

-(bool) isReachableViaWWAN {
	%orig;
	NSLog(@"-(bool) isReachableViaWWAN");
}

-(void) setNetworkReachabilityStatus:(long long) {
	%orig;
	NSLog(@"-(void) setNetworkReachabilityStatus:(long long)");
}

-(long long) networkReachabilityStatus {
	%orig;
	NSLog(@"-(long long) networkReachabilityStatus");
}

-(id) networkReachabilityStatusBlock {
	%orig;
	NSLog(@"-(id) networkReachabilityStatusBlock");
}

-(void) setNetworkReachabilityStatusBlock:(id) {
	%orig;
	NSLog(@"-(void) setNetworkReachabilityStatusBlock:(id)");
}

-(id) localizedNetworkReachabilityStatusString {
	%orig;
	NSLog(@"-(id) localizedNetworkReachabilityStatusString");
}

-(void) stopMonitoring {
	%orig;
	NSLog(@"-(void) stopMonitoring");
}

-(void) startMonitoring {
	%orig;
	NSLog(@"-(void) startMonitoring");
}

-(bool) isReachable {
	%orig;
	NSLog(@"-(bool) isReachable");
}

-(__SCNetworkReachability*) networkReachability {
	%orig;
	NSLog(@"-(__SCNetworkReachability*) networkReachability");
}

-(id) initWithReachability:(__SCNetworkReachability*) {
	%orig;
	NSLog(@"-(id) initWithReachability:(__SCNetworkReachability*)");
}

-(void) setNetworkReachability:(__SCNetworkReachability*) {
	%orig;
	NSLog(@"-(void) setNetworkReachability:(__SCNetworkReachability*)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQAFHTTPRequestOperationManager

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

+(id) manager {
	%orig;
	NSLog(@"+(id) manager");
}

-(void) setShouldUseCredentialStorage:(bool) {
	%orig;
	NSLog(@"-(void) setShouldUseCredentialStorage:(bool)");
}

-(bool) shouldUseCredentialStorage {
	%orig;
	NSLog(@"-(bool) shouldUseCredentialStorage");
}

-(id) HTTPRequestOperationWithRequest:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) HTTPRequestOperationWithRequest:(id) success:(id) failure:(?)");
}

-(void) setRequestSerializer:(id) {
	%orig;
	NSLog(@"-(void) setRequestSerializer:(id)");
}

-(void) setResponseSerializer:(id) {
	%orig;
	NSLog(@"-(void) setResponseSerializer:(id)");
}

-(id) responseSerializer {
	%orig;
	NSLog(@"-(id) responseSerializer");
}

-(id) requestSerializer {
	%orig;
	NSLog(@"-(id) requestSerializer");
}

-(id) GET:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) GET:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) HEAD:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) HEAD:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) POST:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) POST:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) POST:(id) parameters:(id) constructingBodyWithBlock:(id) success:(?) failure:(id) {
	%orig;
	NSLog(@"-(id) POST:(id) parameters:(id) constructingBodyWithBlock:(id) success:(?) failure:(id)");
}

-(id) PUT:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) PUT:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) PATCH:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) PATCH:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) DELETE:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) DELETE:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) credential {
	%orig;
	NSLog(@"-(id) credential");
}

-(void) setBaseURL:(id) {
	%orig;
	NSLog(@"-(void) setBaseURL:(id)");
}

-(id) initWithBaseURL:(id) {
	%orig;
	NSLog(@"-(id) initWithBaseURL:(id)");
}

-(void) setCredential:(id) {
	%orig;
	NSLog(@"-(void) setCredential:(id)");
}

-(id) reachabilityManager {
	%orig;
	NSLog(@"-(id) reachabilityManager");
}

-(void) setReachabilityManager:(id) {
	%orig;
	NSLog(@"-(void) setReachabilityManager:(id)");
}

-(id) securityPolicy {
	%orig;
	NSLog(@"-(id) securityPolicy");
}

-(void) setSecurityPolicy:(id) {
	%orig;
	NSLog(@"-(void) setSecurityPolicy:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setOperationQueue:(id) {
	%orig;
	NSLog(@"-(void) setOperationQueue:(id)");
}

-(id) operationQueue {
	%orig;
	NSLog(@"-(id) operationQueue");
}

-(id) baseURL {
	%orig;
	NSLog(@"-(id) baseURL");
}

%end

%hook ABQAFURLSessionManager

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) downloadTaskWithRequest:(id) progress:(id*) destination:(id) completionHandler:(?) {
	%orig;
	NSLog(@"-(id) downloadTaskWithRequest:(id) progress:(id*) destination:(id) completionHandler:(?)");
}

-(void) addDelegateForDataTask:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) addDelegateForDataTask:(id) completionHandler:(id)");
}

-(void) removeAllDelegates {
	%orig;
	NSLog(@"-(void) removeAllDelegates");
}

-(void) setResponseSerializer:(id) {
	%orig;
	NSLog(@"-(void) setResponseSerializer:(id)");
}

-(id) responseSerializer {
	%orig;
	NSLog(@"-(id) responseSerializer");
}

-(id) uploadTaskWithStreamedRequest:(id) progress:(id*) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) uploadTaskWithStreamedRequest:(id) progress:(id*) completionHandler:(id)");
}

-(id) initWithSessionConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithSessionConfiguration:(id)");
}

-(id) downloadTaskDidFinishDownloading {
	%orig;
	NSLog(@"-(id) downloadTaskDidFinishDownloading");
}

-(void) setDownloadTaskDidFinishDownloading:(id) {
	%orig;
	NSLog(@"-(void) setDownloadTaskDidFinishDownloading:(id)");
}

-(void) setMutableTaskDelegatesKeyedByTaskIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setMutableTaskDelegatesKeyedByTaskIdentifier:(id)");
}

-(void) addDelegateForUploadTask:(id) progress:(id*) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) addDelegateForUploadTask:(id) progress:(id*) completionHandler:(id)");
}

-(void) addDelegateForDownloadTask:(id) progress:(id*) destination:(id) completionHandler:(?) {
	%orig;
	NSLog(@"-(void) addDelegateForDownloadTask:(id) progress:(id*) destination:(id) completionHandler:(?)");
}

-(id) mutableTaskDelegatesKeyedByTaskIdentifier {
	%orig;
	NSLog(@"-(id) mutableTaskDelegatesKeyedByTaskIdentifier");
}

-(void) setDelegate:(id) forTask:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id) forTask:(id)");
}

-(id) delegateForTask:(id) {
	%orig;
	NSLog(@"-(id) delegateForTask:(id)");
}

-(id) dataTasks {
	%orig;
	NSLog(@"-(id) dataTasks");
}

-(id) uploadTasks {
	%orig;
	NSLog(@"-(id) uploadTasks");
}

-(id) tasksForKeyPath:(id) {
	%orig;
	NSLog(@"-(id) tasksForKeyPath:(id)");
}

-(void) setSessionDidBecomeInvalid:(id) {
	%orig;
	NSLog(@"-(void) setSessionDidBecomeInvalid:(id)");
}

-(void) setSessionDidReceiveAuthenticationChallenge:(id) {
	%orig;
	NSLog(@"-(void) setSessionDidReceiveAuthenticationChallenge:(id)");
}

-(void) setDidFinishEventsForBackgroundURLSession:(id) {
	%orig;
	NSLog(@"-(void) setDidFinishEventsForBackgroundURLSession:(id)");
}

-(void) setTaskNeedNewBodyStream:(id) {
	%orig;
	NSLog(@"-(void) setTaskNeedNewBodyStream:(id)");
}

-(void) setTaskWillPerformHTTPRedirection:(id) {
	%orig;
	NSLog(@"-(void) setTaskWillPerformHTTPRedirection:(id)");
}

-(void) setTaskDidReceiveAuthenticationChallenge:(id) {
	%orig;
	NSLog(@"-(void) setTaskDidReceiveAuthenticationChallenge:(id)");
}

-(void) setTaskDidSendBodyData:(id) {
	%orig;
	NSLog(@"-(void) setTaskDidSendBodyData:(id)");
}

-(void) setTaskDidComplete:(id) {
	%orig;
	NSLog(@"-(void) setTaskDidComplete:(id)");
}

-(void) setDataTaskDidReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) setDataTaskDidReceiveResponse:(id)");
}

-(void) setDataTaskDidBecomeDownloadTask:(id) {
	%orig;
	NSLog(@"-(void) setDataTaskDidBecomeDownloadTask:(id)");
}

-(void) setDataTaskDidReceiveData:(id) {
	%orig;
	NSLog(@"-(void) setDataTaskDidReceiveData:(id)");
}

-(void) setDataTaskWillCacheResponse:(id) {
	%orig;
	NSLog(@"-(void) setDataTaskWillCacheResponse:(id)");
}

-(void) setDownloadTaskDidWriteData:(id) {
	%orig;
	NSLog(@"-(void) setDownloadTaskDidWriteData:(id)");
}

-(void) setDownloadTaskDidResume:(id) {
	%orig;
	NSLog(@"-(void) setDownloadTaskDidResume:(id)");
}

-(id) taskWillPerformHTTPRedirection {
	%orig;
	NSLog(@"-(id) taskWillPerformHTTPRedirection");
}

-(id) dataTaskDidReceiveResponse {
	%orig;
	NSLog(@"-(id) dataTaskDidReceiveResponse");
}

-(id) dataTaskWillCacheResponse {
	%orig;
	NSLog(@"-(id) dataTaskWillCacheResponse");
}

-(id) didFinishEventsForBackgroundURLSession {
	%orig;
	NSLog(@"-(id) didFinishEventsForBackgroundURLSession");
}

-(id) sessionDidBecomeInvalid {
	%orig;
	NSLog(@"-(id) sessionDidBecomeInvalid");
}

-(id) sessionDidReceiveAuthenticationChallenge {
	%orig;
	NSLog(@"-(id) sessionDidReceiveAuthenticationChallenge");
}

-(id) taskDidReceiveAuthenticationChallenge {
	%orig;
	NSLog(@"-(id) taskDidReceiveAuthenticationChallenge");
}

-(id) taskNeedNewBodyStream {
	%orig;
	NSLog(@"-(id) taskNeedNewBodyStream");
}

-(id) taskDidSendBodyData {
	%orig;
	NSLog(@"-(id) taskDidSendBodyData");
}

-(void) removeDelegateForTask:(id) {
	%orig;
	NSLog(@"-(void) removeDelegateForTask:(id)");
}

-(id) taskDidComplete {
	%orig;
	NSLog(@"-(id) taskDidComplete");
}

-(id) dataTaskDidBecomeDownloadTask {
	%orig;
	NSLog(@"-(id) dataTaskDidBecomeDownloadTask");
}

-(id) dataTaskDidReceiveData {
	%orig;
	NSLog(@"-(id) dataTaskDidReceiveData");
}

-(id) downloadTaskDidWriteData {
	%orig;
	NSLog(@"-(id) downloadTaskDidWriteData");
}

-(id) downloadTaskDidResume {
	%orig;
	NSLog(@"-(id) downloadTaskDidResume");
}

-(void) invalidateSessionCancelingTasks:(bool) {
	%orig;
	NSLog(@"-(void) invalidateSessionCancelingTasks:(bool)");
}

-(id) uploadTaskWithRequest:(id) fromFile:(id) progress:(id*) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) uploadTaskWithRequest:(id) fromFile:(id) progress:(id*) completionHandler:(id)");
}

-(id) uploadTaskWithRequest:(id) fromData:(id) progress:(id*) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) uploadTaskWithRequest:(id) fromData:(id) progress:(id*) completionHandler:(id)");
}

-(id) downloadTaskWithResumeData:(id) progress:(id*) destination:(id) completionHandler:(?) {
	%orig;
	NSLog(@"-(id) downloadTaskWithResumeData:(id) progress:(id*) destination:(id) completionHandler:(?)");
}

-(id) uploadProgressForTask:(id) {
	%orig;
	NSLog(@"-(id) uploadProgressForTask:(id)");
}

-(id) downloadProgressForTask:(id) {
	%orig;
	NSLog(@"-(id) downloadProgressForTask:(id)");
}

-(void) setSessionDidBecomeInvalidBlock:(id) {
	%orig;
	NSLog(@"-(void) setSessionDidBecomeInvalidBlock:(id)");
}

-(void) setSessionDidReceiveAuthenticationChallengeBlock:(id) {
	%orig;
	NSLog(@"-(void) setSessionDidReceiveAuthenticationChallengeBlock:(id)");
}

-(void) setDidFinishEventsForBackgroundURLSessionBlock:(id) {
	%orig;
	NSLog(@"-(void) setDidFinishEventsForBackgroundURLSessionBlock:(id)");
}

-(void) setTaskNeedNewBodyStreamBlock:(id) {
	%orig;
	NSLog(@"-(void) setTaskNeedNewBodyStreamBlock:(id)");
}

-(void) setTaskWillPerformHTTPRedirectionBlock:(id) {
	%orig;
	NSLog(@"-(void) setTaskWillPerformHTTPRedirectionBlock:(id)");
}

-(void) setTaskDidReceiveAuthenticationChallengeBlock:(id) {
	%orig;
	NSLog(@"-(void) setTaskDidReceiveAuthenticationChallengeBlock:(id)");
}

-(void) setTaskDidSendBodyDataBlock:(id) {
	%orig;
	NSLog(@"-(void) setTaskDidSendBodyDataBlock:(id)");
}

-(void) setTaskDidCompleteBlock:(id) {
	%orig;
	NSLog(@"-(void) setTaskDidCompleteBlock:(id)");
}

-(void) setDataTaskDidReceiveResponseBlock:(id) {
	%orig;
	NSLog(@"-(void) setDataTaskDidReceiveResponseBlock:(id)");
}

-(void) setDataTaskDidBecomeDownloadTaskBlock:(id) {
	%orig;
	NSLog(@"-(void) setDataTaskDidBecomeDownloadTaskBlock:(id)");
}

-(void) setDataTaskDidReceiveDataBlock:(id) {
	%orig;
	NSLog(@"-(void) setDataTaskDidReceiveDataBlock:(id)");
}

-(void) setDataTaskWillCacheResponseBlock:(id) {
	%orig;
	NSLog(@"-(void) setDataTaskWillCacheResponseBlock:(id)");
}

-(void) setDownloadTaskDidFinishDownloadingBlock:(id) {
	%orig;
	NSLog(@"-(void) setDownloadTaskDidFinishDownloadingBlock:(id)");
}

-(void) setDownloadTaskDidWriteDataBlock:(id) {
	%orig;
	NSLog(@"-(void) setDownloadTaskDidWriteDataBlock:(id)");
}

-(void) setDownloadTaskDidResumeBlock:(id) {
	%orig;
	NSLog(@"-(void) setDownloadTaskDidResumeBlock:(id)");
}

-(void) URLSession:(id) task:(id) didCompleteWithError:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) didCompleteWithError:(id)");
}

-(void) URLSession:(id) didBecomeInvalidWithError:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) didBecomeInvalidWithError:(id)");
}

-(void) URLSession:(id) didReceiveChallenge:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) didReceiveChallenge:(id) completionHandler:(id)");
}

-(void) URLSessionDidFinishEventsForBackgroundURLSession:(id) {
	%orig;
	NSLog(@"-(void) URLSessionDidFinishEventsForBackgroundURLSession:(id)");
}

-(void) URLSession:(id) task:(id) willPerformHTTPRedirection:(id) newRequest:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) willPerformHTTPRedirection:(id) newRequest:(id) completionHandler:(id)");
}

-(void) URLSession:(id) task:(id) didReceiveChallenge:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) didReceiveChallenge:(id) completionHandler:(id)");
}

-(void) URLSession:(id) task:(id) needNewBodyStream:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) needNewBodyStream:(id)");
}

-(void) URLSession:(id) task:(id) didSendBodyData:(long long) totalBytesSent:(long long) totalBytesExpectedToSend:(long long) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) didSendBodyData:(long long) totalBytesSent:(long long) totalBytesExpectedToSend:(long long)");
}

-(void) URLSession:(id) dataTask:(id) didReceiveResponse:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) dataTask:(id) didReceiveResponse:(id) completionHandler:(id)");
}

-(void) URLSession:(id) dataTask:(id) didBecomeDownloadTask:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) dataTask:(id) didBecomeDownloadTask:(id)");
}

-(void) URLSession:(id) dataTask:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) dataTask:(id) didReceiveData:(id)");
}

-(void) URLSession:(id) dataTask:(id) willCacheResponse:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) dataTask:(id) willCacheResponse:(id) completionHandler:(id)");
}

-(id) dataTaskWithRequest:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) dataTaskWithRequest:(id) completionHandler:(id)");
}

-(id) tasks {
	%orig;
	NSLog(@"-(id) tasks");
}

-(id) downloadTasks {
	%orig;
	NSLog(@"-(id) downloadTasks");
}

-(void) setSessionConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setSessionConfiguration:(id)");
}

-(id) completionGroup {
	%orig;
	NSLog(@"-(id) completionGroup");
}

-(void) setCompletionGroup:(id) {
	%orig;
	NSLog(@"-(void) setCompletionGroup:(id)");
}

-(void) setLock:(id) {
	%orig;
	NSLog(@"-(void) setLock:(id)");
}

-(id) completionQueue {
	%orig;
	NSLog(@"-(id) completionQueue");
}

-(void) setCompletionQueue:(id) {
	%orig;
	NSLog(@"-(void) setCompletionQueue:(id)");
}

-(id) sessionConfiguration {
	%orig;
	NSLog(@"-(id) sessionConfiguration");
}

-(void) URLSession:(id) downloadTask:(id) didFinishDownloadingToURL:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) downloadTask:(id) didFinishDownloadingToURL:(id)");
}

-(void) URLSession:(id) downloadTask:(id) didWriteData:(long long) totalBytesWritten:(long long) totalBytesExpectedToWrite:(long long) {
	%orig;
	NSLog(@"-(void) URLSession:(id) downloadTask:(id) didWriteData:(long long) totalBytesWritten:(long long) totalBytesExpectedToWrite:(long long)");
}

-(void) URLSession:(id) downloadTask:(id) didResumeAtOffset:(long long) expectedTotalBytes:(long long) {
	%orig;
	NSLog(@"-(void) URLSession:(id) downloadTask:(id) didResumeAtOffset:(long long) expectedTotalBytes:(long long)");
}

-(id) reachabilityManager {
	%orig;
	NSLog(@"-(id) reachabilityManager");
}

-(void) setReachabilityManager:(id) {
	%orig;
	NSLog(@"-(void) setReachabilityManager:(id)");
}

-(id) securityPolicy {
	%orig;
	NSLog(@"-(id) securityPolicy");
}

-(void) setSecurityPolicy:(id) {
	%orig;
	NSLog(@"-(void) setSecurityPolicy:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) respondsToSelector:(SEL) {
	%orig;
	NSLog(@"-(bool) respondsToSelector:(SEL)");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(id) lock {
	%orig;
	NSLog(@"-(id) lock");
}

-(void) setOperationQueue:(id) {
	%orig;
	NSLog(@"-(void) setOperationQueue:(id)");
}

-(id) operationQueue {
	%orig;
	NSLog(@"-(id) operationQueue");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook ABQAFHTTPSessionManager

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

+(id) manager {
	%orig;
	NSLog(@"+(id) manager");
}

-(id) initWithBaseURL:(id) sessionConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithBaseURL:(id) sessionConfiguration:(id)");
}

-(void) setRequestSerializer:(id) {
	%orig;
	NSLog(@"-(void) setRequestSerializer:(id)");
}

-(void) setResponseSerializer:(id) {
	%orig;
	NSLog(@"-(void) setResponseSerializer:(id)");
}

-(id) requestSerializer {
	%orig;
	NSLog(@"-(id) requestSerializer");
}

-(id) GET:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) GET:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) HEAD:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) HEAD:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) POST:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) POST:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) POST:(id) parameters:(id) constructingBodyWithBlock:(id) success:(?) failure:(id) {
	%orig;
	NSLog(@"-(id) POST:(id) parameters:(id) constructingBodyWithBlock:(id) success:(?) failure:(id)");
}

-(id) PUT:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) PUT:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) PATCH:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) PATCH:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) DELETE:(id) parameters:(id) success:(id) failure:(?) {
	%orig;
	NSLog(@"-(id) DELETE:(id) parameters:(id) success:(id) failure:(?)");
}

-(id) initWithSessionConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithSessionConfiguration:(id)");
}

-(void) setBaseURL:(id) {
	%orig;
	NSLog(@"-(void) setBaseURL:(id)");
}

-(id) initWithBaseURL:(id) {
	%orig;
	NSLog(@"-(id) initWithBaseURL:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) baseURL {
	%orig;
	NSLog(@"-(id) baseURL");
}

%end

%hook ABQAFURLSessionManagerTaskDelegate

-(id) downloadTaskDidFinishDownloading {
	%orig;
	NSLog(@"-(id) downloadTaskDidFinishDownloading");
}

-(void) setDownloadTaskDidFinishDownloading:(id) {
	%orig;
	NSLog(@"-(void) setDownloadTaskDidFinishDownloading:(id)");
}

-(void) setDownloadFileURL:(id) {
	%orig;
	NSLog(@"-(void) setDownloadFileURL:(id)");
}

-(id) downloadFileURL {
	%orig;
	NSLog(@"-(id) downloadFileURL");
}

-(void) URLSession:(id) task:(id) didCompleteWithError:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) didCompleteWithError:(id)");
}

-(void) URLSession:(id) task:(id) didSendBodyData:(long long) totalBytesSent:(long long) totalBytesExpectedToSend:(long long) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) didSendBodyData:(long long) totalBytesSent:(long long) totalBytesExpectedToSend:(long long)");
}

-(void) URLSession:(id) dataTask:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) dataTask:(id) didReceiveData:(id)");
}

-(void) setMutableData:(id) {
	%orig;
	NSLog(@"-(void) setMutableData:(id)");
}

-(id) mutableData {
	%orig;
	NSLog(@"-(id) mutableData");
}

-(id) downloadProgress {
	%orig;
	NSLog(@"-(id) downloadProgress");
}

-(void) setDownloadProgress:(id) {
	%orig;
	NSLog(@"-(void) setDownloadProgress:(id)");
}

-(void) URLSession:(id) downloadTask:(id) didFinishDownloadingToURL:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) downloadTask:(id) didFinishDownloadingToURL:(id)");
}

-(void) URLSession:(id) downloadTask:(id) didWriteData:(long long) totalBytesWritten:(long long) totalBytesExpectedToWrite:(long long) {
	%orig;
	NSLog(@"-(void) URLSession:(id) downloadTask:(id) didWriteData:(long long) totalBytesWritten:(long long) totalBytesExpectedToWrite:(long long)");
}

-(void) URLSession:(id) downloadTask:(id) didResumeAtOffset:(long long) expectedTotalBytes:(long long) {
	%orig;
	NSLog(@"-(void) URLSession:(id) downloadTask:(id) didResumeAtOffset:(long long) expectedTotalBytes:(long long)");
}

-(void) setUploadProgress:(id) {
	%orig;
	NSLog(@"-(void) setUploadProgress:(id)");
}

-(id) uploadProgress {
	%orig;
	NSLog(@"-(id) uploadProgress");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) completionHandler {
	%orig;
	NSLog(@"-(id) completionHandler");
}

-(void) setCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setCompletionHandler:(id)");
}

-(id) manager {
	%orig;
	NSLog(@"-(id) manager");
}

-(void) setManager:(id) {
	%orig;
	NSLog(@"-(void) setManager:(id)");
}

%end

%hook ABQDDLogFileInfo

+(id) logFileWithPath:(id) {
	%orig;
	NSLog(@"+(id) logFileWithPath:(id)");
}

-(long long) reverseCompareByCreationDate:(id) {
	%orig;
	NSLog(@"-(long long) reverseCompareByCreationDate:(id)");
}

-(void) setIsArchived:(bool) {
	%orig;
	NSLog(@"-(void) setIsArchived:(bool)");
}

-(bool) hasExtendedAttributeWithName:(id) {
	%orig;
	NSLog(@"-(bool) hasExtendedAttributeWithName:(id)");
}

-(void) addExtendedAttributeWithName:(id) {
	%orig;
	NSLog(@"-(void) addExtendedAttributeWithName:(id)");
}

-(void) removeExtendedAttributeWithName:(id) {
	%orig;
	NSLog(@"-(void) removeExtendedAttributeWithName:(id)");
}

-(void) renameFile:(id) {
	%orig;
	NSLog(@"-(void) renameFile:(id)");
}

-(long long) reverseCompareByModificationDate:(id) {
	%orig;
	NSLog(@"-(long long) reverseCompareByModificationDate:(id)");
}

-(double) age {
	%orig;
	NSLog(@"-(double) age");
}

-(bool) isArchived {
	%orig;
	NSLog(@"-(bool) isArchived");
}

-(id) creationDate {
	%orig;
	NSLog(@"-(id) creationDate");
}

-(id) fileName {
	%orig;
	NSLog(@"-(id) fileName");
}

-(id) fileAttributes {
	%orig;
	NSLog(@"-(id) fileAttributes");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(unsigned long long) fileSize {
	%orig;
	NSLog(@"-(unsigned long long) fileSize");
}

-(id) initWithFilePath:(id) {
	%orig;
	NSLog(@"-(id) initWithFilePath:(id)");
}

-(id) filePath {
	%orig;
	NSLog(@"-(id) filePath");
}

-(id) modificationDate {
	%orig;
	NSLog(@"-(id) modificationDate");
}

%end

%hook ABQDDLogFileFormatterDefault

-(id) formatLogMessage:(id) {
	%orig;
	NSLog(@"-(id) formatLogMessage:(id)");
}

-(id) initWithDateFormatter:(id) {
	%orig;
	NSLog(@"-(id) initWithDateFormatter:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDLogFileManagerDefault

-(id) initWithLogsDirectory:(id) {
	%orig;
	NSLog(@"-(id) initWithLogsDirectory:(id)");
}

-(id) defaultLogsDirectory {
	%orig;
	NSLog(@"-(id) defaultLogsDirectory");
}

-(unsigned long long) maximumNumberOfLogFiles {
	%orig;
	NSLog(@"-(unsigned long long) maximumNumberOfLogFiles");
}

-(void) deleteOldLogFiles {
	%orig;
	NSLog(@"-(void) deleteOldLogFiles");
}

-(id) sortedLogFileInfos {
	%orig;
	NSLog(@"-(id) sortedLogFileInfos");
}

-(id) logFileDateFormatter {
	%orig;
	NSLog(@"-(id) logFileDateFormatter");
}

-(id) logsDirectory {
	%orig;
	NSLog(@"-(id) logsDirectory");
}

-(bool) isLogFile:(id) {
	%orig;
	NSLog(@"-(bool) isLogFile:(id)");
}

-(id) unsortedLogFilePaths {
	%orig;
	NSLog(@"-(id) unsortedLogFilePaths");
}

-(id) unsortedLogFileInfos {
	%orig;
	NSLog(@"-(id) unsortedLogFileInfos");
}

-(id) newLogFileName {
	%orig;
	NSLog(@"-(id) newLogFileName");
}

-(id) unsortedLogFileNames {
	%orig;
	NSLog(@"-(id) unsortedLogFileNames");
}

-(id) sortedLogFilePaths {
	%orig;
	NSLog(@"-(id) sortedLogFilePaths");
}

-(id) sortedLogFileNames {
	%orig;
	NSLog(@"-(id) sortedLogFileNames");
}

-(id) createNewLogFile {
	%orig;
	NSLog(@"-(id) createNewLogFile");
}

-(void) setMaximumNumberOfLogFiles:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaximumNumberOfLogFiles:(unsigned long long)");
}

-(id) applicationName {
	%orig;
	NSLog(@"-(id) applicationName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

%end

%hook ABQDDTTYLoggerColorProfile

-(id) initWithForegroundColor:(id) backgroundColor:(id) flag:(int) context:(int) {
	%orig;
	NSLog(@"-(id) initWithForegroundColor:(id) backgroundColor:(id) flag:(int) context:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook ABQDDASLLogCapture

+(void) captureAslLogs {
	%orig;
	NSLog(@"+(void) captureAslLogs");
}

+(void) configureAslQuery:(__aslmsg*) {
	%orig;
	NSLog(@"+(void) configureAslQuery:(__aslmsg*)");
}

+(void) aslMessageRecieved:(__aslmsg*) {
	%orig;
	NSLog(@"+(void) aslMessageRecieved:(__aslmsg*)");
}

+(int) captureLogLevel {
	%orig;
	NSLog(@"+(int) captureLogLevel");
}

+(void) setCaptureLogLevel:(int) {
	%orig;
	NSLog(@"+(void) setCaptureLogLevel:(int)");
}

+(void) stop {
	%orig;
	NSLog(@"+(void) stop");
}

+(void) start {
	%orig;
	NSLog(@"+(void) start");
}

%end

%hook ABQDDDispatchQueueLogFormatter

-(void) willRemoveFromLogger:(id) {
	%orig;
	NSLog(@"-(void) willRemoveFromLogger:(id)");
}

-(void) didAddToLogger:(id) {
	%orig;
	NSLog(@"-(void) didAddToLogger:(id)");
}

-(unsigned long long) minQueueLength {
	%orig;
	NSLog(@"-(unsigned long long) minQueueLength");
}

-(unsigned long long) maxQueueLength {
	%orig;
	NSLog(@"-(unsigned long long) maxQueueLength");
}

-(id) queueThreadLabelForLogMessage:(id) {
	%orig;
	NSLog(@"-(id) queueThreadLabelForLogMessage:(id)");
}

-(id) replacementStringForQueueLabel:(id) {
	%orig;
	NSLog(@"-(id) replacementStringForQueueLabel:(id)");
}

-(void) setReplacementString:(id) forQueueLabel:(id) {
	%orig;
	NSLog(@"-(void) setReplacementString:(id) forQueueLabel:(id)");
}

-(void) setMinQueueLength:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMinQueueLength:(unsigned long long)");
}

-(void) setMaxQueueLength:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaxQueueLength:(unsigned long long)");
}

-(id) formatLogMessage:(id) {
	%orig;
	NSLog(@"-(id) formatLogMessage:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) stringFromDate:(id) {
	%orig;
	NSLog(@"-(id) stringFromDate:(id)");
}

%end

%hook ABQDDLoggingContextSet

-(void) removeFromSet:(int) {
	%orig;
	NSLog(@"-(void) removeFromSet:(int)");
}

-(id) currentSet {
	%orig;
	NSLog(@"-(id) currentSet");
}

-(bool) isInSet:(int) {
	%orig;
	NSLog(@"-(bool) isInSet:(int)");
}

-(void) addToSet:(int) {
	%orig;
	NSLog(@"-(void) addToSet:(int)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDContextBlacklistFilterLogFormatter

-(bool) isOnBlacklist:(int) {
	%orig;
	NSLog(@"-(bool) isOnBlacklist:(int)");
}

-(void) addToBlacklist:(int) {
	%orig;
	NSLog(@"-(void) addToBlacklist:(int)");
}

-(void) removeFromBlacklist:(int) {
	%orig;
	NSLog(@"-(void) removeFromBlacklist:(int)");
}

-(id) formatLogMessage:(id) {
	%orig;
	NSLog(@"-(id) formatLogMessage:(id)");
}

-(id) blacklist {
	%orig;
	NSLog(@"-(id) blacklist");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDContextWhitelistFilterLogFormatter

-(bool) isOnWhitelist:(int) {
	%orig;
	NSLog(@"-(bool) isOnWhitelist:(int)");
}

-(void) addToWhitelist:(int) {
	%orig;
	NSLog(@"-(void) addToWhitelist:(int)");
}

-(void) removeFromWhitelist:(int) {
	%orig;
	NSLog(@"-(void) removeFromWhitelist:(int)");
}

-(id) formatLogMessage:(id) {
	%orig;
	NSLog(@"-(id) formatLogMessage:(id)");
}

-(id) whitelist {
	%orig;
	NSLog(@"-(id) whitelist");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDLogMessage

-(id) initWithLogMsg:(id) level:(int) flag:(int) context:(int) file:(const char*) function:(const char*) line:(int) tag:(id) options:(int) {
	%orig;
	NSLog(@"-(id) initWithLogMsg:(id) level:(int) flag:(int) context:(int) file:(const char*) function:(const char*) line:(int) tag:(id) options:(int)");
}

-(id) initWithLogMsg:(id) level:(int) flag:(int) context:(int) file:(const char*) function:(const char*) line:(int) tag:(id) options:(int) timestamp:(id) {
	%orig;
	NSLog(@"-(id) initWithLogMsg:(id) level:(int) flag:(int) context:(int) file:(const char*) function:(const char*) line:(int) tag:(id) options:(int) timestamp:(id)");
}

-(id) methodName {
	%orig;
	NSLog(@"-(id) methodName");
}

-(id) fileName {
	%orig;
	NSLog(@"-(id) fileName");
}

-(id) threadID {
	%orig;
	NSLog(@"-(id) threadID");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook ABQDDLoggerNode

+(id) nodeWithLogger:(id) loggerQueue:(id) logLevel:(int) {
	%orig;
	NSLog(@"+(id) nodeWithLogger:(id) loggerQueue:(id) logLevel:(int)");
}

-(id) initWithLogger:(id) loggerQueue:(id) logLevel:(int) {
	%orig;
	NSLog(@"-(id) initWithLogger:(id) loggerQueue:(id) logLevel:(int)");
}

-(int) logLevel {
	%orig;
	NSLog(@"-(int) logLevel");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDLog

+(void) removeLogger:(id) {
	%orig;
	NSLog(@"+(void) removeLogger:(id)");
}

+(void) log:(bool) level:(int) flag:(int) context:(int) file:(const char*) function:(const char*) line:(int) tag:(id) format:(id) {
	%orig;
	NSLog(@"+(void) log:(bool) level:(int) flag:(int) context:(int) file:(const char*) function:(const char*) line:(int) tag:(id) format:(id)");
}

+(void) addLogger:(id) {
	%orig;
	NSLog(@"+(void) addLogger:(id)");
}

+(id) allLoggers {
	%orig;
	NSLog(@"+(id) allLoggers");
}

+(void) addLogger:(id) withLogLevel:(int) {
	%orig;
	NSLog(@"+(void) addLogger:(id) withLogLevel:(int)");
}

+(void) lt_addLogger:(id) logLevel:(int) {
	%orig;
	NSLog(@"+(void) lt_addLogger:(id) logLevel:(int)");
}

+(void) lt_removeLogger:(id) {
	%orig;
	NSLog(@"+(void) lt_removeLogger:(id)");
}

+(void) lt_removeAllLoggers {
	%orig;
	NSLog(@"+(void) lt_removeAllLoggers");
}

+(id) lt_allLoggers {
	%orig;
	NSLog(@"+(id) lt_allLoggers");
}

+(void) lt_log:(id) {
	%orig;
	NSLog(@"+(void) lt_log:(id)");
}

+(void) queueLogMessage:(id) asynchronously:(bool) {
	%orig;
	NSLog(@"+(void) queueLogMessage:(id) asynchronously:(bool)");
}

+(void) lt_flush {
	%orig;
	NSLog(@"+(void) lt_flush");
}

+(bool) isRegisteredClass:(Class) {
	%orig;
	NSLog(@"+(bool) isRegisteredClass:(Class)");
}

+(id) registeredClasses {
	%orig;
	NSLog(@"+(id) registeredClasses");
}

+(int) logLevelForClass:(Class) {
	%orig;
	NSLog(@"+(int) logLevelForClass:(Class)");
}

+(void) setLogLevel:(int) forClass:(Class) {
	%orig;
	NSLog(@"+(void) setLogLevel:(int) forClass:(Class)");
}

+(void) removeAllLoggers {
	%orig;
	NSLog(@"+(void) removeAllLoggers");
}

+(void) log:(bool) level:(int) flag:(int) context:(int) file:(const char*) function:(const char*) line:(int) tag:(id) format:(id) args:(char*) {
	%orig;
	NSLog(@"+(void) log:(bool) level:(int) flag:(int) context:(int) file:(const char*) function:(const char*) line:(int) tag:(id) format:(id) args:(char*)");
}

+(void) log:(bool) message:(id) {
	%orig;
	NSLog(@"+(void) log:(bool) message:(id)");
}

+(id) registeredClassNames {
	%orig;
	NSLog(@"+(id) registeredClassNames");
}

+(int) logLevelForClassWithName:(id) {
	%orig;
	NSLog(@"+(int) logLevelForClassWithName:(id)");
}

+(void) setLogLevel:(int) forClassWithName:(id) {
	%orig;
	NSLog(@"+(void) setLogLevel:(int) forClassWithName:(id)");
}

+(void) flushLog {
	%orig;
	NSLog(@"+(void) flushLog");
}

+(id) loggingQueue {
	%orig;
	NSLog(@"+(id) loggingQueue");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(void) applicationWillTerminate:(id) {
	%orig;
	NSLog(@"+(void) applicationWillTerminate:(id)");
}

%end

%hook ABQDDMultiFormatter

-(id) logMessageForLine:(id) originalMessage:(id) {
	%orig;
	NSLog(@"-(id) logMessageForLine:(id) originalMessage:(id)");
}

-(id) formatters {
	%orig;
	NSLog(@"-(id) formatters");
}

-(void) addFormatter:(id) {
	%orig;
	NSLog(@"-(void) addFormatter:(id)");
}

-(void) removeFormatter:(id) {
	%orig;
	NSLog(@"-(void) removeFormatter:(id)");
}

-(void) removeAllFormatters {
	%orig;
	NSLog(@"-(void) removeAllFormatters");
}

-(bool) isFormattingWithFormatter:(id) {
	%orig;
	NSLog(@"-(bool) isFormattingWithFormatter:(id)");
}

-(id) formatLogMessage:(id) {
	%orig;
	NSLog(@"-(id) formatLogMessage:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQCLJLogger

+(id) sharedLogger {
	%orig;
	NSLog(@"+(id) sharedLogger");
}

-(void) logVerbose:(id) {
	%orig;
	NSLog(@"-(void) logVerbose:(id)");
}

-(id) aslLogger {
	%orig;
	NSLog(@"-(id) aslLogger");
}

-(id) ttyLogger {
	%orig;
	NSLog(@"-(id) ttyLogger");
}

-(void) setAslLogger:(id) {
	%orig;
	NSLog(@"-(void) setAslLogger:(id)");
}

-(void) setTtyLogger:(id) {
	%orig;
	NSLog(@"-(void) setTtyLogger:(id)");
}

-(id) currentRemoteLogger {
	%orig;
	NSLog(@"-(id) currentRemoteLogger");
}

-(void) logWarn:(id) {
	%orig;
	NSLog(@"-(void) logWarn:(id)");
}

-(void) addLocalLogger {
	%orig;
	NSLog(@"-(void) addLocalLogger");
}

-(void) removeLocalLogger {
	%orig;
	NSLog(@"-(void) removeLocalLogger");
}

-(void) addRemoteLoggerWithAppName:(id) withLogIPAddress:(id) {
	%orig;
	NSLog(@"-(void) addRemoteLoggerWithAppName:(id) withLogIPAddress:(id)");
}

-(void) logError:(id) {
	%orig;
	NSLog(@"-(void) logError:(id)");
}

-(void) logInfo:(id) {
	%orig;
	NSLog(@"-(void) logInfo:(id)");
}

-(void) logDebug:(id) {
	%orig;
	NSLog(@"-(void) logDebug:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDAbstractLogger

-(bool) isOnGlobalLoggingQueue {
	%orig;
	NSLog(@"-(bool) isOnGlobalLoggingQueue");
}

-(bool) isOnInternalLoggerQueue {
	%orig;
	NSLog(@"-(bool) isOnInternalLoggerQueue");
}

-(id) logFormatter {
	%orig;
	NSLog(@"-(id) logFormatter");
}

-(void) setLogFormatter:(id) {
	%orig;
	NSLog(@"-(void) setLogFormatter:(id)");
}

-(id) loggerName {
	%orig;
	NSLog(@"-(id) loggerName");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(id) loggerQueue {
	%orig;
	NSLog(@"-(id) loggerQueue");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDFileLogger

-(void) willRemoveLogger {
	%orig;
	NSLog(@"-(void) willRemoveLogger");
}

-(id) loggerName {
	%orig;
	NSLog(@"-(id) loggerName");
}

-(id) initWithLogFileManager:(id) {
	%orig;
	NSLog(@"-(id) initWithLogFileManager:(id)");
}

-(void) maybeRollLogFileDueToSize {
	%orig;
	NSLog(@"-(void) maybeRollLogFileDueToSize");
}

-(void) maybeRollLogFileDueToAge {
	%orig;
	NSLog(@"-(void) maybeRollLogFileDueToAge");
}

-(void) rollLogFileWithCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) rollLogFileWithCompletionBlock:(id)");
}

-(void) rollLogFileNow {
	%orig;
	NSLog(@"-(void) rollLogFileNow");
}

-(void) scheduleTimerToRollLogFileDueToAge {
	%orig;
	NSLog(@"-(void) scheduleTimerToRollLogFileDueToAge");
}

-(id) currentLogFileInfo {
	%orig;
	NSLog(@"-(id) currentLogFileInfo");
}

-(id) currentLogFileHandle {
	%orig;
	NSLog(@"-(id) currentLogFileHandle");
}

-(unsigned long long) maximumFileSize {
	%orig;
	NSLog(@"-(unsigned long long) maximumFileSize");
}

-(void) setMaximumFileSize:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaximumFileSize:(unsigned long long)");
}

-(double) rollingFrequency {
	%orig;
	NSLog(@"-(double) rollingFrequency");
}

-(void) setRollingFrequency:(double) {
	%orig;
	NSLog(@"-(void) setRollingFrequency:(double)");
}

-(void) rollLogFile {
	%orig;
	NSLog(@"-(void) rollLogFile");
}

-(id) logFileManager {
	%orig;
	NSLog(@"-(id) logFileManager");
}

-(bool) doNotReuseLogFiles {
	%orig;
	NSLog(@"-(bool) doNotReuseLogFiles");
}

-(void) setDoNotReuseLogFiles:(bool) {
	%orig;
	NSLog(@"-(void) setDoNotReuseLogFiles:(bool)");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDTTYLogger

+(void) getRed:(double*) green:(double*) blue:(double*) fromColor:(id) {
	%orig;
	NSLog(@"+(void) getRed:(double*) green:(double*) blue:(double*) fromColor:(id)");
}

+(void) initialize_colors_256 {
	%orig;
	NSLog(@"+(void) initialize_colors_256");
}

+(void) initialize_colors_16 {
	%orig;
	NSLog(@"+(void) initialize_colors_16");
}

+(unsigned long long) codeIndexForColor:(id) {
	%orig;
	NSLog(@"+(unsigned long long) codeIndexForColor:(id)");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) loggerName {
	%orig;
	NSLog(@"-(id) loggerName");
}

-(void) setForegroundColor:(id) backgroundColor:(id) forFlag:(int) {
	%orig;
	NSLog(@"-(void) setForegroundColor:(id) backgroundColor:(id) forFlag:(int)");
}

-(void) loadDefaultColorProfiles {
	%orig;
	NSLog(@"-(void) loadDefaultColorProfiles");
}

-(void) setForegroundColor:(id) backgroundColor:(id) forFlag:(int) context:(int) {
	%orig;
	NSLog(@"-(void) setForegroundColor:(id) backgroundColor:(id) forFlag:(int) context:(int)");
}

-(void) clearColorsForFlag:(int) context:(int) {
	%orig;
	NSLog(@"-(void) clearColorsForFlag:(int) context:(int)");
}

-(bool) colorsEnabled {
	%orig;
	NSLog(@"-(bool) colorsEnabled");
}

-(void) setColorsEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setColorsEnabled:(bool)");
}

-(void) setForegroundColor:(id) backgroundColor:(id) forTag:(id) {
	%orig;
	NSLog(@"-(void) setForegroundColor:(id) backgroundColor:(id) forTag:(id)");
}

-(void) clearColorsForFlag:(int) {
	%orig;
	NSLog(@"-(void) clearColorsForFlag:(int)");
}

-(void) clearColorsForTag:(id) {
	%orig;
	NSLog(@"-(void) clearColorsForTag:(id)");
}

-(void) clearColorsForAllFlags {
	%orig;
	NSLog(@"-(void) clearColorsForAllFlags");
}

-(void) clearColorsForAllTags {
	%orig;
	NSLog(@"-(void) clearColorsForAllTags");
}

-(void) clearAllColors {
	%orig;
	NSLog(@"-(void) clearAllColors");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDDAbstractDatabaseLogger

-(void) didAddLogger {
	%orig;
	NSLog(@"-(void) didAddLogger");
}

-(void) willRemoveLogger {
	%orig;
	NSLog(@"-(void) willRemoveLogger");
}

-(void) destroySaveTimer {
	%orig;
	NSLog(@"-(void) destroySaveTimer");
}

-(void) destroyDeleteTimer {
	%orig;
	NSLog(@"-(void) destroyDeleteTimer");
}

-(void) db_saveAndDelete {
	%orig;
	NSLog(@"-(void) db_saveAndDelete");
}

-(void) db_save {
	%orig;
	NSLog(@"-(void) db_save");
}

-(void) db_delete {
	%orig;
	NSLog(@"-(void) db_delete");
}

-(void) performSaveAndSuspendSaveTimer {
	%orig;
	NSLog(@"-(void) performSaveAndSuspendSaveTimer");
}

-(void) performDelete {
	%orig;
	NSLog(@"-(void) performDelete");
}

-(void) updateDeleteTimer {
	%orig;
	NSLog(@"-(void) updateDeleteTimer");
}

-(void) createSuspendedSaveTimer {
	%orig;
	NSLog(@"-(void) createSuspendedSaveTimer");
}

-(void) updateAndResumeSaveTimer {
	%orig;
	NSLog(@"-(void) updateAndResumeSaveTimer");
}

-(void) createAndStartDeleteTimer {
	%orig;
	NSLog(@"-(void) createAndStartDeleteTimer");
}

-(bool) db_log:(id) {
	%orig;
	NSLog(@"-(bool) db_log:(id)");
}

-(unsigned long long) saveThreshold {
	%orig;
	NSLog(@"-(unsigned long long) saveThreshold");
}

-(void) setSaveThreshold:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSaveThreshold:(unsigned long long)");
}

-(double) saveInterval {
	%orig;
	NSLog(@"-(double) saveInterval");
}

-(void) setSaveInterval:(double) {
	%orig;
	NSLog(@"-(void) setSaveInterval:(double)");
}

-(double) deleteInterval {
	%orig;
	NSLog(@"-(double) deleteInterval");
}

-(void) setDeleteInterval:(double) {
	%orig;
	NSLog(@"-(void) setDeleteInterval:(double)");
}

-(bool) deleteOnEverySave {
	%orig;
	NSLog(@"-(bool) deleteOnEverySave");
}

-(void) setDeleteOnEverySave:(bool) {
	%orig;
	NSLog(@"-(void) setDeleteOnEverySave:(bool)");
}

-(void) savePendingLogEntries {
	%orig;
	NSLog(@"-(void) savePendingLogEntries");
}

-(void) deleteOldLogEntries {
	%orig;
	NSLog(@"-(void) deleteOldLogEntries");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(void) setMaxAge:(double) {
	%orig;
	NSLog(@"-(void) setMaxAge:(double)");
}

-(double) maxAge {
	%orig;
	NSLog(@"-(double) maxAge");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) flush {
	%orig;
	NSLog(@"-(void) flush");
}

%end

%hook ABQDDASLLogger

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) loggerName {
	%orig;
	NSLog(@"-(id) loggerName");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook ABQRemoteLogger

-(int) loggingSocket {
	%orig;
	NSLog(@"-(int) loggingSocket");
}

-(sockaddr_in) addr {
	%orig;
	NSLog(@"-(sockaddr_in) addr");
}

-(void) setAddr:(sockaddr_in) {
	%orig;
	NSLog(@"-(void) setAddr:(sockaddr_in)");
}

-(void) setLoggingSocket:(int) {
	%orig;
	NSLog(@"-(void) setLoggingSocket:(int)");
}

-(id) initWithAppName:(id) ipAddress:(id) {
	%orig;
	NSLog(@"-(id) initWithAppName:(id) ipAddress:(id)");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(id) ipAddress {
	%orig;
	NSLog(@"-(id) ipAddress");
}

-(id) dateFormat {
	%orig;
	NSLog(@"-(id) dateFormat");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDateFormat:(id) {
	%orig;
	NSLog(@"-(void) setDateFormat:(id)");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook ABQChoreoConfiguration

-(id) choreoServicesBaseURL {
	%orig;
	NSLog(@"-(id) choreoServicesBaseURL");
}

-(id) mipId {
	%orig;
	NSLog(@"-(id) mipId");
}

-(void) setKeyFragmentsBlock:(id) {
	%orig;
	NSLog(@"-(void) setKeyFragmentsBlock:(id)");
}

-(void) setChoreoRequestTotalTimeout:(long long) {
	%orig;
	NSLog(@"-(void) setChoreoRequestTotalTimeout:(long long)");
}

-(void) setChoreoServicesBaseURL:(id) {
	%orig;
	NSLog(@"-(void) setChoreoServicesBaseURL:(id)");
}

-(void) setClockSkew:(id) {
	%orig;
	NSLog(@"-(void) setClockSkew:(id)");
}

-(long long) choreoRequestIdleTimeout {
	%orig;
	NSLog(@"-(long long) choreoRequestIdleTimeout");
}

-(void) setChoreoRequestIdleTimeout:(long long) {
	%orig;
	NSLog(@"-(void) setChoreoRequestIdleTimeout:(long long)");
}

-(id) keyFragmentsBlock {
	%orig;
	NSLog(@"-(id) keyFragmentsBlock");
}

-(id) initWithPrivateKey:(id) {
	%orig;
	NSLog(@"-(id) initWithPrivateKey:(id)");
}

-(id) initWithKeyFragmentsBlock:(id) {
	%orig;
	NSLog(@"-(id) initWithKeyFragmentsBlock:(id)");
}

-(bool) isReadyForSecureCalls {
	%orig;
	NSLog(@"-(bool) isReadyForSecureCalls");
}

-(bool) isReadyForAuthenticatedCalls {
	%orig;
	NSLog(@"-(bool) isReadyForAuthenticatedCalls");
}

-(long long) choreoRequestTotalTimeout {
	%orig;
	NSLog(@"-(long long) choreoRequestTotalTimeout");
}

-(void) setMipId:(id) {
	%orig;
	NSLog(@"-(void) setMipId:(id)");
}

-(id) choreoMimicTetheringServiceBaseURL {
	%orig;
	NSLog(@"-(id) choreoMimicTetheringServiceBaseURL");
}

-(void) setChoreoMimicTetheringServiceBaseURL:(id) {
	%orig;
	NSLog(@"-(void) setChoreoMimicTetheringServiceBaseURL:(id)");
}

-(void) setAuthToken:(id) {
	%orig;
	NSLog(@"-(void) setAuthToken:(id)");
}

-(id) authToken {
	%orig;
	NSLog(@"-(id) authToken");
}

-(id) clockSkew {
	%orig;
	NSLog(@"-(id) clockSkew");
}

-(id) privateKey {
	%orig;
	NSLog(@"-(id) privateKey");
}

-(void) setPrivateKey:(id) {
	%orig;
	NSLog(@"-(void) setPrivateKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQChoreoNetworkEngine

+(id) gzipCompressedDataFromData:(id) withError:(id*) {
	%orig;
	NSLog(@"+(id) gzipCompressedDataFromData:(id) withError:(id*)");
}

+(unsigned long long) assembleKeyFromFragmentsArray:(id) intoBuffer:(char*) {
	%orig;
	NSLog(@"+(unsigned long long) assembleKeyFromFragmentsArray:(id) intoBuffer:(char*)");
}

+(id) pasteBoardTokenFromFragmentsArray:(id) {
	%orig;
	NSLog(@"+(id) pasteBoardTokenFromFragmentsArray:(id)");
}

+(id) keyFromFragmentsArray:(id) {
	%orig;
	NSLog(@"+(id) keyFromFragmentsArray:(id)");
}

-(void) sendRequestWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) successBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(void) sendRequestWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) successBlock:(id) failureBlock:(?)");
}

-(void) sendRequestWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) successBlock:(id) failureBlock:(?) timeout:(id) {
	%orig;
	NSLog(@"-(void) sendRequestWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) successBlock:(id) failureBlock:(?) timeout:(id)");
}

-(void) sendSynchronousRequestWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) successBlock:(id) failureBlock:(?) timeout:(id) {
	%orig;
	NSLog(@"-(void) sendSynchronousRequestWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) successBlock:(id) failureBlock:(?) timeout:(id)");
}

-(id) securityRelatedHeadersDictionaryForURLString:(id) {
	%orig;
	NSLog(@"-(id) securityRelatedHeadersDictionaryForURLString:(id)");
}

-(void) setOperationQueueSuspended:(bool) {
	%orig;
	NSLog(@"-(void) setOperationQueueSuspended:(bool)");
}

-(id) urlRequestwithParms:(id) serviceUrl:(id) httpMethod:(id) {
	%orig;
	NSLog(@"-(id) urlRequestwithParms:(id) serviceUrl:(id) httpMethod:(id)");
}

-(long long) numberOfPendingOperationsOnQueue {
	%orig;
	NSLog(@"-(long long) numberOfPendingOperationsOnQueue");
}

-(void) cancelAllQueuedOperations {
	%orig;
	NSLog(@"-(void) cancelAllQueuedOperations");
}

-(id) kpiLoggingDelegate {
	%orig;
	NSLog(@"-(id) kpiLoggingDelegate");
}

-(void) setUpReachabilityManager {
	%orig;
	NSLog(@"-(void) setUpReachabilityManager");
}

-(id) secureRequestUsingURL:(id) {
	%orig;
	NSLog(@"-(id) secureRequestUsingURL:(id)");
}

-(id) choreoTokenString {
	%orig;
	NSLog(@"-(id) choreoTokenString");
}

-(void) sendUploadRequestWithBody:(id) serviceUrl:(id) httpMethod:(id) successBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(void) sendUploadRequestWithBody:(id) serviceUrl:(id) httpMethod:(id) successBlock:(id) failureBlock:(?)");
}

-(void) compressAndUploadFileAtPath:(id) serviceUrl:(id) successBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(void) compressAndUploadFileAtPath:(id) serviceUrl:(id) successBlock:(id) failureBlock:(?)");
}

-(void) setKpiLoggingDelegate:(id) {
	%orig;
	NSLog(@"-(void) setKpiLoggingDelegate:(id)");
}

-(bool) isNetworkReachable {
	%orig;
	NSLog(@"-(bool) isNetworkReachable");
}

-(void) enqueueOperation:(id) {
	%orig;
	NSLog(@"-(void) enqueueOperation:(id)");
}

-(void) setOperationManager:(id) {
	%orig;
	NSLog(@"-(void) setOperationManager:(id)");
}

-(id) operationManager {
	%orig;
	NSLog(@"-(id) operationManager");
}

-(id) reachabilityManager {
	%orig;
	NSLog(@"-(id) reachabilityManager");
}

-(void) setReachabilityManager:(id) {
	%orig;
	NSLog(@"-(void) setReachabilityManager:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) configuration {
	%orig;
	NSLog(@"-(id) configuration");
}

-(void) setConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setConfiguration:(id)");
}

%end

%hook ABQChoreoServiceRequest

+(id) sharedLogFileHandle {
	%orig;
	NSLog(@"+(id) sharedLogFileHandle");
}

-(id) initSynchronousWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) additionalHeaders:(id) engine:(id) successBlock:(id) failureBlock:(?) timeout:(id) {
	%orig;
	NSLog(@"-(id) initSynchronousWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) additionalHeaders:(id) engine:(id) successBlock:(id) failureBlock:(?) timeout:(id)");
}

-(id) cancelRequestTimer {
	%orig;
	NSLog(@"-(id) cancelRequestTimer");
}

-(void) setCancelRequestTimer:(id) {
	%orig;
	NSLog(@"-(void) setCancelRequestTimer:(id)");
}

-(void) setServiceUrl:(id) {
	%orig;
	NSLog(@"-(void) setServiceUrl:(id)");
}

-(void) setRequestParmsDictionary:(id) {
	%orig;
	NSLog(@"-(void) setRequestParmsDictionary:(id)");
}

-(void) setIsSynchronous:(bool) {
	%orig;
	NSLog(@"-(void) setIsSynchronous:(bool)");
}

-(void) setIsCompleted:(bool) {
	%orig;
	NSLog(@"-(void) setIsCompleted:(bool)");
}

-(void) setExpectedResponseClass:(Class) {
	%orig;
	NSLog(@"-(void) setExpectedResponseClass:(Class)");
}

-(id) requestParmsDictionary {
	%orig;
	NSLog(@"-(id) requestParmsDictionary");
}

-(id) choreoErrorForAFNetworkingError:(id) withResponse:(id) {
	%orig;
	NSLog(@"-(id) choreoErrorForAFNetworkingError:(id) withResponse:(id)");
}

-(void) startCancelTimer {
	%orig;
	NSLog(@"-(void) startCancelTimer");
}

-(void) blockIfSynchronous {
	%orig;
	NSLog(@"-(void) blockIfSynchronous");
}

-(void) writeToRequestResponseLog:(id) {
	%orig;
	NSLog(@"-(void) writeToRequestResponseLog:(id)");
}

-(id) initWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) additionalHeaders:(id) engine:(id) successBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(id) initWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) additionalHeaders:(id) engine:(id) successBlock:(id) failureBlock:(?)");
}

-(id) initWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) engine:(id) successBlock:(id) failureBlock:(?) timeout:(id) {
	%orig;
	NSLog(@"-(id) initWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) engine:(id) successBlock:(id) failureBlock:(?) timeout:(id)");
}

-(id) initWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) additionalHeaders:(id) engine:(id) successBlock:(id) failureBlock:(?) timeout:(id) {
	%orig;
	NSLog(@"-(id) initWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) additionalHeaders:(id) engine:(id) successBlock:(id) failureBlock:(?) timeout:(id)");
}

-(id) initSynchronousWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) engine:(id) successBlock:(id) failureBlock:(?) timeout:(id) {
	%orig;
	NSLog(@"-(id) initSynchronousWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) engine:(id) successBlock:(id) failureBlock:(?) timeout:(id)");
}

-(id) initWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) engine:(id) successBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(id) initWithParms:(id) serviceUrl:(id) httpMethod:(id) expectedResponseClass:(Class) engine:(id) successBlock:(id) failureBlock:(?)");
}

-(id) serviceUrl {
	%orig;
	NSLog(@"-(id) serviceUrl");
}

-(void) setSuccessBlock:(id) {
	%orig;
	NSLog(@"-(void) setSuccessBlock:(id)");
}

-(id) successBlock {
	%orig;
	NSLog(@"-(id) successBlock");
}

-(void) setTimeout:(double) {
	%orig;
	NSLog(@"-(void) setTimeout:(double)");
}

-(double) timeout {
	%orig;
	NSLog(@"-(double) timeout");
}

-(void) setHttpMethod:(id) {
	%orig;
	NSLog(@"-(void) setHttpMethod:(id)");
}

-(void) setEngine:(id) {
	%orig;
	NSLog(@"-(void) setEngine:(id)");
}

-(id) urlRequest {
	%orig;
	NSLog(@"-(id) urlRequest");
}

-(int) currentRetryCount {
	%orig;
	NSLog(@"-(int) currentRetryCount");
}

-(void) setCurrentRetryCount:(int) {
	%orig;
	NSLog(@"-(void) setCurrentRetryCount:(int)");
}

-(id) httpMethod {
	%orig;
	NSLog(@"-(id) httpMethod");
}

-(bool) isSynchronous {
	%orig;
	NSLog(@"-(bool) isSynchronous");
}

-(id) additionalHeaders {
	%orig;
	NSLog(@"-(id) additionalHeaders");
}

-(void) setAdditionalHeaders:(id) {
	%orig;
	NSLog(@"-(void) setAdditionalHeaders:(id)");
}

-(void) setFailureBlock:(id) {
	%orig;
	NSLog(@"-(void) setFailureBlock:(id)");
}

-(id) failureBlock {
	%orig;
	NSLog(@"-(id) failureBlock");
}

-(Class) expectedResponseClass {
	%orig;
	NSLog(@"-(Class) expectedResponseClass");
}

-(int) maximumRetries {
	%orig;
	NSLog(@"-(int) maximumRetries");
}

-(void) setMaximumRetries:(int) {
	%orig;
	NSLog(@"-(void) setMaximumRetries:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) startTime {
	%orig;
	NSLog(@"-(id) startTime");
}

-(void) setStartTime:(id) {
	%orig;
	NSLog(@"-(void) setStartTime:(id)");
}

-(void) cancelOperation {
	%orig;
	NSLog(@"-(void) cancelOperation");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) operation {
	%orig;
	NSLog(@"-(id) operation");
}

-(void) setOperation:(id) {
	%orig;
	NSLog(@"-(void) setOperation:(id)");
}

-(id) engine {
	%orig;
	NSLog(@"-(id) engine");
}

-(bool) isCompleted {
	%orig;
	NSLog(@"-(bool) isCompleted");
}

%end

%hook ABQChoreoUploadRequest

-(id) initWithRequestBody:(id) serviceUrl:(id) httpMethod:(id) engine:(id) successBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(id) initWithRequestBody:(id) serviceUrl:(id) httpMethod:(id) engine:(id) successBlock:(id) failureBlock:(?)");
}

-(id) urlRequest {
	%orig;
	NSLog(@"-(id) urlRequest");
}

-(id) requestBody {
	%orig;
	NSLog(@"-(id) requestBody");
}

-(void) setRequestBody:(id) {
	%orig;
	NSLog(@"-(void) setRequestBody:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQChallengeHandler

+(bool) supportsProtectionSpace:(id) {
	%orig;
	NSLog(@"+(bool) supportsProtectionSpace:(id)");
}

+(id) handlerForChallenge:(id) {
	%orig;
	NSLog(@"+(id) handlerForChallenge:(id)");
}

+(void) registerHandlerClass:(Class) forAuthenticationMethod:(id) {
	%orig;
	NSLog(@"+(void) registerHandlerClass:(Class) forAuthenticationMethod:(id)");
}

+(void) registerHandlers {
	%orig;
	NSLog(@"+(void) registerHandlers");
}

+(void) registerAllHandlers {
	%orig;
	NSLog(@"+(void) registerAllHandlers");
}

+(id) noCredential {
	%orig;
	NSLog(@"+(id) noCredential");
}

+(void) deregisterHandlerClass:(Class) forAuthenticationMethod:(id) {
	%orig;
	NSLog(@"+(void) deregisterHandlerClass:(Class) forAuthenticationMethod:(id)");
}

-(void) stopWithCredential:(id) {
	%orig;
	NSLog(@"-(void) stopWithCredential:(id)");
}

-(id) credential {
	%orig;
	NSLog(@"-(id) credential");
}

-(id) challenge {
	%orig;
	NSLog(@"-(id) challenge");
}

-(void) didStart {
	%orig;
	NSLog(@"-(void) didStart");
}

-(void) didFinish {
	%orig;
	NSLog(@"-(void) didFinish");
}

-(id) initWithChallenge:(id) {
	%orig;
	NSLog(@"-(id) initWithChallenge:(id)");
}

-(void) willFinish {
	%orig;
	NSLog(@"-(void) willFinish");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(bool) isRunning {
	%orig;
	NSLog(@"-(bool) isRunning");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(void) resolve {
	%orig;
	NSLog(@"-(void) resolve");
}

-(void) setRunning:(bool) {
	%orig;
	NSLog(@"-(void) setRunning:(bool)");
}

%end

%hook ABQServerTrustChallengeHandler

+(void) registerHandlers {
	%orig;
	NSLog(@"+(void) registerHandlers");
}

+(void) resetTrustedCertificates {
	%orig;
	NSLog(@"+(void) resetTrustedCertificates");
}

-(void) _serverTrustResolvedWithSuccess:(bool) rememberSuccess:(bool) {
	%orig;
	NSLog(@"-(void) _serverTrustResolvedWithSuccess:(bool) rememberSuccess:(bool)");
}

-(void) _evaluateAskPerUntrustedSiteTrust {
	%orig;
	NSLog(@"-(void) _evaluateAskPerUntrustedSiteTrust");
}

-(void) didStart {
	%orig;
	NSLog(@"-(void) didStart");
}

-(void) willFinish {
	%orig;
	NSLog(@"-(void) willFinish");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

%end

%hook ABQChoreoBatchFileDownloader

-(void) setPendingDownloadFilenames:(id) {
	%orig;
	NSLog(@"-(void) setPendingDownloadFilenames:(id)");
}

-(void) setTotalTimeout:(long long) {
	%orig;
	NSLog(@"-(void) setTotalTimeout:(long long)");
}

-(void) setTimeoutExceeded:(bool) {
	%orig;
	NSLog(@"-(void) setTimeoutExceeded:(bool)");
}

-(void) setNetworkEngine:(id) {
	%orig;
	NSLog(@"-(void) setNetworkEngine:(id)");
}

-(id) networkEngine {
	%orig;
	NSLog(@"-(id) networkEngine");
}

-(id) pendingDownloadFilenames {
	%orig;
	NSLog(@"-(id) pendingDownloadFilenames");
}

-(bool) allDownloadsAreComplete {
	%orig;
	NSLog(@"-(bool) allDownloadsAreComplete");
}

-(id) cancelRequestTimer {
	%orig;
	NSLog(@"-(id) cancelRequestTimer");
}

-(bool) timeoutExceeded {
	%orig;
	NSLog(@"-(bool) timeoutExceeded");
}

-(void) addFileWithUrl:(id) targetPath:(id) shouldOverwrite:(bool) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) addFileWithUrl:(id) targetPath:(id) shouldOverwrite:(bool) completionBlock:(id)");
}

-(long long) totalTimeout {
	%orig;
	NSLog(@"-(long long) totalTimeout");
}

-(void) setCancelRequestTimer:(id) {
	%orig;
	NSLog(@"-(void) setCancelRequestTimer:(id)");
}

-(id) initWithDelegate:(id) totalTimeToComplete:(long long) networkEngine:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) totalTimeToComplete:(long long) networkEngine:(id)");
}

-(int) currentRetryCount {
	%orig;
	NSLog(@"-(int) currentRetryCount");
}

-(void) setCurrentRetryCount:(int) {
	%orig;
	NSLog(@"-(void) setCurrentRetryCount:(int)");
}

-(void) cancelDownloads {
	%orig;
	NSLog(@"-(void) cancelDownloads");
}

-(void) beginDownload {
	%orig;
	NSLog(@"-(void) beginDownload");
}

-(int) maximumRetries {
	%orig;
	NSLog(@"-(int) maximumRetries");
}

-(void) setMaximumRetries:(int) {
	%orig;
	NSLog(@"-(void) setMaximumRetries:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook ABQAFSecurityPolicy

+(id) policyWithPinningMode:(unsigned long long) {
	%orig;
	NSLog(@"+(id) policyWithPinningMode:(unsigned long long)");
}

+(id) defaultPinnedCertificates {
	%orig;
	NSLog(@"+(id) defaultPinnedCertificates");
}

+(id) keyPathsForValuesAffectingPinnedPublicKeys {
	%orig;
	NSLog(@"+(id) keyPathsForValuesAffectingPinnedPublicKeys");
}

+(id) defaultPolicy {
	%orig;
	NSLog(@"+(id) defaultPolicy");
}

-(void) setValidatesCertificateChain:(bool) {
	%orig;
	NSLog(@"-(void) setValidatesCertificateChain:(bool)");
}

-(bool) validatesCertificateChain {
	%orig;
	NSLog(@"-(bool) validatesCertificateChain");
}

-(bool) evaluateServerTrust:(__SecTrust*) {
	%orig;
	NSLog(@"-(bool) evaluateServerTrust:(__SecTrust*)");
}

-(void) setValidatesDomainName:(bool) {
	%orig;
	NSLog(@"-(void) setValidatesDomainName:(bool)");
}

-(void) setAllowInvalidCertificates:(bool) {
	%orig;
	NSLog(@"-(void) setAllowInvalidCertificates:(bool)");
}

-(bool) allowInvalidCertificates {
	%orig;
	NSLog(@"-(bool) allowInvalidCertificates");
}

-(void) setSSLPinningMode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSSLPinningMode:(unsigned long long)");
}

-(void) setPinnedPublicKeys:(id) {
	%orig;
	NSLog(@"-(void) setPinnedPublicKeys:(id)");
}

-(bool) validatesDomainName {
	%orig;
	NSLog(@"-(bool) validatesDomainName");
}

-(unsigned long long) SSLPinningMode {
	%orig;
	NSLog(@"-(unsigned long long) SSLPinningMode");
}

-(id) pinnedPublicKeys {
	%orig;
	NSLog(@"-(id) pinnedPublicKeys");
}

-(bool) evaluateServerTrust:(__SecTrust*) forDomain:(id) {
	%orig;
	NSLog(@"-(bool) evaluateServerTrust:(__SecTrust*) forDomain:(id)");
}

-(id) pinnedCertificates {
	%orig;
	NSLog(@"-(id) pinnedCertificates");
}

-(void) setPinnedCertificates:(id) {
	%orig;
	NSLog(@"-(void) setPinnedCertificates:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQSecurityPolicy

-(id) initWithTargetUrl:(id) {
	%orig;
	NSLog(@"-(id) initWithTargetUrl:(id)");
}

-(bool) evaluateServerTrust:(__SecTrust*) forDomain:(id) {
	%orig;
	NSLog(@"-(bool) evaluateServerTrust:(__SecTrust*) forDomain:(id)");
}

-(void) setBaseUrl:(id) {
	%orig;
	NSLog(@"-(void) setBaseUrl:(id)");
}

-(id) baseUrl {
	%orig;
	NSLog(@"-(id) baseUrl");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQLocationManager

+(id) sharedABQLocationManager {
	%orig;
	NSLog(@"+(id) sharedABQLocationManager");
}

+(bool) locationServicesEnabled {
	%orig;
	NSLog(@"+(bool) locationServicesEnabled");
}

-(id) locationCoordinates {
	%orig;
	NSLog(@"-(id) locationCoordinates");
}

-(id) nullCoordinatesWithStatus:(id) {
	%orig;
	NSLog(@"-(id) nullCoordinatesWithStatus:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook ABQAppUtility

+(id) dictionaryFromManifestInDirectory:(id) {
	%orig;
	NSLog(@"+(id) dictionaryFromManifestInDirectory:(id)");
}

+(id) installedAppsByExaminingManifests {
	%orig;
	NSLog(@"+(id) installedAppsByExaminingManifests");
}

+(id) appDictionaryForHMIFromManifestDictionary:(id) {
	%orig;
	NSLog(@"+(id) appDictionaryForHMIFromManifestDictionary:(id)");
}

+(id) appListForProfileEnhancedMessageBody {
	%orig;
	NSLog(@"+(id) appListForProfileEnhancedMessageBody");
}

+(id) installedAppList {
	%orig;
	NSLog(@"+(id) installedAppList");
}

+(id) appNamesOfInstalledApps {
	%orig;
	NSLog(@"+(id) appNamesOfInstalledApps");
}

+(void) installAppAtPath:(id) {
	%orig;
	NSLog(@"+(void) installAppAtPath:(id)");
}

+(void) deleteAppWithAppName:(id) {
	%orig;
	NSLog(@"+(void) deleteAppWithAppName:(id)");
}

%end

%hook ABQInternalDataCollector

+(id) sharedABQInternalDataCollector {
	%orig;
	NSLog(@"+(id) sharedABQInternalDataCollector");
}

-(void) addEvent:(id) data:(id) {
	%orig;
	NSLog(@"-(void) addEvent:(id) data:(id)");
}

-(void) setEventsArray:(id) {
	%orig;
	NSLog(@"-(void) setEventsArray:(id)");
}

-(id) eventsArray {
	%orig;
	NSLog(@"-(id) eventsArray");
}

-(void) emptyEventsArray {
	%orig;
	NSLog(@"-(void) emptyEventsArray");
}

-(void) clearABQInternalDataCollector {
	%orig;
	NSLog(@"-(void) clearABQInternalDataCollector");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook HeadUnitType

-(id) validAppSchemes {
	%orig;
	NSLog(@"-(id) validAppSchemes");
}

-(void) setValidAppSchemes:(id) {
	%orig;
	NSLog(@"-(void) setValidAppSchemes:(id)");
}

-(id) commonName {
	%orig;
	NSLog(@"-(id) commonName");
}

-(id) asDictionary {
	%orig;
	NSLog(@"-(id) asDictionary");
}

-(void) setCommonName:(id) {
	%orig;
	NSLog(@"-(void) setCommonName:(id)");
}

-(id) accessoryName {
	%orig;
	NSLog(@"-(id) accessoryName");
}

-(void) setAccessoryName:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryName:(id)");
}

-(id) initFromDictionary:(id) {
	%orig;
	NSLog(@"-(id) initFromDictionary:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook HAPConfiguration

+(id) defaultHAPConfiguration {
	%orig;
	NSLog(@"+(id) defaultHAPConfiguration");
}

-(void) setHeadUnitConfigurations:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnitConfigurations:(id)");
}

-(id) headUnitConfigurations {
	%orig;
	NSLog(@"-(id) headUnitConfigurations");
}

-(id) configurationForHeadUnitWithAccessoryName:(id) {
	%orig;
	NSLog(@"-(id) configurationForHeadUnitWithAccessoryName:(id)");
}

-(id) asDictionary {
	%orig;
	NSLog(@"-(id) asDictionary");
}

-(id) initFromDictionary:(id) {
	%orig;
	NSLog(@"-(id) initFromDictionary:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setVersion:(id) {
	%orig;
	NSLog(@"-(void) setVersion:(id)");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

%end

%hook WebViewManager

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(void) statusDidChangeTo:(bool) forAppWithName:(id) {
	%orig;
	NSLog(@"-(void) statusDidChangeTo:(bool) forAppWithName:(id)");
}

-(void) sendHmiNotification:(id) dataDict:(id) {
	%orig;
	NSLog(@"-(void) sendHmiNotification:(id) dataDict:(id)");
}

-(void) setWvManagerDelegate:(id) {
	%orig;
	NSLog(@"-(void) setWvManagerDelegate:(id)");
}

-(void) wvSendRequest:(id) {
	%orig;
	NSLog(@"-(void) wvSendRequest:(id)");
}

-(void) wvSendResponseWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) wvSendResponseWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(void) wvSend3rdPartyMessageWithPayload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) wvSend3rdPartyMessageWithPayload:(id) contentType:(id)");
}

-(void) callJSFunction:(id) {
	%orig;
	NSLog(@"-(void) callJSFunction:(id)");
}

-(void) writeKPILogForHMINotificationWithData:(id) {
	%orig;
	NSLog(@"-(void) writeKPILogForHMINotificationWithData:(id)");
}

-(id) composeJSFunctionWithData:(id) {
	%orig;
	NSLog(@"-(id) composeJSFunctionWithData:(id)");
}

-(id) composeJSFunction:(id) dataDict:(id) {
	%orig;
	NSLog(@"-(id) composeJSFunction:(id) dataDict:(id)");
}

-(void) receiveHmiRequest:(id) {
	%orig;
	NSLog(@"-(void) receiveHmiRequest:(id)");
}

-(void) startMockProfileSync {
	%orig;
	NSLog(@"-(void) startMockProfileSync");
}

-(void) sendHmiNotificationWithData:(id) {
	%orig;
	NSLog(@"-(void) sendHmiNotificationWithData:(id)");
}

-(id) composeJSFunction:(id) data:(id) {
	%orig;
	NSLog(@"-(id) composeJSFunction:(id) data:(id)");
}

-(id) wvManagerDelegate {
	%orig;
	NSLog(@"-(id) wvManagerDelegate");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

%end

%hook TemplateHeadUnitWebViewManager

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(void) statusDidChangeTo:(bool) forAppWithName:(id) {
	%orig;
	NSLog(@"-(void) statusDidChangeTo:(bool) forAppWithName:(id)");
}

-(id) initWithHap:(id) profileSyncConfig:(id) {
	%orig;
	NSLog(@"-(id) initWithHap:(id) profileSyncConfig:(id)");
}

-(void) wvSendRequest:(id) {
	%orig;
	NSLog(@"-(void) wvSendRequest:(id)");
}

-(void) wvSendResponseWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) wvSendResponseWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(void) wvSend3rdPartyMessageWithPayload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) wvSend3rdPartyMessageWithPayload:(id) contentType:(id)");
}

-(void) setHuManager:(id) {
	%orig;
	NSLog(@"-(void) setHuManager:(id)");
}

-(id) huManager {
	%orig;
	NSLog(@"-(id) huManager");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

%end

%hook DA22WebViewManager

-(void) hmiNewInterface:(id) argsAsString:(id) {
	%orig;
	NSLog(@"-(void) hmiNewInterface:(id) argsAsString:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

%end

%hook FBEncryptorAES

+(id) encryptData:(id) key:(id) iv:(id) {
	%orig;
	NSLog(@"+(id) encryptData:(id) key:(id) iv:(id)");
}

+(id) decryptData:(id) key:(id) iv:(id) {
	%orig;
	NSLog(@"+(id) decryptData:(id) key:(id) iv:(id)");
}

+(id) encryptBase64String:(id) keyString:(id) separateLines:(bool) {
	%orig;
	NSLog(@"+(id) encryptBase64String:(id) keyString:(id) separateLines:(bool)");
}

+(id) decryptBase64String:(id) keyString:(id) {
	%orig;
	NSLog(@"+(id) decryptBase64String:(id) keyString:(id)");
}

+(id) generateIv {
	%orig;
	NSLog(@"+(id) generateIv");
}

+(id) dataForHexString:(id) {
	%orig;
	NSLog(@"+(id) dataForHexString:(id)");
}

+(id) hexStringForData:(id) {
	%orig;
	NSLog(@"+(id) hexStringForData:(id)");
}

%end

%hook MongooseHTTPResponse

+(id) responseWithCode:(id) withStatus:(id) withHeaders:(id) withContent:(id) {
	%orig;
	NSLog(@"+(id) responseWithCode:(id) withStatus:(id) withHeaders:(id) withContent:(id)");
}

-(void) setContent:(id) {
	%orig;
	NSLog(@"-(void) setContent:(id)");
}

-(void) setCode:(id) {
	%orig;
	NSLog(@"-(void) setCode:(id)");
}

-(void) setHeaders:(id) {
	%orig;
	NSLog(@"-(void) setHeaders:(id)");
}

-(id) headers {
	%orig;
	NSLog(@"-(id) headers");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) code {
	%orig;
	NSLog(@"-(id) code");
}

-(id) status {
	%orig;
	NSLog(@"-(id) status");
}

-(id) content {
	%orig;
	NSLog(@"-(id) content");
}

-(void) setStatus:(id) {
	%orig;
	NSLog(@"-(void) setStatus:(id)");
}

%end

%hook PasteBoardManager

+(id) mainPasteboard {
	%orig;
	NSLog(@"+(id) mainPasteboard");
}

+(id) newWithPasteboardType:(id) {
	%orig;
	NSLog(@"+(id) newWithPasteboardType:(id)");
}

+(void) clearDataForPasteboardType:(id) {
	%orig;
	NSLog(@"+(void) clearDataForPasteboardType:(id)");
}

-(void) setStringWithKey:(id) value:(id) {
	%orig;
	NSLog(@"-(void) setStringWithKey:(id) value:(id)");
}

-(void) copyToPasteboardUsingKey:(id) {
	%orig;
	NSLog(@"-(void) copyToPasteboardUsingKey:(id)");
}

-(bool) copyFromPasteboardUsingKey:(id) {
	%orig;
	NSLog(@"-(bool) copyFromPasteboardUsingKey:(id)");
}

-(id) getStringWithKey:(id) {
	%orig;
	NSLog(@"-(id) getStringWithKey:(id)");
}

-(id) initWithPasteboardType:(id) {
	%orig;
	NSLog(@"-(id) initWithPasteboardType:(id)");
}

-(void) setPbDictionary:(id) {
	%orig;
	NSLog(@"-(void) setPbDictionary:(id)");
}

-(id) pbDictionary {
	%orig;
	NSLog(@"-(id) pbDictionary");
}

-(id) pasteboardType {
	%orig;
	NSLog(@"-(id) pasteboardType");
}

-(void) resetPasteboard {
	%orig;
	NSLog(@"-(void) resetPasteboard");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PolicyInfoObject

+(id) createPolicyInfoObjectWithPlist:(id) {
	%orig;
	NSLog(@"+(id) createPolicyInfoObjectWithPlist:(id)");
}

+(id) createPolicyInfoObject {
	%orig;
	NSLog(@"+(id) createPolicyInfoObject");
}

-(id) downloadURI {
	%orig;
	NSLog(@"-(id) downloadURI");
}

-(void) saveDownloadedPolicy:(id) {
	%orig;
	NSLog(@"-(void) saveDownloadedPolicy:(id)");
}

-(void) savePolicyInfoProperties:(id) {
	%orig;
	NSLog(@"-(void) savePolicyInfoProperties:(id)");
}

-(void) setPolicyArray:(id) {
	%orig;
	NSLog(@"-(void) setPolicyArray:(id)");
}

-(void) savePoliciesLocally {
	%orig;
	NSLog(@"-(void) savePoliciesLocally");
}

-(void) setPolicyVersion:(id) {
	%orig;
	NSLog(@"-(void) setPolicyVersion:(id)");
}

-(void) setDownloadURI:(id) {
	%orig;
	NSLog(@"-(void) setDownloadURI:(id)");
}

-(id) policyArray {
	%orig;
	NSLog(@"-(id) policyArray");
}

-(void) fetchDataIntoObj:(id) {
	%orig;
	NSLog(@"-(void) fetchDataIntoObj:(id)");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(id) policyVersion {
	%orig;
	NSLog(@"-(id) policyVersion");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook PolicyList

+(id) sharedPolicyList {
	%orig;
	NSLog(@"+(id) sharedPolicyList");
}

-(void) updatePersistentPolicyListStoreFromAppList:(id) {
	%orig;
	NSLog(@"-(void) updatePersistentPolicyListStoreFromAppList:(id)");
}

-(id) policyList {
	%orig;
	NSLog(@"-(id) policyList");
}

-(void) removeFromPolicyList:(id) {
	%orig;
	NSLog(@"-(void) removeFromPolicyList:(id)");
}

-(void) setPolicyList:(id) {
	%orig;
	NSLog(@"-(void) setPolicyList:(id)");
}

-(id) queryPolicyInfoObjectByAppName:(id) {
	%orig;
	NSLog(@"-(id) queryPolicyInfoObjectByAppName:(id)");
}

-(void) fetchPolicyListData {
	%orig;
	NSLog(@"-(void) fetchPolicyListData");
}

-(void) addToPolicyList:(id) {
	%orig;
	NSLog(@"-(void) addToPolicyList:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQAppInfo

+(id) fromDictionary:(id) {
	%orig;
	NSLog(@"+(id) fromDictionary:(id)");
}

-(void) setIsOn:(bool) {
	%orig;
	NSLog(@"-(void) setIsOn:(bool)");
}

-(void) setAppStartupCommand:(id) {
	%orig;
	NSLog(@"-(void) setAppStartupCommand:(id)");
}

-(void) setSubscriptionTypeId:(int) {
	%orig;
	NSLog(@"-(void) setSubscriptionTypeId:(int)");
}

-(void) setDownloadApp:(bool) {
	%orig;
	NSLog(@"-(void) setDownloadApp:(bool)");
}

-(void) setAppLogin:(bool) {
	%orig;
	NSLog(@"-(void) setAppLogin:(bool)");
}

-(void) setAppStoreCommand:(id) {
	%orig;
	NSLog(@"-(void) setAppStoreCommand:(id)");
}

-(int) subscriptionTypeId {
	%orig;
	NSLog(@"-(int) subscriptionTypeId");
}

-(bool) downloadApp {
	%orig;
	NSLog(@"-(bool) downloadApp");
}

-(bool) appLogin {
	%orig;
	NSLog(@"-(bool) appLogin");
}

-(id) downloadUrls {
	%orig;
	NSLog(@"-(id) downloadUrls");
}

-(void) setDownloadUrls:(id) {
	%orig;
	NSLog(@"-(void) setDownloadUrls:(id)");
}

-(id) appStoreCommand {
	%orig;
	NSLog(@"-(id) appStoreCommand");
}

-(id) appStartupCommand {
	%orig;
	NSLog(@"-(id) appStartupCommand");
}

-(int) categoryId {
	%orig;
	NSLog(@"-(int) categoryId");
}

-(void) setCategoryId:(int) {
	%orig;
	NSLog(@"-(void) setCategoryId:(int)");
}

-(void) setAppId:(long long) {
	%orig;
	NSLog(@"-(void) setAppId:(long long)");
}

-(id) companyName {
	%orig;
	NSLog(@"-(id) companyName");
}

-(void) setCompanyName:(id) {
	%orig;
	NSLog(@"-(void) setCompanyName:(id)");
}

-(id) appDisplayName {
	%orig;
	NSLog(@"-(id) appDisplayName");
}

-(void) setAppDisplayName:(id) {
	%orig;
	NSLog(@"-(void) setAppDisplayName:(id)");
}

-(void) setArtworkURL:(id) {
	%orig;
	NSLog(@"-(void) setArtworkURL:(id)");
}

-(id) artworkURL {
	%orig;
	NSLog(@"-(id) artworkURL");
}

-(id) iconURL {
	%orig;
	NSLog(@"-(id) iconURL");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(void) setIconURL:(id) {
	%orig;
	NSLog(@"-(void) setIconURL:(id)");
}

-(id) appDescription {
	%orig;
	NSLog(@"-(id) appDescription");
}

-(void) setAppDescription:(id) {
	%orig;
	NSLog(@"-(void) setAppDescription:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(bool) isOn {
	%orig;
	NSLog(@"-(bool) isOn");
}

-(long long) appId {
	%orig;
	NSLog(@"-(long long) appId");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook SSZipArchive

+(bool) unzipFileAtPath:(id) toDestination:(id) delegate:(id) {
	%orig;
	NSLog(@"+(bool) unzipFileAtPath:(id) toDestination:(id) delegate:(id)");
}

+(bool) unzipFileAtPath:(id) toDestination:(id) overwrite:(bool) password:(id) error:(id*) delegate:(id) {
	%orig;
	NSLog(@"+(bool) unzipFileAtPath:(id) toDestination:(id) overwrite:(bool) password:(id) error:(id*) delegate:(id)");
}

+(id) _dateWithMSDOSFormat:(unsigned int) {
	%orig;
	NSLog(@"+(id) _dateWithMSDOSFormat:(unsigned int)");
}

+(bool) unzipFileAtPath:(id) toDestination:(id) {
	%orig;
	NSLog(@"+(bool) unzipFileAtPath:(id) toDestination:(id)");
}

+(bool) unzipFileAtPath:(id) toDestination:(id) overwrite:(bool) password:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) unzipFileAtPath:(id) toDestination:(id) overwrite:(bool) password:(id) error:(id*)");
}

+(bool) createZipFileAtPath:(id) withFilesAtPaths:(id) {
	%orig;
	NSLog(@"+(bool) createZipFileAtPath:(id) withFilesAtPaths:(id)");
}

-(void) zipInfo:(?*) setDate:(id) {
	%orig;
	NSLog(@"-(void) zipInfo:(?*) setDate:(id)");
}

-(bool) writeData:(id) filename:(id) {
	%orig;
	NSLog(@"-(bool) writeData:(id) filename:(id)");
}

-(bool) writeFile:(id) {
	%orig;
	NSLog(@"-(bool) writeFile:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) open {
	%orig;
	NSLog(@"-(bool) open");
}

-(bool) close {
	%orig;
	NSLog(@"-(bool) close");
}

-(id) initWithPath:(id) {
	%orig;
	NSLog(@"-(id) initWithPath:(id)");
}

%end

%hook AQHupVehicleInformation

-(id) initWithVehicleInformationData:(id) updateDate:(id) {
	%orig;
	NSLog(@"-(id) initWithVehicleInformationData:(id) updateDate:(id)");
}

-(id) initWithVehicleInformationData:(id) {
	%orig;
	NSLog(@"-(id) initWithVehicleInformationData:(id)");
}

-(id) serializeToString {
	%orig;
	NSLog(@"-(id) serializeToString");
}

-(id) initWithSerializedString:(id) {
	%orig;
	NSLog(@"-(id) initWithSerializedString:(id)");
}

-(id) jsonObject {
	%orig;
	NSLog(@"-(id) jsonObject");
}

-(id) json {
	%orig;
	NSLog(@"-(id) json");
}

-(void) setJson:(id) {
	%orig;
	NSLog(@"-(void) setJson:(id)");
}

-(id) objectForKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(id) objectForKeyedSubscript:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) date {
	%orig;
	NSLog(@"-(id) date");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

%end

%hook AppInfoObject

+(id) createAppInfoObjectWithPlist:(id) {
	%orig;
	NSLog(@"+(id) createAppInfoObjectWithPlist:(id)");
}

+(id) createAppInfoObject {
	%orig;
	NSLog(@"+(id) createAppInfoObject");
}

-(id) appCategory {
	%orig;
	NSLog(@"-(id) appCategory");
}

-(void) updatePropertiesFromDictionary:(id) {
	%orig;
	NSLog(@"-(void) updatePropertiesFromDictionary:(id)");
}

-(void) saveAppInfoProperties:(id) {
	%orig;
	NSLog(@"-(void) saveAppInfoProperties:(id)");
}

-(id) handsetAppProvided {
	%orig;
	NSLog(@"-(id) handsetAppProvided");
}

-(id) applicationDownloadURI {
	%orig;
	NSLog(@"-(id) applicationDownloadURI");
}

-(id) applicationIconDownload {
	%orig;
	NSLog(@"-(id) applicationIconDownload");
}

-(void) persistToLocalStorageAsPList {
	%orig;
	NSLog(@"-(void) persistToLocalStorageAsPList");
}

-(void) setApplicationDownloadURI:(id) {
	%orig;
	NSLog(@"-(void) setApplicationDownloadURI:(id)");
}

-(void) setApplicationIconDownload:(id) {
	%orig;
	NSLog(@"-(void) setApplicationIconDownload:(id)");
}

-(void) setHandsetAppProvided:(id) {
	%orig;
	NSLog(@"-(void) setHandsetAppProvided:(id)");
}

-(void) setAppCategory:(id) {
	%orig;
	NSLog(@"-(void) setAppCategory:(id)");
}

-(void) setAppPath:(id) {
	%orig;
	NSLog(@"-(void) setAppPath:(id)");
}

-(void) setAppType:(id) {
	%orig;
	NSLog(@"-(void) setAppType:(id)");
}

-(id) appType {
	%orig;
	NSLog(@"-(id) appType");
}

-(id) appDisplayName {
	%orig;
	NSLog(@"-(id) appDisplayName");
}

-(void) setAppDisplayName:(id) {
	%orig;
	NSLog(@"-(void) setAppDisplayName:(id)");
}

-(id) appPath {
	%orig;
	NSLog(@"-(id) appPath");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(void) setAppVersion:(id) {
	%orig;
	NSLog(@"-(void) setAppVersion:(id)");
}

-(id) appVersion {
	%orig;
	NSLog(@"-(id) appVersion");
}

-(void) setPackage:(id) {
	%orig;
	NSLog(@"-(void) setPackage:(id)");
}

-(id) package {
	%orig;
	NSLog(@"-(id) package");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) action {
	%orig;
	NSLog(@"-(id) action");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(void) setAction:(id) {
	%orig;
	NSLog(@"-(void) setAction:(id)");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook AppList

+(id) sharedAppList {
	%orig;
	NSLog(@"+(id) sharedAppList");
}

+(void) resetSharedAppList {
	%orig;
	NSLog(@"+(void) resetSharedAppList");
}

-(id) appList {
	%orig;
	NSLog(@"-(id) appList");
}

-(void) setAppList:(id) {
	%orig;
	NSLog(@"-(void) setAppList:(id)");
}

-(void) deleteAppInfoWithName:(id) {
	%orig;
	NSLog(@"-(void) deleteAppInfoWithName:(id)");
}

-(void) createOrUpdateAppInfoObject:(id) {
	%orig;
	NSLog(@"-(void) createOrUpdateAppInfoObject:(id)");
}

-(id) queryAppInfoObjectByAppName:(id) {
	%orig;
	NSLog(@"-(id) queryAppInfoObjectByAppName:(id)");
}

-(void) removeFromAppList:(id) {
	%orig;
	NSLog(@"-(void) removeFromAppList:(id)");
}

-(void) deleteAppInfoObjectPList:(id) {
	%orig;
	NSLog(@"-(void) deleteAppInfoObjectPList:(id)");
}

-(void) deletePolicyInfoObject:(id) {
	%orig;
	NSLog(@"-(void) deletePolicyInfoObject:(id)");
}

-(void) deletePolicyInfoObjectPlist:(id) {
	%orig;
	NSLog(@"-(void) deletePolicyInfoObjectPlist:(id)");
}

-(void) addToAppList:(id) {
	%orig;
	NSLog(@"-(void) addToAppList:(id)");
}

-(id) fetchAppList {
	%orig;
	NSLog(@"-(id) fetchAppList");
}

-(id) fetchAppListForNomadicApp {
	%orig;
	NSLog(@"-(id) fetchAppListForNomadicApp");
}

-(void) updatePersistentAppListStoreFromAppList:(id) {
	%orig;
	NSLog(@"-(void) updatePersistentAppListStoreFromAppList:(id)");
}

-(void) purgeDeletedApps {
	%orig;
	NSLog(@"-(void) purgeDeletedApps");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook VRManager

-(void) setReceiveData:(id) {
	%orig;
	NSLog(@"-(void) setReceiveData:(id)");
}

-(void) refreshVR {
	%orig;
	NSLog(@"-(void) refreshVR");
}

-(void) setThisPM:(id) {
	%orig;
	NSLog(@"-(void) setThisPM:(id)");
}

-(void) setThisJsHandler:(id) {
	%orig;
	NSLog(@"-(void) setThisJsHandler:(id)");
}

-(void) setVrAudioData:(id) {
	%orig;
	NSLog(@"-(void) setVrAudioData:(id)");
}

-(void) startVrDetection:(id) {
	%orig;
	NSLog(@"-(void) startVrDetection:(id)");
}

-(id) vrAudioData {
	%orig;
	NSLog(@"-(id) vrAudioData");
}

-(void) sendVrWebRequest {
	%orig;
	NSLog(@"-(void) sendVrWebRequest");
}

-(void) setVrConnection:(id) {
	%orig;
	NSLog(@"-(void) setVrConnection:(id)");
}

-(id) thisJsHandler {
	%orig;
	NSLog(@"-(id) thisJsHandler");
}

-(id) thisPM {
	%orig;
	NSLog(@"-(id) thisPM");
}

-(id) initWithMipId:(id) withPM:(id) withJsHandler:(id) {
	%orig;
	NSLog(@"-(id) initWithMipId:(id) withPM:(id) withJsHandler:(id)");
}

-(void) readAudioData:(id) {
	%orig;
	NSLog(@"-(void) readAudioData:(id)");
}

-(bool) vrDetectionDidStart {
	%orig;
	NSLog(@"-(bool) vrDetectionDidStart");
}

-(void) setVrDetectionDidStart:(bool) {
	%orig;
	NSLog(@"-(void) setVrDetectionDidStart:(bool)");
}

-(bool) isFirstVrDetection {
	%orig;
	NSLog(@"-(bool) isFirstVrDetection");
}

-(void) setIsFirstVrDetection:(bool) {
	%orig;
	NSLog(@"-(void) setIsFirstVrDetection:(bool)");
}

-(bool) isVoiceDetected {
	%orig;
	NSLog(@"-(bool) isVoiceDetected");
}

-(void) setIsVoiceDetected:(bool) {
	%orig;
	NSLog(@"-(void) setIsVoiceDetected:(bool)");
}

-(id) vrConnection {
	%orig;
	NSLog(@"-(id) vrConnection");
}

-(id) receiveData {
	%orig;
	NSLog(@"-(id) receiveData");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) connection:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didFailWithError:(id)");
}

-(void) connection:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveData:(id)");
}

-(void) connectionDidFinishLoading:(id) {
	%orig;
	NSLog(@"-(void) connectionDidFinishLoading:(id)");
}

-(void) connection:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveResponse:(id)");
}

%end

%hook TemplateHeadUnitManager

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(void) setWebViewManager:(id) {
	%orig;
	NSLog(@"-(void) setWebViewManager:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(id) webViewManager {
	%orig;
	NSLog(@"-(id) webViewManager");
}

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(void) statusDidChangeTo:(bool) forAppWithName:(id) {
	%orig;
	NSLog(@"-(void) statusDidChangeTo:(bool) forAppWithName:(id)");
}

-(void) unregisterNotifications {
	%orig;
	NSLog(@"-(void) unregisterNotifications");
}

-(void) setCcDelegate:(id) {
	%orig;
	NSLog(@"-(void) setCcDelegate:(id)");
}

-(void) setNotificationsRegistered:(bool) {
	%orig;
	NSLog(@"-(void) setNotificationsRegistered:(bool)");
}

-(void) setHmiReady:(bool) {
	%orig;
	NSLog(@"-(void) setHmiReady:(bool)");
}

-(void) setHmiOperationQueue:(id) {
	%orig;
	NSLog(@"-(void) setHmiOperationQueue:(id)");
}

-(void) setHmiStorage:(id) {
	%orig;
	NSLog(@"-(void) setHmiStorage:(id)");
}

-(void) loadJSFiles {
	%orig;
	NSLog(@"-(void) loadJSFiles");
}

-(bool) notificationsRegistered {
	%orig;
	NSLog(@"-(bool) notificationsRegistered");
}

-(void) convertNSDictToNSDataAndSendToHmi:(id) {
	%orig;
	NSLog(@"-(void) convertNSDictToNSDataAndSendToHmi:(id)");
}

-(void) loadJSFilesAfterProfileSync {
	%orig;
	NSLog(@"-(void) loadJSFilesAfterProfileSync");
}

-(void) handleResponseForUpdateImage:(id) withSequenceNumber:(int) {
	%orig;
	NSLog(@"-(void) handleResponseForUpdateImage:(id) withSequenceNumber:(int)");
}

-(void) handleResponseForFile:(id) withSequenceNumber:(int) {
	%orig;
	NSLog(@"-(void) handleResponseForFile:(id) withSequenceNumber:(int)");
}

-(id) mongooseHTTPResponseWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) mongooseHTTPResponseWithDictionary:(id)");
}

-(void) writeKPIEvent:(id) payload:(id) command:(id) {
	%orig;
	NSLog(@"-(void) writeKPIEvent:(id) payload:(id) command:(id)");
}

-(void) handleResponseForApplicationListRequest:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForApplicationListRequest:(id)");
}

-(void) handleResponseForAQState:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForAQState:(id)");
}

-(void) handleResponseForStorage:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForStorage:(id)");
}

-(void) handleResponseForClientGatewayInfo:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForClientGatewayInfo:(id)");
}

-(void) handleResponseForMeha:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForMeha:(id)");
}

-(void) handleResponseForAppName:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForAppName:(id)");
}

-(void) handleReponseForTriggerSync:(id) {
	%orig;
	NSLog(@"-(void) handleReponseForTriggerSync:(id)");
}

-(void) handleResponseForAppSwitch:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForAppSwitch:(id)");
}

-(void) handleResponseForHandsetProfile:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForHandsetProfile:(id)");
}

-(void) handleResponseForFileIo:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForFileIo:(id)");
}

-(void) handleResponseForIdcEvents:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForIdcEvents:(id)");
}

-(void) handleResponseForLocation:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForLocation:(id)");
}

-(void) longpollToHu:(id) {
	%orig;
	NSLog(@"-(void) longpollToHu:(id)");
}

-(void) handleResponseForGetPolicy:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForGetPolicy:(id)");
}

-(void) handleResponseForGetProfileResponse:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForGetProfileResponse:(id)");
}

-(id) composeHmiAsyncResponseWithNumberType:(id) number:(long long) statusCode:(long long) status:(id) contentType:(id) errorCode:(long long) errorDescription:(id) data:(id) {
	%orig;
	NSLog(@"-(id) composeHmiAsyncResponseWithNumberType:(id) number:(long long) statusCode:(long long) status:(id) contentType:(id) errorCode:(long long) errorDescription:(id) data:(id)");
}

-(void) proceedWithAppSwitch:(id) requestNumber:(long long) {
	%orig;
	NSLog(@"-(void) proceedWithAppSwitch:(id) requestNumber:(long long)");
}

-(id) processContentAccordingToEncoding:(id) content:(id) {
	%orig;
	NSLog(@"-(id) processContentAccordingToEncoding:(id) content:(id)");
}

-(id) ccDelegate {
	%orig;
	NSLog(@"-(id) ccDelegate");
}

-(id) huIdStringForClientGatewayInfo {
	%orig;
	NSLog(@"-(id) huIdStringForClientGatewayInfo");
}

-(void) hmiStoragePost:(id) {
	%orig;
	NSLog(@"-(void) hmiStoragePost:(id)");
}

-(void) hmiStorageGet:(id) {
	%orig;
	NSLog(@"-(void) hmiStorageGet:(id)");
}

-(id) hmiStorage {
	%orig;
	NSLog(@"-(id) hmiStorage");
}

-(id) hmiOperationQueue {
	%orig;
	NSLog(@"-(id) hmiOperationQueue");
}

-(void) startProfileSyncAfterJsIsReady {
	%orig;
	NSLog(@"-(void) startProfileSyncAfterJsIsReady");
}

-(bool) hmiReady {
	%orig;
	NSLog(@"-(bool) hmiReady");
}

-(id) determineContentEncodingWithContentType:(id) {
	%orig;
	NSLog(@"-(id) determineContentEncodingWithContentType:(id)");
}

-(id) contentWithContentEncoding:(id) payload:(id) {
	%orig;
	NSLog(@"-(id) contentWithContentEncoding:(id) payload:(id)");
}

-(void) invokeProfileStart {
	%orig;
	NSLog(@"-(void) invokeProfileStart");
}

-(void) handleResponseForJsLog:(id) {
	%orig;
	NSLog(@"-(void) handleResponseForJsLog:(id)");
}

-(id) initWithWebViewManager:(id) withHap:(id) profileSyncConfig:(id) {
	%orig;
	NSLog(@"-(id) initWithWebViewManager:(id) withHap:(id) profileSyncConfig:(id)");
}

-(void) receiveHmiData:(id) {
	%orig;
	NSLog(@"-(void) receiveHmiData:(id)");
}

-(void) receiveTemplateManagerData:(id) {
	%orig;
	NSLog(@"-(void) receiveTemplateManagerData:(id)");
}

-(void) receive3rdPartyMessageWithPayload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) receive3rdPartyMessageWithPayload:(id) contentType:(id)");
}

-(void) receiveResponseWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) receiveResponseWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(void) registerNotifications {
	%orig;
	NSLog(@"-(void) registerNotifications");
}

-(void) setSyncManager:(id) {
	%orig;
	NSLog(@"-(void) setSyncManager:(id)");
}

-(void) accessoryDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) accessoryDidDisconnect:(id)");
}

-(id) syncManager {
	%orig;
	NSLog(@"-(id) syncManager");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook AudioManager

+(id) sharedAudioManager {
	%orig;
	NSLog(@"+(id) sharedAudioManager");
}

-(void) playTTS:(id) language:(id) networkEngine:(id) ttsReady:(id) ttsError:(?) applyGain:(id) completionHandler:(?) {
	%orig;
	NSLog(@"-(void) playTTS:(id) language:(id) networkEngine:(id) ttsReady:(id) ttsError:(?) applyGain:(id) completionHandler:(?)");
}

-(void) pauseTTS {
	%orig;
	NSLog(@"-(void) pauseTTS");
}

-(void) resumeTTS {
	%orig;
	NSLog(@"-(void) resumeTTS");
}

-(void) stopAndDisposeAudioQueue {
	%orig;
	NSLog(@"-(void) stopAndDisposeAudioQueue");
}

-(bool) isRebuffering {
	%orig;
	NSLog(@"-(bool) isRebuffering");
}

-(double) prebufferTime {
	%orig;
	NSLog(@"-(double) prebufferTime");
}

-(bool) isDoneDownloading {
	%orig;
	NSLog(@"-(bool) isDoneDownloading");
}

-(int) fillBufferWithSilence:(AudioQueueBuffer*) {
	%orig;
	NSLog(@"-(int) fillBufferWithSilence:(AudioQueueBuffer*)");
}

-(void) setIsRebuffering:(bool) {
	%orig;
	NSLog(@"-(void) setIsRebuffering:(bool)");
}

-(int) fillBufferWithPCM:(AudioQueueBuffer*) {
	%orig;
	NSLog(@"-(int) fillBufferWithPCM:(AudioQueueBuffer*)");
}

-(void) setPrebufferTime:(double) {
	%orig;
	NSLog(@"-(void) setPrebufferTime:(double)");
}

-(void) setIsDoneWithPlayback:(bool) {
	%orig;
	NSLog(@"-(void) setIsDoneWithPlayback:(bool)");
}

-(void) setShouldApplyGain:(bool) {
	%orig;
	NSLog(@"-(void) setShouldApplyGain:(bool)");
}

-(void) setTtsReadyblk:(id) {
	%orig;
	NSLog(@"-(void) setTtsReadyblk:(id)");
}

-(void) setTtsErrorblk:(id) {
	%orig;
	NSLog(@"-(void) setTtsErrorblk:(id)");
}

-(void) setCompletionblk:(id) {
	%orig;
	NSLog(@"-(void) setCompletionblk:(id)");
}

-(bool) ttsIsPlaying {
	%orig;
	NSLog(@"-(bool) ttsIsPlaying");
}

-(void) setSpeexDecoder:(id) {
	%orig;
	NSLog(@"-(void) setSpeexDecoder:(id)");
}

-(void) setConnectionDidNotFail:(bool) {
	%orig;
	NSLog(@"-(void) setConnectionDidNotFail:(bool)");
}

-(void) setAudioSessionCreated:(bool) {
	%orig;
	NSLog(@"-(void) setAudioSessionCreated:(bool)");
}

-(void) setIsDoneDownloading:(bool) {
	%orig;
	NSLog(@"-(void) setIsDoneDownloading:(bool)");
}

-(void) setTtsConnection:(id) {
	%orig;
	NSLog(@"-(void) setTtsConnection:(id)");
}

-(void) setReceiveData:(id) {
	%orig;
	NSLog(@"-(void) setReceiveData:(id)");
}

-(bool) audioSessionCreated {
	%orig;
	NSLog(@"-(bool) audioSessionCreated");
}

-(void) initializeAudioSession {
	%orig;
	NSLog(@"-(void) initializeAudioSession");
}

-(bool) connectionDidNotFail {
	%orig;
	NSLog(@"-(bool) connectionDidNotFail");
}

-(id) speexDecoder {
	%orig;
	NSLog(@"-(id) speexDecoder");
}

-(id) ttsErrorblk {
	%orig;
	NSLog(@"-(id) ttsErrorblk");
}

-(void) ttsDidFinish {
	%orig;
	NSLog(@"-(void) ttsDidFinish");
}

-(void) ambientSound {
	%orig;
	NSLog(@"-(void) ambientSound");
}

-(void) setIsAudioQueueStopped:(bool) {
	%orig;
	NSLog(@"-(void) setIsAudioQueueStopped:(bool)");
}

-(int) fillBuffer:(AudioQueueBuffer*) {
	%orig;
	NSLog(@"-(int) fillBuffer:(AudioQueueBuffer*)");
}

-(bool) shouldApplyGain {
	%orig;
	NSLog(@"-(bool) shouldApplyGain");
}

-(id) ttsReadyblk {
	%orig;
	NSLog(@"-(id) ttsReadyblk");
}

-(void) setTtsIsPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setTtsIsPlaying:(bool)");
}

-(id) completionblk {
	%orig;
	NSLog(@"-(id) completionblk");
}

-(void) writeOutputToFile {
	%orig;
	NSLog(@"-(void) writeOutputToFile");
}

-(id) ttsConnection {
	%orig;
	NSLog(@"-(id) ttsConnection");
}

-(void) setCurrentChallenge:(id) {
	%orig;
	NSLog(@"-(void) setCurrentChallenge:(id)");
}

-(id) currentChallenge {
	%orig;
	NSLog(@"-(id) currentChallenge");
}

-(void) challengeHandlerDidFinish:(id) {
	%orig;
	NSLog(@"-(void) challengeHandlerDidFinish:(id)");
}

-(AudioStreamBasicDescription) streamFormat {
	%orig;
	NSLog(@"-(AudioStreamBasicDescription) streamFormat");
}

-(void) setStreamFormat:(AudioStreamBasicDescription) {
	%orig;
	NSLog(@"-(void) setStreamFormat:(AudioStreamBasicDescription)");
}

-(double) currentFrequency {
	%orig;
	NSLog(@"-(double) currentFrequency");
}

-(void) setCurrentFrequency:(double) {
	%orig;
	NSLog(@"-(void) setCurrentFrequency:(double)");
}

-(double) startingFrameCount {
	%orig;
	NSLog(@"-(double) startingFrameCount");
}

-(void) setStartingFrameCount:(double) {
	%orig;
	NSLog(@"-(void) setStartingFrameCount:(double)");
}

-(bool) isAudioQueueStopped {
	%orig;
	NSLog(@"-(bool) isAudioQueueStopped");
}

-(bool) isDoneWithPlayback {
	%orig;
	NSLog(@"-(bool) isDoneWithPlayback");
}

-(void) setAudioQueue:(OpaqueAudioQueue*) {
	%orig;
	NSLog(@"-(void) setAudioQueue:(OpaqueAudioQueue*)");
}

-(bool) connection:(id) canAuthenticateAgainstProtectionSpace:(id) {
	%orig;
	NSLog(@"-(bool) connection:(id) canAuthenticateAgainstProtectionSpace:(id)");
}

-(void) connection:(id) didReceiveAuthenticationChallenge:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveAuthenticationChallenge:(id)");
}

-(long long) bitsPerChannel {
	%orig;
	NSLog(@"-(long long) bitsPerChannel");
}

-(void) setBitsPerChannel:(long long) {
	%orig;
	NSLog(@"-(void) setBitsPerChannel:(long long)");
}

-(long long) bytesPerFrame {
	%orig;
	NSLog(@"-(long long) bytesPerFrame");
}

-(void) setBytesPerFrame:(long long) {
	%orig;
	NSLog(@"-(void) setBytesPerFrame:(long long)");
}

-(long long) bytesPerPacket {
	%orig;
	NSLog(@"-(long long) bytesPerPacket");
}

-(void) setBytesPerPacket:(long long) {
	%orig;
	NSLog(@"-(void) setBytesPerPacket:(long long)");
}

-(long long) channelsPerFrame {
	%orig;
	NSLog(@"-(long long) channelsPerFrame");
}

-(void) setChannelsPerFrame:(long long) {
	%orig;
	NSLog(@"-(void) setChannelsPerFrame:(long long)");
}

-(long long) framesPerPacket {
	%orig;
	NSLog(@"-(long long) framesPerPacket");
}

-(void) setFramesPerPacket:(long long) {
	%orig;
	NSLog(@"-(void) setFramesPerPacket:(long long)");
}

-(void) setBufferSize:(unsigned int) {
	%orig;
	NSLog(@"-(void) setBufferSize:(unsigned int)");
}

-(id) receiveData {
	%orig;
	NSLog(@"-(id) receiveData");
}

-(id) dataQueue {
	%orig;
	NSLog(@"-(id) dataQueue");
}

-(void) setDataQueue:(id) {
	%orig;
	NSLog(@"-(void) setDataQueue:(id)");
}

-(long long) bytesPerSecond {
	%orig;
	NSLog(@"-(long long) bytesPerSecond");
}

-(unsigned int) bufferSize {
	%orig;
	NSLog(@"-(unsigned int) bufferSize");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setSampleRate:(long long) {
	%orig;
	NSLog(@"-(void) setSampleRate:(long long)");
}

-(long long) sampleRate {
	%orig;
	NSLog(@"-(long long) sampleRate");
}

-(void) connection:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didFailWithError:(id)");
}

-(void) connection:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveData:(id)");
}

-(void) connectionDidFinishLoading:(id) {
	%orig;
	NSLog(@"-(void) connectionDidFinishLoading:(id)");
}

-(void) connection:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveResponse:(id)");
}

-(OpaqueAudioQueue*) audioQueue {
	%orig;
	NSLog(@"-(OpaqueAudioQueue*) audioQueue");
}

%end

%hook AppSwitchURLBuilder

+(id) URLforAppSwitchto:(id) withMIPID:(id) AuthToken:(id) OEMAppScheme:(id) countryCode:(id) ReturnScheme:(id) {
	%orig;
	NSLog(@"+(id) URLforAppSwitchto:(id) withMIPID:(id) AuthToken:(id) OEMAppScheme:(id) countryCode:(id) ReturnScheme:(id)");
}

+(id) URLforRelogin:(id) withMIPID:(id) AuthToken:(id) OEMAppScheme:(id) countryCode:(id) ReturnScheme:(id) {
	%orig;
	NSLog(@"+(id) URLforRelogin:(id) withMIPID:(id) AuthToken:(id) OEMAppScheme:(id) countryCode:(id) ReturnScheme:(id)");
}

%end

%hook JavaScriptHandler

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(void) setSharedLocationManager:(id) {
	%orig;
	NSLog(@"-(void) setSharedLocationManager:(id)");
}

-(void) setPmManager:(id) {
	%orig;
	NSLog(@"-(void) setPmManager:(id)");
}

-(void) setJs_delegate:(id) {
	%orig;
	NSLog(@"-(void) setJs_delegate:(id)");
}

-(void) setTtsTransID:(int) {
	%orig;
	NSLog(@"-(void) setTtsTransID:(int)");
}

-(void) setTtsId:(int) {
	%orig;
	NSLog(@"-(void) setTtsId:(int)");
}

-(void) setVrId:(int) {
	%orig;
	NSLog(@"-(void) setVrId:(int)");
}

-(id) pmManager {
	%orig;
	NSLog(@"-(id) pmManager");
}

-(int) thisTransID {
	%orig;
	NSLog(@"-(int) thisTransID");
}

-(int) ttsTransID {
	%orig;
	NSLog(@"-(int) ttsTransID");
}

-(void) handleCallForUpdateScreen:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForUpdateScreen:(id) argsArray:(id)");
}

-(void) handleCallForUpdateText:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForUpdateText:(id) argsArray:(id)");
}

-(void) handleCallForUpdateImage:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForUpdateImage:(id) argsArray:(id)");
}

-(void) handleCallForGetString:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForGetString:(id) argsArray:(id)");
}

-(void) handleCallForPutString:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForPutString:(id) argsArray:(id)");
}

-(void) handleCallForStopTts:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForStopTts:(id) argsArray:(id)");
}

-(void) handleCallForStartVR:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForStartVR:(id) argsArray:(id)");
}

-(void) handleCallForStopVR:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForStopVR:(id) argsArray:(id)");
}

-(void) handleCallForGetMipProfile:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForGetMipProfile:(id) argsArray:(id)");
}

-(void) handleCallForGetClientGatewayInfo:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForGetClientGatewayInfo:(id) argsArray:(id)");
}

-(void) handleCallForSetSystemScreen:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForSetSystemScreen:(id) argsArray:(id)");
}

-(void) handleCallForGetCurrentContainer:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForGetCurrentContainer:(id) argsArray:(id)");
}

-(void) handleCallForAppSwitch:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForAppSwitch:(id) argsArray:(id)");
}

-(void) handleCallForSendAppRequest:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForSendAppRequest:(id) argsArray:(id)");
}

-(void) handleCallForIsFirstStart:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForIsFirstStart:(id) argsArray:(id)");
}

-(void) handleCallForJsReady:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForJsReady:(id) argsArray:(id)");
}

-(void) handleCallForGetLocation:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForGetLocation:(id) argsArray:(id)");
}

-(void) handleCallForSendStreamAudioRequest:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForSendStreamAudioRequest:(id) argsArray:(id)");
}

-(void) handleCallForJsLog:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForJsLog:(id) argsArray:(id)");
}

-(void) handleCallForDialNumber:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForDialNumber:(id) argsArray:(id)");
}

-(void) handleCallforTemplateRequest:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallforTemplateRequest:(id) argsArray:(id)");
}

-(void) handleCallForUpdateMeter:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForUpdateMeter:(id) argsArray:(id)");
}

-(void) handleCallForGetAppList:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForGetAppList:(id) argsArray:(id)");
}

-(void) handleCallForGetPolicy:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForGetPolicy:(id) argsArray:(id)");
}

-(void) handleCallForSendAudioResumeResponse:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForSendAudioResumeResponse:(id) argsArray:(id)");
}

-(void) handleCallForTTS:(id) argsDict:(id) {
	%orig;
	NSLog(@"-(void) handleCallForTTS:(id) argsDict:(id)");
}

-(void) handleCallForAudioFocus:(id) argsDict:(id) {
	%orig;
	NSLog(@"-(void) handleCallForAudioFocus:(id) argsDict:(id)");
}

-(void) handleCallForMipExit:(id) argsDict:(id) {
	%orig;
	NSLog(@"-(void) handleCallForMipExit:(id) argsDict:(id)");
}

-(void) setTtsText:(id) {
	%orig;
	NSLog(@"-(void) setTtsText:(id)");
}

-(void) setTtsLanguage:(int) {
	%orig;
	NSLog(@"-(void) setTtsLanguage:(int)");
}

-(void) sendHmiTtsNotificationReady {
	%orig;
	NSLog(@"-(void) sendHmiTtsNotificationReady");
}

-(void) sendHmiTtsNotificationEnd {
	%orig;
	NSLog(@"-(void) sendHmiTtsNotificationEnd");
}

-(void) sendHupTTSRequest:(id) {
	%orig;
	NSLog(@"-(void) sendHupTTSRequest:(id)");
}

-(void) handleCallForTTSEnd {
	%orig;
	NSLog(@"-(void) handleCallForTTSEnd");
}

-(void) sendHupSwitchToAudioMode:(id) {
	%orig;
	NSLog(@"-(void) sendHupSwitchToAudioMode:(id)");
}

-(void) sendHupScreenUpdate:(id) {
	%orig;
	NSLog(@"-(void) sendHupScreenUpdate:(id)");
}

-(void) sendHupTextUpdate:(id) {
	%orig;
	NSLog(@"-(void) sendHupTextUpdate:(id)");
}

-(id) resizeImage:(id) imgWidth:(id) imgHeight:(id) shouldKeepAspectRatio:(bool) {
	%orig;
	NSLog(@"-(id) resizeImage:(id) imgWidth:(id) imgHeight:(id) shouldKeepAspectRatio:(bool)");
}

-(id) imageDataDict {
	%orig;
	NSLog(@"-(id) imageDataDict");
}

-(void) sendHupImageUpdate:(id) {
	%orig;
	NSLog(@"-(void) sendHupImageUpdate:(id)");
}

-(int) ttsLanguage {
	%orig;
	NSLog(@"-(int) ttsLanguage");
}

-(void) sendHupSetSystemScreen:(id) {
	%orig;
	NSLog(@"-(void) sendHupSetSystemScreen:(id)");
}

-(int) vrId {
	%orig;
	NSLog(@"-(int) vrId");
}

-(id) URLforAppSwitchto:(id) protocolType:(id) mipId:(id) authToken:(id) OEMAppScheme:(id) returnScheme:(id) countryCode:(id) appId:(id) screenId:(id) huId:(id) {
	%orig;
	NSLog(@"-(id) URLforAppSwitchto:(id) protocolType:(id) mipId:(id) authToken:(id) OEMAppScheme:(id) returnScheme:(id) countryCode:(id) appId:(id) screenId:(id) huId:(id)");
}

-(id) js_delegate {
	%orig;
	NSLog(@"-(id) js_delegate");
}

-(void) setObjClocation:(id) {
	%orig;
	NSLog(@"-(void) setObjClocation:(id)");
}

-(void) sendHupDialRequest:(id) {
	%orig;
	NSLog(@"-(void) sendHupDialRequest:(id)");
}

-(void) sendTemplateUpdateRequest:(id) {
	%orig;
	NSLog(@"-(void) sendTemplateUpdateRequest:(id)");
}

-(void) sendHupAudioStatusIndication:(id) {
	%orig;
	NSLog(@"-(void) sendHupAudioStatusIndication:(id)");
}

-(void) setImageDataDict:(id) {
	%orig;
	NSLog(@"-(void) setImageDataDict:(id)");
}

-(int) ttsId {
	%orig;
	NSLog(@"-(int) ttsId");
}

-(id) initWithPanasonicManager:(id) withHAP:(id) {
	%orig;
	NSLog(@"-(id) initWithPanasonicManager:(id) withHAP:(id)");
}

-(id) convertToData:(int) value:(int) {
	%orig;
	NSLog(@"-(id) convertToData:(int) value:(int)");
}

-(void) acceptImgIdAndImgData:(id) imgData:(id) {
	%orig;
	NSLog(@"-(void) acceptImgIdAndImgData:(id) imgData:(id)");
}

-(void) setThisTransID:(int) {
	%orig;
	NSLog(@"-(void) setThisTransID:(int)");
}

-(id) objClocation {
	%orig;
	NSLog(@"-(id) objClocation");
}

-(id) ttsText {
	%orig;
	NSLog(@"-(id) ttsText");
}

-(id) processContentAccordingToEncoding:(id) content:(id) {
	%orig;
	NSLog(@"-(id) processContentAccordingToEncoding:(id) content:(id)");
}

-(void) sendHupVRRequest:(id) {
	%orig;
	NSLog(@"-(void) sendHupVRRequest:(id)");
}

-(void) handleCallForHU:(id) argsArray:(id) {
	%orig;
	NSLog(@"-(void) handleCallForHU:(id) argsArray:(id)");
}

-(void) handleCallForHU:(id) argsDict:(id) {
	%orig;
	NSLog(@"-(void) handleCallForHU:(id) argsDict:(id)");
}

-(id) imageURL {
	%orig;
	NSLog(@"-(id) imageURL");
}

-(id) imageWithImage:(id) scaledToSize:(CGSize) {
	%orig;
	NSLog(@"-(id) imageWithImage:(id) scaledToSize:(CGSize)");
}

-(void) setImageURL:(id) {
	%orig;
	NSLog(@"-(void) setImageURL:(id)");
}

-(void) setSeqNum:(int) {
	%orig;
	NSLog(@"-(void) setSeqNum:(int)");
}

-(int) seqNum {
	%orig;
	NSLog(@"-(int) seqNum");
}

-(id) sharedLocationManager {
	%orig;
	NSLog(@"-(id) sharedLocationManager");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook MspMessage

-(void) createMessageWithSegmentBodyData:(id) messageType:(int) transID:(int) {
	%orig;
	NSLog(@"-(void) createMessageWithSegmentBodyData:(id) messageType:(int) transID:(int)");
}

-(id) initWithSegmentBodyData:(id) messageType:(int) transID:(int) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithSegmentBodyData:(id) messageType:(int) transID:(int) delegate:(id)");
}

-(void) setMessageData:(id) {
	%orig;
	NSLog(@"-(void) setMessageData:(id)");
}

-(id) messageData {
	%orig;
	NSLog(@"-(id) messageData");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PanasonicStreamAdapter

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(id) initWithHAP:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id)");
}

-(void) asyncReadMessage {
	%orig;
	NSLog(@"-(void) asyncReadMessage");
}

-(long long) write:(char*) maxLength:(unsigned long long) {
	%orig;
	NSLog(@"-(long long) write:(char*) maxLength:(unsigned long long)");
}

-(long long) read:(char*) maxLength:(unsigned long long) {
	%orig;
	NSLog(@"-(long long) read:(char*) maxLength:(unsigned long long)");
}

-(bool) hasBytesAvailable {
	%orig;
	NSLog(@"-(bool) hasBytesAvailable");
}

-(bool) hasSpaceAvailable {
	%orig;
	NSLog(@"-(bool) hasSpaceAvailable");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook MspSegment

-(void) createSegmentForRequest {
	%orig;
	NSLog(@"-(void) createSegmentForRequest");
}

-(id) createResponseMessageWithData:(id) bodyLength:(int) messageType:(int) segNumber:(int) segQuant:(int) transID:(int) {
	%orig;
	NSLog(@"-(id) createResponseMessageWithData:(id) bodyLength:(int) messageType:(int) segNumber:(int) segQuant:(int) transID:(int)");
}

-(void) setMspHeader:(_mspheader*) {
	%orig;
	NSLog(@"-(void) setMspHeader:(_mspheader*)");
}

-(_mspheader*) mspHeader {
	%orig;
	NSLog(@"-(_mspheader*) mspHeader");
}

-(id) initWithSegmentBodyLength:(int) messageType:(int) segNumber:(int) segQuant:(int) transID:(int) segmentBody:(id) {
	%orig;
	NSLog(@"-(id) initWithSegmentBodyLength:(int) messageType:(int) segNumber:(int) segQuant:(int) transID:(int) segmentBody:(id)");
}

-(int) segmentLength {
	%orig;
	NSLog(@"-(int) segmentLength");
}

-(bool) crcCheck {
	%orig;
	NSLog(@"-(bool) crcCheck");
}

-(id) parseTextDataForAppID {
	%orig;
	NSLog(@"-(id) parseTextDataForAppID");
}

-(id) parseTextDataForTextIDs {
	%orig;
	NSLog(@"-(id) parseTextDataForTextIDs");
}

-(id) parseImageDataForAppID {
	%orig;
	NSLog(@"-(id) parseImageDataForAppID");
}

-(id) parseImageDataForImgID {
	%orig;
	NSLog(@"-(id) parseImageDataForImgID");
}

-(id) parseHmiOperationIndication {
	%orig;
	NSLog(@"-(id) parseHmiOperationIndication");
}

-(id) parseTTSResponse {
	%orig;
	NSLog(@"-(id) parseTTSResponse");
}

-(id) segmentBody {
	%orig;
	NSLog(@"-(id) segmentBody");
}

-(void) setSegmentBody:(id) {
	%orig;
	NSLog(@"-(void) setSegmentBody:(id)");
}

-(unsigned short) crcData {
	%orig;
	NSLog(@"-(unsigned short) crcData");
}

-(void) setCrcData:(unsigned short) {
	%orig;
	NSLog(@"-(void) setCrcData:(unsigned short)");
}

-(id) segmentData {
	%orig;
	NSLog(@"-(id) segmentData");
}

-(void) setSegmentData:(id) {
	%orig;
	NSLog(@"-(void) setSegmentData:(id)");
}

-(int) commandType {
	%orig;
	NSLog(@"-(int) commandType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithData:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id)");
}

%end

%hook PanasonicManager

+(id) sharedPMWithHAP:(id) {
	%orig;
	NSLog(@"+(id) sharedPMWithHAP:(id)");
}

+(bool) isPMActive {
	%orig;
	NSLog(@"+(bool) isPMActive");
}

+(void) assignHuSerialNumber:(id) {
	%orig;
	NSLog(@"+(void) assignHuSerialNumber:(id)");
}

+(id) huSerialNumber {
	%orig;
	NSLog(@"+(id) huSerialNumber");
}

+(void) stopPM {
	%orig;
	NSLog(@"+(void) stopPM");
}

+(id) sharedPM {
	%orig;
	NSLog(@"+(id) sharedPM");
}

-(void) assignParametersToPmWithDelegate:(id) streamSource:(id) {
	%orig;
	NSLog(@"-(void) assignParametersToPmWithDelegate:(id) streamSource:(id)");
}

-(void) readDataToBuffer {
	%orig;
	NSLog(@"-(void) readDataToBuffer");
}

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(id) initWithHAP:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id)");
}

-(bool) sendResponseWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) sendResponseWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(bool) sendMessageWithPayload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) sendMessageWithPayload:(id) contentType:(id)");
}

-(id) ssDelegate {
	%orig;
	NSLog(@"-(id) ssDelegate");
}

-(void) setSsDelegate:(id) {
	%orig;
	NSLog(@"-(void) setSsDelegate:(id)");
}

-(void) setThisStreamSource:(id) {
	%orig;
	NSLog(@"-(void) setThisStreamSource:(id)");
}

-(void) setJsHandler:(id) {
	%orig;
	NSLog(@"-(void) setJsHandler:(id)");
}

-(void) setWvManager:(id) {
	%orig;
	NSLog(@"-(void) setWvManager:(id)");
}

-(void) setVrManager:(id) {
	%orig;
	NSLog(@"-(void) setVrManager:(id)");
}

-(void) setImageIdFor3rdParty:(unsigned int) {
	%orig;
	NSLog(@"-(void) setImageIdFor3rdParty:(unsigned int)");
}

-(id) thisStreamSource {
	%orig;
	NSLog(@"-(id) thisStreamSource");
}

-(void) discriminateCommand:(id) {
	%orig;
	NSLog(@"-(void) discriminateCommand:(id)");
}

-(void) processAppDataMessagesWithSegment:(id) {
	%orig;
	NSLog(@"-(void) processAppDataMessagesWithSegment:(id)");
}

-(void) processAudioDataMessageWithSegment:(id) {
	%orig;
	NSLog(@"-(void) processAudioDataMessageWithSegment:(id)");
}

-(void) processTemplateDataMessagesWithSegment:(id) {
	%orig;
	NSLog(@"-(void) processTemplateDataMessagesWithSegment:(id)");
}

-(void) processControlMessagesWithSegment:(id) {
	%orig;
	NSLog(@"-(void) processControlMessagesWithSegment:(id)");
}

-(void) writeData {
	%orig;
	NSLog(@"-(void) writeData");
}

-(bool) isJsReady {
	%orig;
	NSLog(@"-(bool) isJsReady");
}

-(void) setThisExitTransID:(unsigned short) {
	%orig;
	NSLog(@"-(void) setThisExitTransID:(unsigned short)");
}

-(int) thisTTSEndTransID {
	%orig;
	NSLog(@"-(int) thisTTSEndTransID");
}

-(void) activateVehicle:(id) {
	%orig;
	NSLog(@"-(void) activateVehicle:(id)");
}

-(id) vrManager {
	%orig;
	NSLog(@"-(id) vrManager");
}

-(void) writeDataToBuffer:(id) {
	%orig;
	NSLog(@"-(void) writeDataToBuffer:(id)");
}

-(void) setThisTTSEndTransID:(int) {
	%orig;
	NSLog(@"-(void) setThisTTSEndTransID:(int)");
}

-(void) setThisVRID:(int) {
	%orig;
	NSLog(@"-(void) setThisVRID:(int)");
}

-(unsigned short) thisExitTransID {
	%orig;
	NSLog(@"-(unsigned short) thisExitTransID");
}

-(unsigned int) imageIdFor3rdParty {
	%orig;
	NSLog(@"-(unsigned int) imageIdFor3rdParty");
}

-(void) PM_respondToSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) PM_respondToSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(void) setMyFirstObject:(id) {
	%orig;
	NSLog(@"-(void) setMyFirstObject:(id)");
}

-(id) myFirstObject {
	%orig;
	NSLog(@"-(id) myFirstObject");
}

-(id) hupScreenUpdatedNotification:(int) {
	%orig;
	NSLog(@"-(id) hupScreenUpdatedNotification:(int)");
}

-(id) thisSegment {
	%orig;
	NSLog(@"-(id) thisSegment");
}

-(void) setThisSegment:(id) {
	%orig;
	NSLog(@"-(void) setThisSegment:(id)");
}

-(id) audioManager {
	%orig;
	NSLog(@"-(id) audioManager");
}

-(void) setAudioManager:(id) {
	%orig;
	NSLog(@"-(void) setAudioManager:(id)");
}

-(id) thisMipId {
	%orig;
	NSLog(@"-(id) thisMipId");
}

-(void) setThisMipId:(id) {
	%orig;
	NSLog(@"-(void) setThisMipId:(id)");
}

-(void) asyncReadMessage {
	%orig;
	NSLog(@"-(void) asyncReadMessage");
}

-(void) writeMessageData:(id) {
	%orig;
	NSLog(@"-(void) writeMessageData:(id)");
}

-(void) sendHUExitResponse {
	%orig;
	NSLog(@"-(void) sendHUExitResponse");
}

-(void) setTTSEndTransID:(int) {
	%orig;
	NSLog(@"-(void) setTTSEndTransID:(int)");
}

-(void) setVRID:(int) {
	%orig;
	NSLog(@"-(void) setVRID:(int)");
}

-(void) setIsJsReady:(bool) {
	%orig;
	NSLog(@"-(void) setIsJsReady:(bool)");
}

-(void) setHmiOperationQueue:(id) {
	%orig;
	NSLog(@"-(void) setHmiOperationQueue:(id)");
}

-(void) loadJSFiles {
	%orig;
	NSLog(@"-(void) loadJSFiles");
}

-(void) loadJSFilesAfterProfileSync {
	%orig;
	NSLog(@"-(void) loadJSFilesAfterProfileSync");
}

-(id) hmiOperationQueue {
	%orig;
	NSLog(@"-(id) hmiOperationQueue");
}

-(void) startProfileSyncAfterJsIsReady {
	%orig;
	NSLog(@"-(void) startProfileSyncAfterJsIsReady");
}

-(void) invokeProfileStart {
	%orig;
	NSLog(@"-(void) invokeProfileStart");
}

-(int) thisVRID {
	%orig;
	NSLog(@"-(int) thisVRID");
}

-(id) wvManager {
	%orig;
	NSLog(@"-(id) wvManager");
}

-(void) profileSyncComplete {
	%orig;
	NSLog(@"-(void) profileSyncComplete");
}

-(id) jsHandler {
	%orig;
	NSLog(@"-(id) jsHandler");
}

-(id) dequeue {
	%orig;
	NSLog(@"-(id) dequeue");
}

-(void) enqueue:(id) {
	%orig;
	NSLog(@"-(void) enqueue:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook StreamSource

-(void) writeSLIPData:(unsigned char) {
	%orig;
	NSLog(@"-(void) writeSLIPData:(unsigned char)");
}

-(id) convertBytesToString:(void*) length:(int) {
	%orig;
	NSLog(@"-(id) convertBytesToString:(void*) length:(int)");
}

-(void) connectionFound {
	%orig;
	NSLog(@"-(void) connectionFound");
}

-(void) connectionEnded {
	%orig;
	NSLog(@"-(void) connectionEnded");
}

-(id) getProtocolStrings {
	%orig;
	NSLog(@"-(id) getProtocolStrings");
}

-(void) setIsPrevCharSlipTag:(bool) {
	%orig;
	NSLog(@"-(void) setIsPrevCharSlipTag:(bool)");
}

-(void) setManualWrite:(bool) {
	%orig;
	NSLog(@"-(void) setManualWrite:(bool)");
}

-(void) setIsPM:(bool) {
	%orig;
	NSLog(@"-(void) setIsPM:(bool)");
}

-(void) resetRingBuffers {
	%orig;
	NSLog(@"-(void) resetRingBuffers");
}

-(int) writeOutBuffer {
	%orig;
	NSLog(@"-(int) writeOutBuffer");
}

-(int) writeOutBufferForPM {
	%orig;
	NSLog(@"-(int) writeOutBufferForPM");
}

-(bool) isPM {
	%orig;
	NSLog(@"-(bool) isPM");
}

-(void) readFromStreamForPM:(id) {
	%orig;
	NSLog(@"-(void) readFromStreamForPM:(id)");
}

-(bool) firstByteConfirmed {
	%orig;
	NSLog(@"-(bool) firstByteConfirmed");
}

-(id) asyncAssistDelegate {
	%orig;
	NSLog(@"-(id) asyncAssistDelegate");
}

-(void) setFirstByteConfirmed:(bool) {
	%orig;
	NSLog(@"-(void) setFirstByteConfirmed:(bool)");
}

-(void) resetInputRingBuffer {
	%orig;
	NSLog(@"-(void) resetInputRingBuffer");
}

-(void) resetOutputRingBuffer {
	%orig;
	NSLog(@"-(void) resetOutputRingBuffer");
}

-(void) readFromStream:(id) {
	%orig;
	NSLog(@"-(void) readFromStream:(id)");
}

-(void) setIsPMToYes {
	%orig;
	NSLog(@"-(void) setIsPMToYes");
}

-(void) setIsPMToNo {
	%orig;
	NSLog(@"-(void) setIsPMToNo");
}

-(BOOL) getFirstByte {
	%orig;
	NSLog(@"-(BOOL) getFirstByte");
}

-(void) confirmFirstByte {
	%orig;
	NSLog(@"-(void) confirmFirstByte");
}

-(?*) inputRingBufferPointer {
	%orig;
	NSLog(@"-(?*) inputRingBufferPointer");
}

-(bool) manualWrite {
	%orig;
	NSLog(@"-(bool) manualWrite");
}

-(bool) isPrevCharSlipTag {
	%orig;
	NSLog(@"-(bool) isPrevCharSlipTag");
}

-(bool) connectionActive {
	%orig;
	NSLog(@"-(bool) connectionActive");
}

-(void) setAsyncAssistDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAsyncAssistDelegate:(id)");
}

-(?*) outputRingBufferPointer {
	%orig;
	NSLog(@"-(?*) outputRingBufferPointer");
}

-(void) writeDataForPM:(id) {
	%orig;
	NSLog(@"-(void) writeDataForPM:(id)");
}

-(void) setConnectionActive:(bool) {
	%orig;
	NSLog(@"-(void) setConnectionActive:(bool)");
}

-(void) stream:(id) handleEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) stream:(id) handleEvent:(unsigned long long)");
}

-(int) readData:(char*) {
	%orig;
	NSLog(@"-(int) readData:(char*)");
}

-(void) writeData:(id) {
	%orig;
	NSLog(@"-(void) writeData:(id)");
}

-(id) outputStream {
	%orig;
	NSLog(@"-(id) outputStream");
}

-(void) setInputBuffer:(id) {
	%orig;
	NSLog(@"-(void) setInputBuffer:(id)");
}

-(void) setOutputBuffer:(id) {
	%orig;
	NSLog(@"-(void) setOutputBuffer:(id)");
}

-(void) setInputStream:(id) {
	%orig;
	NSLog(@"-(void) setInputStream:(id)");
}

-(void) setOutputStream:(id) {
	%orig;
	NSLog(@"-(void) setOutputStream:(id)");
}

-(id) outputBuffer {
	%orig;
	NSLog(@"-(id) outputBuffer");
}

-(id) inputBuffer {
	%orig;
	NSLog(@"-(id) inputBuffer");
}

-(void) closeSession {
	%orig;
	NSLog(@"-(void) closeSession");
}

-(bool) openSession {
	%orig;
	NSLog(@"-(bool) openSession");
}

-(id) inputStream {
	%orig;
	NSLog(@"-(id) inputStream");
}

-(id) sessionController {
	%orig;
	NSLog(@"-(id) sessionController");
}

-(void) setSessionController:(id) {
	%orig;
	NSLog(@"-(void) setSessionController:(id)");
}

-(bool) ready {
	%orig;
	NSLog(@"-(bool) ready");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook MFIStream

-(void) accessoryDidConnect:(id) {
	%orig;
	NSLog(@"-(void) accessoryDidConnect:(id)");
}

-(bool) lookForAccessory {
	%orig;
	NSLog(@"-(bool) lookForAccessory");
}

-(void) openSessionWithRetry {
	%orig;
	NSLog(@"-(void) openSessionWithRetry");
}

-(void) setupControllerForAccessory:(id) withProtocolString:(id) {
	%orig;
	NSLog(@"-(void) setupControllerForAccessory:(id) withProtocolString:(id)");
}

-(void) protectedOpen {
	%orig;
	NSLog(@"-(void) protectedOpen");
}

-(void) protectedClose {
	%orig;
	NSLog(@"-(void) protectedClose");
}

-(void) handleOpenSession:(id) {
	%orig;
	NSLog(@"-(void) handleOpenSession:(id)");
}

-(id) getProtocolStrings {
	%orig;
	NSLog(@"-(id) getProtocolStrings");
}

-(void) closeSession {
	%orig;
	NSLog(@"-(void) closeSession");
}

-(void) accessoryDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) accessoryDidDisconnect:(id)");
}

-(bool) openSession {
	%orig;
	NSLog(@"-(bool) openSession");
}

-(id) accessory {
	%orig;
	NSLog(@"-(id) accessory");
}

-(bool) ready {
	%orig;
	NSLog(@"-(bool) ready");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

%end

%hook BSDSocketStream

-(void) notifyConnectionFound {
	%orig;
	NSLog(@"-(void) notifyConnectionFound");
}

-(id) initWithNativeSocket:(int) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithNativeSocket:(int) delegate:(id)");
}

-(void) closeSession {
	%orig;
	NSLog(@"-(void) closeSession");
}

-(bool) openSession {
	%orig;
	NSLog(@"-(bool) openSession");
}

-(bool) ready {
	%orig;
	NSLog(@"-(bool) ready");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook SocksServer

-(bool) startServer:(long long) withDelegate:(id) {
	%orig;
	NSLog(@"-(bool) startServer:(long long) withDelegate:(id)");
}

-(void) removeConnections:(id) {
	%orig;
	NSLog(@"-(void) removeConnections:(id)");
}

-(void) _acceptConnection:(int) withDelegate:(id) {
	%orig;
	NSLog(@"-(void) _acceptConnection:(int) withDelegate:(id)");
}

-(id) connections {
	%orig;
	NSLog(@"-(id) connections");
}

-(void) setIsRunning:(bool) {
	%orig;
	NSLog(@"-(void) setIsRunning:(bool)");
}

-(id) debugString {
	%orig;
	NSLog(@"-(id) debugString");
}

-(void) setDebugString:(id) {
	%orig;
	NSLog(@"-(void) setDebugString:(id)");
}

-(void) stopServer {
	%orig;
	NSLog(@"-(void) stopServer");
}

-(void) setConnections:(id) {
	%orig;
	NSLog(@"-(void) setConnections:(id)");
}

-(void) removeConnection:(id) {
	%orig;
	NSLog(@"-(void) removeConnection:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) isRunning {
	%orig;
	NSLog(@"-(bool) isRunning");
}

%end

%hook SocksConnection

-(void) setClientfd:(int) {
	%orig;
	NSLog(@"-(void) setClientfd:(int)");
}

-(void) setTargetfd:(int) {
	%orig;
	NSLog(@"-(void) setTargetfd:(int)");
}

-(bool) SOCKS5Protocol {
	%orig;
	NSLog(@"-(bool) SOCKS5Protocol");
}

-(bool) SOCKS5Request {
	%orig;
	NSLog(@"-(bool) SOCKS5Request");
}

-(bool) establishConnectionWithTarget {
	%orig;
	NSLog(@"-(bool) establishConnectionWithTarget");
}

-(void) proxyModewithClient {
	%orig;
	NSLog(@"-(void) proxyModewithClient");
}

-(int) clientfd {
	%orig;
	NSLog(@"-(int) clientfd");
}

-(int) targetfd {
	%orig;
	NSLog(@"-(int) targetfd");
}

-(long long) readFromSocket:(int) toBuffer:(id) lwip:(bool) {
	%orig;
	NSLog(@"-(long long) readFromSocket:(int) toBuffer:(id) lwip:(bool)");
}

-(long long) writeToSocket:(int) fromBuffer:(id) lwip:(bool) {
	%orig;
	NSLog(@"-(long long) writeToSocket:(int) fromBuffer:(id) lwip:(bool)");
}

-(void) removeFromFrontOfBuffer:(id) withRange:(_NSRange) {
	%orig;
	NSLog(@"-(void) removeFromFrontOfBuffer:(id) withRange:(_NSRange)");
}

-(void) setTargetHost:(id) {
	%orig;
	NSLog(@"-(void) setTargetHost:(id)");
}

-(void) setTargetPort:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setTargetPort:(unsigned long long)");
}

-(id) targetHost {
	%orig;
	NSLog(@"-(id) targetHost");
}

-(bool) isValidTargetHost:(id) port:(long long) {
	%orig;
	NSLog(@"-(bool) isValidTargetHost:(id) port:(long long)");
}

-(bool) getTargetInfoFromRequestFragment:(int) data:(id*) error:(id*) {
	%orig;
	NSLog(@"-(bool) getTargetInfoFromRequestFragment:(int) data:(id*) error:(id*)");
}

-(bool) startSendReceive:(int) withDelegate:(id) {
	%orig;
	NSLog(@"-(bool) startSendReceive:(int) withDelegate:(id)");
}

-(id) convertBytesToString:(id) length:(int) {
	%orig;
	NSLog(@"-(id) convertBytesToString:(id) length:(int)");
}

-(id) clientHost {
	%orig;
	NSLog(@"-(id) clientHost");
}

-(void) setClientHost:(id) {
	%orig;
	NSLog(@"-(void) setClientHost:(id)");
}

-(id) debugString {
	%orig;
	NSLog(@"-(id) debugString");
}

-(void) setDebugString:(id) {
	%orig;
	NSLog(@"-(void) setDebugString:(id)");
}

-(unsigned long long) clientPort {
	%orig;
	NSLog(@"-(unsigned long long) clientPort");
}

-(bool) handshake {
	%orig;
	NSLog(@"-(bool) handshake");
}

-(unsigned long long) targetPort {
	%orig;
	NSLog(@"-(unsigned long long) targetPort");
}

-(bool) authentication {
	%orig;
	NSLog(@"-(bool) authentication");
}

-(void) setIsValid:(bool) {
	%orig;
	NSLog(@"-(void) setIsValid:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) invalidate {
	%orig;
	NSLog(@"-(void) invalidate");
}

-(void) setClientPort:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setClientPort:(unsigned long long)");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook MongooseResponse

+(id) responseForCommandControlCode404 {
	%orig;
	NSLog(@"+(id) responseForCommandControlCode404");
}

+(id) responseWith200OK {
	%orig;
	NSLog(@"+(id) responseWith200OK");
}

+(id) responseForHeadUnitInformation {
	%orig;
	NSLog(@"+(id) responseForHeadUnitInformation");
}

+(id) customResponseFromGenericPayload:(id) {
	%orig;
	NSLog(@"+(id) customResponseFromGenericPayload:(id)");
}

+(id) responseForGetEvent:(id) payload:(id) server:(id) {
	%orig;
	NSLog(@"+(id) responseForGetEvent:(id) payload:(id) server:(id)");
}

+(id) responseForCommandControlCode503 {
	%orig;
	NSLog(@"+(id) responseForCommandControlCode503");
}

+(id) responseForCommandControlCode307 {
	%orig;
	NSLog(@"+(id) responseForCommandControlCode307");
}

+(id) responseForCommandControlCode516 {
	%orig;
	NSLog(@"+(id) responseForCommandControlCode516");
}

+(id) responseForMIPConnectionStateChange {
	%orig;
	NSLog(@"+(id) responseForMIPConnectionStateChange");
}

+(id) responseForAuthToken:(id) {
	%orig;
	NSLog(@"+(id) responseForAuthToken:(id)");
}

+(id) responseForTTS {
	%orig;
	NSLog(@"+(id) responseForTTS");
}

+(id) responseForApplicationName:(id) {
	%orig;
	NSLog(@"+(id) responseForApplicationName:(id)");
}

+(id) responseForHeadUnitUpdate {
	%orig;
	NSLog(@"+(id) responseForHeadUnitUpdate");
}

+(id) responseForLocation:(id) {
	%orig;
	NSLog(@"+(id) responseForLocation:(id)");
}

+(id) responseForGetEventID:(long long) appName:(id) {
	%orig;
	NSLog(@"+(id) responseForGetEventID:(long long) appName:(id)");
}

-(id) responseWithRawData {
	%orig;
	NSLog(@"-(id) responseWithRawData");
}

-(id) responseHeader {
	%orig;
	NSLog(@"-(id) responseHeader");
}

-(id) contentLength {
	%orig;
	NSLog(@"-(id) contentLength");
}

-(id) server {
	%orig;
	NSLog(@"-(id) server");
}

-(id) responseData {
	%orig;
	NSLog(@"-(id) responseData");
}

-(id) contentType {
	%orig;
	NSLog(@"-(id) contentType");
}

-(void) setRawData:(id) {
	%orig;
	NSLog(@"-(void) setRawData:(id)");
}

-(void) setContentType:(id) {
	%orig;
	NSLog(@"-(void) setContentType:(id)");
}

-(void) setContentLength:(id) {
	%orig;
	NSLog(@"-(void) setContentLength:(id)");
}

-(void) setServer:(id) {
	%orig;
	NSLog(@"-(void) setServer:(id)");
}

-(void) setHttpHeader:(id) {
	%orig;
	NSLog(@"-(void) setHttpHeader:(id)");
}

-(id) httpHeader {
	%orig;
	NSLog(@"-(id) httpHeader");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) rawData {
	%orig;
	NSLog(@"-(id) rawData");
}

%end

%hook MongooseDaemon

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(id) initWithHAP:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id)");
}

-(int) startMongooseDaemon:(id) withDelegate:(id) {
	%orig;
	NSLog(@"-(int) startMongooseDaemon:(id) withDelegate:(id)");
}

-(void) MG_respondToSequenceNumber:(long long) withContentType:(id) andPayload:(id) {
	%orig;
	NSLog(@"-(void) MG_respondToSequenceNumber:(long long) withContentType:(id) andPayload:(id)");
}

-(long long) MG_sendMessageofType:(id) usingSequenceNumber:(long long) withPayload:(id) {
	%orig;
	NSLog(@"-(long long) MG_sendMessageofType:(id) usingSequenceNumber:(long long) withPayload:(id)");
}

-(void) stopMongooseDaemon {
	%orig;
	NSLog(@"-(void) stopMongooseDaemon");
}

-(void) setIsOEMApp:(bool) {
	%orig;
	NSLog(@"-(void) setIsOEMApp:(bool)");
}

-(void) setStagedMessages:(id) {
	%orig;
	NSLog(@"-(void) setStagedMessages:(id)");
}

-(void) setCcConnections:(id) {
	%orig;
	NSLog(@"-(void) setCcConnections:(id)");
}

-(void) setSharedLocationManager:(id) {
	%orig;
	NSLog(@"-(void) setSharedLocationManager:(id)");
}

-(int) startHTTP:(id) {
	%orig;
	NSLog(@"-(int) startHTTP:(id)");
}

-(id) stagedMessages {
	%orig;
	NSLog(@"-(id) stagedMessages");
}

-(id) ccConnections {
	%orig;
	NSLog(@"-(id) ccConnections");
}

-(id) manageGetEventfromConnection:(mg_connection*) withRequestInfo:(const mg_request_info*) {
	%orig;
	NSLog(@"-(id) manageGetEventfromConnection:(mg_connection*) withRequestInfo:(const mg_request_info*)");
}

-(id) sendHandsetProfileToConnection:(mg_connection*) withRequestInfo:(const mg_request_info*) {
	%orig;
	NSLog(@"-(id) sendHandsetProfileToConnection:(mg_connection*) withRequestInfo:(const mg_request_info*)");
}

-(id) handleCommandControlOnConnection:(mg_connection*) withRequestInfo:(const mg_request_info*) {
	%orig;
	NSLog(@"-(id) handleCommandControlOnConnection:(mg_connection*) withRequestInfo:(const mg_request_info*)");
}

-(id) sendHandsetLocationToConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) sendHandsetLocationToConnection:(mg_connection*)");
}

-(id) sendHeadUnitInformationResponseToConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) sendHeadUnitInformationResponseToConnection:(mg_connection*)");
}

-(void) handleMIPConnectionStateChangeOnConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(void) handleMIPConnectionStateChangeOnConnection:(mg_connection*)");
}

-(id) handleAuthenticationTokenOnConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) handleAuthenticationTokenOnConnection:(mg_connection*)");
}

-(id) handleSwitchToAppOnConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) handleSwitchToAppOnConnection:(mg_connection*)");
}

-(id) handleApplicationNameOnConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) handleApplicationNameOnConnection:(mg_connection*)");
}

-(id) handleVehicleInformationOnConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) handleVehicleInformationOnConnection:(mg_connection*)");
}

-(id) handleTTSOnConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) handleTTSOnConnection:(mg_connection*)");
}

-(id) handleAQLayerEventOnConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) handleAQLayerEventOnConnection:(mg_connection*)");
}

-(id) hupUpdateResponseFromConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) hupUpdateResponseFromConnection:(mg_connection*)");
}

-(id) echoResponse:(mg_connection*) {
	%orig;
	NSLog(@"-(id) echoResponse:(mg_connection*)");
}

-(void) writeResponse:(id) connection:(mg_connection*) {
	%orig;
	NSLog(@"-(void) writeResponse:(id) connection:(mg_connection*)");
}

-(id) readRequestDataFromConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(id) readRequestDataFromConnection:(mg_connection*)");
}

-(void) sendActivationMessageWithHeadUnitInfo:(id) {
	%orig;
	NSLog(@"-(void) sendActivationMessageWithHeadUnitInfo:(id)");
}

-(id) sequencedConnection:(mg_connection*) withCustomResponse:(bool) {
	%orig;
	NSLog(@"-(id) sequencedConnection:(mg_connection*) withCustomResponse:(bool)");
}

-(id) whiteListWorkAroundResponse {
	%orig;
	NSLog(@"-(id) whiteListWorkAroundResponse");
}

-(bool) isOEMApp {
	%orig;
	NSLog(@"-(bool) isOEMApp");
}

-(void) unblockAuth {
	%orig;
	NSLog(@"-(void) unblockAuth");
}

-(mg_connection*) longPollConn {
	%orig;
	NSLog(@"-(mg_connection*) longPollConn");
}

-(void) setLongPollConn:(mg_connection*) {
	%orig;
	NSLog(@"-(void) setLongPollConn:(mg_connection*)");
}

-(void) processIncomingConnection:(mg_connection*) {
	%orig;
	NSLog(@"-(void) processIncomingConnection:(mg_connection*)");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(mg_context*) ctx {
	%orig;
	NSLog(@"-(mg_context*) ctx");
}

-(void) setCtx:(mg_context*) {
	%orig;
	NSLog(@"-(void) setCtx:(mg_context*)");
}

-(id) sharedLocationManager {
	%orig;
	NSLog(@"-(id) sharedLocationManager");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook MongooseConnectionSet

-(void) setMessageReady:(bool) {
	%orig;
	NSLog(@"-(void) setMessageReady:(bool)");
}

-(bool) messageReady {
	%orig;
	NSLog(@"-(bool) messageReady");
}

-(void) setResponse:(id) {
	%orig;
	NSLog(@"-(void) setResponse:(id)");
}

-(void) setSet:(mg_set*) {
	%orig;
	NSLog(@"-(void) setSet:(mg_set*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(mg_set*) set {
	%orig;
	NSLog(@"-(mg_set*) set");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

%end

%hook MongooseResponseContainer

-(id) contentType {
	%orig;
	NSLog(@"-(id) contentType");
}

-(void) setContentType:(id) {
	%orig;
	NSLog(@"-(void) setContentType:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) payload {
	%orig;
	NSLog(@"-(id) payload");
}

-(void) setPayload:(id) {
	%orig;
	NSLog(@"-(void) setPayload:(id)");
}

%end

%hook TCPIPManager

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(id) initWithHAP:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id)");
}

-(void) MG_noConnectionPresent {
	%orig;
	NSLog(@"-(void) MG_noConnectionPresent");
}

-(long long) MG_commandReceived:(id) usingSequenceNumber:(long long) withPayload:(id) withRequestInfo:(const mg_request_info*) {
	%orig;
	NSLog(@"-(long long) MG_commandReceived:(id) usingSequenceNumber:(long long) withPayload:(id) withRequestInfo:(const mg_request_info*)");
}

-(void) MG_headUnitInformationReceived:(id) {
	%orig;
	NSLog(@"-(void) MG_headUnitInformationReceived:(id)");
}

-(bool) sendResponseWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) sendResponseWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(bool) sendMessageWithPayload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) sendMessageWithPayload:(id) contentType:(id)");
}

-(int) startLWIP:(id) withMessageDelegate:(id) {
	%orig;
	NSLog(@"-(int) startLWIP:(id) withMessageDelegate:(id)");
}

-(long long) LWIP_sendMessageofType:(id) usingSequenceNumber:(long long) withPayload:(id) {
	%orig;
	NSLog(@"-(long long) LWIP_sendMessageofType:(id) usingSequenceNumber:(long long) withPayload:(id)");
}

-(void) stopLWIP {
	%orig;
	NSLog(@"-(void) stopLWIP");
}

-(id) server {
	%orig;
	NSLog(@"-(id) server");
}

-(void) setProxy:(id) {
	%orig;
	NSLog(@"-(void) setProxy:(id)");
}

-(void) setServer:(id) {
	%orig;
	NSLog(@"-(void) setServer:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(id) proxy {
	%orig;
	NSLog(@"-(id) proxy");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook ABQKeyFragmentsUtility

+(id) fragmentsArray {
	%orig;
	NSLog(@"+(id) fragmentsArray");
}

+(id) nissanSpecificFragmentsArray {
	%orig;
	NSLog(@"+(id) nissanSpecificFragmentsArray");
}

+(id) pasteBoardFragmentsArray {
	%orig;
	NSLog(@"+(id) pasteBoardFragmentsArray");
}

%end

%hook LWIPStreamAdapter

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(void) setupAdapterWithHAP:(id) {
	%orig;
	NSLog(@"-(void) setupAdapterWithHAP:(id)");
}

-(int) readData:(char*) {
	%orig;
	NSLog(@"-(int) readData:(char*)");
}

-(void) writeData:(unsigned char) {
	%orig;
	NSLog(@"-(void) writeData:(unsigned char)");
}

-(id) streamSource {
	%orig;
	NSLog(@"-(id) streamSource");
}

-(void) setStreamSource:(id) {
	%orig;
	NSLog(@"-(void) setStreamSource:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQDateUtility

+(id) stringFromISO8601:(id) {
	%orig;
	NSLog(@"+(id) stringFromISO8601:(id)");
}

+(id) minutesSecondsFromDate:(id) {
	%orig;
	NSLog(@"+(id) minutesSecondsFromDate:(id)");
}

+(id) dateFromChoreoString:(id) {
	%orig;
	NSLog(@"+(id) dateFromChoreoString:(id)");
}

+(id) sharedDateFormatter {
	%orig;
	NSLog(@"+(id) sharedDateFormatter");
}

+(id) dateFromString:(id) {
	%orig;
	NSLog(@"+(id) dateFromString:(id)");
}

-(id) dateFormatter {
	%orig;
	NSLog(@"-(id) dateFormatter");
}

-(void) setDateFormatter:(id) {
	%orig;
	NSLog(@"-(void) setDateFormatter:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook TCPIPTemplateManager

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(void) setWebViewManager:(id) {
	%orig;
	NSLog(@"-(void) setWebViewManager:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(id) webViewManager {
	%orig;
	NSLog(@"-(id) webViewManager");
}

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(void) statusDidChangeTo:(bool) forAppWithName:(id) {
	%orig;
	NSLog(@"-(void) statusDidChangeTo:(bool) forAppWithName:(id)");
}

-(void) setHeadUnitConfig:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnitConfig:(id)");
}

-(id) initWithHAP:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id)");
}

-(id) headUnitConfig {
	%orig;
	NSLog(@"-(id) headUnitConfig");
}

-(id) createWebViewPayloadWithData:(id) withRequestInfo:(const mg_request_info*) withSequenceNumber:(long long) {
	%orig;
	NSLog(@"-(id) createWebViewPayloadWithData:(id) withRequestInfo:(const mg_request_info*) withSequenceNumber:(long long)");
}

-(bool) sendHUResponseWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) sendHUResponseWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(bool) isPayloadHandsetProfileUpdate:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) isPayloadHandsetProfileUpdate:(id) contentType:(id)");
}

-(id) headersDictionaryFromRequestInfo:(const mg_request_info*) {
	%orig;
	NSLog(@"-(id) headersDictionaryFromRequestInfo:(const mg_request_info*)");
}

-(void) MG_noConnectionPresent {
	%orig;
	NSLog(@"-(void) MG_noConnectionPresent");
}

-(long long) MG_commandReceived:(id) usingSequenceNumber:(long long) withPayload:(id) withRequestInfo:(const mg_request_info*) {
	%orig;
	NSLog(@"-(long long) MG_commandReceived:(id) usingSequenceNumber:(long long) withPayload:(id) withRequestInfo:(const mg_request_info*)");
}

-(void) MG_headUnitInformationReceived:(id) {
	%orig;
	NSLog(@"-(void) MG_headUnitInformationReceived:(id)");
}

-(void) wvSendResponse:(id) withSequenceNumber:(int) {
	%orig;
	NSLog(@"-(void) wvSendResponse:(id) withSequenceNumber:(int)");
}

-(void) wvSendMessageWithPayload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) wvSendMessageWithPayload:(id) contentType:(id)");
}

-(bool) sendResponseWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) sendResponseWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(bool) sendMessageWithPayload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) sendMessageWithPayload:(id) contentType:(id)");
}

-(id) initWithHAP:(id) headUnitConfig:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id) headUnitConfig:(id)");
}

-(int) startLWIP:(id) withMessageDelegate:(id) {
	%orig;
	NSLog(@"-(int) startLWIP:(id) withMessageDelegate:(id)");
}

-(int) sequenceNumberFromResponseData:(id) {
	%orig;
	NSLog(@"-(int) sequenceNumberFromResponseData:(id)");
}

-(id) server {
	%orig;
	NSLog(@"-(id) server");
}

-(void) setServer:(id) {
	%orig;
	NSLog(@"-(void) setServer:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook ProfileSyncConfiguration

+(id) defaultVP2CProfileSyncConfig {
	%orig;
	NSLog(@"+(id) defaultVP2CProfileSyncConfig");
}

+(id) exampleRenaultChinaProfileSyncConfig {
	%orig;
	NSLog(@"+(id) exampleRenaultChinaProfileSyncConfig");
}

-(void) setDoMinimumAppDownloads:(bool) {
	%orig;
	NSLog(@"-(void) setDoMinimumAppDownloads:(bool)");
}

-(void) setSyncChoreoPath:(id) {
	%orig;
	NSLog(@"-(void) setSyncChoreoPath:(id)");
}

-(void) setAppsSyncChoreoPath:(id) {
	%orig;
	NSLog(@"-(void) setAppsSyncChoreoPath:(id)");
}

-(void) setHupUpdateChoreoPath:(id) {
	%orig;
	NSLog(@"-(void) setHupUpdateChoreoPath:(id)");
}

-(void) setPolicySyncChoreoPath:(id) {
	%orig;
	NSLog(@"-(void) setPolicySyncChoreoPath:(id)");
}

-(void) setMaxSecondsForBatchOfDownloads:(int) {
	%orig;
	NSLog(@"-(void) setMaxSecondsForBatchOfDownloads:(int)");
}

-(void) setSyncLifetimeSeconds:(int) {
	%orig;
	NSLog(@"-(void) setSyncLifetimeSeconds:(int)");
}

-(void) setPassThroughHeadUnitInfo:(bool) {
	%orig;
	NSLog(@"-(void) setPassThroughHeadUnitInfo:(bool)");
}

-(void) setDoAppInstallUponDownloadTimeout:(bool) {
	%orig;
	NSLog(@"-(void) setDoAppInstallUponDownloadTimeout:(bool)");
}

-(int) maxSecondsForBatchOfDownloads {
	%orig;
	NSLog(@"-(int) maxSecondsForBatchOfDownloads");
}

-(int) syncLifetimeSeconds {
	%orig;
	NSLog(@"-(int) syncLifetimeSeconds");
}

-(bool) doMinimumAppDownloads {
	%orig;
	NSLog(@"-(bool) doMinimumAppDownloads");
}

-(bool) doAppInstallUponDownloadTimeout {
	%orig;
	NSLog(@"-(bool) doAppInstallUponDownloadTimeout");
}

-(bool) passThroughHeadUnitInfo {
	%orig;
	NSLog(@"-(bool) passThroughHeadUnitInfo");
}

-(id) syncChoreoPath {
	%orig;
	NSLog(@"-(id) syncChoreoPath");
}

-(id) appsSyncChoreoPath {
	%orig;
	NSLog(@"-(id) appsSyncChoreoPath");
}

-(id) policySyncChoreoPath {
	%orig;
	NSLog(@"-(id) policySyncChoreoPath");
}

-(id) hupUpdateChoreoPath {
	%orig;
	NSLog(@"-(id) hupUpdateChoreoPath");
}

-(bool) doAppsSync {
	%orig;
	NSLog(@"-(bool) doAppsSync");
}

-(bool) doHupUpdate {
	%orig;
	NSLog(@"-(bool) doHupUpdate");
}

-(bool) doPolicySync {
	%orig;
	NSLog(@"-(bool) doPolicySync");
}

-(id) asDictionary {
	%orig;
	NSLog(@"-(id) asDictionary");
}

-(id) initFromDictionary:(id) {
	%orig;
	NSLog(@"-(id) initFromDictionary:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook HMIFilePaths

+(id) appsPath {
	%orig;
	NSLog(@"+(id) appsPath");
}

+(void) initHMIFilePathsWithAccessoryName:(id) {
	%orig;
	NSLog(@"+(void) initHMIFilePathsWithAccessoryName:(id)");
}

+(void) clearFileSystem {
	%orig;
	NSLog(@"+(void) clearFileSystem");
}

+(id) homePath {
	%orig;
	NSLog(@"+(id) homePath");
}

+(id) aqPath {
	%orig;
	NSLog(@"+(id) aqPath");
}

+(id) fileIoPath {
	%orig;
	NSLog(@"+(id) fileIoPath");
}

+(id) policyPath {
	%orig;
	NSLog(@"+(id) policyPath");
}

+(id) hupUpdatePath {
	%orig;
	NSLog(@"+(id) hupUpdatePath");
}

+(id) downloadPath {
	%orig;
	NSLog(@"+(id) downloadPath");
}

+(id) plistPath {
	%orig;
	NSLog(@"+(id) plistPath");
}

+(id) rootPath {
	%orig;
	NSLog(@"+(id) rootPath");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) appsPath {
	%orig;
	NSLog(@"-(id) appsPath");
}

-(void) initializeAllPaths {
	%orig;
	NSLog(@"-(void) initializeAllPaths");
}

-(void) initializePathNames {
	%orig;
	NSLog(@"-(void) initializePathNames");
}

-(void) createPathsUnderRootPath {
	%orig;
	NSLog(@"-(void) createPathsUnderRootPath");
}

-(void) setAppsPath:(id) {
	%orig;
	NSLog(@"-(void) setAppsPath:(id)");
}

-(void) setAqPath:(id) {
	%orig;
	NSLog(@"-(void) setAqPath:(id)");
}

-(void) setHomePath:(id) {
	%orig;
	NSLog(@"-(void) setHomePath:(id)");
}

-(void) setDownloadPath:(id) {
	%orig;
	NSLog(@"-(void) setDownloadPath:(id)");
}

-(void) setHupUpdatePath:(id) {
	%orig;
	NSLog(@"-(void) setHupUpdatePath:(id)");
}

-(void) setPlistPath:(id) {
	%orig;
	NSLog(@"-(void) setPlistPath:(id)");
}

-(void) setPolicyPath:(id) {
	%orig;
	NSLog(@"-(void) setPolicyPath:(id)");
}

-(void) setFileIoPath:(id) {
	%orig;
	NSLog(@"-(void) setFileIoPath:(id)");
}

-(id) appStartupInfoPath {
	%orig;
	NSLog(@"-(id) appStartupInfoPath");
}

-(void) setAppStartupInfoPath:(id) {
	%orig;
	NSLog(@"-(void) setAppStartupInfoPath:(id)");
}

-(id) hupUpdateChecksum {
	%orig;
	NSLog(@"-(id) hupUpdateChecksum");
}

-(id) hupUpdatePathAndFilename {
	%orig;
	NSLog(@"-(id) hupUpdatePathAndFilename");
}

-(id) homePath {
	%orig;
	NSLog(@"-(id) homePath");
}

-(id) aqPath {
	%orig;
	NSLog(@"-(id) aqPath");
}

-(id) fileIoPath {
	%orig;
	NSLog(@"-(id) fileIoPath");
}

-(id) policyPath {
	%orig;
	NSLog(@"-(id) policyPath");
}

-(id) hupUpdatePath {
	%orig;
	NSLog(@"-(id) hupUpdatePath");
}

-(void) setHupUpdatePathAndFilename:(id) {
	%orig;
	NSLog(@"-(void) setHupUpdatePathAndFilename:(id)");
}

-(void) setHupUpdateChecksum:(id) {
	%orig;
	NSLog(@"-(void) setHupUpdateChecksum:(id)");
}

-(id) downloadPath {
	%orig;
	NSLog(@"-(id) downloadPath");
}

-(id) plistPath {
	%orig;
	NSLog(@"-(id) plistPath");
}

-(void) setRootPath:(id) {
	%orig;
	NSLog(@"-(void) setRootPath:(id)");
}

-(id) rootPath {
	%orig;
	NSLog(@"-(id) rootPath");
}

-(id) accessoryName {
	%orig;
	NSLog(@"-(id) accessoryName");
}

-(void) setAccessoryName:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryName:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook SuperclassOfDAProfileManager

+(id) sharedProfileManagerWithHAP:(id) webViewManager:(id) huManagerDelegate:(id) {
	%orig;
	NSLog(@"+(id) sharedProfileManagerWithHAP:(id) webViewManager:(id) huManagerDelegate:(id)");
}

-(id) vin {
	%orig;
	NSLog(@"-(id) vin");
}

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(void) setWebViewManager:(id) {
	%orig;
	NSLog(@"-(void) setWebViewManager:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(id) webViewManager {
	%orig;
	NSLog(@"-(id) webViewManager");
}

-(id) headUnitManagerDelegate {
	%orig;
	NSLog(@"-(id) headUnitManagerDelegate");
}

-(void) setHeadUnitManagerDelegate:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnitManagerDelegate:(id)");
}

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(bool) isProfileSyncInProgress {
	%orig;
	NSLog(@"-(bool) isProfileSyncInProgress");
}

-(void) setIsProfileSyncInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setIsProfileSyncInProgress:(bool)");
}

-(void) makeProfileCallAndQueueFilesIfNecessary {
	%orig;
	NSLog(@"-(void) makeProfileCallAndQueueFilesIfNecessary");
}

-(id) huSerialNumber {
	%orig;
	NSLog(@"-(id) huSerialNumber");
}

-(id) checksumForDictionary:(id) {
	%orig;
	NSLog(@"-(id) checksumForDictionary:(id)");
}

-(void) sendProfileCompleteMessageToHMI {
	%orig;
	NSLog(@"-(void) sendProfileCompleteMessageToHMI");
}

-(void) handleChoreoFailureUsingStatusCode:(long long) error:(id) {
	%orig;
	NSLog(@"-(void) handleChoreoFailureUsingStatusCode:(long long) error:(id)");
}

-(id) hmiNotificationDictionaryForInProgressFromAppList:(id) {
	%orig;
	NSLog(@"-(id) hmiNotificationDictionaryForInProgressFromAppList:(id)");
}

-(id) hmiNotificationDictionaryForProfileComplete {
	%orig;
	NSLog(@"-(id) hmiNotificationDictionaryForProfileComplete");
}

-(id) profileEnhancedRequestPath {
	%orig;
	NSLog(@"-(id) profileEnhancedRequestPath");
}

-(id) profileEnhancedMessageBody {
	%orig;
	NSLog(@"-(id) profileEnhancedMessageBody");
}

-(void) appDownloadsComplete {
	%orig;
	NSLog(@"-(void) appDownloadsComplete");
}

-(void) sendProfileSyncStartToHMI {
	%orig;
	NSLog(@"-(void) sendProfileSyncStartToHMI");
}

-(void) sendInProgressMessageToHMIUsingAppList:(id) {
	%orig;
	NSLog(@"-(void) sendInProgressMessageToHMIUsingAppList:(id)");
}

-(void) sendErrorNotificationToHMIWithChoreoErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) sendErrorNotificationToHMIWithChoreoErrorCode:(long long)");
}

-(id) initWithHAP:(id) webViewManager:(id) huManagerDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id) webViewManager:(id) huManagerDelegate:(id)");
}

-(void) sendProfileCompleteAndPostNotification {
	%orig;
	NSLog(@"-(void) sendProfileCompleteAndPostNotification");
}

-(id) huFirmwareVersion {
	%orig;
	NSLog(@"-(id) huFirmwareVersion");
}

-(id) huType {
	%orig;
	NSLog(@"-(id) huType");
}

-(id) hupPlatformVersion {
	%orig;
	NSLog(@"-(id) hupPlatformVersion");
}

-(id) hupPlatformName {
	%orig;
	NSLog(@"-(id) hupPlatformName");
}

-(id) huPartNumber {
	%orig;
	NSLog(@"-(id) huPartNumber");
}

-(id) returnValueForThisKey:(id) manifestArray:(id) {
	%orig;
	NSLog(@"-(id) returnValueForThisKey:(id) manifestArray:(id)");
}

-(void) unzipChoreoFileAndExtractAppToCopyToDaPath:(id) choreoPath:(id) daPath:(id) appName:(id) {
	%orig;
	NSLog(@"-(void) unzipChoreoFileAndExtractAppToCopyToDaPath:(id) choreoPath:(id) daPath:(id) appName:(id)");
}

-(id) secondLayerPath:(id) choreoPath:(id) binaryFileName:(id) {
	%orig;
	NSLog(@"-(id) secondLayerPath:(id) choreoPath:(id) binaryFileName:(id)");
}

-(id) initWithHAP:(id) webViewManager:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id) webViewManager:(id)");
}

-(void) startAppsOnlySync {
	%orig;
	NSLog(@"-(void) startAppsOnlySync");
}

-(void) setIsHupUpdateNeeded:(bool) {
	%orig;
	NSLog(@"-(void) setIsHupUpdateNeeded:(bool)");
}

-(id) syncMessageBody {
	%orig;
	NSLog(@"-(id) syncMessageBody");
}

-(id) hupUpdateMessageBody {
	%orig;
	NSLog(@"-(id) hupUpdateMessageBody");
}

-(void) downloadHUPUpdateUsingHUPInfo:(id) {
	%orig;
	NSLog(@"-(void) downloadHUPUpdateUsingHUPInfo:(id)");
}

-(void) sendHupUpdateNotification:(id) {
	%orig;
	NSLog(@"-(void) sendHupUpdateNotification:(id)");
}

-(void) queueAppsForDownload {
	%orig;
	NSLog(@"-(void) queueAppsForDownload");
}

-(void) anAppDownloadCompleted {
	%orig;
	NSLog(@"-(void) anAppDownloadCompleted");
}

-(void) unzipHMIAppFile:(id) forAppName:(id) toDestination:(id) {
	%orig;
	NSLog(@"-(void) unzipHMIAppFile:(id) forAppName:(id) toDestination:(id)");
}

-(id) composeProfileDataForHMI:(id) {
	%orig;
	NSLog(@"-(id) composeProfileDataForHMI:(id)");
}

-(id) composeProfileState:(id) {
	%orig;
	NSLog(@"-(id) composeProfileState:(id)");
}

-(void) headUnitUpdateHasCompleted {
	%orig;
	NSLog(@"-(void) headUnitUpdateHasCompleted");
}

-(id) hupInfoDictionary {
	%orig;
	NSLog(@"-(id) hupInfoDictionary");
}

-(bool) isHupUpdateNeeded {
	%orig;
	NSLog(@"-(bool) isHupUpdateNeeded");
}

-(void) makeHUPUpdateCallAndQueueFilesIfNecessary {
	%orig;
	NSLog(@"-(void) makeHUPUpdateCallAndQueueFilesIfNecessary");
}

-(void) downloadFailedWithError:(id) {
	%orig;
	NSLog(@"-(void) downloadFailedWithError:(id)");
}

-(void) downloadCompleted:(id) {
	%orig;
	NSLog(@"-(void) downloadCompleted:(id)");
}

-(void) allDownloadsCompleted {
	%orig;
	NSLog(@"-(void) allDownloadsCompleted");
}

-(void) timeoutExceeded {
	%orig;
	NSLog(@"-(void) timeoutExceeded");
}

-(bool) isInstalled:(id) {
	%orig;
	NSLog(@"-(bool) isInstalled:(id)");
}

-(id) downloader {
	%orig;
	NSLog(@"-(id) downloader");
}

-(void) setDownloader:(id) {
	%orig;
	NSLog(@"-(void) setDownloader:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook DAProfileManager

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(void) sendProfileCompleteMessageToHMI {
	%orig;
	NSLog(@"-(void) sendProfileCompleteMessageToHMI");
}

-(void) makePolicyCallAndDownloadPolicies {
	%orig;
	NSLog(@"-(void) makePolicyCallAndDownloadPolicies");
}

-(void) updatePolicyListFromAppsList {
	%orig;
	NSLog(@"-(void) updatePolicyListFromAppsList");
}

-(id) policyMessageBody {
	%orig;
	NSLog(@"-(id) policyMessageBody");
}

-(void) downloadPoliciesForPolicyResponseArray:(id) {
	%orig;
	NSLog(@"-(void) downloadPoliciesForPolicyResponseArray:(id)");
}

-(void) policyDownloadsComplete {
	%orig;
	NSLog(@"-(void) policyDownloadsComplete");
}

-(void) setPendingPolicyDownloads:(id) {
	%orig;
	NSLog(@"-(void) setPendingPolicyDownloads:(id)");
}

-(id) pendingPolicyDownloads {
	%orig;
	NSLog(@"-(id) pendingPolicyDownloads");
}

-(void) signalIfAllPolicyDownloadsComplete {
	%orig;
	NSLog(@"-(void) signalIfAllPolicyDownloadsComplete");
}

-(void) sendPolicyCompleteMessageToHMI {
	%orig;
	NSLog(@"-(void) sendPolicyCompleteMessageToHMI");
}

-(id) policyListAppNames {
	%orig;
	NSLog(@"-(id) policyListAppNames");
}

-(id) appListAppNames {
	%orig;
	NSLog(@"-(id) appListAppNames");
}

-(id) remainderBetweenPolicyListAppNames:(id) appListAppNames:(id) {
	%orig;
	NSLog(@"-(id) remainderBetweenPolicyListAppNames:(id) appListAppNames:(id)");
}

-(void) addDiffToPolicyListArray:(id) {
	%orig;
	NSLog(@"-(void) addDiffToPolicyListArray:(id)");
}

-(id) profileEnhancedRequestPath {
	%orig;
	NSLog(@"-(id) profileEnhancedRequestPath");
}

-(id) profileEnhancedMessageBody {
	%orig;
	NSLog(@"-(id) profileEnhancedMessageBody");
}

-(void) appDownloadsComplete {
	%orig;
	NSLog(@"-(void) appDownloadsComplete");
}

-(void) downloadsComplete {
	%orig;
	NSLog(@"-(void) downloadsComplete");
}

-(void) sendProfileSyncStartToHMI {
	%orig;
	NSLog(@"-(void) sendProfileSyncStartToHMI");
}

-(void) sendInProgressMessageToHMIUsingAppList:(id) {
	%orig;
	NSLog(@"-(void) sendInProgressMessageToHMIUsingAppList:(id)");
}

-(void) sendErrorNotificationToHMIWithChoreoErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) sendErrorNotificationToHMIWithChoreoErrorCode:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ABQSpeexDecoder

-(long long) oggBufferSize {
	%orig;
	NSLog(@"-(long long) oggBufferSize");
}

-(id) decodeSpeexData:(id) {
	%orig;
	NSLog(@"-(id) decodeSpeexData:(id)");
}

-(?) oggSyncState {
	%orig;
	NSLog(@"-(?) oggSyncState");
}

-(void) setOggSyncState:(?) {
	%orig;
	NSLog(@"-(void) setOggSyncState:(?)");
}

-(?) oggStreamState {
	%orig;
	NSLog(@"-(?) oggStreamState");
}

-(void) setOggStreamState:(?) {
	%orig;
	NSLog(@"-(void) setOggStreamState:(?)");
}

-(int) stream_init {
	%orig;
	NSLog(@"-(int) stream_init");
}

-(void) setStream_init:(int) {
	%orig;
	NSLog(@"-(void) setStream_init:(int)");
}

-(SpeexBits) bits {
	%orig;
	NSLog(@"-(SpeexBits) bits");
}

-(void) setBits:(SpeexBits) {
	%orig;
	NSLog(@"-(void) setBits:(SpeexBits)");
}

-(void*) dec_state {
	%orig;
	NSLog(@"-(void*) dec_state");
}

-(void) setDec_state:(void*) {
	%orig;
	NSLog(@"-(void) setDec_state:(void*)");
}

-(int) frame_size {
	%orig;
	NSLog(@"-(int) frame_size");
}

-(void) setFrame_size:(int) {
	%orig;
	NSLog(@"-(void) setFrame_size:(int)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

%end

%hook SyncManager

+(void) clearLastSyncCache {
	%orig;
	NSLog(@"+(void) clearLastSyncCache");
}

+(id) mostRecentProfileResponseFromCache {
	%orig;
	NSLog(@"+(id) mostRecentProfileResponseFromCache");
}

-(void) setProfileSyncConfig:(id) {
	%orig;
	NSLog(@"-(void) setProfileSyncConfig:(id)");
}

-(id) profileSyncConfig {
	%orig;
	NSLog(@"-(id) profileSyncConfig");
}

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(void) setWebViewManager:(id) {
	%orig;
	NSLog(@"-(void) setWebViewManager:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(id) webViewManager {
	%orig;
	NSLog(@"-(id) webViewManager");
}

-(id) headUnitManagerDelegate {
	%orig;
	NSLog(@"-(id) headUnitManagerDelegate");
}

-(void) setHeadUnitManagerDelegate:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnitManagerDelegate:(id)");
}

-(id) initWithHAP:(id) webViewManager:(id) profileSyncConfig:(id) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id) webViewManager:(id) profileSyncConfig:(id)");
}

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(void) statusDidChangeTo:(bool) forAppWithName:(id) {
	%orig;
	NSLog(@"-(void) statusDidChangeTo:(bool) forAppWithName:(id)");
}

-(id) fileManager {
	%orig;
	NSLog(@"-(id) fileManager");
}

-(void) setFileManager:(id) {
	%orig;
	NSLog(@"-(void) setFileManager:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setOperationQueue:(id) {
	%orig;
	NSLog(@"-(void) setOperationQueue:(id)");
}

-(id) operationQueue {
	%orig;
	NSLog(@"-(id) operationQueue");
}

%end

%hook HeadUnitConfiguration

-(void) setHeadUnits:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnits:(id)");
}

-(void) setAppSwitchMode:(id) {
	%orig;
	NSLog(@"-(void) setAppSwitchMode:(id)");
}

-(void) setProfileSyncConfig:(id) {
	%orig;
	NSLog(@"-(void) setProfileSyncConfig:(id)");
}

-(id) headUnits {
	%orig;
	NSLog(@"-(id) headUnits");
}

-(id) appSwitchMode {
	%orig;
	NSLog(@"-(id) appSwitchMode");
}

-(id) profileSyncConfig {
	%orig;
	NSLog(@"-(id) profileSyncConfig");
}

-(bool) containsHeadUnitTypeWithAccessoryName:(id) {
	%orig;
	NSLog(@"-(bool) containsHeadUnitTypeWithAccessoryName:(id)");
}

-(bool) isHeadUnitTypeWithAccessoryName:(id) validForAppScheme:(id) {
	%orig;
	NSLog(@"-(bool) isHeadUnitTypeWithAccessoryName:(id) validForAppScheme:(id)");
}

-(id) modules {
	%orig;
	NSLog(@"-(id) modules");
}

-(void) setModules:(id) {
	%orig;
	NSLog(@"-(void) setModules:(id)");
}

-(id) asDictionary {
	%orig;
	NSLog(@"-(id) asDictionary");
}

-(id) initFromDictionary:(id) {
	%orig;
	NSLog(@"-(id) initFromDictionary:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook AQHAP

-(void) accessoryDidConnect:(id) {
	%orig;
	NSLog(@"-(void) accessoryDidConnect:(id)");
}

-(long long) aqHapInitialize:(id) withScheme:(id) withVersion:(id) delegate:(id) {
	%orig;
	NSLog(@"-(long long) aqHapInitialize:(id) withScheme:(id) withVersion:(id) delegate:(id)");
}

-(bool) aqSendMessageWithPayload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) aqSendMessageWithPayload:(id) contentType:(id)");
}

-(bool) aqSendResponseWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(bool) aqSendResponseWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(id) appScheme {
	%orig;
	NSLog(@"-(id) appScheme");
}

-(id) initWithChoreoNetworkEngine:(id) isThirdPartyApp:(bool) {
	%orig;
	NSLog(@"-(id) initWithChoreoNetworkEngine:(id) isThirdPartyApp:(bool)");
}

-(void) setShouldLogKPI:(bool) {
	%orig;
	NSLog(@"-(void) setShouldLogKPI:(bool)");
}

-(void) setConnectionPaused:(bool) {
	%orig;
	NSLog(@"-(void) setConnectionPaused:(bool)");
}

-(void) setIsProcessingDeviceConnection:(bool) {
	%orig;
	NSLog(@"-(void) setIsProcessingDeviceConnection:(bool)");
}

-(void) setHandlerMap:(id) {
	%orig;
	NSLog(@"-(void) setHandlerMap:(id)");
}

-(void) setAQLogIPAddress:(id) {
	%orig;
	NSLog(@"-(void) setAQLogIPAddress:(id)");
}

-(void) setHapConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setHapConfiguration:(id)");
}

-(void) clearProfileSyncCache {
	%orig;
	NSLog(@"-(void) clearProfileSyncCache");
}

-(void) setStreamController:(id) {
	%orig;
	NSLog(@"-(void) setStreamController:(id)");
}

-(bool) connectionPaused {
	%orig;
	NSLog(@"-(bool) connectionPaused");
}

-(bool) configureHeadUnitManagerUsingAccessoryName:(id) {
	%orig;
	NSLog(@"-(bool) configureHeadUnitManagerUsingAccessoryName:(id)");
}

-(void) onActiveNotification:(id) {
	%orig;
	NSLog(@"-(void) onActiveNotification:(id)");
}

-(void) onTerminateNotification:(id) {
	%orig;
	NSLog(@"-(void) onTerminateNotification:(id)");
}

-(void) onBackgroundNotification:(id) {
	%orig;
	NSLog(@"-(void) onBackgroundNotification:(id)");
}

-(void) onForegroundNotification:(id) {
	%orig;
	NSLog(@"-(void) onForegroundNotification:(id)");
}

-(bool) connectedToSupportedAccessory {
	%orig;
	NSLog(@"-(bool) connectedToSupportedAccessory");
}

-(bool) getStateFromPasteboard {
	%orig;
	NSLog(@"-(bool) getStateFromPasteboard");
}

-(void) setHeadUnitName:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnitName:(id)");
}

-(bool) isHeadUnitWithName:(id) validForAppScheme:(id) {
	%orig;
	NSLog(@"-(bool) isHeadUnitWithName:(id) validForAppScheme:(id)");
}

-(void) saveVehicleInformationToPasteboard {
	%orig;
	NSLog(@"-(void) saveVehicleInformationToPasteboard");
}

-(void) pauseConnection {
	%orig;
	NSLog(@"-(void) pauseConnection");
}

-(bool) isTemplateBasedHeadUnit {
	%orig;
	NSLog(@"-(bool) isTemplateBasedHeadUnit");
}

-(id) hapConfiguration {
	%orig;
	NSLog(@"-(id) hapConfiguration");
}

-(void) setConnectedHeadUnitConfig:(id) {
	%orig;
	NSLog(@"-(void) setConnectedHeadUnitConfig:(id)");
}

-(void) setIsTemplateBasedHeadUnit:(bool) {
	%orig;
	NSLog(@"-(void) setIsTemplateBasedHeadUnit:(bool)");
}

-(void) setupConnectionForPM {
	%orig;
	NSLog(@"-(void) setupConnectionForPM");
}

-(bool) setupConnectionForLWIPStack {
	%orig;
	NSLog(@"-(bool) setupConnectionForLWIPStack");
}

-(bool) setupConnectionForTCPIPTemplateManagerUsingConfig:(id) {
	%orig;
	NSLog(@"-(bool) setupConnectionForTCPIPTemplateManagerUsingConfig:(id)");
}

-(void) setHapMessenger:(id) {
	%orig;
	NSLog(@"-(void) setHapMessenger:(id)");
}

-(id) hapMessenger {
	%orig;
	NSLog(@"-(id) hapMessenger");
}

-(bool) isProcessingDeviceConnection {
	%orig;
	NSLog(@"-(bool) isProcessingDeviceConnection");
}

-(bool) setupHAP {
	%orig;
	NSLog(@"-(bool) setupHAP");
}

-(id) sanitizedAppUrlFromUrl:(id) {
	%orig;
	NSLog(@"-(id) sanitizedAppUrlFromUrl:(id)");
}

-(void) saveStateToPasteboard {
	%orig;
	NSLog(@"-(void) saveStateToPasteboard");
}

-(void) releaseMFI {
	%orig;
	NSLog(@"-(void) releaseMFI");
}

-(id) getURLParametersFromURL:(id) {
	%orig;
	NSLog(@"-(id) getURLParametersFromURL:(id)");
}

-(id) jsonFromObj:(id) {
	%orig;
	NSLog(@"-(id) jsonFromObj:(id)");
}

-(id) handlerMap {
	%orig;
	NSLog(@"-(id) handlerMap");
}

-(id) AQLogIPAddress {
	%orig;
	NSLog(@"-(id) AQLogIPAddress");
}

-(id) pasteBoardEncryptionKey {
	%orig;
	NSLog(@"-(id) pasteBoardEncryptionKey");
}

-(id) dictionaryFromJson:(id) {
	%orig;
	NSLog(@"-(id) dictionaryFromJson:(id)");
}

-(id) arrayFromJson:(id) {
	%orig;
	NSLog(@"-(id) arrayFromJson:(id)");
}

-(void) fetchVehicleInformationFromPasteboard {
	%orig;
	NSLog(@"-(void) fetchVehicleInformationFromPasteboard");
}

-(void) stopHAP {
	%orig;
	NSLog(@"-(void) stopHAP");
}

-(void) maybeCallDelegateOnMainQueue:(SEL) {
	%orig;
	NSLog(@"-(void) maybeCallDelegateOnMainQueue:(SEL)");
}

-(void) setSequenceNum:(id) {
	%orig;
	NSLog(@"-(void) setSequenceNum:(id)");
}

-(void) setAppScheme:(id) {
	%orig;
	NSLog(@"-(void) setAppScheme:(id)");
}

-(long long) initializationCounter {
	%orig;
	NSLog(@"-(long long) initializationCounter");
}

-(void) setInitializationCounter:(long long) {
	%orig;
	NSLog(@"-(void) setInitializationCounter:(long long)");
}

-(id) convertBytesToString:(id) length:(int) contentType:(id) {
	%orig;
	NSLog(@"-(id) convertBytesToString:(id) length:(int) contentType:(id)");
}

-(void) saveHandlerMap:(id) {
	%orig;
	NSLog(@"-(void) saveHandlerMap:(id)");
}

-(void) buildHandlerMap {
	%orig;
	NSLog(@"-(void) buildHandlerMap");
}

-(void) setHandsetProfileResponseData:(id) {
	%orig;
	NSLog(@"-(void) setHandsetProfileResponseData:(id)");
}

-(id) sequenceNum {
	%orig;
	NSLog(@"-(id) sequenceNum");
}

-(void) buildHandsetProfile {
	%orig;
	NSLog(@"-(void) buildHandsetProfile");
}

-(id) handsetProfileResponseData {
	%orig;
	NSLog(@"-(id) handsetProfileResponseData");
}

-(void) setVehicleInformation:(id) {
	%orig;
	NSLog(@"-(void) setVehicleInformation:(id)");
}

-(void) dataRecieved {
	%orig;
	NSLog(@"-(void) dataRecieved");
}

-(void) logChoreoFailure:(id) {
	%orig;
	NSLog(@"-(void) logChoreoFailure:(id)");
}

-(void) processMipId:(id) andAuthToken:(id) {
	%orig;
	NSLog(@"-(void) processMipId:(id) andAuthToken:(id)");
}

-(bool) openDataSession {
	%orig;
	NSLog(@"-(bool) openDataSession");
}

-(void) closeDataSession {
	%orig;
	NSLog(@"-(void) closeDataSession");
}

-(bool) MFIready {
	%orig;
	NSLog(@"-(bool) MFIready");
}

-(bool) checkForInstalledOEMApp:(id) {
	%orig;
	NSLog(@"-(bool) checkForInstalledOEMApp:(id)");
}

-(void) aqHapDeinit {
	%orig;
	NSLog(@"-(void) aqHapDeinit");
}

-(bool) aqHapSendMessageOfType:(id) usingSequenceNumber:(long long) withPayload:(id) {
	%orig;
	NSLog(@"-(bool) aqHapSendMessageOfType:(id) usingSequenceNumber:(long long) withPayload:(id)");
}

-(void) triggerLocationServicesInitialization {
	%orig;
	NSLog(@"-(void) triggerLocationServicesInitialization");
}

-(void) saveHandsetProfileResponse:(id) {
	%orig;
	NSLog(@"-(void) saveHandsetProfileResponse:(id)");
}

-(void) saveVehicleInformationResponse:(id) {
	%orig;
	NSLog(@"-(void) saveVehicleInformationResponse:(id)");
}

-(void) clearApps {
	%orig;
	NSLog(@"-(void) clearApps");
}

-(id) desiredHAPConfigurationVersion {
	%orig;
	NSLog(@"-(id) desiredHAPConfigurationVersion");
}

-(id) vehicleInformation {
	%orig;
	NSLog(@"-(id) vehicleInformation");
}

-(id) sequenceToConnectionMap {
	%orig;
	NSLog(@"-(id) sequenceToConnectionMap");
}

-(void) setSequenceToConnectionMap:(id) {
	%orig;
	NSLog(@"-(void) setSequenceToConnectionMap:(id)");
}

-(void) startProfileSync {
	%orig;
	NSLog(@"-(void) startProfileSync");
}

-(void) statusDidChangeTo:(bool) forAppWithName:(id) {
	%orig;
	NSLog(@"-(void) statusDidChangeTo:(bool) forAppWithName:(id)");
}

-(id) appStartUpInfoList {
	%orig;
	NSLog(@"-(id) appStartUpInfoList");
}

-(bool) isThirdPartyApp {
	%orig;
	NSLog(@"-(bool) isThirdPartyApp");
}

-(id) handsetInfoDictionary {
	%orig;
	NSLog(@"-(id) handsetInfoDictionary");
}

-(id) choreoNetworkEngine {
	%orig;
	NSLog(@"-(id) choreoNetworkEngine");
}

-(void) setHeadUnitInfoDict:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnitInfoDict:(id)");
}

-(id) headUnitInfoDict {
	%orig;
	NSLog(@"-(id) headUnitInfoDict");
}

-(void) logEvent:(id) withInfoText:(id) {
	%orig;
	NSLog(@"-(void) logEvent:(id) withInfoText:(id)");
}

-(id) getNextSequenceNumber {
	%orig;
	NSLog(@"-(id) getNextSequenceNumber");
}

-(id) streamController {
	%orig;
	NSLog(@"-(id) streamController");
}

-(void) AQHAP_CommandControlMessageRecieved:(id) usingSequenceNumber:(long long) withPayload:(id) {
	%orig;
	NSLog(@"-(void) AQHAP_CommandControlMessageRecieved:(id) usingSequenceNumber:(long long) withPayload:(id)");
}

-(id) handsetProfileResponse {
	%orig;
	NSLog(@"-(id) handsetProfileResponse");
}

-(id) schemeForApp:(id) {
	%orig;
	NSLog(@"-(id) schemeForApp:(id)");
}

-(id) oemAppScheme {
	%orig;
	NSLog(@"-(id) oemAppScheme");
}

-(id) connectedHeadUnitConfig {
	%orig;
	NSLog(@"-(id) connectedHeadUnitConfig");
}

-(void) switchToAppWithURL:(id) {
	%orig;
	NSLog(@"-(void) switchToAppWithURL:(id)");
}

-(void) deviceConnected {
	%orig;
	NSLog(@"-(void) deviceConnected");
}

-(void) deviceDisconnected {
	%orig;
	NSLog(@"-(void) deviceDisconnected");
}

-(bool) shouldLogKPI {
	%orig;
	NSLog(@"-(bool) shouldLogKPI");
}

-(id) headUnitName {
	%orig;
	NSLog(@"-(id) headUnitName");
}

-(id) getProtocolStrings {
	%orig;
	NSLog(@"-(id) getProtocolStrings");
}

-(id) initForOEMAppWithChoreoNetworkEngine:(id) {
	%orig;
	NSLog(@"-(id) initForOEMAppWithChoreoNetworkEngine:(id)");
}

-(void) setIsThirdPartyApp:(bool) {
	%orig;
	NSLog(@"-(void) setIsThirdPartyApp:(bool)");
}

-(void) setOemAppScheme:(id) {
	%orig;
	NSLog(@"-(void) setOemAppScheme:(id)");
}

-(void) saveCountryCode:(id) {
	%orig;
	NSLog(@"-(void) saveCountryCode:(id)");
}

-(void) setOemAppVersion:(id) {
	%orig;
	NSLog(@"-(void) setOemAppVersion:(id)");
}

-(id) oemAppVersion {
	%orig;
	NSLog(@"-(id) oemAppVersion");
}

-(void) initializeMipId:(id) andAuthToken:(id) {
	%orig;
	NSLog(@"-(void) initializeMipId:(id) andAuthToken:(id)");
}

-(void) setAppStartUpInfoList:(id) {
	%orig;
	NSLog(@"-(void) setAppStartUpInfoList:(id)");
}

-(id) headUnitTypeFromHeadUnitInfoDict {
	%orig;
	NSLog(@"-(id) headUnitTypeFromHeadUnitInfoDict");
}

-(bool) isReadyForProfileSync {
	%orig;
	NSLog(@"-(bool) isReadyForProfileSync");
}

-(void) callOnHapServiceEstablished {
	%orig;
	NSLog(@"-(void) callOnHapServiceEstablished");
}

-(void) callOnHapServiceNotEstablished {
	%orig;
	NSLog(@"-(void) callOnHapServiceNotEstablished");
}

-(void) callOnHapConnectionLost {
	%orig;
	NSLog(@"-(void) callOnHapConnectionLost");
}

-(void) callOnHapGeneralError {
	%orig;
	NSLog(@"-(void) callOnHapGeneralError");
}

-(void) PM_CommandControlMessageReceived:(id) usingSequenceNumber:(long long) withPayload:(id) {
	%orig;
	NSLog(@"-(void) PM_CommandControlMessageReceived:(id) usingSequenceNumber:(long long) withPayload:(id)");
}

-(bool) isFirstStart {
	%orig;
	NSLog(@"-(bool) isFirstStart");
}

-(void) setIsFirstStart:(bool) {
	%orig;
	NSLog(@"-(void) setIsFirstStart:(bool)");
}

-(void) unregisterNotifications {
	%orig;
	NSLog(@"-(void) unregisterNotifications");
}

-(void) setNotificationsRegistered:(bool) {
	%orig;
	NSLog(@"-(void) setNotificationsRegistered:(bool)");
}

-(bool) notificationsRegistered {
	%orig;
	NSLog(@"-(bool) notificationsRegistered");
}

-(void) sendFileToChoreoUsingURI:(id) filePath:(id) successBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(void) sendFileToChoreoUsingURI:(id) filePath:(id) successBlock:(id) failureBlock:(?)");
}

-(void) logChoreoFileDownloadQueued:(id) {
	%orig;
	NSLog(@"-(void) logChoreoFileDownloadQueued:(id)");
}

-(void) logChoreoFileDownloadComplete:(id) {
	%orig;
	NSLog(@"-(void) logChoreoFileDownloadComplete:(id)");
}

-(void) logChoreoFileDownloadFailed:(id) {
	%orig;
	NSLog(@"-(void) logChoreoFileDownloadFailed:(id)");
}

-(void) doReLogin {
	%orig;
	NSLog(@"-(void) doReLogin");
}

-(void) logChoreoRequest:(id) {
	%orig;
	NSLog(@"-(void) logChoreoRequest:(id)");
}

-(void) logChoreoResponse:(id) {
	%orig;
	NSLog(@"-(void) logChoreoResponse:(id)");
}

-(void) resumeConnection {
	%orig;
	NSLog(@"-(void) resumeConnection");
}

-(bool) connected {
	%orig;
	NSLog(@"-(bool) connected");
}

-(id) countryCode {
	%orig;
	NSLog(@"-(id) countryCode");
}

-(void) setCountryCode:(id) {
	%orig;
	NSLog(@"-(void) setCountryCode:(id)");
}

-(bool) backgrounded {
	%orig;
	NSLog(@"-(bool) backgrounded");
}

-(void) setBrandId:(id) {
	%orig;
	NSLog(@"-(void) setBrandId:(id)");
}

-(id) brandId {
	%orig;
	NSLog(@"-(id) brandId");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(void) setAppVersion:(id) {
	%orig;
	NSLog(@"-(void) setAppVersion:(id)");
}

-(id) appVersion {
	%orig;
	NSLog(@"-(id) appVersion");
}

-(void) handleURL:(id) {
	%orig;
	NSLog(@"-(void) handleURL:(id)");
}

-(void) registerNotifications {
	%orig;
	NSLog(@"-(void) registerNotifications");
}

-(void) accessoryDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) accessoryDidDisconnect:(id)");
}

-(void) setConnected:(bool) {
	%orig;
	NSLog(@"-(void) setConnected:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setVersion:(id) {
	%orig;
	NSLog(@"-(void) setVersion:(id)");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(void) setBackgrounded:(bool) {
	%orig;
	NSLog(@"-(void) setBackgrounded:(bool)");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) setError:(id) {
	%orig;
	NSLog(@"-(void) setError:(id)");
}

%end

%hook UConnectHAPManager

-(id) profileEnhancedMessageBody {
	%orig;
	NSLog(@"-(id) profileEnhancedMessageBody");
}

-(void) setHeadUnitInfoDict:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnitInfoDict:(id)");
}

-(void) invokeDelegateCallbackEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) invokeDelegateCallbackEvent:(unsigned long long)");
}

-(bool) allowDataUsage {
	%orig;
	NSLog(@"-(bool) allowDataUsage");
}

-(void) setAccessTokenToRefresh:(id) {
	%orig;
	NSLog(@"-(void) setAccessTokenToRefresh:(id)");
}

-(void) initializeTargetUrlsWithDelegate:(id) {
	%orig;
	NSLog(@"-(void) initializeTargetUrlsWithDelegate:(id)");
}

-(void) initializeChoreoTimeWithDelegate:(id) {
	%orig;
	NSLog(@"-(void) initializeChoreoTimeWithDelegate:(id)");
}

-(id) accessTokenToRefresh {
	%orig;
	NSLog(@"-(id) accessTokenToRefresh");
}

-(void) combinedLoginWithAccessToken:(id) delegate:(id) {
	%orig;
	NSLog(@"-(void) combinedLoginWithAccessToken:(id) delegate:(id)");
}

-(void) loadAppInfoWithDelegate:(id) {
	%orig;
	NSLog(@"-(void) loadAppInfoWithDelegate:(id)");
}

-(void) loadAppStartupInfoWithDelegate:(id) {
	%orig;
	NSLog(@"-(void) loadAppStartupInfoWithDelegate:(id)");
}

-(void) loadAppOnOffStatusWithDelegate:(id) {
	%orig;
	NSLog(@"-(void) loadAppOnOffStatusWithDelegate:(id)");
}

-(void) loadImagesWithDelegate:(id) {
	%orig;
	NSLog(@"-(void) loadImagesWithDelegate:(id)");
}

-(id) choreoUrlForService:(id) {
	%orig;
	NSLog(@"-(id) choreoUrlForService:(id)");
}

-(void) initializeTargetUrlsComplete {
	%orig;
	NSLog(@"-(void) initializeTargetUrlsComplete");
}

-(void) handleErrorWithCode:(long long) {
	%orig;
	NSLog(@"-(void) handleErrorWithCode:(long long)");
}

-(void) initializeChoreoTimeComplete {
	%orig;
	NSLog(@"-(void) initializeChoreoTimeComplete");
}

-(id) handsetProfileForLogin {
	%orig;
	NSLog(@"-(id) handsetProfileForLogin");
}

-(void) initializeHAPWithLoginResponse:(id) {
	%orig;
	NSLog(@"-(void) initializeHAPWithLoginResponse:(id)");
}

-(void) loginWithAccessTokenComplete {
	%orig;
	NSLog(@"-(void) loginWithAccessTokenComplete");
}

-(void) initializeAppListFromArray:(id) {
	%orig;
	NSLog(@"-(void) initializeAppListFromArray:(id)");
}

-(void) loadAppInfoComplete {
	%orig;
	NSLog(@"-(void) loadAppInfoComplete");
}

-(void) loadAppStartupInfoComplete {
	%orig;
	NSLog(@"-(void) loadAppStartupInfoComplete");
}

-(id) appWithId:(long long) {
	%orig;
	NSLog(@"-(id) appWithId:(long long)");
}

-(void) loadAppOnOffStatusComplete {
	%orig;
	NSLog(@"-(void) loadAppOnOffStatusComplete");
}

-(void) logoutComplete {
	%orig;
	NSLog(@"-(void) logoutComplete");
}

-(id) profileEnhanedMessageBodyFromAQHAPPMProfileSyncStart {
	%orig;
	NSLog(@"-(id) profileEnhanedMessageBodyFromAQHAPPMProfileSyncStart");
}

-(void) loadImagesComplete {
	%orig;
	NSLog(@"-(void) loadImagesComplete");
}

-(void) combinedLoginComplete {
	%orig;
	NSLog(@"-(void) combinedLoginComplete");
}

-(void) loadCombinedAppInfoComplete {
	%orig;
	NSLog(@"-(void) loadCombinedAppInfoComplete");
}

-(id) accessTokenFromChryslerSimulatorWithUsername:(id) password:(id) {
	%orig;
	NSLog(@"-(id) accessTokenFromChryslerSimulatorWithUsername:(id) password:(id)");
}

-(void) loadCombinedAppInfoWithDelegate:(id) {
	%orig;
	NSLog(@"-(void) loadCombinedAppInfoWithDelegate:(id)");
}

-(id) initWithName:(id) withVersion:(id) withBrandID:(long long) withCountry:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) withVersion:(id) withBrandID:(long long) withCountry:(id) delegate:(id)");
}

-(bool) isReadyForProfileSync {
	%orig;
	NSLog(@"-(bool) isReadyForProfileSync");
}

-(void) setBaseWebServiceUrl:(id) {
	%orig;
	NSLog(@"-(void) setBaseWebServiceUrl:(id)");
}

-(void) setAllowDataUsage:(bool) {
	%orig;
	NSLog(@"-(void) setAllowDataUsage:(bool)");
}

-(long long) refreshAccessToken:(id) {
	%orig;
	NSLog(@"-(long long) refreshAccessToken:(id)");
}

-(void) loginWithAccessToken:(id) delegate:(id) {
	%orig;
	NSLog(@"-(void) loginWithAccessToken:(id) delegate:(id)");
}

-(void) logoutWithDelegate:(id) {
	%orig;
	NSLog(@"-(void) logoutWithDelegate:(id)");
}

-(void) logoutSynchronous {
	%orig;
	NSLog(@"-(void) logoutSynchronous");
}

-(id) getProfileSyncResponse {
	%orig;
	NSLog(@"-(id) getProfileSyncResponse");
}

-(id) getProfileEnhancedResponse {
	%orig;
	NSLog(@"-(id) getProfileEnhancedResponse");
}

-(void) getProfileEnhancedResponseWithSuccessBlock:(id) {
	%orig;
	NSLog(@"-(void) getProfileEnhancedResponseWithSuccessBlock:(id)");
}

-(id) profileEnhancedMessageBodyWithLotsOfApps {
	%orig;
	NSLog(@"-(id) profileEnhancedMessageBodyWithLotsOfApps");
}

-(id) getAppList {
	%orig;
	NSLog(@"-(id) getAppList");
}

-(void) deleteCachedAppData {
	%orig;
	NSLog(@"-(void) deleteCachedAppData");
}

-(long long) setState:(bool) withAppId:(long long) {
	%orig;
	NSLog(@"-(long long) setState:(bool) withAppId:(long long)");
}

-(void) callOnHapServiceEstablished {
	%orig;
	NSLog(@"-(void) callOnHapServiceEstablished");
}

-(void) callOnHapServiceNotEstablished {
	%orig;
	NSLog(@"-(void) callOnHapServiceNotEstablished");
}

-(void) callOnHapConnectionLost {
	%orig;
	NSLog(@"-(void) callOnHapConnectionLost");
}

-(void) callOnHapGeneralError {
	%orig;
	NSLog(@"-(void) callOnHapGeneralError");
}

-(id) accessTokenFromChryslerSimulator {
	%orig;
	NSLog(@"-(id) accessTokenFromChryslerSimulator");
}

-(void) secretSetHeadUnitInfoDict:(id) {
	%orig;
	NSLog(@"-(void) secretSetHeadUnitInfoDict:(id)");
}

-(bool) isInstalled:(id) {
	%orig;
	NSLog(@"-(bool) isInstalled:(id)");
}

-(id) appsList {
	%orig;
	NSLog(@"-(id) appsList");
}

-(void) setAppsList:(id) {
	%orig;
	NSLog(@"-(void) setAppsList:(id)");
}

-(id) getImage:(id) {
	%orig;
	NSLog(@"-(id) getImage:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ImageResponseHelper

-(bool) string:(id) hasPrefix:(id) caseInsensitive:(bool) {
	%orig;
	NSLog(@"-(bool) string:(id) hasPrefix:(id) caseInsensitive:(bool)");
}

-(id) resizeImage:(id) imgWidth:(id) imgHeight:(id) ignoreAspectRatio:(bool) {
	%orig;
	NSLog(@"-(id) resizeImage:(id) imgWidth:(id) imgHeight:(id) ignoreAspectRatio:(bool)");
}

-(id) resizedImageDataWithParams:(id) {
	%orig;
	NSLog(@"-(id) resizedImageDataWithParams:(id)");
}

-(id) imageWithImage:(id) scaledToSize:(CGSize) {
	%orig;
	NSLog(@"-(id) imageWithImage:(id) scaledToSize:(CGSize)");
}

%end

%hook IDVersionInfo

+(id) versionInfoWithMajor:(unsigned long long) minor:(unsigned long long) revision:(unsigned long long) {
	%orig;
	NSLog(@"+(id) versionInfoWithMajor:(unsigned long long) minor:(unsigned long long) revision:(unsigned long long)");
}

+(id) versionInfoWithString:(id) {
	%orig;
	NSLog(@"+(id) versionInfoWithString:(id)");
}

-(SmartPointer<EtchObject>) etchObject {
	%orig;
	NSLog(@"-(SmartPointer<EtchObject>) etchObject");
}

-(id) initWithMajor:(unsigned long long) minor:(unsigned long long) revision:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithMajor:(unsigned long long) minor:(unsigned long long) revision:(unsigned long long)");
}

-(unsigned long long) revision {
	%orig;
	NSLog(@"-(unsigned long long) revision");
}

-(unsigned long long) major {
	%orig;
	NSLog(@"-(unsigned long long) major");
}

-(unsigned long long) minor {
	%orig;
	NSLog(@"-(unsigned long long) minor");
}

-(bool) isEqualToVersion:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToVersion:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) stringValue {
	%orig;
	NSLog(@"-(id) stringValue");
}

-(long long) compare:(id) {
	%orig;
	NSLog(@"-(long long) compare:(id)");
}

%end

%hook IDVehicleInformationRetriever

-(id) vehicleInfo {
	%orig;
	NSLog(@"-(id) vehicleInfo");
}

-(id) etchSession {
	%orig;
	NSLog(@"-(id) etchSession");
}

-(id) retrievalQueue {
	%orig;
	NSLog(@"-(id) retrievalQueue");
}

-(double) waitTimeBeforeRetrieval {
	%orig;
	NSLog(@"-(double) waitTimeBeforeRetrieval");
}

-(bool) connectToHmi:(id*) {
	%orig;
	NSLog(@"-(bool) connectToHmi:(id*)");
}

-(id) fetchSystemInfoDict:(id*) {
	%orig;
	NSLog(@"-(id) fetchSystemInfoDict:(id*)");
}

-(void) setVehicleInfo:(id) {
	%orig;
	NSLog(@"-(void) setVehicleInfo:(id)");
}

-(id) fetchCdsVersion:(id*) {
	%orig;
	NSLog(@"-(id) fetchCdsVersion:(id*)");
}

-(void) setCdsVersionInfo:(id) {
	%orig;
	NSLog(@"-(void) setCdsVersionInfo:(id)");
}

-(id) fetchEtchVersion:(id*) {
	%orig;
	NSLog(@"-(id) fetchEtchVersion:(id*)");
}

-(void) setEtchVersionInfo:(id) {
	%orig;
	NSLog(@"-(void) setEtchVersionInfo:(id)");
}

-(void) disconnectFromHmi {
	%orig;
	NSLog(@"-(void) disconnectFromHmi");
}

-(void) setEtchSession:(id) {
	%orig;
	NSLog(@"-(void) setEtchSession:(id)");
}

-(id) cdsVersionInfo {
	%orig;
	NSLog(@"-(id) cdsVersionInfo");
}

-(id) initWithURL:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) delegate:(id)");
}

-(void) retrieveVehicleProperties {
	%orig;
	NSLog(@"-(void) retrieveVehicleProperties");
}

-(id) etchVersionInfo {
	%orig;
	NSLog(@"-(id) etchVersionInfo");
}

-(void) setWaitTimeBeforeRetrieval:(double) {
	%orig;
	NSLog(@"-(void) setWaitTimeBeforeRetrieval:(double)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

%end

%hook IDVehicleInfo

+(unsigned long long) vehicleHmiTypeWithString:(id) {
	%orig;
	NSLog(@"+(unsigned long long) vehicleHmiTypeWithString:(id)");
}

+(unsigned long long) vehicleBrandWithString:(id) {
	%orig;
	NSLog(@"+(unsigned long long) vehicleBrandWithString:(id)");
}

+(unsigned long long) vehicleHmiVersionWithString:(id) {
	%orig;
	NSLog(@"+(unsigned long long) vehicleHmiVersionWithString:(id)");
}

+(unsigned long long) vehicleCountryWithString:(id) {
	%orig;
	NSLog(@"+(unsigned long long) vehicleCountryWithString:(id)");
}

+(bool) boolWithString:(id) {
	%orig;
	NSLog(@"+(bool) boolWithString:(id)");
}

+(id) stringWithVehicleBrand:(unsigned long long) {
	%orig;
	NSLog(@"+(id) stringWithVehicleBrand:(unsigned long long)");
}

+(id) stringWithVehicleHmiVersion:(unsigned long long) {
	%orig;
	NSLog(@"+(id) stringWithVehicleHmiVersion:(unsigned long long)");
}

+(id) stringWithVehicleHmiType:(unsigned long long) {
	%orig;
	NSLog(@"+(id) stringWithVehicleHmiType:(unsigned long long)");
}

+(id) stringWithVehicleCountry:(unsigned long long) {
	%orig;
	NSLog(@"+(id) stringWithVehicleCountry:(unsigned long long)");
}

-(unsigned long long) hmiType {
	%orig;
	NSLog(@"-(unsigned long long) hmiType");
}

-(unsigned long long) hmiVersion {
	%orig;
	NSLog(@"-(unsigned long long) hmiVersion");
}

-(bool) isA4AXLSupported {
	%orig;
	NSLog(@"-(bool) isA4AXLSupported");
}

-(bool) isSpeedLockSupported {
	%orig;
	NSLog(@"-(bool) isSpeedLockSupported");
}

-(bool) isNaviSupported {
	%orig;
	NSLog(@"-(bool) isNaviSupported");
}

-(bool) isPIASupported {
	%orig;
	NSLog(@"-(bool) isPIASupported");
}

-(bool) isTTSSupported {
	%orig;
	NSLog(@"-(bool) isTTSSupported");
}

-(bool) isSTTSupported {
	%orig;
	NSLog(@"-(bool) isSTTSupported");
}

-(id) systemInfoDict {
	%orig;
	NSLog(@"-(id) systemInfoDict");
}

-(void) setBrand:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBrand:(unsigned long long)");
}

-(void) setHmiVersion:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setHmiVersion:(unsigned long long)");
}

-(void) setHmiType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setHmiType:(unsigned long long)");
}

-(void) setA4AXLSupported:(bool) {
	%orig;
	NSLog(@"-(void) setA4AXLSupported:(bool)");
}

-(void) setSpeedLockSupported:(bool) {
	%orig;
	NSLog(@"-(void) setSpeedLockSupported:(bool)");
}

-(void) setNaviSupported:(bool) {
	%orig;
	NSLog(@"-(void) setNaviSupported:(bool)");
}

-(void) setPIASupported:(bool) {
	%orig;
	NSLog(@"-(void) setPIASupported:(bool)");
}

-(void) setTTSSupported:(bool) {
	%orig;
	NSLog(@"-(void) setTTSSupported:(bool)");
}

-(void) setSTTSupported:(bool) {
	%orig;
	NSLog(@"-(void) setSTTSupported:(bool)");
}

-(unsigned long long) country {
	%orig;
	NSLog(@"-(unsigned long long) country");
}

-(void) setCountry:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCountry:(unsigned long long)");
}

-(id) vehicleType {
	%orig;
	NSLog(@"-(id) vehicleType");
}

-(void) setVehicleType:(id) {
	%orig;
	NSLog(@"-(void) setVehicleType:(id)");
}

-(unsigned long long) brand {
	%orig;
	NSLog(@"-(unsigned long long) brand");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook IDVariantMap

+(id) variantMapWithVariant:(id) forId:(long long) {
	%orig;
	NSLog(@"+(id) variantMapWithVariant:(id) forId:(long long)");
}

+(id) variantMapWithEtchObject:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >) {
	%orig;
	NSLog(@"+(id) variantMapWithEtchObject:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >)");
}

-(id) variantForId:(long long) {
	%orig;
	NSLog(@"-(id) variantForId:(long long)");
}

-(SmartPointer<EtchObject>) etchObject {
	%orig;
	NSLog(@"-(SmartPointer<EtchObject>) etchObject");
}

-(void) setVariant:(id) forId:(long long) {
	%orig;
	NSLog(@"-(void) setVariant:(id) forId:(long long)");
}

-(id) initWithEtchObject:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >) {
	%orig;
	NSLog(@"-(id) initWithEtchObject:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >)");
}

-(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >) etchHashTable {
	%orig;
	NSLog(@"-(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >) etchHashTable");
}

-(id) initWithVariant:(id) forId:(long long) {
	%orig;
	NSLog(@"-(id) initWithVariant:(id) forId:(long long)");
}

-(bool) isEqualToVariantMap:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToVariantMap:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) objectForKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(id) objectForKeyedSubscript:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(unsigned long long) count {
	%orig;
	NSLog(@"-(unsigned long long) count");
}

-(void) setObject:(id) forKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKeyedSubscript:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook IDVariantData

+(id) variantWithString:(id) {
	%orig;
	NSLog(@"+(id) variantWithString:(id)");
}

+(id) variantWithInteger:(long long) {
	%orig;
	NSLog(@"+(id) variantWithInteger:(long long)");
}

+(id) variantWithImageData:(id) {
	%orig;
	NSLog(@"+(id) variantWithImageData:(id)");
}

+(id) variantWithBoolean:(bool) {
	%orig;
	NSLog(@"+(id) variantWithBoolean:(bool)");
}

+(id) variantWithImageId:(long long) {
	%orig;
	NSLog(@"+(id) variantWithImageId:(long long)");
}

+(id) emptyStringVariant {
	%orig;
	NSLog(@"+(id) emptyStringVariant");
}

+(id) variantWithTextId:(long long) {
	%orig;
	NSLog(@"+(id) variantWithTextId:(long long)");
}

+(id) variantWithEtchObject:(SmartPointer<EtchObject>) {
	%orig;
	NSLog(@"+(id) variantWithEtchObject:(SmartPointer<EtchObject>)");
}

+(id) stringFromVariantType:(int) {
	%orig;
	NSLog(@"+(id) stringFromVariantType:(int)");
}

+(id) emptyImageVariant {
	%orig;
	NSLog(@"+(id) emptyImageVariant");
}

+(id) variantWithDate:(id) {
	%orig;
	NSLog(@"+(id) variantWithDate:(id)");
}

+(id) variantWithPreInstTextId:(long long) {
	%orig;
	NSLog(@"+(id) variantWithPreInstTextId:(long long)");
}

+(id) variantWithPreInstImageId:(long long) {
	%orig;
	NSLog(@"+(id) variantWithPreInstImageId:(long long)");
}

+(id) variantWithArray:(id) {
	%orig;
	NSLog(@"+(id) variantWithArray:(id)");
}

+(id) variantWithDictionary:(id) {
	%orig;
	NSLog(@"+(id) variantWithDictionary:(id)");
}

-(SmartPointer<EtchObject>) etchObject {
	%orig;
	NSLog(@"-(SmartPointer<EtchObject>) etchObject");
}

-(long long) textId {
	%orig;
	NSLog(@"-(long long) textId");
}

-(bool) isEqualToVariantData:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToVariantData:(id)");
}

-(id) initWithEtchObject:(SmartPointer<EtchObject>) {
	%orig;
	NSLog(@"-(id) initWithEtchObject:(SmartPointer<EtchObject>)");
}

-(id) initWithBoolean:(bool) {
	%orig;
	NSLog(@"-(id) initWithBoolean:(bool)");
}

-(id) initWithTextId:(long long) {
	%orig;
	NSLog(@"-(id) initWithTextId:(long long)");
}

-(id) initWithPreInstTextId:(long long) {
	%orig;
	NSLog(@"-(id) initWithPreInstTextId:(long long)");
}

-(id) initWithImageId:(long long) {
	%orig;
	NSLog(@"-(id) initWithImageId:(long long)");
}

-(id) initWithPreInstImageId:(long long) {
	%orig;
	NSLog(@"-(id) initWithPreInstImageId:(long long)");
}

-(void) validateVariantType:(int) {
	%orig;
	NSLog(@"-(void) validateVariantType:(int)");
}

-(bool) isTypeOf:(int) {
	%orig;
	NSLog(@"-(bool) isTypeOf:(int)");
}

-(long long) preinstalledTextId {
	%orig;
	NSLog(@"-(long long) preinstalledTextId");
}

-(long long) preinstalledImageId {
	%orig;
	NSLog(@"-(long long) preinstalledImageId");
}

-(id) initWithDate:(id) {
	%orig;
	NSLog(@"-(id) initWithDate:(id)");
}

-(long long) imageId {
	%orig;
	NSLog(@"-(long long) imageId");
}

-(id) imageData {
	%orig;
	NSLog(@"-(id) imageData");
}

-(id) initWithImageData:(id) {
	%orig;
	NSLog(@"-(id) initWithImageData:(id)");
}

-(bool) booleanValue {
	%orig;
	NSLog(@"-(bool) booleanValue");
}

-(id) initWithInteger:(long long) {
	%orig;
	NSLog(@"-(id) initWithInteger:(long long)");
}

-(id) initWithData:(id) type:(int) {
	%orig;
	NSLog(@"-(id) initWithData:(id) type:(int)");
}

-(id) array {
	%orig;
	NSLog(@"-(id) array");
}

-(id) dictionary {
	%orig;
	NSLog(@"-(id) dictionary");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) string {
	%orig;
	NSLog(@"-(id) string");
}

-(long long) integerValue {
	%orig;
	NSLog(@"-(long long) integerValue");
}

-(id) initWithString:(id) {
	%orig;
	NSLog(@"-(id) initWithString:(id)");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(int) type {
	%orig;
	NSLog(@"-(int) type");
}

-(id) date {
	%orig;
	NSLog(@"-(id) date");
}

-(id) initWithArray:(id) {
	%orig;
	NSLog(@"-(id) initWithArray:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook IDTcpConnection

-(void) openStreams {
	%orig;
	NSLog(@"-(void) openStreams");
}

-(id) initWithSocketNativeHandle:(int) connectionID:(unsigned short) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithSocketNativeHandle:(int) connectionID:(unsigned short) delegate:(id)");
}

-(id) connectionStateLock {
	%orig;
	NSLog(@"-(id) connectionStateLock");
}

-(id) stringWithState:(unsigned long long) {
	%orig;
	NSLog(@"-(id) stringWithState:(unsigned long long)");
}

-(void) readIncomingData {
	%orig;
	NSLog(@"-(void) readIncomingData");
}

-(void) writeOutgoingData {
	%orig;
	NSLog(@"-(void) writeOutgoingData");
}

-(void) informDelegateAboutError:(id) {
	%orig;
	NSLog(@"-(void) informDelegateAboutError:(id)");
}

-(id) outgoingDataBuffer {
	%orig;
	NSLog(@"-(id) outgoingDataBuffer");
}

-(id) packetWriteQueue {
	%orig;
	NSLog(@"-(id) packetWriteQueue");
}

-(void) setOutgoingDataBuffer:(id) {
	%orig;
	NSLog(@"-(void) setOutgoingDataBuffer:(id)");
}

-(bool) isAllowedToRead {
	%orig;
	NSLog(@"-(bool) isAllowedToRead");
}

-(int) nativeHandle {
	%orig;
	NSLog(@"-(int) nativeHandle");
}

-(void) setNativeHandle:(int) {
	%orig;
	NSLog(@"-(void) setNativeHandle:(int)");
}

-(void) setConnectionStateLock:(id) {
	%orig;
	NSLog(@"-(void) setConnectionStateLock:(id)");
}

-(id) workerThread {
	%orig;
	NSLog(@"-(id) workerThread");
}

-(void) closeStreams {
	%orig;
	NSLog(@"-(void) closeStreams");
}

-(unsigned short) connectionID {
	%orig;
	NSLog(@"-(unsigned short) connectionID");
}

-(void) setConnectionID:(unsigned short) {
	%orig;
	NSLog(@"-(void) setConnectionID:(unsigned short)");
}

-(void) stream:(id) handleEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) stream:(id) handleEvent:(unsigned long long)");
}

-(id) outputStream {
	%orig;
	NSLog(@"-(id) outputStream");
}

-(void) setInputStream:(id) {
	%orig;
	NSLog(@"-(void) setInputStream:(id)");
}

-(void) setOutputStream:(id) {
	%orig;
	NSLog(@"-(void) setOutputStream:(id)");
}

-(void) enqueuePacket:(id) {
	%orig;
	NSLog(@"-(void) enqueuePacket:(id)");
}

-(void) startReading {
	%orig;
	NSLog(@"-(void) startReading");
}

-(id) inputStream {
	%orig;
	NSLog(@"-(id) inputStream");
}

-(void) stopReading {
	%orig;
	NSLog(@"-(void) stopReading");
}

-(void) pauseReading {
	%orig;
	NSLog(@"-(void) pauseReading");
}

-(void) resumeReading {
	%orig;
	NSLog(@"-(void) resumeReading");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(unsigned long long) state {
	%orig;
	NSLog(@"-(unsigned long long) state");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setState:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setState:(unsigned long long)");
}

-(void) setPaused:(bool) {
	%orig;
	NSLog(@"-(void) setPaused:(bool)");
}

-(bool) isPaused {
	%orig;
	NSLog(@"-(bool) isPaused");
}

%end

%hook IDTableRow

+(id) rowWithColumns:(unsigned long long) {
	%orig;
	NSLog(@"+(id) rowWithColumns:(unsigned long long)");
}

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) initWithColumns:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithColumns:(unsigned long long)");
}

-(void) setItem:(id) atColumn:(long long) {
	%orig;
	NSLog(@"-(void) setItem:(id) atColumn:(long long)");
}

-(id) itemAtColumn:(long long) {
	%orig;
	NSLog(@"-(id) itemAtColumn:(long long)");
}

-(bool) isEqualToTableRow:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToTableRow:(id)");
}

-(unsigned long long) columns {
	%orig;
	NSLog(@"-(unsigned long long) columns");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) objectEnumerator {
	%orig;
	NSLog(@"-(id) objectEnumerator");
}

%end

%hook IDTableLocation

+(id) locationWithRow:(long long) col:(long long) {
	%orig;
	NSLog(@"+(id) locationWithRow:(long long) col:(long long)");
}

-(void) setCol:(long long) {
	%orig;
	NSLog(@"-(void) setCol:(long long)");
}

-(id) initWithRow:(long long) col:(long long) {
	%orig;
	NSLog(@"-(id) initWithRow:(long long) col:(long long)");
}

-(long long) col {
	%orig;
	NSLog(@"-(long long) col");
}

-(void) setRow:(long long) {
	%orig;
	NSLog(@"-(void) setRow:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(long long) row {
	%orig;
	NSLog(@"-(long long) row");
}

%end

%hook IDTableData

+(id) tableDataWithCapacity:(unsigned long long) columns:(unsigned long long) {
	%orig;
	NSLog(@"+(id) tableDataWithCapacity:(unsigned long long) columns:(unsigned long long)");
}

-(SmartPointer<EtchObject>) etchObject {
	%orig;
	NSLog(@"-(SmartPointer<EtchObject>) etchObject");
}

-(id) initWithCapacity:(unsigned long long) columns:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithCapacity:(unsigned long long) columns:(unsigned long long)");
}

-(bool) isEqualToTableData:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToTableData:(id)");
}

-(void) addRow:(id) {
	%orig;
	NSLog(@"-(void) addRow:(id)");
}

-(unsigned long long) columns {
	%orig;
	NSLog(@"-(unsigned long long) columns");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) rows {
	%orig;
	NSLog(@"-(id) rows");
}

%end

%hook IDTableCell

+(id) tableCellWithImageId:(long long) {
	%orig;
	NSLog(@"+(id) tableCellWithImageId:(long long)");
}

+(id) tableCellWithString:(id) {
	%orig;
	NSLog(@"+(id) tableCellWithString:(id)");
}

+(id) tableCellWithImageData:(id) placeholderImageId:(long long) {
	%orig;
	NSLog(@"+(id) tableCellWithImageData:(id) placeholderImageId:(long long)");
}

+(id) tableCellWithInteger:(long long) {
	%orig;
	NSLog(@"+(id) tableCellWithInteger:(long long)");
}

+(id) tableCellWithImageData:(id) {
	%orig;
	NSLog(@"+(id) tableCellWithImageData:(id)");
}

+(id) tableCellWithTextId:(long long) {
	%orig;
	NSLog(@"+(id) tableCellWithTextId:(long long)");
}

-(long long) placeholderImageId {
	%orig;
	NSLog(@"-(long long) placeholderImageId");
}

-(bool) placeholderImageIdDirty {
	%orig;
	NSLog(@"-(bool) placeholderImageIdDirty");
}

-(void) setPlaceholderImageIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setPlaceholderImageIdDirty:(bool)");
}

-(void) setPlaceholderImageId:(long long) {
	%orig;
	NSLog(@"-(void) setPlaceholderImageId:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(unsigned long long) type {
	%orig;
	NSLog(@"-(unsigned long long) type");
}

-(void) setType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setType:(unsigned long long)");
}

-(void) setDirty:(bool) {
	%orig;
	NSLog(@"-(void) setDirty:(bool)");
}

-(bool) dirty {
	%orig;
	NSLog(@"-(bool) dirty");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(bool) visible {
	%orig;
	NSLog(@"-(bool) visible");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

-(void) setVisible:(bool) {
	%orig;
	NSLog(@"-(void) setVisible:(bool)");
}

%end

%hook IDStatusBar

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(void) setNeedsFlush {
	%orig;
	NSLog(@"-(void) setNeedsFlush");
}

-(bool) textDirty {
	%orig;
	NSLog(@"-(bool) textDirty");
}

-(void) setTextDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextDirty:(bool)");
}

-(id) initWithTextModel:(id) updateEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithTextModel:(id) updateEvent:(long long)");
}

-(id) textModel {
	%orig;
	NSLog(@"-(id) textModel");
}

-(long long) textId {
	%orig;
	NSLog(@"-(long long) textId");
}

-(void) setTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextIdDirty:(bool)");
}

-(bool) textIdDirty {
	%orig;
	NSLog(@"-(bool) textIdDirty");
}

-(void) setTextId:(long long) {
	%orig;
	NSLog(@"-(void) setTextId:(long long)");
}

-(long long) updateEvent {
	%orig;
	NSLog(@"-(long long) updateEvent");
}

-(void) setUpdateEvent:(long long) {
	%orig;
	NSLog(@"-(void) setUpdateEvent:(long long)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(int) priority {
	%orig;
	NSLog(@"-(int) priority");
}

-(id) application {
	%orig;
	NSLog(@"-(id) application");
}

-(void) setApplication:(id) {
	%orig;
	NSLog(@"-(void) setApplication:(id)");
}

%end

%hook IDServiceFactory

+(id) createCdsServiceWithEtchSession:(id) queue:(id) cdsVersion:(id) {
	%orig;
	NSLog(@"+(id) createCdsServiceWithEtchSession:(id) queue:(id) cdsVersion:(id)");
}

+(id) createHmiServiceWithEtchSession:(id) identifier:(id) name:(id) vendor:(id) versionInfo:(id) rhmiVersion:(long long) {
	%orig;
	NSLog(@"+(id) createHmiServiceWithEtchSession:(id) identifier:(id) name:(id) vendor:(id) versionInfo:(id) rhmiVersion:(long long)");
}

+(id) createAudioServiceWithEtchSession:(id) identifier:(id) auxiliaryInput:(unsigned short) vehicleInfo:(id) {
	%orig;
	NSLog(@"+(id) createAudioServiceWithEtchSession:(id) identifier:(id) auxiliaryInput:(unsigned short) vehicleInfo:(id)");
}

+(id) createPiaServiceWithEtchSession:(id) identifier:(id) {
	%orig;
	NSLog(@"+(id) createPiaServiceWithEtchSession:(id) identifier:(id)");
}

+(id) createApplicationManagementServiceWithEtchSession:(id) identifier:(id) {
	%orig;
	NSLog(@"+(id) createApplicationManagementServiceWithEtchSession:(id) identifier:(id)");
}

+(id) createHmiServiceWithEtchSession:(id) identifier:(id) name:(id) vendor:(id) versionInfo:(id) {
	%orig;
	NSLog(@"+(id) createHmiServiceWithEtchSession:(id) identifier:(id) name:(id) vendor:(id) versionInfo:(id)");
}

%end

%hook IDScheduler

-(void) setNeedsFlush {
	%orig;
	NSLog(@"-(void) setNeedsFlush");
}

-(id) objectsNeedingFlush {
	%orig;
	NSLog(@"-(id) objectsNeedingFlush");
}

-(void) setRunFlushScheduled:(bool) {
	%orig;
	NSLog(@"-(void) setRunFlushScheduled:(bool)");
}

-(void) raiseExceptionIfNotOnMainThread:(const char*) {
	%orig;
	NSLog(@"-(void) raiseExceptionIfNotOnMainThread:(const char*)");
}

-(bool) runFlushScheduled {
	%orig;
	NSLog(@"-(bool) runFlushScheduled");
}

-(bool) isAllowedToFlush {
	%orig;
	NSLog(@"-(bool) isAllowedToFlush");
}

-(void) runFlush {
	%orig;
	NSLog(@"-(void) runFlush");
}

-(void) setAllowedToFlush:(bool) {
	%orig;
	NSLog(@"-(void) setAllowedToFlush:(bool)");
}

-(void) setObjectsNeedingFlush:(id) {
	%orig;
	NSLog(@"-(void) setObjectsNeedingFlush:(id)");
}

-(void) addObjectNeedingFlush:(id) {
	%orig;
	NSLog(@"-(void) addObjectNeedingFlush:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(void) clear {
	%orig;
	NSLog(@"-(void) clear");
}

%end

%hook IDRhmiSubmenu

+(id) rhmiSubmenuMultimedia {
	%orig;
	NSLog(@"+(id) rhmiSubmenuMultimedia");
}

+(id) rhmiSubmenuRadio {
	%orig;
	NSLog(@"+(id) rhmiSubmenuRadio");
}

+(id) rhmiSubmenuOnlineServices {
	%orig;
	NSLog(@"+(id) rhmiSubmenuOnlineServices");
}

+(id) rhmiSubmenuNavigation {
	%orig;
	NSLog(@"+(id) rhmiSubmenuNavigation");
}

+(id) rhmiSubmenuVehicleInformation {
	%orig;
	NSLog(@"+(id) rhmiSubmenuVehicleInformation");
}

+(id) rhmiSubmenuSettings {
	%orig;
	NSLog(@"+(id) rhmiSubmenuSettings");
}

+(id) rhmiSubmenuMediaRadio {
	%orig;
	NSLog(@"+(id) rhmiSubmenuMediaRadio");
}

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) stringWithType:(unsigned long long) {
	%orig;
	NSLog(@"-(id) stringWithType:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(unsigned long long) type {
	%orig;
	NSLog(@"-(unsigned long long) type");
}

-(id) initWithType:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithType:(unsigned long long)");
}

-(id) stringRepresentation {
	%orig;
	NSLog(@"-(id) stringRepresentation");
}

%end

%hook IDRhmiShortFeatureInfo

-(id) initWithIdentifier:(id) launchURL:(id) version:(id) {
	%orig;
	NSLog(@"-(id) initWithIdentifier:(id) launchURL:(id) version:(id)");
}

-(id) initWithJSONObject:(id) {
	%orig;
	NSLog(@"-(id) initWithJSONObject:(id)");
}

-(id) launchURL {
	%orig;
	NSLog(@"-(id) launchURL");
}

-(id) identifier {
	%orig;
	NSLog(@"-(id) identifier");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

%end

%hook IDRhmiLegacyFeatureSwitcher

+(bool) switchToRhmiFeature:(id) {
	%orig;
	NSLog(@"+(bool) switchToRhmiFeature:(id)");
}

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) vehicleInfo {
	%orig;
	NSLog(@"-(id) vehicleInfo");
}

-(id) featureInfoDeleteObserver {
	%orig;
	NSLog(@"-(id) featureInfoDeleteObserver");
}

-(void) setFeatureInfoDeleteObserver:(id) {
	%orig;
	NSLog(@"-(void) setFeatureInfoDeleteObserver:(id)");
}

-(id) featureInfoUpdateObserver {
	%orig;
	NSLog(@"-(id) featureInfoUpdateObserver");
}

-(void) setFeatureInfoUpdateObserver:(id) {
	%orig;
	NSLog(@"-(void) setFeatureInfoUpdateObserver:(id)");
}

-(id) initWithVehicleInfo:(id) {
	%orig;
	NSLog(@"-(id) initWithVehicleInfo:(id)");
}

-(id) instantiateListViewControllers {
	%orig;
	NSLog(@"-(id) instantiateListViewControllers");
}

-(id) applicationDidBecomeActiveObserver {
	%orig;
	NSLog(@"-(id) applicationDidBecomeActiveObserver");
}

-(id) listViewControllers {
	%orig;
	NSLog(@"-(id) listViewControllers");
}

-(void) updateViewControllers:(id) {
	%orig;
	NSLog(@"-(void) updateViewControllers:(id)");
}

-(void) setApplicationDidBecomeActiveObserver:(id) {
	%orig;
	NSLog(@"-(void) setApplicationDidBecomeActiveObserver:(id)");
}

-(id) viewControllerForHmiCategory:(id) {
	%orig;
	NSLog(@"-(id) viewControllerForHmiCategory:(id)");
}

-(void) updateViewController:(id) {
	%orig;
	NSLog(@"-(void) updateViewController:(id)");
}

-(id) featureInfosForCurrentVehicle:(id) {
	%orig;
	NSLog(@"-(id) featureInfosForCurrentVehicle:(id)");
}

-(void) updateViewControllersForHmiCategories:(id) {
	%orig;
	NSLog(@"-(void) updateViewControllersForHmiCategories:(id)");
}

-(void) setVehicleInfo:(id) {
	%orig;
	NSLog(@"-(void) setVehicleInfo:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) connect {
	%orig;
	NSLog(@"-(void) connect");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

%end

%hook IDRhmiFeatureSwitcherViewControllerConfiguration

+(id) onlineServicesConfiguration {
	%orig;
	NSLog(@"+(id) onlineServicesConfiguration");
}

+(id) multimediaConfiguration {
	%orig;
	NSLog(@"+(id) multimediaConfiguration");
}

+(id) mediaRadioConfiguration {
	%orig;
	NSLog(@"+(id) mediaRadioConfiguration");
}

+(id) settingsConfiguration {
	%orig;
	NSLog(@"+(id) settingsConfiguration");
}

+(id) navigationConfiguration {
	%orig;
	NSLog(@"+(id) navigationConfiguration");
}

+(id) radioConfiguration {
	%orig;
	NSLog(@"+(id) radioConfiguration");
}

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) hmiProvider {
	%orig;
	NSLog(@"-(id) hmiProvider");
}

-(id) mainView {
	%orig;
	NSLog(@"-(id) mainView");
}

-(id) featureInfosFilter {
	%orig;
	NSLog(@"-(id) featureInfosFilter");
}

-(id) initWithSubMenu:(id) filter:(id) hmiProvider:(id) mainView:(id) infoView:(id) {
	%orig;
	NSLog(@"-(id) initWithSubMenu:(id) filter:(id) hmiProvider:(id) mainView:(id) infoView:(id)");
}

-(id) infoView {
	%orig;
	NSLog(@"-(id) infoView");
}

-(id) submenu {
	%orig;
	NSLog(@"-(id) submenu");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureSwitcherViewController

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(void) applicationRestoreMainHmiState:(id) {
	%orig;
	NSLog(@"-(void) applicationRestoreMainHmiState:(id)");
}

-(id) manifestForApplication:(id) {
	%orig;
	NSLog(@"-(id) manifestForApplication:(id)");
}

-(id) hmiDescriptionForApplication:(id) {
	%orig;
	NSLog(@"-(id) hmiDescriptionForApplication:(id)");
}

-(id) textDatabasesForApplication:(id) {
	%orig;
	NSLog(@"-(id) textDatabasesForApplication:(id)");
}

-(id) imageDatabasesForApplication:(id) {
	%orig;
	NSLog(@"-(id) imageDatabasesForApplication:(id)");
}

-(void) table:(id) didSelectItemAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) table:(id) didSelectItemAtIndex:(long long)");
}

-(id) featureInfosFilter {
	%orig;
	NSLog(@"-(id) featureInfosFilter");
}

-(void) setWaitingDisconnect:(bool) {
	%orig;
	NSLog(@"-(void) setWaitingDisconnect:(bool)");
}

-(void) setFeatureInfos:(id) {
	%orig;
	NSLog(@"-(void) setFeatureInfos:(id)");
}

-(id) didOpenUrlNotificationObserver {
	%orig;
	NSLog(@"-(id) didOpenUrlNotificationObserver");
}

-(void) enqueueWaitingDisconnect:(bool) {
	%orig;
	NSLog(@"-(void) enqueueWaitingDisconnect:(bool)");
}

-(void) setDidOpenUrlNotificationObserver:(id) {
	%orig;
	NSLog(@"-(void) setDidOpenUrlNotificationObserver:(id)");
}

-(id) willResignActiveNotificationObserver {
	%orig;
	NSLog(@"-(id) willResignActiveNotificationObserver");
}

-(void) setWillResignActiveNotificationObserver:(id) {
	%orig;
	NSLog(@"-(void) setWillResignActiveNotificationObserver:(id)");
}

-(id) didBecomeActiveNotificationObserver {
	%orig;
	NSLog(@"-(id) didBecomeActiveNotificationObserver");
}

-(void) setDidBecomeActiveNotificationObserver:(id) {
	%orig;
	NSLog(@"-(void) setDidBecomeActiveNotificationObserver:(id)");
}

-(bool) shouldShowSwitcherNotAvailableHint {
	%orig;
	NSLog(@"-(bool) shouldShowSwitcherNotAvailableHint");
}

-(bool) waitingDisconnect {
	%orig;
	NSLog(@"-(bool) waitingDisconnect");
}

-(id) featureInfos {
	%orig;
	NSLog(@"-(id) featureInfos");
}

-(int) hmiLanguage {
	%orig;
	NSLog(@"-(int) hmiLanguage");
}

-(void) onUpdateLanguage:(id) {
	%orig;
	NSLog(@"-(void) onUpdateLanguage:(id)");
}

-(void) setHmiLanguage:(int) {
	%orig;
	NSLog(@"-(void) setHmiLanguage:(int)");
}

-(id) infoViewController {
	%orig;
	NSLog(@"-(id) infoViewController");
}

-(void) startWithFeatureInfos:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) startWithFeatureInfos:(id) completionBlock:(id)");
}

-(void) setInfoViewController:(id) {
	%orig;
	NSLog(@"-(void) setInfoViewController:(id)");
}

-(void) stopWithCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) stopWithCompletionBlock:(id)");
}

-(void) updateUI {
	%orig;
	NSLog(@"-(void) updateUI");
}

-(void) applicationDidStart:(id) {
	%orig;
	NSLog(@"-(void) applicationDidStart:(id)");
}

-(id) submenu {
	%orig;
	NSLog(@"-(id) submenu");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) configuration {
	%orig;
	NSLog(@"-(id) configuration");
}

-(void) setConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setConfiguration:(id)");
}

-(id) initWithConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithConfiguration:(id)");
}

-(void) update:(id) {
	%orig;
	NSLog(@"-(void) update:(id)");
}

-(id) application {
	%orig;
	NSLog(@"-(id) application");
}

-(void) setApplication:(id) {
	%orig;
	NSLog(@"-(void) setApplication:(id)");
}

%end

%hook IDRhmiFeatureSwitcherInfoViewController

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(void) viewDidLoseFocus:(id) {
	%orig;
	NSLog(@"-(void) viewDidLoseFocus:(id)");
}

-(id) mainView {
	%orig;
	NSLog(@"-(id) mainView");
}

-(id) stateCondition {
	%orig;
	NSLog(@"-(id) stateCondition");
}

-(void) setStateCondition:(id) {
	%orig;
	NSLog(@"-(void) setStateCondition:(id)");
}

-(bool) checkboxShouldToggle:(id) {
	%orig;
	NSLog(@"-(bool) checkboxShouldToggle:(id)");
}

-(void) checkbox:(id) didChangeCheckedValue:(bool) {
	%orig;
	NSLog(@"-(void) checkbox:(id) didChangeCheckedValue:(bool)");
}

-(void) handleSelectConfirmButton:(id) {
	%orig;
	NSLog(@"-(void) handleSelectConfirmButton:(id)");
}

-(void) setFeatureInfo:(id) {
	%orig;
	NSLog(@"-(void) setFeatureInfo:(id)");
}

-(bool) shouldHideAppswitchConfirmation {
	%orig;
	NSLog(@"-(bool) shouldHideAppswitchConfirmation");
}

-(void) trySwitchToRhmiFeature {
	%orig;
	NSLog(@"-(void) trySwitchToRhmiFeature");
}

-(id) featureInfo {
	%orig;
	NSLog(@"-(id) featureInfo");
}

-(void) storeAppSwitchConfirmation {
	%orig;
	NSLog(@"-(void) storeAppSwitchConfirmation");
}

-(void) setAppswitchConfirmationValue:(bool) {
	%orig;
	NSLog(@"-(void) setAppswitchConfirmationValue:(bool)");
}

-(bool) appswitchConfirmationValue {
	%orig;
	NSLog(@"-(bool) appswitchConfirmationValue");
}

-(id) initWithMainView:(id) infoView:(id) {
	%orig;
	NSLog(@"-(id) initWithMainView:(id) infoView:(id)");
}

-(int) hmiLanguage {
	%orig;
	NSLog(@"-(int) hmiLanguage");
}

-(void) setHmiLanguage:(int) {
	%orig;
	NSLog(@"-(void) setHmiLanguage:(int)");
}

-(void) switchToRhmiFeature:(id) {
	%orig;
	NSLog(@"-(void) switchToRhmiFeature:(id)");
}

-(void) updateUI {
	%orig;
	NSLog(@"-(void) updateUI");
}

-(void) resetState {
	%orig;
	NSLog(@"-(void) resetState");
}

-(id) infoView {
	%orig;
	NSLog(@"-(id) infoView");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setUserDefaults:(id) {
	%orig;
	NSLog(@"-(void) setUserDefaults:(id)");
}

-(id) userDefaults {
	%orig;
	NSLog(@"-(id) userDefaults");
}

%end

%hook IDRhmiFeatureSwitcherDataAccess

+(id) defaultFeatureSwitcherDataAccessForCurrentVehicle {
	%orig;
	NSLog(@"+(id) defaultFeatureSwitcherDataAccessForCurrentVehicle");
}

+(id) defaultFeatureSwitcherDataAccessWithVehicleInfo:(id) {
	%orig;
	NSLog(@"+(id) defaultFeatureSwitcherDataAccessWithVehicleInfo:(id)");
}

-(id) initWithVehicleInfo:(id) {
	%orig;
	NSLog(@"-(id) initWithVehicleInfo:(id)");
}

-(void) setDataSourcePathWithVehicleInfo:(id) {
	%orig;
	NSLog(@"-(void) setDataSourcePathWithVehicleInfo:(id)");
}

-(id) dataSourcePathFromVehicleInfo:(id) {
	%orig;
	NSLog(@"-(id) dataSourcePathFromVehicleInfo:(id)");
}

-(id) initWithDataSourcePath:(id) {
	%orig;
	NSLog(@"-(id) initWithDataSourcePath:(id)");
}

-(void) setDataSourcePath:(id) {
	%orig;
	NSLog(@"-(void) setDataSourcePath:(id)");
}

-(id) dataSourceAccessLock {
	%orig;
	NSLog(@"-(id) dataSourceAccessLock");
}

-(id) loadDataSourceFromFileSystem {
	%orig;
	NSLog(@"-(id) loadDataSourceFromFileSystem");
}

-(id) featureInfosPassingTest:(id) {
	%orig;
	NSLog(@"-(id) featureInfosPassingTest:(id)");
}

-(void) writeDataSourceToFileSystem:(id) {
	%orig;
	NSLog(@"-(void) writeDataSourceToFileSystem:(id)");
}

-(id) dataSourcePath {
	%orig;
	NSLog(@"-(id) dataSourcePath");
}

-(id) allFeatureInfos {
	%orig;
	NSLog(@"-(id) allFeatureInfos");
}

-(id) featureInfosPassingFilter:(id) {
	%orig;
	NSLog(@"-(id) featureInfosPassingFilter:(id)");
}

-(void) persistFeatureInfo:(id) {
	%orig;
	NSLog(@"-(void) persistFeatureInfo:(id)");
}

-(void) deleteFeatureInfo:(id) {
	%orig;
	NSLog(@"-(void) deleteFeatureInfo:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

%end

%hook IDRhmiFeatureListSettingsIdentifiers

+(void) loadImageNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadImageNameToIdMapping");
}

+(void) loadSidNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadSidNameToIdMapping");
}

+(long long) imageIdentifierForImageName:(id) {
	%orig;
	NSLog(@"+(long long) imageIdentifierForImageName:(id)");
}

+(long long) textIdentifieForSID:(id) {
	%orig;
	NSLog(@"+(long long) textIdentifieForSID:(id)");
}

%end

%hook IDRhmiFeatureListSettingsHmiProvider

-(id) viewForId:(long long) {
	%orig;
	NSLog(@"-(id) viewForId:(long long)");
}

-(id) modelForId:(long long) {
	%orig;
	NSLog(@"-(id) modelForId:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(id) multimediaInfo {
	%orig;
	NSLog(@"-(id) multimediaInfo");
}

-(id) hmiStatusBar {
	%orig;
	NSLog(@"-(id) hmiStatusBar");
}

-(id) allViews {
	%orig;
	NSLog(@"-(id) allViews");
}

-(void) setMultimediaInfo:(id) {
	%orig;
	NSLog(@"-(void) setMultimediaInfo:(id)");
}

-(void) setHmiStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setHmiStatusBar:(id)");
}

-(id) viewDict {
	%orig;
	NSLog(@"-(id) viewDict");
}

-(void) setViewDict:(id) {
	%orig;
	NSLog(@"-(void) setViewDict:(id)");
}

-(id) modelDict {
	%orig;
	NSLog(@"-(id) modelDict");
}

-(void) setModelDict:(id) {
	%orig;
	NSLog(@"-(void) setModelDict:(id)");
}

-(id) entryButtonIDRhmiFeatureListSettings {
	%orig;
	NSLog(@"-(id) entryButtonIDRhmiFeatureListSettings");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListRadioIdentifiers

+(void) loadImageNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadImageNameToIdMapping");
}

+(void) loadSidNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadSidNameToIdMapping");
}

+(long long) imageIdentifierForImageName:(id) {
	%orig;
	NSLog(@"+(long long) imageIdentifierForImageName:(id)");
}

+(long long) textIdentifieForSID:(id) {
	%orig;
	NSLog(@"+(long long) textIdentifieForSID:(id)");
}

%end

%hook IDRhmiFeatureListRadioHmiProvider

-(id) viewForId:(long long) {
	%orig;
	NSLog(@"-(id) viewForId:(long long)");
}

-(id) modelForId:(long long) {
	%orig;
	NSLog(@"-(id) modelForId:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(id) multimediaInfo {
	%orig;
	NSLog(@"-(id) multimediaInfo");
}

-(id) hmiStatusBar {
	%orig;
	NSLog(@"-(id) hmiStatusBar");
}

-(id) allViews {
	%orig;
	NSLog(@"-(id) allViews");
}

-(void) setMultimediaInfo:(id) {
	%orig;
	NSLog(@"-(void) setMultimediaInfo:(id)");
}

-(void) setHmiStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setHmiStatusBar:(id)");
}

-(id) viewDict {
	%orig;
	NSLog(@"-(id) viewDict");
}

-(void) setViewDict:(id) {
	%orig;
	NSLog(@"-(void) setViewDict:(id)");
}

-(id) modelDict {
	%orig;
	NSLog(@"-(id) modelDict");
}

-(void) setModelDict:(id) {
	%orig;
	NSLog(@"-(void) setModelDict:(id)");
}

-(id) entryButtonIDRhmiFeatureListRadio {
	%orig;
	NSLog(@"-(id) entryButtonIDRhmiFeatureListRadio");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListOnlineServicesIdentifiers

+(void) loadImageNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadImageNameToIdMapping");
}

+(void) loadSidNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadSidNameToIdMapping");
}

+(long long) imageIdentifierForImageName:(id) {
	%orig;
	NSLog(@"+(long long) imageIdentifierForImageName:(id)");
}

+(long long) textIdentifieForSID:(id) {
	%orig;
	NSLog(@"+(long long) textIdentifieForSID:(id)");
}

%end

%hook IDRhmiFeatureListOnlineServicesHmiProvider

-(id) viewForId:(long long) {
	%orig;
	NSLog(@"-(id) viewForId:(long long)");
}

-(id) modelForId:(long long) {
	%orig;
	NSLog(@"-(id) modelForId:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(id) multimediaInfo {
	%orig;
	NSLog(@"-(id) multimediaInfo");
}

-(id) hmiStatusBar {
	%orig;
	NSLog(@"-(id) hmiStatusBar");
}

-(id) allViews {
	%orig;
	NSLog(@"-(id) allViews");
}

-(void) setMultimediaInfo:(id) {
	%orig;
	NSLog(@"-(void) setMultimediaInfo:(id)");
}

-(void) setHmiStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setHmiStatusBar:(id)");
}

-(id) viewDict {
	%orig;
	NSLog(@"-(id) viewDict");
}

-(void) setViewDict:(id) {
	%orig;
	NSLog(@"-(void) setViewDict:(id)");
}

-(id) modelDict {
	%orig;
	NSLog(@"-(id) modelDict");
}

-(void) setModelDict:(id) {
	%orig;
	NSLog(@"-(void) setModelDict:(id)");
}

-(id) entryButtonIDRhmiFeatureListOnlineServices {
	%orig;
	NSLog(@"-(id) entryButtonIDRhmiFeatureListOnlineServices");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListNavigationIdentifiers

+(void) loadImageNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadImageNameToIdMapping");
}

+(void) loadSidNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadSidNameToIdMapping");
}

+(long long) imageIdentifierForImageName:(id) {
	%orig;
	NSLog(@"+(long long) imageIdentifierForImageName:(id)");
}

+(long long) textIdentifieForSID:(id) {
	%orig;
	NSLog(@"+(long long) textIdentifieForSID:(id)");
}

%end

%hook IDRhmiFeatureListNavigationHmiProvider

-(id) viewForId:(long long) {
	%orig;
	NSLog(@"-(id) viewForId:(long long)");
}

-(id) modelForId:(long long) {
	%orig;
	NSLog(@"-(id) modelForId:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(id) multimediaInfo {
	%orig;
	NSLog(@"-(id) multimediaInfo");
}

-(id) hmiStatusBar {
	%orig;
	NSLog(@"-(id) hmiStatusBar");
}

-(id) allViews {
	%orig;
	NSLog(@"-(id) allViews");
}

-(void) setMultimediaInfo:(id) {
	%orig;
	NSLog(@"-(void) setMultimediaInfo:(id)");
}

-(void) setHmiStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setHmiStatusBar:(id)");
}

-(id) viewDict {
	%orig;
	NSLog(@"-(id) viewDict");
}

-(void) setViewDict:(id) {
	%orig;
	NSLog(@"-(void) setViewDict:(id)");
}

-(id) modelDict {
	%orig;
	NSLog(@"-(id) modelDict");
}

-(void) setModelDict:(id) {
	%orig;
	NSLog(@"-(void) setModelDict:(id)");
}

-(id) entryButtonIDRhmiFeatureListNavigation {
	%orig;
	NSLog(@"-(id) entryButtonIDRhmiFeatureListNavigation");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListMultimediaIdentifiers

+(void) loadImageNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadImageNameToIdMapping");
}

+(void) loadSidNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadSidNameToIdMapping");
}

+(long long) imageIdentifierForImageName:(id) {
	%orig;
	NSLog(@"+(long long) imageIdentifierForImageName:(id)");
}

+(long long) textIdentifieForSID:(id) {
	%orig;
	NSLog(@"+(long long) textIdentifieForSID:(id)");
}

%end

%hook IDRhmiFeatureListMultimediaHmiProvider

-(id) viewForId:(long long) {
	%orig;
	NSLog(@"-(id) viewForId:(long long)");
}

-(id) modelForId:(long long) {
	%orig;
	NSLog(@"-(id) modelForId:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(id) multimediaInfo {
	%orig;
	NSLog(@"-(id) multimediaInfo");
}

-(id) hmiStatusBar {
	%orig;
	NSLog(@"-(id) hmiStatusBar");
}

-(id) allViews {
	%orig;
	NSLog(@"-(id) allViews");
}

-(void) setMultimediaInfo:(id) {
	%orig;
	NSLog(@"-(void) setMultimediaInfo:(id)");
}

-(void) setHmiStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setHmiStatusBar:(id)");
}

-(id) viewDict {
	%orig;
	NSLog(@"-(id) viewDict");
}

-(void) setViewDict:(id) {
	%orig;
	NSLog(@"-(void) setViewDict:(id)");
}

-(id) modelDict {
	%orig;
	NSLog(@"-(id) modelDict");
}

-(void) setModelDict:(id) {
	%orig;
	NSLog(@"-(void) setModelDict:(id)");
}

-(id) entryButtonIDRhmiFeatureListMultimedia {
	%orig;
	NSLog(@"-(id) entryButtonIDRhmiFeatureListMultimedia");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListMediaRadioIdentifiers

+(void) loadImageNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadImageNameToIdMapping");
}

+(void) loadSidNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadSidNameToIdMapping");
}

+(long long) imageIdentifierForImageName:(id) {
	%orig;
	NSLog(@"+(long long) imageIdentifierForImageName:(id)");
}

+(long long) textIdentifieForSID:(id) {
	%orig;
	NSLog(@"+(long long) textIdentifieForSID:(id)");
}

%end

%hook IDRhmiFeatureListMediaRadioHmiProvider

-(id) viewForId:(long long) {
	%orig;
	NSLog(@"-(id) viewForId:(long long)");
}

-(id) modelForId:(long long) {
	%orig;
	NSLog(@"-(id) modelForId:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(id) multimediaInfo {
	%orig;
	NSLog(@"-(id) multimediaInfo");
}

-(id) hmiStatusBar {
	%orig;
	NSLog(@"-(id) hmiStatusBar");
}

-(id) allViews {
	%orig;
	NSLog(@"-(id) allViews");
}

-(void) setMultimediaInfo:(id) {
	%orig;
	NSLog(@"-(void) setMultimediaInfo:(id)");
}

-(void) setHmiStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setHmiStatusBar:(id)");
}

-(id) viewDict {
	%orig;
	NSLog(@"-(id) viewDict");
}

-(void) setViewDict:(id) {
	%orig;
	NSLog(@"-(void) setViewDict:(id)");
}

-(id) modelDict {
	%orig;
	NSLog(@"-(id) modelDict");
}

-(void) setModelDict:(id) {
	%orig;
	NSLog(@"-(void) setModelDict:(id)");
}

-(id) entryButtonIDRhmiFeatureListMediaRadio {
	%orig;
	NSLog(@"-(id) entryButtonIDRhmiFeatureListMediaRadio");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureInfoSyncService

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) vehicleInfo {
	%orig;
	NSLog(@"-(id) vehicleInfo");
}

-(void) setVIN:(id) {
	%orig;
	NSLog(@"-(void) setVIN:(id)");
}

-(id) VIN {
	%orig;
	NSLog(@"-(id) VIN");
}

-(void) setSyncInstalledFeaturesOnly:(bool) {
	%orig;
	NSLog(@"-(void) setSyncInstalledFeaturesOnly:(bool)");
}

-(id) initWithVehicleInfo:(id) userDefaults:(id) downloader:(id) application:(id) {
	%orig;
	NSLog(@"-(id) initWithVehicleInfo:(id) userDefaults:(id) downloader:(id) application:(id)");
}

-(id) CDSClient {
	%orig;
	NSLog(@"-(id) CDSClient");
}

-(double) startReachabilityNotifierDelay {
	%orig;
	NSLog(@"-(double) startReachabilityNotifierDelay");
}

-(void) startReachabilityNotifier {
	%orig;
	NSLog(@"-(void) startReachabilityNotifier");
}

-(id) reachabilityDidChangeNotificationObserver {
	%orig;
	NSLog(@"-(id) reachabilityDidChangeNotificationObserver");
}

-(void) setReachabilityDidChangeNotificationObserver:(id) {
	%orig;
	NSLog(@"-(void) setReachabilityDidChangeNotificationObserver:(id)");
}

-(void) setDidUpdateAppInfosAfterServiceWasStarted:(bool) {
	%orig;
	NSLog(@"-(void) setDidUpdateAppInfosAfterServiceWasStarted:(bool)");
}

-(void) downloadRhmiFeatureList {
	%orig;
	NSLog(@"-(void) downloadRhmiFeatureList");
}

-(bool) shortAppInfosUpdateRequired {
	%orig;
	NSLog(@"-(bool) shortAppInfosUpdateRequired");
}

-(id) downloadFeatureListLock {
	%orig;
	NSLog(@"-(id) downloadFeatureListLock");
}

-(id) hashedAndURLEscapedVIN:(id) {
	%orig;
	NSLog(@"-(id) hashedAndURLEscapedVIN:(id)");
}

-(bool) shouldUpdateShortAppInfoAfterEveryStart {
	%orig;
	NSLog(@"-(bool) shouldUpdateShortAppInfoAfterEveryStart");
}

-(void) storeNowAsLastSuccessfulShortAppInfosDownloadTimeInterval {
	%orig;
	NSLog(@"-(void) storeNowAsLastSuccessfulShortAppInfosDownloadTimeInterval");
}

-(void) storeCurrentVehicleInfoHash {
	%orig;
	NSLog(@"-(void) storeCurrentVehicleInfoHash");
}

-(void) didDownloadRhmiFeatureList:(id) {
	%orig;
	NSLog(@"-(void) didDownloadRhmiFeatureList:(id)");
}

-(void) downloadUpdatedFeaturesFromList:(id) {
	%orig;
	NSLog(@"-(void) downloadUpdatedFeaturesFromList:(id)");
}

-(bool) featureInfoUpdateRequired:(id) remoteInfo:(id) {
	%orig;
	NSLog(@"-(bool) featureInfoUpdateRequired:(id) remoteInfo:(id)");
}

-(void) didDownloadRhmiFeatureInfo:(id) {
	%orig;
	NSLog(@"-(void) didDownloadRhmiFeatureInfo:(id)");
}

-(bool) didUpdateAppInfosAfterServiceWasStarted {
	%orig;
	NSLog(@"-(bool) didUpdateAppInfosAfterServiceWasStarted");
}

-(bool) doesCurrentVehicleInfoHashMatchVehicleOfLastSuccesfulUpdate {
	%orig;
	NSLog(@"-(bool) doesCurrentVehicleInfoHashMatchVehicleOfLastSuccesfulUpdate");
}

-(double) timeIntervalSinceLastSuccesfulShortAppInfosDownload {
	%orig;
	NSLog(@"-(double) timeIntervalSinceLastSuccesfulShortAppInfosDownload");
}

-(double) shortAppInfosUpdateTimeInterval {
	%orig;
	NSLog(@"-(double) shortAppInfosUpdateTimeInterval");
}

-(bool) syncInstalledFeaturesOnly {
	%orig;
	NSLog(@"-(bool) syncInstalledFeaturesOnly");
}

-(void) setStartReachabilityNotifierDelay:(double) {
	%orig;
	NSLog(@"-(void) setStartReachabilityNotifierDelay:(double)");
}

-(void) setCDSClient:(id) {
	%orig;
	NSLog(@"-(void) setCDSClient:(id)");
}

-(id) initWithVehicleInfo:(id) {
	%orig;
	NSLog(@"-(id) initWithVehicleInfo:(id)");
}

-(void) setVehicleInfo:(id) {
	%orig;
	NSLog(@"-(void) setVehicleInfo:(id)");
}

-(id) downloader {
	%orig;
	NSLog(@"-(id) downloader");
}

-(void) setDownloader:(id) {
	%orig;
	NSLog(@"-(void) setDownloader:(id)");
}

-(id) reachability {
	%orig;
	NSLog(@"-(id) reachability");
}

-(void) setReachability:(id) {
	%orig;
	NSLog(@"-(void) setReachability:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(void) setUserDefaults:(id) {
	%orig;
	NSLog(@"-(void) setUserDefaults:(id)");
}

-(id) userDefaults {
	%orig;
	NSLog(@"-(id) userDefaults");
}

-(id) application {
	%orig;
	NSLog(@"-(id) application");
}

-(void) setApplication:(id) {
	%orig;
	NSLog(@"-(void) setApplication:(id)");
}

%end

%hook IDRhmiFeatureInfoIconCreator

-(id) initWithSourceImage:(id) {
	%orig;
	NSLog(@"-(id) initWithSourceImage:(id)");
}

-(id) sourceImage {
	%orig;
	NSLog(@"-(id) sourceImage");
}

-(id) dataRepresentation {
	%orig;
	NSLog(@"-(id) dataRepresentation");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureInfoDownloader

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) rhmiBackendHostName {
	%orig;
	NSLog(@"-(id) rhmiBackendHostName");
}

-(void) downloadResourceWithURL:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) downloadResourceWithURL:(id) completionHandler:(id)");
}

-(id) downloadOperationQueue {
	%orig;
	NSLog(@"-(id) downloadOperationQueue");
}

-(void) setDownloadOperationQueue:(id) {
	%orig;
	NSLog(@"-(void) setDownloadOperationQueue:(id)");
}

-(void) downloadShortFeatureInfosWithParameters:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) downloadShortFeatureInfosWithParameters:(id) completionHandler:(id)");
}

-(void) downloadFeatureInfoWithIdentifier:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) downloadFeatureInfoWithIdentifier:(id) completionHandler:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

%end

%hook IDRhmiFeatureInfoFilter

-(id) apply:(id) {
	%orig;
	NSLog(@"-(id) apply:(id)");
}

%end

%hook IDRhmiFeatureInfoSingleCategoryFilter

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) hmiCategory {
	%orig;
	NSLog(@"-(id) hmiCategory");
}

-(id) initWithHmiCategory:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiCategory:(id)");
}

-(void) setHmiCategory:(id) {
	%orig;
	NSLog(@"-(void) setHmiCategory:(id)");
}

-(id) apply:(id) {
	%orig;
	NSLog(@"-(id) apply:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureInfoMediaRadioCategoriesFilter

+(id) mediaRadioCategories {
	%orig;
	NSLog(@"+(id) mediaRadioCategories");
}

-(id) apply:(id) {
	%orig;
	NSLog(@"-(id) apply:(id)");
}

%end

%hook IDRhmiFeatureInfoAllCategoriesFilter

+(id) allRHMICategories {
	%orig;
	NSLog(@"+(id) allRHMICategories");
}

-(id) apply:(id) {
	%orig;
	NSLog(@"-(id) apply:(id)");
}

%end

%hook IDRhmiFeatureInfo

+(id) allVehicleBrands {
	%orig;
	NSLog(@"+(id) allVehicleBrands");
}

+(id) allRHMICategories {
	%orig;
	NSLog(@"+(id) allRHMICategories");
}

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) serializeToVariantMap {
	%orig;
	NSLog(@"-(id) serializeToVariantMap");
}

-(id) additionalEntryButtons {
	%orig;
	NSLog(@"-(id) additionalEntryButtons");
}

-(id) serializeAdditionalEntryButtonToVariantMap:(unsigned long long) {
	%orig;
	NSLog(@"-(id) serializeAdditionalEntryButtonToVariantMap:(unsigned long long)");
}

-(id) serializeToVariantMapWithHmiCategory:(id) entryButtonId:(id) weight:(id) {
	%orig;
	NSLog(@"-(id) serializeToVariantMapWithHmiCategory:(id) entryButtonId:(id) weight:(id)");
}

-(long long) languageKeyForISOLanguageCode:(id) {
	%orig;
	NSLog(@"-(long long) languageKeyForISOLanguageCode:(id)");
}

-(id) initWithIdentifier:(id) hmiCategory:(id) name:(id) mainStateId:(id) entryButtonId:(id) weight:(id) bundleId:(id) version:(id) localizedNames:(id) supportedBrands:(id) url:(id) iconData:(id) additionalEntryButtons:(id) {
	%orig;
	NSLog(@"-(id) initWithIdentifier:(id) hmiCategory:(id) name:(id) mainStateId:(id) entryButtonId:(id) weight:(id) bundleId:(id) version:(id) localizedNames:(id) supportedBrands:(id) url:(id) iconData:(id) additionalEntryButtons:(id)");
}

-(id) hmiCategory {
	%orig;
	NSLog(@"-(id) hmiCategory");
}

-(id) supportedBrands {
	%orig;
	NSLog(@"-(id) supportedBrands");
}

-(id) mainStateId {
	%orig;
	NSLog(@"-(id) mainStateId");
}

-(id) entryButtonId {
	%orig;
	NSLog(@"-(id) entryButtonId");
}

-(bool) isEqualToFeatureInfo:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToFeatureInfo:(id)");
}

-(id) initWithIdentifier:(id) hmiCategory:(id) name:(id) version:(id) localizedNames:(id) supportedBrands:(id) url:(id) iconData:(id) {
	%orig;
	NSLog(@"-(id) initWithIdentifier:(id) hmiCategory:(id) name:(id) version:(id) localizedNames:(id) supportedBrands:(id) url:(id) iconData:(id)");
}

-(id) localizedName:(int) {
	%orig;
	NSLog(@"-(id) localizedName:(int)");
}

-(unsigned long long) twentyFourBitTruncatedHash {
	%orig;
	NSLog(@"-(unsigned long long) twentyFourBitTruncatedHash");
}

-(id) localizedNames {
	%orig;
	NSLog(@"-(id) localizedNames");
}

-(id) iconData {
	%orig;
	NSLog(@"-(id) iconData");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) identifier {
	%orig;
	NSLog(@"-(id) identifier");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(id) bundleId {
	%orig;
	NSLog(@"-(id) bundleId");
}

-(id) weight {
	%orig;
	NSLog(@"-(id) weight");
}

%end

%hook IDRhmiConnectedAppsViewController

-(void) table:(id) didSelectItemAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) table:(id) didSelectItemAtIndex:(long long)");
}

-(id) connectedFeatureInfos {
	%orig;
	NSLog(@"-(id) connectedFeatureInfos");
}

-(void) setConnectedBundleIdentifiers:(id) {
	%orig;
	NSLog(@"-(void) setConnectedBundleIdentifiers:(id)");
}

-(id) connectedBundleIdentifiers {
	%orig;
	NSLog(@"-(id) connectedBundleIdentifiers");
}

-(void) updateConnectedApplicationListWithBundleIdentifiers:(id) {
	%orig;
	NSLog(@"-(void) updateConnectedApplicationListWithBundleIdentifiers:(id)");
}

-(id) composedFeatureInfoFromFeatureInfoSet:(id) {
	%orig;
	NSLog(@"-(id) composedFeatureInfoFromFeatureInfoSet:(id)");
}

-(id) connectedFeatureInfoListWithBundleIdentifiers:(id) {
	%orig;
	NSLog(@"-(id) connectedFeatureInfoListWithBundleIdentifiers:(id)");
}

-(void) setConnectedFeatureInfos:(id) {
	%orig;
	NSLog(@"-(void) setConnectedFeatureInfos:(id)");
}

-(void) showWithFeatureInfo:(id) {
	%orig;
	NSLog(@"-(void) showWithFeatureInfo:(id)");
}

-(void) updateConnectedBundleIdentifiers:(id) {
	%orig;
	NSLog(@"-(void) updateConnectedBundleIdentifiers:(id)");
}

-(int) hmiLanguage {
	%orig;
	NSLog(@"-(int) hmiLanguage");
}

-(void) setHmiLanguage:(int) {
	%orig;
	NSLog(@"-(void) setHmiLanguage:(int)");
}

-(void) updateUI {
	%orig;
	NSLog(@"-(void) updateUI");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidAppear:(id) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(id)");
}

-(id) initWithView:(id) {
	%orig;
	NSLog(@"-(id) initWithView:(id)");
}

%end

%hook IDRhmiConnectedAppsIdentifiers

+(void) loadSidNameToIdMapping {
	%orig;
	NSLog(@"+(void) loadSidNameToIdMapping");
}

+(long long) textIdentifieForSID:(id) {
	%orig;
	NSLog(@"+(long long) textIdentifieForSID:(id)");
}

%end

%hook IDRhmiConnectedAppsHmiProvider

-(id) viewForId:(long long) {
	%orig;
	NSLog(@"-(id) viewForId:(long long)");
}

-(id) modelForId:(long long) {
	%orig;
	NSLog(@"-(id) modelForId:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(id) multimediaInfo {
	%orig;
	NSLog(@"-(id) multimediaInfo");
}

-(id) hmiStatusBar {
	%orig;
	NSLog(@"-(id) hmiStatusBar");
}

-(id) allViews {
	%orig;
	NSLog(@"-(id) allViews");
}

-(void) setMultimediaInfo:(id) {
	%orig;
	NSLog(@"-(void) setMultimediaInfo:(id)");
}

-(void) setHmiStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setHmiStatusBar:(id)");
}

-(id) viewDict {
	%orig;
	NSLog(@"-(id) viewDict");
}

-(void) setViewDict:(id) {
	%orig;
	NSLog(@"-(void) setViewDict:(id)");
}

-(id) modelDict {
	%orig;
	NSLog(@"-(id) modelDict");
}

-(void) setModelDict:(id) {
	%orig;
	NSLog(@"-(void) setModelDict:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiAppSwitcher

-(id) manifestForApplication:(id) {
	%orig;
	NSLog(@"-(id) manifestForApplication:(id)");
}

-(id) hmiDescriptionForApplication:(id) {
	%orig;
	NSLog(@"-(id) hmiDescriptionForApplication:(id)");
}

-(id) textDatabasesForApplication:(id) {
	%orig;
	NSLog(@"-(id) textDatabasesForApplication:(id)");
}

-(id) messagingService {
	%orig;
	NSLog(@"-(id) messagingService");
}

-(void) applicationManagementService:(id) shouldStartAppIdentifier:(id) {
	%orig;
	NSLog(@"-(void) applicationManagementService:(id) shouldStartAppIdentifier:(id)");
}

-(id) localizedApplicationNotConnectedPreviewStrings {
	%orig;
	NSLog(@"-(id) localizedApplicationNotConnectedPreviewStrings");
}

-(id) stateCondition {
	%orig;
	NSLog(@"-(id) stateCondition");
}

-(void) setStateCondition:(id) {
	%orig;
	NSLog(@"-(void) setStateCondition:(id)");
}

-(void) setMessagingService:(id) {
	%orig;
	NSLog(@"-(void) setMessagingService:(id)");
}

-(void) setAmService:(id) {
	%orig;
	NSLog(@"-(void) setAmService:(id)");
}

-(id) amService {
	%orig;
	NSLog(@"-(id) amService");
}

-(id) featureInfoDeleteObserver {
	%orig;
	NSLog(@"-(id) featureInfoDeleteObserver");
}

-(void) registerInstalledFeatureInfos {
	%orig;
	NSLog(@"-(void) registerInstalledFeatureInfos");
}

-(void) setFeatureInfoDeleteObserver:(id) {
	%orig;
	NSLog(@"-(void) setFeatureInfoDeleteObserver:(id)");
}

-(id) featureInfoUpdateObserver {
	%orig;
	NSLog(@"-(id) featureInfoUpdateObserver");
}

-(void) setFeatureInfoUpdateObserver:(id) {
	%orig;
	NSLog(@"-(void) setFeatureInfoUpdateObserver:(id)");
}

-(void) enqueueBroadcastProtocolRequest {
	%orig;
	NSLog(@"-(void) enqueueBroadcastProtocolRequest");
}

-(void) waitForApplicationPingWithTimeout:(float) {
	%orig;
	NSLog(@"-(void) waitForApplicationPingWithTimeout:(float)");
}

-(id) connectedApplications {
	%orig;
	NSLog(@"-(id) connectedApplications");
}

-(void) registerFeatureInfosWithBundleIdentifiers:(id) {
	%orig;
	NSLog(@"-(void) registerFeatureInfosWithBundleIdentifiers:(id)");
}

-(void) registerFeatureInfo:(id) {
	%orig;
	NSLog(@"-(void) registerFeatureInfo:(id)");
}

-(void) deleteDisconnectedAppsAfterTimeout:(double) {
	%orig;
	NSLog(@"-(void) deleteDisconnectedAppsAfterTimeout:(double)");
}

-(void) setShouldLaunchAppIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setShouldLaunchAppIdentifier:(id)");
}

-(id) findFeatureInfoWithAppIdentifier:(id) {
	%orig;
	NSLog(@"-(id) findFeatureInfoWithAppIdentifier:(id)");
}

-(id) connectedAppsViewController {
	%orig;
	NSLog(@"-(id) connectedAppsViewController");
}

-(void) launchAppIdentifier:(id) {
	%orig;
	NSLog(@"-(void) launchAppIdentifier:(id)");
}

-(void) enqueueDisconnectApplicationRequest:(id) {
	%orig;
	NSLog(@"-(void) enqueueDisconnectApplicationRequest:(id)");
}

-(id) shouldLaunchAppIdentifier {
	%orig;
	NSLog(@"-(id) shouldLaunchAppIdentifier");
}

-(void) saveNamedBundleIdentifier:(id) {
	%orig;
	NSLog(@"-(void) saveNamedBundleIdentifier:(id)");
}

-(void) setConnectedApplications:(id) {
	%orig;
	NSLog(@"-(void) setConnectedApplications:(id)");
}

-(void) setConnectedAppsViewController:(id) {
	%orig;
	NSLog(@"-(void) setConnectedAppsViewController:(id)");
}

-(id) localizedAppNotStartedHints {
	%orig;
	NSLog(@"-(id) localizedAppNotStartedHints");
}

-(void) didSelectBundleIdentifier:(id) {
	%orig;
	NSLog(@"-(void) didSelectBundleIdentifier:(id)");
}

-(void) onUpdateLanguage:(id) {
	%orig;
	NSLog(@"-(void) onUpdateLanguage:(id)");
}

-(void) switchToRhmiFeature:(id) {
	%orig;
	NSLog(@"-(void) switchToRhmiFeature:(id)");
}

-(void) handleResponse:(id) {
	%orig;
	NSLog(@"-(void) handleResponse:(id)");
}

-(void) handleMessage:(id) {
	%orig;
	NSLog(@"-(void) handleMessage:(id)");
}

-(void) handleNotification:(id) {
	%orig;
	NSLog(@"-(void) handleNotification:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) bundleIdentifier {
	%orig;
	NSLog(@"-(id) bundleIdentifier");
}

-(void) connect {
	%orig;
	NSLog(@"-(void) connect");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

-(void) handleRequest:(id) {
	%orig;
	NSLog(@"-(void) handleRequest:(id)");
}

-(id) application {
	%orig;
	NSLog(@"-(id) application");
}

-(void) setApplication:(id) {
	%orig;
	NSLog(@"-(void) setApplication:(id)");
}

%end

%hook IDResourceData

+(id) resourceDataWithType:(int) data:(id) {
	%orig;
	NSLog(@"+(id) resourceDataWithType:(int) data:(id)");
}

-(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType>) rhmiResourceType {
	%orig;
	NSLog(@"-(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType>) rhmiResourceType");
}

-(SmartPointer<EtchNativeArray<signed char> >) rhmiResourceData {
	%orig;
	NSLog(@"-(SmartPointer<EtchNativeArray<signed char> >) rhmiResourceData");
}

-(id) initWithType:(int) data:(id) {
	%orig;
	NSLog(@"-(id) initWithType:(int) data:(id)");
}

-(id) typeName {
	%orig;
	NSLog(@"-(id) typeName");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(int) type {
	%orig;
	NSLog(@"-(int) type");
}

-(void) setType:(int) {
	%orig;
	NSLog(@"-(void) setType:(int)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook IDRemoteBMWRemotingServerAdapter

-(RemoteBMWRemotingServer*) serverPointer {
	%orig;
	NSLog(@"-(RemoteBMWRemotingServer*) serverPointer");
}

-(id) initWithNewServerFunction:(?*) {
	%orig;
	NSLog(@"-(id) initWithNewServerFunction:(?*)");
}

-(int) createServerWithEtchRuntime:(EtchRuntime*) urlString:(EtchString) etchResources:(EtchResources*) factory:(BMWRemotingClientFactory*) {
	%orig;
	NSLog(@"-(int) createServerWithEtchRuntime:(EtchRuntime*) urlString:(EtchString) etchResources:(EtchResources*) factory:(BMWRemotingClientFactory*)");
}

-(int) waitUp:(int) {
	%orig;
	NSLog(@"-(int) waitUp:(int)");
}

-(int) startAndWaitUp:(int) {
	%orig;
	NSLog(@"-(int) startAndWaitUp:(int)");
}

-(int) waitDown:(int) {
	%orig;
	NSLog(@"-(int) waitDown:(int)");
}

-(int) stopAndWaitDown:(int) {
	%orig;
	NSLog(@"-(int) stopAndWaitDown:(int)");
}

-(SmartPointer<EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> >) ver_getVersion {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> >) ver_getVersion");
}

-(SmartPointer<EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> > >) info_getSystemInfoWithComponent:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> > >) info_getSystemInfoWithComponent:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) sas_crlWithData:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) sas_crlWithData:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResult<EtchNativeArray<signed char> > >) sas_certificateWithData:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchNativeArray<signed char> > >) sas_certificateWithData:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResult<EtchString> >) sas_loginWithData:(SmartPointer<EtchNativeArray<signed char> >) version:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchString> >) sas_loginWithData:(SmartPointer<EtchNativeArray<signed char> >) version:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo>)");
}

-(SmartPointer<EtchAsyncResult<EtchString> >) sas_permissionWithToken:(SmartPointer<EtchString>) key:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchString> >) sas_permissionWithToken:(SmartPointer<EtchString>) key:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) sas_logoutWithToken:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) sas_logoutWithToken:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) rhmi_createWithToken:(SmartPointer<EtchString>) metaData:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::RHMIMetaData>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) rhmi_createWithToken:(SmartPointer<EtchString>) metaData:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::RHMIMetaData>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) rhmi_createWithToken:(SmartPointer<EtchString>) rhmiVersion:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIVersion>) metaData:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::RHMIMetaData>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) rhmi_createWithToken:(SmartPointer<EtchString>) rhmiVersion:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIVersion>) metaData:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::RHMIMetaData>)");
}

-(SmartPointer<EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> > >) rhmi_getCapabilitiesWithHandle:(SmartPointer<EtchInt32>) component:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> > >) rhmi_getCapabilitiesWithHandle:(SmartPointer<EtchInt32>) component:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResult<EtchBool> >) rhmi_checkResourceWithHandle:(SmartPointer<EtchInt32>) type:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType>) name:(SmartPointer<EtchString>) size:(SmartPointer<EtchInt32>) hash:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchBool> >) rhmi_checkResourceWithHandle:(SmartPointer<EtchInt32>) type:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType>) name:(SmartPointer<EtchString>) size:(SmartPointer<EtchInt32>) hash:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_setResourceWithHandle:(SmartPointer<EtchInt32>) type:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType>) data:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_setResourceWithHandle:(SmartPointer<EtchInt32>) type:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType>) data:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_initializeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_initializeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_setStateWithHandle:(SmartPointer<EtchInt32>) state:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_setStateWithHandle:(SmartPointer<EtchInt32>) state:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) rhmi_getStateWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) rhmi_getStateWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_setPropertyWithHandle:(SmartPointer<EtchInt32>) componentId:(SmartPointer<EtchInt32>) propertyId:(SmartPointer<EtchInt32>) values:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_setPropertyWithHandle:(SmartPointer<EtchInt32>) componentId:(SmartPointer<EtchInt32>) propertyId:(SmartPointer<EtchInt32>) values:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_setDataWithHandle:(SmartPointer<EtchInt32>) modelId:(SmartPointer<EtchInt32>) value:(SmartPointer<EtchObject>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_setDataWithHandle:(SmartPointer<EtchInt32>) modelId:(SmartPointer<EtchInt32>) value:(SmartPointer<EtchObject>)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_addActionEventHandlerWithHandle:(SmartPointer<EtchInt32>) actionId:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_addActionEventHandlerWithHandle:(SmartPointer<EtchInt32>) actionId:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_removeActionEventHandlerWithHandle:(SmartPointer<EtchInt32>) actionId:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_removeActionEventHandlerWithHandle:(SmartPointer<EtchInt32>) actionId:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_ackActionEventWithHandle:(SmartPointer<EtchInt32>) actionId:(SmartPointer<EtchInt32>) confirmId:(SmartPointer<EtchInt32>) success:(SmartPointer<EtchBool>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_ackActionEventWithHandle:(SmartPointer<EtchInt32>) actionId:(SmartPointer<EtchInt32>) confirmId:(SmartPointer<EtchInt32>) success:(SmartPointer<EtchBool>)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_addHmiEventHandlerWithHandle:(SmartPointer<EtchInt32>) componentId:(SmartPointer<EtchInt32>) eventId:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_addHmiEventHandlerWithHandle:(SmartPointer<EtchInt32>) componentId:(SmartPointer<EtchInt32>) eventId:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_removeHmiEventHandlerWithHandle:(SmartPointer<EtchInt32>) componentId:(SmartPointer<EtchInt32>) eventId:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_removeHmiEventHandlerWithHandle:(SmartPointer<EtchInt32>) componentId:(SmartPointer<EtchInt32>) eventId:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_triggerEventWithHandle:(SmartPointer<EtchInt32>) eventId:(SmartPointer<EtchInt32>) args:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_triggerEventWithHandle:(SmartPointer<EtchInt32>) eventId:(SmartPointer<EtchInt32>) args:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >)");
}

-(SmartPointer<EtchAsyncResultNone>) rhmi_disposeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) rhmi_disposeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) am_createWithDeviceId:(SmartPointer<EtchString>) bluetoothAddress:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) am_createWithDeviceId:(SmartPointer<EtchString>) bluetoothAddress:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResultNone>) am_registerAppWithHandle:(SmartPointer<EtchInt32>) appId:(SmartPointer<EtchString>) values:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) am_registerAppWithHandle:(SmartPointer<EtchInt32>) appId:(SmartPointer<EtchString>) values:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >)");
}

-(SmartPointer<EtchAsyncResultNone>) am_showLoadingHintWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) am_showLoadingHintWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) am_showLoadedSuccessHintWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) am_showLoadedSuccessHintWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) am_showLoadingFailHintWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) am_showLoadingFailHintWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) am_addAppEventHandlerWithHandle:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) am_addAppEventHandlerWithHandle:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) am_removeAppEventHandlerWithHandle:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) am_removeAppEventHandlerWithHandle:(SmartPointer<EtchInt32>) ident:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) am_disposeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) am_disposeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) cds_createWithToken:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) cds_createWithToken:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> >) cds_getVersion {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> >) cds_getVersion");
}

-(SmartPointer<EtchAsyncResultNone>) cds_getPropertyAsyncWithHandle:(SmartPointer<EtchInt32>) propertyName:(SmartPointer<EtchString>) ident:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) cds_getPropertyAsyncWithHandle:(SmartPointer<EtchInt32>) propertyName:(SmartPointer<EtchString>) ident:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) cds_setPropertyAsyncWithHandle:(SmartPointer<EtchInt32>) propertyName:(SmartPointer<EtchString>) ident:(SmartPointer<EtchString>) propertyValue:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) cds_setPropertyAsyncWithHandle:(SmartPointer<EtchInt32>) propertyName:(SmartPointer<EtchString>) ident:(SmartPointer<EtchString>) propertyValue:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) cds_addPropertyChangedEventHandlerWithHandle:(SmartPointer<EtchInt32>) propertyName:(SmartPointer<EtchString>) ident:(SmartPointer<EtchString>) intervalLimit:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) cds_addPropertyChangedEventHandlerWithHandle:(SmartPointer<EtchInt32>) propertyName:(SmartPointer<EtchString>) ident:(SmartPointer<EtchString>) intervalLimit:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) cds_removePropertyChangedEventHandlerWithHandle:(SmartPointer<EtchInt32>) propertyName:(SmartPointer<EtchString>) ident:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) cds_removePropertyChangedEventHandlerWithHandle:(SmartPointer<EtchInt32>) propertyName:(SmartPointer<EtchString>) ident:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) cds_disposeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) cds_disposeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) av_createWithToken:(SmartPointer<EtchString>) instanceID:(SmartPointer<EtchInt32>) identifier:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) av_createWithToken:(SmartPointer<EtchString>) instanceID:(SmartPointer<EtchInt32>) identifier:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) av_requestConnectionWithHandle:(SmartPointer<EtchInt32>) connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) av_requestConnectionWithHandle:(SmartPointer<EtchInt32>) connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>)");
}

-(SmartPointer<EtchAsyncResultNone>) av_playerStateChangedWithHandle:(SmartPointer<EtchInt32>) connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>) playerState:(SmartPointer<de_bmw_idrive_BMWRemoting::AVPlayerState>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) av_playerStateChangedWithHandle:(SmartPointer<EtchInt32>) connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>) playerState:(SmartPointer<de_bmw_idrive_BMWRemoting::AVPlayerState>)");
}

-(SmartPointer<EtchAsyncResultNone>) av_closeConnectionWithHandle:(SmartPointer<EtchInt32>) connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) av_closeConnectionWithHandle:(SmartPointer<EtchInt32>) connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>)");
}

-(SmartPointer<EtchAsyncResultNone>) av_disposeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) av_disposeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) voice_createWithDeviceId:(SmartPointer<EtchString>) bluetoothAddress:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) voice_createWithDeviceId:(SmartPointer<EtchString>) bluetoothAddress:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResultNone>) voice_disposeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) voice_disposeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) voice_requestSessionWithHandle:(SmartPointer<EtchInt32>) priority:(SmartPointer<de_bmw_idrive_BMWRemoting::VoicePriorityType>) filterType:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) voice_requestSessionWithHandle:(SmartPointer<EtchInt32>) priority:(SmartPointer<de_bmw_idrive_BMWRemoting::VoicePriorityType>) filterType:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >)");
}

-(SmartPointer<EtchAsyncResultNone>) voice_stopSessionWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) voice_stopSessionWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) log_createWithToken:(SmartPointer<EtchString>) name:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) log_createWithToken:(SmartPointer<EtchString>) name:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) log_logWithHandle:(SmartPointer<EtchInt32>) level:(SmartPointer<de_bmw_idrive_BMWRemoting::LogLevel>) message:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) log_logWithHandle:(SmartPointer<EtchInt32>) level:(SmartPointer<de_bmw_idrive_BMWRemoting::LogLevel>) message:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) log_disposeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) log_disposeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResult<EtchObject> >) diag_echoWithData:(SmartPointer<EtchObject>) mode:(SmartPointer<EtchInt32>) parameter:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchObject> >) diag_echoWithData:(SmartPointer<EtchObject>) mode:(SmartPointer<EtchInt32>) parameter:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) diag_perf_startWithMode:(SmartPointer<EtchInt32>) data:(SmartPointer<EtchObject>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) diag_perf_startWithMode:(SmartPointer<EtchInt32>) data:(SmartPointer<EtchObject>)");
}

-(SmartPointer<EtchAsyncResultNone>) diag_perf_onewayWithData:(SmartPointer<EtchObject>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) diag_perf_onewayWithData:(SmartPointer<EtchObject>)");
}

-(SmartPointer<EtchAsyncResultNone>) diag_perf_twowayWithData:(SmartPointer<EtchObject>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) diag_perf_twowayWithData:(SmartPointer<EtchObject>)");
}

-(SmartPointer<EtchAsyncResult<EtchObject> >) diag_perf_end {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchObject> >) diag_perf_end");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) pia_createWithToken:(SmartPointer<EtchString>) deviceId:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) pia_createWithToken:(SmartPointer<EtchString>) deviceId:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) pia_disposeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) pia_disposeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) pia_requestWithHandle:(SmartPointer<EtchInt32>) data:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) pia_requestWithHandle:(SmartPointer<EtchInt32>) data:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResultNone>) pia_importWithHandle:(SmartPointer<EtchInt32>) data:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) pia_importWithHandle:(SmartPointer<EtchInt32>) data:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResultNone>) pia_exportResultWithHandle:(SmartPointer<EtchInt32>) success:(SmartPointer<EtchBool>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) pia_exportResultWithHandle:(SmartPointer<EtchInt32>) success:(SmartPointer<EtchBool>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) map_create {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) map_create");
}

-(SmartPointer<EtchAsyncResultNone>) map_disposeWithHandle:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) map_disposeWithHandle:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) map_highlightWithHandle:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) overlayId:(SmartPointer<EtchShort>) location:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) map_highlightWithHandle:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) overlayId:(SmartPointer<EtchShort>) location:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) map_showOverlayWithHandle:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) overlayId:(SmartPointer<EtchShort>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) map_showOverlayWithHandle:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) overlayId:(SmartPointer<EtchShort>)");
}

-(SmartPointer<EtchAsyncResultNone>) map_hideOverlayWithHandle:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) overlayId:(SmartPointer<EtchShort>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) map_hideOverlayWithHandle:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) overlayId:(SmartPointer<EtchShort>)");
}

-(SmartPointer<EtchAsyncResultNone>) map_removeWithHandle:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) map_removeWithHandle:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>)");
}

-(SmartPointer<EtchAsyncResultNone>) map_setModeWithHandle:(SmartPointer<EtchInt32>) mode:(SmartPointer<de_bmw_idrive_BMWRemoting::MapMode>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) map_setModeWithHandle:(SmartPointer<EtchInt32>) mode:(SmartPointer<de_bmw_idrive_BMWRemoting::MapMode>)");
}

-(SmartPointer<EtchAsyncResult<EtchInt32> >) map_initializeImportWithHandle:(SmartPointer<EtchInt32>) transferId:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) size:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResult<EtchInt32> >) map_initializeImportWithHandle:(SmartPointer<EtchInt32>) transferId:(SmartPointer<EtchInt32>) filename:(SmartPointer<EtchString>) size:(SmartPointer<EtchInt32>)");
}

-(SmartPointer<EtchAsyncResultNone>) map_importDataWithHandle:(SmartPointer<EtchInt32>) transferId:(SmartPointer<EtchInt32>) seq:(SmartPointer<EtchInt32>) data:(SmartPointer<EtchNativeArray<signed char> >) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) map_importDataWithHandle:(SmartPointer<EtchInt32>) transferId:(SmartPointer<EtchInt32>) seq:(SmartPointer<EtchInt32>) data:(SmartPointer<EtchNativeArray<signed char> >)");
}

-(SmartPointer<EtchAsyncResultNone>) map_abortImportWithHandle:(SmartPointer<EtchInt32>) transferId:(SmartPointer<EtchInt32>) reason:(SmartPointer<EtchInt32>) {
	%orig;
	NSLog(@"-(SmartPointer<EtchAsyncResultNone>) map_abortImportWithHandle:(SmartPointer<EtchInt32>) transferId:(SmartPointer<EtchInt32>) reason:(SmartPointer<EtchInt32>)");
}

-(void) destroyServer {
	%orig;
	NSLog(@"-(void) destroyServer");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(int) stop {
	%orig;
	NSLog(@"-(int) stop");
}

-(int) start {
	%orig;
	NSLog(@"-(int) start");
}

%end

%hook IDReachability

+(id) reachabilityWithHostName:(id) {
	%orig;
	NSLog(@"+(id) reachabilityWithHostName:(id)");
}

-(id) initWithHostName:(id) {
	%orig;
	NSLog(@"-(id) initWithHostName:(id)");
}

-(id) networkReachabilityFlagsStringRepresentation:(unsigned int) {
	%orig;
	NSLog(@"-(id) networkReachabilityFlagsStringRepresentation:(unsigned int)");
}

-(id) hostName {
	%orig;
	NSLog(@"-(id) hostName");
}

-(bool) startNotifier {
	%orig;
	NSLog(@"-(bool) startNotifier");
}

-(long long) currentReachabilityStatus {
	%orig;
	NSLog(@"-(long long) currentReachabilityStatus");
}

-(void) stopNotifier {
	%orig;
	NSLog(@"-(void) stopNotifier");
}

-(long long) localWiFiStatusForFlags:(unsigned int) {
	%orig;
	NSLog(@"-(long long) localWiFiStatusForFlags:(unsigned int)");
}

-(long long) networkStatusForFlags:(unsigned int) {
	%orig;
	NSLog(@"-(long long) networkStatusForFlags:(unsigned int)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDProtocolSelector

-(void) monitor:(id) didCreatePacket:(id) {
	%orig;
	NSLog(@"-(void) monitor:(id) didCreatePacket:(id)");
}

-(void) monitor:(id) didEncounterError:(id) {
	%orig;
	NSLog(@"-(void) monitor:(id) didEncounterError:(id)");
}

-(id) proxyInfo {
	%orig;
	NSLog(@"-(id) proxyInfo");
}

-(void) setProxyInfo:(id) {
	%orig;
	NSLog(@"-(void) setProxyInfo:(id)");
}

-(id) stateCondition {
	%orig;
	NSLog(@"-(id) stateCondition");
}

-(id) connectionCondition {
	%orig;
	NSLog(@"-(id) connectionCondition");
}

-(void) setStreamProvider:(id) {
	%orig;
	NSLog(@"-(void) setStreamProvider:(id)");
}

-(id) streamProvider {
	%orig;
	NSLog(@"-(id) streamProvider");
}

-(id) preselectableCommunicationProtocols {
	%orig;
	NSLog(@"-(id) preselectableCommunicationProtocols");
}

-(id) broadcastReceiver {
	%orig;
	NSLog(@"-(id) broadcastReceiver");
}

-(void) sendBroadcast:(id) {
	%orig;
	NSLog(@"-(void) sendBroadcast:(id)");
}

-(float) handshakeTimeout {
	%orig;
	NSLog(@"-(float) handshakeTimeout");
}

-(void) waitForHandshakeWithTimeout:(float) {
	%orig;
	NSLog(@"-(void) waitForHandshakeWithTimeout:(float)");
}

-(void) setBroadcastReceiver:(id) {
	%orig;
	NSLog(@"-(void) setBroadcastReceiver:(id)");
}

-(void) setStateCondition:(id) {
	%orig;
	NSLog(@"-(void) setStateCondition:(id)");
}

-(void) setConnectionCondition:(id) {
	%orig;
	NSLog(@"-(void) setConnectionCondition:(id)");
}

-(void) setHandshakeTimeout:(float) {
	%orig;
	NSLog(@"-(void) setHandshakeTimeout:(float)");
}

-(id) a4aConnection {
	%orig;
	NSLog(@"-(id) a4aConnection");
}

-(void) closeA4AConnection {
	%orig;
	NSLog(@"-(void) closeA4AConnection");
}

-(void) setA4aConnection:(id) {
	%orig;
	NSLog(@"-(void) setA4aConnection:(id)");
}

-(unsigned long long) protocolVersionForProxy:(id) {
	%orig;
	NSLog(@"-(unsigned long long) protocolVersionForProxy:(id)");
}

-(void) connection:(id) didReceivePacket:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceivePacket:(id)");
}

-(void) connection:(id) errorOccured:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) errorOccured:(id)");
}

-(void) connectionDidCloseUnderlyingStreams:(id) {
	%orig;
	NSLog(@"-(void) connectionDidCloseUnderlyingStreams:(id)");
}

-(void) setPreselectedCommunicationProtocol:(id) {
	%orig;
	NSLog(@"-(void) setPreselectedCommunicationProtocol:(id)");
}

-(bool) isTargetedForSimulator {
	%orig;
	NSLog(@"-(bool) isTargetedForSimulator");
}

-(void) setExternalAccessorySelector:(id) {
	%orig;
	NSLog(@"-(void) setExternalAccessorySelector:(id)");
}

-(id) externalAccessorySelector {
	%orig;
	NSLog(@"-(id) externalAccessorySelector");
}

-(void) streamProvider:(id) didFailToStartWithError:(id) {
	%orig;
	NSLog(@"-(void) streamProvider:(id) didFailToStartWithError:(id)");
}

-(void) streamProvider:(id) didFailToResolveStreamsWithError:(id) {
	%orig;
	NSLog(@"-(void) streamProvider:(id) didFailToResolveStreamsWithError:(id)");
}

-(void) streamProvider:(id) didResolveInputStream:(id) outputStream:(id) {
	%orig;
	NSLog(@"-(void) streamProvider:(id) didResolveInputStream:(id) outputStream:(id)");
}

-(void) streamProviderWillDiscardStreams:(id) {
	%orig;
	NSLog(@"-(void) streamProviderWillDiscardStreams:(id)");
}

-(id) negotiationProtocols {
	%orig;
	NSLog(@"-(id) negotiationProtocols");
}

-(id) communicationProtocols {
	%orig;
	NSLog(@"-(id) communicationProtocols");
}

-(id) legacyProtocol {
	%orig;
	NSLog(@"-(id) legacyProtocol");
}

-(void) setSelectedCommunicationProtocol:(id) {
	%orig;
	NSLog(@"-(void) setSelectedCommunicationProtocol:(id)");
}

-(id) selectedCommunicationProtocol {
	%orig;
	NSLog(@"-(id) selectedCommunicationProtocol");
}

-(id) selectedNegotiationProtocol {
	%orig;
	NSLog(@"-(id) selectedNegotiationProtocol");
}

-(id) preselectedCommunicationProtocol {
	%orig;
	NSLog(@"-(id) preselectedCommunicationProtocol");
}

-(id) receivedProtocols {
	%orig;
	NSLog(@"-(id) receivedProtocols");
}

-(void) resetProtocolSelectorState {
	%orig;
	NSLog(@"-(void) resetProtocolSelectorState");
}

-(void) setSelectedNegotiationProtocol:(id) {
	%orig;
	NSLog(@"-(void) setSelectedNegotiationProtocol:(id)");
}

-(void) setLastClaimProtocolNotification:(id) {
	%orig;
	NSLog(@"-(void) setLastClaimProtocolNotification:(id)");
}

-(void) setLastBroadcastProtocolRequest:(id) {
	%orig;
	NSLog(@"-(void) setLastBroadcastProtocolRequest:(id)");
}

-(void) setClaimedCommunicationProtocol:(id) {
	%orig;
	NSLog(@"-(void) setClaimedCommunicationProtocol:(id)");
}

-(id) stringFromIDProtocolSelectorState:(unsigned long long) {
	%orig;
	NSLog(@"-(id) stringFromIDProtocolSelectorState:(unsigned long long)");
}

-(id) stringFromIDProtocolSelectorConnectionToAccessoryState:(unsigned long long) {
	%orig;
	NSLog(@"-(id) stringFromIDProtocolSelectorConnectionToAccessoryState:(unsigned long long)");
}

-(void) resetStreamProvider {
	%orig;
	NSLog(@"-(void) resetStreamProvider");
}

-(void) finishHandshake {
	%orig;
	NSLog(@"-(void) finishHandshake");
}

-(void) processA4ABroadcastPacket:(id) {
	%orig;
	NSLog(@"-(void) processA4ABroadcastPacket:(id)");
}

-(void) requestBroadcastProtocol {
	%orig;
	NSLog(@"-(void) requestBroadcastProtocol");
}

-(float) broadcastResponseTimeout {
	%orig;
	NSLog(@"-(float) broadcastResponseTimeout");
}

-(void) claimRandomCommunicationProtocol {
	%orig;
	NSLog(@"-(void) claimRandomCommunicationProtocol");
}

-(id) lastClaimProtocolNotification {
	%orig;
	NSLog(@"-(id) lastClaimProtocolNotification");
}

-(id) lastBroadcastProtocolRequest {
	%orig;
	NSLog(@"-(id) lastBroadcastProtocolRequest");
}

-(void) enqueJSONRPCMessage:(id) {
	%orig;
	NSLog(@"-(void) enqueJSONRPCMessage:(id)");
}

-(id) availableCommunicationProtocols {
	%orig;
	NSLog(@"-(id) availableCommunicationProtocols");
}

-(void) sendClaimProtocolNotification:(id) {
	%orig;
	NSLog(@"-(void) sendClaimProtocolNotification:(id)");
}

-(float) claimProtocolWaitTime {
	%orig;
	NSLog(@"-(float) claimProtocolWaitTime");
}

-(void) useClaimedProtocolAsSelectedProtocol {
	%orig;
	NSLog(@"-(void) useClaimedProtocolAsSelectedProtocol");
}

-(id) claimedCommunicationProtocol {
	%orig;
	NSLog(@"-(id) claimedCommunicationProtocol");
}

-(void) setCommunicationProtocols:(id) {
	%orig;
	NSLog(@"-(void) setCommunicationProtocols:(id)");
}

-(void) setNegotiationProtocols:(id) {
	%orig;
	NSLog(@"-(void) setNegotiationProtocols:(id)");
}

-(void) setPreselectableCommunicationProtocols:(id) {
	%orig;
	NSLog(@"-(void) setPreselectableCommunicationProtocols:(id)");
}

-(void) setReceivedProtocols:(id) {
	%orig;
	NSLog(@"-(void) setReceivedProtocols:(id)");
}

-(void) setLegacyProtocol:(id) {
	%orig;
	NSLog(@"-(void) setLegacyProtocol:(id)");
}

-(void) setBroadcastResponseTimeout:(float) {
	%orig;
	NSLog(@"-(void) setBroadcastResponseTimeout:(float)");
}

-(void) setClaimProtocolWaitTime:(float) {
	%orig;
	NSLog(@"-(void) setClaimProtocolWaitTime:(float)");
}

-(void) setIsTargetedForSimulator:(bool) {
	%orig;
	NSLog(@"-(void) setIsTargetedForSimulator:(bool)");
}

-(id) connectionMonitor {
	%orig;
	NSLog(@"-(id) connectionMonitor");
}

-(void) setConnectionMonitor:(id) {
	%orig;
	NSLog(@"-(void) setConnectionMonitor:(id)");
}

-(bool) isStarted {
	%orig;
	NSLog(@"-(bool) isStarted");
}

-(id) backgroundTask {
	%orig;
	NSLog(@"-(id) backgroundTask");
}

-(void) setBackgroundTask:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundTask:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook IDNetworkStreamProvider

-(void) netServiceBrowser:(id) didSelectService:(id) {
	%orig;
	NSLog(@"-(void) netServiceBrowser:(id) didSelectService:(id)");
}

-(void) netServiceBrowser:(id) resolutionDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) netServiceBrowser:(id) resolutionDidFailWithError:(id)");
}

-(id) outputStream {
	%orig;
	NSLog(@"-(id) outputStream");
}

-(void) setInputStream:(id) {
	%orig;
	NSLog(@"-(void) setInputStream:(id)");
}

-(void) setOutputStream:(id) {
	%orig;
	NSLog(@"-(void) setOutputStream:(id)");
}

-(id) inputStream {
	%orig;
	NSLog(@"-(id) inputStream");
}

-(void) netServiceBrowser:(id) didRemoveService:(id) {
	%orig;
	NSLog(@"-(void) netServiceBrowser:(id) didRemoveService:(id)");
}

-(id) netServiceBrowser {
	%orig;
	NSLog(@"-(id) netServiceBrowser");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook IDNetServiceBrowser

-(id) createNetServiceDescriptionForNetService:(id) {
	%orig;
	NSLog(@"-(id) createNetServiceDescriptionForNetService:(id)");
}

-(id) foundServices {
	%orig;
	NSLog(@"-(id) foundServices");
}

-(id) selectedHmiService {
	%orig;
	NSLog(@"-(id) selectedHmiService");
}

-(void) setSelectedHmiService:(id) {
	%orig;
	NSLog(@"-(void) setSelectedHmiService:(id)");
}

-(bool) isNetServiceLocal:(id) {
	%orig;
	NSLog(@"-(bool) isNetServiceLocal:(id)");
}

-(id) hostnameWithSocketAddress:(sockaddr*) {
	%orig;
	NSLog(@"-(id) hostnameWithSocketAddress:(sockaddr*)");
}

-(id) hostnameWithAddressData:(id) {
	%orig;
	NSLog(@"-(id) hostnameWithAddressData:(id)");
}

-(long long) portWithAddressData:(id) {
	%orig;
	NSLog(@"-(long long) portWithAddressData:(id)");
}

-(long long) portWithSocketAddress:(sockaddr*) {
	%orig;
	NSLog(@"-(long long) portWithSocketAddress:(sockaddr*)");
}

-(void) setNetServiceBrowser:(id) {
	%orig;
	NSLog(@"-(void) setNetServiceBrowser:(id)");
}

-(void) setFoundServices:(id) {
	%orig;
	NSLog(@"-(void) setFoundServices:(id)");
}

-(id) initWithServiceType:(id) serviceDomain:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithServiceType:(id) serviceDomain:(id) delegate:(id)");
}

-(void) resolveNetService {
	%orig;
	NSLog(@"-(void) resolveNetService");
}

-(void) cancelNetServiceResolution {
	%orig;
	NSLog(@"-(void) cancelNetServiceResolution");
}

-(id) serviceType {
	%orig;
	NSLog(@"-(id) serviceType");
}

-(void) setServiceType:(id) {
	%orig;
	NSLog(@"-(void) setServiceType:(id)");
}

-(void) netServiceBrowserDidStopSearch:(id) {
	%orig;
	NSLog(@"-(void) netServiceBrowserDidStopSearch:(id)");
}

-(void) netServiceBrowser:(id) didNotSearch:(id) {
	%orig;
	NSLog(@"-(void) netServiceBrowser:(id) didNotSearch:(id)");
}

-(void) netServiceBrowser:(id) didFindService:(id) moreComing:(bool) {
	%orig;
	NSLog(@"-(void) netServiceBrowser:(id) didFindService:(id) moreComing:(bool)");
}

-(void) netServiceBrowser:(id) didRemoveService:(id) moreComing:(bool) {
	%orig;
	NSLog(@"-(void) netServiceBrowser:(id) didRemoveService:(id) moreComing:(bool)");
}

-(void) netServiceDidResolveAddress:(id) {
	%orig;
	NSLog(@"-(void) netServiceDidResolveAddress:(id)");
}

-(void) netService:(id) didNotResolve:(id) {
	%orig;
	NSLog(@"-(void) netService:(id) didNotResolve:(id)");
}

-(void) setServiceDomain:(id) {
	%orig;
	NSLog(@"-(void) setServiceDomain:(id)");
}

-(id) serviceDomain {
	%orig;
	NSLog(@"-(id) serviceDomain");
}

-(id) netServiceBrowser {
	%orig;
	NSLog(@"-(id) netServiceBrowser");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook IDMultimediaInfo

-(void) setNeedsFlush {
	%orig;
	NSLog(@"-(void) setNeedsFlush");
}

-(id) initWithFirstLineModel:(id) secondLineModel:(id) updateEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithFirstLineModel:(id) secondLineModel:(id) updateEvent:(long long)");
}

-(id) firstLineModel {
	%orig;
	NSLog(@"-(id) firstLineModel");
}

-(id) secondLineModel {
	%orig;
	NSLog(@"-(id) secondLineModel");
}

-(bool) firstLineDirty {
	%orig;
	NSLog(@"-(bool) firstLineDirty");
}

-(bool) firstLineTextIdDirty {
	%orig;
	NSLog(@"-(bool) firstLineTextIdDirty");
}

-(bool) secondLineDirty {
	%orig;
	NSLog(@"-(bool) secondLineDirty");
}

-(bool) secondLineTextIdDirty {
	%orig;
	NSLog(@"-(bool) secondLineTextIdDirty");
}

-(void) setFirstLineDirty:(bool) {
	%orig;
	NSLog(@"-(void) setFirstLineDirty:(bool)");
}

-(long long) firstLineTextId {
	%orig;
	NSLog(@"-(long long) firstLineTextId");
}

-(void) setFirstLineTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setFirstLineTextIdDirty:(bool)");
}

-(void) setSecondLineDirty:(bool) {
	%orig;
	NSLog(@"-(void) setSecondLineDirty:(bool)");
}

-(long long) secondLineTextId {
	%orig;
	NSLog(@"-(long long) secondLineTextId");
}

-(void) setSecondLineTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setSecondLineTextIdDirty:(bool)");
}

-(void) setFirstLineTextId:(long long) {
	%orig;
	NSLog(@"-(void) setFirstLineTextId:(long long)");
}

-(void) setSecondLineTextId:(long long) {
	%orig;
	NSLog(@"-(void) setSecondLineTextId:(long long)");
}

-(long long) updateEvent {
	%orig;
	NSLog(@"-(long long) updateEvent");
}

-(void) setUpdateEvent:(long long) {
	%orig;
	NSLog(@"-(void) setUpdateEvent:(long long)");
}

-(id) firstLine {
	%orig;
	NSLog(@"-(id) firstLine");
}

-(void) setFirstLine:(id) {
	%orig;
	NSLog(@"-(void) setFirstLine:(id)");
}

-(id) secondLine {
	%orig;
	NSLog(@"-(id) secondLine");
}

-(void) setSecondLine:(id) {
	%orig;
	NSLog(@"-(void) setSecondLine:(id)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(int) priority {
	%orig;
	NSLog(@"-(int) priority");
}

-(id) application {
	%orig;
	NSLog(@"-(id) application");
}

-(void) setApplication:(id) {
	%orig;
	NSLog(@"-(void) setApplication:(id)");
}

%end

%hook IDModel

+(id) modelWithId:(long long) type:(long long) implicit:(bool) {
	%orig;
	NSLog(@"+(id) modelWithId:(long long) type:(long long) implicit:(bool)");
}

-(id) initWithId:(long long) type:(long long) implicit:(bool) {
	%orig;
	NSLog(@"-(id) initWithId:(long long) type:(long long) implicit:(bool)");
}

-(bool) implicit {
	%orig;
	NSLog(@"-(bool) implicit");
}

-(long long) identifier {
	%orig;
	NSLog(@"-(long long) identifier");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

%end

%hook IDMessagingService

-(void) processBroadcast:(id) {
	%orig;
	NSLog(@"-(void) processBroadcast:(id)");
}

-(void) handleBroadcast:(id) {
	%orig;
	NSLog(@"-(void) handleBroadcast:(id)");
}

-(void) sendBroadcast:(id) {
	%orig;
	NSLog(@"-(void) sendBroadcast:(id)");
}

-(void) setBroadcastSender:(id) {
	%orig;
	NSLog(@"-(void) setBroadcastSender:(id)");
}

-(id) broadcastSender {
	%orig;
	NSLog(@"-(id) broadcastSender");
}

-(id) subscribersAccessLock {
	%orig;
	NSLog(@"-(id) subscribersAccessLock");
}

-(id) messageWithJSONRPCString:(id) {
	%orig;
	NSLog(@"-(id) messageWithJSONRPCString:(id)");
}

-(void) broadcastMessage:(id) {
	%orig;
	NSLog(@"-(void) broadcastMessage:(id)");
}

-(void) subscribe:(id) {
	%orig;
	NSLog(@"-(void) subscribe:(id)");
}

-(id) subscribers {
	%orig;
	NSLog(@"-(id) subscribers");
}

-(void) setSubscribers:(id) {
	%orig;
	NSLog(@"-(void) setSubscribers:(id)");
}

-(void) unsubscribe:(id) {
	%orig;
	NSLog(@"-(void) unsubscribe:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

-(void) setQueue:(id) {
	%orig;
	NSLog(@"-(void) setQueue:(id)");
}

%end

%hook IDLogger

+(id) defaultLogger {
	%orig;
	NSLog(@"+(id) defaultLogger");
}

-(unsigned long long) maximumLogLevel {
	%orig;
	NSLog(@"-(unsigned long long) maximumLogLevel");
}

-(void) setMaximumLogLevel:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaximumLogLevel:(unsigned long long)");
}

-(void) logMessage:(id) tag:(id) level:(unsigned long long) file:(id) method:(id) line:(unsigned long long) {
	%orig;
	NSLog(@"-(void) logMessage:(id) tag:(id) level:(unsigned long long) file:(id) method:(id) line:(unsigned long long)");
}

-(void) addAppender:(id) {
	%orig;
	NSLog(@"-(void) addAppender:(id)");
}

-(void) removeAppender:(id) {
	%orig;
	NSLog(@"-(void) removeAppender:(id)");
}

-(void) logMessage:(id) tag:(id) level:(unsigned long long) {
	%orig;
	NSLog(@"-(void) logMessage:(id) tag:(id) level:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDConsoleLogAppender

-(unsigned long long) maximumLogLevel {
	%orig;
	NSLog(@"-(unsigned long long) maximumLogLevel");
}

-(void) appendLoggerEvent:(id) {
	%orig;
	NSLog(@"-(void) appendLoggerEvent:(id)");
}

-(void) setMaximumLogLevel:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaximumLogLevel:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook IDLoggerEvent

-(void) setMethod:(id) {
	%orig;
	NSLog(@"-(void) setMethod:(id)");
}

-(void) setFile:(id) {
	%orig;
	NSLog(@"-(void) setFile:(id)");
}

-(id) file {
	%orig;
	NSLog(@"-(id) file");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(void) setTag:(id) {
	%orig;
	NSLog(@"-(void) setTag:(id)");
}

-(id) tag {
	%orig;
	NSLog(@"-(id) tag");
}

-(void) setLevel:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLevel:(unsigned long long)");
}

-(id) timeStamp {
	%orig;
	NSLog(@"-(id) timeStamp");
}

-(void) setTimeStamp:(id) {
	%orig;
	NSLog(@"-(void) setTimeStamp:(id)");
}

-(unsigned long long) level {
	%orig;
	NSLog(@"-(unsigned long long) level");
}

-(id) method {
	%orig;
	NSLog(@"-(id) method");
}

-(unsigned long long) line {
	%orig;
	NSLog(@"-(unsigned long long) line");
}

-(void) setLine:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLine:(unsigned long long)");
}

%end

%hook IDJSONRPCResponse

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) initWithJSONRPCString:(id) {
	%orig;
	NSLog(@"-(id) initWithJSONRPCString:(id)");
}

-(id) initWithVersion:(id) identifier:(id) result:(id) error:(id) {
	%orig;
	NSLog(@"-(id) initWithVersion:(id) identifier:(id) result:(id) error:(id)");
}

-(unsigned long long) messageType {
	%orig;
	NSLog(@"-(unsigned long long) messageType");
}

-(id) JSONRepresentation {
	%orig;
	NSLog(@"-(id) JSONRepresentation");
}

-(void) setResult:(id) {
	%orig;
	NSLog(@"-(void) setResult:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) identifier {
	%orig;
	NSLog(@"-(id) identifier");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(id) initWithRequest:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id)");
}

-(id) result {
	%orig;
	NSLog(@"-(id) result");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) setError:(id) {
	%orig;
	NSLog(@"-(void) setError:(id)");
}

-(id) stringRepresentation {
	%orig;
	NSLog(@"-(id) stringRepresentation");
}

%end

%hook IDJSONRPCRequest

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) initWithMethod:(id) parameters:(id) {
	%orig;
	NSLog(@"-(id) initWithMethod:(id) parameters:(id)");
}

-(id) initWithJSONRPCString:(id) {
	%orig;
	NSLog(@"-(id) initWithJSONRPCString:(id)");
}

-(id) initWithVersion:(id) identifier:(id) method:(id) parameters:(id) {
	%orig;
	NSLog(@"-(id) initWithVersion:(id) identifier:(id) method:(id) parameters:(id)");
}

-(unsigned long long) messageType {
	%orig;
	NSLog(@"-(unsigned long long) messageType");
}

-(id) initWithMethod:(id) {
	%orig;
	NSLog(@"-(id) initWithMethod:(id)");
}

-(id) JSONRepresentation {
	%orig;
	NSLog(@"-(id) JSONRepresentation");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) identifier {
	%orig;
	NSLog(@"-(id) identifier");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(id) method {
	%orig;
	NSLog(@"-(id) method");
}

-(id) stringRepresentation {
	%orig;
	NSLog(@"-(id) stringRepresentation");
}

%end

%hook IDJSONRPCNotification

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) initWithVersion:(id) method:(id) parameters:(id) {
	%orig;
	NSLog(@"-(id) initWithVersion:(id) method:(id) parameters:(id)");
}

-(id) initWithMethod:(id) parameters:(id) {
	%orig;
	NSLog(@"-(id) initWithMethod:(id) parameters:(id)");
}

-(id) initWithJSONRPCString:(id) {
	%orig;
	NSLog(@"-(id) initWithJSONRPCString:(id)");
}

-(unsigned long long) messageType {
	%orig;
	NSLog(@"-(unsigned long long) messageType");
}

-(id) initWithMethod:(id) {
	%orig;
	NSLog(@"-(id) initWithMethod:(id)");
}

-(id) JSONRepresentation {
	%orig;
	NSLog(@"-(id) JSONRepresentation");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(id) method {
	%orig;
	NSLog(@"-(id) method");
}

-(id) stringRepresentation {
	%orig;
	NSLog(@"-(id) stringRepresentation");
}

%end

%hook IDImageData

+(id) imageDataWithImage:(id) size:(CGSize) frame:(bool) vehicleInfo:(id) {
	%orig;
	NSLog(@"+(id) imageDataWithImage:(id) size:(CGSize) frame:(bool) vehicleInfo:(id)");
}

+(id) emptyImageData {
	%orig;
	NSLog(@"+(id) emptyImageData");
}

+(id) imageDataWithData:(id) {
	%orig;
	NSLog(@"+(id) imageDataWithData:(id)");
}

+(id) imageDataWithImage:(id) {
	%orig;
	NSLog(@"+(id) imageDataWithImage:(id)");
}

+(id) imageDataWithURL:(id) {
	%orig;
	NSLog(@"+(id) imageDataWithURL:(id)");
}

-(bool) dataContainsValidImageType:(id) {
	%orig;
	NSLog(@"-(bool) dataContainsValidImageType:(id)");
}

-(CGSize) extractImageSizeFromData:(id) {
	%orig;
	NSLog(@"-(CGSize) extractImageSizeFromData:(id)");
}

-(id) imageData {
	%orig;
	NSLog(@"-(id) imageData");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(CGSize) imageSize {
	%orig;
	NSLog(@"-(CGSize) imageSize");
}

-(id) initWithURL:(id) {
	%orig;
	NSLog(@"-(id) initWithURL:(id)");
}

-(id) initWithData:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id)");
}

%end

%hook IDExternalAccessoryStreamProvider

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) initWithA4AProtocol:(id) externalAccessorySelector:(id) {
	%orig;
	NSLog(@"-(id) initWithA4AProtocol:(id) externalAccessorySelector:(id)");
}

-(double) startupDelayForEASession {
	%orig;
	NSLog(@"-(double) startupDelayForEASession");
}

-(id) externalAccessorySelector {
	%orig;
	NSLog(@"-(id) externalAccessorySelector");
}

-(void) startExternalAccessorySessionSetup:(id) {
	%orig;
	NSLog(@"-(void) startExternalAccessorySessionSetup:(id)");
}

-(void) setA4aAccessoryDidAppearObserver:(id) {
	%orig;
	NSLog(@"-(void) setA4aAccessoryDidAppearObserver:(id)");
}

-(void) informDelegateAndCleanUp {
	%orig;
	NSLog(@"-(void) informDelegateAndCleanUp");
}

-(void) setA4aAccessoryDidDisappearObserver:(id) {
	%orig;
	NSLog(@"-(void) setA4aAccessoryDidDisappearObserver:(id)");
}

-(id) a4aAccessoryDidAppearObserver {
	%orig;
	NSLog(@"-(id) a4aAccessoryDidAppearObserver");
}

-(id) a4aAccessoryDidDisappearObserver {
	%orig;
	NSLog(@"-(id) a4aAccessoryDidDisappearObserver");
}

-(void) cancelExternalAccessorySessionSetup {
	%orig;
	NSLog(@"-(void) cancelExternalAccessorySessionSetup");
}

-(void) setExternalAccessorySession:(id) {
	%orig;
	NSLog(@"-(void) setExternalAccessorySession:(id)");
}

-(void) setA4AProtocol:(id) {
	%orig;
	NSLog(@"-(void) setA4AProtocol:(id)");
}

-(bool) hasActiveExternalAccesorrySession {
	%orig;
	NSLog(@"-(bool) hasActiveExternalAccesorrySession");
}

-(id) setupEASessionStartupTimer {
	%orig;
	NSLog(@"-(id) setupEASessionStartupTimer");
}

-(double) setupEASessionStartupDelay {
	%orig;
	NSLog(@"-(double) setupEASessionStartupDelay");
}

-(void) setupExternalAccessorySession:(id) afterDelay:(double) {
	%orig;
	NSLog(@"-(void) setupExternalAccessorySession:(id) afterDelay:(double)");
}

-(void) setSetupEASessionStartupTimer:(id) {
	%orig;
	NSLog(@"-(void) setSetupEASessionStartupTimer:(id)");
}

-(id) A4AProtocol {
	%orig;
	NSLog(@"-(id) A4AProtocol");
}

-(id) externalAccessorySession {
	%orig;
	NSLog(@"-(id) externalAccessorySession");
}

-(void) handleSetupEASessionStartupTimer:(id) {
	%orig;
	NSLog(@"-(void) handleSetupEASessionStartupTimer:(id)");
}

-(void) setupExternalAccessorySession:(id) {
	%orig;
	NSLog(@"-(void) setupExternalAccessorySession:(id)");
}

-(bool) systemVersionRequiresEASessionStartupDelay:(id) {
	%orig;
	NSLog(@"-(bool) systemVersionRequiresEASessionStartupDelay:(id)");
}

-(id) initWithA4AProtocol:(id) {
	%orig;
	NSLog(@"-(id) initWithA4AProtocol:(id)");
}

-(void) resetWithA4AProtocol:(id) {
	%orig;
	NSLog(@"-(void) resetWithA4AProtocol:(id)");
}

-(void) setSetupEASessionStartupDelay:(double) {
	%orig;
	NSLog(@"-(void) setSetupEASessionStartupDelay:(double)");
}

-(id) backgroundTask {
	%orig;
	NSLog(@"-(id) backgroundTask");
}

-(void) setBackgroundTask:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundTask:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook IDExternalAccessorySelector

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) registerExternalAccessoryNotificationObservers {
	%orig;
	NSLog(@"-(void) registerExternalAccessoryNotificationObservers");
}

-(void) selectAccessory:(id) {
	%orig;
	NSLog(@"-(void) selectAccessory:(id)");
}

-(id) initWithEAAccessoryManager:(id) {
	%orig;
	NSLog(@"-(id) initWithEAAccessoryManager:(id)");
}

-(void) unregisterExternalAccessoryNotificationObservers {
	%orig;
	NSLog(@"-(void) unregisterExternalAccessoryNotificationObservers");
}

-(id) accessoryDidDisconnectNotificationObserver {
	%orig;
	NSLog(@"-(id) accessoryDidDisconnectNotificationObserver");
}

-(bool) isCurrentExternalAccessory:(id) {
	%orig;
	NSLog(@"-(bool) isCurrentExternalAccessory:(id)");
}

-(void) setExternalAccessory:(id) {
	%orig;
	NSLog(@"-(void) setExternalAccessory:(id)");
}

-(void) notifyAccessoryDidDisappear {
	%orig;
	NSLog(@"-(void) notifyAccessoryDidDisappear");
}

-(void) setAccessoryDidDisconnectNotificationObserver:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryDidDisconnectNotificationObserver:(id)");
}

-(id) accessoryDidConnectNotificationObserver {
	%orig;
	NSLog(@"-(id) accessoryDidConnectNotificationObserver");
}

-(void) setAccessoryDidConnectNotificationObserver:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryDidConnectNotificationObserver:(id)");
}

-(id) externalAccessory {
	%orig;
	NSLog(@"-(id) externalAccessory");
}

-(bool) isValidExternalAccessory:(id) {
	%orig;
	NSLog(@"-(bool) isValidExternalAccessory:(id)");
}

-(id) selectValidExternalAccessory {
	%orig;
	NSLog(@"-(id) selectValidExternalAccessory");
}

-(void) notifyAccessoryDidAppear {
	%orig;
	NSLog(@"-(void) notifyAccessoryDidAppear");
}

-(id) eaAccessoryManager {
	%orig;
	NSLog(@"-(id) eaAccessoryManager");
}

-(bool) isValidExternalAccessory:(id) forProtocol:(id) {
	%orig;
	NSLog(@"-(bool) isValidExternalAccessory:(id) forProtocol:(id)");
}

-(void) setEaAccessoryManager:(id) {
	%orig;
	NSLog(@"-(void) setEaAccessoryManager:(id)");
}

-(id) selectedExternalAccessory {
	%orig;
	NSLog(@"-(id) selectedExternalAccessory");
}

-(id) sessionForSelectedExternalAccessoryWithProtocol:(id) {
	%orig;
	NSLog(@"-(id) sessionForSelectedExternalAccessoryWithProtocol:(id)");
}

-(bool) selectedAccessoryHasMultisessionSupport {
	%orig;
	NSLog(@"-(bool) selectedAccessoryHasMultisessionSupport");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook IDEventObserver

+(id) observerWithKey:(id) target:(id) selector:(SEL) queue:(id) {
	%orig;
	NSLog(@"+(id) observerWithKey:(id) target:(id) selector:(SEL) queue:(id)");
}

-(id) initWithKey:(id) target:(id) selector:(SEL) queue:(id) {
	%orig;
	NSLog(@"-(id) initWithKey:(id) target:(id) selector:(SEL) queue:(id)");
}

-(void) handleEventWithObject:(id) waitUntilDone:(bool) {
	%orig;
	NSLog(@"-(void) handleEventWithObject:(id) waitUntilDone:(bool)");
}

-(void) setEventKey:(id) {
	%orig;
	NSLog(@"-(void) setEventKey:(id)");
}

-(id) eventKey {
	%orig;
	NSLog(@"-(id) eventKey");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setTarget:(id) {
	%orig;
	NSLog(@"-(void) setTarget:(id)");
}

-(void) setSelector:(SEL) {
	%orig;
	NSLog(@"-(void) setSelector:(SEL)");
}

-(id) target {
	%orig;
	NSLog(@"-(id) target");
}

-(SEL) selector {
	%orig;
	NSLog(@"-(SEL) selector");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

-(void) setQueue:(id) {
	%orig;
	NSLog(@"-(void) setQueue:(id)");
}

%end

%hook IDEtchSession

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) authChallengeForCertificate:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) authChallengeForCertificate:(id) error:(id*)");
}

-(bool) loginWithSignedChallenge:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) loginWithSignedChallenge:(id) error:(id*)");
}

-(void) setApplicationManagementDelegate:(id) {
	%orig;
	NSLog(@"-(void) setApplicationManagementDelegate:(id)");
}

-(bool) applicationManagementService:(long long) disposeWithError:(id*) {
	%orig;
	NSLog(@"-(bool) applicationManagementService:(long long) disposeWithError:(id*)");
}

-(void) applicationManagementService:(long long) registerAppId:(id) variantMap:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) applicationManagementService:(long long) registerAppId:(id) variantMap:(id) completionHandler:(id)");
}

-(void) applicationManagementService:(long long) addEventHandlerAppId:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) applicationManagementService:(long long) addEventHandlerAppId:(id) completionHandler:(id)");
}

-(void) applicationManagementService:(long long) removeEventHandlerAppId:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) applicationManagementService:(long long) removeEventHandlerAppId:(id) completionHandler:(id)");
}

-(void) audioService:(long long) requestConnectionOfType:(int) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) audioService:(long long) requestConnectionOfType:(int) completionHandler:(id)");
}

-(void) audioService:(long long) closeConnectionOfType:(int) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) audioService:(long long) closeConnectionOfType:(int) completionHandler:(id)");
}

-(void) audioService:(long long) confirmPlayerState:(int) forConnectionOfType:(int) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) audioService:(long long) confirmPlayerState:(int) forConnectionOfType:(int) completionHandler:(id)");
}

-(void) cdsService:(long long) bindProperty:(id) refreshInterval:(unsigned long long) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) cdsService:(long long) bindProperty:(id) refreshInterval:(unsigned long long) completionHandler:(id)");
}

-(void) cdsService:(long long) unbindProperty:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) cdsService:(long long) unbindProperty:(id) completionHandler:(id)");
}

-(void) cdsService:(long long) requestProperty:(id) requestIdentifier:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) cdsService:(long long) requestProperty:(id) requestIdentifier:(id) completionHandler:(id)");
}

-(void) cdsService:(long long) setProperty:(id) value:(id) requestIdentifier:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) cdsService:(long long) setProperty:(id) value:(id) requestIdentifier:(id) completionHandler:(id)");
}

-(void) handleEvent:(long long) uniqueIdentifier:(id) appIdentifier:(id) applicationManagementServiceEvent:(int) {
	%orig;
	NSLog(@"-(void) handleEvent:(long long) uniqueIdentifier:(id) appIdentifier:(id) applicationManagementServiceEvent:(int)");
}

-(bool) isValidConnectionType:(int) {
	%orig;
	NSLog(@"-(bool) isValidConnectionType:(int)");
}

-(id) invalidValueErrorForParameter:(id) callName:(id) {
	%orig;
	NSLog(@"-(id) invalidValueErrorForParameter:(id) callName:(id)");
}

-(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>) avConnectionTypeWithIDAudioConnectionType:(int) {
	%orig;
	NSLog(@"-(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>) avConnectionTypeWithIDAudioConnectionType:(int)");
}

-(bool) isValidPlayerState:(int) {
	%orig;
	NSLog(@"-(bool) isValidPlayerState:(int)");
}

-(SmartPointer<de_bmw_idrive_BMWRemoting::AVPlayerState>) avPlayerStateWithIDAudioPlayerState:(int) {
	%orig;
	NSLog(@"-(SmartPointer<de_bmw_idrive_BMWRemoting::AVPlayerState>) avPlayerStateWithIDAudioPlayerState:(int)");
}

-(bool) audioService:(long long) confirmPlayerState:(int) forConnectionOfType:(int) error:(id*) {
	%orig;
	NSLog(@"-(bool) audioService:(long long) confirmPlayerState:(int) forConnectionOfType:(int) error:(id*)");
}

-(void) handleConnectionGranted:(long long) connectionType:(int) {
	%orig;
	NSLog(@"-(void) handleConnectionGranted:(long long) connectionType:(int)");
}

-(void) handleConnectionDeactivated:(long long) connectionType:(int) {
	%orig;
	NSLog(@"-(void) handleConnectionDeactivated:(long long) connectionType:(int)");
}

-(void) handleConnectionDenied:(long long) connectionType:(int) {
	%orig;
	NSLog(@"-(void) handleConnectionDenied:(long long) connectionType:(int)");
}

-(void) handleMultimediaButtonEvent:(long long) audioButtonEvent:(int) {
	%orig;
	NSLog(@"-(void) handleMultimediaButtonEvent:(long long) audioButtonEvent:(int)");
}

-(void) handlePlayerStateChanged:(long long) audioConnectionType:(int) audioPlayerState:(int) {
	%orig;
	NSLog(@"-(void) handlePlayerStateChanged:(long long) audioConnectionType:(int) audioPlayerState:(int)");
}

-(bool) updateCertificateRevocationList:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) updateCertificateRevocationList:(id) error:(id*)");
}

-(bool) cdsService:(long long) requestProperty:(id) requestIdentifier:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) cdsService:(long long) requestProperty:(id) requestIdentifier:(id) error:(id*)");
}

-(bool) cdsService:(long long) bindProperty:(id) refreshInterval:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) cdsService:(long long) bindProperty:(id) refreshInterval:(unsigned long long) error:(id*)");
}

-(bool) cdsService:(long long) unbindProperty:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) cdsService:(long long) unbindProperty:(id) error:(id*)");
}

-(bool) cdsService:(long long) setProperty:(id) value:(id) requestIdentifier:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) cdsService:(long long) setProperty:(id) value:(id) requestIdentifier:(id) error:(id*)");
}

-(void) handlePropertyChanged:(long long) uniqueIdentifier:(id) propertyName:(id) propertyValue:(id) {
	%orig;
	NSLog(@"-(void) handlePropertyChanged:(long long) uniqueIdentifier:(id) propertyName:(id) propertyValue:(id)");
}

-(id) stringWithRhmiVersion:(long long) {
	%orig;
	NSLog(@"-(id) stringWithRhmiVersion:(long long)");
}

-(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIVersion>) rhmiVersionWithIDRhmiVersion:(long long) {
	%orig;
	NSLog(@"-(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIVersion>) rhmiVersionWithIDRhmiVersion:(long long)");
}

-(long long) registerHmiServiceWithIdentifier:(id) name:(id) vendor:(id) versionInfo:(id) error:(id*) {
	%orig;
	NSLog(@"-(long long) registerHmiServiceWithIdentifier:(id) name:(id) vendor:(id) versionInfo:(id) error:(id*)");
}

-(void) registerHmiServiceWithIdentifier:(id) name:(id) vendor:(id) versionInfo:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) registerHmiServiceWithIdentifier:(id) name:(id) vendor:(id) versionInfo:(id) completionHandler:(id)");
}

-(void) hmiService:(long long) setHmiResource:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) hmiService:(long long) setHmiResource:(id) completionHandler:(id)");
}

-(void) hmiService:(long long) hmiCapabilitiesWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) hmiService:(long long) hmiCapabilitiesWithCompletionHandler:(id)");
}

-(void) handleActionEvent:(long long) uniqueIdentifier:(id) actionIdentifier:(long long) actionInfo:(id) {
	%orig;
	NSLog(@"-(void) handleActionEvent:(long long) uniqueIdentifier:(id) actionIdentifier:(long long) actionInfo:(id)");
}

-(void) handleHmiEvent:(long long) uniqueIdentifier:(id) componentIdentifier:(long long) eventIdentifier:(long long) eventInfo:(id) {
	%orig;
	NSLog(@"-(void) handleHmiEvent:(long long) uniqueIdentifier:(id) componentIdentifier:(long long) eventIdentifier:(long long) eventInfo:(id)");
}

-(void) handlePiaEvent:(long long) piaEvent:(int) payload:(id) {
	%orig;
	NSLog(@"-(void) handlePiaEvent:(long long) piaEvent:(int) payload:(id)");
}

-(void) setupEtchRuntime {
	%orig;
	NSLog(@"-(void) setupEtchRuntime");
}

-(void) teardownEtchRuntime {
	%orig;
	NSLog(@"-(void) teardownEtchRuntime");
}

-(bool) createRemoteServerWithUrl:(id) {
	%orig;
	NSLog(@"-(bool) createRemoteServerWithUrl:(id)");
}

-(bool) startRemoteServer {
	%orig;
	NSLog(@"-(bool) startRemoteServer");
}

-(bool) stopRemoteServer {
	%orig;
	NSLog(@"-(bool) stopRemoteServer");
}

-(void) destroyRemoteServer {
	%orig;
	NSLog(@"-(void) destroyRemoteServer");
}

-(id) remoteServerAdaptor {
	%orig;
	NSLog(@"-(id) remoteServerAdaptor");
}

-(id) wrongStateErrorForCall:(id) {
	%orig;
	NSLog(@"-(id) wrongStateErrorForCall:(id)");
}

-(id) nilParameterErrorForParameter:(id) callName:(id) {
	%orig;
	NSLog(@"-(id) nilParameterErrorForParameter:(id) callName:(id)");
}

-(id) etchExceptionError:(id) forCall:(id) {
	%orig;
	NSLog(@"-(id) etchExceptionError:(id) forCall:(id)");
}

-(id) stringFromRemotingWrapperState:(int) {
	%orig;
	NSLog(@"-(id) stringFromRemotingWrapperState:(int)");
}

-(void) handleSessionNotStartedForCall:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) handleSessionNotStartedForCall:(id) completionHandler:(id)");
}

-(void) handleNilValueForParameter:(id) callName:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) handleNilValueForParameter:(id) callName:(id) completionHandler:(id)");
}

-(void) processAsyncResultNone:(SmartPointer<EtchAsyncResultNone>) callName:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) processAsyncResultNone:(SmartPointer<EtchAsyncResultNone>) callName:(id) completionHandler:(id)");
}

-(id) hmiDelegate {
	%orig;
	NSLog(@"-(id) hmiDelegate");
}

-(id) audioDelegate {
	%orig;
	NSLog(@"-(id) audioDelegate");
}

-(id) cdsDelegate {
	%orig;
	NSLog(@"-(id) cdsDelegate");
}

-(id) piaDelegate {
	%orig;
	NSLog(@"-(id) piaDelegate");
}

-(id) applicationManagementDelegate {
	%orig;
	NSLog(@"-(id) applicationManagementDelegate");
}

-(void) setRemoteServerAdaptor:(id) {
	%orig;
	NSLog(@"-(void) setRemoteServerAdaptor:(id)");
}

-(bool) hmiService:(long long) startRemoteHmiWitherror:(id*) {
	%orig;
	NSLog(@"-(bool) hmiService:(long long) startRemoteHmiWitherror:(id*)");
}

-(bool) hmiService:(long long) checkAvailabilityOfResource:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) hmiService:(long long) checkAvailabilityOfResource:(id) error:(id*)");
}

-(bool) hmiService:(long long) setHmiResource:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) hmiService:(long long) setHmiResource:(id) error:(id*)");
}

-(void) hmiService:(long long) updateDataModel:(long long) variantData:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) hmiService:(long long) updateDataModel:(long long) variantData:(id) completionHandler:(id)");
}

-(void) hmiService:(long long) updateTable:(long long) tableData:(id) rows:(_NSRange) columns:(_NSRange) totalRows:(unsigned long long) totalColumns:(unsigned long long) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) hmiService:(long long) updateTable:(long long) tableData:(id) rows:(_NSRange) columns:(_NSRange) totalRows:(unsigned long long) totalColumns:(unsigned long long) completionHandler:(id)");
}

-(void) hmiService:(long long) updateProperty:(int) forComponent:(long long) variantMap:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) hmiService:(long long) updateProperty:(int) forComponent:(long long) variantMap:(id) completionHandler:(id)");
}

-(void) hmiService:(long long) triggerHmiEvent:(unsigned long long) parameterMap:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) hmiService:(long long) triggerHmiEvent:(unsigned long long) parameterMap:(id) completionHandler:(id)");
}

-(bool) hmiService:(long long) confirmActionEvent:(long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) hmiService:(long long) confirmActionEvent:(long long) error:(id*)");
}

-(bool) piaService:(long long) requestWithData:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) piaService:(long long) requestWithData:(id) error:(id*)");
}

-(bool) piaService:(long long) importData:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) piaService:(long long) importData:(id) error:(id*)");
}

-(bool) piaService:(long long) exportResult:(bool) error:(id*) {
	%orig;
	NSLog(@"-(bool) piaService:(long long) exportResult:(bool) error:(id*)");
}

-(bool) piaService:(long long) disposeWithError:(id*) {
	%orig;
	NSLog(@"-(bool) piaService:(long long) disposeWithError:(id*)");
}

-(long long) registerAudioServiceWithApplicationIdentifier:(id) auxiliaryInput:(unsigned short) error:(id*) {
	%orig;
	NSLog(@"-(long long) registerAudioServiceWithApplicationIdentifier:(id) auxiliaryInput:(unsigned short) error:(id*)");
}

-(void) setAudioDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAudioDelegate:(id)");
}

-(long long) registerHmiServiceWithIdentifier:(id) name:(id) vendor:(id) versionInfo:(id) rhmiVersion:(long long) error:(id*) {
	%orig;
	NSLog(@"-(long long) registerHmiServiceWithIdentifier:(id) name:(id) vendor:(id) versionInfo:(id) rhmiVersion:(long long) error:(id*)");
}

-(bool) hmiService:(long long) addActionEventHandlerWithError:(id*) {
	%orig;
	NSLog(@"-(bool) hmiService:(long long) addActionEventHandlerWithError:(id*)");
}

-(bool) hmiService:(long long) addHmiEventHandlerWithError:(id*) {
	%orig;
	NSLog(@"-(bool) hmiService:(long long) addHmiEventHandlerWithError:(id*)");
}

-(id) hmiService:(long long) hmiCapabilitiesWitherror:(id*) {
	%orig;
	NSLog(@"-(id) hmiService:(long long) hmiCapabilitiesWitherror:(id*)");
}

-(void) setHmiDelegate:(id) {
	%orig;
	NSLog(@"-(void) setHmiDelegate:(id)");
}

-(long long) registerCdsServiceWithError:(id*) {
	%orig;
	NSLog(@"-(long long) registerCdsServiceWithError:(id*)");
}

-(void) setCdsDelegate:(id) {
	%orig;
	NSLog(@"-(void) setCdsDelegate:(id)");
}

-(long long) registerPiaServiceWithIdentifier:(id) error:(id*) {
	%orig;
	NSLog(@"-(long long) registerPiaServiceWithIdentifier:(id) error:(id*)");
}

-(void) setPiaDelegate:(id) {
	%orig;
	NSLog(@"-(void) setPiaDelegate:(id)");
}

-(long long) registerApplicationManagementServiceWithIdentifier:(id) error:(id*) {
	%orig;
	NSLog(@"-(long long) registerApplicationManagementServiceWithIdentifier:(id) error:(id*)");
}

-(bool) startSessionWithUrl:(id) {
	%orig;
	NSLog(@"-(bool) startSessionWithUrl:(id)");
}

-(id) systemInfoWithError:(id*) {
	%orig;
	NSLog(@"-(id) systemInfoWithError:(id*)");
}

-(id) cdsVersionInfoWithError:(id*) {
	%orig;
	NSLog(@"-(id) cdsVersionInfoWithError:(id*)");
}

-(id) etchVersionInfoWithError:(id*) {
	%orig;
	NSLog(@"-(id) etchVersionInfoWithError:(id*)");
}

-(void) stopSession {
	%orig;
	NSLog(@"-(void) stopSession");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(int) sessionState {
	%orig;
	NSLog(@"-(int) sessionState");
}

-(void) setSessionState:(int) {
	%orig;
	NSLog(@"-(void) setSessionState:(int)");
}

-(id) sessionIdentifier {
	%orig;
	NSLog(@"-(id) sessionIdentifier");
}

-(id) delegateQueue {
	%orig;
	NSLog(@"-(id) delegateQueue");
}

-(void) setDelegateQueue:(id) {
	%orig;
	NSLog(@"-(void) setDelegateQueue:(id)");
}

%end

%hook IDDefaultAccessoryMonitor

-(id) vehicleInfo {
	%orig;
	NSLog(@"-(id) vehicleInfo");
}

-(id) cdsVersion {
	%orig;
	NSLog(@"-(id) cdsVersion");
}

-(id) etchVersion {
	%orig;
	NSLog(@"-(id) etchVersion");
}

-(id) messagingService {
	%orig;
	NSLog(@"-(id) messagingService");
}

-(void) startMonitoringWithManifest:(id) {
	%orig;
	NSLog(@"-(void) startMonitoringWithManifest:(id)");
}

-(id) communicationURL {
	%orig;
	NSLog(@"-(id) communicationURL");
}

-(id) proxyInfo {
	%orig;
	NSLog(@"-(id) proxyInfo");
}

-(bool) supportsA4AConnectionInBackground {
	%orig;
	NSLog(@"-(bool) supportsA4AConnectionInBackground");
}

-(bool) supportsA4AMultisession {
	%orig;
	NSLog(@"-(bool) supportsA4AMultisession");
}

-(void) registerStickyApplication:(id) {
	%orig;
	NSLog(@"-(void) registerStickyApplication:(id)");
}

-(void) registerNonStickyApplication:(id) {
	%orig;
	NSLog(@"-(void) registerNonStickyApplication:(id)");
}

-(void) deregisterApplication:(id) {
	%orig;
	NSLog(@"-(void) deregisterApplication:(id)");
}

-(id) stateCondition {
	%orig;
	NSLog(@"-(id) stateCondition");
}

-(void) bclManagerDidConnect:(id) {
	%orig;
	NSLog(@"-(void) bclManagerDidConnect:(id)");
}

-(id) selectedProtocol {
	%orig;
	NSLog(@"-(id) selectedProtocol");
}

-(void) bclManager:(id) didFailToConnectWithError:(id) {
	%orig;
	NSLog(@"-(void) bclManager:(id) didFailToConnectWithError:(id)");
}

-(void) bclManagerDidDisconnnect:(id) {
	%orig;
	NSLog(@"-(void) bclManagerDidDisconnnect:(id)");
}

-(void) setStateCondition:(id) {
	%orig;
	NSLog(@"-(void) setStateCondition:(id)");
}

-(id) initWithCurrentSystemVersion:(id) legacyCommunicationProtocolSupport:(bool) allRequiredProtocolsForMultisessionSupport:(bool) uiApplication:(id) externalAccessorySelector:(id) protocolSelector:(id) bclManager:(id) {
	%orig;
	NSLog(@"-(id) initWithCurrentSystemVersion:(id) legacyCommunicationProtocolSupport:(bool) allRequiredProtocolsForMultisessionSupport:(bool) uiApplication:(id) externalAccessorySelector:(id) protocolSelector:(id) bclManager:(id)");
}

-(bool) systemHasRequiredMinimumVersionForA4A:(id) {
	%orig;
	NSLog(@"-(bool) systemHasRequiredMinimumVersionForA4A:(id)");
}

-(id) vehicleInfoRetriever {
	%orig;
	NSLog(@"-(id) vehicleInfoRetriever");
}

-(id) bclManager {
	%orig;
	NSLog(@"-(id) bclManager");
}

-(id) currentSystemVersion {
	%orig;
	NSLog(@"-(id) currentSystemVersion");
}

-(bool) systemHasRequiredMinimumVersionForBackgrounding:(id) {
	%orig;
	NSLog(@"-(bool) systemHasRequiredMinimumVersionForBackgrounding:(id)");
}

-(bool) isAllowedToConnectWhileUIApplicationNotActive {
	%orig;
	NSLog(@"-(bool) isAllowedToConnectWhileUIApplicationNotActive");
}

-(void) handleAccessoryDidAppear:(id) {
	%orig;
	NSLog(@"-(void) handleAccessoryDidAppear:(id)");
}

-(void) handleAccessoryDidDisappear:(id) {
	%orig;
	NSLog(@"-(void) handleAccessoryDidDisappear:(id)");
}

-(void) handleDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) handleDidBecomeActive:(id)");
}

-(void) handleDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) handleDidEnterBackground:(id)");
}

-(id) protocolSelector {
	%orig;
	NSLog(@"-(id) protocolSelector");
}

-(void) startProtocolSelector {
	%orig;
	NSLog(@"-(void) startProtocolSelector");
}

-(id) stringFromIDAccessoryMonitorState:(unsigned long long) {
	%orig;
	NSLog(@"-(id) stringFromIDAccessoryMonitorState:(unsigned long long)");
}

-(void) setSelectedProtocol:(id) {
	%orig;
	NSLog(@"-(void) setSelectedProtocol:(id)");
}

-(void) setClaimedProtocol:(id) {
	%orig;
	NSLog(@"-(void) setClaimedProtocol:(id)");
}

-(void) stopBclManager {
	%orig;
	NSLog(@"-(void) stopBclManager");
}

-(void) stopProtocolSelector {
	%orig;
	NSLog(@"-(void) stopProtocolSelector");
}

-(void) setVehicleInfoRetriever:(id) {
	%orig;
	NSLog(@"-(void) setVehicleInfoRetriever:(id)");
}

-(id) legacySwitcher {
	%orig;
	NSLog(@"-(id) legacySwitcher");
}

-(void) setLegacySwitcher:(id) {
	%orig;
	NSLog(@"-(void) setLegacySwitcher:(id)");
}

-(id) appSwitcher {
	%orig;
	NSLog(@"-(id) appSwitcher");
}

-(void) setAppSwitcher:(id) {
	%orig;
	NSLog(@"-(void) setAppSwitcher:(id)");
}

-(void) notifyAccessoryDidDisconnect {
	%orig;
	NSLog(@"-(void) notifyAccessoryDidDisconnect");
}

-(void) setHasPermissionToConnect:(bool) {
	%orig;
	NSLog(@"-(void) setHasPermissionToConnect:(bool)");
}

-(void) notifyAccessoryDidConnect {
	%orig;
	NSLog(@"-(void) notifyAccessoryDidConnect");
}

-(bool) shouldConnectLegacyFeatureSwitcher {
	%orig;
	NSLog(@"-(bool) shouldConnectLegacyFeatureSwitcher");
}

-(bool) shouldConnectAppSwitcher {
	%orig;
	NSLog(@"-(bool) shouldConnectAppSwitcher");
}

-(id) uiApplication {
	%orig;
	NSLog(@"-(id) uiApplication");
}

-(bool) hasPermissionToConnect {
	%orig;
	NSLog(@"-(bool) hasPermissionToConnect");
}

-(bool) systemHasRequiredMinimumVersionForApplaunch:(id) {
	%orig;
	NSLog(@"-(bool) systemHasRequiredMinimumVersionForApplaunch:(id)");
}

-(bool) allRequiredProtocolsForMultisessionSupport {
	%orig;
	NSLog(@"-(bool) allRequiredProtocolsForMultisessionSupport");
}

-(void) protocolSelector:(id) didSelectProtocol:(id) {
	%orig;
	NSLog(@"-(void) protocolSelector:(id) didSelectProtocol:(id)");
}

-(void) protocolSelector:(id) willSelectProtocol:(id) {
	%orig;
	NSLog(@"-(void) protocolSelector:(id) willSelectProtocol:(id)");
}

-(void) protocolSelectorDidFailToSelectProtocol:(id) {
	%orig;
	NSLog(@"-(void) protocolSelectorDidFailToSelectProtocol:(id)");
}

-(void) setProtocolSelector:(id) {
	%orig;
	NSLog(@"-(void) setProtocolSelector:(id)");
}

-(id) claimedProtocol {
	%orig;
	NSLog(@"-(id) claimedProtocol");
}

-(void) setBclManager:(id) {
	%orig;
	NSLog(@"-(void) setBclManager:(id)");
}

-(void) setCurrentSystemVersion:(id) {
	%orig;
	NSLog(@"-(void) setCurrentSystemVersion:(id)");
}

-(void) setUiApplication:(id) {
	%orig;
	NSLog(@"-(void) setUiApplication:(id)");
}

-(void) setExternalAccessorySelector:(id) {
	%orig;
	NSLog(@"-(void) setExternalAccessorySelector:(id)");
}

-(void) setMessagingService:(id) {
	%orig;
	NSLog(@"-(void) setMessagingService:(id)");
}

-(void) setAllRequiredProtocolsForMultisessionSupport:(bool) {
	%orig;
	NSLog(@"-(void) setAllRequiredProtocolsForMultisessionSupport:(bool)");
}

-(id) externalAccessorySelector {
	%orig;
	NSLog(@"-(id) externalAccessorySelector");
}

-(void) vehicleinformationRetriever:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) vehicleinformationRetriever:(id) didFailWithError:(id)");
}

-(void) vehicleinformationRetrieverDidRetrieveVehicleInformation:(id) {
	%orig;
	NSLog(@"-(void) vehicleinformationRetrieverDidRetrieveVehicleInformation:(id)");
}

-(void) setSyncService:(id) {
	%orig;
	NSLog(@"-(void) setSyncService:(id)");
}

-(id) syncService {
	%orig;
	NSLog(@"-(id) syncService");
}

-(void) stopMonitoring {
	%orig;
	NSLog(@"-(void) stopMonitoring");
}

-(id) manifest {
	%orig;
	NSLog(@"-(id) manifest");
}

-(void) setManifest:(id) {
	%orig;
	NSLog(@"-(void) setManifest:(id)");
}

-(void) handleResponse:(id) {
	%orig;
	NSLog(@"-(void) handleResponse:(id)");
}

-(void) startMonitoring {
	%orig;
	NSLog(@"-(void) startMonitoring");
}

-(void) launchApplication:(id) {
	%orig;
	NSLog(@"-(void) launchApplication:(id)");
}

-(void) handleMessage:(id) {
	%orig;
	NSLog(@"-(void) handleMessage:(id)");
}

-(id) backgroundTask {
	%orig;
	NSLog(@"-(id) backgroundTask");
}

-(void) setBackgroundTask:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundTask:(id)");
}

-(void) handleNotification:(id) {
	%orig;
	NSLog(@"-(void) handleNotification:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) handleRequest:(id) {
	%orig;
	NSLog(@"-(void) handleRequest:(id)");
}

%end

%hook IDConnectionMultiplexer

-(void) monitor:(id) didCreatePacket:(id) {
	%orig;
	NSLog(@"-(void) monitor:(id) didCreatePacket:(id)");
}

-(void) monitor:(id) didEncounterError:(id) {
	%orig;
	NSLog(@"-(void) monitor:(id) didEncounterError:(id)");
}

-(id) proxyInfo {
	%orig;
	NSLog(@"-(id) proxyInfo");
}

-(void) setProxyInfo:(id) {
	%orig;
	NSLog(@"-(void) setProxyInfo:(id)");
}

-(id) stateCondition {
	%orig;
	NSLog(@"-(id) stateCondition");
}

-(id) listeningPort {
	%orig;
	NSLog(@"-(id) listeningPort");
}

-(bool) startWithInputStream:(id) outputStream:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) startWithInputStream:(id) outputStream:(id) error:(id*)");
}

-(void) setStateCondition:(id) {
	%orig;
	NSLog(@"-(void) setStateCondition:(id)");
}

-(void) closeListeningSocket {
	%orig;
	NSLog(@"-(void) closeListeningSocket");
}

-(id) tcpConnectionsLock {
	%orig;
	NSLog(@"-(id) tcpConnectionsLock");
}

-(id) tcpConnections {
	%orig;
	NSLog(@"-(id) tcpConnections");
}

-(id) a4aConnection {
	%orig;
	NSLog(@"-(id) a4aConnection");
}

-(void) closeA4AConnection {
	%orig;
	NSLog(@"-(void) closeA4AConnection");
}

-(void) setA4aConnection:(id) {
	%orig;
	NSLog(@"-(void) setA4aConnection:(id)");
}

-(void) closeTcpConnections {
	%orig;
	NSLog(@"-(void) closeTcpConnections");
}

-(id) socketAddressDataWithPort:(unsigned long long) {
	%orig;
	NSLog(@"-(id) socketAddressDataWithPort:(unsigned long long)");
}

-(__CFSocket*) createListenerSocket:(unsigned long long) {
	%orig;
	NSLog(@"-(__CFSocket*) createListenerSocket:(unsigned long long)");
}

-(void) connection:(id) errorEncountered:(id) withClosePacket:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) errorEncountered:(id) withClosePacket:(id)");
}

-(void) setRemoteProxyBufferSize:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setRemoteProxyBufferSize:(unsigned long long)");
}

-(void) setMaxRemoteProxyBufferSize:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaxRemoteProxyBufferSize:(unsigned long long)");
}

-(unsigned long long) protocolVersionForProxy:(id) {
	%orig;
	NSLog(@"-(unsigned long long) protocolVersionForProxy:(id)");
}

-(bool) startListeningSocket:(id*) {
	%orig;
	NSLog(@"-(bool) startListeningSocket:(id*)");
}

-(void) forwardPacketToMatchingTcpConnection:(id) {
	%orig;
	NSLog(@"-(void) forwardPacketToMatchingTcpConnection:(id)");
}

-(void) increaseRemoteProxyBufferSizeForPacketAndResumeWriting:(id) {
	%orig;
	NSLog(@"-(void) increaseRemoteProxyBufferSizeForPacketAndResumeWriting:(id)");
}

-(unsigned long long) remoteProxyBufferSize {
	%orig;
	NSLog(@"-(unsigned long long) remoteProxyBufferSize");
}

-(void) decreaseRemoteProxyBufferSize:(unsigned long long) {
	%orig;
	NSLog(@"-(void) decreaseRemoteProxyBufferSize:(unsigned long long)");
}

-(void) increaseRemoteProxyBufferSizeForPacket:(id) {
	%orig;
	NSLog(@"-(void) increaseRemoteProxyBufferSizeForPacket:(id)");
}

-(void) increaseRemoteProxyBufferSize:(unsigned long long) {
	%orig;
	NSLog(@"-(void) increaseRemoteProxyBufferSize:(unsigned long long)");
}

-(unsigned long long) maxRemoteProxyBufferSize {
	%orig;
	NSLog(@"-(unsigned long long) maxRemoteProxyBufferSize");
}

-(void) connection:(id) didCreatePackage:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didCreatePackage:(id)");
}

-(void) connection:(id) errorEncountered:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) errorEncountered:(id)");
}

-(void) connection:(id) didReceivePacket:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceivePacket:(id)");
}

-(void) connection:(id) errorOccured:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) errorOccured:(id)");
}

-(void) connectionDidCloseUnderlyingStreams:(id) {
	%orig;
	NSLog(@"-(void) connectionDidCloseUnderlyingStreams:(id)");
}

-(void) connection:(id) willSendBytes:(unsigned long long) {
	%orig;
	NSLog(@"-(void) connection:(id) willSendBytes:(unsigned long long)");
}

-(void) connection:(id) didSendBytes:(unsigned long long) {
	%orig;
	NSLog(@"-(void) connection:(id) didSendBytes:(unsigned long long)");
}

-(void) decreaseRemoteProxyBufferSizeForPacket:(id) {
	%orig;
	NSLog(@"-(void) decreaseRemoteProxyBufferSizeForPacket:(id)");
}

-(void) setTcpConnectionsLock:(id) {
	%orig;
	NSLog(@"-(void) setTcpConnectionsLock:(id)");
}

-(id) connectionMonitor {
	%orig;
	NSLog(@"-(id) connectionMonitor");
}

-(void) setConnectionMonitor:(id) {
	%orig;
	NSLog(@"-(void) setConnectionMonitor:(id)");
}

-(void) enqueuePacket:(id) {
	%orig;
	NSLog(@"-(void) enqueuePacket:(id)");
}

-(void) setListeningPort:(id) {
	%orig;
	NSLog(@"-(void) setListeningPort:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

%end

%hook IDCDSClient

-(id) manifestForApplication:(id) {
	%orig;
	NSLog(@"-(id) manifestForApplication:(id)");
}

-(void) handleUpdateVIN:(id) {
	%orig;
	NSLog(@"-(void) handleUpdateVIN:(id)");
}

-(void) setVIN:(id) {
	%orig;
	NSLog(@"-(void) setVIN:(id)");
}

-(id) VIN {
	%orig;
	NSLog(@"-(id) VIN");
}

-(void) connnect {
	%orig;
	NSLog(@"-(void) connnect");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

-(id) application {
	%orig;
	NSLog(@"-(id) application");
}

-(void) setApplication:(id) {
	%orig;
	NSLog(@"-(void) setApplication:(id)");
}

%end

%hook IDBclManager

-(id) communicationURL {
	%orig;
	NSLog(@"-(id) communicationURL");
}

-(id) proxyInfo {
	%orig;
	NSLog(@"-(id) proxyInfo");
}

-(id) stateCondition {
	%orig;
	NSLog(@"-(id) stateCondition");
}

-(id) connectionCondition {
	%orig;
	NSLog(@"-(id) connectionCondition");
}

-(id) stringFromIDBclManagerState:(unsigned long long) {
	%orig;
	NSLog(@"-(id) stringFromIDBclManagerState:(unsigned long long)");
}

-(id) stringFromIDBclConnectionToAccessoryState:(unsigned long long) {
	%orig;
	NSLog(@"-(id) stringFromIDBclConnectionToAccessoryState:(unsigned long long)");
}

-(void) setStreamProvider:(id) {
	%orig;
	NSLog(@"-(void) setStreamProvider:(id)");
}

-(id) streamProvider {
	%orig;
	NSLog(@"-(id) streamProvider");
}

-(bool) shouldEnqueProtocolInUseNotification {
	%orig;
	NSLog(@"-(bool) shouldEnqueProtocolInUseNotification");
}

-(void) enqueueProtocolInUseNotification {
	%orig;
	NSLog(@"-(void) enqueueProtocolInUseNotification");
}

-(bool) shouldRegisterForiAPAppLaunch {
	%orig;
	NSLog(@"-(bool) shouldRegisterForiAPAppLaunch");
}

-(id) selectedProtocol {
	%orig;
	NSLog(@"-(id) selectedProtocol");
}

-(void) enqueueRegisterForApplicationLaunch:(id) registerPacketType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) enqueueRegisterForApplicationLaunch:(id) registerPacketType:(unsigned long long)");
}

-(void) processBroadcast:(id) {
	%orig;
	NSLog(@"-(void) processBroadcast:(id)");
}

-(void) forwardBroadcast:(id) {
	%orig;
	NSLog(@"-(void) forwardBroadcast:(id)");
}

-(void) enqueueBroadcastProtocolResponseForRequest:(id) {
	%orig;
	NSLog(@"-(void) enqueueBroadcastProtocolResponseForRequest:(id)");
}

-(id) broadcastReceiver {
	%orig;
	NSLog(@"-(id) broadcastReceiver");
}

-(void) sendBroadcast:(id) {
	%orig;
	NSLog(@"-(void) sendBroadcast:(id)");
}

-(float) handshakeTimeout {
	%orig;
	NSLog(@"-(float) handshakeTimeout");
}

-(void) waitForHandshakeWithTimeout:(float) {
	%orig;
	NSLog(@"-(void) waitForHandshakeWithTimeout:(float)");
}

-(void) stopMultiplexer {
	%orig;
	NSLog(@"-(void) stopMultiplexer");
}

-(bool) connectionSupportsMultisession {
	%orig;
	NSLog(@"-(bool) connectionSupportsMultisession");
}

-(void) connectionMultiplexer:(id) errorOccurred:(id) {
	%orig;
	NSLog(@"-(void) connectionMultiplexer:(id) errorOccurred:(id)");
}

-(void) connectionMultiplexerDidFinishHandshake:(id) {
	%orig;
	NSLog(@"-(void) connectionMultiplexerDidFinishHandshake:(id)");
}

-(void) connectionMultiplexerDidReceiveEndOfStreamFromA4AConnection:(id) {
	%orig;
	NSLog(@"-(void) connectionMultiplexerDidReceiveEndOfStreamFromA4AConnection:(id)");
}

-(void) connectionMultiplexerDidReceiveHangup:(id) {
	%orig;
	NSLog(@"-(void) connectionMultiplexerDidReceiveHangup:(id)");
}

-(void) connectionMultiplexer:(id) didReceiveBroadcast:(id) {
	%orig;
	NSLog(@"-(void) connectionMultiplexer:(id) didReceiveBroadcast:(id)");
}

-(void) startWithStreamProvider:(id) {
	%orig;
	NSLog(@"-(void) startWithStreamProvider:(id)");
}

-(void) enqueueRequestApplicationLaunch:(id) {
	%orig;
	NSLog(@"-(void) enqueueRequestApplicationLaunch:(id)");
}

-(void) setBroadcastReceiver:(id) {
	%orig;
	NSLog(@"-(void) setBroadcastReceiver:(id)");
}

-(void) setStateCondition:(id) {
	%orig;
	NSLog(@"-(void) setStateCondition:(id)");
}

-(void) setConnectionCondition:(id) {
	%orig;
	NSLog(@"-(void) setConnectionCondition:(id)");
}

-(void) setHandshakeTimeout:(float) {
	%orig;
	NSLog(@"-(void) setHandshakeTimeout:(float)");
}

-(void) streamProvider:(id) didFailToStartWithError:(id) {
	%orig;
	NSLog(@"-(void) streamProvider:(id) didFailToStartWithError:(id)");
}

-(void) streamProvider:(id) didFailToResolveStreamsWithError:(id) {
	%orig;
	NSLog(@"-(void) streamProvider:(id) didFailToResolveStreamsWithError:(id)");
}

-(void) streamProvider:(id) didResolveInputStream:(id) outputStream:(id) {
	%orig;
	NSLog(@"-(void) streamProvider:(id) didResolveInputStream:(id) outputStream:(id)");
}

-(void) streamProviderWillDiscardStreams:(id) {
	%orig;
	NSLog(@"-(void) streamProviderWillDiscardStreams:(id)");
}

-(void) setMultiplexer:(id) {
	%orig;
	NSLog(@"-(void) setMultiplexer:(id)");
}

-(id) multiplexer {
	%orig;
	NSLog(@"-(id) multiplexer");
}

-(bool) isConnected {
	%orig;
	NSLog(@"-(bool) isConnected");
}

-(bool) isStarted {
	%orig;
	NSLog(@"-(bool) isStarted");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

%end

%hook IDBackgroundTask

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) initWithName:(id) expirationHandler:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) expirationHandler:(id)");
}

-(void) endBackgroundTaskWithIdentifier:(unsigned long long) {
	%orig;
	NSLog(@"-(void) endBackgroundTaskWithIdentifier:(unsigned long long)");
}

-(id) expirationHandler {
	%orig;
	NSLog(@"-(id) expirationHandler");
}

-(void) setExpirationHandler:(id) {
	%orig;
	NSLog(@"-(void) setExpirationHandler:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(bool) begin {
	%orig;
	NSLog(@"-(bool) begin");
}

-(void) end {
	%orig;
	NSLog(@"-(void) end");
}

-(id) initWithName:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id)");
}

-(void) setBackgroundTaskIdentifier:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBackgroundTaskIdentifier:(unsigned long long)");
}

-(unsigned long long) backgroundTaskIdentifier {
	%orig;
	NSLog(@"-(unsigned long long) backgroundTaskIdentifier");
}

%end

%hook IDService

-(id) initWithEtchSession:(id) handle:(long long) {
	%orig;
	NSLog(@"-(id) initWithEtchSession:(id) handle:(long long)");
}

-(id) etchSession {
	%orig;
	NSLog(@"-(id) etchSession");
}

-(long long) handle {
	%orig;
	NSLog(@"-(long long) handle");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

-(void) setQueue:(id) {
	%orig;
	NSLog(@"-(void) setQueue:(id)");
}

%end

%hook IDPiaService

-(bool) disposeWithError:(id*) {
	%orig;
	NSLog(@"-(bool) disposeWithError:(id*)");
}

-(id) initWithEtchSession:(id) handle:(long long) {
	%orig;
	NSLog(@"-(id) initWithEtchSession:(id) handle:(long long)");
}

-(bool) requestWithData:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) requestWithData:(id) error:(id*)");
}

-(int) piaServiceState {
	%orig;
	NSLog(@"-(int) piaServiceState");
}

-(bool) exportWasSuccessful:(bool) error:(id*) {
	%orig;
	NSLog(@"-(bool) exportWasSuccessful:(bool) error:(id*)");
}

-(void) setPiaServiceState:(int) {
	%orig;
	NSLog(@"-(void) setPiaServiceState:(int)");
}

-(int) contentTypeForInputRequestData:(id) {
	%orig;
	NSLog(@"-(int) contentTypeForInputRequestData:(id)");
}

-(int) requestReturnCodeForRequestReturnData:(id) {
	%orig;
	NSLog(@"-(int) requestReturnCodeForRequestReturnData:(id)");
}

-(void) session:(id) piaService:(long long) handlePiaEvent:(int) payload:(id) {
	%orig;
	NSLog(@"-(void) session:(id) piaService:(long long) handlePiaEvent:(int) payload:(id)");
}

-(bool) requestWithType:(int) error:(id*) {
	%orig;
	NSLog(@"-(bool) requestWithType:(int) error:(id*)");
}

-(bool) import:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) import:(id) error:(id*)");
}

-(bool) exportWasSuccessfulConfirmationWithError:(id*) {
	%orig;
	NSLog(@"-(bool) exportWasSuccessfulConfirmationWithError:(id*)");
}

-(bool) exportFailedConfirmationWithError:(id*) {
	%orig;
	NSLog(@"-(bool) exportFailedConfirmationWithError:(id*)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook IDHmiService

-(void) setDataModel:(long long) variantData:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) setDataModel:(long long) variantData:(id) completionBlock:(id)");
}

-(void) setProperty:(int) forComponent:(long long) variantMap:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) setProperty:(int) forComponent:(long long) variantMap:(id) completionBlock:(id)");
}

-(void) setComponent:(long long) visible:(bool) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) setComponent:(long long) visible:(bool) completionBlock:(id)");
}

-(id) hmiCapabilities {
	%orig;
	NSLog(@"-(id) hmiCapabilities");
}

-(id) uploadResourceToHmi:(id) {
	%orig;
	NSLog(@"-(id) uploadResourceToHmi:(id)");
}

-(id) hmiEventObservers {
	%orig;
	NSLog(@"-(id) hmiEventObservers");
}

-(id) actionEventObservers {
	%orig;
	NSLog(@"-(id) actionEventObservers");
}

-(void) setListModel:(long long) tableData:(id) fromRow:(unsigned long long) rows:(unsigned long long) fromColumn:(unsigned long long) columns:(unsigned long long) totalRows:(unsigned long long) totalColumns:(unsigned long long) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) setListModel:(long long) tableData:(id) fromRow:(unsigned long long) rows:(unsigned long long) fromColumn:(unsigned long long) columns:(unsigned long long) totalRows:(unsigned long long) totalColumns:(unsigned long long) completionBlock:(id)");
}

-(void) triggerHmiEvent:(unsigned long long) parameterMap:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) triggerHmiEvent:(unsigned long long) parameterMap:(id) completionBlock:(id)");
}

-(void) session:(id) hmiService:(long long) handleActionEvent:(unsigned long long) info:(id) {
	%orig;
	NSLog(@"-(void) session:(id) hmiService:(long long) handleActionEvent:(unsigned long long) info:(id)");
}

-(void) session:(id) hmiService:(long long) handleHmiEvent:(unsigned long long) component:(unsigned long long) info:(id) {
	%orig;
	NSLog(@"-(void) session:(id) hmiService:(long long) handleHmiEvent:(unsigned long long) component:(unsigned long long) info:(id)");
}

-(id) initWithEtchSession:(id) handle:(long long) hmiCapabilities:(id) {
	%orig;
	NSLog(@"-(id) initWithEtchSession:(id) handle:(long long) hmiCapabilities:(id)");
}

-(bool) startWithHmiDescription:(id) textDatabases:(id) imageDatabases:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) startWithHmiDescription:(id) textDatabases:(id) imageDatabases:(id) error:(id*)");
}

-(void) addHandlerForHmiEvent:(long long) component:(unsigned long long) target:(id) selector:(SEL) {
	%orig;
	NSLog(@"-(void) addHandlerForHmiEvent:(long long) component:(unsigned long long) target:(id) selector:(SEL)");
}

-(void) addHandlerForActionEvent:(unsigned long long) target:(id) selector:(SEL) {
	%orig;
	NSLog(@"-(void) addHandlerForActionEvent:(unsigned long long) target:(id) selector:(SEL)");
}

-(void) removeAllHmiEventHandlersForTarget:(id) {
	%orig;
	NSLog(@"-(void) removeAllHmiEventHandlersForTarget:(id)");
}

-(void) removeHandlerForHmiEvent:(long long) component:(unsigned long long) target:(id) selector:(SEL) {
	%orig;
	NSLog(@"-(void) removeHandlerForHmiEvent:(long long) component:(unsigned long long) target:(id) selector:(SEL)");
}

-(void) removeAllActionEventHandlersForTarget:(id) {
	%orig;
	NSLog(@"-(void) removeAllActionEventHandlersForTarget:(id)");
}

-(void) removeHandlerForActionEvent:(unsigned long long) target:(id) selector:(SEL) {
	%orig;
	NSLog(@"-(void) removeHandlerForActionEvent:(unsigned long long) target:(id) selector:(SEL)");
}

-(void) setListModel:(long long) tableData:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) setListModel:(long long) tableData:(id) completionBlock:(id)");
}

-(void) setListModel:(long long) tableData:(id) fromRow:(unsigned long long) rows:(unsigned long long) fromColumn:(unsigned long long) columns:(unsigned long long) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) setListModel:(long long) tableData:(id) fromRow:(unsigned long long) rows:(unsigned long long) fromColumn:(unsigned long long) columns:(unsigned long long) completionBlock:(id)");
}

-(void) triggerHmiEvent:(unsigned long long) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) triggerHmiEvent:(unsigned long long) completionBlock:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDCdsService

-(void) bindProperty:(id) target:(id) selector:(SEL) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) bindProperty:(id) target:(id) selector:(SEL) completionBlock:(id)");
}

-(void) bindProperty:(id) interval:(double) target:(id) selector:(SEL) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) bindProperty:(id) interval:(double) target:(id) selector:(SEL) completionBlock:(id)");
}

-(id) propertyChangedEventObservers {
	%orig;
	NSLog(@"-(id) propertyChangedEventObservers");
}

-(void) asyncGetProperty:(id) requestIdentifier:(id) target:(id) selector:(SEL) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) asyncGetProperty:(id) requestIdentifier:(id) target:(id) selector:(SEL) completionBlock:(id)");
}

-(id) propertyAsyncGetObservers {
	%orig;
	NSLog(@"-(id) propertyAsyncGetObservers");
}

-(void) setProperty:(id) value:(id) requestIdentifier:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) setProperty:(id) value:(id) requestIdentifier:(id) completionBlock:(id)");
}

-(void) session:(id) cdsService:(long long) receivedProperty:(id) value:(id) requestIdentifier:(id) {
	%orig;
	NSLog(@"-(void) session:(id) cdsService:(long long) receivedProperty:(id) value:(id) requestIdentifier:(id)");
}

-(void) session:(id) cdsService:(long long) handlePropertyChanged:(id) value:(id) {
	%orig;
	NSLog(@"-(void) session:(id) cdsService:(long long) handlePropertyChanged:(id) value:(id)");
}

-(void) unbindProperty:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) unbindProperty:(id) completionBlock:(id)");
}

-(void) asyncGetProperty:(id) target:(id) selector:(SEL) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) asyncGetProperty:(id) target:(id) selector:(SEL) completionBlock:(id)");
}

-(void) setProperty:(id) value:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) setProperty:(id) value:(id) completionBlock:(id)");
}

-(id) initWithEtchSession:(id) handle:(long long) callbackQueue:(id) cdsVersion:(id) {
	%orig;
	NSLog(@"-(id) initWithEtchSession:(id) handle:(long long) callbackQueue:(id) cdsVersion:(id)");
}

-(id) callbackQueue {
	%orig;
	NSLog(@"-(id) callbackQueue");
}

-(void) setVersionInfo:(id) {
	%orig;
	NSLog(@"-(void) setVersionInfo:(id)");
}

-(id) versionInfo {
	%orig;
	NSLog(@"-(id) versionInfo");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDAudioService

-(id) vehicleInfo {
	%orig;
	NSLog(@"-(id) vehicleInfo");
}

-(int) entertainmentAudioState {
	%orig;
	NSLog(@"-(int) entertainmentAudioState");
}

-(void) activateEntertainment {
	%orig;
	NSLog(@"-(void) activateEntertainment");
}

-(void) activateConnectionOfType:(int) {
	%orig;
	NSLog(@"-(void) activateConnectionOfType:(int)");
}

-(id) stringWithAudioConnectionType:(int) {
	%orig;
	NSLog(@"-(id) stringWithAudioConnectionType:(int)");
}

-(void) deactivateConnectionOfType:(int) {
	%orig;
	NSLog(@"-(void) deactivateConnectionOfType:(int)");
}

-(id) stringWithAudioState:(int) {
	%orig;
	NSLog(@"-(id) stringWithAudioState:(int)");
}

-(void) setEntertainmentAudioState:(int) {
	%orig;
	NSLog(@"-(void) setEntertainmentAudioState:(int)");
}

-(void) performSelectorOnDelegate:(SEL) withObject:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) performSelectorOnDelegate:(SEL) withObject:(id) completionHandler:(id)");
}

-(int) interruptAudioState {
	%orig;
	NSLog(@"-(int) interruptAudioState");
}

-(void) setInterruptAudioState:(int) {
	%orig;
	NSLog(@"-(void) setInterruptAudioState:(int)");
}

-(id) stringWithAudioButtonEvent:(int) {
	%orig;
	NSLog(@"-(id) stringWithAudioButtonEvent:(int)");
}

-(id) stringWithAudioPlayerState:(int) {
	%orig;
	NSLog(@"-(id) stringWithAudioPlayerState:(int)");
}

-(void) session:(id) audioService:(long long) handleConnectionGranted:(int) {
	%orig;
	NSLog(@"-(void) session:(id) audioService:(long long) handleConnectionGranted:(int)");
}

-(void) session:(id) audioService:(long long) handleConnectionDeactivated:(int) {
	%orig;
	NSLog(@"-(void) session:(id) audioService:(long long) handleConnectionDeactivated:(int)");
}

-(void) session:(id) audioService:(long long) handleConnectionDenied:(int) {
	%orig;
	NSLog(@"-(void) session:(id) audioService:(long long) handleConnectionDenied:(int)");
}

-(void) session:(id) audioService:(long long) handleMultimediaButtonEvent:(int) {
	%orig;
	NSLog(@"-(void) session:(id) audioService:(long long) handleMultimediaButtonEvent:(int)");
}

-(void) session:(id) audioService:(long long) handleConnection:(int) stateChanged:(int) {
	%orig;
	NSLog(@"-(void) session:(id) audioService:(long long) handleConnection:(int) stateChanged:(int)");
}

-(void) activateInterrupt {
	%orig;
	NSLog(@"-(void) activateInterrupt");
}

-(void) deactivateEntertainment {
	%orig;
	NSLog(@"-(void) deactivateEntertainment");
}

-(void) deactivateInterrupt {
	%orig;
	NSLog(@"-(void) deactivateInterrupt");
}

-(id) initWithEtchSession:(id) handle:(long long) vehicleInfo:(id) {
	%orig;
	NSLog(@"-(id) initWithEtchSession:(id) handle:(long long) vehicleInfo:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook IDApplicationManagementService

-(void) setupApplicationManagementService {
	%orig;
	NSLog(@"-(void) setupApplicationManagementService");
}

-(void) addAppEventHandler {
	%orig;
	NSLog(@"-(void) addAppEventHandler");
}

-(void) removeAppEventHandler {
	%orig;
	NSLog(@"-(void) removeAppEventHandler");
}

-(id) addPreviewStringsToVariantMap:(id) {
	%orig;
	NSLog(@"-(id) addPreviewStringsToVariantMap:(id)");
}

-(void) session:(id) applicationManagementService:(long long) handleApplicationManagementServiceEvent:(int) uniqueIdentifier:(id) appIdentifier:(id) {
	%orig;
	NSLog(@"-(void) session:(id) applicationManagementService:(long long) handleApplicationManagementServiceEvent:(int) uniqueIdentifier:(id) appIdentifier:(id)");
}

-(id) initWithEtchSession:(id) handle:(long long) identifier:(id) {
	%orig;
	NSLog(@"-(id) initWithEtchSession:(id) handle:(long long) identifier:(id)");
}

-(bool) disposeWithError:(id*) {
	%orig;
	NSLog(@"-(bool) disposeWithError:(id*)");
}

-(void) registerFeatureInfo:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) registerFeatureInfo:(id) completionHandler:(id)");
}

-(id) initWithEtchSession:(id) handle:(long long) {
	%orig;
	NSLog(@"-(id) initWithEtchSession:(id) handle:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(id) uniqueIdentifier {
	%orig;
	NSLog(@"-(id) uniqueIdentifier");
}

-(void) setUniqueIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setUniqueIdentifier:(id)");
}

%end

%hook IDApplication

-(id) hmiProvider {
	%orig;
	NSLog(@"-(id) hmiProvider");
}

-(id) vehicleInfo {
	%orig;
	NSLog(@"-(id) vehicleInfo");
}

-(id) initWithHmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiProvider:(id)");
}

-(id) audioService {
	%orig;
	NSLog(@"-(id) audioService");
}

-(void) performLastUserModeWithView:(id) {
	%orig;
	NSLog(@"-(void) performLastUserModeWithView:(id)");
}

-(id) hmiService {
	%orig;
	NSLog(@"-(id) hmiService");
}

-(id) proxyInfo {
	%orig;
	NSLog(@"-(id) proxyInfo");
}

-(id) initWithHmiProvider:(id) hmiURL:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiProvider:(id) hmiURL:(id)");
}

-(id) initWithHmiProvider:(id) hmiURL:(id) etchSession:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiProvider:(id) hmiURL:(id) etchSession:(id)");
}

-(id) appQueue {
	%orig;
	NSLog(@"-(id) appQueue");
}

-(void) startWithRhmiVersion:(long long) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) startWithRhmiVersion:(long long) completionBlock:(id)");
}

-(void) setRhmiVersion:(long long) {
	%orig;
	NSLog(@"-(void) setRhmiVersion:(long long)");
}

-(void) undoPreflightCheck {
	%orig;
	NSLog(@"-(void) undoPreflightCheck");
}

-(bool) performPreflightCheck:(id*) {
	%orig;
	NSLog(@"-(bool) performPreflightCheck:(id*)");
}

-(void) applicationDidFailToStartWithError:(id) {
	%orig;
	NSLog(@"-(void) applicationDidFailToStartWithError:(id)");
}

-(void) undoStartEtchSession {
	%orig;
	NSLog(@"-(void) undoStartEtchSession");
}

-(bool) startEtchSession:(id*) {
	%orig;
	NSLog(@"-(bool) startEtchSession:(id*)");
}

-(void) undoLoginToHmi {
	%orig;
	NSLog(@"-(void) undoLoginToHmi");
}

-(bool) loginToHmi:(id*) {
	%orig;
	NSLog(@"-(bool) loginToHmi:(id*)");
}

-(void) undoSetupCdsService {
	%orig;
	NSLog(@"-(void) undoSetupCdsService");
}

-(bool) setupCdsService:(id*) {
	%orig;
	NSLog(@"-(bool) setupCdsService:(id*)");
}

-(void) undoSetupHmiService {
	%orig;
	NSLog(@"-(void) undoSetupHmiService");
}

-(bool) setupHmiService:(id*) {
	%orig;
	NSLog(@"-(bool) setupHmiService:(id*)");
}

-(void) applicationDidConnectToVehicle {
	%orig;
	NSLog(@"-(void) applicationDidConnectToVehicle");
}

-(void) undoStartHmi {
	%orig;
	NSLog(@"-(void) undoStartHmi");
}

-(bool) startHmi:(id*) {
	%orig;
	NSLog(@"-(bool) startHmi:(id*)");
}

-(void) hmiDidStop {
	%orig;
	NSLog(@"-(void) hmiDidStop");
}

-(void) hmiDidStart {
	%orig;
	NSLog(@"-(void) hmiDidStart");
}

-(void) undoSetupAudioService {
	%orig;
	NSLog(@"-(void) undoSetupAudioService");
}

-(bool) setupAudioService:(id*) {
	%orig;
	NSLog(@"-(bool) setupAudioService:(id*)");
}

-(void) undoSetupPiaService {
	%orig;
	NSLog(@"-(void) undoSetupPiaService");
}

-(bool) setupPiaService:(id*) {
	%orig;
	NSLog(@"-(bool) setupPiaService:(id*)");
}

-(void) applicationDidStart {
	%orig;
	NSLog(@"-(void) applicationDidStart");
}

-(void) setProxyInfo:(id) {
	%orig;
	NSLog(@"-(void) setProxyInfo:(id)");
}

-(id) hmiURL {
	%orig;
	NSLog(@"-(id) hmiURL");
}

-(bool) hasValidResourceHashes {
	%orig;
	NSLog(@"-(bool) hasValidResourceHashes");
}

-(bool) hasValidHmiResourceDatabaseCount {
	%orig;
	NSLog(@"-(bool) hasValidHmiResourceDatabaseCount");
}

-(bool) shouldRegisterCdsService {
	%orig;
	NSLog(@"-(bool) shouldRegisterCdsService");
}

-(void) setCdsService:(id) {
	%orig;
	NSLog(@"-(void) setCdsService:(id)");
}

-(long long) rhmiVersion {
	%orig;
	NSLog(@"-(long long) rhmiVersion");
}

-(void) setHmiService:(id) {
	%orig;
	NSLog(@"-(void) setHmiService:(id)");
}

-(void) onHmiRestoreEvent:(id) {
	%orig;
	NSLog(@"-(void) onHmiRestoreEvent:(id)");
}

-(bool) shouldRegisterAudioService {
	%orig;
	NSLog(@"-(bool) shouldRegisterAudioService");
}

-(void) setAudioService:(id) {
	%orig;
	NSLog(@"-(void) setAudioService:(id)");
}

-(bool) shouldRegisterPiaService {
	%orig;
	NSLog(@"-(bool) shouldRegisterPiaService");
}

-(void) setPiaService:(id) {
	%orig;
	NSLog(@"-(void) setPiaService:(id)");
}

-(void) setApplicationManagementService:(id) {
	%orig;
	NSLog(@"-(void) setApplicationManagementService:(id)");
}

-(bool) isLastUserModeAllowed {
	%orig;
	NSLog(@"-(bool) isLastUserModeAllowed");
}

-(void) restoreMainHmiState {
	%orig;
	NSLog(@"-(void) restoreMainHmiState");
}

-(void) applicationDidStop {
	%orig;
	NSLog(@"-(void) applicationDidStop");
}

-(bool) setupApplicationManagementService {
	%orig;
	NSLog(@"-(bool) setupApplicationManagementService");
}

-(id) cdsService {
	%orig;
	NSLog(@"-(id) cdsService");
}

-(id) piaService {
	%orig;
	NSLog(@"-(id) piaService");
}

-(id) applicationManagementService {
	%orig;
	NSLog(@"-(id) applicationManagementService");
}

-(id) etchSession {
	%orig;
	NSLog(@"-(id) etchSession");
}

-(void) setVehicleInfo:(id) {
	%orig;
	NSLog(@"-(void) setVehicleInfo:(id)");
}

-(void) setEtchSession:(id) {
	%orig;
	NSLog(@"-(void) setEtchSession:(id)");
}

-(id) internalStart {
	%orig;
	NSLog(@"-(id) internalStart");
}

-(void) internalStop {
	%orig;
	NSLog(@"-(void) internalStop");
}

-(id) vendor {
	%orig;
	NSLog(@"-(id) vendor");
}

-(bool) isConnected {
	%orig;
	NSLog(@"-(bool) isConnected");
}

-(void) stopWithCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) stopWithCompletionBlock:(id)");
}

-(void) setScheduler:(id) {
	%orig;
	NSLog(@"-(void) setScheduler:(id)");
}

-(id) manifest {
	%orig;
	NSLog(@"-(id) manifest");
}

-(void) startWithCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) startWithCompletionBlock:(id)");
}

-(id) scheduler {
	%orig;
	NSLog(@"-(id) scheduler");
}

-(void) setConnected:(bool) {
	%orig;
	NSLog(@"-(void) setConnected:(bool)");
}

-(id) backgroundTask {
	%orig;
	NSLog(@"-(id) backgroundTask");
}

-(void) setBackgroundTask:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundTask:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(id) uniqueIdentifier {
	%orig;
	NSLog(@"-(id) uniqueIdentifier");
}

-(id) undoManager {
	%orig;
	NSLog(@"-(id) undoManager");
}

-(void) setUndoManager:(id) {
	%orig;
	NSLog(@"-(void) setUndoManager:(id)");
}

-(id) delegateQueue {
	%orig;
	NSLog(@"-(id) delegateQueue");
}

-(void) setDelegateQueue:(id) {
	%orig;
	NSLog(@"-(void) setDelegateQueue:(id)");
}

%end

%hook IDAppManifest

+(id) requiredKeyPaths {
	%orig;
	NSLog(@"+(id) requiredKeyPaths");
}

+(bool) isApplicationManifestComplete:(id) {
	%orig;
	NSLog(@"+(bool) isApplicationManifestComplete:(id)");
}

+(bool) isApplicationManifestSignatureValid:(id) {
	%orig;
	NSLog(@"+(bool) isApplicationManifestSignatureValid:(id)");
}

-(void) setRequiresCarDataService:(bool) {
	%orig;
	NSLog(@"-(void) setRequiresCarDataService:(bool)");
}

-(void) setRequiresAudioService:(bool) {
	%orig;
	NSLog(@"-(void) setRequiresAudioService:(bool)");
}

-(void) setRequiresPiaService:(bool) {
	%orig;
	NSLog(@"-(void) setRequiresPiaService:(bool)");
}

-(bool) requiresCarDataService {
	%orig;
	NSLog(@"-(bool) requiresCarDataService");
}

-(bool) requiresAudioService {
	%orig;
	NSLog(@"-(bool) requiresAudioService");
}

-(bool) requiresPiaService {
	%orig;
	NSLog(@"-(bool) requiresPiaService");
}

-(id) vendor {
	%orig;
	NSLog(@"-(id) vendor");
}

-(void) setVendor:(id) {
	%orig;
	NSLog(@"-(void) setVendor:(id)");
}

-(id) initWithManifest:(id) {
	%orig;
	NSLog(@"-(id) initWithManifest:(id)");
}

-(void) setProtocol:(id) {
	%orig;
	NSLog(@"-(void) setProtocol:(id)");
}

-(id) signature {
	%orig;
	NSLog(@"-(id) signature");
}

-(void) setSignature:(id) {
	%orig;
	NSLog(@"-(void) setSignature:(id)");
}

-(id) manifest {
	%orig;
	NSLog(@"-(id) manifest");
}

-(void) setManifest:(id) {
	%orig;
	NSLog(@"-(void) setManifest:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(void) setVersion:(id) {
	%orig;
	NSLog(@"-(void) setVersion:(id)");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(id) uniqueIdentifier {
	%orig;
	NSLog(@"-(id) uniqueIdentifier");
}

-(void) setUniqueIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setUniqueIdentifier:(id)");
}

-(id) protocol {
	%orig;
	NSLog(@"-(id) protocol");
}

-(id) token {
	%orig;
	NSLog(@"-(id) token");
}

-(void) setToken:(id) {
	%orig;
	NSLog(@"-(void) setToken:(id)");
}

%end

%hook IDAccessoryMonitor

-(id) vehicleInfo {
	%orig;
	NSLog(@"-(id) vehicleInfo");
}

-(id) accessoryMonitor {
	%orig;
	NSLog(@"-(id) accessoryMonitor");
}

-(void) setAccessoryMonitor:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryMonitor:(id)");
}

-(id) cdsVersion {
	%orig;
	NSLog(@"-(id) cdsVersion");
}

-(id) etchVersion {
	%orig;
	NSLog(@"-(id) etchVersion");
}

-(id) messagingService {
	%orig;
	NSLog(@"-(id) messagingService");
}

-(void) startMonitoringWithManifest:(id) {
	%orig;
	NSLog(@"-(void) startMonitoringWithManifest:(id)");
}

-(id) communicationURL {
	%orig;
	NSLog(@"-(id) communicationURL");
}

-(id) proxyInfo {
	%orig;
	NSLog(@"-(id) proxyInfo");
}

-(bool) supportsA4AConnectionInBackground {
	%orig;
	NSLog(@"-(bool) supportsA4AConnectionInBackground");
}

-(bool) supportsA4AMultisession {
	%orig;
	NSLog(@"-(bool) supportsA4AMultisession");
}

-(void) registerStickyApplication:(id) {
	%orig;
	NSLog(@"-(void) registerStickyApplication:(id)");
}

-(void) registerNonStickyApplication:(id) {
	%orig;
	NSLog(@"-(void) registerNonStickyApplication:(id)");
}

-(void) deregisterApplication:(id) {
	%orig;
	NSLog(@"-(void) deregisterApplication:(id)");
}

-(void) stopMonitoring {
	%orig;
	NSLog(@"-(void) stopMonitoring");
}

-(void) startMonitoring {
	%orig;
	NSLog(@"-(void) startMonitoring");
}

-(void) launchApplication:(id) {
	%orig;
	NSLog(@"-(void) launchApplication:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDA4AProxyInfo

+(id) proxyInfoWithHandshakeData:(id) {
	%orig;
	NSLog(@"+(id) proxyInfoWithHandshakeData:(id)");
}

-(id) initWithHandshakeData:(id) {
	%orig;
	NSLog(@"-(id) initWithHandshakeData:(id)");
}

-(bool) hasHandshakeDataValidLength:(id) {
	%orig;
	NSLog(@"-(bool) hasHandshakeDataValidLength:(id)");
}

-(unsigned short) auxiliaryInput {
	%orig;
	NSLog(@"-(unsigned short) auxiliaryInput");
}

-(unsigned int) eaBufferSize {
	%orig;
	NSLog(@"-(unsigned int) eaBufferSize");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(unsigned short) version {
	%orig;
	NSLog(@"-(unsigned short) version");
}

%end

%hook IDA4AProtocol

+(id) defaultA4AProtocol {
	%orig;
	NSLog(@"+(id) defaultA4AProtocol");
}

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(bool) isValidMultisessionProtocol:(id) {
	%orig;
	NSLog(@"-(bool) isValidMultisessionProtocol:(id)");
}

-(id) multisessionExternalAccessoryProtocolStringPattern {
	%orig;
	NSLog(@"-(id) multisessionExternalAccessoryProtocolStringPattern");
}

-(bool) isValidMultisessionProtocol {
	%orig;
	NSLog(@"-(bool) isValidMultisessionProtocol");
}

-(id) initWithProtocolString:(id) {
	%orig;
	NSLog(@"-(id) initWithProtocolString:(id)");
}

-(id) protocolString {
	%orig;
	NSLog(@"-(id) protocolString");
}

-(bool) isValid:(id) {
	%orig;
	NSLog(@"-(bool) isValid:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook IDA4APacketQueue

-(id) queueForEnqueueingPacket:(bool) {
	%orig;
	NSLog(@"-(id) queueForEnqueueingPacket:(bool)");
}

-(unsigned long long) totalEnqueuedPacketLength {
	%orig;
	NSLog(@"-(unsigned long long) totalEnqueuedPacketLength");
}

-(void) setTotalEnqueuedPacketLength:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setTotalEnqueuedPacketLength:(unsigned long long)");
}

-(id) queueForDequeueingPacket {
	%orig;
	NSLog(@"-(id) queueForDequeueingPacket");
}

-(id) urgentPacketQueue {
	%orig;
	NSLog(@"-(id) urgentPacketQueue");
}

-(id) packetQueue {
	%orig;
	NSLog(@"-(id) packetQueue");
}

-(id) dequeue {
	%orig;
	NSLog(@"-(id) dequeue");
}

-(void) enqueue:(id) {
	%orig;
	NSLog(@"-(void) enqueue:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook IDA4APacket

+(bool) isValidHeaderData:(id) {
	%orig;
	NSLog(@"+(bool) isValidHeaderData:(id)");
}

+(id) packetWithData:(id) {
	%orig;
	NSLog(@"+(id) packetWithData:(id)");
}

+(id) echoOpenPacket {
	%orig;
	NSLog(@"+(id) echoOpenPacket");
}

+(id) echoDataPacket {
	%orig;
	NSLog(@"+(id) echoDataPacket");
}

+(id) echoClosePacket {
	%orig;
	NSLog(@"+(id) echoClosePacket");
}

+(id) echoDataPacket:(id) {
	%orig;
	NSLog(@"+(id) echoDataPacket:(id)");
}

+(bool) isValidAcceptPort:(unsigned short) {
	%orig;
	NSLog(@"+(bool) isValidAcceptPort:(unsigned short)");
}

+(bool) isValidPacketType:(unsigned short) {
	%orig;
	NSLog(@"+(bool) isValidPacketType:(unsigned short)");
}

+(bool) isAcceptPort:(unsigned short) validForPacketType:(unsigned short) {
	%orig;
	NSLog(@"+(bool) isAcceptPort:(unsigned short) validForPacketType:(unsigned short)");
}

+(bool) payloadLength:(unsigned short) matchesPacketType:(unsigned long long) {
	%orig;
	NSLog(@"+(bool) payloadLength:(unsigned short) matchesPacketType:(unsigned long long)");
}

+(id) validAcceptPortsForPacketTypes {
	%orig;
	NSLog(@"+(id) validAcceptPortsForPacketTypes");
}

+(id) validPacketTypes {
	%orig;
	NSLog(@"+(id) validPacketTypes");
}

+(id) validAcceptPorts {
	%orig;
	NSLog(@"+(id) validAcceptPorts");
}

+(id) dataAcceptedPacketWithBytesAccepted:(unsigned long long) {
	%orig;
	NSLog(@"+(id) dataAcceptedPacketWithBytesAccepted:(unsigned long long)");
}

+(id) hangupPacket {
	%orig;
	NSLog(@"+(id) hangupPacket");
}

+(id) broadcastPacketWithPayload:(id) {
	%orig;
	NSLog(@"+(id) broadcastPacketWithPayload:(id)");
}

+(id) registerPacketWithType:(unsigned long long) payload:(id) {
	%orig;
	NSLog(@"+(id) registerPacketWithType:(unsigned long long) payload:(id)");
}

+(id) applaunchPacketWithPayload:(id) {
	%orig;
	NSLog(@"+(id) applaunchPacketWithPayload:(id)");
}

+(id) openPacketWithConnectionId:(unsigned long long) {
	%orig;
	NSLog(@"+(id) openPacketWithConnectionId:(unsigned long long)");
}

+(id) closePacketWithConnectionId:(unsigned long long) {
	%orig;
	NSLog(@"+(id) closePacketWithConnectionId:(unsigned long long)");
}

+(id) selectProtocolPacket:(unsigned long long) {
	%orig;
	NSLog(@"+(id) selectProtocolPacket:(unsigned long long)");
}

+(id) dataPacketWithConnectionId:(unsigned long long) payload:(id) {
	%orig;
	NSLog(@"+(id) dataPacketWithConnectionId:(unsigned long long) payload:(id)");
}

-(id) dataWithPacket {
	%orig;
	NSLog(@"-(id) dataWithPacket");
}

-(id) initWithPacketType:(unsigned long long) connectionId:(unsigned long long) remoteAcceptPort:(unsigned long long) urgent:(bool) payload:(id) {
	%orig;
	NSLog(@"-(id) initWithPacketType:(unsigned long long) connectionId:(unsigned long long) remoteAcceptPort:(unsigned long long) urgent:(bool) payload:(id)");
}

-(unsigned long long) remoteAcceptPort {
	%orig;
	NSLog(@"-(unsigned long long) remoteAcceptPort");
}

-(void) setRemoteAcceptPort:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setRemoteAcceptPort:(unsigned long long)");
}

-(bool) urgent {
	%orig;
	NSLog(@"-(bool) urgent");
}

-(unsigned long long) connectionId {
	%orig;
	NSLog(@"-(unsigned long long) connectionId");
}

-(unsigned long long) length {
	%orig;
	NSLog(@"-(unsigned long long) length");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(unsigned long long) type {
	%orig;
	NSLog(@"-(unsigned long long) type");
}

-(id) payload {
	%orig;
	NSLog(@"-(id) payload");
}

%end

%hook IDA4AConnectionMonitor

-(id) initWithDelegate:(id) communicationTimeout:(double) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) communicationTimeout:(double)");
}

-(id) monitoringStateCondition {
	%orig;
	NSLog(@"-(id) monitoringStateCondition");
}

-(void) setPacketProcessedBeforeTimeoutExpired:(bool) {
	%orig;
	NSLog(@"-(void) setPacketProcessedBeforeTimeoutExpired:(bool)");
}

-(double) communicationTimeout {
	%orig;
	NSLog(@"-(double) communicationTimeout");
}

-(void) handleCommunicationTimeoutTimer:(id) {
	%orig;
	NSLog(@"-(void) handleCommunicationTimeoutTimer:(id)");
}

-(void) setCommunicationTimeoutTimer:(id) {
	%orig;
	NSLog(@"-(void) setCommunicationTimeoutTimer:(id)");
}

-(id) communicationTimeoutTimer {
	%orig;
	NSLog(@"-(id) communicationTimeoutTimer");
}

-(void) handleKeepAliveTimer:(id) {
	%orig;
	NSLog(@"-(void) handleKeepAliveTimer:(id)");
}

-(void) setKeepAliveTimer:(id) {
	%orig;
	NSLog(@"-(void) setKeepAliveTimer:(id)");
}

-(id) keepAliveTimer {
	%orig;
	NSLog(@"-(id) keepAliveTimer");
}

-(void) stopMonitoringWithError:(id) {
	%orig;
	NSLog(@"-(void) stopMonitoringWithError:(id)");
}

-(bool) packetProcessedBeforeTimeoutExpired {
	%orig;
	NSLog(@"-(bool) packetProcessedBeforeTimeoutExpired");
}

-(void) processPacket:(id) {
	%orig;
	NSLog(@"-(void) processPacket:(id)");
}

-(void) setMonitoringStateCondition:(id) {
	%orig;
	NSLog(@"-(void) setMonitoringStateCondition:(id)");
}

-(void) stopMonitoring {
	%orig;
	NSLog(@"-(void) stopMonitoring");
}

-(void) startMonitoring {
	%orig;
	NSLog(@"-(void) startMonitoring");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

%end

%hook IDA4AConnection

-(void) openStreams {
	%orig;
	NSLog(@"-(void) openStreams");
}

-(void) setHasSpaceAvailableEventReceived:(bool) {
	%orig;
	NSLog(@"-(void) setHasSpaceAvailableEventReceived:(bool)");
}

-(void) informDelegateAboutClosedStreams {
	%orig;
	NSLog(@"-(void) informDelegateAboutClosedStreams");
}

-(bool) isAllowedToWrite {
	%orig;
	NSLog(@"-(bool) isAllowedToWrite");
}

-(unsigned long long) outgoingDataWriteIndex {
	%orig;
	NSLog(@"-(unsigned long long) outgoingDataWriteIndex");
}

-(void) setOutgoingDataWriteIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setOutgoingDataWriteIndex:(unsigned long long)");
}

-(id) incomingPacketDataBuffer {
	%orig;
	NSLog(@"-(id) incomingPacketDataBuffer");
}

-(void) setIncomingPacketDataBuffer:(id) {
	%orig;
	NSLog(@"-(void) setIncomingPacketDataBuffer:(id)");
}

-(void) processIncomingPacketDataBuffer {
	%orig;
	NSLog(@"-(void) processIncomingPacketDataBuffer");
}

-(bool) hasSpaceAvailableEventReceived {
	%orig;
	NSLog(@"-(bool) hasSpaceAvailableEventReceived");
}

-(id) splitData:(id) bySeperatorData:(id) {
	%orig;
	NSLog(@"-(id) splitData:(id) bySeperatorData:(id)");
}

-(id) initWithDelegate:(id) inputStream:(id) outputStream:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) inputStream:(id) outputStream:(id)");
}

-(id) connectionStateLock {
	%orig;
	NSLog(@"-(id) connectionStateLock");
}

-(id) stringWithState:(unsigned long long) {
	%orig;
	NSLog(@"-(id) stringWithState:(unsigned long long)");
}

-(void) readIncomingData {
	%orig;
	NSLog(@"-(void) readIncomingData");
}

-(void) writeOutgoingData {
	%orig;
	NSLog(@"-(void) writeOutgoingData");
}

-(void) informDelegateAboutError:(id) {
	%orig;
	NSLog(@"-(void) informDelegateAboutError:(id)");
}

-(id) outgoingDataBuffer {
	%orig;
	NSLog(@"-(id) outgoingDataBuffer");
}

-(id) packetWriteQueue {
	%orig;
	NSLog(@"-(id) packetWriteQueue");
}

-(void) setOutgoingDataBuffer:(id) {
	%orig;
	NSLog(@"-(void) setOutgoingDataBuffer:(id)");
}

-(void) setConnectionStateLock:(id) {
	%orig;
	NSLog(@"-(void) setConnectionStateLock:(id)");
}

-(id) workerThread {
	%orig;
	NSLog(@"-(id) workerThread");
}

-(void) closeStreams {
	%orig;
	NSLog(@"-(void) closeStreams");
}

-(void) stream:(id) handleEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) stream:(id) handleEvent:(unsigned long long)");
}

-(id) outputStream {
	%orig;
	NSLog(@"-(id) outputStream");
}

-(void) setInputStream:(id) {
	%orig;
	NSLog(@"-(void) setInputStream:(id)");
}

-(void) setOutputStream:(id) {
	%orig;
	NSLog(@"-(void) setOutputStream:(id)");
}

-(void) enqueuePacket:(id) {
	%orig;
	NSLog(@"-(void) enqueuePacket:(id)");
}

-(id) inputStream {
	%orig;
	NSLog(@"-(id) inputStream");
}

-(void) startWriting {
	%orig;
	NSLog(@"-(void) startWriting");
}

-(void) stopWriting {
	%orig;
	NSLog(@"-(void) stopWriting");
}

-(void) pauseWriting {
	%orig;
	NSLog(@"-(void) pauseWriting");
}

-(void) resumeWriting {
	%orig;
	NSLog(@"-(void) resumeWriting");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(unsigned long long) state {
	%orig;
	NSLog(@"-(unsigned long long) state");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setState:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setState:(unsigned long long)");
}

-(void) setPaused:(bool) {
	%orig;
	NSLog(@"-(void) setPaused:(bool)");
}

-(bool) isPaused {
	%orig;
	NSLog(@"-(bool) isPaused");
}

%end

%hook Starscream.WebSocket

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook Starscream.FoundationStream

-(void) stream:(id) handleEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) stream:(id) handleEvent:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.WebSocket

-(void) stream:(id) handleEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) stream:(id) handleEvent:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.UniversalMusicObjectId

-(id) initWithServiceId:(id) objectId:(id) accountId:(id) {
	%orig;
	NSLog(@"-(id) initWithServiceId:(id) objectId:(id) accountId:(id)");
}

-(void) setAccountId:(id) {
	%orig;
	NSLog(@"-(void) setAccountId:(id)");
}

-(id) accountId {
	%orig;
	NSLog(@"-(id) accountId");
}

-(id) objectId {
	%orig;
	NSLog(@"-(id) objectId");
}

-(void) setObjectId:(id) {
	%orig;
	NSLog(@"-(void) setObjectId:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) serviceId {
	%orig;
	NSLog(@"-(id) serviceId");
}

-(void) setServiceId:(id) {
	%orig;
	NSLog(@"-(void) setServiceId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.TrackMetadata

-(id) trackUrl {
	%orig;
	NSLog(@"-(id) trackUrl");
}

-(void) setTrackUrl:(id) {
	%orig;
	NSLog(@"-(void) setTrackUrl:(id)");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(void) setAlbumArtist:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtist:(id)");
}

-(id) artist {
	%orig;
	NSLog(@"-(id) artist");
}

-(void) setArtist:(id) {
	%orig;
	NSLog(@"-(void) setArtist:(id)");
}

-(id) albumArtist {
	%orig;
	NSLog(@"-(id) albumArtist");
}

-(id) album {
	%orig;
	NSLog(@"-(id) album");
}

-(void) setAlbum:(id) {
	%orig;
	NSLog(@"-(void) setAlbum:(id)");
}

-(id) contentType {
	%orig;
	NSLog(@"-(id) contentType");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setContentType:(id) {
	%orig;
	NSLog(@"-(void) setContentType:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

%end

%hook SonosControl.Track

-(id) mediaUrl {
	%orig;
	NSLog(@"-(id) mediaUrl");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setMediaUrl:(id) {
	%orig;
	NSLog(@"-(void) setMediaUrl:(id)");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(id) artist {
	%orig;
	NSLog(@"-(id) artist");
}

-(void) setArtist:(id) {
	%orig;
	NSLog(@"-(void) setArtist:(id)");
}

-(id) album {
	%orig;
	NSLog(@"-(id) album");
}

-(void) setAlbum:(id) {
	%orig;
	NSLog(@"-(void) setAlbum:(id)");
}

-(id) contentType {
	%orig;
	NSLog(@"-(id) contentType");
}

-(id) trackType {
	%orig;
	NSLog(@"-(id) trackType");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setContentType:(id) {
	%orig;
	NSLog(@"-(void) setContentType:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

%end

%hook SonosControl.TopologyDevice

-(void) setPlayerId:(id) {
	%orig;
	NSLog(@"-(void) setPlayerId:(id)");
}

-(id) hwVersion {
	%orig;
	NSLog(@"-(id) hwVersion");
}

-(void) setHwVersion:(id) {
	%orig;
	NSLog(@"-(void) setHwVersion:(id)");
}

-(id) ipAddr {
	%orig;
	NSLog(@"-(id) ipAddr");
}

-(void) setIpAddr:(id) {
	%orig;
	NSLog(@"-(void) setIpAddr:(id)");
}

-(id) groupId {
	%orig;
	NSLog(@"-(id) groupId");
}

-(void) setGroupId:(id) {
	%orig;
	NSLog(@"-(void) setGroupId:(id)");
}

-(void) setSwVersion:(id) {
	%orig;
	NSLog(@"-(void) setSwVersion:(id)");
}

-(id) swVersion {
	%orig;
	NSLog(@"-(id) swVersion");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) playerId {
	%orig;
	NSLog(@"-(id) playerId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCC12SonosControl8Topology14TopologyDevice

-(void) setPlayerId:(id) {
	%orig;
	NSLog(@"-(void) setPlayerId:(id)");
}

-(id) hwVersion {
	%orig;
	NSLog(@"-(id) hwVersion");
}

-(void) setHwVersion:(id) {
	%orig;
	NSLog(@"-(void) setHwVersion:(id)");
}

-(id) ipAddr {
	%orig;
	NSLog(@"-(id) ipAddr");
}

-(void) setIpAddr:(id) {
	%orig;
	NSLog(@"-(void) setIpAddr:(id)");
}

-(id) groupId {
	%orig;
	NSLog(@"-(id) groupId");
}

-(void) setGroupId:(id) {
	%orig;
	NSLog(@"-(void) setGroupId:(id)");
}

-(void) setSwVersion:(id) {
	%orig;
	NSLog(@"-(void) setSwVersion:(id)");
}

-(id) swVersion {
	%orig;
	NSLog(@"-(id) swVersion");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) playerId {
	%orig;
	NSLog(@"-(id) playerId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.SonosPlayer

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.SonosGroupEditor

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.SonosGroupDiscovery

-(void) udpSocket:(id) didReceiveData:(id) fromAddress:(id) withFilterContext:(id) {
	%orig;
	NSLog(@"-(void) udpSocket:(id) didReceiveData:(id) fromAddress:(id) withFilterContext:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.SkipEnforcement

-(id) lastReportId {
	%orig;
	NSLog(@"-(id) lastReportId");
}

-(void) setLastReportId:(id) {
	%orig;
	NSLog(@"-(void) setLastReportId:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.Show

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) initWithId:(id) name:(id) host:(id) imageUrl:(id) {
	%orig;
	NSLog(@"-(id) initWithId:(id) name:(id) host:(id) imageUrl:(id)");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(void) setHost:(id) {
	%orig;
	NSLog(@"-(void) setHost:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) host {
	%orig;
	NSLog(@"-(id) host");
}

%end

%hook SonosControl.Service

-(id) initWithName:(id) id:(id) imageUrl:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) id:(id) imageUrl:(id)");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

%end

%hook SonosControl.SecureReg

-(id) customerId {
	%orig;
	NSLog(@"-(id) customerId");
}

-(void) setCustomerId:(id) {
	%orig;
	NSLog(@"-(void) setCustomerId:(id)");
}

-(id) householdId {
	%orig;
	NSLog(@"-(id) householdId");
}

-(void) setHouseholdId:(id) {
	%orig;
	NSLog(@"-(void) setHouseholdId:(id)");
}

-(id) regToken {
	%orig;
	NSLog(@"-(id) regToken");
}

-(void) setRegToken:(id) {
	%orig;
	NSLog(@"-(void) setRegToken:(id)");
}

-(id) macAddr {
	%orig;
	NSLog(@"-(id) macAddr");
}

-(void) setMacAddr:(id) {
	%orig;
	NSLog(@"-(void) setMacAddr:(id)");
}

-(id) hmacDigest {
	%orig;
	NSLog(@"-(id) hmacDigest");
}

-(void) setHmacDigest:(id) {
	%orig;
	NSLog(@"-(void) setHmacDigest:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.ReportOptions

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook SonosControl.Rating

-(id) connotation {
	%orig;
	NSLog(@"-(id) connotation");
}

-(void) setConnotation:(id) {
	%orig;
	NSLog(@"-(void) setConnotation:(id)");
}

-(id) initWithType:(id) connotation:(id) {
	%orig;
	NSLog(@"-(id) initWithType:(id) connotation:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) state {
	%orig;
	NSLog(@"-(id) state");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(void) setState:(id) {
	%orig;
	NSLog(@"-(void) setState:(id)");
}

%end

%hook SonosControl.QueueItemWindow

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) queueVersion {
	%orig;
	NSLog(@"-(id) queueVersion");
}

-(void) setQueueVersion:(id) {
	%orig;
	NSLog(@"-(void) setQueueVersion:(id)");
}

-(id) contextVersion {
	%orig;
	NSLog(@"-(id) contextVersion");
}

-(void) setContextVersion:(id) {
	%orig;
	NSLog(@"-(void) setContextVersion:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) items {
	%orig;
	NSLog(@"-(id) items");
}

-(void) setItems:(id) {
	%orig;
	NSLog(@"-(void) setItems:(id)");
}

%end

%hook SonosControl.QueueItem

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) policies {
	%orig;
	NSLog(@"-(id) policies");
}

-(void) setPolicies:(id) {
	%orig;
	NSLog(@"-(void) setPolicies:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.Podcast

-(id) getParameters {
	%orig;
	NSLog(@"-(id) getParameters");
}

-(id) initWithId:(id) name:(id) imageUrl:(id) artist:(id) show:(id) {
	%orig;
	NSLog(@"-(id) initWithId:(id) name:(id) imageUrl:(id) artist:(id) show:(id)");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(id) artist {
	%orig;
	NSLog(@"-(id) artist");
}

-(void) setArtist:(id) {
	%orig;
	NSLog(@"-(void) setArtist:(id)");
}

-(id) trackType {
	%orig;
	NSLog(@"-(id) trackType");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) show {
	%orig;
	NSLog(@"-(id) show");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(void) setShow:(id) {
	%orig;
	NSLog(@"-(void) setShow:(id)");
}

%end

%hook SonosControl.PlayMode

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook SonosControl.PlaybackPolicy

-(void) setCanSkip:(id) {
	%orig;
	NSLog(@"-(void) setCanSkip:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) canSkip {
	%orig;
	NSLog(@"-(id) canSkip");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.PlaybackAction

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook SonosControl.NamespaceMetadata

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

%end

%hook SonosControl.MusicObjectId

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.BaseTrackDeserializer

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.Item

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.Header

-(id) cmdId {
	%orig;
	NSLog(@"-(id) cmdId");
}

-(void) setCmdId:(id) {
	%orig;
	NSLog(@"-(void) setCmdId:(id)");
}

-(id) householdId {
	%orig;
	NSLog(@"-(id) householdId");
}

-(void) setHouseholdId:(id) {
	%orig;
	NSLog(@"-(void) setHouseholdId:(id)");
}

-(void) setSessionId:(id) {
	%orig;
	NSLog(@"-(void) setSessionId:(id)");
}

-(id) sessionId {
	%orig;
	NSLog(@"-(id) sessionId");
}

-(void) setResponse:(id) {
	%orig;
	NSLog(@"-(void) setResponse:(id)");
}

-(id) groupId {
	%orig;
	NSLog(@"-(id) groupId");
}

-(void) setGroupId:(id) {
	%orig;
	NSLog(@"-(void) setGroupId:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) namespace {
	%orig;
	NSLog(@"-(id) namespace");
}

-(id) command {
	%orig;
	NSLog(@"-(id) command");
}

-(void) setCommand:(id) {
	%orig;
	NSLog(@"-(void) setCommand:(id)");
}

-(void) setNamespace:(id) {
	%orig;
	NSLog(@"-(void) setNamespace:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

%end

%hook _TtCC12SonosControl6Groups12ArrayElement

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups6Player

-(id) websocketUrl {
	%orig;
	NSLog(@"-(id) websocketUrl");
}

-(void) setWebsocketUrl:(id) {
	%orig;
	NSLog(@"-(void) setWebsocketUrl:(id)");
}

-(id) restUrl {
	%orig;
	NSLog(@"-(id) restUrl");
}

-(void) setRestUrl:(id) {
	%orig;
	NSLog(@"-(void) setRestUrl:(id)");
}

-(void) setDeviceIds:(id) {
	%orig;
	NSLog(@"-(void) setDeviceIds:(id)");
}

-(void) setSoftwareVersion:(id) {
	%orig;
	NSLog(@"-(void) setSoftwareVersion:(id)");
}

-(id) softwareVersion {
	%orig;
	NSLog(@"-(id) softwareVersion");
}

-(id) apiVersion {
	%orig;
	NSLog(@"-(id) apiVersion");
}

-(void) setApiVersion:(id) {
	%orig;
	NSLog(@"-(void) setApiVersion:(id)");
}

-(id) deviceIds {
	%orig;
	NSLog(@"-(id) deviceIds");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) icon {
	%orig;
	NSLog(@"-(id) icon");
}

-(void) setIcon:(id) {
	%orig;
	NSLog(@"-(void) setIcon:(id)");
}

%end

%hook _TtCC12SonosControl6Groups5Group

-(id) coordinatorId {
	%orig;
	NSLog(@"-(id) coordinatorId");
}

-(void) setCoordinatorId:(id) {
	%orig;
	NSLog(@"-(void) setCoordinatorId:(id)");
}

-(id) playerIds {
	%orig;
	NSLog(@"-(id) playerIds");
}

-(void) setPlayerIds:(id) {
	%orig;
	NSLog(@"-(void) setPlayerIds:(id)");
}

-(id) playbackState {
	%orig;
	NSLog(@"-(id) playbackState");
}

-(void) setPlaybackState:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackState:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

%end

%hook SonosControl.Container

-(id) initWithName:(id) type:(id) id:(id) service:(id) imageUrl:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) type:(id) id:(id) service:(id) imageUrl:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(id) service {
	%orig;
	NSLog(@"-(id) service");
}

-(void) setService:(id) {
	%orig;
	NSLog(@"-(void) setService:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setTags:(id) {
	%orig;
	NSLog(@"-(void) setTags:(id)");
}

-(id) tags {
	%orig;
	NSLog(@"-(id) tags");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

%end

%hook SonosControl.Conditions

-(id) queueVersion {
	%orig;
	NSLog(@"-(id) queueVersion");
}

-(void) setQueueVersion:(id) {
	%orig;
	NSLog(@"-(void) setQueueVersion:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.CloudSubscriptionStatus

-(id) inactiveReason {
	%orig;
	NSLog(@"-(id) inactiveReason");
}

-(void) setInactiveReason:(id) {
	%orig;
	NSLog(@"-(void) setInactiveReason:(id)");
}

-(void) setAvailabilityDate:(id) {
	%orig;
	NSLog(@"-(void) setAvailabilityDate:(id)");
}

-(id) availabilityDate {
	%orig;
	NSLog(@"-(id) availabilityDate");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCC12SonosControl12ClientStatus23CloudSubscriptionStatus

-(id) inactiveReason {
	%orig;
	NSLog(@"-(id) inactiveReason");
}

-(void) setInactiveReason:(id) {
	%orig;
	NSLog(@"-(void) setInactiveReason:(id)");
}

-(void) setAvailabilityDate:(id) {
	%orig;
	NSLog(@"-(void) setAvailabilityDate:(id)");
}

-(id) availabilityDate {
	%orig;
	NSLog(@"-(id) availabilityDate");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.Book

-(id) initWithId:(id) name:(id) author:(id) imageUrl:(id) {
	%orig;
	NSLog(@"-(id) initWithId:(id) name:(id) author:(id) imageUrl:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(id) author {
	%orig;
	NSLog(@"-(id) author");
}

-(void) setAuthor:(id) {
	%orig;
	NSLog(@"-(void) setAuthor:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

%end

%hook SonosControl.BaseBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl8Topology23CloudRegistrationStatus27CloudRegistrationStatusBody

-(void) setPlayerId:(id) {
	%orig;
	NSLog(@"-(void) setPlayerId:(id)");
}

-(id) householdLocationId {
	%orig;
	NSLog(@"-(id) householdLocationId");
}

-(void) setHouseholdLocationId:(id) {
	%orig;
	NSLog(@"-(void) setHouseholdLocationId:(id)");
}

-(id) sonosId {
	%orig;
	NSLog(@"-(id) sonosId");
}

-(void) setSonosId:(id) {
	%orig;
	NSLog(@"-(void) setSonosId:(id)");
}

-(id) hwVersion {
	%orig;
	NSLog(@"-(id) hwVersion");
}

-(void) setHwVersion:(id) {
	%orig;
	NSLog(@"-(void) setHwVersion:(id)");
}

-(void) setSessionId:(id) {
	%orig;
	NSLog(@"-(void) setSessionId:(id)");
}

-(id) sessionId {
	%orig;
	NSLog(@"-(id) sessionId");
}

-(id) ipAddr {
	%orig;
	NSLog(@"-(id) ipAddr");
}

-(void) setIpAddr:(id) {
	%orig;
	NSLog(@"-(void) setIpAddr:(id)");
}

-(id) groupId {
	%orig;
	NSLog(@"-(id) groupId");
}

-(void) setGroupId:(id) {
	%orig;
	NSLog(@"-(void) setGroupId:(id)");
}

-(void) setModel:(id) {
	%orig;
	NSLog(@"-(void) setModel:(id)");
}

-(void) setSwVersion:(id) {
	%orig;
	NSLog(@"-(void) setSwVersion:(id)");
}

-(id) swVersion {
	%orig;
	NSLog(@"-(id) swVersion");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) serial {
	%orig;
	NSLog(@"-(id) serial");
}

-(id) roomName {
	%orig;
	NSLog(@"-(id) roomName");
}

-(id) playerId {
	%orig;
	NSLog(@"-(id) playerId");
}

-(void) setSerial:(id) {
	%orig;
	NSLog(@"-(void) setSerial:(id)");
}

-(void) setRoomName:(id) {
	%orig;
	NSLog(@"-(void) setRoomName:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) model {
	%orig;
	NSLog(@"-(id) model");
}

%end

%hook _TtCCC12SonosControl8Topology14TopologyStatus18TopologyStatusBody

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) householdLocationId {
	%orig;
	NSLog(@"-(id) householdLocationId");
}

-(void) setHouseholdLocationId:(id) {
	%orig;
	NSLog(@"-(void) setHouseholdLocationId:(id)");
}

-(id) sonosId {
	%orig;
	NSLog(@"-(id) sonosId");
}

-(void) setSonosId:(id) {
	%orig;
	NSLog(@"-(void) setSonosId:(id)");
}

-(id) initWithHouseholdLocationId:(id) sonosId:(id) devices:(id) {
	%orig;
	NSLog(@"-(id) initWithHouseholdLocationId:(id) sonosId:(id) devices:(id)");
}

-(void) setDevices:(id) {
	%orig;
	NSLog(@"-(void) setDevices:(id)");
}

-(id) devices {
	%orig;
	NSLog(@"-(id) devices");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl12Subscription18SubscriptionStatus22SubscriptionStatusBody

-(void) setSubscriptionStatus:(id) {
	%orig;
	NSLog(@"-(void) setSubscriptionStatus:(id)");
}

-(id) subscriptionStatus {
	%orig;
	NSLog(@"-(id) subscriptionStatus");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

%end

%hook _TtCCC12SonosControl12PlayerVolume12PlayerVolume16PlayerVolumeBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl12PlayerVolume7SetMute11SetMuteBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl12PlayerVolume17SetRelativeVolume21SetRelativeVolumeBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl12PlayerVolume9SetVolume13SetVolumeBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession11SessionInfo15SessionInfoBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession12SessionError16SessionErrorBody

-(id) initWithErrorCode:(id) reason:(id) {
	%orig;
	NSLog(@"-(id) initWithErrorCode:(id) reason:(id)");
}

-(void) setErrorCode:(id) {
	%orig;
	NSLog(@"-(void) setErrorCode:(id)");
}

-(id) errorCode {
	%orig;
	NSLog(@"-(id) errorCode");
}

-(void) setReason:(id) {
	%orig;
	NSLog(@"-(void) setReason:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) reason {
	%orig;
	NSLog(@"-(id) reason");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession13SessionStatus17SessionStatusBody

-(void) setCustomData:(id) {
	%orig;
	NSLog(@"-(void) setCustomData:(id)");
}

-(id) customData {
	%orig;
	NSLog(@"-(id) customData");
}

-(void) setSessionId:(id) {
	%orig;
	NSLog(@"-(void) setSessionId:(id)");
}

-(id) sessionId {
	%orig;
	NSLog(@"-(id) sessionId");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) sessionState {
	%orig;
	NSLog(@"-(id) sessionState");
}

-(void) setSessionState:(id) {
	%orig;
	NSLog(@"-(void) setSessionState:(id)");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession4Seek8SeekBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession20SkipToItemWithWindow24SkipToItemWithWindowBody

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) window {
	%orig;
	NSLog(@"-(id) window");
}

-(void) setWindow:(id) {
	%orig;
	NSLog(@"-(void) setWindow:(id)");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession10SkipToItem14SkipToItemBody

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) queueVersion {
	%orig;
	NSLog(@"-(id) queueVersion");
}

-(void) setQueueVersion:(id) {
	%orig;
	NSLog(@"-(void) setQueueVersion:(id)");
}

-(id) trackMetadata {
	%orig;
	NSLog(@"-(id) trackMetadata");
}

-(void) setTrackMetadata:(id) {
	%orig;
	NSLog(@"-(void) setTrackMetadata:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession19LoadProgrammedRadio23LoadProgrammedRadioBody

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setStationMetadata:(id) {
	%orig;
	NSLog(@"-(void) setStationMetadata:(id)");
}

-(id) stationMetadata {
	%orig;
	NSLog(@"-(id) stationMetadata");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setStationId:(id) {
	%orig;
	NSLog(@"-(void) setStationId:(id)");
}

-(id) stationId {
	%orig;
	NSLog(@"-(id) stationId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession24LoadCloudQueueWithWindow28LoadCloudQueueWithWindowBody

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) queueBaseUrl {
	%orig;
	NSLog(@"-(id) queueBaseUrl");
}

-(void) setQueueBaseUrl:(id) {
	%orig;
	NSLog(@"-(void) setQueueBaseUrl:(id)");
}

-(id) httpAuthorization {
	%orig;
	NSLog(@"-(id) httpAuthorization");
}

-(void) setHttpAuthorization:(id) {
	%orig;
	NSLog(@"-(void) setHttpAuthorization:(id)");
}

-(void) setAccountId:(id) {
	%orig;
	NSLog(@"-(void) setAccountId:(id)");
}

-(id) accountId {
	%orig;
	NSLog(@"-(id) accountId");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) window {
	%orig;
	NSLog(@"-(id) window");
}

-(void) setWindow:(id) {
	%orig;
	NSLog(@"-(void) setWindow:(id)");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession13LoadStreamUrl17LoadStreamUrlBody

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setStationMetadata:(id) {
	%orig;
	NSLog(@"-(void) setStationMetadata:(id)");
}

-(id) streamUrl {
	%orig;
	NSLog(@"-(id) streamUrl");
}

-(void) setStreamUrl:(id) {
	%orig;
	NSLog(@"-(void) setStreamUrl:(id)");
}

-(id) stationMetadata {
	%orig;
	NSLog(@"-(id) stationMetadata");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession14LoadCloudQueue18LoadCloudQueueBody

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) queueVersion {
	%orig;
	NSLog(@"-(id) queueVersion");
}

-(void) setQueueVersion:(id) {
	%orig;
	NSLog(@"-(void) setQueueVersion:(id)");
}

-(id) queueBaseUrl {
	%orig;
	NSLog(@"-(id) queueBaseUrl");
}

-(void) setQueueBaseUrl:(id) {
	%orig;
	NSLog(@"-(void) setQueueBaseUrl:(id)");
}

-(id) httpAuthorization {
	%orig;
	NSLog(@"-(id) httpAuthorization");
}

-(void) setHttpAuthorization:(id) {
	%orig;
	NSLog(@"-(void) setHttpAuthorization:(id)");
}

-(id) trackMetadata {
	%orig;
	NSLog(@"-(id) trackMetadata");
}

-(void) setTrackMetadata:(id) {
	%orig;
	NSLog(@"-(void) setTrackMetadata:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession7Suspend11SuspendBody

-(id) queueVersion {
	%orig;
	NSLog(@"-(id) queueVersion");
}

-(void) setQueueVersion:(id) {
	%orig;
	NSLog(@"-(void) setQueueVersion:(id)");
}

-(id) initWithQueueVersion:(id) {
	%orig;
	NSLog(@"-(id) initWithQueueVersion:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession13CreateSession17CreateSessionBody

-(id) initWithAppId:(id) appContext:(id) accountId:(id) customData:(id) {
	%orig;
	NSLog(@"-(id) initWithAppId:(id) appContext:(id) accountId:(id) customData:(id)");
}

-(void) setCustomData:(id) {
	%orig;
	NSLog(@"-(void) setCustomData:(id)");
}

-(id) customData {
	%orig;
	NSLog(@"-(id) customData");
}

-(void) setAppId:(id) {
	%orig;
	NSLog(@"-(void) setAppId:(id)");
}

-(void) setAppContext:(id) {
	%orig;
	NSLog(@"-(void) setAppContext:(id)");
}

-(void) setAccountId:(id) {
	%orig;
	NSLog(@"-(void) setAccountId:(id)");
}

-(id) accountId {
	%orig;
	NSLog(@"-(id) accountId");
}

-(id) appContext {
	%orig;
	NSLog(@"-(id) appContext");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) appId {
	%orig;
	NSLog(@"-(id) appId");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession11JoinSession15JoinSessionBody

-(id) initWithAppId:(id) appContext:(id) {
	%orig;
	NSLog(@"-(id) initWithAppId:(id) appContext:(id)");
}

-(void) setAppId:(id) {
	%orig;
	NSLog(@"-(void) setAppId:(id)");
}

-(void) setAppContext:(id) {
	%orig;
	NSLog(@"-(void) setAppContext:(id)");
}

-(id) appContext {
	%orig;
	NSLog(@"-(id) appContext");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) appId {
	%orig;
	NSLog(@"-(id) appId");
}

%end

%hook _TtCCC12SonosControl15PlaybackSession19JoinOrCreateSession23JoinOrCreateSessionBody

-(id) initWithAppId:(id) appContext:(id) accountId:(id) customData:(id) {
	%orig;
	NSLog(@"-(id) initWithAppId:(id) appContext:(id) accountId:(id) customData:(id)");
}

-(void) setCustomData:(id) {
	%orig;
	NSLog(@"-(void) setCustomData:(id)");
}

-(id) customData {
	%orig;
	NSLog(@"-(id) customData");
}

-(void) setAppId:(id) {
	%orig;
	NSLog(@"-(void) setAppId:(id)");
}

-(void) setAppContext:(id) {
	%orig;
	NSLog(@"-(void) setAppContext:(id)");
}

-(void) setAccountId:(id) {
	%orig;
	NSLog(@"-(void) setAccountId:(id)");
}

-(id) accountId {
	%orig;
	NSLog(@"-(id) accountId");
}

-(id) appContext {
	%orig;
	NSLog(@"-(id) appContext");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) appId {
	%orig;
	NSLog(@"-(id) appId");
}

%end

%hook _TtCCC12SonosControl16PlaybackMetadata14MetadataStatus18MetadataStatusBody

-(void) setNextItem:(id) {
	%orig;
	NSLog(@"-(void) setNextItem:(id)");
}

-(id) initWithContainer:(id) currentItem:(id) nextItem:(id) {
	%orig;
	NSLog(@"-(id) initWithContainer:(id) currentItem:(id) nextItem:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) nextItem {
	%orig;
	NSLog(@"-(id) nextItem");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) currentItem {
	%orig;
	NSLog(@"-(id) currentItem");
}

-(void) setCurrentItem:(id) {
	%orig;
	NSLog(@"-(void) setCurrentItem:(id)");
}

-(id) container {
	%orig;
	NSLog(@"-(id) container");
}

-(void) setContainer:(id) {
	%orig;
	NSLog(@"-(void) setContainer:(id)");
}

%end

%hook _TtCCC12SonosControl16PlaybackMetadata4Rate8RateBody

-(id) initWithItemId:(id) type:(id) connotation:(id) {
	%orig;
	NSLog(@"-(id) initWithItemId:(id) type:(id) connotation:(id)");
}

-(id) rating {
	%orig;
	NSLog(@"-(id) rating");
}

-(void) setRating:(id) {
	%orig;
	NSLog(@"-(void) setRating:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl8Playback13PlaybackError17PlaybackErrorBody

-(id) queueVersion {
	%orig;
	NSLog(@"-(id) queueVersion");
}

-(void) setQueueVersion:(id) {
	%orig;
	NSLog(@"-(void) setQueueVersion:(id)");
}

-(void) setErrorCode:(id) {
	%orig;
	NSLog(@"-(void) setErrorCode:(id)");
}

-(id) errorCode {
	%orig;
	NSLog(@"-(id) errorCode");
}

-(id) httpHeaders {
	%orig;
	NSLog(@"-(id) httpHeaders");
}

-(void) setHttpHeaders:(id) {
	%orig;
	NSLog(@"-(void) setHttpHeaders:(id)");
}

-(void) setReason:(id) {
	%orig;
	NSLog(@"-(void) setReason:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) reason {
	%orig;
	NSLog(@"-(id) reason");
}

%end

%hook _TtCCC12SonosControl8Playback14PlaybackStatus18PlaybackStatusBody

-(id) playModes {
	%orig;
	NSLog(@"-(id) playModes");
}

-(void) setPlayModes:(id) {
	%orig;
	NSLog(@"-(void) setPlayModes:(id)");
}

-(id) availablePlaybackActions {
	%orig;
	NSLog(@"-(id) availablePlaybackActions");
}

-(void) setAvailablePlaybackActions:(id) {
	%orig;
	NSLog(@"-(void) setAvailablePlaybackActions:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) queueVersion {
	%orig;
	NSLog(@"-(id) queueVersion");
}

-(void) setQueueVersion:(id) {
	%orig;
	NSLog(@"-(void) setQueueVersion:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setItemId:(id) {
	%orig;
	NSLog(@"-(void) setItemId:(id)");
}

-(id) itemId {
	%orig;
	NSLog(@"-(id) itemId");
}

-(id) playbackState {
	%orig;
	NSLog(@"-(id) playbackState");
}

-(void) setPlaybackState:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackState:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl8Playback12SetPlayModes16SetPlayModesBody

-(id) playModes {
	%orig;
	NSLog(@"-(id) playModes");
}

-(void) setPlayModes:(id) {
	%orig;
	NSLog(@"-(void) setPlayModes:(id)");
}

-(id) initWithPlayModes:(id) {
	%orig;
	NSLog(@"-(id) initWithPlayModes:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl20MusicServiceAccounts19MusicServiceAccount23MusicServiceAccountBody

-(id) userIdHashCode {
	%orig;
	NSLog(@"-(id) userIdHashCode");
}

-(void) setUserIdHashCode:(id) {
	%orig;
	NSLog(@"-(void) setUserIdHashCode:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) service {
	%orig;
	NSLog(@"-(id) service");
}

-(void) setService:(id) {
	%orig;
	NSLog(@"-(void) setService:(id)");
}

-(id) nickname {
	%orig;
	NSLog(@"-(id) nickname");
}

-(void) setNickname:(id) {
	%orig;
	NSLog(@"-(void) setNickname:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl20MusicServiceAccounts5Match9MatchBody

-(id) userIdHashCode {
	%orig;
	NSLog(@"-(id) userIdHashCode");
}

-(void) setUserIdHashCode:(id) {
	%orig;
	NSLog(@"-(void) setUserIdHashCode:(id)");
}

-(id) linkCode {
	%orig;
	NSLog(@"-(id) linkCode");
}

-(void) setLinkCode:(id) {
	%orig;
	NSLog(@"-(void) setLinkCode:(id)");
}

-(id) initWithUserIdHashCode:(id) nickname:(id) serviceId:(id) linkCode:(id) {
	%orig;
	NSLog(@"-(id) initWithUserIdHashCode:(id) nickname:(id) serviceId:(id) linkCode:(id)");
}

-(id) nickname {
	%orig;
	NSLog(@"-(id) nickname");
}

-(void) setNickname:(id) {
	%orig;
	NSLog(@"-(void) setNickname:(id)");
}

-(id) serviceId {
	%orig;
	NSLog(@"-(id) serviceId");
}

-(void) setServiceId:(id) {
	%orig;
	NSLog(@"-(void) setServiceId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl11GroupVolume11GroupVolume15GroupVolumeBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl11GroupVolume7SetMute11SetMuteBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl11GroupVolume17SetRelativeVolume21SetRelativeVolumeBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl11GroupVolume9SetVolume13SetVolumeBody

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCCC12SonosControl6Groups18ModifyGroupMembers22ModifyGroupMembersBody

-(id) playerIdsToAdd {
	%orig;
	NSLog(@"-(id) playerIdsToAdd");
}

-(void) setPlayerIdsToAdd:(id) {
	%orig;
	NSLog(@"-(void) setPlayerIdsToAdd:(id)");
}

-(id) playerIdsToRemove {
	%orig;
	NSLog(@"-(id) playerIdsToRemove");
}

-(void) setPlayerIdsToRemove:(id) {
	%orig;
	NSLog(@"-(void) setPlayerIdsToRemove:(id)");
}

-(id) initWithPlayerIdsToAdd:(id) playerIdsToRemove:(id) {
	%orig;
	NSLog(@"-(id) initWithPlayerIdsToAdd:(id) playerIdsToRemove:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl6Groups15SetGroupMembers19SetGroupMembersBody

-(id) playerIds {
	%orig;
	NSLog(@"-(id) playerIds");
}

-(void) setPlayerIds:(id) {
	%orig;
	NSLog(@"-(void) setPlayerIds:(id)");
}

-(id) initWithPlayerIds:(id) {
	%orig;
	NSLog(@"-(id) initWithPlayerIds:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl6Groups11CreateGroup15CreateGroupBody

-(id) playerIds {
	%orig;
	NSLog(@"-(id) playerIds");
}

-(void) setPlayerIds:(id) {
	%orig;
	NSLog(@"-(void) setPlayerIds:(id)");
}

-(id) musicContextGroupId {
	%orig;
	NSLog(@"-(id) musicContextGroupId");
}

-(void) setMusicContextGroupId:(id) {
	%orig;
	NSLog(@"-(void) setMusicContextGroupId:(id)");
}

-(id) initWithPlayerIds:(id) musicContextGroupId:(id) {
	%orig;
	NSLog(@"-(id) initWithPlayerIds:(id) musicContextGroupId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCCC12SonosControl6Groups9GroupInfo14GroupsInfoBody

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) group {
	%orig;
	NSLog(@"-(id) group");
}

-(void) setGroup:(id) {
	%orig;
	NSLog(@"-(void) setGroup:(id)");
}

%end

%hook _TtCCC12SonosControl6Groups12GroupsStatus16GroupsStatusBody

-(id) initWithGroups:(id) players:(id) {
	%orig;
	NSLog(@"-(id) initWithGroups:(id) players:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setPlayers:(id) {
	%orig;
	NSLog(@"-(void) setPlayers:(id)");
}

-(id) players {
	%orig;
	NSLog(@"-(id) players");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) groups {
	%orig;
	NSLog(@"-(id) groups");
}

-(void) setGroups:(id) {
	%orig;
	NSLog(@"-(void) setGroups:(id)");
}

%end

%hook SonosControl.GlobalError

-(id) initWithErrorCode:(id) reason:(id) {
	%orig;
	NSLog(@"-(id) initWithErrorCode:(id) reason:(id)");
}

-(void) setErrorCode:(id) {
	%orig;
	NSLog(@"-(void) setErrorCode:(id)");
}

-(id) errorCode {
	%orig;
	NSLog(@"-(id) errorCode");
}

-(void) setReason:(id) {
	%orig;
	NSLog(@"-(void) setReason:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) reason {
	%orig;
	NSLog(@"-(id) reason");
}

%end

%hook _TtCCC12SonosControl6Global23GroupCoordinatorChanged27GroupCoordinatorChangedBody

-(id) groupStatus {
	%orig;
	NSLog(@"-(id) groupStatus");
}

-(void) setGroupStatus:(id) {
	%orig;
	NSLog(@"-(void) setGroupStatus:(id)");
}

-(id) websocketUrl {
	%orig;
	NSLog(@"-(id) websocketUrl");
}

-(void) setWebsocketUrl:(id) {
	%orig;
	NSLog(@"-(void) setWebsocketUrl:(id)");
}

-(void) setPlayerId:(id) {
	%orig;
	NSLog(@"-(void) setPlayerId:(id)");
}

-(id) initWithGroupId:(id) groupStatus:(id) groupName:(id) websocketUrl:(id) playerId:(id) {
	%orig;
	NSLog(@"-(id) initWithGroupId:(id) groupStatus:(id) groupName:(id) websocketUrl:(id) playerId:(id)");
}

-(id) groupId {
	%orig;
	NSLog(@"-(id) groupId");
}

-(void) setGroupId:(id) {
	%orig;
	NSLog(@"-(void) setGroupId:(id)");
}

-(id) playerId {
	%orig;
	NSLog(@"-(id) playerId");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setGroupName:(id) {
	%orig;
	NSLog(@"-(void) setGroupName:(id)");
}

-(id) groupName {
	%orig;
	NSLog(@"-(id) groupName");
}

%end

%hook _TtCCC12SonosControl12ClientStatus12ClientStatus16ClientStatusBody

-(id) cloudSubscriptions {
	%orig;
	NSLog(@"-(id) cloudSubscriptions");
}

-(void) setCloudSubscriptions:(id) {
	%orig;
	NSLog(@"-(void) setCloudSubscriptions:(id)");
}

-(id) initWithCloudSubscriptions:(id) {
	%orig;
	NSLog(@"-(id) initWithCloudSubscriptions:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosControl.BaseMessage

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCC12SonosControl8Topology23CloudRegistrationStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Topology14TopologyStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Topology17GetTopologyStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Topology11Unsubscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Topology9Subscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12Subscription18SubscriptionStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12PlayerVolume12PlayerVolume

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12PlayerVolume9GetVolume

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12PlayerVolume7SetMute

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12PlayerVolume17SetRelativeVolume

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12PlayerVolume9SetVolume

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12PlayerVolume11Unsubscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12PlayerVolume9Subscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession11SessionInfo

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession12SessionError

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession13SessionStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession4Seek

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession20SkipToItemWithWindow

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession10SkipToItem

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession19LoadProgrammedRadio

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession17RefreshCloudQueue

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession24LoadCloudQueueWithWindow

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession13LoadStreamUrl

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession14LoadCloudQueue

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession12LeaveSession

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession7Suspend

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession13CreateSession

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession13RejoinSession

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession11JoinSession

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession19JoinOrCreateSession

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession11Unsubscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl15PlaybackSession9Subscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl16PlaybackMetadata14MetadataStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl16PlaybackMetadata4Rate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl16PlaybackMetadata11Unsubscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl16PlaybackMetadata9Subscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback13PlaybackError

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback14PlaybackStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback19SkipToPreviousTrack

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback15SkipToNextTrack

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback12SetPlayModes

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback5Pause

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback4Play

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback17GetPlaybackStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback11Unsubscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl8Playback9Subscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl20MusicServiceAccounts19MusicServiceAccount

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl20MusicServiceAccounts5Match

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl11GroupVolume11GroupVolume

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl11GroupVolume9GetVolume

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl11GroupVolume7SetMute

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl11GroupVolume17SetRelativeVolume

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl11GroupVolume9SetVolume

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl11GroupVolume11Unsubscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl11GroupVolume9Subscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups18ModifyGroupMembers

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups15SetGroupMembers

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups11CreateGroup

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups9GroupInfo

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups9GetGroups

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups12GroupsStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups11Unsubscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Groups9Subscribe

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook SonosControl.GlobalErrorMessage

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl6Global23GroupCoordinatorChanged

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12ClientStatus12ClientStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12ClientStatus10Deactivate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12ClientStatus8Activate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook _TtCC12SonosControl12ClientStatus9GetStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook SonosControl.AudioBook

-(void) setBook:(id) {
	%orig;
	NSLog(@"-(void) setBook:(id)");
}

-(id) getParameters {
	%orig;
	NSLog(@"-(id) getParameters");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(id) author {
	%orig;
	NSLog(@"-(id) author");
}

-(void) setAuthor:(id) {
	%orig;
	NSLog(@"-(void) setAuthor:(id)");
}

-(id) trackType {
	%orig;
	NSLog(@"-(id) trackType");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(id) narrator {
	%orig;
	NSLog(@"-(id) narrator");
}

-(void) setNarrator:(id) {
	%orig;
	NSLog(@"-(void) setNarrator:(id)");
}

-(id) book {
	%orig;
	NSLog(@"-(id) book");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

%end

%hook SonosControl.Artist

-(id) initWithName:(id) id:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) id:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setTags:(id) {
	%orig;
	NSLog(@"-(void) setTags:(id)");
}

-(id) tags {
	%orig;
	NSLog(@"-(id) tags");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

%end

%hook SonosControl.Album

-(id) initWithName:(id) artist:(id) id:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) artist:(id) id:(id)");
}

-(id) getParameterTypes {
	%orig;
	NSLog(@"-(id) getParameterTypes");
}

-(id) artist {
	%orig;
	NSLog(@"-(id) artist");
}

-(void) setArtist:(id) {
	%orig;
	NSLog(@"-(void) setArtist:(id)");
}

-(void) setValue:(id) forUndefinedKey:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forUndefinedKey:(id)");
}

-(void) setTags:(id) {
	%orig;
	NSLog(@"-(void) setTags:(id)");
}

-(id) tags {
	%orig;
	NSLog(@"-(id) tags");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

%end

%hook SDLURLSession

+(id) defaultSession {
	%orig;
	NSLog(@"+(id) defaultSession");
}

-(void) dataFromURL:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) dataFromURL:(id) completionHandler:(id)");
}

-(void) uploadWithURLRequest:(id) data:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) uploadWithURLRequest:(id) data:(id) completionHandler:(id)");
}

-(id) activeTasks {
	%orig;
	NSLog(@"-(id) activeTasks");
}

-(void) setActiveTasks:(id) {
	%orig;
	NSLog(@"-(void) setActiveTasks:(id)");
}

-(unsigned long long) cachePolicy {
	%orig;
	NSLog(@"-(unsigned long long) cachePolicy");
}

-(void) setCachePolicy:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCachePolicy:(unsigned long long)");
}

-(double) connectionTimeout {
	%orig;
	NSLog(@"-(double) connectionTimeout");
}

-(void) setConnectionTimeout:(double) {
	%orig;
	NSLog(@"-(void) setConnectionTimeout:(double)");
}

-(void) taskDidFinish:(id) {
	%orig;
	NSLog(@"-(void) taskDidFinish:(id)");
}

-(void) cancelAllTasks {
	%orig;
	NSLog(@"-(void) cancelAllTasks");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook SDLURLRequestTask

+(id) taskWithURLRequest:(id) completionHandler:(id) {
	%orig;
	NSLog(@"+(id) taskWithURLRequest:(id) completionHandler:(id)");
}

-(id) initWithURLRequest:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) initWithURLRequest:(id) completionHandler:(id)");
}

-(void) sdl_addData:(id) {
	%orig;
	NSLog(@"-(void) sdl_addData:(id)");
}

-(void) setResponse:(id) {
	%orig;
	NSLog(@"-(void) setResponse:(id)");
}

-(void) setMutableData:(id) {
	%orig;
	NSLog(@"-(void) setMutableData:(id)");
}

-(id) mutableData {
	%orig;
	NSLog(@"-(id) mutableData");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(unsigned long long) state {
	%orig;
	NSLog(@"-(unsigned long long) state");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setState:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setState:(unsigned long long)");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) completionHandler {
	%orig;
	NSLog(@"-(id) completionHandler");
}

-(void) setCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setCompletionHandler:(id)");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

-(id) connection {
	%orig;
	NSLog(@"-(id) connection");
}

-(void) setConnection:(id) {
	%orig;
	NSLog(@"-(void) setConnection:(id)");
}

-(void) connection:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didFailWithError:(id)");
}

-(void) connection:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveData:(id)");
}

-(void) connectionDidFinishLoading:(id) {
	%orig;
	NSLog(@"-(void) connectionDidFinishLoading:(id)");
}

-(void) connection:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveResponse:(id)");
}

%end

%hook SDLTTSChunkFactory

+(id) buildTTSChunkForString:(id) type:(id) {
	%orig;
	NSLog(@"+(id) buildTTSChunkForString:(id) type:(id)");
}

+(id) buildTTSChunksFromSimple:(id) {
	%orig;
	NSLog(@"+(id) buildTTSChunksFromSimple:(id)");
}

%end

%hook SDLTimer

-(bool) timerRunning {
	%orig;
	NSLog(@"-(bool) timerRunning");
}

-(void) setTimerRunning:(bool) {
	%orig;
	NSLog(@"-(void) setTimerRunning:(bool)");
}

-(id) initWithDuration:(float) repeat:(bool) {
	%orig;
	NSLog(@"-(id) initWithDuration:(float) repeat:(bool)");
}

-(void) setElapsedBlock:(id) {
	%orig;
	NSLog(@"-(void) setElapsedBlock:(id)");
}

-(void) stopAndDestroyTimer {
	%orig;
	NSLog(@"-(void) stopAndDestroyTimer");
}

-(void) timerElapsed {
	%orig;
	NSLog(@"-(void) timerElapsed");
}

-(id) canceledBlock {
	%orig;
	NSLog(@"-(id) canceledBlock");
}

-(id) elapsedBlock {
	%orig;
	NSLog(@"-(id) elapsedBlock");
}

-(void) setCanceledBlock:(id) {
	%orig;
	NSLog(@"-(void) setCanceledBlock:(id)");
}

-(bool) repeat {
	%orig;
	NSLog(@"-(bool) repeat");
}

-(void) setRepeat:(bool) {
	%orig;
	NSLog(@"-(void) setRepeat:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDuration:(float) {
	%orig;
	NSLog(@"-(void) setDuration:(float)");
}

-(float) duration {
	%orig;
	NSLog(@"-(float) duration");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) initWithDuration:(float) {
	%orig;
	NSLog(@"-(id) initWithDuration:(float)");
}

-(void) setTimer:(id) {
	%orig;
	NSLog(@"-(void) setTimer:(id)");
}

-(id) timer {
	%orig;
	NSLog(@"-(id) timer");
}

%end

%hook SDLStreamingMediaManager

+(id) sdl_streamingDataSerialQueue {
	%orig;
	NSLog(@"+(id) sdl_streamingDataSerialQueue");
}

+(id) sdl_encodeElementaryStreamWithSampleBuffer:(opaqueCMSampleBuffer*) {
	%orig;
	NSLog(@"+(id) sdl_encodeElementaryStreamWithSampleBuffer:(opaqueCMSampleBuffer*)");
}

-(void) handleProtocolStartSessionACK:(unsigned char) sessionID:(unsigned char) version:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolStartSessionACK:(unsigned char) sessionID:(unsigned char) version:(unsigned char)");
}

-(void) handleProtocolStartSessionNACK:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolStartSessionNACK:(unsigned char)");
}

-(void) handleProtocolEndSessionACK:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolEndSessionACK:(unsigned char)");
}

-(void) handleProtocolEndSessionNACK:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolEndSessionNACK:(unsigned char)");
}

-(void) setVideoStartBlock:(id) {
	%orig;
	NSLog(@"-(void) setVideoStartBlock:(id)");
}

-(bool) videoSessionConnected {
	%orig;
	NSLog(@"-(bool) videoSessionConnected");
}

-(void) setAudioStartBlock:(id) {
	%orig;
	NSLog(@"-(void) setAudioStartBlock:(id)");
}

-(bool) audioSessionConnected {
	%orig;
	NSLog(@"-(bool) audioSessionConnected");
}

-(unsigned long long) currentFrameNumber {
	%orig;
	NSLog(@"-(unsigned long long) currentFrameNumber");
}

-(void) setCurrentFrameNumber:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCurrentFrameNumber:(unsigned long long)");
}

-(void) setAudioSessionConnected:(bool) {
	%orig;
	NSLog(@"-(void) setAudioSessionConnected:(bool)");
}

-(id) audioStartBlock {
	%orig;
	NSLog(@"-(id) audioStartBlock");
}

-(bool) sdl_configureVideoEncoderWithError:(id*) {
	%orig;
	NSLog(@"-(bool) sdl_configureVideoEncoderWithError:(id*)");
}

-(void) sdl_teardownCompressionSession {
	%orig;
	NSLog(@"-(void) sdl_teardownCompressionSession");
}

-(id) videoStartBlock {
	%orig;
	NSLog(@"-(id) videoStartBlock");
}

-(void) setVideoSessionConnected:(bool) {
	%orig;
	NSLog(@"-(void) setVideoSessionConnected:(bool)");
}

-(void) startVideoSessionWithStartBlock:(id) {
	%orig;
	NSLog(@"-(void) startVideoSessionWithStartBlock:(id)");
}

-(void) stopVideoSession {
	%orig;
	NSLog(@"-(void) stopVideoSession");
}

-(void) startAudioStreamingWithStartBlock:(id) {
	%orig;
	NSLog(@"-(void) startAudioStreamingWithStartBlock:(id)");
}

-(bool) sendVideoData:(__CVBuffer*) {
	%orig;
	NSLog(@"-(bool) sendVideoData:(__CVBuffer*)");
}

-(bool) sendAudioData:(id) {
	%orig;
	NSLog(@"-(bool) sendAudioData:(id)");
}

-(OpaqueVTCompressionSession*) compressionSession {
	%orig;
	NSLog(@"-(OpaqueVTCompressionSession*) compressionSession");
}

-(void) setCompressionSession:(OpaqueVTCompressionSession*) {
	%orig;
	NSLog(@"-(void) setCompressionSession:(OpaqueVTCompressionSession*)");
}

-(void) setProtocol:(id) {
	%orig;
	NSLog(@"-(void) setProtocol:(id)");
}

-(id) initWithProtocol:(id) {
	%orig;
	NSLog(@"-(id) initWithProtocol:(id)");
}

-(void) stopAudioSession {
	%orig;
	NSLog(@"-(void) stopAudioSession");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) protocol {
	%orig;
	NSLog(@"-(id) protocol");
}

%end

%hook SDLStreamDelegate

-(void) setStreamErrorHandler:(id) {
	%orig;
	NSLog(@"-(void) setStreamErrorHandler:(id)");
}

-(void) setStreamOpenHandler:(id) {
	%orig;
	NSLog(@"-(void) setStreamOpenHandler:(id)");
}

-(id) streamOpenHandler {
	%orig;
	NSLog(@"-(id) streamOpenHandler");
}

-(id) streamHasBytesHandler {
	%orig;
	NSLog(@"-(id) streamHasBytesHandler");
}

-(id) streamHasSpaceHandler {
	%orig;
	NSLog(@"-(id) streamHasSpaceHandler");
}

-(id) streamErrorHandler {
	%orig;
	NSLog(@"-(id) streamErrorHandler");
}

-(id) streamEndHandler {
	%orig;
	NSLog(@"-(id) streamEndHandler");
}

-(void) setStreamHasBytesHandler:(id) {
	%orig;
	NSLog(@"-(void) setStreamHasBytesHandler:(id)");
}

-(void) setStreamHasSpaceHandler:(id) {
	%orig;
	NSLog(@"-(void) setStreamHasSpaceHandler:(id)");
}

-(void) setStreamEndHandler:(id) {
	%orig;
	NSLog(@"-(void) setStreamEndHandler:(id)");
}

-(void) stream:(id) handleEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) stream:(id) handleEvent:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook SDLSiphonServer

+(bool) _siphonNSLogData:(id) {
	%orig;
	NSLog(@"+(bool) _siphonNSLogData:(id)");
}

+(void) enableSiphonDebug {
	%orig;
	NSLog(@"+(void) enableSiphonDebug");
}

+(void) disableSiphonDebug {
	%orig;
	NSLog(@"+(void) disableSiphonDebug");
}

+(bool) _siphonIsActive {
	%orig;
	NSLog(@"+(bool) _siphonIsActive");
}

+(bool) _siphonFormattedTraceData:(id) {
	%orig;
	NSLog(@"+(bool) _siphonFormattedTraceData:(id)");
}

+(bool) _siphonRawTransportDataFromApp:(const void*) msgBytesLength:(int) {
	%orig;
	NSLog(@"+(bool) _siphonRawTransportDataFromApp:(const void*) msgBytesLength:(int)");
}

+(bool) _siphonRawTransportDataFromSDL:(const void*) msgBytesLength:(int) {
	%orig;
	NSLog(@"+(bool) _siphonRawTransportDataFromSDL:(const void*) msgBytesLength:(int)");
}

+(void) init {
	%orig;
	NSLog(@"+(void) init");
}

+(void) dealloc {
	%orig;
	NSLog(@"+(void) dealloc");
}

%end

%hook SDLRPCRequestFactory

+(id) buildSpeakWithTTS:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSpeakWithTTS:(id) correlationID:(id)");
}

+(id) buildShowWithMainField1:(id) mainField2:(id) mainField3:(id) mainField4:(id) statusBar:(id) mediaClock:(id) mediaTrack:(id) alignment:(id) graphic:(id) softButtons:(id) customPresets:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildShowWithMainField1:(id) mainField2:(id) mainField3:(id) mainField4:(id) statusBar:(id) mediaClock:(id) mediaTrack:(id) alignment:(id) graphic:(id) softButtons:(id) customPresets:(id) correlationID:(id)");
}

+(id) buildSetMediaClockTimerWithHours:(id) minutes:(id) seconds:(id) updateMode:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSetMediaClockTimerWithHours:(id) minutes:(id) seconds:(id) updateMode:(id) correlationID:(id)");
}

+(id) buildRegisterAppInterfaceWithAppName:(id) languageDesired:(id) appID:(id) {
	%orig;
	NSLog(@"+(id) buildRegisterAppInterfaceWithAppName:(id) languageDesired:(id) appID:(id)");
}

+(id) buildSetGlobalPropertiesWithHelpText:(id) timeoutText:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSetGlobalPropertiesWithHelpText:(id) timeoutText:(id) correlationID:(id)");
}

+(id) buildSubscribeButtonWithName:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSubscribeButtonWithName:(id) correlationID:(id)");
}

+(id) buildAddCommandWithID:(id) menuName:(id) parentID:(id) position:(id) vrCommands:(id) iconValue:(id) iconType:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAddCommandWithID:(id) menuName:(id) parentID:(id) position:(id) vrCommands:(id) iconValue:(id) iconType:(id) correlationID:(id)");
}

+(id) buildAddCommandWithID:(id) menuName:(id) vrCommands:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAddCommandWithID:(id) menuName:(id) vrCommands:(id) correlationID:(id)");
}

+(id) buildAddSubMenuWithID:(id) menuName:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAddSubMenuWithID:(id) menuName:(id) correlationID:(id)");
}

+(id) buildAlertWithAlertText1:(id) alertText2:(id) duration:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertWithAlertText1:(id) alertText2:(id) duration:(id) correlationID:(id)");
}

+(id) buildAlertWithTTS:(id) alertText1:(id) alertText2:(id) playTone:(id) duration:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertWithTTS:(id) alertText1:(id) alertText2:(id) playTone:(id) duration:(id) correlationID:(id)");
}

+(id) buildPerformInteractionWithInitialPrompt:(id) initialText:(id) interactionChoiceSetIDList:(id) helpPrompt:(id) timeoutPrompt:(id) interactionMode:(id) timeout:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildPerformInteractionWithInitialPrompt:(id) initialText:(id) interactionChoiceSetIDList:(id) helpPrompt:(id) timeoutPrompt:(id) interactionMode:(id) timeout:(id) correlationID:(id)");
}

+(id) buildDeleteCommandWithID:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildDeleteCommandWithID:(id) correlationID:(id)");
}

+(id) buildCreateInteractionChoiceSetWithID:(id) choiceSet:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildCreateInteractionChoiceSetWithID:(id) choiceSet:(id) correlationID:(id)");
}

+(id) buildDeleteInteractionChoiceSetWithID:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildDeleteInteractionChoiceSetWithID:(id) correlationID:(id)");
}

+(id) buildAddSubMenuWithID:(id) menuName:(id) position:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAddSubMenuWithID:(id) menuName:(id) position:(id) correlationID:(id)");
}

+(id) buildAlertWithTTSChunks:(id) alertText1:(id) alertText2:(id) alertText3:(id) playTone:(id) duration:(id) softButtons:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertWithTTSChunks:(id) alertText1:(id) alertText2:(id) alertText3:(id) playTone:(id) duration:(id) softButtons:(id) correlationID:(id)");
}

+(id) buildAlertWithTTS:(id) alertText1:(id) alertText2:(id) alertText3:(id) playTone:(id) duration:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertWithTTS:(id) alertText1:(id) alertText2:(id) alertText3:(id) playTone:(id) duration:(id) correlationID:(id)");
}

+(id) buildPerformInteractionWithInitialChunks:(id) initialText:(id) interactionChoiceSetIDList:(id) helpChunks:(id) timeoutChunks:(id) interactionMode:(id) timeout:(id) vrHelp:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildPerformInteractionWithInitialChunks:(id) initialText:(id) interactionChoiceSetIDList:(id) helpChunks:(id) timeoutChunks:(id) interactionMode:(id) timeout:(id) vrHelp:(id) correlationID:(id)");
}

+(id) buildPerformInteractionWithInitialPrompt:(id) initialText:(id) interactionChoiceSetIDList:(id) helpPrompt:(id) timeoutPrompt:(id) interactionMode:(id) timeout:(id) vrHelp:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildPerformInteractionWithInitialPrompt:(id) initialText:(id) interactionChoiceSetIDList:(id) helpPrompt:(id) timeoutPrompt:(id) interactionMode:(id) timeout:(id) vrHelp:(id) correlationID:(id)");
}

+(id) buildPerformInteractionWithInitialPrompt:(id) initialText:(id) interactionChoiceSetID:(id) vrHelp:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildPerformInteractionWithInitialPrompt:(id) initialText:(id) interactionChoiceSetID:(id) vrHelp:(id) correlationID:(id)");
}

+(id) buildPutFileWithFileName:(id) fileType:(id) persistentFile:(id) correlationId:(id) {
	%orig;
	NSLog(@"+(id) buildPutFileWithFileName:(id) fileType:(id) persistentFile:(id) correlationId:(id)");
}

+(id) sdl_buildDeviceInfo {
	%orig;
	NSLog(@"+(id) sdl_buildDeviceInfo");
}

+(id) buildRegisterAppInterfaceWithAppName:(id) ttsName:(id) vrSynonyms:(id) isMediaApp:(id) languageDesired:(id) hmiDisplayLanguageDesired:(id) appID:(id) {
	%orig;
	NSLog(@"+(id) buildRegisterAppInterfaceWithAppName:(id) ttsName:(id) vrSynonyms:(id) isMediaApp:(id) languageDesired:(id) hmiDisplayLanguageDesired:(id) appID:(id)");
}

+(id) buildRegisterAppInterfaceWithAppName:(id) isMediaApp:(id) languageDesired:(id) appID:(id) {
	%orig;
	NSLog(@"+(id) buildRegisterAppInterfaceWithAppName:(id) isMediaApp:(id) languageDesired:(id) appID:(id)");
}

+(id) buildShowWithMainField1:(id) mainField2:(id) statusBar:(id) mediaClock:(id) mediaTrack:(id) alignment:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildShowWithMainField1:(id) mainField2:(id) statusBar:(id) mediaClock:(id) mediaTrack:(id) alignment:(id) correlationID:(id)");
}

+(id) buildSliderDynamicFooterWithNumTicks:(id) position:(id) sliderHeader:(id) sliderFooter:(id) timeout:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSliderDynamicFooterWithNumTicks:(id) position:(id) sliderHeader:(id) sliderFooter:(id) timeout:(id) correlationID:(id)");
}

+(id) buildSpeakWithTTSChunks:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSpeakWithTTSChunks:(id) correlationID:(id)");
}

+(id) buildAddCommandWithID:(id) vrCommands:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAddCommandWithID:(id) vrCommands:(id) correlationID:(id)");
}

+(id) buildAlertWithTTS:(id) playTone:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertWithTTS:(id) playTone:(id) correlationID:(id)");
}

+(id) buildAlertWithTTSChunks:(id) playTone:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertWithTTSChunks:(id) playTone:(id) correlationID:(id)");
}

+(id) buildAlertWithAlertText1:(id) alertText2:(id) alertText3:(id) duration:(id) softButtons:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertWithAlertText1:(id) alertText2:(id) alertText3:(id) duration:(id) softButtons:(id) correlationID:(id)");
}

+(id) buildAlertWithAlertText1:(id) alertText2:(id) alertText3:(id) duration:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertWithAlertText1:(id) alertText2:(id) alertText3:(id) duration:(id) correlationID:(id)");
}

+(id) buildAlertManeuverwithTTSchunks:(id) softButtons:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildAlertManeuverwithTTSchunks:(id) softButtons:(id) correlationID:(id)");
}

+(id) buildChangeRegistrationWithLanguage:(id) hmiDisplayLanguage:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildChangeRegistrationWithLanguage:(id) hmiDisplayLanguage:(id) correlationID:(id)");
}

+(id) buildDeleteFileWithName:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildDeleteFileWithName:(id) correlationID:(id)");
}

+(id) buildDialNumberWithNumber:(id) {
	%orig;
	NSLog(@"+(id) buildDialNumberWithNumber:(id)");
}

+(id) buildListFilesWithCorrelationID:(id) {
	%orig;
	NSLog(@"+(id) buildListFilesWithCorrelationID:(id)");
}

+(id) buildDeleteSubMenuWithID:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildDeleteSubMenuWithID:(id) correlationID:(id)");
}

+(id) buildEndAudioPassThruWithCorrelationID:(id) {
	%orig;
	NSLog(@"+(id) buildEndAudioPassThruWithCorrelationID:(id)");
}

+(id) buildGetDTCsWithECUName:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildGetDTCsWithECUName:(id) correlationID:(id)");
}

+(id) buildGetVehicleDataWithGPS:(id) speed:(id) rpm:(id) fuelLevel:(id) fuelLevelState:(id) instantFuelConsumption:(id) externalTemperature:(id) vin:(id) prndl:(id) tirePressure:(id) odometer:(id) beltStatus:(id) bodyInformation:(id) deviceStatus:(id) driverBraking:(id) wiperStatus:(id) headLampStatus:(id) engineTorque:(id) accPedalPosition:(id) steeringWheelAngle:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildGetVehicleDataWithGPS:(id) speed:(id) rpm:(id) fuelLevel:(id) fuelLevelState:(id) instantFuelConsumption:(id) externalTemperature:(id) vin:(id) prndl:(id) tirePressure:(id) odometer:(id) beltStatus:(id) bodyInformation:(id) deviceStatus:(id) driverBraking:(id) wiperStatus:(id) headLampStatus:(id) engineTorque:(id) accPedalPosition:(id) steeringWheelAngle:(id) correlationID:(id)");
}

+(id) buildPerformAudioPassThruWithInitialPrompt:(id) audioPassThruDisplayText1:(id) audioPassThruDisplayText2:(id) samplingRate:(id) maxDuration:(id) bitsPerSample:(id) audioType:(id) muteAudio:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildPerformAudioPassThruWithInitialPrompt:(id) audioPassThruDisplayText1:(id) audioPassThruDisplayText2:(id) samplingRate:(id) maxDuration:(id) bitsPerSample:(id) audioType:(id) muteAudio:(id) correlationID:(id)");
}

+(id) buildPerformInteractionWithInitialPrompt:(id) initialText:(id) interactionChoiceSetID:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildPerformInteractionWithInitialPrompt:(id) initialText:(id) interactionChoiceSetID:(id) correlationID:(id)");
}

+(id) buildPutFileWithFileName:(id) fileType:(id) persisistentFile:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildPutFileWithFileName:(id) fileType:(id) persisistentFile:(id) correlationID:(id)");
}

+(id) buildReadDIDWithECUName:(id) didLocation:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildReadDIDWithECUName:(id) didLocation:(id) correlationID:(id)");
}

+(id) buildResetGlobalPropertiesWithProperties:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildResetGlobalPropertiesWithProperties:(id) correlationID:(id)");
}

+(id) buildScrollableMessage:(id) timeout:(id) softButtons:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildScrollableMessage:(id) timeout:(id) softButtons:(id) correlationID:(id)");
}

+(id) buildSendLocationWithLongitude:(id) latitude:(id) locationName:(id) locationDescription:(id) address:(id) phoneNumber:(id) image:(id) {
	%orig;
	NSLog(@"+(id) buildSendLocationWithLongitude:(id) latitude:(id) locationName:(id) locationDescription:(id) address:(id) phoneNumber:(id) image:(id)");
}

+(id) buildSetAppIconWithFileName:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSetAppIconWithFileName:(id) correlationID:(id)");
}

+(id) buildSetDisplayLayout:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSetDisplayLayout:(id) correlationID:(id)");
}

+(id) buildSetGlobalPropertiesWithHelpText:(id) timeoutText:(id) vrHelpTitle:(id) vrHelp:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSetGlobalPropertiesWithHelpText:(id) timeoutText:(id) vrHelpTitle:(id) vrHelp:(id) correlationID:(id)");
}

+(id) buildSetMediaClockTimerWithUpdateMode:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSetMediaClockTimerWithUpdateMode:(id) correlationID:(id)");
}

+(id) buildShowWithMainField1:(id) mainField2:(id) alignment:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildShowWithMainField1:(id) mainField2:(id) alignment:(id) correlationID:(id)");
}

+(id) buildShowConstantTBTWithString:(id) navigationText2:(id) eta:(id) timeToDestination:(id) totalDistance:(id) turnIcon:(id) nextTurnIcon:(id) distanceToManeuver:(id) distanceToManeuverScale:(id) maneuverComplete:(id) softButtons:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildShowConstantTBTWithString:(id) navigationText2:(id) eta:(id) timeToDestination:(id) totalDistance:(id) turnIcon:(id) nextTurnIcon:(id) distanceToManeuver:(id) distanceToManeuverScale:(id) maneuverComplete:(id) softButtons:(id) correlationID:(id)");
}

+(id) buildSliderStaticFooterWithNumTicks:(id) position:(id) sliderHeader:(id) sliderFooter:(id) timeout:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSliderStaticFooterWithNumTicks:(id) position:(id) sliderHeader:(id) sliderFooter:(id) timeout:(id) correlationID:(id)");
}

+(id) buildSubscribeVehicleDataWithGPS:(id) speed:(id) rpm:(id) fuelLevel:(id) fuelLevelState:(id) instantFuelConsumption:(id) externalTemperature:(id) prndl:(id) tirePressure:(id) odometer:(id) beltStatus:(id) bodyInformation:(id) deviceStatus:(id) driverBraking:(id) wiperStatus:(id) headLampStatus:(id) engineTorque:(id) accPedalPosition:(id) steeringWheelAngle:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildSubscribeVehicleDataWithGPS:(id) speed:(id) rpm:(id) fuelLevel:(id) fuelLevelState:(id) instantFuelConsumption:(id) externalTemperature:(id) prndl:(id) tirePressure:(id) odometer:(id) beltStatus:(id) bodyInformation:(id) deviceStatus:(id) driverBraking:(id) wiperStatus:(id) headLampStatus:(id) engineTorque:(id) accPedalPosition:(id) steeringWheelAngle:(id) correlationID:(id)");
}

+(id) buildUnregisterAppInterfaceWithCorrelationID:(id) {
	%orig;
	NSLog(@"+(id) buildUnregisterAppInterfaceWithCorrelationID:(id)");
}

+(id) buildUnsubscribeButtonWithName:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildUnsubscribeButtonWithName:(id) correlationID:(id)");
}

+(id) buildUnsubscribeVehicleDataWithGPS:(id) speed:(id) rpm:(id) fuelLevel:(id) fuelLevelState:(id) instantFuelConsumption:(id) externalTemperature:(id) prndl:(id) tirePressure:(id) odometer:(id) beltStatus:(id) bodyInformation:(id) deviceStatus:(id) driverBraking:(id) wiperStatus:(id) headLampStatus:(id) engineTorque:(id) accPedalPosition:(id) steeringWheelAngle:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildUnsubscribeVehicleDataWithGPS:(id) speed:(id) rpm:(id) fuelLevel:(id) fuelLevelState:(id) instantFuelConsumption:(id) externalTemperature:(id) prndl:(id) tirePressure:(id) odometer:(id) beltStatus:(id) bodyInformation:(id) deviceStatus:(id) driverBraking:(id) wiperStatus:(id) headLampStatus:(id) engineTorque:(id) accPedalPosition:(id) steeringWheelAngle:(id) correlationID:(id)");
}

+(id) buildUpdateTurnListWithTurnList:(id) softButtons:(id) correlationID:(id) {
	%orig;
	NSLog(@"+(id) buildUpdateTurnListWithTurnList:(id) softButtons:(id) correlationID:(id)");
}

%end

%hook SDLRPCPayload

+(id) rpcPayloadWithData:(id) {
	%orig;
	NSLog(@"+(id) rpcPayloadWithData:(id)");
}

-(unsigned int) correlationID {
	%orig;
	NSLog(@"-(unsigned int) correlationID");
}

-(void) setCorrelationID:(unsigned int) {
	%orig;
	NSLog(@"-(void) setCorrelationID:(unsigned int)");
}

-(void) setFunctionID:(unsigned int) {
	%orig;
	NSLog(@"-(void) setFunctionID:(unsigned int)");
}

-(void) setJsonData:(id) {
	%orig;
	NSLog(@"-(void) setJsonData:(id)");
}

-(void) setBinaryData:(id) {
	%orig;
	NSLog(@"-(void) setBinaryData:(id)");
}

-(void) setRpcType:(unsigned char) {
	%orig;
	NSLog(@"-(void) setRpcType:(unsigned char)");
}

-(unsigned int) functionID {
	%orig;
	NSLog(@"-(unsigned int) functionID");
}

-(unsigned char) rpcType {
	%orig;
	NSLog(@"-(unsigned char) rpcType");
}

-(id) binaryData {
	%orig;
	NSLog(@"-(id) binaryData");
}

-(id) jsonData {
	%orig;
	NSLog(@"-(id) jsonData");
}

-(unsigned long long) size {
	%orig;
	NSLog(@"-(unsigned long long) size");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(id) initWithData:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id)");
}

%end

%hook SDLProxyFactory

+(id) buildSDLProxyWithListener:(id) {
	%orig;
	NSLog(@"+(id) buildSDLProxyWithListener:(id)");
}

+(id) buildSDLProxyWithListener:(id) tcpIPAddress:(id) tcpPort:(id) {
	%orig;
	NSLog(@"+(id) buildSDLProxyWithListener:(id) tcpIPAddress:(id) tcpPort:(id)");
}

%end

%hook SDLProxy

+(void) enableSiphonDebug {
	%orig;
	NSLog(@"+(void) enableSiphonDebug");
}

+(void) disableSiphonDebug {
	%orig;
	NSLog(@"+(void) disableSiphonDebug");
}

-(void) sendRPCRequest:(id) {
	%orig;
	NSLog(@"-(void) sendRPCRequest:(id)");
}

-(void) sendRPC:(id) {
	%orig;
	NSLog(@"-(void) sendRPC:(id)");
}

-(void) onProtocolOpened {
	%orig;
	NSLog(@"-(void) onProtocolOpened");
}

-(void) onProtocolClosed {
	%orig;
	NSLog(@"-(void) onProtocolClosed");
}

-(id) debugConsoleGroupName {
	%orig;
	NSLog(@"-(id) debugConsoleGroupName");
}

-(void) setDebugConsoleGroupName:(id) {
	%orig;
	NSLog(@"-(void) setDebugConsoleGroupName:(id)");
}

-(void) handleProtocolStartSessionACK:(unsigned char) sessionID:(unsigned char) version:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolStartSessionACK:(unsigned char) sessionID:(unsigned char) version:(unsigned char)");
}

-(void) onProtocolMessageReceived:(id) {
	%orig;
	NSLog(@"-(void) onProtocolMessageReceived:(id)");
}

-(void) onError:(id) exception:(id) {
	%orig;
	NSLog(@"-(void) onError:(id) exception:(id)");
}

-(void) destructObjects {
	%orig;
	NSLog(@"-(void) destructObjects");
}

-(void) invokeMethodOnDelegates:(SEL) withObject:(id) {
	%orig;
	NSLog(@"-(void) invokeMethodOnDelegates:(SEL) withObject:(id)");
}

-(id) mutableProxyListeners {
	%orig;
	NSLog(@"-(id) mutableProxyListeners");
}

-(id) startSessionTimer {
	%orig;
	NSLog(@"-(id) startSessionTimer");
}

-(void) setStartSessionTimer:(id) {
	%orig;
	NSLog(@"-(void) setStartSessionTimer:(id)");
}

-(void) notifyProxyClosed {
	%orig;
	NSLog(@"-(void) notifyProxyClosed");
}

-(void) handleProtocolMessage:(id) {
	%orig;
	NSLog(@"-(void) handleProtocolMessage:(id)");
}

-(void) handleRPCDictionary:(id) {
	%orig;
	NSLog(@"-(void) handleRPCDictionary:(id)");
}

-(void) handleRPCUnregistered:(id) {
	%orig;
	NSLog(@"-(void) handleRPCUnregistered:(id)");
}

-(void) handleRegisterAppInterfaceResponse:(id) {
	%orig;
	NSLog(@"-(void) handleRegisterAppInterfaceResponse:(id)");
}

-(void) handleSyncPData:(id) {
	%orig;
	NSLog(@"-(void) handleSyncPData:(id)");
}

-(void) handleSystemRequest:(id) {
	%orig;
	NSLog(@"-(void) handleSystemRequest:(id)");
}

-(void) handleSystemRequestResponse:(id) {
	%orig;
	NSLog(@"-(void) handleSystemRequestResponse:(id)");
}

-(void) handleAfterHMIStatus:(id) {
	%orig;
	NSLog(@"-(void) handleAfterHMIStatus:(id)");
}

-(void) handleAfterDriverDistraction:(id) {
	%orig;
	NSLog(@"-(void) handleAfterDriverDistraction:(id)");
}

-(id) proxyVersion {
	%orig;
	NSLog(@"-(id) proxyVersion");
}

-(void) sendMobileHMIState {
	%orig;
	NSLog(@"-(void) sendMobileHMIState");
}

-(void) sendEncodedSyncPData:(id) toURL:(id) withTimeout:(id) {
	%orig;
	NSLog(@"-(void) sendEncodedSyncPData:(id) toURL:(id) withTimeout:(id)");
}

-(void) handleSystemRequestProprietary:(id) {
	%orig;
	NSLog(@"-(void) handleSystemRequestProprietary:(id)");
}

-(void) handleSystemRequestLockScreenIconURL:(id) {
	%orig;
	NSLog(@"-(void) handleSystemRequestLockScreenIconURL:(id)");
}

-(void) sdl_handleSystemRequestHTTP:(id) {
	%orig;
	NSLog(@"-(void) sdl_handleSystemRequestHTTP:(id)");
}

-(void) sdl_handleSystemRequestLaunchApp:(id) {
	%orig;
	NSLog(@"-(void) sdl_handleSystemRequestLaunchApp:(id)");
}

-(id) validateAndParseSystemRequest:(id) {
	%orig;
	NSLog(@"-(id) validateAndParseSystemRequest:(id)");
}

-(void) uploadForBodyDataDictionary:(id) URLString:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) uploadForBodyDataDictionary:(id) URLString:(id) completionHandler:(id)");
}

-(void) sdl_uploadData:(id) toURLString:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) sdl_uploadData:(id) toURLString:(id) completionHandler:(id)");
}

-(id) proxyListeners {
	%orig;
	NSLog(@"-(id) proxyListeners");
}

-(void) syncPDataNetworkRequestCompleteWithData:(id) response:(id) error:(id) {
	%orig;
	NSLog(@"-(void) syncPDataNetworkRequestCompleteWithData:(id) response:(id) error:(id)");
}

-(id) streamingMediaManager {
	%orig;
	NSLog(@"-(id) streamingMediaManager");
}

-(void) handleRpcMessage:(id) {
	%orig;
	NSLog(@"-(void) handleRpcMessage:(id)");
}

-(void) putFileStream:(id) withRequest:(id) {
	%orig;
	NSLog(@"-(void) putFileStream:(id) withRequest:(id)");
}

-(void) setMutableProxyListeners:(id) {
	%orig;
	NSLog(@"-(void) setMutableProxyListeners:(id)");
}

-(void) setStreamingMediaManager:(id) {
	%orig;
	NSLog(@"-(void) setStreamingMediaManager:(id)");
}

-(id) initWithTransport:(id) protocol:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithTransport:(id) protocol:(id) delegate:(id)");
}

-(void) stream:(id) handleEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) stream:(id) handleEvent:(unsigned long long)");
}

-(void) addDelegate:(id) {
	%orig;
	NSLog(@"-(void) addDelegate:(id)");
}

-(void) setProtocol:(id) {
	%orig;
	NSLog(@"-(void) setProtocol:(id)");
}

-(void) setTransport:(id) {
	%orig;
	NSLog(@"-(void) setTransport:(id)");
}

-(id) transport {
	%orig;
	NSLog(@"-(id) transport");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(void) removeDelegate:(id) {
	%orig;
	NSLog(@"-(void) removeDelegate:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) protocol {
	%orig;
	NSLog(@"-(id) protocol");
}

%end

%hook SDLProtocolReceivedMessageRouter

-(void) handleReceivedMessage:(id) {
	%orig;
	NSLog(@"-(void) handleReceivedMessage:(id)");
}

-(void) destructObjects {
	%orig;
	NSLog(@"-(void) destructObjects");
}

-(void) setMessageAssemblers:(id) {
	%orig;
	NSLog(@"-(void) setMessageAssemblers:(id)");
}

-(void) dispatchProtocolMessage:(id) {
	%orig;
	NSLog(@"-(void) dispatchProtocolMessage:(id)");
}

-(void) dispatchControlMessage:(id) {
	%orig;
	NSLog(@"-(void) dispatchControlMessage:(id)");
}

-(void) dispatchMultiPartMessage:(id) {
	%orig;
	NSLog(@"-(void) dispatchMultiPartMessage:(id)");
}

-(id) messageAssemblers {
	%orig;
	NSLog(@"-(id) messageAssemblers");
}

-(bool) alreadyDestructed {
	%orig;
	NSLog(@"-(bool) alreadyDestructed");
}

-(void) setAlreadyDestructed:(bool) {
	%orig;
	NSLog(@"-(void) setAlreadyDestructed:(bool)");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook SDLProtocolMessageDisassembler

+(id) disassemble:(id) withLimit:(unsigned long long) {
	%orig;
	NSLog(@"+(id) disassemble:(id) withLimit:(unsigned long long)");
}

%end

%hook SDLProtocolMessageAssembler

-(void) setExpectedBytes:(unsigned int) {
	%orig;
	NSLog(@"-(void) setExpectedBytes:(unsigned int)");
}

-(unsigned int) expectedBytes {
	%orig;
	NSLog(@"-(unsigned int) expectedBytes");
}

-(void) handleMessage:(id) withCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) handleMessage:(id) withCompletionHandler:(id)");
}

-(void) setParts:(id) {
	%orig;
	NSLog(@"-(void) setParts:(id)");
}

-(id) initWithSessionID:(unsigned char) {
	%orig;
	NSLog(@"-(id) initWithSessionID:(unsigned char)");
}

-(id) parts {
	%orig;
	NSLog(@"-(id) parts");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setFrameCount:(unsigned int) {
	%orig;
	NSLog(@"-(void) setFrameCount:(unsigned int)");
}

-(unsigned int) frameCount {
	%orig;
	NSLog(@"-(unsigned int) frameCount");
}

-(unsigned char) sessionID {
	%orig;
	NSLog(@"-(unsigned char) sessionID");
}

%end

%hook SDLProtocolMessage

+(id) messageWithHeader:(id) andPayload:(id) {
	%orig;
	NSLog(@"+(id) messageWithHeader:(id) andPayload:(id)");
}

+(unsigned char) determineVersion:(id) {
	%orig;
	NSLog(@"+(unsigned char) determineVersion:(id)");
}

-(id) rpcDictionary {
	%orig;
	NSLog(@"-(id) rpcDictionary");
}

-(id) internalBuffer {
	%orig;
	NSLog(@"-(id) internalBuffer");
}

-(void) setInternalBuffer:(id) {
	%orig;
	NSLog(@"-(void) setInternalBuffer:(id)");
}

-(unsigned long long) size {
	%orig;
	NSLog(@"-(unsigned long long) size");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setHeader:(id) {
	%orig;
	NSLog(@"-(void) setHeader:(id)");
}

-(id) header {
	%orig;
	NSLog(@"-(id) header");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(id) payload {
	%orig;
	NSLog(@"-(id) payload");
}

-(void) setPayload:(id) {
	%orig;
	NSLog(@"-(void) setPayload:(id)");
}

%end

%hook SDLV2ProtocolMessage

-(id) initWithHeader:(id) andPayload:(id) {
	%orig;
	NSLog(@"-(id) initWithHeader:(id) andPayload:(id)");
}

-(id) rpcDictionary {
	%orig;
	NSLog(@"-(id) rpcDictionary");
}

%end

%hook SDLV1ProtocolMessage

-(id) initWithHeader:(id) andPayload:(id) {
	%orig;
	NSLog(@"-(id) initWithHeader:(id) andPayload:(id)");
}

-(id) rpcDictionary {
	%orig;
	NSLog(@"-(id) rpcDictionary");
}

%end

%hook SDLProtocolHeader

+(id) headerForVersion:(unsigned char) {
	%orig;
	NSLog(@"+(id) headerForVersion:(unsigned char)");
}

-(void) setFrameData:(unsigned char) {
	%orig;
	NSLog(@"-(void) setFrameData:(unsigned char)");
}

-(void) setBytesInPayload:(unsigned int) {
	%orig;
	NSLog(@"-(void) setBytesInPayload:(unsigned int)");
}

-(unsigned int) bytesInPayload {
	%orig;
	NSLog(@"-(unsigned int) bytesInPayload");
}

-(unsigned char) frameData {
	%orig;
	NSLog(@"-(unsigned char) frameData");
}

-(void) parse:(id) {
	%orig;
	NSLog(@"-(void) parse:(id)");
}

-(unsigned char) serviceType {
	%orig;
	NSLog(@"-(unsigned char) serviceType");
}

-(void) setServiceType:(unsigned char) {
	%orig;
	NSLog(@"-(void) setServiceType:(unsigned char)");
}

-(void) setFrameType:(unsigned char) {
	%orig;
	NSLog(@"-(void) setFrameType:(unsigned char)");
}

-(unsigned char) frameType {
	%orig;
	NSLog(@"-(unsigned char) frameType");
}

-(bool) compressed {
	%orig;
	NSLog(@"-(bool) compressed");
}

-(void) setCompressed:(bool) {
	%orig;
	NSLog(@"-(void) setCompressed:(bool)");
}

-(unsigned long long) size {
	%orig;
	NSLog(@"-(unsigned long long) size");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(unsigned char) version {
	%orig;
	NSLog(@"-(unsigned char) version");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(unsigned char) sessionID {
	%orig;
	NSLog(@"-(unsigned char) sessionID");
}

-(void) setSessionID:(unsigned char) {
	%orig;
	NSLog(@"-(void) setSessionID:(unsigned char)");
}

%end

%hook SDLV2ProtocolHeader

-(void) parse:(id) {
	%orig;
	NSLog(@"-(void) parse:(id)");
}

-(unsigned int) messageID {
	%orig;
	NSLog(@"-(unsigned int) messageID");
}

-(void) setMessageID:(unsigned int) {
	%orig;
	NSLog(@"-(void) setMessageID:(unsigned int)");
}

-(id) initWithVersion:(unsigned char) {
	%orig;
	NSLog(@"-(id) initWithVersion:(unsigned char)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

%end

%hook SDLV1ProtocolHeader

-(void) parse:(id) {
	%orig;
	NSLog(@"-(void) parse:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

%end

%hook SDLPrioritizedObjectCollection

-(void) addObject:(id) withPriority:(long long) {
	%orig;
	NSLog(@"-(void) addObject:(id) withPriority:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) nextObject {
	%orig;
	NSLog(@"-(id) nextObject");
}

%end

%hook SDLPolicyDataParser

-(void) setIsResponseRequired:(bool) {
	%orig;
	NSLog(@"-(void) setIsResponseRequired:(bool)");
}

-(void) setIsHighBandwidth:(bool) {
	%orig;
	NSLog(@"-(void) setIsHighBandwidth:(bool)");
}

-(void) setHasESN:(bool) {
	%orig;
	NSLog(@"-(void) setHasESN:(bool)");
}

-(void) setCPUDestination:(bool) {
	%orig;
	NSLog(@"-(void) setCPUDestination:(bool)");
}

-(void) setEncryptionKeyIndex:(unsigned char) {
	%orig;
	NSLog(@"-(void) setEncryptionKeyIndex:(unsigned char)");
}

-(bool) hasESN {
	%orig;
	NSLog(@"-(bool) hasESN");
}

-(void) setESN:(id) {
	%orig;
	NSLog(@"-(void) setESN:(id)");
}

-(id) ESN {
	%orig;
	NSLog(@"-(id) ESN");
}

-(void) setModuleMessageId:(unsigned int) {
	%orig;
	NSLog(@"-(void) setModuleMessageId:(unsigned int)");
}

-(void) setServerMessageId:(unsigned int) {
	%orig;
	NSLog(@"-(void) setServerMessageId:(unsigned int)");
}

-(void) setSignatureTag:(id) {
	%orig;
	NSLog(@"-(void) setSignatureTag:(id)");
}

-(bool) isResponseRequired {
	%orig;
	NSLog(@"-(bool) isResponseRequired");
}

-(bool) CPUDestination {
	%orig;
	NSLog(@"-(bool) CPUDestination");
}

-(unsigned char) encryptionKeyIndex {
	%orig;
	NSLog(@"-(unsigned char) encryptionKeyIndex");
}

-(unsigned int) moduleMessageId {
	%orig;
	NSLog(@"-(unsigned int) moduleMessageId");
}

-(unsigned int) serverMessageId {
	%orig;
	NSLog(@"-(unsigned int) serverMessageId");
}

-(id) signatureTag {
	%orig;
	NSLog(@"-(id) signatureTag");
}

-(id) unwrap:(id) {
	%orig;
	NSLog(@"-(id) unwrap:(id)");
}

-(void) parsePolicyData:(id) {
	%orig;
	NSLog(@"-(void) parsePolicyData:(id)");
}

-(bool) isHighBandwidth {
	%orig;
	NSLog(@"-(bool) isHighBandwidth");
}

-(void) setProtocolVersion:(unsigned char) {
	%orig;
	NSLog(@"-(void) setProtocolVersion:(unsigned char)");
}

-(unsigned char) protocolVersion {
	%orig;
	NSLog(@"-(unsigned char) protocolVersion");
}

-(unsigned char) serviceType {
	%orig;
	NSLog(@"-(unsigned char) serviceType");
}

-(void) setServiceType:(unsigned char) {
	%orig;
	NSLog(@"-(void) setServiceType:(unsigned char)");
}

-(id) initializationVector {
	%orig;
	NSLog(@"-(id) initializationVector");
}

-(void) setInitializationVector:(id) {
	%orig;
	NSLog(@"-(void) setInitializationVector:(id)");
}

-(unsigned char) messageStatus {
	%orig;
	NSLog(@"-(unsigned char) messageStatus");
}

-(void) setMessageStatus:(unsigned char) {
	%orig;
	NSLog(@"-(void) setMessageStatus:(unsigned char)");
}

-(void) setIsSigned:(bool) {
	%orig;
	NSLog(@"-(void) setIsSigned:(bool)");
}

-(bool) isSigned {
	%orig;
	NSLog(@"-(bool) isSigned");
}

-(void) setIsEncrypted:(bool) {
	%orig;
	NSLog(@"-(void) setIsEncrypted:(bool)");
}

-(unsigned char) commandType {
	%orig;
	NSLog(@"-(unsigned char) commandType");
}

-(void) setPayloadSize:(unsigned int) {
	%orig;
	NSLog(@"-(void) setPayloadSize:(unsigned int)");
}

-(unsigned int) payloadSize {
	%orig;
	NSLog(@"-(unsigned int) payloadSize");
}

-(bool) isEncrypted {
	%orig;
	NSLog(@"-(bool) isEncrypted");
}

-(void) setCommandType:(unsigned char) {
	%orig;
	NSLog(@"-(void) setCommandType:(unsigned char)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) payload {
	%orig;
	NSLog(@"-(id) payload");
}

-(void) setPayload:(id) {
	%orig;
	NSLog(@"-(void) setPayload:(id)");
}

%end

%hook SDLObjectWithPriority

+(id) objectWithObject:(id) priority:(long long) {
	%orig;
	NSLog(@"+(id) objectWithObject:(id) priority:(long long)");
}

-(id) initWithObject:(id) priority:(long long) {
	%orig;
	NSLog(@"-(id) initWithObject:(id) priority:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setPriority:(long long) {
	%orig;
	NSLog(@"-(void) setPriority:(long long)");
}

-(id) object {
	%orig;
	NSLog(@"-(id) object");
}

-(long long) priority {
	%orig;
	NSLog(@"-(long long) priority");
}

-(void) setObject:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id)");
}

%end

%hook SDLLockScreenManager

-(void) setHmiLevel:(id) {
	%orig;
	NSLog(@"-(void) setHmiLevel:(id)");
}

-(id) hmiLevel {
	%orig;
	NSLog(@"-(id) hmiLevel");
}

-(bool) driverDistracted {
	%orig;
	NSLog(@"-(bool) driverDistracted");
}

-(bool) haveDriverDistractionStatus {
	%orig;
	NSLog(@"-(bool) haveDriverDistractionStatus");
}

-(void) setHaveDriverDistractionStatus:(bool) {
	%orig;
	NSLog(@"-(void) setHaveDriverDistractionStatus:(bool)");
}

-(id) lockScreenStatus {
	%orig;
	NSLog(@"-(id) lockScreenStatus");
}

-(void) setUserSelected:(bool) {
	%orig;
	NSLog(@"-(void) setUserSelected:(bool)");
}

-(bool) userSelected {
	%orig;
	NSLog(@"-(bool) userSelected");
}

-(id) lockScreenStatusNotification {
	%orig;
	NSLog(@"-(id) lockScreenStatusNotification");
}

-(void) setDriverDistracted:(bool) {
	%orig;
	NSLog(@"-(void) setDriverDistracted:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook SDLJsonEncoder

+(id) instance {
	%orig;
	NSLog(@"+(id) instance");
}

-(id) encodeDictionary:(id) {
	%orig;
	NSLog(@"-(id) encodeDictionary:(id)");
}

%end

%hook SDLJsonDecoder

+(id) instance {
	%orig;
	NSLog(@"+(id) instance");
}

-(id) decode:(id) {
	%orig;
	NSLog(@"-(id) decode:(id)");
}

%end

%hook SDLJingle

+(id) NEGATIVE_JINGLE {
	%orig;
	NSLog(@"+(id) NEGATIVE_JINGLE");
}

+(id) POSITIVE_JINGLE {
	%orig;
	NSLog(@"+(id) POSITIVE_JINGLE");
}

+(id) LISTEN_JINGLE {
	%orig;
	NSLog(@"+(id) LISTEN_JINGLE");
}

+(id) INITIAL_JINGLE {
	%orig;
	NSLog(@"+(id) INITIAL_JINGLE");
}

+(id) HELP_JINGLE {
	%orig;
	NSLog(@"+(id) HELP_JINGLE");
}

%end

%hook SDLIAPSession

-(void) setEasession:(id) {
	%orig;
	NSLog(@"-(void) setEasession:(id)");
}

-(id) streamErroredHandler {
	%orig;
	NSLog(@"-(id) streamErroredHandler");
}

-(id) streamOpenedHandler {
	%orig;
	NSLog(@"-(id) streamOpenedHandler");
}

-(id) easession {
	%orig;
	NSLog(@"-(id) easession");
}

-(void) setIsOutputStreamOpen:(bool) {
	%orig;
	NSLog(@"-(void) setIsOutputStreamOpen:(bool)");
}

-(void) setIsInputStreamOpen:(bool) {
	%orig;
	NSLog(@"-(void) setIsInputStreamOpen:(bool)");
}

-(bool) isInputStreamOpen {
	%orig;
	NSLog(@"-(bool) isInputStreamOpen");
}

-(bool) isOutputStreamOpen {
	%orig;
	NSLog(@"-(bool) isOutputStreamOpen");
}

-(id) initWithAccessory:(id) forProtocol:(id) {
	%orig;
	NSLog(@"-(id) initWithAccessory:(id) forProtocol:(id)");
}

-(void) setProtocol:(id) {
	%orig;
	NSLog(@"-(void) setProtocol:(id)");
}

-(void) setStreamDelegate:(id) {
	%orig;
	NSLog(@"-(void) setStreamDelegate:(id)");
}

-(id) streamDelegate {
	%orig;
	NSLog(@"-(id) streamDelegate");
}

-(id) accessory {
	%orig;
	NSLog(@"-(id) accessory");
}

-(void) startStream:(id) {
	%orig;
	NSLog(@"-(void) startStream:(id)");
}

-(void) setAccessory:(id) {
	%orig;
	NSLog(@"-(void) setAccessory:(id)");
}

-(void) stopStream:(id) {
	%orig;
	NSLog(@"-(void) stopStream:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(bool) start {
	%orig;
	NSLog(@"-(bool) start");
}

-(id) protocol {
	%orig;
	NSLog(@"-(id) protocol");
}

%end

%hook SDLHexUtility

+(id) getHexString:(id) {
	%orig;
	NSLog(@"+(id) getHexString:(id)");
}

+(id) getHexString:(char*) length:(unsigned long long) {
	%orig;
	NSLog(@"+(id) getHexString:(char*) length:(unsigned long long)");
}

%end

%hook SDLGlobals

+(id) globals {
	%orig;
	NSLog(@"+(id) globals");
}

-(unsigned long long) maxHeadUnitVersion {
	%orig;
	NSLog(@"-(unsigned long long) maxHeadUnitVersion");
}

-(void) setMaxHeadUnitVersion:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaxHeadUnitVersion:(unsigned long long)");
}

-(unsigned long long) maxMTUSize {
	%orig;
	NSLog(@"-(unsigned long long) maxMTUSize");
}

-(void) setProtocolVersion:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setProtocolVersion:(unsigned long long)");
}

-(unsigned long long) protocolVersion {
	%orig;
	NSLog(@"-(unsigned long long) protocolVersion");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook SDLFunctionID

-(id) getFunctionName:(int) {
	%orig;
	NSLog(@"-(id) getFunctionName:(int)");
}

-(id) getFunctionID:(id) {
	%orig;
	NSLog(@"-(id) getFunctionID:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook SDLDebugTool

+(void) addConsole:(id) toGroup:(id) {
	%orig;
	NSLog(@"+(void) addConsole:(id) toGroup:(id)");
}

+(id) sharedTool {
	%orig;
	NSLog(@"+(id) sharedTool");
}

+(void) removeConsole:(id) fromGroup:(id) {
	%orig;
	NSLog(@"+(void) removeConsole:(id) fromGroup:(id)");
}

+(id) getConsoleListenersForGroup:(id) {
	%orig;
	NSLog(@"+(id) getConsoleListenersForGroup:(id)");
}

+(void) logInfo:(id) withType:(unsigned char) toOutput:(unsigned char) toGroup:(id) {
	%orig;
	NSLog(@"+(void) logInfo:(id) withType:(unsigned char) toOutput:(unsigned char) toGroup:(id)");
}

+(void) writeToLogFile:(id) {
	%orig;
	NSLog(@"+(void) writeToLogFile:(id)");
}

+(void) logInfo:(id) withType:(unsigned char) {
	%orig;
	NSLog(@"+(void) logInfo:(id) withType:(unsigned char)");
}

+(void) addConsole:(id) {
	%orig;
	NSLog(@"+(void) addConsole:(id)");
}

+(void) removeConsole:(id) {
	%orig;
	NSLog(@"+(void) removeConsole:(id)");
}

+(void) logInfo:(id) withType:(unsigned char) toOutput:(unsigned char) {
	%orig;
	NSLog(@"+(void) logInfo:(id) withType:(unsigned char) toOutput:(unsigned char)");
}

+(void) logInfo:(id) andBinaryData:(id) withType:(unsigned char) toOutput:(unsigned char) {
	%orig;
	NSLog(@"+(void) logInfo:(id) andBinaryData:(id) withType:(unsigned char) toOutput:(unsigned char)");
}

+(void) enableDebugToLogFile {
	%orig;
	NSLog(@"+(void) enableDebugToLogFile");
}

+(void) disableDebugToLogFile {
	%orig;
	NSLog(@"+(void) disableDebugToLogFile");
}

+(id) stringForDebugType:(unsigned char) {
	%orig;
	NSLog(@"+(id) stringForDebugType:(unsigned char)");
}

+(void) logInfo:(id) {
	%orig;
	NSLog(@"+(void) logInfo:(id)");
}

-(id) namedConsoleSets {
	%orig;
	NSLog(@"-(id) namedConsoleSets");
}

-(void) setNamedConsoleSets:(id) {
	%orig;
	NSLog(@"-(void) setNamedConsoleSets:(id)");
}

-(void) sdl_addConsole:(id) toGroup:(id) {
	%orig;
	NSLog(@"-(void) sdl_addConsole:(id) toGroup:(id)");
}

-(id) sdl_getConsoleListenersForGroup:(id) {
	%orig;
	NSLog(@"-(id) sdl_getConsoleListenersForGroup:(id)");
}

-(void) sdl_enableDebugToLogFile {
	%orig;
	NSLog(@"-(void) sdl_enableDebugToLogFile");
}

-(void) setDebugToLogFile:(bool) {
	%orig;
	NSLog(@"-(void) setDebugToLogFile:(bool)");
}

-(void) sdl_disableDebugToLogFile {
	%orig;
	NSLog(@"-(void) sdl_disableDebugToLogFile");
}

-(void) sdl_writeToLogFile:(id) {
	%orig;
	NSLog(@"-(void) sdl_writeToLogFile:(id)");
}

-(bool) debugToLogFile {
	%orig;
	NSLog(@"-(bool) debugToLogFile");
}

-(id) logDateFormatter {
	%orig;
	NSLog(@"-(id) logDateFormatter");
}

-(void) setLogDateFormatter:(id) {
	%orig;
	NSLog(@"-(void) setLogDateFormatter:(id)");
}

-(id) logFileHandle {
	%orig;
	NSLog(@"-(id) logFileHandle");
}

-(void) setLogFileHandle:(id) {
	%orig;
	NSLog(@"-(void) setLogFileHandle:(id)");
}

-(id) logQueue {
	%orig;
	NSLog(@"-(id) logQueue");
}

-(void) setLogQueue:(id) {
	%orig;
	NSLog(@"-(void) setLogQueue:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook SDLEnum

-(bool) isEqualToEnum:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToEnum:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) value {
	%orig;
	NSLog(@"-(id) value");
}

-(id) debugQuickLookObject {
	%orig;
	NSLog(@"-(id) debugQuickLookObject");
}

-(id) initWithValue:(id) {
	%orig;
	NSLog(@"-(id) initWithValue:(id)");
}

%end

%hook SDLWiperStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) OFF {
	%orig;
	NSLog(@"+(id) OFF");
}

+(id) AUTO_OFF {
	%orig;
	NSLog(@"+(id) AUTO_OFF");
}

+(id) OFF_MOVING {
	%orig;
	NSLog(@"+(id) OFF_MOVING");
}

+(id) MAN_INT_OFF {
	%orig;
	NSLog(@"+(id) MAN_INT_OFF");
}

+(id) MAN_INT_ON {
	%orig;
	NSLog(@"+(id) MAN_INT_ON");
}

+(id) MAN_LOW {
	%orig;
	NSLog(@"+(id) MAN_LOW");
}

+(id) MAN_HIGH {
	%orig;
	NSLog(@"+(id) MAN_HIGH");
}

+(id) MAN_FLICK {
	%orig;
	NSLog(@"+(id) MAN_FLICK");
}

+(id) WASH {
	%orig;
	NSLog(@"+(id) WASH");
}

+(id) AUTO_LOW {
	%orig;
	NSLog(@"+(id) AUTO_LOW");
}

+(id) AUTO_HIGH {
	%orig;
	NSLog(@"+(id) AUTO_HIGH");
}

+(id) COURTESYWIPE {
	%orig;
	NSLog(@"+(id) COURTESYWIPE");
}

+(id) AUTO_ADJUST {
	%orig;
	NSLog(@"+(id) AUTO_ADJUST");
}

+(id) STALLED {
	%orig;
	NSLog(@"+(id) STALLED");
}

+(id) NO_DATA_EXISTS {
	%orig;
	NSLog(@"+(id) NO_DATA_EXISTS");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLWarningLightStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) OFF {
	%orig;
	NSLog(@"+(id) OFF");
}

+(id) ON {
	%orig;
	NSLog(@"+(id) ON");
}

+(id) FLASH {
	%orig;
	NSLog(@"+(id) FLASH");
}

+(id) NOT_USED {
	%orig;
	NSLog(@"+(id) NOT_USED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLVehicleDataType

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) VEHICLEDATA_GPS {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_GPS");
}

+(id) VEHICLEDATA_SPEED {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_SPEED");
}

+(id) VEHICLEDATA_RPM {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_RPM");
}

+(id) VEHICLEDATA_FUELLEVEL {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_FUELLEVEL");
}

+(id) VEHICLEDATA_FUELLEVEL_STATE {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_FUELLEVEL_STATE");
}

+(id) VEHICLEDATA_FUELCONSUMPTION {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_FUELCONSUMPTION");
}

+(id) VEHICLEDATA_EXTERNTEMP {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_EXTERNTEMP");
}

+(id) VEHICLEDATA_VIN {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_VIN");
}

+(id) VEHICLEDATA_PRNDL {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_PRNDL");
}

+(id) VEHICLEDATA_TIREPRESSURE {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_TIREPRESSURE");
}

+(id) VEHICLEDATA_ODOMETER {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_ODOMETER");
}

+(id) VEHICLEDATA_BELTSTATUS {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_BELTSTATUS");
}

+(id) VEHICLEDATA_BODYINFO {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_BODYINFO");
}

+(id) VEHICLEDATA_DEVICESTATUS {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_DEVICESTATUS");
}

+(id) VEHICLEDATA_ECALLINFO {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_ECALLINFO");
}

+(id) VEHICLEDATA_AIRBAGSTATUS {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_AIRBAGSTATUS");
}

+(id) VEHICLEDATA_EMERGENCYEVENT {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_EMERGENCYEVENT");
}

+(id) VEHICLEDATA_CLUSTERMODESTATUS {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_CLUSTERMODESTATUS");
}

+(id) VEHICLEDATA_MYKEY {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_MYKEY");
}

+(id) VEHICLEDATA_BRAKING {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_BRAKING");
}

+(id) VEHICLEDATA_WIPERSTATUS {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_WIPERSTATUS");
}

+(id) VEHICLEDATA_HEADLAMPSTATUS {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_HEADLAMPSTATUS");
}

+(id) VEHICLEDATA_BATTVOLTAGE {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_BATTVOLTAGE");
}

+(id) VEHICLEDATA_ENGINETORQUE {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_ENGINETORQUE");
}

+(id) VEHICLEDATA_ACCPEDAL {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_ACCPEDAL");
}

+(id) VEHICLEDATA_STEERINGWHEEL {
	%orig;
	NSLog(@"+(id) VEHICLEDATA_STEERINGWHEEL");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLVehicleDataStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) OFF {
	%orig;
	NSLog(@"+(id) OFF");
}

+(id) ON {
	%orig;
	NSLog(@"+(id) ON");
}

+(id) NO_DATA_EXISTS {
	%orig;
	NSLog(@"+(id) NO_DATA_EXISTS");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLVehicleDataResultCode

+(id) SUCCESS {
	%orig;
	NSLog(@"+(id) SUCCESS");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) DISALLOWED {
	%orig;
	NSLog(@"+(id) DISALLOWED");
}

+(id) USER_DISALLOWED {
	%orig;
	NSLog(@"+(id) USER_DISALLOWED");
}

+(id) INVALID_ID {
	%orig;
	NSLog(@"+(id) INVALID_ID");
}

+(id) VEHICLE_DATA_NOT_AVAILABLE {
	%orig;
	NSLog(@"+(id) VEHICLE_DATA_NOT_AVAILABLE");
}

+(id) IGNORED {
	%orig;
	NSLog(@"+(id) IGNORED");
}

+(id) TRUNCATED_DATA {
	%orig;
	NSLog(@"+(id) TRUNCATED_DATA");
}

+(id) DATA_ALREADY_SUBSCRIBED {
	%orig;
	NSLog(@"+(id) DATA_ALREADY_SUBSCRIBED");
}

+(id) DATA_NOT_SUBSCRIBED {
	%orig;
	NSLog(@"+(id) DATA_NOT_SUBSCRIBED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLVehicleDataNotificationStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NORMAL {
	%orig;
	NSLog(@"+(id) NORMAL");
}

+(id) NOT_SUPPORTED {
	%orig;
	NSLog(@"+(id) NOT_SUPPORTED");
}

+(id) ACTIVE {
	%orig;
	NSLog(@"+(id) ACTIVE");
}

+(id) NOT_USED {
	%orig;
	NSLog(@"+(id) NOT_USED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLVehicleDataEventStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) FAULT {
	%orig;
	NSLog(@"+(id) FAULT");
}

+(id) NOT_SUPPORTED {
	%orig;
	NSLog(@"+(id) NOT_SUPPORTED");
}

+(id) NO_EVENT {
	%orig;
	NSLog(@"+(id) NO_EVENT");
}

+(id) _NO {
	%orig;
	NSLog(@"+(id) _NO");
}

+(id) _YES {
	%orig;
	NSLog(@"+(id) _YES");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLVehicleDataActiveStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) FAULT {
	%orig;
	NSLog(@"+(id) FAULT");
}

+(id) INACTIVE_NOT_CONFIRMED {
	%orig;
	NSLog(@"+(id) INACTIVE_NOT_CONFIRMED");
}

+(id) INACTIVE_CONFIRMED {
	%orig;
	NSLog(@"+(id) INACTIVE_CONFIRMED");
}

+(id) ACTIVE_NOT_CONFIRMED {
	%orig;
	NSLog(@"+(id) ACTIVE_NOT_CONFIRMED");
}

+(id) ACTIVE_CONFIRMED {
	%orig;
	NSLog(@"+(id) ACTIVE_CONFIRMED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLUpdateMode

+(id) COUNTUP {
	%orig;
	NSLog(@"+(id) COUNTUP");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) COUNTDOWN {
	%orig;
	NSLog(@"+(id) COUNTDOWN");
}

+(id) RESUME {
	%orig;
	NSLog(@"+(id) RESUME");
}

+(id) CLEAR {
	%orig;
	NSLog(@"+(id) CLEAR");
}

+(id) PAUSE {
	%orig;
	NSLog(@"+(id) PAUSE");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLTriggerSource

+(id) VR {
	%orig;
	NSLog(@"+(id) VR");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) KEYBOARD {
	%orig;
	NSLog(@"+(id) KEYBOARD");
}

+(id) MENU {
	%orig;
	NSLog(@"+(id) MENU");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLTouchType

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) BEGIN {
	%orig;
	NSLog(@"+(id) BEGIN");
}

+(id) MOVE {
	%orig;
	NSLog(@"+(id) MOVE");
}

+(id) END {
	%orig;
	NSLog(@"+(id) END");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLTimerMode

+(id) NONE {
	%orig;
	NSLog(@"+(id) NONE");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) UP {
	%orig;
	NSLog(@"+(id) UP");
}

+(id) DOWN {
	%orig;
	NSLog(@"+(id) DOWN");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLTextFieldName

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) alertText1 {
	%orig;
	NSLog(@"+(id) alertText1");
}

+(id) alertText2 {
	%orig;
	NSLog(@"+(id) alertText2");
}

+(id) alertText3 {
	%orig;
	NSLog(@"+(id) alertText3");
}

+(id) menuName {
	%orig;
	NSLog(@"+(id) menuName");
}

+(id) tertiaryText {
	%orig;
	NSLog(@"+(id) tertiaryText");
}

+(id) audioPassThruDisplayText1 {
	%orig;
	NSLog(@"+(id) audioPassThruDisplayText1");
}

+(id) audioPassThruDisplayText2 {
	%orig;
	NSLog(@"+(id) audioPassThruDisplayText2");
}

+(id) scrollableMessageBody {
	%orig;
	NSLog(@"+(id) scrollableMessageBody");
}

+(id) mainField1 {
	%orig;
	NSLog(@"+(id) mainField1");
}

+(id) mainField2 {
	%orig;
	NSLog(@"+(id) mainField2");
}

+(id) mainField3 {
	%orig;
	NSLog(@"+(id) mainField3");
}

+(id) mainField4 {
	%orig;
	NSLog(@"+(id) mainField4");
}

+(id) mediaClock {
	%orig;
	NSLog(@"+(id) mediaClock");
}

+(id) mediaTrack {
	%orig;
	NSLog(@"+(id) mediaTrack");
}

+(id) sliderHeader {
	%orig;
	NSLog(@"+(id) sliderHeader");
}

+(id) sliderFooter {
	%orig;
	NSLog(@"+(id) sliderFooter");
}

+(id) initialInteractionText {
	%orig;
	NSLog(@"+(id) initialInteractionText");
}

+(id) navigationText1 {
	%orig;
	NSLog(@"+(id) navigationText1");
}

+(id) navigationText2 {
	%orig;
	NSLog(@"+(id) navigationText2");
}

+(id) ETA {
	%orig;
	NSLog(@"+(id) ETA");
}

+(id) locationName {
	%orig;
	NSLog(@"+(id) locationName");
}

+(id) locationDescription {
	%orig;
	NSLog(@"+(id) locationDescription");
}

+(id) secondaryText {
	%orig;
	NSLog(@"+(id) secondaryText");
}

+(id) addressLines {
	%orig;
	NSLog(@"+(id) addressLines");
}

+(id) statusBar {
	%orig;
	NSLog(@"+(id) statusBar");
}

+(id) totalDistance {
	%orig;
	NSLog(@"+(id) totalDistance");
}

+(id) menuTitle {
	%orig;
	NSLog(@"+(id) menuTitle");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

+(id) phoneNumber {
	%orig;
	NSLog(@"+(id) phoneNumber");
}

%end

%hook SDLTextAlignment

+(id) LEFT_ALIGNED {
	%orig;
	NSLog(@"+(id) LEFT_ALIGNED");
}

+(id) CENTERED {
	%orig;
	NSLog(@"+(id) CENTERED");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) RIGHT_ALIGNED {
	%orig;
	NSLog(@"+(id) RIGHT_ALIGNED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLVRCapabilities

+(id) TEXT {
	%orig;
	NSLog(@"+(id) TEXT");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLTBTState

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) ROUTE_UPDATE_REQUEST {
	%orig;
	NSLog(@"+(id) ROUTE_UPDATE_REQUEST");
}

+(id) ROUTE_ACCEPTED {
	%orig;
	NSLog(@"+(id) ROUTE_ACCEPTED");
}

+(id) ROUTE_REFUSED {
	%orig;
	NSLog(@"+(id) ROUTE_REFUSED");
}

+(id) ROUTE_CANCELLED {
	%orig;
	NSLog(@"+(id) ROUTE_CANCELLED");
}

+(id) ETA_REQUEST {
	%orig;
	NSLog(@"+(id) ETA_REQUEST");
}

+(id) NEXT_TURN_REQUEST {
	%orig;
	NSLog(@"+(id) NEXT_TURN_REQUEST");
}

+(id) ROUTE_STATUS_REQUEST {
	%orig;
	NSLog(@"+(id) ROUTE_STATUS_REQUEST");
}

+(id) ROUTE_SUMMARY_REQUEST {
	%orig;
	NSLog(@"+(id) ROUTE_SUMMARY_REQUEST");
}

+(id) TRIP_STATUS_REQUEST {
	%orig;
	NSLog(@"+(id) TRIP_STATUS_REQUEST");
}

+(id) ROUTE_UPDATE_REQUEST_TIMEOUT {
	%orig;
	NSLog(@"+(id) ROUTE_UPDATE_REQUEST_TIMEOUT");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLSystemContext

+(id) ALERT {
	%orig;
	NSLog(@"+(id) ALERT");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) MAIN {
	%orig;
	NSLog(@"+(id) MAIN");
}

+(id) VRSESSION {
	%orig;
	NSLog(@"+(id) VRSESSION");
}

+(id) MENU {
	%orig;
	NSLog(@"+(id) MENU");
}

+(id) HMI_OBSCURED {
	%orig;
	NSLog(@"+(id) HMI_OBSCURED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLSystemAction

+(id) DEFAULT_ACTION {
	%orig;
	NSLog(@"+(id) DEFAULT_ACTION");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) STEAL_FOCUS {
	%orig;
	NSLog(@"+(id) STEAL_FOCUS");
}

+(id) KEEP_CONTEXT {
	%orig;
	NSLog(@"+(id) KEEP_CONTEXT");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLSpeechCapabilities

+(id) TEXT {
	%orig;
	NSLog(@"+(id) TEXT");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) SAPI_PHONEMES {
	%orig;
	NSLog(@"+(id) SAPI_PHONEMES");
}

+(id) LHPLUS_PHONEMES {
	%orig;
	NSLog(@"+(id) LHPLUS_PHONEMES");
}

+(id) PRE_RECORDED {
	%orig;
	NSLog(@"+(id) PRE_RECORDED");
}

+(id) SILENCE {
	%orig;
	NSLog(@"+(id) SILENCE");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLSoftButtonType

+(id) TEXT {
	%orig;
	NSLog(@"+(id) TEXT");
}

+(id) IMAGE {
	%orig;
	NSLog(@"+(id) IMAGE");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) BOTH {
	%orig;
	NSLog(@"+(id) BOTH");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLSamplingRate

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) _8KHZ {
	%orig;
	NSLog(@"+(id) _8KHZ");
}

+(id) _16KHZ {
	%orig;
	NSLog(@"+(id) _16KHZ");
}

+(id) _22KHZ {
	%orig;
	NSLog(@"+(id) _22KHZ");
}

+(id) _44KHZ {
	%orig;
	NSLog(@"+(id) _44KHZ");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLResult

+(id) SUCCESS {
	%orig;
	NSLog(@"+(id) SUCCESS");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) DISALLOWED {
	%orig;
	NSLog(@"+(id) DISALLOWED");
}

+(id) USER_DISALLOWED {
	%orig;
	NSLog(@"+(id) USER_DISALLOWED");
}

+(id) INVALID_DATA {
	%orig;
	NSLog(@"+(id) INVALID_DATA");
}

+(id) CHAR_LIMIT_EXCEEDED {
	%orig;
	NSLog(@"+(id) CHAR_LIMIT_EXCEEDED");
}

+(id) UNSUPPORTED_REQUEST {
	%orig;
	NSLog(@"+(id) UNSUPPORTED_REQUEST");
}

+(id) OUT_OF_MEMORY {
	%orig;
	NSLog(@"+(id) OUT_OF_MEMORY");
}

+(id) TOO_MANY_PENDING_REQUESTS {
	%orig;
	NSLog(@"+(id) TOO_MANY_PENDING_REQUESTS");
}

+(id) INVALID_ID {
	%orig;
	NSLog(@"+(id) INVALID_ID");
}

+(id) DUPLICATE_NAME {
	%orig;
	NSLog(@"+(id) DUPLICATE_NAME");
}

+(id) TOO_MANY_APPLICATIONS {
	%orig;
	NSLog(@"+(id) TOO_MANY_APPLICATIONS");
}

+(id) APPLICATION_REGISTERED_ALREADY {
	%orig;
	NSLog(@"+(id) APPLICATION_REGISTERED_ALREADY");
}

+(id) UNSUPPORTED_VERSION {
	%orig;
	NSLog(@"+(id) UNSUPPORTED_VERSION");
}

+(id) WRONG_LANGUAGE {
	%orig;
	NSLog(@"+(id) WRONG_LANGUAGE");
}

+(id) APPLICATION_NOT_REGISTERED {
	%orig;
	NSLog(@"+(id) APPLICATION_NOT_REGISTERED");
}

+(id) IN_USE {
	%orig;
	NSLog(@"+(id) IN_USE");
}

+(id) VEHICLE_DATA_NOT_ALLOWED {
	%orig;
	NSLog(@"+(id) VEHICLE_DATA_NOT_ALLOWED");
}

+(id) VEHICLE_DATA_NOT_AVAILABLE {
	%orig;
	NSLog(@"+(id) VEHICLE_DATA_NOT_AVAILABLE");
}

+(id) REJECTED {
	%orig;
	NSLog(@"+(id) REJECTED");
}

+(id) ABORTED {
	%orig;
	NSLog(@"+(id) ABORTED");
}

+(id) IGNORED {
	%orig;
	NSLog(@"+(id) IGNORED");
}

+(id) UNSUPPORTED_RESOURCE {
	%orig;
	NSLog(@"+(id) UNSUPPORTED_RESOURCE");
}

+(id) FILE_NOT_FOUND {
	%orig;
	NSLog(@"+(id) FILE_NOT_FOUND");
}

+(id) GENERIC_ERROR {
	%orig;
	NSLog(@"+(id) GENERIC_ERROR");
}

+(id) TIMED_OUT {
	%orig;
	NSLog(@"+(id) TIMED_OUT");
}

+(id) CANCEL_ROUTE {
	%orig;
	NSLog(@"+(id) CANCEL_ROUTE");
}

+(id) TRUNCATED_DATA {
	%orig;
	NSLog(@"+(id) TRUNCATED_DATA");
}

+(id) RETRY {
	%orig;
	NSLog(@"+(id) RETRY");
}

+(id) WARNINGS {
	%orig;
	NSLog(@"+(id) WARNINGS");
}

+(id) SAVED {
	%orig;
	NSLog(@"+(id) SAVED");
}

+(id) INVALID_CERT {
	%orig;
	NSLog(@"+(id) INVALID_CERT");
}

+(id) EXPIRED_CERT {
	%orig;
	NSLog(@"+(id) EXPIRED_CERT");
}

+(id) RESUME_FAILED {
	%orig;
	NSLog(@"+(id) RESUME_FAILED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLRequestType

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) MEDIA {
	%orig;
	NSLog(@"+(id) MEDIA");
}

+(id) NAVIGATION {
	%orig;
	NSLog(@"+(id) NAVIGATION");
}

+(id) HTTP {
	%orig;
	NSLog(@"+(id) HTTP");
}

+(id) FILE_RESUME {
	%orig;
	NSLog(@"+(id) FILE_RESUME");
}

+(id) AUTH_REQUEST {
	%orig;
	NSLog(@"+(id) AUTH_REQUEST");
}

+(id) AUTH_CHALLENGE {
	%orig;
	NSLog(@"+(id) AUTH_CHALLENGE");
}

+(id) AUTH_ACK {
	%orig;
	NSLog(@"+(id) AUTH_ACK");
}

+(id) PROPRIETARY {
	%orig;
	NSLog(@"+(id) PROPRIETARY");
}

+(id) QUERY_APPS {
	%orig;
	NSLog(@"+(id) QUERY_APPS");
}

+(id) LAUNCH_APP {
	%orig;
	NSLog(@"+(id) LAUNCH_APP");
}

+(id) LOCK_SCREEN_ICON_URL {
	%orig;
	NSLog(@"+(id) LOCK_SCREEN_ICON_URL");
}

+(id) TRAFFIC_MESSAGE_CHANNEL {
	%orig;
	NSLog(@"+(id) TRAFFIC_MESSAGE_CHANNEL");
}

+(id) DRIVER_PROFILE {
	%orig;
	NSLog(@"+(id) DRIVER_PROFILE");
}

+(id) VOICE_SEARCH {
	%orig;
	NSLog(@"+(id) VOICE_SEARCH");
}

+(id) PHONE {
	%orig;
	NSLog(@"+(id) PHONE");
}

+(id) CLIMATE {
	%orig;
	NSLog(@"+(id) CLIMATE");
}

+(id) SETTINGS {
	%orig;
	NSLog(@"+(id) SETTINGS");
}

+(id) VEHICLE_DIAGNOSTICS {
	%orig;
	NSLog(@"+(id) VEHICLE_DIAGNOSTICS");
}

+(id) EMERGENCY {
	%orig;
	NSLog(@"+(id) EMERGENCY");
}

+(id) FOTA {
	%orig;
	NSLog(@"+(id) FOTA");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLPRNDL

+(id) NEUTRAL {
	%orig;
	NSLog(@"+(id) NEUTRAL");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) FAULT {
	%orig;
	NSLog(@"+(id) FAULT");
}

+(id) PARK {
	%orig;
	NSLog(@"+(id) PARK");
}

+(id) REVERSE {
	%orig;
	NSLog(@"+(id) REVERSE");
}

+(id) DRIVE {
	%orig;
	NSLog(@"+(id) DRIVE");
}

+(id) SPORT {
	%orig;
	NSLog(@"+(id) SPORT");
}

+(id) LOWGEAR {
	%orig;
	NSLog(@"+(id) LOWGEAR");
}

+(id) FIRST {
	%orig;
	NSLog(@"+(id) FIRST");
}

+(id) SECOND {
	%orig;
	NSLog(@"+(id) SECOND");
}

+(id) THIRD {
	%orig;
	NSLog(@"+(id) THIRD");
}

+(id) FOURTH {
	%orig;
	NSLog(@"+(id) FOURTH");
}

+(id) FIFTH {
	%orig;
	NSLog(@"+(id) FIFTH");
}

+(id) SIXTH {
	%orig;
	NSLog(@"+(id) SIXTH");
}

+(id) SEVENTH {
	%orig;
	NSLog(@"+(id) SEVENTH");
}

+(id) EIGHTH {
	%orig;
	NSLog(@"+(id) EIGHTH");
}

+(id) UNKNOWN {
	%orig;
	NSLog(@"+(id) UNKNOWN");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLPrimaryAudioSource

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NO_SOURCE_SELECTED {
	%orig;
	NSLog(@"+(id) NO_SOURCE_SELECTED");
}

+(id) USB {
	%orig;
	NSLog(@"+(id) USB");
}

+(id) USB2 {
	%orig;
	NSLog(@"+(id) USB2");
}

+(id) BLUETOOTH_STEREO_BTST {
	%orig;
	NSLog(@"+(id) BLUETOOTH_STEREO_BTST");
}

+(id) LINE_IN {
	%orig;
	NSLog(@"+(id) LINE_IN");
}

+(id) IPOD {
	%orig;
	NSLog(@"+(id) IPOD");
}

+(id) MOBILE_APP {
	%orig;
	NSLog(@"+(id) MOBILE_APP");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLPrerecordedSpeech

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NEGATIVE_JINGLE {
	%orig;
	NSLog(@"+(id) NEGATIVE_JINGLE");
}

+(id) POSITIVE_JINGLE {
	%orig;
	NSLog(@"+(id) POSITIVE_JINGLE");
}

+(id) LISTEN_JINGLE {
	%orig;
	NSLog(@"+(id) LISTEN_JINGLE");
}

+(id) INITIAL_JINGLE {
	%orig;
	NSLog(@"+(id) INITIAL_JINGLE");
}

+(id) HELP_JINGLE {
	%orig;
	NSLog(@"+(id) HELP_JINGLE");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLPredefinedLayout

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) DEFAULT {
	%orig;
	NSLog(@"+(id) DEFAULT");
}

+(id) MEDIA {
	%orig;
	NSLog(@"+(id) MEDIA");
}

+(id) NON_MEDIA {
	%orig;
	NSLog(@"+(id) NON_MEDIA");
}

+(id) ONSCREEN_PRESETS {
	%orig;
	NSLog(@"+(id) ONSCREEN_PRESETS");
}

+(id) NAV_FULLSCREEN_MAP {
	%orig;
	NSLog(@"+(id) NAV_FULLSCREEN_MAP");
}

+(id) NAV_LIST {
	%orig;
	NSLog(@"+(id) NAV_LIST");
}

+(id) NAV_KEYBOARD {
	%orig;
	NSLog(@"+(id) NAV_KEYBOARD");
}

+(id) GRAPHIC_WITH_TEXT {
	%orig;
	NSLog(@"+(id) GRAPHIC_WITH_TEXT");
}

+(id) TEXT_WITH_GRAPHIC {
	%orig;
	NSLog(@"+(id) TEXT_WITH_GRAPHIC");
}

+(id) TILES_ONLY {
	%orig;
	NSLog(@"+(id) TILES_ONLY");
}

+(id) TEXTBUTTONS_ONLY {
	%orig;
	NSLog(@"+(id) TEXTBUTTONS_ONLY");
}

+(id) GRAPHIC_WITH_TILES {
	%orig;
	NSLog(@"+(id) GRAPHIC_WITH_TILES");
}

+(id) TILES_WITH_GRAPHIC {
	%orig;
	NSLog(@"+(id) TILES_WITH_GRAPHIC");
}

+(id) GRAPHIC_WITH_TEXT_AND_SOFTBUTTONS {
	%orig;
	NSLog(@"+(id) GRAPHIC_WITH_TEXT_AND_SOFTBUTTONS");
}

+(id) TEXT_AND_SOFTBUTTONS_WITH_GRAPHIC {
	%orig;
	NSLog(@"+(id) TEXT_AND_SOFTBUTTONS_WITH_GRAPHIC");
}

+(id) GRAPHIC_WITH_TEXTBUTTONS {
	%orig;
	NSLog(@"+(id) GRAPHIC_WITH_TEXTBUTTONS");
}

+(id) TEXTBUTTONS_WITH_GRAPHIC {
	%orig;
	NSLog(@"+(id) TEXTBUTTONS_WITH_GRAPHIC");
}

+(id) LARGE_GRAPHIC_WITH_SOFTBUTTONS {
	%orig;
	NSLog(@"+(id) LARGE_GRAPHIC_WITH_SOFTBUTTONS");
}

+(id) DOUBLE_GRAPHIC_WITH_SOFTBUTTONS {
	%orig;
	NSLog(@"+(id) DOUBLE_GRAPHIC_WITH_SOFTBUTTONS");
}

+(id) LARGE_GRAPHIC_ONLY {
	%orig;
	NSLog(@"+(id) LARGE_GRAPHIC_ONLY");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLPowerModeStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) KEY_OUT {
	%orig;
	NSLog(@"+(id) KEY_OUT");
}

+(id) KEY_RECENTLY_OUT {
	%orig;
	NSLog(@"+(id) KEY_RECENTLY_OUT");
}

+(id) KEY_APPROVED_0 {
	%orig;
	NSLog(@"+(id) KEY_APPROVED_0");
}

+(id) POST_ACCESORY_0 {
	%orig;
	NSLog(@"+(id) POST_ACCESORY_0");
}

+(id) ACCESORY_1 {
	%orig;
	NSLog(@"+(id) ACCESORY_1");
}

+(id) POST_IGNITION_1 {
	%orig;
	NSLog(@"+(id) POST_IGNITION_1");
}

+(id) IGNITION_ON_2 {
	%orig;
	NSLog(@"+(id) IGNITION_ON_2");
}

+(id) RUNNING_2 {
	%orig;
	NSLog(@"+(id) RUNNING_2");
}

+(id) CRANK_3 {
	%orig;
	NSLog(@"+(id) CRANK_3");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLPowerModeQualificationStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) POWER_MODE_UNDEFINED {
	%orig;
	NSLog(@"+(id) POWER_MODE_UNDEFINED");
}

+(id) POWER_MODE_EVALUATION_IN_PROGRESS {
	%orig;
	NSLog(@"+(id) POWER_MODE_EVALUATION_IN_PROGRESS");
}

+(id) NOT_DEFINED {
	%orig;
	NSLog(@"+(id) NOT_DEFINED");
}

+(id) POWER_MODE_OK {
	%orig;
	NSLog(@"+(id) POWER_MODE_OK");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLPermissionStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) ALLOWED {
	%orig;
	NSLog(@"+(id) ALLOWED");
}

+(id) DISALLOWED {
	%orig;
	NSLog(@"+(id) DISALLOWED");
}

+(id) USER_DISALLOWED {
	%orig;
	NSLog(@"+(id) USER_DISALLOWED");
}

+(id) USER_CONSENT_PENDING {
	%orig;
	NSLog(@"+(id) USER_CONSENT_PENDING");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLMediaClockFormat

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) CLOCK1 {
	%orig;
	NSLog(@"+(id) CLOCK1");
}

+(id) CLOCK2 {
	%orig;
	NSLog(@"+(id) CLOCK2");
}

+(id) CLOCK3 {
	%orig;
	NSLog(@"+(id) CLOCK3");
}

+(id) CLOCKTEXT1 {
	%orig;
	NSLog(@"+(id) CLOCKTEXT1");
}

+(id) CLOCKTEXT2 {
	%orig;
	NSLog(@"+(id) CLOCKTEXT2");
}

+(id) CLOCKTEXT3 {
	%orig;
	NSLog(@"+(id) CLOCKTEXT3");
}

+(id) CLOCKTEXT4 {
	%orig;
	NSLog(@"+(id) CLOCKTEXT4");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLMaintenanceModeStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NORMAL {
	%orig;
	NSLog(@"+(id) NORMAL");
}

+(id) NEAR {
	%orig;
	NSLog(@"+(id) NEAR");
}

+(id) ACTIVE {
	%orig;
	NSLog(@"+(id) ACTIVE");
}

+(id) FEATURE_NOT_PRESENT {
	%orig;
	NSLog(@"+(id) FEATURE_NOT_PRESENT");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLLockScreenStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) OFF {
	%orig;
	NSLog(@"+(id) OFF");
}

+(id) OPTIONAL {
	%orig;
	NSLog(@"+(id) OPTIONAL");
}

+(id) REQUIRED {
	%orig;
	NSLog(@"+(id) REQUIRED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLLayoutMode

+(id) LIST_ONLY {
	%orig;
	NSLog(@"+(id) LIST_ONLY");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) ICON_ONLY {
	%orig;
	NSLog(@"+(id) ICON_ONLY");
}

+(id) ICON_WITH_SEARCH {
	%orig;
	NSLog(@"+(id) ICON_WITH_SEARCH");
}

+(id) LIST_WITH_SEARCH {
	%orig;
	NSLog(@"+(id) LIST_WITH_SEARCH");
}

+(id) KEYBOARD {
	%orig;
	NSLog(@"+(id) KEYBOARD");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLLanguage

+(id) EN_US {
	%orig;
	NSLog(@"+(id) EN_US");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) ES_MX {
	%orig;
	NSLog(@"+(id) ES_MX");
}

+(id) FR_CA {
	%orig;
	NSLog(@"+(id) FR_CA");
}

+(id) DE_DE {
	%orig;
	NSLog(@"+(id) DE_DE");
}

+(id) ES_ES {
	%orig;
	NSLog(@"+(id) ES_ES");
}

+(id) EN_GB {
	%orig;
	NSLog(@"+(id) EN_GB");
}

+(id) RU_RU {
	%orig;
	NSLog(@"+(id) RU_RU");
}

+(id) TR_TR {
	%orig;
	NSLog(@"+(id) TR_TR");
}

+(id) PL_PL {
	%orig;
	NSLog(@"+(id) PL_PL");
}

+(id) FR_FR {
	%orig;
	NSLog(@"+(id) FR_FR");
}

+(id) IT_IT {
	%orig;
	NSLog(@"+(id) IT_IT");
}

+(id) SV_SE {
	%orig;
	NSLog(@"+(id) SV_SE");
}

+(id) PT_PT {
	%orig;
	NSLog(@"+(id) PT_PT");
}

+(id) NL_NL {
	%orig;
	NSLog(@"+(id) NL_NL");
}

+(id) EN_AU {
	%orig;
	NSLog(@"+(id) EN_AU");
}

+(id) ZH_CN {
	%orig;
	NSLog(@"+(id) ZH_CN");
}

+(id) ZH_TW {
	%orig;
	NSLog(@"+(id) ZH_TW");
}

+(id) JA_JP {
	%orig;
	NSLog(@"+(id) JA_JP");
}

+(id) AR_SA {
	%orig;
	NSLog(@"+(id) AR_SA");
}

+(id) KO_KR {
	%orig;
	NSLog(@"+(id) KO_KR");
}

+(id) PT_BR {
	%orig;
	NSLog(@"+(id) PT_BR");
}

+(id) CS_CZ {
	%orig;
	NSLog(@"+(id) CS_CZ");
}

+(id) DA_DK {
	%orig;
	NSLog(@"+(id) DA_DK");
}

+(id) NO_NO {
	%orig;
	NSLog(@"+(id) NO_NO");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLKeypressMode

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) SINGLE_KEYPRESS {
	%orig;
	NSLog(@"+(id) SINGLE_KEYPRESS");
}

+(id) QUEUE_KEYPRESSES {
	%orig;
	NSLog(@"+(id) QUEUE_KEYPRESSES");
}

+(id) RESEND_CURRENT_ENTRY {
	%orig;
	NSLog(@"+(id) RESEND_CURRENT_ENTRY");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLKeyboardLayout

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) QWERTY {
	%orig;
	NSLog(@"+(id) QWERTY");
}

+(id) QWERTZ {
	%orig;
	NSLog(@"+(id) QWERTZ");
}

+(id) AZERTY {
	%orig;
	NSLog(@"+(id) AZERTY");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLKeyboardEvent

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) KEYPRESS {
	%orig;
	NSLog(@"+(id) KEYPRESS");
}

+(id) ENTRY_SUBMITTED {
	%orig;
	NSLog(@"+(id) ENTRY_SUBMITTED");
}

+(id) ENTRY_CANCELLED {
	%orig;
	NSLog(@"+(id) ENTRY_CANCELLED");
}

+(id) ENTRY_ABORTED {
	%orig;
	NSLog(@"+(id) ENTRY_ABORTED");
}

+(id) ENTRY_VOICE {
	%orig;
	NSLog(@"+(id) ENTRY_VOICE");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLInteractionMode

+(id) MANUAL_ONLY {
	%orig;
	NSLog(@"+(id) MANUAL_ONLY");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) VR_ONLY {
	%orig;
	NSLog(@"+(id) VR_ONLY");
}

+(id) BOTH {
	%orig;
	NSLog(@"+(id) BOTH");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLImageType

+(id) STATIC {
	%orig;
	NSLog(@"+(id) STATIC");
}

+(id) DYNAMIC {
	%orig;
	NSLog(@"+(id) DYNAMIC");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLImageFieldName

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) softButtonImage {
	%orig;
	NSLog(@"+(id) softButtonImage");
}

+(id) choiceImage {
	%orig;
	NSLog(@"+(id) choiceImage");
}

+(id) choiceSecondaryImage {
	%orig;
	NSLog(@"+(id) choiceSecondaryImage");
}

+(id) vrHelpItem {
	%orig;
	NSLog(@"+(id) vrHelpItem");
}

+(id) turnIcon {
	%orig;
	NSLog(@"+(id) turnIcon");
}

+(id) menuIcon {
	%orig;
	NSLog(@"+(id) menuIcon");
}

+(id) cmdIcon {
	%orig;
	NSLog(@"+(id) cmdIcon");
}

+(id) graphic {
	%orig;
	NSLog(@"+(id) graphic");
}

+(id) showConstantTBTIcon {
	%orig;
	NSLog(@"+(id) showConstantTBTIcon");
}

+(id) showConstantTBTNextTurnIcon {
	%orig;
	NSLog(@"+(id) showConstantTBTNextTurnIcon");
}

+(id) locationImage {
	%orig;
	NSLog(@"+(id) locationImage");
}

+(id) appIcon {
	%orig;
	NSLog(@"+(id) appIcon");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLIgnitionStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) INVALID {
	%orig;
	NSLog(@"+(id) INVALID");
}

+(id) OFF {
	%orig;
	NSLog(@"+(id) OFF");
}

+(id) ACCESSORY {
	%orig;
	NSLog(@"+(id) ACCESSORY");
}

+(id) RUN {
	%orig;
	NSLog(@"+(id) RUN");
}

+(id) START {
	%orig;
	NSLog(@"+(id) START");
}

+(id) UNKNOWN {
	%orig;
	NSLog(@"+(id) UNKNOWN");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLIgnitionStableStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) IGNITION_SWITCH_NOT_STABLE {
	%orig;
	NSLog(@"+(id) IGNITION_SWITCH_NOT_STABLE");
}

+(id) IGNITION_SWITCH_STABLE {
	%orig;
	NSLog(@"+(id) IGNITION_SWITCH_STABLE");
}

+(id) MISSING_FROM_TRANSMITTER {
	%orig;
	NSLog(@"+(id) MISSING_FROM_TRANSMITTER");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLHMIZoneCapabilities

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) FRONT {
	%orig;
	NSLog(@"+(id) FRONT");
}

+(id) BACK {
	%orig;
	NSLog(@"+(id) BACK");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLHMILevel

+(id) NONE {
	%orig;
	NSLog(@"+(id) NONE");
}

+(id) FULL {
	%orig;
	NSLog(@"+(id) FULL");
}

+(id) LIMITED {
	%orig;
	NSLog(@"+(id) LIMITED");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) BACKGROUND {
	%orig;
	NSLog(@"+(id) BACKGROUND");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLGlobalProperty

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) HELPPROMPT {
	%orig;
	NSLog(@"+(id) HELPPROMPT");
}

+(id) TIMEOUTPROMPT {
	%orig;
	NSLog(@"+(id) TIMEOUTPROMPT");
}

+(id) VRHELPTITLE {
	%orig;
	NSLog(@"+(id) VRHELPTITLE");
}

+(id) VRHELPITEMS {
	%orig;
	NSLog(@"+(id) VRHELPITEMS");
}

+(id) MENUNAME {
	%orig;
	NSLog(@"+(id) MENUNAME");
}

+(id) MENUICON {
	%orig;
	NSLog(@"+(id) MENUICON");
}

+(id) KEYBOARDPROPERTIES {
	%orig;
	NSLog(@"+(id) KEYBOARDPROPERTIES");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLFuelCutoffStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) FAULT {
	%orig;
	NSLog(@"+(id) FAULT");
}

+(id) TERMINATE_FUEL {
	%orig;
	NSLog(@"+(id) TERMINATE_FUEL");
}

+(id) NORMAL_OPERATION {
	%orig;
	NSLog(@"+(id) NORMAL_OPERATION");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLFileType

+(id) GRAPHIC_JPEG {
	%orig;
	NSLog(@"+(id) GRAPHIC_JPEG");
}

+(id) GRAPHIC_PNG {
	%orig;
	NSLog(@"+(id) GRAPHIC_PNG");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) GRAPHIC_BMP {
	%orig;
	NSLog(@"+(id) GRAPHIC_BMP");
}

+(id) AUDIO_WAVE {
	%orig;
	NSLog(@"+(id) AUDIO_WAVE");
}

+(id) AUDIO_MP3 {
	%orig;
	NSLog(@"+(id) AUDIO_MP3");
}

+(id) AUDIO_AAC {
	%orig;
	NSLog(@"+(id) AUDIO_AAC");
}

+(id) BINARY {
	%orig;
	NSLog(@"+(id) BINARY");
}

+(id) JSON {
	%orig;
	NSLog(@"+(id) JSON");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLEmergencyEventType

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) FAULT {
	%orig;
	NSLog(@"+(id) FAULT");
}

+(id) NOT_SUPPORTED {
	%orig;
	NSLog(@"+(id) NOT_SUPPORTED");
}

+(id) NO_EVENT {
	%orig;
	NSLog(@"+(id) NO_EVENT");
}

+(id) FRONTAL {
	%orig;
	NSLog(@"+(id) FRONTAL");
}

+(id) SIDE {
	%orig;
	NSLog(@"+(id) SIDE");
}

+(id) REAR {
	%orig;
	NSLog(@"+(id) REAR");
}

+(id) ROLLOVER {
	%orig;
	NSLog(@"+(id) ROLLOVER");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLECallConfirmationStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NORMAL {
	%orig;
	NSLog(@"+(id) NORMAL");
}

+(id) CALL_IN_PROGRESS {
	%orig;
	NSLog(@"+(id) CALL_IN_PROGRESS");
}

+(id) CALL_CANCELLED {
	%orig;
	NSLog(@"+(id) CALL_CANCELLED");
}

+(id) CALL_COMPLETED {
	%orig;
	NSLog(@"+(id) CALL_COMPLETED");
}

+(id) CALL_UNSUCCESSFUL {
	%orig;
	NSLog(@"+(id) CALL_UNSUCCESSFUL");
}

+(id) ECALL_CONFIGURED_OFF {
	%orig;
	NSLog(@"+(id) ECALL_CONFIGURED_OFF");
}

+(id) CALL_COMPLETE_DTMF_TIMEOUT {
	%orig;
	NSLog(@"+(id) CALL_COMPLETE_DTMF_TIMEOUT");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLDriverDistractionState

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) DD_ON {
	%orig;
	NSLog(@"+(id) DD_ON");
}

+(id) DD_OFF {
	%orig;
	NSLog(@"+(id) DD_OFF");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLDisplayType

+(id) MFD3 {
	%orig;
	NSLog(@"+(id) MFD3");
}

+(id) MFD4 {
	%orig;
	NSLog(@"+(id) MFD4");
}

+(id) MFD5 {
	%orig;
	NSLog(@"+(id) MFD5");
}

+(id) GEN3_8_INCH {
	%orig;
	NSLog(@"+(id) GEN3_8_INCH");
}

+(id) CID {
	%orig;
	NSLog(@"+(id) CID");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) TYPE2 {
	%orig;
	NSLog(@"+(id) TYPE2");
}

+(id) TYPE5 {
	%orig;
	NSLog(@"+(id) TYPE5");
}

+(id) NGN {
	%orig;
	NSLog(@"+(id) NGN");
}

+(id) GEN2_8_DMA {
	%orig;
	NSLog(@"+(id) GEN2_8_DMA");
}

+(id) GEN2_6_DMA {
	%orig;
	NSLog(@"+(id) GEN2_6_DMA");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLDimension

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NO_FIX {
	%orig;
	NSLog(@"+(id) NO_FIX");
}

+(id) _2D {
	%orig;
	NSLog(@"+(id) _2D");
}

+(id) _3D {
	%orig;
	NSLog(@"+(id) _3D");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLDeviceLevelStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) ZERO_LEVEL_BARS {
	%orig;
	NSLog(@"+(id) ZERO_LEVEL_BARS");
}

+(id) ONE_LEVEL_BARS {
	%orig;
	NSLog(@"+(id) ONE_LEVEL_BARS");
}

+(id) TWO_LEVEL_BARS {
	%orig;
	NSLog(@"+(id) TWO_LEVEL_BARS");
}

+(id) THREE_LEVEL_BARS {
	%orig;
	NSLog(@"+(id) THREE_LEVEL_BARS");
}

+(id) FOUR_LEVEL_BARS {
	%orig;
	NSLog(@"+(id) FOUR_LEVEL_BARS");
}

+(id) NOT_PROVIDED {
	%orig;
	NSLog(@"+(id) NOT_PROVIDED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLComponentVolumeStatus

+(id) ALERT {
	%orig;
	NSLog(@"+(id) ALERT");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NORMAL {
	%orig;
	NSLog(@"+(id) NORMAL");
}

+(id) LOW {
	%orig;
	NSLog(@"+(id) LOW");
}

+(id) FAULT {
	%orig;
	NSLog(@"+(id) FAULT");
}

+(id) NOT_SUPPORTED {
	%orig;
	NSLog(@"+(id) NOT_SUPPORTED");
}

+(id) UNKNOWN {
	%orig;
	NSLog(@"+(id) UNKNOWN");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLCompassDirection

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NORTH {
	%orig;
	NSLog(@"+(id) NORTH");
}

+(id) NORTHWEST {
	%orig;
	NSLog(@"+(id) NORTHWEST");
}

+(id) WEST {
	%orig;
	NSLog(@"+(id) WEST");
}

+(id) SOUTHWEST {
	%orig;
	NSLog(@"+(id) SOUTHWEST");
}

+(id) SOUTH {
	%orig;
	NSLog(@"+(id) SOUTH");
}

+(id) SOUTHEAST {
	%orig;
	NSLog(@"+(id) SOUTHEAST");
}

+(id) EAST {
	%orig;
	NSLog(@"+(id) EAST");
}

+(id) NORTHEAST {
	%orig;
	NSLog(@"+(id) NORTHEAST");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLCharacterSet

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) TYPE2SET {
	%orig;
	NSLog(@"+(id) TYPE2SET");
}

+(id) TYPE5SET {
	%orig;
	NSLog(@"+(id) TYPE5SET");
}

+(id) CID1SET {
	%orig;
	NSLog(@"+(id) CID1SET");
}

+(id) CID2SET {
	%orig;
	NSLog(@"+(id) CID2SET");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLCarModeStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) FACTORY {
	%orig;
	NSLog(@"+(id) FACTORY");
}

+(id) TRANSPORT {
	%orig;
	NSLog(@"+(id) TRANSPORT");
}

+(id) CRASH {
	%orig;
	NSLog(@"+(id) CRASH");
}

+(id) NORMAL {
	%orig;
	NSLog(@"+(id) NORMAL");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLButtonPressMode

+(id) LONG {
	%orig;
	NSLog(@"+(id) LONG");
}

+(id) SHORT {
	%orig;
	NSLog(@"+(id) SHORT");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLButtonName

+(id) OK {
	%orig;
	NSLog(@"+(id) OK");
}

+(id) SEEKRIGHT {
	%orig;
	NSLog(@"+(id) SEEKRIGHT");
}

+(id) SEEKLEFT {
	%orig;
	NSLog(@"+(id) SEEKLEFT");
}

+(id) PRESET_0 {
	%orig;
	NSLog(@"+(id) PRESET_0");
}

+(id) PRESET_1 {
	%orig;
	NSLog(@"+(id) PRESET_1");
}

+(id) PRESET_2 {
	%orig;
	NSLog(@"+(id) PRESET_2");
}

+(id) PRESET_3 {
	%orig;
	NSLog(@"+(id) PRESET_3");
}

+(id) PRESET_4 {
	%orig;
	NSLog(@"+(id) PRESET_4");
}

+(id) PRESET_5 {
	%orig;
	NSLog(@"+(id) PRESET_5");
}

+(id) PRESET_6 {
	%orig;
	NSLog(@"+(id) PRESET_6");
}

+(id) PRESET_7 {
	%orig;
	NSLog(@"+(id) PRESET_7");
}

+(id) PRESET_8 {
	%orig;
	NSLog(@"+(id) PRESET_8");
}

+(id) PRESET_9 {
	%orig;
	NSLog(@"+(id) PRESET_9");
}

+(id) CUSTOM_BUTTON {
	%orig;
	NSLog(@"+(id) CUSTOM_BUTTON");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) TUNEUP {
	%orig;
	NSLog(@"+(id) TUNEUP");
}

+(id) TUNEDOWN {
	%orig;
	NSLog(@"+(id) TUNEDOWN");
}

+(id) SEARCH {
	%orig;
	NSLog(@"+(id) SEARCH");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLButtonEventMode

+(id) BUTTONUP {
	%orig;
	NSLog(@"+(id) BUTTONUP");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) BUTTONDOWN {
	%orig;
	NSLog(@"+(id) BUTTONDOWN");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLBitsPerSample

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) _8_BIT {
	%orig;
	NSLog(@"+(id) _8_BIT");
}

+(id) _16_BIT {
	%orig;
	NSLog(@"+(id) _16_BIT");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLAudioType

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) PCM {
	%orig;
	NSLog(@"+(id) PCM");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLAudioStreamingState

+(id) NOT_AUDIBLE {
	%orig;
	NSLog(@"+(id) NOT_AUDIBLE");
}

+(id) AUDIBLE {
	%orig;
	NSLog(@"+(id) AUDIBLE");
}

+(id) ATTENUATED {
	%orig;
	NSLog(@"+(id) ATTENUATED");
}

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLAppInterfaceUnregisteredReason

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) IGNITION_OFF {
	%orig;
	NSLog(@"+(id) IGNITION_OFF");
}

+(id) BLUETOOTH_OFF {
	%orig;
	NSLog(@"+(id) BLUETOOTH_OFF");
}

+(id) USB_DISCONNECTED {
	%orig;
	NSLog(@"+(id) USB_DISCONNECTED");
}

+(id) REQUEST_WHILE_IN_NONE_HMI_LEVEL {
	%orig;
	NSLog(@"+(id) REQUEST_WHILE_IN_NONE_HMI_LEVEL");
}

+(id) TOO_MANY_REQUESTS {
	%orig;
	NSLog(@"+(id) TOO_MANY_REQUESTS");
}

+(id) DRIVER_DISTRACTION_VIOLATION {
	%orig;
	NSLog(@"+(id) DRIVER_DISTRACTION_VIOLATION");
}

+(id) LANGUAGE_CHANGE {
	%orig;
	NSLog(@"+(id) LANGUAGE_CHANGE");
}

+(id) MASTER_RESET {
	%orig;
	NSLog(@"+(id) MASTER_RESET");
}

+(id) FACTORY_DEFAULTS {
	%orig;
	NSLog(@"+(id) FACTORY_DEFAULTS");
}

+(id) APP_UNAUTHORIZED {
	%orig;
	NSLog(@"+(id) APP_UNAUTHORIZED");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLAppHMIType

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) DEFAULT {
	%orig;
	NSLog(@"+(id) DEFAULT");
}

+(id) COMMUNICATION {
	%orig;
	NSLog(@"+(id) COMMUNICATION");
}

+(id) MEDIA {
	%orig;
	NSLog(@"+(id) MEDIA");
}

+(id) MESSAGING {
	%orig;
	NSLog(@"+(id) MESSAGING");
}

+(id) NAVIGATION {
	%orig;
	NSLog(@"+(id) NAVIGATION");
}

+(id) INFORMATION {
	%orig;
	NSLog(@"+(id) INFORMATION");
}

+(id) SOCIAL {
	%orig;
	NSLog(@"+(id) SOCIAL");
}

+(id) BACKGROUND_PROCESS {
	%orig;
	NSLog(@"+(id) BACKGROUND_PROCESS");
}

+(id) TESTING {
	%orig;
	NSLog(@"+(id) TESTING");
}

+(id) SYSTEM {
	%orig;
	NSLog(@"+(id) SYSTEM");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLAmbientLightStatus

+(id) valueOf:(id) {
	%orig;
	NSLog(@"+(id) valueOf:(id)");
}

+(id) NIGHT {
	%orig;
	NSLog(@"+(id) NIGHT");
}

+(id) TWILIGHT_1 {
	%orig;
	NSLog(@"+(id) TWILIGHT_1");
}

+(id) TWILIGHT_2 {
	%orig;
	NSLog(@"+(id) TWILIGHT_2");
}

+(id) TWILIGHT_3 {
	%orig;
	NSLog(@"+(id) TWILIGHT_3");
}

+(id) TWILIGHT_4 {
	%orig;
	NSLog(@"+(id) TWILIGHT_4");
}

+(id) DAY {
	%orig;
	NSLog(@"+(id) DAY");
}

+(id) INVALID {
	%orig;
	NSLog(@"+(id) INVALID");
}

+(id) UNKNOWN {
	%orig;
	NSLog(@"+(id) UNKNOWN");
}

+(id) values {
	%orig;
	NSLog(@"+(id) values");
}

%end

%hook SDLRPCStruct

-(id) serializeDictionary:(id) version:(unsigned char) {
	%orig;
	NSLog(@"-(id) serializeDictionary:(id) version:(unsigned char)");
}

-(id) serializeAsDictionary:(unsigned char) {
	%orig;
	NSLog(@"-(id) serializeAsDictionary:(unsigned char)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLVehicleType

-(id) modelYear {
	%orig;
	NSLog(@"-(id) modelYear");
}

-(void) setModelYear:(id) {
	%orig;
	NSLog(@"-(void) setModelYear:(id)");
}

-(void) setTrim:(id) {
	%orig;
	NSLog(@"-(void) setTrim:(id)");
}

-(id) trim {
	%orig;
	NSLog(@"-(id) trim");
}

-(void) setMake:(id) {
	%orig;
	NSLog(@"-(void) setMake:(id)");
}

-(id) make {
	%orig;
	NSLog(@"-(id) make");
}

-(void) setModel:(id) {
	%orig;
	NSLog(@"-(void) setModel:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) model {
	%orig;
	NSLog(@"-(id) model");
}

%end

%hook SDLVehicleDataResult

-(void) setResultCode:(id) {
	%orig;
	NSLog(@"-(void) setResultCode:(id)");
}

-(id) resultCode {
	%orig;
	NSLog(@"-(id) resultCode");
}

-(void) setDataType:(id) {
	%orig;
	NSLog(@"-(void) setDataType:(id)");
}

-(id) dataType {
	%orig;
	NSLog(@"-(id) dataType");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLTurn

-(id) turnIcon {
	%orig;
	NSLog(@"-(id) turnIcon");
}

-(void) setTurnIcon:(id) {
	%orig;
	NSLog(@"-(void) setTurnIcon:(id)");
}

-(void) setNavigationText:(id) {
	%orig;
	NSLog(@"-(void) setNavigationText:(id)");
}

-(id) navigationText {
	%orig;
	NSLog(@"-(id) navigationText");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLTTSChunk

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLTouchEventCapabilities

-(void) setPressAvailable:(id) {
	%orig;
	NSLog(@"-(void) setPressAvailable:(id)");
}

-(id) pressAvailable {
	%orig;
	NSLog(@"-(id) pressAvailable");
}

-(void) setMultiTouchAvailable:(id) {
	%orig;
	NSLog(@"-(void) setMultiTouchAvailable:(id)");
}

-(id) multiTouchAvailable {
	%orig;
	NSLog(@"-(id) multiTouchAvailable");
}

-(void) setDoublePressAvailable:(id) {
	%orig;
	NSLog(@"-(void) setDoublePressAvailable:(id)");
}

-(id) doublePressAvailable {
	%orig;
	NSLog(@"-(id) doublePressAvailable");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLTouchEvent

-(void) setTouchEventId:(id) {
	%orig;
	NSLog(@"-(void) setTouchEventId:(id)");
}

-(id) touchEventId {
	%orig;
	NSLog(@"-(id) touchEventId");
}

-(void) setCoord:(id) {
	%orig;
	NSLog(@"-(void) setCoord:(id)");
}

-(id) coord {
	%orig;
	NSLog(@"-(id) coord");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) timeStamp {
	%orig;
	NSLog(@"-(id) timeStamp");
}

-(void) setTimeStamp:(id) {
	%orig;
	NSLog(@"-(void) setTimeStamp:(id)");
}

%end

%hook SDLTouchCoord

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) x {
	%orig;
	NSLog(@"-(id) x");
}

-(void) setX:(id) {
	%orig;
	NSLog(@"-(void) setX:(id)");
}

-(id) y {
	%orig;
	NSLog(@"-(id) y");
}

-(void) setY:(id) {
	%orig;
	NSLog(@"-(void) setY:(id)");
}

%end

%hook SDLTireStatus

-(void) setPressureTelltale:(id) {
	%orig;
	NSLog(@"-(void) setPressureTelltale:(id)");
}

-(id) pressureTelltale {
	%orig;
	NSLog(@"-(id) pressureTelltale");
}

-(void) setLeftFront:(id) {
	%orig;
	NSLog(@"-(void) setLeftFront:(id)");
}

-(id) leftFront {
	%orig;
	NSLog(@"-(id) leftFront");
}

-(void) setRightFront:(id) {
	%orig;
	NSLog(@"-(void) setRightFront:(id)");
}

-(id) rightFront {
	%orig;
	NSLog(@"-(id) rightFront");
}

-(void) setLeftRear:(id) {
	%orig;
	NSLog(@"-(void) setLeftRear:(id)");
}

-(id) leftRear {
	%orig;
	NSLog(@"-(id) leftRear");
}

-(void) setRightRear:(id) {
	%orig;
	NSLog(@"-(void) setRightRear:(id)");
}

-(id) rightRear {
	%orig;
	NSLog(@"-(id) rightRear");
}

-(void) setInnerLeftRear:(id) {
	%orig;
	NSLog(@"-(void) setInnerLeftRear:(id)");
}

-(id) innerLeftRear {
	%orig;
	NSLog(@"-(id) innerLeftRear");
}

-(void) setInnerRightRear:(id) {
	%orig;
	NSLog(@"-(void) setInnerRightRear:(id)");
}

-(id) innerRightRear {
	%orig;
	NSLog(@"-(id) innerRightRear");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLTextField

-(void) setCharacterSet:(id) {
	%orig;
	NSLog(@"-(void) setCharacterSet:(id)");
}

-(id) characterSet {
	%orig;
	NSLog(@"-(id) characterSet");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) width {
	%orig;
	NSLog(@"-(id) width");
}

-(void) setWidth:(id) {
	%orig;
	NSLog(@"-(void) setWidth:(id)");
}

-(id) rows {
	%orig;
	NSLog(@"-(id) rows");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(void) setRows:(id) {
	%orig;
	NSLog(@"-(void) setRows:(id)");
}

%end

%hook SDLSyncMsgVersion

-(id) majorVersion {
	%orig;
	NSLog(@"-(id) majorVersion");
}

-(id) minorVersion {
	%orig;
	NSLog(@"-(id) minorVersion");
}

-(void) setMajorVersion:(id) {
	%orig;
	NSLog(@"-(void) setMajorVersion:(id)");
}

-(void) setMinorVersion:(id) {
	%orig;
	NSLog(@"-(void) setMinorVersion:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLStartTime

-(id) minutes {
	%orig;
	NSLog(@"-(id) minutes");
}

-(id) seconds {
	%orig;
	NSLog(@"-(id) seconds");
}

-(id) hours {
	%orig;
	NSLog(@"-(id) hours");
}

-(void) setHours:(id) {
	%orig;
	NSLog(@"-(void) setHours:(id)");
}

-(void) setSeconds:(id) {
	%orig;
	NSLog(@"-(void) setSeconds:(id)");
}

-(void) setMinutes:(id) {
	%orig;
	NSLog(@"-(void) setMinutes:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSoftButtonCapabilities

-(void) setShortPressAvailable:(id) {
	%orig;
	NSLog(@"-(void) setShortPressAvailable:(id)");
}

-(id) shortPressAvailable {
	%orig;
	NSLog(@"-(id) shortPressAvailable");
}

-(void) setLongPressAvailable:(id) {
	%orig;
	NSLog(@"-(void) setLongPressAvailable:(id)");
}

-(id) longPressAvailable {
	%orig;
	NSLog(@"-(id) longPressAvailable");
}

-(void) setUpDownAvailable:(id) {
	%orig;
	NSLog(@"-(void) setUpDownAvailable:(id)");
}

-(id) upDownAvailable {
	%orig;
	NSLog(@"-(id) upDownAvailable");
}

-(void) setImageSupported:(id) {
	%orig;
	NSLog(@"-(void) setImageSupported:(id)");
}

-(id) imageSupported {
	%orig;
	NSLog(@"-(id) imageSupported");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSoftButton

-(void) setIsHighlighted:(id) {
	%orig;
	NSLog(@"-(void) setIsHighlighted:(id)");
}

-(void) setSystemAction:(id) {
	%orig;
	NSLog(@"-(void) setSystemAction:(id)");
}

-(void) setSoftButtonID:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtonID:(id)");
}

-(id) softButtonID {
	%orig;
	NSLog(@"-(id) softButtonID");
}

-(id) systemAction {
	%orig;
	NSLog(@"-(id) systemAction");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(id) isHighlighted {
	%orig;
	NSLog(@"-(id) isHighlighted");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSingleTireStatus

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) status {
	%orig;
	NSLog(@"-(id) status");
}

-(void) setStatus:(id) {
	%orig;
	NSLog(@"-(void) setStatus:(id)");
}

%end

%hook SDLScreenParams

-(void) setTouchEventAvailable:(id) {
	%orig;
	NSLog(@"-(void) setTouchEventAvailable:(id)");
}

-(id) touchEventAvailable {
	%orig;
	NSLog(@"-(id) touchEventAvailable");
}

-(id) resolution {
	%orig;
	NSLog(@"-(id) resolution");
}

-(void) setResolution:(id) {
	%orig;
	NSLog(@"-(void) setResolution:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLVRHelpItem

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(void) setPosition:(id) {
	%orig;
	NSLog(@"-(void) setPosition:(id)");
}

-(id) position {
	%orig;
	NSLog(@"-(id) position");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLPresetBankCapabilities

-(void) setOnScreenPresetsAvailable:(id) {
	%orig;
	NSLog(@"-(void) setOnScreenPresetsAvailable:(id)");
}

-(id) onScreenPresetsAvailable {
	%orig;
	NSLog(@"-(id) onScreenPresetsAvailable");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLPermissionItem

-(void) setRpcName:(id) {
	%orig;
	NSLog(@"-(void) setRpcName:(id)");
}

-(id) rpcName {
	%orig;
	NSLog(@"-(id) rpcName");
}

-(void) setHmiPermissions:(id) {
	%orig;
	NSLog(@"-(void) setHmiPermissions:(id)");
}

-(id) hmiPermissions {
	%orig;
	NSLog(@"-(id) hmiPermissions");
}

-(void) setParameterPermissions:(id) {
	%orig;
	NSLog(@"-(void) setParameterPermissions:(id)");
}

-(id) parameterPermissions {
	%orig;
	NSLog(@"-(id) parameterPermissions");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLParameterPermissions

-(void) setUserDisallowed:(id) {
	%orig;
	NSLog(@"-(void) setUserDisallowed:(id)");
}

-(id) userDisallowed {
	%orig;
	NSLog(@"-(id) userDisallowed");
}

-(void) setAllowed:(id) {
	%orig;
	NSLog(@"-(void) setAllowed:(id)");
}

-(id) allowed {
	%orig;
	NSLog(@"-(id) allowed");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLMyKey

-(void) setE911Override:(id) {
	%orig;
	NSLog(@"-(void) setE911Override:(id)");
}

-(id) e911Override {
	%orig;
	NSLog(@"-(id) e911Override");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLMenuParams

-(void) setMenuName:(id) {
	%orig;
	NSLog(@"-(void) setMenuName:(id)");
}

-(id) menuName {
	%orig;
	NSLog(@"-(id) menuName");
}

-(id) parentID {
	%orig;
	NSLog(@"-(id) parentID");
}

-(void) setParentID:(id) {
	%orig;
	NSLog(@"-(void) setParentID:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setPosition:(id) {
	%orig;
	NSLog(@"-(void) setPosition:(id)");
}

-(id) position {
	%orig;
	NSLog(@"-(id) position");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLKeyboardProperties

-(void) setKeyboardLayout:(id) {
	%orig;
	NSLog(@"-(void) setKeyboardLayout:(id)");
}

-(id) keyboardLayout {
	%orig;
	NSLog(@"-(id) keyboardLayout");
}

-(void) setKeypressMode:(id) {
	%orig;
	NSLog(@"-(void) setKeypressMode:(id)");
}

-(id) keypressMode {
	%orig;
	NSLog(@"-(id) keypressMode");
}

-(void) setLimitedCharacterList:(id) {
	%orig;
	NSLog(@"-(void) setLimitedCharacterList:(id)");
}

-(id) limitedCharacterList {
	%orig;
	NSLog(@"-(id) limitedCharacterList");
}

-(void) setAutoCompleteText:(id) {
	%orig;
	NSLog(@"-(void) setAutoCompleteText:(id)");
}

-(id) autoCompleteText {
	%orig;
	NSLog(@"-(id) autoCompleteText");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) language {
	%orig;
	NSLog(@"-(id) language");
}

-(void) setLanguage:(id) {
	%orig;
	NSLog(@"-(void) setLanguage:(id)");
}

%end

%hook SDLImageResolution

-(void) setResolutionWidth:(id) {
	%orig;
	NSLog(@"-(void) setResolutionWidth:(id)");
}

-(id) resolutionWidth {
	%orig;
	NSLog(@"-(id) resolutionWidth");
}

-(void) setResolutionHeight:(id) {
	%orig;
	NSLog(@"-(void) setResolutionHeight:(id)");
}

-(id) resolutionHeight {
	%orig;
	NSLog(@"-(id) resolutionHeight");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLImageField

-(void) setImageTypeSupported:(id) {
	%orig;
	NSLog(@"-(void) setImageTypeSupported:(id)");
}

-(id) imageTypeSupported {
	%orig;
	NSLog(@"-(id) imageTypeSupported");
}

-(void) setImageResolution:(id) {
	%orig;
	NSLog(@"-(void) setImageResolution:(id)");
}

-(id) imageResolution {
	%orig;
	NSLog(@"-(id) imageResolution");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLImage

-(id) imageType {
	%orig;
	NSLog(@"-(id) imageType");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) value {
	%orig;
	NSLog(@"-(id) value");
}

-(void) setValue:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(void) setImageType:(id) {
	%orig;
	NSLog(@"-(void) setImageType:(id)");
}

%end

%hook SDLHMIPermissions

-(void) setUserDisallowed:(id) {
	%orig;
	NSLog(@"-(void) setUserDisallowed:(id)");
}

-(id) userDisallowed {
	%orig;
	NSLog(@"-(id) userDisallowed");
}

-(void) setAllowed:(id) {
	%orig;
	NSLog(@"-(void) setAllowed:(id)");
}

-(id) allowed {
	%orig;
	NSLog(@"-(id) allowed");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLHMICapabilities

-(void) setPhoneCall:(id) {
	%orig;
	NSLog(@"-(void) setPhoneCall:(id)");
}

-(id) phoneCall {
	%orig;
	NSLog(@"-(id) phoneCall");
}

-(void) setNavigation:(id) {
	%orig;
	NSLog(@"-(void) setNavigation:(id)");
}

-(id) navigation {
	%orig;
	NSLog(@"-(id) navigation");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLHeadLampStatus

-(void) setLowBeamsOn:(id) {
	%orig;
	NSLog(@"-(void) setLowBeamsOn:(id)");
}

-(id) lowBeamsOn {
	%orig;
	NSLog(@"-(id) lowBeamsOn");
}

-(void) setHighBeamsOn:(id) {
	%orig;
	NSLog(@"-(void) setHighBeamsOn:(id)");
}

-(id) highBeamsOn {
	%orig;
	NSLog(@"-(id) highBeamsOn");
}

-(void) setAmbientLightSensorStatus:(id) {
	%orig;
	NSLog(@"-(void) setAmbientLightSensorStatus:(id)");
}

-(id) ambientLightSensorStatus {
	%orig;
	NSLog(@"-(id) ambientLightSensorStatus");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLGPSData

-(void) setLongitudeDegrees:(id) {
	%orig;
	NSLog(@"-(void) setLongitudeDegrees:(id)");
}

-(id) longitudeDegrees {
	%orig;
	NSLog(@"-(id) longitudeDegrees");
}

-(void) setLatitudeDegrees:(id) {
	%orig;
	NSLog(@"-(void) setLatitudeDegrees:(id)");
}

-(id) latitudeDegrees {
	%orig;
	NSLog(@"-(id) latitudeDegrees");
}

-(void) setUtcYear:(id) {
	%orig;
	NSLog(@"-(void) setUtcYear:(id)");
}

-(id) utcYear {
	%orig;
	NSLog(@"-(id) utcYear");
}

-(void) setUtcMonth:(id) {
	%orig;
	NSLog(@"-(void) setUtcMonth:(id)");
}

-(id) utcMonth {
	%orig;
	NSLog(@"-(id) utcMonth");
}

-(void) setUtcDay:(id) {
	%orig;
	NSLog(@"-(void) setUtcDay:(id)");
}

-(id) utcDay {
	%orig;
	NSLog(@"-(id) utcDay");
}

-(void) setUtcHours:(id) {
	%orig;
	NSLog(@"-(void) setUtcHours:(id)");
}

-(id) utcHours {
	%orig;
	NSLog(@"-(id) utcHours");
}

-(void) setUtcMinutes:(id) {
	%orig;
	NSLog(@"-(void) setUtcMinutes:(id)");
}

-(id) utcMinutes {
	%orig;
	NSLog(@"-(id) utcMinutes");
}

-(void) setUtcSeconds:(id) {
	%orig;
	NSLog(@"-(void) setUtcSeconds:(id)");
}

-(id) utcSeconds {
	%orig;
	NSLog(@"-(id) utcSeconds");
}

-(void) setCompassDirection:(id) {
	%orig;
	NSLog(@"-(void) setCompassDirection:(id)");
}

-(id) compassDirection {
	%orig;
	NSLog(@"-(id) compassDirection");
}

-(void) setPdop:(id) {
	%orig;
	NSLog(@"-(void) setPdop:(id)");
}

-(id) pdop {
	%orig;
	NSLog(@"-(id) pdop");
}

-(void) setHdop:(id) {
	%orig;
	NSLog(@"-(void) setHdop:(id)");
}

-(id) hdop {
	%orig;
	NSLog(@"-(id) hdop");
}

-(void) setVdop:(id) {
	%orig;
	NSLog(@"-(void) setVdop:(id)");
}

-(id) vdop {
	%orig;
	NSLog(@"-(id) vdop");
}

-(void) setActual:(id) {
	%orig;
	NSLog(@"-(void) setActual:(id)");
}

-(id) actual {
	%orig;
	NSLog(@"-(id) actual");
}

-(void) setSatellites:(id) {
	%orig;
	NSLog(@"-(void) setSatellites:(id)");
}

-(id) satellites {
	%orig;
	NSLog(@"-(id) satellites");
}

-(void) setAltitude:(id) {
	%orig;
	NSLog(@"-(void) setAltitude:(id)");
}

-(id) altitude {
	%orig;
	NSLog(@"-(id) altitude");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setSpeed:(id) {
	%orig;
	NSLog(@"-(void) setSpeed:(id)");
}

-(id) speed {
	%orig;
	NSLog(@"-(id) speed");
}

-(id) dimension {
	%orig;
	NSLog(@"-(id) dimension");
}

-(void) setDimension:(id) {
	%orig;
	NSLog(@"-(void) setDimension:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(void) setHeading:(id) {
	%orig;
	NSLog(@"-(void) setHeading:(id)");
}

-(id) heading {
	%orig;
	NSLog(@"-(id) heading");
}

%end

%hook SDLEmergencyEvent

-(void) setEmergencyEventType:(id) {
	%orig;
	NSLog(@"-(void) setEmergencyEventType:(id)");
}

-(id) emergencyEventType {
	%orig;
	NSLog(@"-(id) emergencyEventType");
}

-(void) setFuelCutoffStatus:(id) {
	%orig;
	NSLog(@"-(void) setFuelCutoffStatus:(id)");
}

-(id) fuelCutoffStatus {
	%orig;
	NSLog(@"-(id) fuelCutoffStatus");
}

-(void) setRolloverEvent:(id) {
	%orig;
	NSLog(@"-(void) setRolloverEvent:(id)");
}

-(id) rolloverEvent {
	%orig;
	NSLog(@"-(id) rolloverEvent");
}

-(void) setMaximumChangeVelocity:(id) {
	%orig;
	NSLog(@"-(void) setMaximumChangeVelocity:(id)");
}

-(id) maximumChangeVelocity {
	%orig;
	NSLog(@"-(id) maximumChangeVelocity");
}

-(void) setMultipleEvents:(id) {
	%orig;
	NSLog(@"-(void) setMultipleEvents:(id)");
}

-(id) multipleEvents {
	%orig;
	NSLog(@"-(id) multipleEvents");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLECallInfo

-(void) setECallNotificationStatus:(id) {
	%orig;
	NSLog(@"-(void) setECallNotificationStatus:(id)");
}

-(id) eCallNotificationStatus {
	%orig;
	NSLog(@"-(id) eCallNotificationStatus");
}

-(void) setAuxECallNotificationStatus:(id) {
	%orig;
	NSLog(@"-(void) setAuxECallNotificationStatus:(id)");
}

-(id) auxECallNotificationStatus {
	%orig;
	NSLog(@"-(id) auxECallNotificationStatus");
}

-(void) setECallConfirmationStatus:(id) {
	%orig;
	NSLog(@"-(void) setECallConfirmationStatus:(id)");
}

-(id) eCallConfirmationStatus {
	%orig;
	NSLog(@"-(id) eCallConfirmationStatus");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDisplayCapabilities

-(void) setImageFields:(id) {
	%orig;
	NSLog(@"-(void) setImageFields:(id)");
}

-(id) imageFields {
	%orig;
	NSLog(@"-(id) imageFields");
}

-(void) setMediaClockFormats:(id) {
	%orig;
	NSLog(@"-(void) setMediaClockFormats:(id)");
}

-(id) mediaClockFormats {
	%orig;
	NSLog(@"-(id) mediaClockFormats");
}

-(void) setGraphicSupported:(id) {
	%orig;
	NSLog(@"-(void) setGraphicSupported:(id)");
}

-(id) graphicSupported {
	%orig;
	NSLog(@"-(id) graphicSupported");
}

-(void) setTemplatesAvailable:(id) {
	%orig;
	NSLog(@"-(void) setTemplatesAvailable:(id)");
}

-(id) templatesAvailable {
	%orig;
	NSLog(@"-(id) templatesAvailable");
}

-(void) setScreenParams:(id) {
	%orig;
	NSLog(@"-(void) setScreenParams:(id)");
}

-(id) screenParams {
	%orig;
	NSLog(@"-(id) screenParams");
}

-(void) setNumCustomPresetsAvailable:(id) {
	%orig;
	NSLog(@"-(void) setNumCustomPresetsAvailable:(id)");
}

-(id) numCustomPresetsAvailable {
	%orig;
	NSLog(@"-(id) numCustomPresetsAvailable");
}

-(void) setTextFields:(id) {
	%orig;
	NSLog(@"-(void) setTextFields:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) textFields {
	%orig;
	NSLog(@"-(id) textFields");
}

-(void) setDisplayType:(id) {
	%orig;
	NSLog(@"-(void) setDisplayType:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) displayType {
	%orig;
	NSLog(@"-(id) displayType");
}

%end

%hook SDLDIDResult

-(void) setDidLocation:(id) {
	%orig;
	NSLog(@"-(void) setDidLocation:(id)");
}

-(id) didLocation {
	%orig;
	NSLog(@"-(id) didLocation");
}

-(void) setResultCode:(id) {
	%orig;
	NSLog(@"-(void) setResultCode:(id)");
}

-(id) resultCode {
	%orig;
	NSLog(@"-(id) resultCode");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook SDLDeviceStatus

-(void) setVoiceRecOn:(id) {
	%orig;
	NSLog(@"-(void) setVoiceRecOn:(id)");
}

-(id) voiceRecOn {
	%orig;
	NSLog(@"-(id) voiceRecOn");
}

-(void) setBtIconOn:(id) {
	%orig;
	NSLog(@"-(void) setBtIconOn:(id)");
}

-(id) btIconOn {
	%orig;
	NSLog(@"-(id) btIconOn");
}

-(id) callActive {
	%orig;
	NSLog(@"-(id) callActive");
}

-(void) setPhoneRoaming:(id) {
	%orig;
	NSLog(@"-(void) setPhoneRoaming:(id)");
}

-(id) phoneRoaming {
	%orig;
	NSLog(@"-(id) phoneRoaming");
}

-(void) setTextMsgAvailable:(id) {
	%orig;
	NSLog(@"-(void) setTextMsgAvailable:(id)");
}

-(id) textMsgAvailable {
	%orig;
	NSLog(@"-(id) textMsgAvailable");
}

-(void) setBattLevelStatus:(id) {
	%orig;
	NSLog(@"-(void) setBattLevelStatus:(id)");
}

-(id) battLevelStatus {
	%orig;
	NSLog(@"-(id) battLevelStatus");
}

-(void) setStereoAudioOutputMuted:(id) {
	%orig;
	NSLog(@"-(void) setStereoAudioOutputMuted:(id)");
}

-(id) stereoAudioOutputMuted {
	%orig;
	NSLog(@"-(id) stereoAudioOutputMuted");
}

-(void) setMonoAudioOutputMuted:(id) {
	%orig;
	NSLog(@"-(void) setMonoAudioOutputMuted:(id)");
}

-(id) monoAudioOutputMuted {
	%orig;
	NSLog(@"-(id) monoAudioOutputMuted");
}

-(void) setSignalLevelStatus:(id) {
	%orig;
	NSLog(@"-(void) setSignalLevelStatus:(id)");
}

-(id) signalLevelStatus {
	%orig;
	NSLog(@"-(id) signalLevelStatus");
}

-(void) setPrimaryAudioSource:(id) {
	%orig;
	NSLog(@"-(void) setPrimaryAudioSource:(id)");
}

-(id) primaryAudioSource {
	%orig;
	NSLog(@"-(id) primaryAudioSource");
}

-(void) setECallEventActive:(id) {
	%orig;
	NSLog(@"-(void) setECallEventActive:(id)");
}

-(id) eCallEventActive {
	%orig;
	NSLog(@"-(id) eCallEventActive");
}

-(void) setCallActive:(id) {
	%orig;
	NSLog(@"-(void) setCallActive:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeviceInfo

-(id) hardware {
	%orig;
	NSLog(@"-(id) hardware");
}

-(void) setFirmwareRev:(id) {
	%orig;
	NSLog(@"-(void) setFirmwareRev:(id)");
}

-(id) firmwareRev {
	%orig;
	NSLog(@"-(id) firmwareRev");
}

-(void) setMaxNumberRFCOMMPorts:(id) {
	%orig;
	NSLog(@"-(void) setMaxNumberRFCOMMPorts:(id)");
}

-(id) maxNumberRFCOMMPorts {
	%orig;
	NSLog(@"-(id) maxNumberRFCOMMPorts");
}

-(void) setHardware:(id) {
	%orig;
	NSLog(@"-(void) setHardware:(id)");
}

-(id) osVersion {
	%orig;
	NSLog(@"-(id) osVersion");
}

-(void) setOsVersion:(id) {
	%orig;
	NSLog(@"-(void) setOsVersion:(id)");
}

-(void) setOs:(id) {
	%orig;
	NSLog(@"-(void) setOs:(id)");
}

-(id) os {
	%orig;
	NSLog(@"-(id) os");
}

-(void) setCarrier:(id) {
	%orig;
	NSLog(@"-(void) setCarrier:(id)");
}

-(id) carrier {
	%orig;
	NSLog(@"-(id) carrier");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLClusterModeStatus

-(void) setPowerModeActive:(id) {
	%orig;
	NSLog(@"-(void) setPowerModeActive:(id)");
}

-(id) powerModeActive {
	%orig;
	NSLog(@"-(id) powerModeActive");
}

-(void) setPowerModeQualificationStatus:(id) {
	%orig;
	NSLog(@"-(void) setPowerModeQualificationStatus:(id)");
}

-(id) powerModeQualificationStatus {
	%orig;
	NSLog(@"-(id) powerModeQualificationStatus");
}

-(void) setCarModeStatus:(id) {
	%orig;
	NSLog(@"-(void) setCarModeStatus:(id)");
}

-(id) carModeStatus {
	%orig;
	NSLog(@"-(id) carModeStatus");
}

-(void) setPowerModeStatus:(id) {
	%orig;
	NSLog(@"-(void) setPowerModeStatus:(id)");
}

-(id) powerModeStatus {
	%orig;
	NSLog(@"-(id) powerModeStatus");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLChoice

-(id) choiceID {
	%orig;
	NSLog(@"-(id) choiceID");
}

-(void) setChoiceID:(id) {
	%orig;
	NSLog(@"-(void) setChoiceID:(id)");
}

-(void) setMenuName:(id) {
	%orig;
	NSLog(@"-(void) setMenuName:(id)");
}

-(void) setVrCommands:(id) {
	%orig;
	NSLog(@"-(void) setVrCommands:(id)");
}

-(id) menuName {
	%orig;
	NSLog(@"-(id) menuName");
}

-(id) vrCommands {
	%orig;
	NSLog(@"-(id) vrCommands");
}

-(id) tertiaryText {
	%orig;
	NSLog(@"-(id) tertiaryText");
}

-(void) setSecondaryImage:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryImage:(id)");
}

-(id) secondaryImage {
	%orig;
	NSLog(@"-(id) secondaryImage");
}

-(void) setTertiaryText:(id) {
	%orig;
	NSLog(@"-(void) setTertiaryText:(id)");
}

-(id) secondaryText {
	%orig;
	NSLog(@"-(id) secondaryText");
}

-(void) setSecondaryText:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryText:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLButtonCapabilities

-(void) setShortPressAvailable:(id) {
	%orig;
	NSLog(@"-(void) setShortPressAvailable:(id)");
}

-(id) shortPressAvailable {
	%orig;
	NSLog(@"-(id) shortPressAvailable");
}

-(void) setLongPressAvailable:(id) {
	%orig;
	NSLog(@"-(void) setLongPressAvailable:(id)");
}

-(id) longPressAvailable {
	%orig;
	NSLog(@"-(id) longPressAvailable");
}

-(void) setUpDownAvailable:(id) {
	%orig;
	NSLog(@"-(void) setUpDownAvailable:(id)");
}

-(id) upDownAvailable {
	%orig;
	NSLog(@"-(id) upDownAvailable");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLBodyInformation

-(void) setParkBrakeActive:(id) {
	%orig;
	NSLog(@"-(void) setParkBrakeActive:(id)");
}

-(id) parkBrakeActive {
	%orig;
	NSLog(@"-(id) parkBrakeActive");
}

-(void) setIgnitionStableStatus:(id) {
	%orig;
	NSLog(@"-(void) setIgnitionStableStatus:(id)");
}

-(id) ignitionStableStatus {
	%orig;
	NSLog(@"-(id) ignitionStableStatus");
}

-(void) setIgnitionStatus:(id) {
	%orig;
	NSLog(@"-(void) setIgnitionStatus:(id)");
}

-(id) ignitionStatus {
	%orig;
	NSLog(@"-(id) ignitionStatus");
}

-(void) setDriverDoorAjar:(id) {
	%orig;
	NSLog(@"-(void) setDriverDoorAjar:(id)");
}

-(id) driverDoorAjar {
	%orig;
	NSLog(@"-(id) driverDoorAjar");
}

-(void) setPassengerDoorAjar:(id) {
	%orig;
	NSLog(@"-(void) setPassengerDoorAjar:(id)");
}

-(id) passengerDoorAjar {
	%orig;
	NSLog(@"-(id) passengerDoorAjar");
}

-(void) setRearLeftDoorAjar:(id) {
	%orig;
	NSLog(@"-(void) setRearLeftDoorAjar:(id)");
}

-(id) rearLeftDoorAjar {
	%orig;
	NSLog(@"-(id) rearLeftDoorAjar");
}

-(void) setRearRightDoorAjar:(id) {
	%orig;
	NSLog(@"-(void) setRearRightDoorAjar:(id)");
}

-(id) rearRightDoorAjar {
	%orig;
	NSLog(@"-(id) rearRightDoorAjar");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLBeltStatus

-(void) setDriverBeltDeployed:(id) {
	%orig;
	NSLog(@"-(void) setDriverBeltDeployed:(id)");
}

-(id) driverBeltDeployed {
	%orig;
	NSLog(@"-(id) driverBeltDeployed");
}

-(void) setPassengerBeltDeployed:(id) {
	%orig;
	NSLog(@"-(void) setPassengerBeltDeployed:(id)");
}

-(id) passengerBeltDeployed {
	%orig;
	NSLog(@"-(id) passengerBeltDeployed");
}

-(void) setPassengerBuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setPassengerBuckleBelted:(id)");
}

-(id) passengerBuckleBelted {
	%orig;
	NSLog(@"-(id) passengerBuckleBelted");
}

-(void) setDriverBuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setDriverBuckleBelted:(id)");
}

-(id) driverBuckleBelted {
	%orig;
	NSLog(@"-(id) driverBuckleBelted");
}

-(void) setLeftRow2BuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setLeftRow2BuckleBelted:(id)");
}

-(id) leftRow2BuckleBelted {
	%orig;
	NSLog(@"-(id) leftRow2BuckleBelted");
}

-(void) setPassengerChildDetected:(id) {
	%orig;
	NSLog(@"-(void) setPassengerChildDetected:(id)");
}

-(id) passengerChildDetected {
	%orig;
	NSLog(@"-(id) passengerChildDetected");
}

-(void) setRightRow2BuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setRightRow2BuckleBelted:(id)");
}

-(id) rightRow2BuckleBelted {
	%orig;
	NSLog(@"-(id) rightRow2BuckleBelted");
}

-(void) setMiddleRow2BuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setMiddleRow2BuckleBelted:(id)");
}

-(id) middleRow2BuckleBelted {
	%orig;
	NSLog(@"-(id) middleRow2BuckleBelted");
}

-(void) setMiddleRow3BuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setMiddleRow3BuckleBelted:(id)");
}

-(id) middleRow3BuckleBelted {
	%orig;
	NSLog(@"-(id) middleRow3BuckleBelted");
}

-(void) setLeftRow3BuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setLeftRow3BuckleBelted:(id)");
}

-(id) leftRow3BuckleBelted {
	%orig;
	NSLog(@"-(id) leftRow3BuckleBelted");
}

-(void) setRightRow3BuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setRightRow3BuckleBelted:(id)");
}

-(id) rightRow3BuckleBelted {
	%orig;
	NSLog(@"-(id) rightRow3BuckleBelted");
}

-(void) setLeftRearInflatableBelted:(id) {
	%orig;
	NSLog(@"-(void) setLeftRearInflatableBelted:(id)");
}

-(id) leftRearInflatableBelted {
	%orig;
	NSLog(@"-(id) leftRearInflatableBelted");
}

-(void) setRightRearInflatableBelted:(id) {
	%orig;
	NSLog(@"-(void) setRightRearInflatableBelted:(id)");
}

-(id) rightRearInflatableBelted {
	%orig;
	NSLog(@"-(id) rightRearInflatableBelted");
}

-(void) setMiddleRow1BeltDeployed:(id) {
	%orig;
	NSLog(@"-(void) setMiddleRow1BeltDeployed:(id)");
}

-(id) middleRow1BeltDeployed {
	%orig;
	NSLog(@"-(id) middleRow1BeltDeployed");
}

-(void) setMiddleRow1BuckleBelted:(id) {
	%orig;
	NSLog(@"-(void) setMiddleRow1BuckleBelted:(id)");
}

-(id) middleRow1BuckleBelted {
	%orig;
	NSLog(@"-(id) middleRow1BuckleBelted");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAudioPassThruCapabilities

-(void) setBitsPerSample:(id) {
	%orig;
	NSLog(@"-(void) setBitsPerSample:(id)");
}

-(id) bitsPerSample {
	%orig;
	NSLog(@"-(id) bitsPerSample");
}

-(id) samplingRate {
	%orig;
	NSLog(@"-(id) samplingRate");
}

-(void) setSamplingRate:(id) {
	%orig;
	NSLog(@"-(void) setSamplingRate:(id)");
}

-(id) audioType {
	%orig;
	NSLog(@"-(id) audioType");
}

-(void) setAudioType:(id) {
	%orig;
	NSLog(@"-(void) setAudioType:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAirbagStatus

-(void) setDriverAirbagDeployed:(id) {
	%orig;
	NSLog(@"-(void) setDriverAirbagDeployed:(id)");
}

-(id) driverAirbagDeployed {
	%orig;
	NSLog(@"-(id) driverAirbagDeployed");
}

-(void) setDriverSideAirbagDeployed:(id) {
	%orig;
	NSLog(@"-(void) setDriverSideAirbagDeployed:(id)");
}

-(id) driverSideAirbagDeployed {
	%orig;
	NSLog(@"-(id) driverSideAirbagDeployed");
}

-(void) setDriverCurtainAirbagDeployed:(id) {
	%orig;
	NSLog(@"-(void) setDriverCurtainAirbagDeployed:(id)");
}

-(id) driverCurtainAirbagDeployed {
	%orig;
	NSLog(@"-(id) driverCurtainAirbagDeployed");
}

-(void) setPassengerAirbagDeployed:(id) {
	%orig;
	NSLog(@"-(void) setPassengerAirbagDeployed:(id)");
}

-(id) passengerAirbagDeployed {
	%orig;
	NSLog(@"-(id) passengerAirbagDeployed");
}

-(void) setPassengerCurtainAirbagDeployed:(id) {
	%orig;
	NSLog(@"-(void) setPassengerCurtainAirbagDeployed:(id)");
}

-(id) passengerCurtainAirbagDeployed {
	%orig;
	NSLog(@"-(id) passengerCurtainAirbagDeployed");
}

-(void) setDriverKneeAirbagDeployed:(id) {
	%orig;
	NSLog(@"-(void) setDriverKneeAirbagDeployed:(id)");
}

-(id) driverKneeAirbagDeployed {
	%orig;
	NSLog(@"-(id) driverKneeAirbagDeployed");
}

-(void) setPassengerSideAirbagDeployed:(id) {
	%orig;
	NSLog(@"-(void) setPassengerSideAirbagDeployed:(id)");
}

-(id) passengerSideAirbagDeployed {
	%orig;
	NSLog(@"-(id) passengerSideAirbagDeployed");
}

-(void) setPassengerKneeAirbagDeployed:(id) {
	%orig;
	NSLog(@"-(void) setPassengerKneeAirbagDeployed:(id)");
}

-(id) passengerKneeAirbagDeployed {
	%orig;
	NSLog(@"-(id) passengerKneeAirbagDeployed");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLRPCMessage

-(void) setBulkData:(id) {
	%orig;
	NSLog(@"-(void) setBulkData:(id)");
}

-(id) getFunctionName {
	%orig;
	NSLog(@"-(id) getFunctionName");
}

-(id) bulkData {
	%orig;
	NSLog(@"-(id) bulkData");
}

-(id) getParameters:(id) {
	%orig;
	NSLog(@"-(id) getParameters:(id)");
}

-(void) setParameters:(id) value:(id) {
	%orig;
	NSLog(@"-(void) setParameters:(id) value:(id)");
}

-(id) messageType {
	%orig;
	NSLog(@"-(id) messageType");
}

-(void) setFunctionName:(id) {
	%orig;
	NSLog(@"-(void) setFunctionName:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) initWithName:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id)");
}

%end

%hook SDLRPCNotification

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) initWithName:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id)");
}

%end

%hook SDLOnVehicleData

-(void) setFuelLevel:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel:(id)");
}

-(id) fuelLevel {
	%orig;
	NSLog(@"-(id) fuelLevel");
}

-(void) setFuelLevel_State:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel_State:(id)");
}

-(id) fuelLevel_State {
	%orig;
	NSLog(@"-(id) fuelLevel_State");
}

-(void) setInstantFuelConsumption:(id) {
	%orig;
	NSLog(@"-(void) setInstantFuelConsumption:(id)");
}

-(id) instantFuelConsumption {
	%orig;
	NSLog(@"-(id) instantFuelConsumption");
}

-(void) setExternalTemperature:(id) {
	%orig;
	NSLog(@"-(void) setExternalTemperature:(id)");
}

-(id) externalTemperature {
	%orig;
	NSLog(@"-(id) externalTemperature");
}

-(void) setVin:(id) {
	%orig;
	NSLog(@"-(void) setVin:(id)");
}

-(id) vin {
	%orig;
	NSLog(@"-(id) vin");
}

-(void) setPrndl:(id) {
	%orig;
	NSLog(@"-(void) setPrndl:(id)");
}

-(id) prndl {
	%orig;
	NSLog(@"-(id) prndl");
}

-(void) setTirePressure:(id) {
	%orig;
	NSLog(@"-(void) setTirePressure:(id)");
}

-(id) tirePressure {
	%orig;
	NSLog(@"-(id) tirePressure");
}

-(void) setBeltStatus:(id) {
	%orig;
	NSLog(@"-(void) setBeltStatus:(id)");
}

-(id) beltStatus {
	%orig;
	NSLog(@"-(id) beltStatus");
}

-(void) setBodyInformation:(id) {
	%orig;
	NSLog(@"-(void) setBodyInformation:(id)");
}

-(id) bodyInformation {
	%orig;
	NSLog(@"-(id) bodyInformation");
}

-(void) setDeviceStatus:(id) {
	%orig;
	NSLog(@"-(void) setDeviceStatus:(id)");
}

-(void) setDriverBraking:(id) {
	%orig;
	NSLog(@"-(void) setDriverBraking:(id)");
}

-(id) driverBraking {
	%orig;
	NSLog(@"-(id) driverBraking");
}

-(void) setWiperStatus:(id) {
	%orig;
	NSLog(@"-(void) setWiperStatus:(id)");
}

-(id) wiperStatus {
	%orig;
	NSLog(@"-(id) wiperStatus");
}

-(void) setHeadLampStatus:(id) {
	%orig;
	NSLog(@"-(void) setHeadLampStatus:(id)");
}

-(id) headLampStatus {
	%orig;
	NSLog(@"-(id) headLampStatus");
}

-(void) setEngineTorque:(id) {
	%orig;
	NSLog(@"-(void) setEngineTorque:(id)");
}

-(id) engineTorque {
	%orig;
	NSLog(@"-(id) engineTorque");
}

-(void) setAccPedalPosition:(id) {
	%orig;
	NSLog(@"-(void) setAccPedalPosition:(id)");
}

-(id) accPedalPosition {
	%orig;
	NSLog(@"-(id) accPedalPosition");
}

-(void) setSteeringWheelAngle:(id) {
	%orig;
	NSLog(@"-(void) setSteeringWheelAngle:(id)");
}

-(id) steeringWheelAngle {
	%orig;
	NSLog(@"-(id) steeringWheelAngle");
}

-(void) setECallInfo:(id) {
	%orig;
	NSLog(@"-(void) setECallInfo:(id)");
}

-(id) eCallInfo {
	%orig;
	NSLog(@"-(id) eCallInfo");
}

-(void) setAirbagStatus:(id) {
	%orig;
	NSLog(@"-(void) setAirbagStatus:(id)");
}

-(id) airbagStatus {
	%orig;
	NSLog(@"-(id) airbagStatus");
}

-(void) setEmergencyEvent:(id) {
	%orig;
	NSLog(@"-(void) setEmergencyEvent:(id)");
}

-(id) emergencyEvent {
	%orig;
	NSLog(@"-(id) emergencyEvent");
}

-(void) setClusterModeStatus:(id) {
	%orig;
	NSLog(@"-(void) setClusterModeStatus:(id)");
}

-(id) clusterModeStatus {
	%orig;
	NSLog(@"-(id) clusterModeStatus");
}

-(void) setMyKey:(id) {
	%orig;
	NSLog(@"-(void) setMyKey:(id)");
}

-(id) myKey {
	%orig;
	NSLog(@"-(id) myKey");
}

-(id) odometer {
	%orig;
	NSLog(@"-(id) odometer");
}

-(void) setOdometer:(id) {
	%orig;
	NSLog(@"-(void) setOdometer:(id)");
}

-(id) deviceStatus {
	%orig;
	NSLog(@"-(id) deviceStatus");
}

-(void) setGps:(id) {
	%orig;
	NSLog(@"-(void) setGps:(id)");
}

-(void) setRpm:(id) {
	%orig;
	NSLog(@"-(void) setRpm:(id)");
}

-(id) rpm {
	%orig;
	NSLog(@"-(id) rpm");
}

-(id) gps {
	%orig;
	NSLog(@"-(id) gps");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setSpeed:(id) {
	%orig;
	NSLog(@"-(void) setSpeed:(id)");
}

-(id) speed {
	%orig;
	NSLog(@"-(id) speed");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnTouchEvent

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) event {
	%orig;
	NSLog(@"-(id) event");
}

-(void) setEvent:(id) {
	%orig;
	NSLog(@"-(void) setEvent:(id)");
}

%end

%hook SDLOnTBTClientState

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) state {
	%orig;
	NSLog(@"-(id) state");
}

-(void) setState:(id) {
	%orig;
	NSLog(@"-(void) setState:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnSystemRequest

-(void) setTimeout:(id) {
	%orig;
	NSLog(@"-(void) setTimeout:(id)");
}

-(id) timeout {
	%orig;
	NSLog(@"-(id) timeout");
}

-(id) requestType {
	%orig;
	NSLog(@"-(id) requestType");
}

-(void) setRequestType:(id) {
	%orig;
	NSLog(@"-(void) setRequestType:(id)");
}

-(id) length {
	%orig;
	NSLog(@"-(id) length");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) offset {
	%orig;
	NSLog(@"-(id) offset");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

-(id) fileType {
	%orig;
	NSLog(@"-(id) fileType");
}

-(void) setFileType:(id) {
	%orig;
	NSLog(@"-(void) setFileType:(id)");
}

-(void) setOffset:(id) {
	%orig;
	NSLog(@"-(void) setOffset:(id)");
}

-(void) setLength:(id) {
	%orig;
	NSLog(@"-(void) setLength:(id)");
}

%end

%hook SDLOnSyncPData

-(id) Timeout {
	%orig;
	NSLog(@"-(id) Timeout");
}

-(void) setTimeout:(id) {
	%orig;
	NSLog(@"-(void) setTimeout:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(void) setURL:(id) {
	%orig;
	NSLog(@"-(void) setURL:(id)");
}

%end

%hook SDLOnPermissionsChange

-(void) setPermissionItem:(id) {
	%orig;
	NSLog(@"-(void) setPermissionItem:(id)");
}

-(id) permissionItem {
	%orig;
	NSLog(@"-(id) permissionItem");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnLockScreenStatus

-(void) setHmiLevel:(id) {
	%orig;
	NSLog(@"-(void) setHmiLevel:(id)");
}

-(id) hmiLevel {
	%orig;
	NSLog(@"-(id) hmiLevel");
}

-(void) setLockScreenStatus:(id) {
	%orig;
	NSLog(@"-(void) setLockScreenStatus:(id)");
}

-(id) lockScreenStatus {
	%orig;
	NSLog(@"-(id) lockScreenStatus");
}

-(void) setUserSelected:(id) {
	%orig;
	NSLog(@"-(void) setUserSelected:(id)");
}

-(id) userSelected {
	%orig;
	NSLog(@"-(id) userSelected");
}

-(void) setDriverDistractionStatus:(id) {
	%orig;
	NSLog(@"-(void) setDriverDistractionStatus:(id)");
}

-(id) driverDistractionStatus {
	%orig;
	NSLog(@"-(id) driverDistractionStatus");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnLanguageChange

-(void) setHmiDisplayLanguage:(id) {
	%orig;
	NSLog(@"-(void) setHmiDisplayLanguage:(id)");
}

-(id) hmiDisplayLanguage {
	%orig;
	NSLog(@"-(id) hmiDisplayLanguage");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) language {
	%orig;
	NSLog(@"-(id) language");
}

-(void) setLanguage:(id) {
	%orig;
	NSLog(@"-(void) setLanguage:(id)");
}

%end

%hook SDLOnKeyboardInput

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) event {
	%orig;
	NSLog(@"-(id) event");
}

-(void) setEvent:(id) {
	%orig;
	NSLog(@"-(void) setEvent:(id)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook SDLOnHMIStatus

-(void) setHmiLevel:(id) {
	%orig;
	NSLog(@"-(void) setHmiLevel:(id)");
}

-(void) setAudioStreamingState:(id) {
	%orig;
	NSLog(@"-(void) setAudioStreamingState:(id)");
}

-(id) hmiLevel {
	%orig;
	NSLog(@"-(id) hmiLevel");
}

-(id) audioStreamingState {
	%orig;
	NSLog(@"-(id) audioStreamingState");
}

-(id) systemContext {
	%orig;
	NSLog(@"-(id) systemContext");
}

-(void) setSystemContext:(id) {
	%orig;
	NSLog(@"-(void) setSystemContext:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnHashChange

-(void) setHashID:(id) {
	%orig;
	NSLog(@"-(void) setHashID:(id)");
}

-(id) hashID {
	%orig;
	NSLog(@"-(id) hashID");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnEncodedSyncPData

-(id) Timeout {
	%orig;
	NSLog(@"-(id) Timeout");
}

-(void) setTimeout:(id) {
	%orig;
	NSLog(@"-(void) setTimeout:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(void) setURL:(id) {
	%orig;
	NSLog(@"-(void) setURL:(id)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook SDLOnDriverDistraction

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) state {
	%orig;
	NSLog(@"-(id) state");
}

-(void) setState:(id) {
	%orig;
	NSLog(@"-(void) setState:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnCommand

-(id) cmdID {
	%orig;
	NSLog(@"-(id) cmdID");
}

-(void) setCmdID:(id) {
	%orig;
	NSLog(@"-(void) setCmdID:(id)");
}

-(id) triggerSource {
	%orig;
	NSLog(@"-(id) triggerSource");
}

-(void) setTriggerSource:(id) {
	%orig;
	NSLog(@"-(void) setTriggerSource:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnButtonPress

-(id) customButtonID {
	%orig;
	NSLog(@"-(id) customButtonID");
}

-(id) buttonPressMode {
	%orig;
	NSLog(@"-(id) buttonPressMode");
}

-(void) setButtonPressMode:(id) {
	%orig;
	NSLog(@"-(void) setButtonPressMode:(id)");
}

-(void) setCustomButtonID:(id) {
	%orig;
	NSLog(@"-(void) setCustomButtonID:(id)");
}

-(void) setButtonName:(id) {
	%orig;
	NSLog(@"-(void) setButtonName:(id)");
}

-(id) buttonName {
	%orig;
	NSLog(@"-(id) buttonName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnButtonEvent

-(id) buttonEventMode {
	%orig;
	NSLog(@"-(id) buttonEventMode");
}

-(id) customButtonID {
	%orig;
	NSLog(@"-(id) customButtonID");
}

-(void) setButtonEventMode:(id) {
	%orig;
	NSLog(@"-(void) setButtonEventMode:(id)");
}

-(void) setCustomButtonID:(id) {
	%orig;
	NSLog(@"-(void) setCustomButtonID:(id)");
}

-(void) setButtonName:(id) {
	%orig;
	NSLog(@"-(void) setButtonName:(id)");
}

-(id) buttonName {
	%orig;
	NSLog(@"-(id) buttonName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnAudioPassThru

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLOnAppInterfaceUnregistered

-(void) setReason:(id) {
	%orig;
	NSLog(@"-(void) setReason:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) reason {
	%orig;
	NSLog(@"-(id) reason");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLRPCResponse

-(id) correlationID {
	%orig;
	NSLog(@"-(id) correlationID");
}

-(void) setCorrelationID:(id) {
	%orig;
	NSLog(@"-(void) setCorrelationID:(id)");
}

-(void) setResultCode:(id) {
	%orig;
	NSLog(@"-(void) setResultCode:(id)");
}

-(id) resultCode {
	%orig;
	NSLog(@"-(id) resultCode");
}

-(id) success {
	%orig;
	NSLog(@"-(id) success");
}

-(void) setSuccess:(id) {
	%orig;
	NSLog(@"-(void) setSuccess:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) info {
	%orig;
	NSLog(@"-(id) info");
}

-(id) initWithName:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id)");
}

-(void) setInfo:(id) {
	%orig;
	NSLog(@"-(void) setInfo:(id)");
}

%end

%hook SDLUpdateTurnListResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLUnsubscribeVehicleDataResponse

-(void) setFuelLevel:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel:(id)");
}

-(id) fuelLevel {
	%orig;
	NSLog(@"-(id) fuelLevel");
}

-(void) setFuelLevel_State:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel_State:(id)");
}

-(id) fuelLevel_State {
	%orig;
	NSLog(@"-(id) fuelLevel_State");
}

-(void) setInstantFuelConsumption:(id) {
	%orig;
	NSLog(@"-(void) setInstantFuelConsumption:(id)");
}

-(id) instantFuelConsumption {
	%orig;
	NSLog(@"-(id) instantFuelConsumption");
}

-(void) setExternalTemperature:(id) {
	%orig;
	NSLog(@"-(void) setExternalTemperature:(id)");
}

-(id) externalTemperature {
	%orig;
	NSLog(@"-(id) externalTemperature");
}

-(void) setPrndl:(id) {
	%orig;
	NSLog(@"-(void) setPrndl:(id)");
}

-(id) prndl {
	%orig;
	NSLog(@"-(id) prndl");
}

-(void) setTirePressure:(id) {
	%orig;
	NSLog(@"-(void) setTirePressure:(id)");
}

-(id) tirePressure {
	%orig;
	NSLog(@"-(id) tirePressure");
}

-(void) setBeltStatus:(id) {
	%orig;
	NSLog(@"-(void) setBeltStatus:(id)");
}

-(id) beltStatus {
	%orig;
	NSLog(@"-(id) beltStatus");
}

-(void) setBodyInformation:(id) {
	%orig;
	NSLog(@"-(void) setBodyInformation:(id)");
}

-(id) bodyInformation {
	%orig;
	NSLog(@"-(id) bodyInformation");
}

-(void) setDeviceStatus:(id) {
	%orig;
	NSLog(@"-(void) setDeviceStatus:(id)");
}

-(void) setDriverBraking:(id) {
	%orig;
	NSLog(@"-(void) setDriverBraking:(id)");
}

-(id) driverBraking {
	%orig;
	NSLog(@"-(id) driverBraking");
}

-(void) setWiperStatus:(id) {
	%orig;
	NSLog(@"-(void) setWiperStatus:(id)");
}

-(id) wiperStatus {
	%orig;
	NSLog(@"-(id) wiperStatus");
}

-(void) setHeadLampStatus:(id) {
	%orig;
	NSLog(@"-(void) setHeadLampStatus:(id)");
}

-(id) headLampStatus {
	%orig;
	NSLog(@"-(id) headLampStatus");
}

-(void) setEngineTorque:(id) {
	%orig;
	NSLog(@"-(void) setEngineTorque:(id)");
}

-(id) engineTorque {
	%orig;
	NSLog(@"-(id) engineTorque");
}

-(void) setAccPedalPosition:(id) {
	%orig;
	NSLog(@"-(void) setAccPedalPosition:(id)");
}

-(id) accPedalPosition {
	%orig;
	NSLog(@"-(id) accPedalPosition");
}

-(void) setSteeringWheelAngle:(id) {
	%orig;
	NSLog(@"-(void) setSteeringWheelAngle:(id)");
}

-(id) steeringWheelAngle {
	%orig;
	NSLog(@"-(id) steeringWheelAngle");
}

-(void) setECallInfo:(id) {
	%orig;
	NSLog(@"-(void) setECallInfo:(id)");
}

-(id) eCallInfo {
	%orig;
	NSLog(@"-(id) eCallInfo");
}

-(void) setAirbagStatus:(id) {
	%orig;
	NSLog(@"-(void) setAirbagStatus:(id)");
}

-(id) airbagStatus {
	%orig;
	NSLog(@"-(id) airbagStatus");
}

-(void) setEmergencyEvent:(id) {
	%orig;
	NSLog(@"-(void) setEmergencyEvent:(id)");
}

-(id) emergencyEvent {
	%orig;
	NSLog(@"-(id) emergencyEvent");
}

-(void) setMyKey:(id) {
	%orig;
	NSLog(@"-(void) setMyKey:(id)");
}

-(id) myKey {
	%orig;
	NSLog(@"-(id) myKey");
}

-(void) setClusterModes:(id) {
	%orig;
	NSLog(@"-(void) setClusterModes:(id)");
}

-(id) clusterModes {
	%orig;
	NSLog(@"-(id) clusterModes");
}

-(id) odometer {
	%orig;
	NSLog(@"-(id) odometer");
}

-(void) setOdometer:(id) {
	%orig;
	NSLog(@"-(void) setOdometer:(id)");
}

-(id) deviceStatus {
	%orig;
	NSLog(@"-(id) deviceStatus");
}

-(void) setGps:(id) {
	%orig;
	NSLog(@"-(void) setGps:(id)");
}

-(void) setRpm:(id) {
	%orig;
	NSLog(@"-(void) setRpm:(id)");
}

-(id) rpm {
	%orig;
	NSLog(@"-(id) rpm");
}

-(id) gps {
	%orig;
	NSLog(@"-(id) gps");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setSpeed:(id) {
	%orig;
	NSLog(@"-(void) setSpeed:(id)");
}

-(id) speed {
	%orig;
	NSLog(@"-(id) speed");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLUnsubscribeButtonResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLUnregisterAppInterfaceResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSystemRequestResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSyncPDataResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSubscribeVehicleDataResponse

-(void) setFuelLevel:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel:(id)");
}

-(id) fuelLevel {
	%orig;
	NSLog(@"-(id) fuelLevel");
}

-(void) setFuelLevel_State:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel_State:(id)");
}

-(id) fuelLevel_State {
	%orig;
	NSLog(@"-(id) fuelLevel_State");
}

-(void) setInstantFuelConsumption:(id) {
	%orig;
	NSLog(@"-(void) setInstantFuelConsumption:(id)");
}

-(id) instantFuelConsumption {
	%orig;
	NSLog(@"-(id) instantFuelConsumption");
}

-(void) setExternalTemperature:(id) {
	%orig;
	NSLog(@"-(void) setExternalTemperature:(id)");
}

-(id) externalTemperature {
	%orig;
	NSLog(@"-(id) externalTemperature");
}

-(void) setPrndl:(id) {
	%orig;
	NSLog(@"-(void) setPrndl:(id)");
}

-(id) prndl {
	%orig;
	NSLog(@"-(id) prndl");
}

-(void) setTirePressure:(id) {
	%orig;
	NSLog(@"-(void) setTirePressure:(id)");
}

-(id) tirePressure {
	%orig;
	NSLog(@"-(id) tirePressure");
}

-(void) setBeltStatus:(id) {
	%orig;
	NSLog(@"-(void) setBeltStatus:(id)");
}

-(id) beltStatus {
	%orig;
	NSLog(@"-(id) beltStatus");
}

-(void) setBodyInformation:(id) {
	%orig;
	NSLog(@"-(void) setBodyInformation:(id)");
}

-(id) bodyInformation {
	%orig;
	NSLog(@"-(id) bodyInformation");
}

-(void) setDeviceStatus:(id) {
	%orig;
	NSLog(@"-(void) setDeviceStatus:(id)");
}

-(void) setDriverBraking:(id) {
	%orig;
	NSLog(@"-(void) setDriverBraking:(id)");
}

-(id) driverBraking {
	%orig;
	NSLog(@"-(id) driverBraking");
}

-(void) setWiperStatus:(id) {
	%orig;
	NSLog(@"-(void) setWiperStatus:(id)");
}

-(id) wiperStatus {
	%orig;
	NSLog(@"-(id) wiperStatus");
}

-(void) setHeadLampStatus:(id) {
	%orig;
	NSLog(@"-(void) setHeadLampStatus:(id)");
}

-(id) headLampStatus {
	%orig;
	NSLog(@"-(id) headLampStatus");
}

-(void) setEngineTorque:(id) {
	%orig;
	NSLog(@"-(void) setEngineTorque:(id)");
}

-(id) engineTorque {
	%orig;
	NSLog(@"-(id) engineTorque");
}

-(void) setAccPedalPosition:(id) {
	%orig;
	NSLog(@"-(void) setAccPedalPosition:(id)");
}

-(id) accPedalPosition {
	%orig;
	NSLog(@"-(id) accPedalPosition");
}

-(void) setSteeringWheelAngle:(id) {
	%orig;
	NSLog(@"-(void) setSteeringWheelAngle:(id)");
}

-(id) steeringWheelAngle {
	%orig;
	NSLog(@"-(id) steeringWheelAngle");
}

-(void) setECallInfo:(id) {
	%orig;
	NSLog(@"-(void) setECallInfo:(id)");
}

-(id) eCallInfo {
	%orig;
	NSLog(@"-(id) eCallInfo");
}

-(void) setAirbagStatus:(id) {
	%orig;
	NSLog(@"-(void) setAirbagStatus:(id)");
}

-(id) airbagStatus {
	%orig;
	NSLog(@"-(id) airbagStatus");
}

-(void) setEmergencyEvent:(id) {
	%orig;
	NSLog(@"-(void) setEmergencyEvent:(id)");
}

-(id) emergencyEvent {
	%orig;
	NSLog(@"-(id) emergencyEvent");
}

-(void) setMyKey:(id) {
	%orig;
	NSLog(@"-(void) setMyKey:(id)");
}

-(id) myKey {
	%orig;
	NSLog(@"-(id) myKey");
}

-(void) setClusterModes:(id) {
	%orig;
	NSLog(@"-(void) setClusterModes:(id)");
}

-(id) clusterModes {
	%orig;
	NSLog(@"-(id) clusterModes");
}

-(id) odometer {
	%orig;
	NSLog(@"-(id) odometer");
}

-(void) setOdometer:(id) {
	%orig;
	NSLog(@"-(void) setOdometer:(id)");
}

-(id) deviceStatus {
	%orig;
	NSLog(@"-(id) deviceStatus");
}

-(void) setGps:(id) {
	%orig;
	NSLog(@"-(void) setGps:(id)");
}

-(void) setRpm:(id) {
	%orig;
	NSLog(@"-(void) setRpm:(id)");
}

-(id) rpm {
	%orig;
	NSLog(@"-(id) rpm");
}

-(id) gps {
	%orig;
	NSLog(@"-(id) gps");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setSpeed:(id) {
	%orig;
	NSLog(@"-(void) setSpeed:(id)");
}

-(id) speed {
	%orig;
	NSLog(@"-(id) speed");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSubscribeButtonResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSpeakResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSliderResponse

-(void) setSliderPosition:(id) {
	%orig;
	NSLog(@"-(void) setSliderPosition:(id)");
}

-(id) sliderPosition {
	%orig;
	NSLog(@"-(id) sliderPosition");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLShowResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLShowConstantTBTResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSetMediaClockTimerResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSetGlobalPropertiesResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSetDisplayLayoutResponse

-(id) displayCapabilities {
	%orig;
	NSLog(@"-(id) displayCapabilities");
}

-(void) setDisplayCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setDisplayCapabilities:(id)");
}

-(void) setButtonCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setButtonCapabilities:(id)");
}

-(id) buttonCapabilities {
	%orig;
	NSLog(@"-(id) buttonCapabilities");
}

-(void) setSoftButtonCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtonCapabilities:(id)");
}

-(id) softButtonCapabilities {
	%orig;
	NSLog(@"-(id) softButtonCapabilities");
}

-(void) setPresetBankCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setPresetBankCapabilities:(id)");
}

-(id) presetBankCapabilities {
	%orig;
	NSLog(@"-(id) presetBankCapabilities");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSetAppIconResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSendLocationResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLScrollableMessageResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLResetGlobalPropertiesResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLRegisterAppInterfaceResponse

-(id) syncMsgVersion {
	%orig;
	NSLog(@"-(id) syncMsgVersion");
}

-(void) setSyncMsgVersion:(id) {
	%orig;
	NSLog(@"-(void) setSyncMsgVersion:(id)");
}

-(id) displayCapabilities {
	%orig;
	NSLog(@"-(id) displayCapabilities");
}

-(void) setHmiDisplayLanguage:(id) {
	%orig;
	NSLog(@"-(void) setHmiDisplayLanguage:(id)");
}

-(id) hmiDisplayLanguage {
	%orig;
	NSLog(@"-(id) hmiDisplayLanguage");
}

-(void) setDisplayCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setDisplayCapabilities:(id)");
}

-(void) setButtonCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setButtonCapabilities:(id)");
}

-(id) buttonCapabilities {
	%orig;
	NSLog(@"-(id) buttonCapabilities");
}

-(void) setSoftButtonCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtonCapabilities:(id)");
}

-(id) softButtonCapabilities {
	%orig;
	NSLog(@"-(id) softButtonCapabilities");
}

-(void) setPresetBankCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setPresetBankCapabilities:(id)");
}

-(id) presetBankCapabilities {
	%orig;
	NSLog(@"-(id) presetBankCapabilities");
}

-(void) setHmiZoneCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setHmiZoneCapabilities:(id)");
}

-(id) hmiZoneCapabilities {
	%orig;
	NSLog(@"-(id) hmiZoneCapabilities");
}

-(void) setSpeechCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setSpeechCapabilities:(id)");
}

-(id) speechCapabilities {
	%orig;
	NSLog(@"-(id) speechCapabilities");
}

-(void) setPrerecordedSpeech:(id) {
	%orig;
	NSLog(@"-(void) setPrerecordedSpeech:(id)");
}

-(id) prerecordedSpeech {
	%orig;
	NSLog(@"-(id) prerecordedSpeech");
}

-(void) setVrCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setVrCapabilities:(id)");
}

-(id) vrCapabilities {
	%orig;
	NSLog(@"-(id) vrCapabilities");
}

-(void) setAudioPassThruCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setAudioPassThruCapabilities:(id)");
}

-(id) audioPassThruCapabilities {
	%orig;
	NSLog(@"-(id) audioPassThruCapabilities");
}

-(void) setSupportedDiagModes:(id) {
	%orig;
	NSLog(@"-(void) setSupportedDiagModes:(id)");
}

-(id) supportedDiagModes {
	%orig;
	NSLog(@"-(id) supportedDiagModes");
}

-(void) setHmiCapabilities:(id) {
	%orig;
	NSLog(@"-(void) setHmiCapabilities:(id)");
}

-(id) hmiCapabilities {
	%orig;
	NSLog(@"-(id) hmiCapabilities");
}

-(void) setSdlVersion:(id) {
	%orig;
	NSLog(@"-(void) setSdlVersion:(id)");
}

-(id) sdlVersion {
	%orig;
	NSLog(@"-(id) sdlVersion");
}

-(void) setSystemSoftwareVersion:(id) {
	%orig;
	NSLog(@"-(void) setSystemSoftwareVersion:(id)");
}

-(id) systemSoftwareVersion {
	%orig;
	NSLog(@"-(id) systemSoftwareVersion");
}

-(id) vehicleType {
	%orig;
	NSLog(@"-(id) vehicleType");
}

-(void) setVehicleType:(id) {
	%orig;
	NSLog(@"-(void) setVehicleType:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) language {
	%orig;
	NSLog(@"-(id) language");
}

-(void) setLanguage:(id) {
	%orig;
	NSLog(@"-(void) setLanguage:(id)");
}

%end

%hook SDLReadDIDResponse

-(void) setDidResult:(id) {
	%orig;
	NSLog(@"-(void) setDidResult:(id)");
}

-(id) didResult {
	%orig;
	NSLog(@"-(id) didResult");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLPutFileResponse

-(void) setSpaceAvailable:(id) {
	%orig;
	NSLog(@"-(void) setSpaceAvailable:(id)");
}

-(id) spaceAvailable {
	%orig;
	NSLog(@"-(id) spaceAvailable");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLPerformInteractionResponse

-(id) choiceID {
	%orig;
	NSLog(@"-(id) choiceID");
}

-(void) setChoiceID:(id) {
	%orig;
	NSLog(@"-(void) setChoiceID:(id)");
}

-(void) setManualTextEntry:(id) {
	%orig;
	NSLog(@"-(void) setManualTextEntry:(id)");
}

-(id) manualTextEntry {
	%orig;
	NSLog(@"-(id) manualTextEntry");
}

-(id) triggerSource {
	%orig;
	NSLog(@"-(id) triggerSource");
}

-(void) setTriggerSource:(id) {
	%orig;
	NSLog(@"-(void) setTriggerSource:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLPerformAudioPassThruResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLListFilesResponse

-(void) setSpaceAvailable:(id) {
	%orig;
	NSLog(@"-(void) setSpaceAvailable:(id)");
}

-(id) spaceAvailable {
	%orig;
	NSLog(@"-(id) spaceAvailable");
}

-(void) setFilenames:(id) {
	%orig;
	NSLog(@"-(void) setFilenames:(id)");
}

-(id) filenames {
	%orig;
	NSLog(@"-(id) filenames");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLGetVehicleDataResponse

-(void) setFuelLevel:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel:(id)");
}

-(id) fuelLevel {
	%orig;
	NSLog(@"-(id) fuelLevel");
}

-(void) setFuelLevel_State:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel_State:(id)");
}

-(id) fuelLevel_State {
	%orig;
	NSLog(@"-(id) fuelLevel_State");
}

-(void) setInstantFuelConsumption:(id) {
	%orig;
	NSLog(@"-(void) setInstantFuelConsumption:(id)");
}

-(id) instantFuelConsumption {
	%orig;
	NSLog(@"-(id) instantFuelConsumption");
}

-(void) setExternalTemperature:(id) {
	%orig;
	NSLog(@"-(void) setExternalTemperature:(id)");
}

-(id) externalTemperature {
	%orig;
	NSLog(@"-(id) externalTemperature");
}

-(void) setVin:(id) {
	%orig;
	NSLog(@"-(void) setVin:(id)");
}

-(id) vin {
	%orig;
	NSLog(@"-(id) vin");
}

-(void) setPrndl:(id) {
	%orig;
	NSLog(@"-(void) setPrndl:(id)");
}

-(id) prndl {
	%orig;
	NSLog(@"-(id) prndl");
}

-(void) setTirePressure:(id) {
	%orig;
	NSLog(@"-(void) setTirePressure:(id)");
}

-(id) tirePressure {
	%orig;
	NSLog(@"-(id) tirePressure");
}

-(void) setBeltStatus:(id) {
	%orig;
	NSLog(@"-(void) setBeltStatus:(id)");
}

-(id) beltStatus {
	%orig;
	NSLog(@"-(id) beltStatus");
}

-(void) setBodyInformation:(id) {
	%orig;
	NSLog(@"-(void) setBodyInformation:(id)");
}

-(id) bodyInformation {
	%orig;
	NSLog(@"-(id) bodyInformation");
}

-(void) setDeviceStatus:(id) {
	%orig;
	NSLog(@"-(void) setDeviceStatus:(id)");
}

-(void) setDriverBraking:(id) {
	%orig;
	NSLog(@"-(void) setDriverBraking:(id)");
}

-(id) driverBraking {
	%orig;
	NSLog(@"-(id) driverBraking");
}

-(void) setWiperStatus:(id) {
	%orig;
	NSLog(@"-(void) setWiperStatus:(id)");
}

-(id) wiperStatus {
	%orig;
	NSLog(@"-(id) wiperStatus");
}

-(void) setHeadLampStatus:(id) {
	%orig;
	NSLog(@"-(void) setHeadLampStatus:(id)");
}

-(id) headLampStatus {
	%orig;
	NSLog(@"-(id) headLampStatus");
}

-(void) setEngineTorque:(id) {
	%orig;
	NSLog(@"-(void) setEngineTorque:(id)");
}

-(id) engineTorque {
	%orig;
	NSLog(@"-(id) engineTorque");
}

-(void) setAccPedalPosition:(id) {
	%orig;
	NSLog(@"-(void) setAccPedalPosition:(id)");
}

-(id) accPedalPosition {
	%orig;
	NSLog(@"-(id) accPedalPosition");
}

-(void) setSteeringWheelAngle:(id) {
	%orig;
	NSLog(@"-(void) setSteeringWheelAngle:(id)");
}

-(id) steeringWheelAngle {
	%orig;
	NSLog(@"-(id) steeringWheelAngle");
}

-(void) setECallInfo:(id) {
	%orig;
	NSLog(@"-(void) setECallInfo:(id)");
}

-(id) eCallInfo {
	%orig;
	NSLog(@"-(id) eCallInfo");
}

-(void) setAirbagStatus:(id) {
	%orig;
	NSLog(@"-(void) setAirbagStatus:(id)");
}

-(id) airbagStatus {
	%orig;
	NSLog(@"-(id) airbagStatus");
}

-(void) setEmergencyEvent:(id) {
	%orig;
	NSLog(@"-(void) setEmergencyEvent:(id)");
}

-(id) emergencyEvent {
	%orig;
	NSLog(@"-(id) emergencyEvent");
}

-(void) setClusterModeStatus:(id) {
	%orig;
	NSLog(@"-(void) setClusterModeStatus:(id)");
}

-(id) clusterModeStatus {
	%orig;
	NSLog(@"-(id) clusterModeStatus");
}

-(void) setMyKey:(id) {
	%orig;
	NSLog(@"-(void) setMyKey:(id)");
}

-(id) myKey {
	%orig;
	NSLog(@"-(id) myKey");
}

-(id) odometer {
	%orig;
	NSLog(@"-(id) odometer");
}

-(void) setOdometer:(id) {
	%orig;
	NSLog(@"-(void) setOdometer:(id)");
}

-(id) deviceStatus {
	%orig;
	NSLog(@"-(id) deviceStatus");
}

-(void) setGps:(id) {
	%orig;
	NSLog(@"-(void) setGps:(id)");
}

-(void) setRpm:(id) {
	%orig;
	NSLog(@"-(void) setRpm:(id)");
}

-(id) rpm {
	%orig;
	NSLog(@"-(id) rpm");
}

-(id) gps {
	%orig;
	NSLog(@"-(id) gps");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setSpeed:(id) {
	%orig;
	NSLog(@"-(void) setSpeed:(id)");
}

-(id) speed {
	%orig;
	NSLog(@"-(id) speed");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLGetDTCsResponse

-(void) setEcuHeader:(id) {
	%orig;
	NSLog(@"-(void) setEcuHeader:(id)");
}

-(id) ecuHeader {
	%orig;
	NSLog(@"-(id) ecuHeader");
}

-(void) setDtc:(id) {
	%orig;
	NSLog(@"-(void) setDtc:(id)");
}

-(id) dtc {
	%orig;
	NSLog(@"-(id) dtc");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLGenericResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLEndAudioPassThruResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLEncodedSyncPDataResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDialNumberResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDiagnosticMessageResponse

-(void) setMessageDataResult:(id) {
	%orig;
	NSLog(@"-(void) setMessageDataResult:(id)");
}

-(id) messageDataResult {
	%orig;
	NSLog(@"-(id) messageDataResult");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeleteSubMenuResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeleteInteractionChoiceSetResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeleteFileResponse

-(void) setSpaceAvailable:(id) {
	%orig;
	NSLog(@"-(void) setSpaceAvailable:(id)");
}

-(id) spaceAvailable {
	%orig;
	NSLog(@"-(id) spaceAvailable");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeleteCommandResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLCreateInteractionChoiceSetResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLChangeRegistrationResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAlertResponse

-(void) setTryAgainTime:(id) {
	%orig;
	NSLog(@"-(void) setTryAgainTime:(id)");
}

-(id) tryAgainTime {
	%orig;
	NSLog(@"-(id) tryAgainTime");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAlertManeuverResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAddSubMenuResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAddCommandResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLRPCRequest

-(id) correlationID {
	%orig;
	NSLog(@"-(id) correlationID");
}

-(void) setCorrelationID:(id) {
	%orig;
	NSLog(@"-(void) setCorrelationID:(id)");
}

%end

%hook SDLUpdateTurnList

-(void) setSoftButtons:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtons:(id)");
}

-(id) softButtons {
	%orig;
	NSLog(@"-(id) softButtons");
}

-(void) setTurnList:(id) {
	%orig;
	NSLog(@"-(void) setTurnList:(id)");
}

-(id) turnList {
	%orig;
	NSLog(@"-(id) turnList");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLUnsubscribeVehicleData

-(void) setFuelLevel:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel:(id)");
}

-(id) fuelLevel {
	%orig;
	NSLog(@"-(id) fuelLevel");
}

-(void) setFuelLevel_State:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel_State:(id)");
}

-(id) fuelLevel_State {
	%orig;
	NSLog(@"-(id) fuelLevel_State");
}

-(void) setInstantFuelConsumption:(id) {
	%orig;
	NSLog(@"-(void) setInstantFuelConsumption:(id)");
}

-(id) instantFuelConsumption {
	%orig;
	NSLog(@"-(id) instantFuelConsumption");
}

-(void) setExternalTemperature:(id) {
	%orig;
	NSLog(@"-(void) setExternalTemperature:(id)");
}

-(id) externalTemperature {
	%orig;
	NSLog(@"-(id) externalTemperature");
}

-(void) setPrndl:(id) {
	%orig;
	NSLog(@"-(void) setPrndl:(id)");
}

-(id) prndl {
	%orig;
	NSLog(@"-(id) prndl");
}

-(void) setTirePressure:(id) {
	%orig;
	NSLog(@"-(void) setTirePressure:(id)");
}

-(id) tirePressure {
	%orig;
	NSLog(@"-(id) tirePressure");
}

-(void) setBeltStatus:(id) {
	%orig;
	NSLog(@"-(void) setBeltStatus:(id)");
}

-(id) beltStatus {
	%orig;
	NSLog(@"-(id) beltStatus");
}

-(void) setBodyInformation:(id) {
	%orig;
	NSLog(@"-(void) setBodyInformation:(id)");
}

-(id) bodyInformation {
	%orig;
	NSLog(@"-(id) bodyInformation");
}

-(void) setDeviceStatus:(id) {
	%orig;
	NSLog(@"-(void) setDeviceStatus:(id)");
}

-(void) setDriverBraking:(id) {
	%orig;
	NSLog(@"-(void) setDriverBraking:(id)");
}

-(id) driverBraking {
	%orig;
	NSLog(@"-(id) driverBraking");
}

-(void) setWiperStatus:(id) {
	%orig;
	NSLog(@"-(void) setWiperStatus:(id)");
}

-(id) wiperStatus {
	%orig;
	NSLog(@"-(id) wiperStatus");
}

-(void) setHeadLampStatus:(id) {
	%orig;
	NSLog(@"-(void) setHeadLampStatus:(id)");
}

-(id) headLampStatus {
	%orig;
	NSLog(@"-(id) headLampStatus");
}

-(void) setEngineTorque:(id) {
	%orig;
	NSLog(@"-(void) setEngineTorque:(id)");
}

-(id) engineTorque {
	%orig;
	NSLog(@"-(id) engineTorque");
}

-(void) setAccPedalPosition:(id) {
	%orig;
	NSLog(@"-(void) setAccPedalPosition:(id)");
}

-(id) accPedalPosition {
	%orig;
	NSLog(@"-(id) accPedalPosition");
}

-(void) setSteeringWheelAngle:(id) {
	%orig;
	NSLog(@"-(void) setSteeringWheelAngle:(id)");
}

-(id) steeringWheelAngle {
	%orig;
	NSLog(@"-(id) steeringWheelAngle");
}

-(void) setECallInfo:(id) {
	%orig;
	NSLog(@"-(void) setECallInfo:(id)");
}

-(id) eCallInfo {
	%orig;
	NSLog(@"-(id) eCallInfo");
}

-(void) setAirbagStatus:(id) {
	%orig;
	NSLog(@"-(void) setAirbagStatus:(id)");
}

-(id) airbagStatus {
	%orig;
	NSLog(@"-(id) airbagStatus");
}

-(void) setEmergencyEvent:(id) {
	%orig;
	NSLog(@"-(void) setEmergencyEvent:(id)");
}

-(id) emergencyEvent {
	%orig;
	NSLog(@"-(id) emergencyEvent");
}

-(void) setClusterModeStatus:(id) {
	%orig;
	NSLog(@"-(void) setClusterModeStatus:(id)");
}

-(id) clusterModeStatus {
	%orig;
	NSLog(@"-(id) clusterModeStatus");
}

-(void) setMyKey:(id) {
	%orig;
	NSLog(@"-(void) setMyKey:(id)");
}

-(id) myKey {
	%orig;
	NSLog(@"-(id) myKey");
}

-(id) odometer {
	%orig;
	NSLog(@"-(id) odometer");
}

-(void) setOdometer:(id) {
	%orig;
	NSLog(@"-(void) setOdometer:(id)");
}

-(id) deviceStatus {
	%orig;
	NSLog(@"-(id) deviceStatus");
}

-(void) setGps:(id) {
	%orig;
	NSLog(@"-(void) setGps:(id)");
}

-(void) setRpm:(id) {
	%orig;
	NSLog(@"-(void) setRpm:(id)");
}

-(id) rpm {
	%orig;
	NSLog(@"-(id) rpm");
}

-(id) gps {
	%orig;
	NSLog(@"-(id) gps");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setSpeed:(id) {
	%orig;
	NSLog(@"-(void) setSpeed:(id)");
}

-(id) speed {
	%orig;
	NSLog(@"-(id) speed");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLUnsubscribeButton

-(void) setButtonName:(id) {
	%orig;
	NSLog(@"-(void) setButtonName:(id)");
}

-(id) buttonName {
	%orig;
	NSLog(@"-(id) buttonName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLUnregisterAppInterface

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSystemRequest

-(id) requestType {
	%orig;
	NSLog(@"-(id) requestType");
}

-(void) setRequestType:(id) {
	%orig;
	NSLog(@"-(void) setRequestType:(id)");
}

-(id) fileName {
	%orig;
	NSLog(@"-(id) fileName");
}

-(void) setFileName:(id) {
	%orig;
	NSLog(@"-(void) setFileName:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSyncPData

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSubscribeVehicleData

-(void) setFuelLevel:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel:(id)");
}

-(id) fuelLevel {
	%orig;
	NSLog(@"-(id) fuelLevel");
}

-(void) setFuelLevel_State:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel_State:(id)");
}

-(id) fuelLevel_State {
	%orig;
	NSLog(@"-(id) fuelLevel_State");
}

-(void) setInstantFuelConsumption:(id) {
	%orig;
	NSLog(@"-(void) setInstantFuelConsumption:(id)");
}

-(id) instantFuelConsumption {
	%orig;
	NSLog(@"-(id) instantFuelConsumption");
}

-(void) setExternalTemperature:(id) {
	%orig;
	NSLog(@"-(void) setExternalTemperature:(id)");
}

-(id) externalTemperature {
	%orig;
	NSLog(@"-(id) externalTemperature");
}

-(void) setPrndl:(id) {
	%orig;
	NSLog(@"-(void) setPrndl:(id)");
}

-(id) prndl {
	%orig;
	NSLog(@"-(id) prndl");
}

-(void) setTirePressure:(id) {
	%orig;
	NSLog(@"-(void) setTirePressure:(id)");
}

-(id) tirePressure {
	%orig;
	NSLog(@"-(id) tirePressure");
}

-(void) setBeltStatus:(id) {
	%orig;
	NSLog(@"-(void) setBeltStatus:(id)");
}

-(id) beltStatus {
	%orig;
	NSLog(@"-(id) beltStatus");
}

-(void) setBodyInformation:(id) {
	%orig;
	NSLog(@"-(void) setBodyInformation:(id)");
}

-(id) bodyInformation {
	%orig;
	NSLog(@"-(id) bodyInformation");
}

-(void) setDeviceStatus:(id) {
	%orig;
	NSLog(@"-(void) setDeviceStatus:(id)");
}

-(void) setDriverBraking:(id) {
	%orig;
	NSLog(@"-(void) setDriverBraking:(id)");
}

-(id) driverBraking {
	%orig;
	NSLog(@"-(id) driverBraking");
}

-(void) setWiperStatus:(id) {
	%orig;
	NSLog(@"-(void) setWiperStatus:(id)");
}

-(id) wiperStatus {
	%orig;
	NSLog(@"-(id) wiperStatus");
}

-(void) setHeadLampStatus:(id) {
	%orig;
	NSLog(@"-(void) setHeadLampStatus:(id)");
}

-(id) headLampStatus {
	%orig;
	NSLog(@"-(id) headLampStatus");
}

-(void) setEngineTorque:(id) {
	%orig;
	NSLog(@"-(void) setEngineTorque:(id)");
}

-(id) engineTorque {
	%orig;
	NSLog(@"-(id) engineTorque");
}

-(void) setAccPedalPosition:(id) {
	%orig;
	NSLog(@"-(void) setAccPedalPosition:(id)");
}

-(id) accPedalPosition {
	%orig;
	NSLog(@"-(id) accPedalPosition");
}

-(void) setSteeringWheelAngle:(id) {
	%orig;
	NSLog(@"-(void) setSteeringWheelAngle:(id)");
}

-(id) steeringWheelAngle {
	%orig;
	NSLog(@"-(id) steeringWheelAngle");
}

-(void) setECallInfo:(id) {
	%orig;
	NSLog(@"-(void) setECallInfo:(id)");
}

-(id) eCallInfo {
	%orig;
	NSLog(@"-(id) eCallInfo");
}

-(void) setAirbagStatus:(id) {
	%orig;
	NSLog(@"-(void) setAirbagStatus:(id)");
}

-(id) airbagStatus {
	%orig;
	NSLog(@"-(id) airbagStatus");
}

-(void) setEmergencyEvent:(id) {
	%orig;
	NSLog(@"-(void) setEmergencyEvent:(id)");
}

-(id) emergencyEvent {
	%orig;
	NSLog(@"-(id) emergencyEvent");
}

-(void) setClusterModeStatus:(id) {
	%orig;
	NSLog(@"-(void) setClusterModeStatus:(id)");
}

-(id) clusterModeStatus {
	%orig;
	NSLog(@"-(id) clusterModeStatus");
}

-(void) setMyKey:(id) {
	%orig;
	NSLog(@"-(void) setMyKey:(id)");
}

-(id) myKey {
	%orig;
	NSLog(@"-(id) myKey");
}

-(id) odometer {
	%orig;
	NSLog(@"-(id) odometer");
}

-(void) setOdometer:(id) {
	%orig;
	NSLog(@"-(void) setOdometer:(id)");
}

-(id) deviceStatus {
	%orig;
	NSLog(@"-(id) deviceStatus");
}

-(void) setGps:(id) {
	%orig;
	NSLog(@"-(void) setGps:(id)");
}

-(void) setRpm:(id) {
	%orig;
	NSLog(@"-(void) setRpm:(id)");
}

-(id) rpm {
	%orig;
	NSLog(@"-(id) rpm");
}

-(id) gps {
	%orig;
	NSLog(@"-(id) gps");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setSpeed:(id) {
	%orig;
	NSLog(@"-(void) setSpeed:(id)");
}

-(id) speed {
	%orig;
	NSLog(@"-(id) speed");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSubscribeButton

-(void) setButtonName:(id) {
	%orig;
	NSLog(@"-(void) setButtonName:(id)");
}

-(id) buttonName {
	%orig;
	NSLog(@"-(id) buttonName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSpeak

-(id) ttsChunks {
	%orig;
	NSLog(@"-(id) ttsChunks");
}

-(void) setTtsChunks:(id) {
	%orig;
	NSLog(@"-(void) setTtsChunks:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSlider

-(void) setNumTicks:(id) {
	%orig;
	NSLog(@"-(void) setNumTicks:(id)");
}

-(id) numTicks {
	%orig;
	NSLog(@"-(id) numTicks");
}

-(void) setSliderHeader:(id) {
	%orig;
	NSLog(@"-(void) setSliderHeader:(id)");
}

-(id) sliderHeader {
	%orig;
	NSLog(@"-(id) sliderHeader");
}

-(void) setSliderFooter:(id) {
	%orig;
	NSLog(@"-(void) setSliderFooter:(id)");
}

-(id) sliderFooter {
	%orig;
	NSLog(@"-(id) sliderFooter");
}

-(void) setTimeout:(id) {
	%orig;
	NSLog(@"-(void) setTimeout:(id)");
}

-(id) timeout {
	%orig;
	NSLog(@"-(id) timeout");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setPosition:(id) {
	%orig;
	NSLog(@"-(void) setPosition:(id)");
}

-(id) position {
	%orig;
	NSLog(@"-(id) position");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLShowConstantTBT

-(void) setSoftButtons:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtons:(id)");
}

-(id) softButtons {
	%orig;
	NSLog(@"-(id) softButtons");
}

-(id) turnIcon {
	%orig;
	NSLog(@"-(id) turnIcon");
}

-(void) setNavigationText1:(id) {
	%orig;
	NSLog(@"-(void) setNavigationText1:(id)");
}

-(void) setNavigationText2:(id) {
	%orig;
	NSLog(@"-(void) setNavigationText2:(id)");
}

-(void) setTimeToDestination:(id) {
	%orig;
	NSLog(@"-(void) setTimeToDestination:(id)");
}

-(void) setTurnIcon:(id) {
	%orig;
	NSLog(@"-(void) setTurnIcon:(id)");
}

-(void) setNextTurnIcon:(id) {
	%orig;
	NSLog(@"-(void) setNextTurnIcon:(id)");
}

-(void) setDistanceToManeuverScale:(id) {
	%orig;
	NSLog(@"-(void) setDistanceToManeuverScale:(id)");
}

-(void) setManeuverComplete:(id) {
	%orig;
	NSLog(@"-(void) setManeuverComplete:(id)");
}

-(id) timeToDestination {
	%orig;
	NSLog(@"-(id) timeToDestination");
}

-(id) nextTurnIcon {
	%orig;
	NSLog(@"-(id) nextTurnIcon");
}

-(id) distanceToManeuverScale {
	%orig;
	NSLog(@"-(id) distanceToManeuverScale");
}

-(id) maneuverComplete {
	%orig;
	NSLog(@"-(id) maneuverComplete");
}

-(id) navigationText1 {
	%orig;
	NSLog(@"-(id) navigationText1");
}

-(id) navigationText2 {
	%orig;
	NSLog(@"-(id) navigationText2");
}

-(void) setDistanceToManeuver:(id) {
	%orig;
	NSLog(@"-(void) setDistanceToManeuver:(id)");
}

-(id) distanceToManeuver {
	%orig;
	NSLog(@"-(id) distanceToManeuver");
}

-(void) setEta:(id) {
	%orig;
	NSLog(@"-(void) setEta:(id)");
}

-(id) eta {
	%orig;
	NSLog(@"-(id) eta");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) totalDistance {
	%orig;
	NSLog(@"-(id) totalDistance");
}

-(void) setTotalDistance:(id) {
	%orig;
	NSLog(@"-(void) setTotalDistance:(id)");
}

%end

%hook SDLShow

-(void) setGraphic:(id) {
	%orig;
	NSLog(@"-(void) setGraphic:(id)");
}

-(void) setSoftButtons:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtons:(id)");
}

-(id) softButtons {
	%orig;
	NSLog(@"-(id) softButtons");
}

-(id) graphic {
	%orig;
	NSLog(@"-(id) graphic");
}

-(void) setMainField1:(id) {
	%orig;
	NSLog(@"-(void) setMainField1:(id)");
}

-(id) mainField1 {
	%orig;
	NSLog(@"-(id) mainField1");
}

-(void) setMainField2:(id) {
	%orig;
	NSLog(@"-(void) setMainField2:(id)");
}

-(id) mainField2 {
	%orig;
	NSLog(@"-(id) mainField2");
}

-(void) setMainField3:(id) {
	%orig;
	NSLog(@"-(void) setMainField3:(id)");
}

-(id) mainField3 {
	%orig;
	NSLog(@"-(id) mainField3");
}

-(void) setMainField4:(id) {
	%orig;
	NSLog(@"-(void) setMainField4:(id)");
}

-(id) mainField4 {
	%orig;
	NSLog(@"-(id) mainField4");
}

-(void) setMediaClock:(id) {
	%orig;
	NSLog(@"-(void) setMediaClock:(id)");
}

-(id) mediaClock {
	%orig;
	NSLog(@"-(id) mediaClock");
}

-(void) setMediaTrack:(id) {
	%orig;
	NSLog(@"-(void) setMediaTrack:(id)");
}

-(id) mediaTrack {
	%orig;
	NSLog(@"-(id) mediaTrack");
}

-(void) setSecondaryGraphic:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryGraphic:(id)");
}

-(id) secondaryGraphic {
	%orig;
	NSLog(@"-(id) secondaryGraphic");
}

-(void) setCustomPresets:(id) {
	%orig;
	NSLog(@"-(void) setCustomPresets:(id)");
}

-(id) customPresets {
	%orig;
	NSLog(@"-(id) customPresets");
}

-(id) alignment {
	%orig;
	NSLog(@"-(id) alignment");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setAlignment:(id) {
	%orig;
	NSLog(@"-(void) setAlignment:(id)");
}

-(id) statusBar {
	%orig;
	NSLog(@"-(id) statusBar");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(void) setStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setStatusBar:(id)");
}

%end

%hook SDLSetMediaClockTimer

-(void) setUpdateMode:(id) {
	%orig;
	NSLog(@"-(void) setUpdateMode:(id)");
}

-(id) endTime {
	%orig;
	NSLog(@"-(id) endTime");
}

-(void) setEndTime:(id) {
	%orig;
	NSLog(@"-(void) setEndTime:(id)");
}

-(id) updateMode {
	%orig;
	NSLog(@"-(id) updateMode");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) startTime {
	%orig;
	NSLog(@"-(id) startTime");
}

-(void) setStartTime:(id) {
	%orig;
	NSLog(@"-(void) setStartTime:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSetGlobalProperties

-(void) setVrHelp:(id) {
	%orig;
	NSLog(@"-(void) setVrHelp:(id)");
}

-(void) setVrHelpTitle:(id) {
	%orig;
	NSLog(@"-(void) setVrHelpTitle:(id)");
}

-(void) setHelpPrompt:(id) {
	%orig;
	NSLog(@"-(void) setHelpPrompt:(id)");
}

-(void) setTimeoutPrompt:(id) {
	%orig;
	NSLog(@"-(void) setTimeoutPrompt:(id)");
}

-(id) menuIcon {
	%orig;
	NSLog(@"-(id) menuIcon");
}

-(id) helpPrompt {
	%orig;
	NSLog(@"-(id) helpPrompt");
}

-(id) timeoutPrompt {
	%orig;
	NSLog(@"-(id) timeoutPrompt");
}

-(id) vrHelp {
	%orig;
	NSLog(@"-(id) vrHelp");
}

-(id) vrHelpTitle {
	%orig;
	NSLog(@"-(id) vrHelpTitle");
}

-(void) setMenuTitle:(id) {
	%orig;
	NSLog(@"-(void) setMenuTitle:(id)");
}

-(void) setMenuIcon:(id) {
	%orig;
	NSLog(@"-(void) setMenuIcon:(id)");
}

-(void) setKeyboardProperties:(id) {
	%orig;
	NSLog(@"-(void) setKeyboardProperties:(id)");
}

-(id) keyboardProperties {
	%orig;
	NSLog(@"-(id) keyboardProperties");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) menuTitle {
	%orig;
	NSLog(@"-(id) menuTitle");
}

%end

%hook SDLSetDisplayLayout

-(void) setDisplayLayout:(id) {
	%orig;
	NSLog(@"-(void) setDisplayLayout:(id)");
}

-(id) displayLayout {
	%orig;
	NSLog(@"-(id) displayLayout");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSetAppIcon

-(void) setSyncFileName:(id) {
	%orig;
	NSLog(@"-(void) setSyncFileName:(id)");
}

-(id) syncFileName {
	%orig;
	NSLog(@"-(id) syncFileName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLSendLocation

-(void) setLongitudeDegrees:(id) {
	%orig;
	NSLog(@"-(void) setLongitudeDegrees:(id)");
}

-(id) longitudeDegrees {
	%orig;
	NSLog(@"-(id) longitudeDegrees");
}

-(void) setLatitudeDegrees:(id) {
	%orig;
	NSLog(@"-(void) setLatitudeDegrees:(id)");
}

-(id) latitudeDegrees {
	%orig;
	NSLog(@"-(id) latitudeDegrees");
}

-(id) locationImage {
	%orig;
	NSLog(@"-(id) locationImage");
}

-(void) setLocationImage:(id) {
	%orig;
	NSLog(@"-(void) setLocationImage:(id)");
}

-(void) setPhoneNumber:(id) {
	%orig;
	NSLog(@"-(void) setPhoneNumber:(id)");
}

-(id) locationName {
	%orig;
	NSLog(@"-(id) locationName");
}

-(id) locationDescription {
	%orig;
	NSLog(@"-(id) locationDescription");
}

-(void) setLocationDescription:(id) {
	%orig;
	NSLog(@"-(void) setLocationDescription:(id)");
}

-(void) setAddressLines:(id) {
	%orig;
	NSLog(@"-(void) setAddressLines:(id)");
}

-(id) addressLines {
	%orig;
	NSLog(@"-(id) addressLines");
}

-(void) setLocationName:(id) {
	%orig;
	NSLog(@"-(void) setLocationName:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) phoneNumber {
	%orig;
	NSLog(@"-(id) phoneNumber");
}

%end

%hook SDLScrollableMessage

-(void) setSoftButtons:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtons:(id)");
}

-(id) softButtons {
	%orig;
	NSLog(@"-(id) softButtons");
}

-(void) setScrollableMessageBody:(id) {
	%orig;
	NSLog(@"-(void) setScrollableMessageBody:(id)");
}

-(id) scrollableMessageBody {
	%orig;
	NSLog(@"-(id) scrollableMessageBody");
}

-(void) setTimeout:(id) {
	%orig;
	NSLog(@"-(void) setTimeout:(id)");
}

-(id) timeout {
	%orig;
	NSLog(@"-(id) timeout");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLResetGlobalProperties

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(void) setProperties:(id) {
	%orig;
	NSLog(@"-(void) setProperties:(id)");
}

-(id) properties {
	%orig;
	NSLog(@"-(id) properties");
}

%end

%hook SDLRegisterAppInterface

-(id) syncMsgVersion {
	%orig;
	NSLog(@"-(id) syncMsgVersion");
}

-(void) setIsMediaApplication:(id) {
	%orig;
	NSLog(@"-(void) setIsMediaApplication:(id)");
}

-(void) setSyncMsgVersion:(id) {
	%orig;
	NSLog(@"-(void) setSyncMsgVersion:(id)");
}

-(void) setHashID:(id) {
	%orig;
	NSLog(@"-(void) setHashID:(id)");
}

-(id) hashID {
	%orig;
	NSLog(@"-(id) hashID");
}

-(void) setTtsName:(id) {
	%orig;
	NSLog(@"-(void) setTtsName:(id)");
}

-(id) ttsName {
	%orig;
	NSLog(@"-(id) ttsName");
}

-(void) setNgnMediaScreenAppName:(id) {
	%orig;
	NSLog(@"-(void) setNgnMediaScreenAppName:(id)");
}

-(id) ngnMediaScreenAppName {
	%orig;
	NSLog(@"-(id) ngnMediaScreenAppName");
}

-(void) setVrSynonyms:(id) {
	%orig;
	NSLog(@"-(void) setVrSynonyms:(id)");
}

-(id) vrSynonyms {
	%orig;
	NSLog(@"-(id) vrSynonyms");
}

-(void) setLanguageDesired:(id) {
	%orig;
	NSLog(@"-(void) setLanguageDesired:(id)");
}

-(id) languageDesired {
	%orig;
	NSLog(@"-(id) languageDesired");
}

-(void) setHmiDisplayLanguageDesired:(id) {
	%orig;
	NSLog(@"-(void) setHmiDisplayLanguageDesired:(id)");
}

-(id) hmiDisplayLanguageDesired {
	%orig;
	NSLog(@"-(id) hmiDisplayLanguageDesired");
}

-(void) setAppHMIType:(id) {
	%orig;
	NSLog(@"-(void) setAppHMIType:(id)");
}

-(id) appHMIType {
	%orig;
	NSLog(@"-(id) appHMIType");
}

-(id) isMediaApplication {
	%orig;
	NSLog(@"-(id) isMediaApplication");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(id) appID {
	%orig;
	NSLog(@"-(id) appID");
}

-(void) setDeviceInfo:(id) {
	%orig;
	NSLog(@"-(void) setDeviceInfo:(id)");
}

-(id) deviceInfo {
	%orig;
	NSLog(@"-(id) deviceInfo");
}

-(void) setAppID:(id) {
	%orig;
	NSLog(@"-(void) setAppID:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook SDLReadDID

-(void) setEcuName:(id) {
	%orig;
	NSLog(@"-(void) setEcuName:(id)");
}

-(id) ecuName {
	%orig;
	NSLog(@"-(id) ecuName");
}

-(void) setDidLocation:(id) {
	%orig;
	NSLog(@"-(void) setDidLocation:(id)");
}

-(id) didLocation {
	%orig;
	NSLog(@"-(id) didLocation");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLPutFile

-(void) setPersistentFile:(id) {
	%orig;
	NSLog(@"-(void) setPersistentFile:(id)");
}

-(void) setSyncFileName:(id) {
	%orig;
	NSLog(@"-(void) setSyncFileName:(id)");
}

-(id) syncFileName {
	%orig;
	NSLog(@"-(id) syncFileName");
}

-(id) persistentFile {
	%orig;
	NSLog(@"-(id) persistentFile");
}

-(void) setSystemFile:(id) {
	%orig;
	NSLog(@"-(void) setSystemFile:(id)");
}

-(id) systemFile {
	%orig;
	NSLog(@"-(id) systemFile");
}

-(id) length {
	%orig;
	NSLog(@"-(id) length");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) offset {
	%orig;
	NSLog(@"-(id) offset");
}

-(id) fileType {
	%orig;
	NSLog(@"-(id) fileType");
}

-(void) setFileType:(id) {
	%orig;
	NSLog(@"-(void) setFileType:(id)");
}

-(void) setOffset:(id) {
	%orig;
	NSLog(@"-(void) setOffset:(id)");
}

-(void) setLength:(id) {
	%orig;
	NSLog(@"-(void) setLength:(id)");
}

%end

%hook SDLPerformInteraction

-(void) setVrHelp:(id) {
	%orig;
	NSLog(@"-(void) setVrHelp:(id)");
}

-(void) setHelpPrompt:(id) {
	%orig;
	NSLog(@"-(void) setHelpPrompt:(id)");
}

-(void) setTimeoutPrompt:(id) {
	%orig;
	NSLog(@"-(void) setTimeoutPrompt:(id)");
}

-(void) setInteractionLayout:(id) {
	%orig;
	NSLog(@"-(void) setInteractionLayout:(id)");
}

-(void) setInitialPrompt:(id) {
	%orig;
	NSLog(@"-(void) setInitialPrompt:(id)");
}

-(id) initialPrompt {
	%orig;
	NSLog(@"-(id) initialPrompt");
}

-(void) setInteractionChoiceSetIDList:(id) {
	%orig;
	NSLog(@"-(void) setInteractionChoiceSetIDList:(id)");
}

-(id) interactionChoiceSetIDList {
	%orig;
	NSLog(@"-(id) interactionChoiceSetIDList");
}

-(id) helpPrompt {
	%orig;
	NSLog(@"-(id) helpPrompt");
}

-(id) timeoutPrompt {
	%orig;
	NSLog(@"-(id) timeoutPrompt");
}

-(id) vrHelp {
	%orig;
	NSLog(@"-(id) vrHelp");
}

-(id) interactionLayout {
	%orig;
	NSLog(@"-(id) interactionLayout");
}

-(void) setTimeout:(id) {
	%orig;
	NSLog(@"-(void) setTimeout:(id)");
}

-(id) timeout {
	%orig;
	NSLog(@"-(id) timeout");
}

-(id) interactionMode {
	%orig;
	NSLog(@"-(id) interactionMode");
}

-(void) setInteractionMode:(id) {
	%orig;
	NSLog(@"-(void) setInteractionMode:(id)");
}

-(void) setInitialText:(id) {
	%orig;
	NSLog(@"-(void) setInitialText:(id)");
}

-(id) initialText {
	%orig;
	NSLog(@"-(id) initialText");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLPerformAudioPassThru

-(void) setAudioPassThruDisplayText1:(id) {
	%orig;
	NSLog(@"-(void) setAudioPassThruDisplayText1:(id)");
}

-(id) audioPassThruDisplayText1 {
	%orig;
	NSLog(@"-(id) audioPassThruDisplayText1");
}

-(void) setAudioPassThruDisplayText2:(id) {
	%orig;
	NSLog(@"-(void) setAudioPassThruDisplayText2:(id)");
}

-(id) audioPassThruDisplayText2 {
	%orig;
	NSLog(@"-(id) audioPassThruDisplayText2");
}

-(void) setMuteAudio:(id) {
	%orig;
	NSLog(@"-(void) setMuteAudio:(id)");
}

-(id) muteAudio {
	%orig;
	NSLog(@"-(id) muteAudio");
}

-(void) setInitialPrompt:(id) {
	%orig;
	NSLog(@"-(void) setInitialPrompt:(id)");
}

-(id) initialPrompt {
	%orig;
	NSLog(@"-(id) initialPrompt");
}

-(void) setBitsPerSample:(id) {
	%orig;
	NSLog(@"-(void) setBitsPerSample:(id)");
}

-(id) bitsPerSample {
	%orig;
	NSLog(@"-(id) bitsPerSample");
}

-(id) samplingRate {
	%orig;
	NSLog(@"-(id) samplingRate");
}

-(void) setSamplingRate:(id) {
	%orig;
	NSLog(@"-(void) setSamplingRate:(id)");
}

-(id) maxDuration {
	%orig;
	NSLog(@"-(id) maxDuration");
}

-(void) setMaxDuration:(id) {
	%orig;
	NSLog(@"-(void) setMaxDuration:(id)");
}

-(id) audioType {
	%orig;
	NSLog(@"-(id) audioType");
}

-(void) setAudioType:(id) {
	%orig;
	NSLog(@"-(void) setAudioType:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLListFiles

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLGetVehicleData

-(void) setFuelLevel:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel:(id)");
}

-(id) fuelLevel {
	%orig;
	NSLog(@"-(id) fuelLevel");
}

-(void) setFuelLevel_State:(id) {
	%orig;
	NSLog(@"-(void) setFuelLevel_State:(id)");
}

-(id) fuelLevel_State {
	%orig;
	NSLog(@"-(id) fuelLevel_State");
}

-(void) setInstantFuelConsumption:(id) {
	%orig;
	NSLog(@"-(void) setInstantFuelConsumption:(id)");
}

-(id) instantFuelConsumption {
	%orig;
	NSLog(@"-(id) instantFuelConsumption");
}

-(void) setExternalTemperature:(id) {
	%orig;
	NSLog(@"-(void) setExternalTemperature:(id)");
}

-(id) externalTemperature {
	%orig;
	NSLog(@"-(id) externalTemperature");
}

-(void) setVin:(id) {
	%orig;
	NSLog(@"-(void) setVin:(id)");
}

-(id) vin {
	%orig;
	NSLog(@"-(id) vin");
}

-(void) setPrndl:(id) {
	%orig;
	NSLog(@"-(void) setPrndl:(id)");
}

-(id) prndl {
	%orig;
	NSLog(@"-(id) prndl");
}

-(void) setTirePressure:(id) {
	%orig;
	NSLog(@"-(void) setTirePressure:(id)");
}

-(id) tirePressure {
	%orig;
	NSLog(@"-(id) tirePressure");
}

-(void) setBeltStatus:(id) {
	%orig;
	NSLog(@"-(void) setBeltStatus:(id)");
}

-(id) beltStatus {
	%orig;
	NSLog(@"-(id) beltStatus");
}

-(void) setBodyInformation:(id) {
	%orig;
	NSLog(@"-(void) setBodyInformation:(id)");
}

-(id) bodyInformation {
	%orig;
	NSLog(@"-(id) bodyInformation");
}

-(void) setDeviceStatus:(id) {
	%orig;
	NSLog(@"-(void) setDeviceStatus:(id)");
}

-(void) setDriverBraking:(id) {
	%orig;
	NSLog(@"-(void) setDriverBraking:(id)");
}

-(id) driverBraking {
	%orig;
	NSLog(@"-(id) driverBraking");
}

-(void) setWiperStatus:(id) {
	%orig;
	NSLog(@"-(void) setWiperStatus:(id)");
}

-(id) wiperStatus {
	%orig;
	NSLog(@"-(id) wiperStatus");
}

-(void) setHeadLampStatus:(id) {
	%orig;
	NSLog(@"-(void) setHeadLampStatus:(id)");
}

-(id) headLampStatus {
	%orig;
	NSLog(@"-(id) headLampStatus");
}

-(void) setEngineTorque:(id) {
	%orig;
	NSLog(@"-(void) setEngineTorque:(id)");
}

-(id) engineTorque {
	%orig;
	NSLog(@"-(id) engineTorque");
}

-(void) setAccPedalPosition:(id) {
	%orig;
	NSLog(@"-(void) setAccPedalPosition:(id)");
}

-(id) accPedalPosition {
	%orig;
	NSLog(@"-(id) accPedalPosition");
}

-(void) setSteeringWheelAngle:(id) {
	%orig;
	NSLog(@"-(void) setSteeringWheelAngle:(id)");
}

-(id) steeringWheelAngle {
	%orig;
	NSLog(@"-(id) steeringWheelAngle");
}

-(void) setECallInfo:(id) {
	%orig;
	NSLog(@"-(void) setECallInfo:(id)");
}

-(id) eCallInfo {
	%orig;
	NSLog(@"-(id) eCallInfo");
}

-(void) setAirbagStatus:(id) {
	%orig;
	NSLog(@"-(void) setAirbagStatus:(id)");
}

-(id) airbagStatus {
	%orig;
	NSLog(@"-(id) airbagStatus");
}

-(void) setEmergencyEvent:(id) {
	%orig;
	NSLog(@"-(void) setEmergencyEvent:(id)");
}

-(id) emergencyEvent {
	%orig;
	NSLog(@"-(id) emergencyEvent");
}

-(void) setClusterModeStatus:(id) {
	%orig;
	NSLog(@"-(void) setClusterModeStatus:(id)");
}

-(id) clusterModeStatus {
	%orig;
	NSLog(@"-(id) clusterModeStatus");
}

-(void) setMyKey:(id) {
	%orig;
	NSLog(@"-(void) setMyKey:(id)");
}

-(id) myKey {
	%orig;
	NSLog(@"-(id) myKey");
}

-(id) odometer {
	%orig;
	NSLog(@"-(id) odometer");
}

-(void) setOdometer:(id) {
	%orig;
	NSLog(@"-(void) setOdometer:(id)");
}

-(id) deviceStatus {
	%orig;
	NSLog(@"-(id) deviceStatus");
}

-(void) setGps:(id) {
	%orig;
	NSLog(@"-(void) setGps:(id)");
}

-(void) setRpm:(id) {
	%orig;
	NSLog(@"-(void) setRpm:(id)");
}

-(id) rpm {
	%orig;
	NSLog(@"-(id) rpm");
}

-(id) gps {
	%orig;
	NSLog(@"-(id) gps");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setSpeed:(id) {
	%orig;
	NSLog(@"-(void) setSpeed:(id)");
}

-(id) speed {
	%orig;
	NSLog(@"-(id) speed");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLGetDTCs

-(void) setDtcMask:(id) {
	%orig;
	NSLog(@"-(void) setDtcMask:(id)");
}

-(id) dtcMask {
	%orig;
	NSLog(@"-(id) dtcMask");
}

-(void) setEcuName:(id) {
	%orig;
	NSLog(@"-(void) setEcuName:(id)");
}

-(id) ecuName {
	%orig;
	NSLog(@"-(id) ecuName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLEndAudioPassThru

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLEncodedSyncPData

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook SDLDialNumber

-(id) number {
	%orig;
	NSLog(@"-(id) number");
}

-(void) setNumber:(id) {
	%orig;
	NSLog(@"-(void) setNumber:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDiagnosticMessage

-(void) setMessageLength:(id) {
	%orig;
	NSLog(@"-(void) setMessageLength:(id)");
}

-(id) messageLength {
	%orig;
	NSLog(@"-(id) messageLength");
}

-(void) setTargetID:(id) {
	%orig;
	NSLog(@"-(void) setTargetID:(id)");
}

-(id) targetID {
	%orig;
	NSLog(@"-(id) targetID");
}

-(void) setMessageData:(id) {
	%orig;
	NSLog(@"-(void) setMessageData:(id)");
}

-(id) messageData {
	%orig;
	NSLog(@"-(id) messageData");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeleteSubMenu

-(void) setMenuID:(id) {
	%orig;
	NSLog(@"-(void) setMenuID:(id)");
}

-(id) menuID {
	%orig;
	NSLog(@"-(id) menuID");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeleteInteractionChoiceSet

-(void) setInteractionChoiceSetID:(id) {
	%orig;
	NSLog(@"-(void) setInteractionChoiceSetID:(id)");
}

-(id) interactionChoiceSetID {
	%orig;
	NSLog(@"-(id) interactionChoiceSetID");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeleteFile

-(void) setSyncFileName:(id) {
	%orig;
	NSLog(@"-(void) setSyncFileName:(id)");
}

-(id) syncFileName {
	%orig;
	NSLog(@"-(id) syncFileName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLDeleteCommand

-(id) cmdID {
	%orig;
	NSLog(@"-(id) cmdID");
}

-(void) setCmdID:(id) {
	%orig;
	NSLog(@"-(void) setCmdID:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLCreateInteractionChoiceSet

-(void) setInteractionChoiceSetID:(id) {
	%orig;
	NSLog(@"-(void) setInteractionChoiceSetID:(id)");
}

-(id) interactionChoiceSetID {
	%orig;
	NSLog(@"-(id) interactionChoiceSetID");
}

-(void) setChoiceSet:(id) {
	%orig;
	NSLog(@"-(void) setChoiceSet:(id)");
}

-(id) choiceSet {
	%orig;
	NSLog(@"-(id) choiceSet");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLChangeRegistration

-(void) setHmiDisplayLanguage:(id) {
	%orig;
	NSLog(@"-(void) setHmiDisplayLanguage:(id)");
}

-(id) hmiDisplayLanguage {
	%orig;
	NSLog(@"-(id) hmiDisplayLanguage");
}

-(void) setTtsName:(id) {
	%orig;
	NSLog(@"-(void) setTtsName:(id)");
}

-(id) ttsName {
	%orig;
	NSLog(@"-(id) ttsName");
}

-(void) setNgnMediaScreenAppName:(id) {
	%orig;
	NSLog(@"-(void) setNgnMediaScreenAppName:(id)");
}

-(id) ngnMediaScreenAppName {
	%orig;
	NSLog(@"-(id) ngnMediaScreenAppName");
}

-(void) setVrSynonyms:(id) {
	%orig;
	NSLog(@"-(void) setVrSynonyms:(id)");
}

-(id) vrSynonyms {
	%orig;
	NSLog(@"-(id) vrSynonyms");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) language {
	%orig;
	NSLog(@"-(id) language");
}

-(void) setLanguage:(id) {
	%orig;
	NSLog(@"-(void) setLanguage:(id)");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook SDLAlertManeuver

-(id) ttsChunks {
	%orig;
	NSLog(@"-(id) ttsChunks");
}

-(void) setSoftButtons:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtons:(id)");
}

-(void) setTtsChunks:(id) {
	%orig;
	NSLog(@"-(void) setTtsChunks:(id)");
}

-(id) softButtons {
	%orig;
	NSLog(@"-(id) softButtons");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAlert

-(id) ttsChunks {
	%orig;
	NSLog(@"-(id) ttsChunks");
}

-(void) setSoftButtons:(id) {
	%orig;
	NSLog(@"-(void) setSoftButtons:(id)");
}

-(void) setPlayTone:(id) {
	%orig;
	NSLog(@"-(void) setPlayTone:(id)");
}

-(void) setAlertText1:(id) {
	%orig;
	NSLog(@"-(void) setAlertText1:(id)");
}

-(id) alertText1 {
	%orig;
	NSLog(@"-(id) alertText1");
}

-(void) setAlertText2:(id) {
	%orig;
	NSLog(@"-(void) setAlertText2:(id)");
}

-(id) alertText2 {
	%orig;
	NSLog(@"-(id) alertText2");
}

-(void) setAlertText3:(id) {
	%orig;
	NSLog(@"-(void) setAlertText3:(id)");
}

-(id) alertText3 {
	%orig;
	NSLog(@"-(id) alertText3");
}

-(void) setTtsChunks:(id) {
	%orig;
	NSLog(@"-(void) setTtsChunks:(id)");
}

-(id) softButtons {
	%orig;
	NSLog(@"-(id) softButtons");
}

-(id) progressIndicator {
	%orig;
	NSLog(@"-(id) progressIndicator");
}

-(void) setProgressIndicator:(id) {
	%orig;
	NSLog(@"-(void) setProgressIndicator:(id)");
}

-(id) playTone {
	%orig;
	NSLog(@"-(id) playTone");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setDuration:(id) {
	%orig;
	NSLog(@"-(void) setDuration:(id)");
}

-(id) duration {
	%orig;
	NSLog(@"-(id) duration");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAddSubMenu

-(void) setMenuName:(id) {
	%orig;
	NSLog(@"-(void) setMenuName:(id)");
}

-(id) menuName {
	%orig;
	NSLog(@"-(id) menuName");
}

-(void) setMenuID:(id) {
	%orig;
	NSLog(@"-(void) setMenuID:(id)");
}

-(id) menuID {
	%orig;
	NSLog(@"-(id) menuID");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setPosition:(id) {
	%orig;
	NSLog(@"-(void) setPosition:(id)");
}

-(id) position {
	%orig;
	NSLog(@"-(id) position");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAddCommand

-(id) cmdID {
	%orig;
	NSLog(@"-(id) cmdID");
}

-(void) setVrCommands:(id) {
	%orig;
	NSLog(@"-(void) setVrCommands:(id)");
}

-(void) setMenuParams:(id) {
	%orig;
	NSLog(@"-(void) setMenuParams:(id)");
}

-(id) menuParams {
	%orig;
	NSLog(@"-(id) menuParams");
}

-(void) setCmdIcon:(id) {
	%orig;
	NSLog(@"-(void) setCmdIcon:(id)");
}

-(id) vrCommands {
	%orig;
	NSLog(@"-(id) vrCommands");
}

-(id) cmdIcon {
	%orig;
	NSLog(@"-(id) cmdIcon");
}

-(void) setCmdID:(id) {
	%orig;
	NSLog(@"-(void) setCmdID:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook SDLAbstractTransport

-(id) debugConsoleGroupName {
	%orig;
	NSLog(@"-(id) debugConsoleGroupName");
}

-(void) setDebugConsoleGroupName:(id) {
	%orig;
	NSLog(@"-(void) setDebugConsoleGroupName:(id)");
}

-(double) retryDelay {
	%orig;
	NSLog(@"-(double) retryDelay");
}

-(void) sendData:(id) {
	%orig;
	NSLog(@"-(void) sendData:(id)");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) connect {
	%orig;
	NSLog(@"-(void) connect");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

%end

%hook SDLTCPTransport

-(void) destructObjects {
	%orig;
	NSLog(@"-(void) destructObjects");
}

-(id) hostName {
	%orig;
	NSLog(@"-(id) hostName");
}

-(id) portNumber {
	%orig;
	NSLog(@"-(id) portNumber");
}

-(void) setPortNumber:(id) {
	%orig;
	NSLog(@"-(void) setPortNumber:(id)");
}

-(void) sendData:(id) {
	%orig;
	NSLog(@"-(void) sendData:(id)");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(void) setHostName:(id) {
	%orig;
	NSLog(@"-(void) setHostName:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) connect {
	%orig;
	NSLog(@"-(void) connect");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

%end

%hook SDLIAPTransport

-(void) onSessionInitializationCompleteForSession:(id) {
	%orig;
	NSLog(@"-(void) onSessionInitializationCompleteForSession:(id)");
}

-(void) onSessionStreamsEnded:(id) {
	%orig;
	NSLog(@"-(void) onSessionStreamsEnded:(id)");
}

-(void) sdl_startEventListening {
	%orig;
	NSLog(@"-(void) sdl_startEventListening");
}

-(void) sdl_accessoryConnected:(id) {
	%orig;
	NSLog(@"-(void) sdl_accessoryConnected:(id)");
}

-(void) sdl_accessoryDisconnected:(id) {
	%orig;
	NSLog(@"-(void) sdl_accessoryDisconnected:(id)");
}

-(void) sdl_applicationWillEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) sdl_applicationWillEnterForeground:(id)");
}

-(void) setSessionSetupInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setSessionSetupInProgress:(bool)");
}

-(bool) sessionSetupInProgress {
	%orig;
	NSLog(@"-(bool) sessionSetupInProgress");
}

-(void) sdl_establishSession {
	%orig;
	NSLog(@"-(void) sdl_establishSession");
}

-(void) sdl_createIAPControlSessionWithAccessory:(id) {
	%orig;
	NSLog(@"-(void) sdl_createIAPControlSessionWithAccessory:(id)");
}

-(void) sdl_createIAPDataSessionWithAccessory:(id) forProtocol:(id) {
	%orig;
	NSLog(@"-(void) sdl_createIAPDataSessionWithAccessory:(id) forProtocol:(id)");
}

-(void) setControlSession:(id) {
	%orig;
	NSLog(@"-(void) setControlSession:(id)");
}

-(id) controlSession {
	%orig;
	NSLog(@"-(id) controlSession");
}

-(id) protocolIndexTimer {
	%orig;
	NSLog(@"-(id) protocolIndexTimer");
}

-(void) setProtocolIndexTimer:(id) {
	%orig;
	NSLog(@"-(void) setProtocolIndexTimer:(id)");
}

-(void) sdl_retryEstablishSession {
	%orig;
	NSLog(@"-(void) sdl_retryEstablishSession");
}

-(id) sdl_controlStreamHasBytesHandlerForAccessory:(SEL) {
	%orig;
	NSLog(@"-(id) sdl_controlStreamHasBytesHandlerForAccessory:(SEL)");
}

-(id) sdl_controlStreamEndedHandler {
	%orig;
	NSLog(@"-(id) sdl_controlStreamEndedHandler");
}

-(id) sdl_controlStreamErroredHandler {
	%orig;
	NSLog(@"-(id) sdl_controlStreamErroredHandler");
}

-(id) sdl_dataStreamHasBytesHandler {
	%orig;
	NSLog(@"-(id) sdl_dataStreamHasBytesHandler");
}

-(id) sdl_dataStreamEndedHandler {
	%orig;
	NSLog(@"-(id) sdl_dataStreamEndedHandler");
}

-(id) sdl_dataStreamErroredHandler {
	%orig;
	NSLog(@"-(id) sdl_dataStreamErroredHandler");
}

-(void) sdl_stopEventListening {
	%orig;
	NSLog(@"-(void) sdl_stopEventListening");
}

-(void) sdl_destructObjects {
	%orig;
	NSLog(@"-(void) sdl_destructObjects");
}

-(double) retryDelay {
	%orig;
	NSLog(@"-(double) retryDelay");
}

-(void) sendData:(id) {
	%orig;
	NSLog(@"-(void) sendData:(id)");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(void) setRetryCounter:(int) {
	%orig;
	NSLog(@"-(void) setRetryCounter:(int)");
}

-(int) retryCounter {
	%orig;
	NSLog(@"-(int) retryCounter");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(void) connect {
	%orig;
	NSLog(@"-(void) connect");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook SDLAbstractProtocol

-(void) sendRPCRequest:(id) {
	%orig;
	NSLog(@"-(void) sendRPCRequest:(id)");
}

-(void) sendRPC:(id) {
	%orig;
	NSLog(@"-(void) sendRPC:(id)");
}

-(id) protocolDelegateTable {
	%orig;
	NSLog(@"-(id) protocolDelegateTable");
}

-(void) handleBytesFromTransport:(id) {
	%orig;
	NSLog(@"-(void) handleBytesFromTransport:(id)");
}

-(void) onTransportConnected {
	%orig;
	NSLog(@"-(void) onTransportConnected");
}

-(void) onTransportDisconnected {
	%orig;
	NSLog(@"-(void) onTransportDisconnected");
}

-(void) onDataReceived:(id) {
	%orig;
	NSLog(@"-(void) onDataReceived:(id)");
}

-(void) sendStartSessionWithType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sendStartSessionWithType:(unsigned char)");
}

-(void) sendEndSessionWithType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sendEndSessionWithType:(unsigned char)");
}

-(void) sendHeartbeat {
	%orig;
	NSLog(@"-(void) sendHeartbeat");
}

-(void) sendRawDataStream:(id) withServiceType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sendRawDataStream:(id) withServiceType:(unsigned char)");
}

-(void) sendRawData:(id) withServiceType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sendRawData:(id) withServiceType:(unsigned char)");
}

-(id) debugConsoleGroupName {
	%orig;
	NSLog(@"-(id) debugConsoleGroupName");
}

-(void) setDebugConsoleGroupName:(id) {
	%orig;
	NSLog(@"-(void) setDebugConsoleGroupName:(id)");
}

-(void) setProtocolDelegateTable:(id) {
	%orig;
	NSLog(@"-(void) setProtocolDelegateTable:(id)");
}

-(void) setTransport:(id) {
	%orig;
	NSLog(@"-(void) setTransport:(id)");
}

-(id) transport {
	%orig;
	NSLog(@"-(id) transport");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook SDLProtocol

-(void) sendRPCRequest:(id) {
	%orig;
	NSLog(@"-(void) sendRPCRequest:(id)");
}

-(void) sendRPC:(id) {
	%orig;
	NSLog(@"-(void) sendRPC:(id)");
}

-(void) onProtocolOpened {
	%orig;
	NSLog(@"-(void) onProtocolOpened");
}

-(void) onProtocolClosed {
	%orig;
	NSLog(@"-(void) onProtocolClosed");
}

-(void) handleBytesFromTransport:(id) {
	%orig;
	NSLog(@"-(void) handleBytesFromTransport:(id)");
}

-(void) sendStartSessionWithType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sendStartSessionWithType:(unsigned char)");
}

-(void) sendEndSessionWithType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sendEndSessionWithType:(unsigned char)");
}

-(void) sendHeartbeat {
	%orig;
	NSLog(@"-(void) sendHeartbeat");
}

-(void) sendRawData:(id) withServiceType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sendRawData:(id) withServiceType:(unsigned char)");
}

-(unsigned char) sdl_retrieveSessionIDforServiceType:(unsigned char) {
	%orig;
	NSLog(@"-(unsigned char) sdl_retrieveSessionIDforServiceType:(unsigned char)");
}

-(void) sendDataToTransport:(id) withPriority:(long long) {
	%orig;
	NSLog(@"-(void) sendDataToTransport:(id) withPriority:(long long)");
}

-(void) logRPCSend:(id) {
	%orig;
	NSLog(@"-(void) logRPCSend:(id)");
}

-(id) receiveBuffer {
	%orig;
	NSLog(@"-(id) receiveBuffer");
}

-(void) setReceiveBuffer:(id) {
	%orig;
	NSLog(@"-(void) setReceiveBuffer:(id)");
}

-(void) processMessages {
	%orig;
	NSLog(@"-(void) processMessages");
}

-(id) messageRouter {
	%orig;
	NSLog(@"-(id) messageRouter");
}

-(void) sdl_storeSessionID:(unsigned char) forServiceType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sdl_storeSessionID:(unsigned char) forServiceType:(unsigned char)");
}

-(void) handleProtocolStartSessionACK:(unsigned char) sessionID:(unsigned char) version:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolStartSessionACK:(unsigned char) sessionID:(unsigned char) version:(unsigned char)");
}

-(void) handleProtocolStartSessionNACK:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolStartSessionNACK:(unsigned char)");
}

-(void) sdl_removeSessionIdForServiceType:(unsigned char) {
	%orig;
	NSLog(@"-(void) sdl_removeSessionIdForServiceType:(unsigned char)");
}

-(void) handleProtocolEndSessionACK:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolEndSessionACK:(unsigned char)");
}

-(void) handleProtocolEndSessionNACK:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleProtocolEndSessionNACK:(unsigned char)");
}

-(void) handleHeartbeatForSession:(unsigned char) {
	%orig;
	NSLog(@"-(void) handleHeartbeatForSession:(unsigned char)");
}

-(void) handleHeartbeatACK {
	%orig;
	NSLog(@"-(void) handleHeartbeatACK");
}

-(void) onProtocolMessageReceived:(id) {
	%orig;
	NSLog(@"-(void) onProtocolMessageReceived:(id)");
}

-(void) onError:(id) exception:(id) {
	%orig;
	NSLog(@"-(void) onError:(id) exception:(id)");
}

-(void) setMessageRouter:(id) {
	%orig;
	NSLog(@"-(void) setMessageRouter:(id)");
}

-(void) destructObjects {
	%orig;
	NSLog(@"-(void) destructObjects");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned char) sessionID {
	%orig;
	NSLog(@"-(unsigned char) sessionID");
}

-(void) setSessionID:(unsigned char) {
	%orig;
	NSLog(@"-(void) setSessionID:(unsigned char)");
}

%end

%hook FBKVOController

+(id) controllerWithObserver:(id) {
	%orig;
	NSLog(@"+(id) controllerWithObserver:(id)");
}

-(void) observe:(id) keyPath:(id) options:(unsigned long long) block:(id) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPath:(id) options:(unsigned long long) block:(id)");
}

-(void) unobserveAll {
	%orig;
	NSLog(@"-(void) unobserveAll");
}

-(void) observe:(id) keyPath:(id) options:(unsigned long long) action:(SEL) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPath:(id) options:(unsigned long long) action:(SEL)");
}

-(id) initWithObserver:(id) retainObserved:(bool) {
	%orig;
	NSLog(@"-(id) initWithObserver:(id) retainObserved:(bool)");
}

-(void) _observe:(id) info:(id) {
	%orig;
	NSLog(@"-(void) _observe:(id) info:(id)");
}

-(void) observe:(id) keyPath:(id) options:(unsigned long long) context:(void*) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPath:(id) options:(unsigned long long) context:(void*)");
}

-(void) _unobserve:(id) info:(id) {
	%orig;
	NSLog(@"-(void) _unobserve:(id) info:(id)");
}

-(void) _unobserve:(id) {
	%orig;
	NSLog(@"-(void) _unobserve:(id)");
}

-(void) _unobserveAll {
	%orig;
	NSLog(@"-(void) _unobserveAll");
}

-(void) observe:(id) keyPaths:(id) options:(unsigned long long) block:(id) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPaths:(id) options:(unsigned long long) block:(id)");
}

-(void) observe:(id) keyPaths:(id) options:(unsigned long long) action:(SEL) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPaths:(id) options:(unsigned long long) action:(SEL)");
}

-(void) observe:(id) keyPaths:(id) options:(unsigned long long) context:(void*) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPaths:(id) options:(unsigned long long) context:(void*)");
}

-(void) unobserve:(id) keyPath:(id) {
	%orig;
	NSLog(@"-(void) unobserve:(id) keyPath:(id)");
}

-(void) unobserve:(id) {
	%orig;
	NSLog(@"-(void) unobserve:(id)");
}

-(id) initWithObserver:(id) {
	%orig;
	NSLog(@"-(id) initWithObserver:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(id) observer {
	%orig;
	NSLog(@"-(id) observer");
}

%end

%hook _FBKVOSharedController

+(id) sharedController {
	%orig;
	NSLog(@"+(id) sharedController");
}

-(void) observe:(id) info:(id) {
	%orig;
	NSLog(@"-(void) observe:(id) info:(id)");
}

-(void) unobserve:(id) info:(id) {
	%orig;
	NSLog(@"-(void) unobserve:(id) info:(id)");
}

-(void) unobserve:(id) infos:(id) {
	%orig;
	NSLog(@"-(void) unobserve:(id) infos:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

%end

%hook _FBKVOInfo

-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) block:(id) action:(?) context:(SEL) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) block:(id) action:(?) context:(SEL)");
}

-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) block:(id) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) block:(id)");
}

-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) action:(SEL) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) action:(SEL)");
}

-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) context:(void*) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) context:(void*)");
}

-(id) initWithController:(id) keyPath:(id) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

%end

%hook GADGestureIdUtil

+(void) getOSMajor:(int*) minor:(int*) bugFix:(int*) {
	%orig;
	NSLog(@"+(void) getOSMajor:(int*) minor:(int*) bugFix:(int*)");
}

+(bool) isOSAtLeastMajor:(int) minor:(int) bug:(int) {
	%orig;
	NSLog(@"+(bool) isOSAtLeastMajor:(int) minor:(int) bug:(int)");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(bool) deviceOptedOut {
	%orig;
	NSLog(@"-(bool) deviceOptedOut");
}

-(id) deviceIdentifierType {
	%orig;
	NSLog(@"-(id) deviceIdentifierType");
}

-(id) osVersion {
	%orig;
	NSLog(@"-(id) osVersion");
}

-(id) deviceIdentifier {
	%orig;
	NSLog(@"-(id) deviceIdentifier");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) setUserDefaults:(id) {
	%orig;
	NSLog(@"-(void) setUserDefaults:(id)");
}

-(id) userDefaults {
	%orig;
	NSLog(@"-(id) userDefaults");
}

%end

%hook GAD_GTMStringEncoding

+(id) rfc4648Base64WebsafeStringEncoding {
	%orig;
	NSLog(@"+(id) rfc4648Base64WebsafeStringEncoding");
}

+(id) rfc4648Base64StringEncoding {
	%orig;
	NSLog(@"+(id) rfc4648Base64StringEncoding");
}

+(id) stringEncodingWithString:(id) {
	%orig;
	NSLog(@"+(id) stringEncodingWithString:(id)");
}

+(id) binaryStringEncoding {
	%orig;
	NSLog(@"+(id) binaryStringEncoding");
}

+(id) hexStringEncoding {
	%orig;
	NSLog(@"+(id) hexStringEncoding");
}

+(id) rfc4648Base32StringEncoding {
	%orig;
	NSLog(@"+(id) rfc4648Base32StringEncoding");
}

+(id) rfc4648Base32HexStringEncoding {
	%orig;
	NSLog(@"+(id) rfc4648Base32HexStringEncoding");
}

+(id) crockfordBase32StringEncoding {
	%orig;
	NSLog(@"+(id) crockfordBase32StringEncoding");
}

-(id) encode:(id) {
	%orig;
	NSLog(@"-(id) encode:(id)");
}

-(id) decode:(id) {
	%orig;
	NSLog(@"-(id) decode:(id)");
}

-(void) addDecodeSynonyms:(id) {
	%orig;
	NSLog(@"-(void) addDecodeSynonyms:(id)");
}

-(void) setPaddingChar:(BOOL) {
	%orig;
	NSLog(@"-(void) setPaddingChar:(BOOL)");
}

-(void) setDoPad:(bool) {
	%orig;
	NSLog(@"-(void) setDoPad:(bool)");
}

-(void) ignoreCharacters:(id) {
	%orig;
	NSLog(@"-(void) ignoreCharacters:(id)");
}

-(bool) doPad {
	%orig;
	NSLog(@"-(bool) doPad");
}

-(id) stringByDecoding:(id) {
	%orig;
	NSLog(@"-(id) stringByDecoding:(id)");
}

-(id) encodeString:(id) {
	%orig;
	NSLog(@"-(id) encodeString:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithString:(id) {
	%orig;
	NSLog(@"-(id) initWithString:(id)");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook GADViewMonitor

-(void) startMonitoringWithSamplingInterval:(double) {
	%orig;
	NSLog(@"-(void) startMonitoringWithSamplingInterval:(double)");
}

-(bool) monitoredViewVisible {
	%orig;
	NSLog(@"-(bool) monitoredViewVisible");
}

-(void) updateViewBounds {
	%orig;
	NSLog(@"-(void) updateViewBounds");
}

-(void) setMonitoredViewVisibleBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setMonitoredViewVisibleBounds:(CGRect)");
}

-(CGRect) monitoredViewVisibleBounds {
	%orig;
	NSLog(@"-(CGRect) monitoredViewVisibleBounds");
}

-(void) stopMonitoring {
	%orig;
	NSLog(@"-(void) stopMonitoring");
}

-(void) sample {
	%orig;
	NSLog(@"-(void) sample");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithView:(id) {
	%orig;
	NSLog(@"-(id) initWithView:(id)");
}

%end

%hook GADImpressionMonitor

-(void) viewMonitorDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) viewMonitorDidRefresh:(id)");
}

-(id) initWithView:(id) impressionDefinition:(long long) {
	%orig;
	NSLog(@"-(id) initWithView:(id) impressionDefinition:(long long)");
}

-(void) startImpressionDefinitionAdLoaded {
	%orig;
	NSLog(@"-(void) startImpressionDefinitionAdLoaded");
}

-(void) startImpressionDefinitionVisible {
	%orig;
	NSLog(@"-(void) startImpressionDefinitionVisible");
}

-(void) didMonitorImpression {
	%orig;
	NSLog(@"-(void) didMonitorImpression");
}

-(void) stopMonitoring {
	%orig;
	NSLog(@"-(void) stopMonitoring");
}

-(void) startMonitoring {
	%orig;
	NSLog(@"-(void) startMonitoring");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook GADActiveViewMonitor

-(void) viewMonitorDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) viewMonitorDidRefresh:(id)");
}

-(id) initWithView:(id) adFormat:(id) activeViewConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithView:(id) adFormat:(id) activeViewConfiguration:(id)");
}

-(id) activeViewStateWithID:(unsigned long long) isMRAIDEnabled:(bool) unloaded:(bool) {
	%orig;
	NSLog(@"-(id) activeViewStateWithID:(unsigned long long) isMRAIDEnabled:(bool) unloaded:(bool)");
}

-(id) monitoredView {
	%orig;
	NSLog(@"-(id) monitoredView");
}

-(void) stopMonitoring {
	%orig;
	NSLog(@"-(void) stopMonitoring");
}

-(void) sample {
	%orig;
	NSLog(@"-(void) sample");
}

-(void) startMonitoring {
	%orig;
	NSLog(@"-(void) startMonitoring");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook GADOverlayProxy

+(id) overlayProxyForViewController:(id) {
	%orig;
	NSLog(@"+(id) overlayProxyForViewController:(id)");
}

-(void) relinquishScreenWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) relinquishScreenWithCompletion:(id)");
}

-(id) opener {
	%orig;
	NSLog(@"-(id) opener");
}

-(void) setOpener:(id) {
	%orig;
	NSLog(@"-(void) setOpener:(id)");
}

-(id) intermission {
	%orig;
	NSLog(@"-(id) intermission");
}

-(bool) shouldDismissOnApplicationEnteringForeground {
	%orig;
	NSLog(@"-(bool) shouldDismissOnApplicationEnteringForeground");
}

-(void) presentFromViewController:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) presentFromViewController:(id) completion:(id)");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(id) initWithViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithViewController:(id)");
}

%end

%hook GADModalOverlayPresenter

-(void) appDidEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) appDidEnterForeground:(id)");
}

-(void) hideStatusBar {
	%orig;
	NSLog(@"-(void) hideStatusBar");
}

-(void) updateViewControllerOrientation:(id) {
	%orig;
	NSLog(@"-(void) updateViewControllerOrientation:(id)");
}

-(void) forceUpdateViewControllerOrientation:(id) {
	%orig;
	NSLog(@"-(void) forceUpdateViewControllerOrientation:(id)");
}

-(void) setNeedsUpdateOrientation {
	%orig;
	NSLog(@"-(void) setNeedsUpdateOrientation");
}

-(void) dismissWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) dismissWithCompletionHandler:(id)");
}

-(id) presentationViewController {
	%orig;
	NSLog(@"-(id) presentationViewController");
}

-(void) presentFromViewController:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) presentFromViewController:(id) completion:(id)");
}

-(bool) isReadyToPresent {
	%orig;
	NSLog(@"-(bool) isReadyToPresent");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) presentedViewController {
	%orig;
	NSLog(@"-(id) presentedViewController");
}

-(void) setPresentedViewController:(id) {
	%orig;
	NSLog(@"-(void) setPresentedViewController:(id)");
}

%end

%hook GADTransparentOverlayPresenter

+(CGRect) frameWithSize:(CGSize) centeredInFrame:(CGRect) {
	%orig;
	NSLog(@"+(CGRect) frameWithSize:(CGSize) centeredInFrame:(CGRect)");
}

-(id) cropView {
	%orig;
	NSLog(@"-(id) cropView");
}

-(void) composeTransparentInterstitialViewsForPresentation {
	%orig;
	NSLog(@"-(void) composeTransparentInterstitialViewsForPresentation");
}

-(void) updateTransparentInterstitialOrientation {
	%orig;
	NSLog(@"-(void) updateTransparentInterstitialOrientation");
}

-(id) pivotView {
	%orig;
	NSLog(@"-(id) pivotView");
}

-(void) animateTransparentInterstitialPresentationWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) animateTransparentInterstitialPresentationWithCompletionHandler:(id)");
}

-(CGRect) pivotedApplicationFrameForOrientation:(long long) {
	%orig;
	NSLog(@"-(CGRect) pivotedApplicationFrameForOrientation:(long long)");
}

-(void) setPivotView:(id) {
	%orig;
	NSLog(@"-(void) setPivotView:(id)");
}

-(void) setCropView:(id) {
	%orig;
	NSLog(@"-(void) setCropView:(id)");
}

-(id) orientationChangeListener {
	%orig;
	NSLog(@"-(id) orientationChangeListener");
}

-(void) setOrientationChangeListener:(id) {
	%orig;
	NSLog(@"-(void) setOrientationChangeListener:(id)");
}

-(id) placementDisappearanceObserver {
	%orig;
	NSLog(@"-(id) placementDisappearanceObserver");
}

-(void) setPlacementDisappearanceObserver:(id) {
	%orig;
	NSLog(@"-(void) setPlacementDisappearanceObserver:(id)");
}

-(void) setNeedsUpdateOrientation {
	%orig;
	NSLog(@"-(void) setNeedsUpdateOrientation");
}

-(CGAffineTransform) transformForOrientation:(long long) {
	%orig;
	NSLog(@"-(CGAffineTransform) transformForOrientation:(long long)");
}

-(void) dismissWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) dismissWithCompletionHandler:(id)");
}

-(id) presentationViewController {
	%orig;
	NSLog(@"-(id) presentationViewController");
}

-(void) presentFromViewController:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) presentFromViewController:(id) completion:(id)");
}

-(bool) isReadyToPresent {
	%orig;
	NSLog(@"-(bool) isReadyToPresent");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) presentedViewController {
	%orig;
	NSLog(@"-(id) presentedViewController");
}

-(void) setPresentedViewController:(id) {
	%orig;
	NSLog(@"-(void) setPresentedViewController:(id)");
}

%end

%hook GADMRAIDResizeOverlayPresenter

+(CGRect) adjustedContentFrame:(CGRect) inBounds:(CGRect) {
	%orig;
	NSLog(@"+(CGRect) adjustedContentFrame:(CGRect) inBounds:(CGRect)");
}

-(id) MRAIDEventHandler {
	%orig;
	NSLog(@"-(id) MRAIDEventHandler");
}

-(void) setMRAIDEventHandler:(id) {
	%orig;
	NSLog(@"-(void) setMRAIDEventHandler:(id)");
}

-(bool) resizePropertiesAreValid:(id) relativeToView:(id) {
	%orig;
	NSLog(@"-(bool) resizePropertiesAreValid:(id) relativeToView:(id)");
}

-(void) repositionContentIfNeeded {
	%orig;
	NSLog(@"-(void) repositionContentIfNeeded");
}

-(void) composeTransparentInterstitialViewsForPresentation {
	%orig;
	NSLog(@"-(void) composeTransparentInterstitialViewsForPresentation");
}

-(void) updateTransparentInterstitialOrientation {
	%orig;
	NSLog(@"-(void) updateTransparentInterstitialOrientation");
}

-(void) setResizeProperties:(id) {
	%orig;
	NSLog(@"-(void) setResizeProperties:(id)");
}

-(id) resizeProperties {
	%orig;
	NSLog(@"-(id) resizeProperties");
}

-(bool) dismissToDefaultState {
	%orig;
	NSLog(@"-(bool) dismissToDefaultState");
}

-(void) setDismissToDefaultState:(bool) {
	%orig;
	NSLog(@"-(void) setDismissToDefaultState:(bool)");
}

-(bool) isReadyToPresent {
	%orig;
	NSLog(@"-(bool) isReadyToPresent");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(CGRect) contentFrame {
	%orig;
	NSLog(@"-(CGRect) contentFrame");
}

-(id) initWithReferenceView:(id) {
	%orig;
	NSLog(@"-(id) initWithReferenceView:(id)");
}

-(id) referenceView {
	%orig;
	NSLog(@"-(id) referenceView");
}

-(void) setReferenceView:(id) {
	%orig;
	NSLog(@"-(void) setReferenceView:(id)");
}

%end

%hook GADIntermission

-(void) cleanUpDeallocatedParticipants {
	%orig;
	NSLog(@"-(void) cleanUpDeallocatedParticipants");
}

-(void) participantWillOverrideStatusBarVisibility:(id) {
	%orig;
	NSLog(@"-(void) participantWillOverrideStatusBarVisibility:(id)");
}

-(void) participantWillRelinquishScreen:(id) {
	%orig;
	NSLog(@"-(void) participantWillRelinquishScreen:(id)");
}

-(void) participantDidRelinquishScreen:(id) {
	%orig;
	NSLog(@"-(void) participantDidRelinquishScreen:(id)");
}

-(void) applicationWillEnterForegroundWithNotification:(id) {
	%orig;
	NSLog(@"-(void) applicationWillEnterForegroundWithNotification:(id)");
}

-(void) willEnd {
	%orig;
	NSLog(@"-(void) willEnd");
}

-(id) activeParticipants {
	%orig;
	NSLog(@"-(id) activeParticipants");
}

-(id) initWithSlot:(id) {
	%orig;
	NSLog(@"-(id) initWithSlot:(id)");
}

-(void) addParticipant:(id) {
	%orig;
	NSLog(@"-(void) addParticipant:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) didEnd {
	%orig;
	NSLog(@"-(void) didEnd");
}

-(void) begin {
	%orig;
	NSLog(@"-(void) begin");
}

%end

%hook GADWebViewConfiguration

-(void) setWebViewClassKey:(id) {
	%orig;
	NSLog(@"-(void) setWebViewClassKey:(id)");
}

-(void) setDataDetectorType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDataDetectorType:(unsigned long long)");
}

-(unsigned long long) dataDetectorType {
	%orig;
	NSLog(@"-(unsigned long long) dataDetectorType");
}

-(id) webViewClassKey {
	%orig;
	NSLog(@"-(id) webViewClassKey");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setMediaPlaybackRequiresUserAction:(bool) {
	%orig;
	NSLog(@"-(void) setMediaPlaybackRequiresUserAction:(bool)");
}

-(bool) mediaPlaybackRequiresUserAction {
	%orig;
	NSLog(@"-(bool) mediaPlaybackRequiresUserAction");
}

-(bool) scalesPageToFit {
	%orig;
	NSLog(@"-(bool) scalesPageToFit");
}

-(void) setScalesPageToFit:(bool) {
	%orig;
	NSLog(@"-(void) setScalesPageToFit:(bool)");
}

%end

%hook GADAdViewActiveViewReporter

-(bool) reporting {
	%orig;
	NSLog(@"-(bool) reporting");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) setObserver:(id) {
	%orig;
	NSLog(@"-(void) setObserver:(id)");
}

-(id) observer {
	%orig;
	NSLog(@"-(id) observer");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook GADAdViewState

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) superview {
	%orig;
	NSLog(@"-(id) superview");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(CGRect) frame {
	%orig;
	NSLog(@"-(CGRect) frame");
}

-(void) setAutoresizingMask:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setAutoresizingMask:(unsigned long long)");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(unsigned long long) autoresizingMask {
	%orig;
	NSLog(@"-(unsigned long long) autoresizingMask");
}

-(void) setSuperview:(id) {
	%orig;
	NSLog(@"-(void) setSuperview:(id)");
}

%end

%hook GADVideoPlayer

-(id) initWithAdView:(id) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id)");
}

-(void) observePlayer {
	%orig;
	NSLog(@"-(void) observePlayer");
}

-(void) didStopBuffering {
	%orig;
	NSLog(@"-(void) didStopBuffering");
}

-(void) stopObservingPlayer {
	%orig;
	NSLog(@"-(void) stopObservingPlayer");
}

-(void) stopObservingPlayerItemLoadedTimeRanges {
	%orig;
	NSLog(@"-(void) stopObservingPlayerItemLoadedTimeRanges");
}

-(void) resetLogger {
	%orig;
	NSLog(@"-(void) resetLogger");
}

-(void) videoLoadingStartedWithURL:(id) {
	%orig;
	NSLog(@"-(void) videoLoadingStartedWithURL:(id)");
}

-(void) stopObservingPlayerItem {
	%orig;
	NSLog(@"-(void) stopObservingPlayerItem");
}

-(void) willStartBuffering {
	%orig;
	NSLog(@"-(void) willStartBuffering");
}

-(void) videoStartedPlaying {
	%orig;
	NSLog(@"-(void) videoStartedPlaying");
}

-(void) setAudioMixVolume:(float) {
	%orig;
	NSLog(@"-(void) setAudioMixVolume:(float)");
}

-(void) videoReadyToPlayWithURL:(id) {
	%orig;
	NSLog(@"-(void) videoReadyToPlayWithURL:(id)");
}

-(void) notifyVideoReadyToPlay {
	%orig;
	NSLog(@"-(void) notifyVideoReadyToPlay");
}

-(void) notifyVideoPlayerWithTime:(?) {
	%orig;
	NSLog(@"-(void) notifyVideoPlayerWithTime:(?)");
}

-(void) itemDidPlayToEnd:(id) {
	%orig;
	NSLog(@"-(void) itemDidPlayToEnd:(id)");
}

-(void) notifyVideoPlayerWithNewStatus:(long long) {
	%orig;
	NSLog(@"-(void) notifyVideoPlayerWithNewStatus:(long long)");
}

-(void) notifyVideoRateChanged {
	%orig;
	NSLog(@"-(void) notifyVideoRateChanged");
}

-(void) observePlayerItemLoadedTimeRanges {
	%orig;
	NSLog(@"-(void) observePlayerItemLoadedTimeRanges");
}

-(void) handlePlayerItemDurationLoadUpdate {
	%orig;
	NSLog(@"-(void) handlePlayerItemDurationLoadUpdate");
}

-(void) videoIsReadyToPlay {
	%orig;
	NSLog(@"-(void) videoIsReadyToPlay");
}

-(void) videoPlayedToTime:(?) duration:(?) {
	%orig;
	NSLog(@"-(void) videoPlayedToTime:(?) duration:(?)");
}

-(void) observePlayerItem {
	%orig;
	NSLog(@"-(void) observePlayerItem");
}

-(void) videoLoadingFailedWithURL:(id) error:(id) {
	%orig;
	NSLog(@"-(void) videoLoadingFailedWithURL:(id) error:(id)");
}

-(void) setSourceURL:(id) resourceCache:(id) videoConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setSourceURL:(id) resourceCache:(id) videoConfiguration:(id)");
}

-(void) videoLoader:(id) didStartedLoadingURL:(id) {
	%orig;
	NSLog(@"-(void) videoLoader:(id) didStartedLoadingURL:(id)");
}

-(void) videoLoader:(id) didFailToLoadURL:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) videoLoader:(id) didFailToLoadURL:(id) withError:(id)");
}

-(void) playNativePlayer {
	%orig;
	NSLog(@"-(void) playNativePlayer");
}

-(void) pauseNativePlayer {
	%orig;
	NSLog(@"-(void) pauseNativePlayer");
}

-(void) addPeriodicTimeObserverForInterval:(?) queue:(id) usingBlock:(id) completionBlock:(?) {
	%orig;
	NSLog(@"-(void) addPeriodicTimeObserverForInterval:(?) queue:(id) usingBlock:(id) completionBlock:(?)");
}

-(bool) hasPostedCanPlayThrough {
	%orig;
	NSLog(@"-(bool) hasPostedCanPlayThrough");
}

-(id) sourceURL {
	%orig;
	NSLog(@"-(id) sourceURL");
}

-(bool) muted {
	%orig;
	NSLog(@"-(bool) muted");
}

-(void) removeTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeTimeObserver:(id)");
}

-(void) setMuted:(bool) {
	%orig;
	NSLog(@"-(void) setMuted:(bool)");
}

-(CGSize) videoSize {
	%orig;
	NSLog(@"-(CGSize) videoSize");
}

-(void) seekToTime:(double) {
	%orig;
	NSLog(@"-(void) seekToTime:(double)");
}

-(id) logger {
	%orig;
	NSLog(@"-(id) logger");
}

-(void) setLogger:(id) {
	%orig;
	NSLog(@"-(void) setLogger:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) load {
	%orig;
	NSLog(@"-(void) load");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(void) setVolume:(float) {
	%orig;
	NSLog(@"-(void) setVolume:(float)");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook GADVideoLoader

-(bool) hasBeenUsed {
	%orig;
	NSLog(@"-(bool) hasBeenUsed");
}

-(void) notifyVideoLoaderFailedToLoadURL:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) notifyVideoLoaderFailedToLoadURL:(id) withError:(id)");
}

-(void) loadAdvanceControlVideoURL:(id) resourceCache:(id) {
	%orig;
	NSLog(@"-(void) loadAdvanceControlVideoURL:(id) resourceCache:(id)");
}

-(void) loadGCacheURL:(id) {
	%orig;
	NSLog(@"-(void) loadGCacheURL:(id)");
}

-(void) loadStandardURL:(id) {
	%orig;
	NSLog(@"-(void) loadStandardURL:(id)");
}

-(void) stopObservingResourceCacheUpdates {
	%orig;
	NSLog(@"-(void) stopObservingResourceCacheUpdates");
}

-(void) notifyVideoLoaderDidStartLoadingURL:(id) {
	%orig;
	NSLog(@"-(void) notifyVideoLoaderDidStartLoadingURL:(id)");
}

-(void) loadWithResourceCache:(id) {
	%orig;
	NSLog(@"-(void) loadWithResourceCache:(id)");
}

-(bool) processAssetResourceLoadingRequest:(id) withError:(id*) {
	%orig;
	NSLog(@"-(bool) processAssetResourceLoadingRequest:(id) withError:(id*)");
}

-(void) observeResourceCacheUpdates {
	%orig;
	NSLog(@"-(void) observeResourceCacheUpdates");
}

-(void) resourceCacheDidUpdateCacheNotification:(id) {
	%orig;
	NSLog(@"-(void) resourceCacheDidUpdateCacheNotification:(id)");
}

-(void) loadURL:(id) resourceCache:(id) configuration:(id) {
	%orig;
	NSLog(@"-(void) loadURL:(id) resourceCache:(id) configuration:(id)");
}

-(id) initWithPlayer:(id) {
	%orig;
	NSLog(@"-(id) initWithPlayer:(id)");
}

-(id) playerItem {
	%orig;
	NSLog(@"-(id) playerItem");
}

-(bool) resourceLoader:(id) shouldWaitForLoadingOfRequestedResource:(id) {
	%orig;
	NSLog(@"-(bool) resourceLoader:(id) shouldWaitForLoadingOfRequestedResource:(id)");
}

-(void) resourceLoader:(id) didCancelLoadingRequest:(id) {
	%orig;
	NSLog(@"-(void) resourceLoader:(id) didCancelLoadingRequest:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

%end

%hook GADVideoController

-(void) setInitialStateWithVideoOptions:(id) {
	%orig;
	NSLog(@"-(void) setInitialStateWithVideoOptions:(id)");
}

-(void) setInternalVideoController:(id) {
	%orig;
	NSLog(@"-(void) setInternalVideoController:(id)");
}

-(long long) videoPlaybackState {
	%orig;
	NSLog(@"-(long long) videoPlaybackState");
}

-(void) mediationNativeAdVideoControllerDidPlayVideo:(id) {
	%orig;
	NSLog(@"-(void) mediationNativeAdVideoControllerDidPlayVideo:(id)");
}

-(void) mediationNativeAdVideoControllerDidPauseVideo:(id) {
	%orig;
	NSLog(@"-(void) mediationNativeAdVideoControllerDidPauseVideo:(id)");
}

-(void) mediationNativeAdVideoControllerDidEndVideoPlayback:(id) {
	%orig;
	NSLog(@"-(void) mediationNativeAdVideoControllerDidEndVideoPlayback:(id)");
}

-(bool) customControlsEnabled {
	%orig;
	NSLog(@"-(bool) customControlsEnabled");
}

-(bool) clickToExpandEnabled {
	%orig;
	NSLog(@"-(bool) clickToExpandEnabled");
}

-(void) setInternalVideoControllerDelegate:(id) {
	%orig;
	NSLog(@"-(void) setInternalVideoControllerDelegate:(id)");
}

-(void) videoControllerDidPlayVideo:(id) {
	%orig;
	NSLog(@"-(void) videoControllerDidPlayVideo:(id)");
}

-(void) videoControllerDidPauseVideo:(id) {
	%orig;
	NSLog(@"-(void) videoControllerDidPauseVideo:(id)");
}

-(void) videoControllerDidEndVideoPlayback:(id) {
	%orig;
	NSLog(@"-(void) videoControllerDidEndVideoPlayback:(id)");
}

-(void) videoControllerDidMuteVideo:(id) {
	%orig;
	NSLog(@"-(void) videoControllerDidMuteVideo:(id)");
}

-(void) videoControllerDidUnmuteVideo:(id) {
	%orig;
	NSLog(@"-(void) videoControllerDidUnmuteVideo:(id)");
}

-(void) adViewVideoControllerDidPlayVideo:(id) {
	%orig;
	NSLog(@"-(void) adViewVideoControllerDidPlayVideo:(id)");
}

-(void) adViewVideoControllerDidPauseVideo:(id) {
	%orig;
	NSLog(@"-(void) adViewVideoControllerDidPauseVideo:(id)");
}

-(void) adViewVideoControllerDidEndVideoPlayback:(id) {
	%orig;
	NSLog(@"-(void) adViewVideoControllerDidEndVideoPlayback:(id)");
}

-(void) adViewVideoControllerDidMuteVideo:(id) {
	%orig;
	NSLog(@"-(void) adViewVideoControllerDidMuteVideo:(id)");
}

-(void) adViewVideoControllerDidUnmuteVideo:(id) {
	%orig;
	NSLog(@"-(void) adViewVideoControllerDidUnmuteVideo:(id)");
}

-(id) internalVideoController {
	%orig;
	NSLog(@"-(id) internalVideoController");
}

-(void) setMute:(bool) {
	%orig;
	NSLog(@"-(void) setMute:(bool)");
}

-(double) aspectRatio {
	%orig;
	NSLog(@"-(double) aspectRatio");
}

-(bool) hasVideoContent {
	%orig;
	NSLog(@"-(bool) hasVideoContent");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook GADVideoConfiguration

-(long long) precacheMaxBufferBytes {
	%orig;
	NSLog(@"-(long long) precacheMaxBufferBytes");
}

-(void) updateDynamicConfigurationWithDictionary:(id) {
	%orig;
	NSLog(@"-(void) updateDynamicConfigurationWithDictionary:(id)");
}

-(double) videoAssetLoaderMaxDownloadWaitTimeInterval {
	%orig;
	NSLog(@"-(double) videoAssetLoaderMaxDownloadWaitTimeInterval");
}

-(long long) videoAssetLoaderMaxContentSizeInBytes {
	%orig;
	NSLog(@"-(long long) videoAssetLoaderMaxContentSizeInBytes");
}

-(void) loadStaticSettingsWithDictionary:(id) {
	%orig;
	NSLog(@"-(void) loadStaticSettingsWithDictionary:(id)");
}

-(void) loadDynamicSettingsWithDictionary:(id) {
	%orig;
	NSLog(@"-(void) loadDynamicSettingsWithDictionary:(id)");
}

-(double) minBufferTimeInterval {
	%orig;
	NSLog(@"-(double) minBufferTimeInterval");
}

-(double) maxBufferTimeInterval {
	%orig;
	NSLog(@"-(double) maxBufferTimeInterval");
}

-(bool) enableAdvanceBufferingControl {
	%orig;
	NSLog(@"-(bool) enableAdvanceBufferingControl");
}

-(bool) enableInMemoryVideoBuffer {
	%orig;
	NSLog(@"-(bool) enableInMemoryVideoBuffer");
}

-(long long) videoAssetMaxLoadableChunkSizeInBytes {
	%orig;
	NSLog(@"-(long long) videoAssetMaxLoadableChunkSizeInBytes");
}

-(long long) assetLoadingPlayerItemMaxContentLoadingFailedAttempts {
	%orig;
	NSLog(@"-(long long) assetLoadingPlayerItemMaxContentLoadingFailedAttempts");
}

-(long long) assetLoadingPlayerItemMaxDataLoadingFailedAttempts {
	%orig;
	NSLog(@"-(long long) assetLoadingPlayerItemMaxDataLoadingFailedAttempts");
}

-(double) assetLoadingPlayerItemRefreshInterval {
	%orig;
	NSLog(@"-(double) assetLoadingPlayerItemRefreshInterval");
}

-(long long) assetLoadingPlayerItemNoBufferUpdateMaxContentSize {
	%orig;
	NSLog(@"-(long long) assetLoadingPlayerItemNoBufferUpdateMaxContentSize");
}

-(bool) videoBufferShouldIgnoreCanPlayThrough {
	%orig;
	NSLog(@"-(bool) videoBufferShouldIgnoreCanPlayThrough");
}

-(double) precacheUpdateCheckIntervals {
	%orig;
	NSLog(@"-(double) precacheUpdateCheckIntervals");
}

-(double) bufferForPlaybackTimeInterval {
	%orig;
	NSLog(@"-(double) bufferForPlaybackTimeInterval");
}

-(double) bufferForPlaybackAfterRebufferTimeInterval {
	%orig;
	NSLog(@"-(double) bufferForPlaybackAfterRebufferTimeInterval");
}

-(bool) enableAVPlayerPlaybackBuffering {
	%orig;
	NSLog(@"-(bool) enableAVPlayerPlaybackBuffering");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook GADVideoAssetLoader

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithVideoURL:(id) resourceCache:(id) videoConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithVideoURL:(id) resourceCache:(id) videoConfiguration:(id)");
}

-(bool) getResourceCache:(id*) startingByteOffset:(long long*) loadingByteOffset:(long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) getResourceCache:(id*) startingByteOffset:(long long*) loadingByteOffset:(long long) error:(id*)");
}

-(void) finishedUsingResourceCache:(id) {
	%orig;
	NSLog(@"-(void) finishedUsingResourceCache:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAudioVideoManager

-(void) setAudioSessionIsApplicationManaged:(bool) {
	%orig;
	NSLog(@"-(void) setAudioSessionIsApplicationManaged:(bool)");
}

-(void) updateAudioSessionAfterAllVideoStopPlayingSound {
	%orig;
	NSLog(@"-(void) updateAudioSessionAfterAllVideoStopPlayingSound");
}

-(long long) numLoadedPlayer {
	%orig;
	NSLog(@"-(long long) numLoadedPlayer");
}

-(bool) audioSessionIsApplicationManaged {
	%orig;
	NSLog(@"-(bool) audioSessionIsApplicationManaged");
}

-(void) playerWillLoad:(id) {
	%orig;
	NSLog(@"-(void) playerWillLoad:(id)");
}

-(void) playerDidUnload:(id) {
	%orig;
	NSLog(@"-(void) playerDidUnload:(id)");
}

-(void) playerDidPauseVideo:(id) {
	%orig;
	NSLog(@"-(void) playerDidPauseVideo:(id)");
}

-(void) playerWillStartPlayingVideo:(id) {
	%orig;
	NSLog(@"-(void) playerWillStartPlayingVideo:(id)");
}

-(void) playerWillStartPlayingSound:(id) {
	%orig;
	NSLog(@"-(void) playerWillStartPlayingSound:(id)");
}

-(void) playerDidStopPlayingSound:(id) {
	%orig;
	NSLog(@"-(void) playerDidStopPlayingSound:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook GADAssetLoadingVideoPlayerItem

-(void) loadPlayerItemData {
	%orig;
	NSLog(@"-(void) loadPlayerItemData");
}

-(void) handlePlayerItemUpdates {
	%orig;
	NSLog(@"-(void) handlePlayerItemUpdates");
}

-(void) stopPlayerItemCheckSourceTimer {
	%orig;
	NSLog(@"-(void) stopPlayerItemCheckSourceTimer");
}

-(void) startPlayerItemCheckSourceTimer {
	%orig;
	NSLog(@"-(void) startPlayerItemCheckSourceTimer");
}

-(void) processLoadingRequest {
	%orig;
	NSLog(@"-(void) processLoadingRequest");
}

-(bool) prepareForLoadingByteOffset:(long long) {
	%orig;
	NSLog(@"-(bool) prepareForLoadingByteOffset:(long long)");
}

-(bool) loadContentRequest:(id) withError:(id*) {
	%orig;
	NSLog(@"-(bool) loadContentRequest:(id) withError:(id*)");
}

-(bool) loadDataRequest:(id) withError:(id*) {
	%orig;
	NSLog(@"-(bool) loadDataRequest:(id) withError:(id*)");
}

-(id) initWithVideoURL:(id) assetLoader:(id) videoConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithVideoURL:(id) assetLoader:(id) videoConfiguration:(id)");
}

-(void) setPlayer:(id) {
	%orig;
	NSLog(@"-(void) setPlayer:(id)");
}

-(id) videoURL {
	%orig;
	NSLog(@"-(id) videoURL");
}

-(id) playerItem {
	%orig;
	NSLog(@"-(id) playerItem");
}

-(bool) resourceLoader:(id) shouldWaitForLoadingOfRequestedResource:(id) {
	%orig;
	NSLog(@"-(bool) resourceLoader:(id) shouldWaitForLoadingOfRequestedResource:(id)");
}

-(void) resourceLoader:(id) didCancelLoadingRequest:(id) {
	%orig;
	NSLog(@"-(void) resourceLoader:(id) didCancelLoadingRequest:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

%end

%hook GADAdViewVideoController

-(void) setInitialStateWithVideoOptions:(id) {
	%orig;
	NSLog(@"-(void) setInitialStateWithVideoOptions:(id)");
}

-(long long) videoPlaybackState {
	%orig;
	NSLog(@"-(long long) videoPlaybackState");
}

-(void) setVideoMuted:(bool) {
	%orig;
	NSLog(@"-(void) setVideoMuted:(bool)");
}

-(void) setCustomControlsEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setCustomControlsEnabled:(bool)");
}

-(void) setClickToExpandEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setClickToExpandEnabled:(bool)");
}

-(void) setVideoPlaybackState:(long long) {
	%orig;
	NSLog(@"-(void) setVideoPlaybackState:(long long)");
}

-(bool) customControlsEnabled {
	%orig;
	NSLog(@"-(bool) customControlsEnabled");
}

-(bool) clickToExpandEnabled {
	%orig;
	NSLog(@"-(bool) clickToExpandEnabled");
}

-(void) setHasVideoContent:(bool) {
	%orig;
	NSLog(@"-(void) setHasVideoContent:(bool)");
}

-(id) initWithAdView:(id) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id)");
}

-(bool) videoMuted {
	%orig;
	NSLog(@"-(bool) videoMuted");
}

-(void) setAspectRatio:(double) {
	%orig;
	NSLog(@"-(void) setAspectRatio:(double)");
}

-(void) setMute:(bool) {
	%orig;
	NSLog(@"-(void) setMute:(bool)");
}

-(double) aspectRatio {
	%orig;
	NSLog(@"-(double) aspectRatio");
}

-(double) currentPlaybackTime {
	%orig;
	NSLog(@"-(double) currentPlaybackTime");
}

-(void) setCurrentPlaybackTime:(double) {
	%orig;
	NSLog(@"-(void) setCurrentPlaybackTime:(double)");
}

-(double) videoDuration {
	%orig;
	NSLog(@"-(double) videoDuration");
}

-(void) setVideoDuration:(double) {
	%orig;
	NSLog(@"-(void) setVideoDuration:(double)");
}

-(bool) hasVideoContent {
	%orig;
	NSLog(@"-(bool) hasVideoContent");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook GADViewUtilities

+(id) positionOfView:(id) inScreen:(id) {
	%orig;
	NSLog(@"+(id) positionOfView:(id) inScreen:(id)");
}

%end

%hook GADMUtilities

+(id) mediationURLFrom:(id) adLocationID:(id) adNetworkRefresh:(bool) allocationID:(id) adNetworkID:(id) qData:(id) sessionID:(id) sequenceNumber:(id) exitCodes:(id) durations:(id) fillStatus:(id) {
	%orig;
	NSLog(@"+(id) mediationURLFrom:(id) adLocationID:(id) adNetworkRefresh:(bool) allocationID:(id) adNetworkID:(id) qData:(id) sessionID:(id) sequenceNumber:(id) exitCodes:(id) durations:(id) fillStatus:(id)");
}

%end

%hook GADLogger

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) logPublicMessage:(id) {
	%orig;
	NSLog(@"-(void) logPublicMessage:(id)");
}

-(void) setLogLevelThreshold:(long long) {
	%orig;
	NSLog(@"-(void) setLogLevelThreshold:(long long)");
}

-(void) waitForLogging {
	%orig;
	NSLog(@"-(void) waitForLogging");
}

%end

%hook GADDevice

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(bool) isOSAtLeastMajor:(long long) minor:(long long) patch:(long long) {
	%orig;
	NSLog(@"-(bool) isOSAtLeastMajor:(long long) minor:(long long) patch:(long long)");
}

-(void) cacheStaticParameters {
	%orig;
	NSLog(@"-(void) cacheStaticParameters");
}

-(void) cacheAdditionalStaticParameters {
	%orig;
	NSLog(@"-(void) cacheAdditionalStaticParameters");
}

-(id) limitAdTrackingString {
	%orig;
	NSLog(@"-(id) limitAdTrackingString");
}

-(id) rawDeviceIdentifier {
	%orig;
	NSLog(@"-(id) rawDeviceIdentifier");
}

-(id) canOpenURLs:(id) {
	%orig;
	NSLog(@"-(id) canOpenURLs:(id)");
}

-(CGRect) standardizedPortraitScreenBounds {
	%orig;
	NSLog(@"-(CGRect) standardizedPortraitScreenBounds");
}

-(CGRect) standardizedOrientedScreenBounds {
	%orig;
	NSLog(@"-(CGRect) standardizedOrientedScreenBounds");
}

-(void) updateOperatingSystemVersionProperties {
	%orig;
	NSLog(@"-(void) updateOperatingSystemVersionProperties");
}

-(void) updateCanMakePayments {
	%orig;
	NSLog(@"-(void) updateCanMakePayments");
}

-(void) updateOrientation {
	%orig;
	NSLog(@"-(void) updateOrientation");
}

-(void) updateOrientedKeyWindowSize {
	%orig;
	NSLog(@"-(void) updateOrientedKeyWindowSize");
}

-(void) updateBookstores {
	%orig;
	NSLog(@"-(void) updateBookstores");
}

-(void) updateAudio {
	%orig;
	NSLog(@"-(void) updateAudio");
}

-(bool) orientationLandscape {
	%orig;
	NSLog(@"-(bool) orientationLandscape");
}

-(void) updateAudioVolume {
	%orig;
	NSLog(@"-(void) updateAudioVolume");
}

-(void) updateAudioPortNames {
	%orig;
	NSLog(@"-(void) updateAudioPortNames");
}

-(id) baseSDKVersion {
	%orig;
	NSLog(@"-(id) baseSDKVersion");
}

-(bool) jailbroken {
	%orig;
	NSLog(@"-(bool) jailbroken");
}

-(id) deviceSubmodel {
	%orig;
	NSLog(@"-(id) deviceSubmodel");
}

-(id) audioRoutePortNames {
	%orig;
	NSLog(@"-(id) audioRoutePortNames");
}

-(id) shouldSilenceAudioValue {
	%orig;
	NSLog(@"-(id) shouldSilenceAudioValue");
}

-(CGSize) standardizedPortraitKeyWindowSize {
	%orig;
	NSLog(@"-(CGSize) standardizedPortraitKeyWindowSize");
}

-(CGSize) standardizedOrientedKeyWindowSize {
	%orig;
	NSLog(@"-(CGSize) standardizedOrientedKeyWindowSize");
}

-(void) updateDynamicParameters {
	%orig;
	NSLog(@"-(void) updateDynamicParameters");
}

-(bool) OSIsSupported {
	%orig;
	NSLog(@"-(bool) OSIsSupported");
}

-(double) mainScreenDensity {
	%orig;
	NSLog(@"-(double) mainScreenDensity");
}

-(CGRect) standardizedLandscapeScreenBounds {
	%orig;
	NSLog(@"-(CGRect) standardizedLandscapeScreenBounds");
}

-(CGRect) standardizedOrientedApplicationFrame {
	%orig;
	NSLog(@"-(CGRect) standardizedOrientedApplicationFrame");
}

-(bool) canText {
	%orig;
	NSLog(@"-(bool) canText");
}

-(bool) canMakePhoneCalls {
	%orig;
	NSLog(@"-(bool) canMakePhoneCalls");
}

-(bool) isOtherAudioPlaying {
	%orig;
	NSLog(@"-(bool) isOtherAudioPlaying");
}

-(id) deviceIdentifier {
	%orig;
	NSLog(@"-(id) deviceIdentifier");
}

-(float) audioVolume {
	%orig;
	NSLog(@"-(float) audioVolume");
}

-(bool) limitAdTracking {
	%orig;
	NSLog(@"-(bool) limitAdTracking");
}

-(id) deviceModel {
	%orig;
	NSLog(@"-(id) deviceModel");
}

-(?) operatingSystemVersion {
	%orig;
	NSLog(@"-(?) operatingSystemVersion");
}

-(bool) isSimulator {
	%orig;
	NSLog(@"-(bool) isSimulator");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(id) systemVersion {
	%orig;
	NSLog(@"-(id) systemVersion");
}

-(id) locale {
	%orig;
	NSLog(@"-(id) locale");
}

%end

%hook GADBinaryHeap

-(id) removedMinimum {
	%orig;
	NSLog(@"-(id) removedMinimum");
}

-(id) sortedObjects {
	%orig;
	NSLog(@"-(id) sortedObjects");
}

-(id) minimum {
	%orig;
	NSLog(@"-(id) minimum");
}

-(id) initWithComparator:(?*) {
	%orig;
	NSLog(@"-(id) initWithComparator:(?*)");
}

-(void) addObject:(id) {
	%orig;
	NSLog(@"-(void) addObject:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(unsigned long long) count {
	%orig;
	NSLog(@"-(unsigned long long) count");
}

-(bool) containsObject:(id) {
	%orig;
	NSLog(@"-(bool) containsObject:(id)");
}

%end

%hook GADTimingManager

-(id) timingForCategory:(id) {
	%orig;
	NSLog(@"-(id) timingForCategory:(id)");
}

-(void) removeTimingForCategory:(id) {
	%orig;
	NSLog(@"-(void) removeTimingForCategory:(id)");
}

-(id) addTimingWithCategory:(id) {
	%orig;
	NSLog(@"-(id) addTimingWithCategory:(id)");
}

-(void) loadPersistentTimings {
	%orig;
	NSLog(@"-(void) loadPersistentTimings");
}

-(void) savePersistentTimings {
	%orig;
	NSLog(@"-(void) savePersistentTimings");
}

-(void) addTiming:(id) {
	%orig;
	NSLog(@"-(void) addTiming:(id)");
}

-(id) timings {
	%orig;
	NSLog(@"-(id) timings");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setIdentifier:(id)");
}

-(id) categories {
	%orig;
	NSLog(@"-(id) categories");
}

-(void) applicationWillTerminate:(id) {
	%orig;
	NSLog(@"-(void) applicationWillTerminate:(id)");
}

%end

%hook GADTiming

-(void) setExplicitEnd:(bool) {
	%orig;
	NSLog(@"-(void) setExplicitEnd:(bool)");
}

-(id) elapsedMillisecondsString {
	%orig;
	NSLog(@"-(id) elapsedMillisecondsString");
}

-(unsigned long long) elapsedMilliseconds {
	%orig;
	NSLog(@"-(unsigned long long) elapsedMilliseconds");
}

-(bool) explicitEnd {
	%orig;
	NSLog(@"-(bool) explicitEnd");
}

-(unsigned long long) endTimestamp {
	%orig;
	NSLog(@"-(unsigned long long) endTimestamp");
}

-(id) initWithCategory:(id) {
	%orig;
	NSLog(@"-(id) initWithCategory:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) dictionaryRepresentation {
	%orig;
	NSLog(@"-(id) dictionaryRepresentation");
}

-(id) initWithDictionaryRepresentation:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionaryRepresentation:(id)");
}

-(unsigned long long) startTimestamp {
	%orig;
	NSLog(@"-(unsigned long long) startTimestamp");
}

-(void) end {
	%orig;
	NSLog(@"-(void) end");
}

-(id) category {
	%orig;
	NSLog(@"-(id) category");
}

%end

%hook GADStatisticsCore

-(void) appendString:(id) toArrayForKey:(id) {
	%orig;
	NSLog(@"-(void) appendString:(id) toArrayForKey:(id)");
}

-(void) appendDictionary:(id) toArrayForKey:(id) {
	%orig;
	NSLog(@"-(void) appendDictionary:(id) toArrayForKey:(id)");
}

-(void) savePersistentStatistics {
	%orig;
	NSLog(@"-(void) savePersistentStatistics");
}

-(id) statistics {
	%orig;
	NSLog(@"-(id) statistics");
}

-(id) arrayForKey:(id) {
	%orig;
	NSLog(@"-(id) arrayForKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setIdentifier:(id)");
}

-(void) removeObjectForKey:(id) {
	%orig;
	NSLog(@"-(void) removeObjectForKey:(id)");
}

-(void) applicationWillTerminate:(id) {
	%orig;
	NSLog(@"-(void) applicationWillTerminate:(id)");
}

%end

%hook GADStatisticDictionary

-(void) incrementNumberForKey:(id) shouldNotifyDelegate:(bool) {
	%orig;
	NSLog(@"-(void) incrementNumberForKey:(id) shouldNotifyDelegate:(bool)");
}

-(void) setObject:(id) forKey:(id) shouldNotifyDelegate:(bool) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKey:(id) shouldNotifyDelegate:(bool)");
}

-(void) decrementNumberForKey:(id) shouldNotifyDelegate:(bool) {
	%orig;
	NSLog(@"-(void) decrementNumberForKey:(id) shouldNotifyDelegate:(bool)");
}

-(void) didFinishModifying {
	%orig;
	NSLog(@"-(void) didFinishModifying");
}

-(void) setMaxSize:(long long) forArrayWithKey:(id) {
	%orig;
	NSLog(@"-(void) setMaxSize:(long long) forArrayWithKey:(id)");
}

-(id) initWithQueueLabel:(const char*) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithQueueLabel:(const char*) delegate:(id)");
}

-(void) setAllowDictionaryModification:(bool) {
	%orig;
	NSLog(@"-(void) setAllowDictionaryModification:(bool)");
}

-(void) setHasEnqueuedNotificationBlock:(bool) {
	%orig;
	NSLog(@"-(void) setHasEnqueuedNotificationBlock:(bool)");
}

-(bool) allowDictionaryModification {
	%orig;
	NSLog(@"-(bool) allowDictionaryModification");
}

-(bool) hasEnqueuedNotificationBlock {
	%orig;
	NSLog(@"-(bool) hasEnqueuedNotificationBlock");
}

-(void) enqueueNotificationBlock {
	%orig;
	NSLog(@"-(void) enqueueNotificationBlock");
}

-(void) dispatchAsyncShouldNotifyDelegate:(bool) block:(id) {
	%orig;
	NSLog(@"-(void) dispatchAsyncShouldNotifyDelegate:(bool) block:(id)");
}

-(void) addNumber:(id) toNumberForKey:(id) shouldNotifyDelegate:(bool) {
	%orig;
	NSLog(@"-(void) addNumber:(id) toNumberForKey:(id) shouldNotifyDelegate:(bool)");
}

-(void) resizeArray:(id) toMaxSize:(long long) {
	%orig;
	NSLog(@"-(void) resizeArray:(id) toMaxSize:(long long)");
}

-(void) addEntriesFromDictionary:(id) shouldNotifyDelegate:(bool) {
	%orig;
	NSLog(@"-(void) addEntriesFromDictionary:(id) shouldNotifyDelegate:(bool)");
}

-(id) arrayMaxSize {
	%orig;
	NSLog(@"-(id) arrayMaxSize");
}

-(void) setArrayMaxSize:(id) {
	%orig;
	NSLog(@"-(void) setArrayMaxSize:(id)");
}

-(void) addObject:(id) toArrayWithKey:(id) shouldNotifyDelegate:(bool) {
	%orig;
	NSLog(@"-(void) addObject:(id) toArrayWithKey:(id) shouldNotifyDelegate:(bool)");
}

-(id) serialQueue {
	%orig;
	NSLog(@"-(id) serialQueue");
}

-(void) setSerialQueue:(id) {
	%orig;
	NSLog(@"-(void) setSerialQueue:(id)");
}

-(id) delegateLock {
	%orig;
	NSLog(@"-(id) delegateLock");
}

-(void) setDelegateLock:(id) {
	%orig;
	NSLog(@"-(void) setDelegateLock:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) dictionary {
	%orig;
	NSLog(@"-(id) dictionary");
}

-(id) objectForKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(id) objectForKeyedSubscript:(id)");
}

-(void) setObject:(id) forKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKeyedSubscript:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) removeAllObjects {
	%orig;
	NSLog(@"-(void) removeAllObjects");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

%end

%hook GADSlotStatistics

-(void) startTimingNamed:(id) withExplicitEnd:(bool) {
	%orig;
	NSLog(@"-(void) startTimingNamed:(id) withExplicitEnd:(bool)");
}

-(void) endTimingNamed:(id) {
	%orig;
	NSLog(@"-(void) endTimingNamed:(id)");
}

-(id) timingNamed:(id) {
	%orig;
	NSLog(@"-(id) timingNamed:(id)");
}

-(id) fillStatusStringFromArray:(id) {
	%orig;
	NSLog(@"-(id) fillStatusStringFromArray:(id)");
}

-(void) startTimingAdapter {
	%orig;
	NSLog(@"-(void) startTimingAdapter");
}

-(void) endTimingAdapterWithExitCode:(long long) {
	%orig;
	NSLog(@"-(void) endTimingAdapterWithExitCode:(long long)");
}

-(void) endTimingAdapterWithFillStatus:(long long) allocationID:(id) {
	%orig;
	NSLog(@"-(void) endTimingAdapterWithFillStatus:(long long) allocationID:(id)");
}

-(void) resetTimingAdapters {
	%orig;
	NSLog(@"-(void) resetTimingAdapters");
}

-(void) resetFillStatus {
	%orig;
	NSLog(@"-(void) resetFillStatus");
}

-(id) adapterExitCodesParameter {
	%orig;
	NSLog(@"-(id) adapterExitCodesParameter");
}

-(id) adapterDurationsParameter {
	%orig;
	NSLog(@"-(id) adapterDurationsParameter");
}

-(id) adapterFillStatusParameter {
	%orig;
	NSLog(@"-(id) adapterFillStatusParameter");
}

-(id) adapterFillStatusParameterOrderedByAllocationIDs:(id) {
	%orig;
	NSLog(@"-(id) adapterFillStatusParameterOrderedByAllocationIDs:(id)");
}

-(id) statistics {
	%orig;
	NSLog(@"-(id) statistics");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setIdentifier:(id)");
}

%end

%hook GADMobileAds

+(void) enableBackgroundAdLoading {
	%orig;
	NSLog(@"+(void) enableBackgroundAdLoading");
}

+(void) configureWithApplicationID:(id) {
	%orig;
	NSLog(@"+(void) configureWithApplicationID:(id)");
}

+(void) disableAutomatedInAppPurchaseReporting {
	%orig;
	NSLog(@"+(void) disableAutomatedInAppPurchaseReporting");
}

+(void) disableSDKCrashReporting {
	%orig;
	NSLog(@"+(void) disableSDKCrashReporting");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) setApplicationVolume:(float) {
	%orig;
	NSLog(@"-(void) setApplicationVolume:(float)");
}

-(void) setApplicationMuted:(bool) {
	%orig;
	NSLog(@"-(void) setApplicationMuted:(bool)");
}

-(bool) isSDKVersionAtLeastMajor:(long long) minor:(long long) patch:(long long) {
	%orig;
	NSLog(@"-(bool) isSDKVersionAtLeastMajor:(long long) minor:(long long) patch:(long long)");
}

-(float) applicationVolume {
	%orig;
	NSLog(@"-(float) applicationVolume");
}

-(void) setAudioVideoManager:(id) {
	%orig;
	NSLog(@"-(void) setAudioVideoManager:(id)");
}

-(float) clampedApplicationVolume {
	%orig;
	NSLog(@"-(float) clampedApplicationVolume");
}

-(bool) applicationMuted {
	%orig;
	NSLog(@"-(bool) applicationMuted");
}

-(id) audioVideoManager {
	%orig;
	NSLog(@"-(id) audioVideoManager");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADInjectedSettings

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) objectForKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(id) objectForKeyedSubscript:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) addEntriesFromDictionary:(id) {
	%orig;
	NSLog(@"-(void) addEntriesFromDictionary:(id)");
}

-(void) refresh {
	%orig;
	NSLog(@"-(void) refresh");
}

%end

%hook GADConfiguration

-(void) addEntriesFromDictionary:(id) priority:(long long) {
	%orig;
	NSLog(@"-(void) addEntriesFromDictionary:(id) priority:(long long)");
}

-(void) addEntriesFromDictionary:(id) priorities:(id) {
	%orig;
	NSLog(@"-(void) addEntriesFromDictionary:(id) priorities:(id)");
}

-(bool) updatedBySettingValue:(id) withPriority:(long long) forKey:(id) {
	%orig;
	NSLog(@"-(bool) updatedBySettingValue:(id) withPriority:(long long) forKey:(id)");
}

-(void) didUpdate {
	%orig;
	NSLog(@"-(void) didUpdate");
}

-(void) setObject:(id) forKey:(id) priority:(long long) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKey:(id) priority:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) objectForKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(id) objectForKeyedSubscript:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook GADSafeBrowsingReporter

-(void) reportResourceCollection:(id) {
	%orig;
	NSLog(@"-(void) reportResourceCollection:(id)");
}

-(bool) shouldReportMaliciousAds {
	%orig;
	NSLog(@"-(bool) shouldReportMaliciousAds");
}

-(id) autoClickProtection {
	%orig;
	NSLog(@"-(id) autoClickProtection");
}

-(bool) shouldReportBenignAds {
	%orig;
	NSLog(@"-(bool) shouldReportBenignAds");
}

-(bool) shouldSendRenderedAd {
	%orig;
	NSLog(@"-(bool) shouldSendRenderedAd");
}

-(id) clickString {
	%orig;
	NSLog(@"-(id) clickString");
}

-(id) excludedHeaders {
	%orig;
	NSLog(@"-(id) excludedHeaders");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook GADSDKCoreWebView

-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(void) adView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailLoadWithError:(id)");
}

-(id) SDKCoreGMSGHandler {
	%orig;
	NSLog(@"-(id) SDKCoreGMSGHandler");
}

-(void) adViewWebProcessDidTerminate:(id) {
	%orig;
	NSLog(@"-(void) adViewWebProcessDidTerminate:(id)");
}

-(id) CSIForGMSGHandler:(id) {
	%orig;
	NSLog(@"-(id) CSIForGMSGHandler:(id)");
}

-(void) enqueueJavaScriptCommand:(id) {
	%orig;
	NSLog(@"-(void) enqueueJavaScriptCommand:(id)");
}

-(void) notifyAllObserversOnlyOnceThatSDKCoreRequestIsFinished {
	%orig;
	NSLog(@"-(void) notifyAllObserversOnlyOnceThatSDKCoreRequestIsFinished");
}

-(void) willRefreshSDKCore {
	%orig;
	NSLog(@"-(void) willRefreshSDKCore");
}

-(void) addObserverForOneTimeNotification:(id) {
	%orig;
	NSLog(@"-(void) addObserverForOneTimeNotification:(id)");
}

-(void) dispatchPendingJavaScriptCommands {
	%orig;
	NSLog(@"-(void) dispatchPendingJavaScriptCommands");
}

-(void) setHasSDKCoreLoadedAtLeastOnce:(bool) {
	%orig;
	NSLog(@"-(void) setHasSDKCoreLoadedAtLeastOnce:(bool)");
}

-(void) refreshSDKCoreAndNotifyObserver:(id) {
	%orig;
	NSLog(@"-(void) refreshSDKCoreAndNotifyObserver:(id)");
}

-(bool) hasSDKCoreLoadedAtLeastOnce {
	%orig;
	NSLog(@"-(bool) hasSDKCoreLoadedAtLeastOnce");
}

-(void) setActiveViewObserver:(id) forActiveViewID:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setActiveViewObserver:(id) forActiveViewID:(unsigned long long)");
}

-(void) removeActiveViewObserverForActiveViewID:(unsigned long long) {
	%orig;
	NSLog(@"-(void) removeActiveViewObserverForActiveViewID:(unsigned long long)");
}

-(void) clearAllActiveViewInstances {
	%orig;
	NSLog(@"-(void) clearAllActiveViewInstances");
}

-(bool) isActiveViewRunning {
	%orig;
	NSLog(@"-(bool) isActiveViewRunning");
}

-(void) setSDKCoreGMSGHandler:(id) {
	%orig;
	NSLog(@"-(void) setSDKCoreGMSGHandler:(id)");
}

-(void) activeViewGMSGHandler:(id) didReceiveUntrackNotificationForActiveViewID:(unsigned long long) {
	%orig;
	NSLog(@"-(void) activeViewGMSGHandler:(id) didReceiveUntrackNotificationForActiveViewID:(unsigned long long)");
}

-(void) activeViewGMSGHandler:(id) didReceiveVisibilityNotification:(bool) forActiveViewID:(unsigned long long) {
	%orig;
	NSLog(@"-(void) activeViewGMSGHandler:(id) didReceiveVisibilityNotification:(bool) forActiveViewID:(unsigned long long)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) removeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeObserver:(id)");
}

-(long long) state {
	%orig;
	NSLog(@"-(long long) state");
}

-(void) setState:(long long) {
	%orig;
	NSLog(@"-(void) setState:(long long)");
}

-(id) initWithConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithConfiguration:(id)");
}

%end

%hook GADSDKCoreController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) postJavaScriptNotification:(id) userInfo:(id) {
	%orig;
	NSLog(@"-(void) postJavaScriptNotification:(id) userInfo:(id)");
}

-(double) activeViewSamplingInterval {
	%orig;
	NSLog(@"-(double) activeViewSamplingInterval");
}

-(id) activeSDKCoreWebView {
	%orig;
	NSLog(@"-(id) activeSDKCoreWebView");
}

-(void) executeExportedJavaScriptCommand:(id) parameters:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) executeExportedJavaScriptCommand:(id) parameters:(id) completionBlock:(id)");
}

-(void) SDKCoreGMSGHandler:(id) loadAdURLWithRequestID:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) SDKCoreGMSGHandler:(id) loadAdURLWithRequestID:(id) parameters:(id)");
}

-(void) SDKCoreGMSGHandler:(id) didReceiveInvalidAdWithRequestID:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) SDKCoreGMSGHandler:(id) didReceiveInvalidAdWithRequestID:(id) parameters:(id)");
}

-(void) SDKCoreGMSGHandler:(id) didLoadSDKConstants:(id) {
	%orig;
	NSLog(@"-(void) SDKCoreGMSGHandler:(id) didLoadSDKConstants:(id)");
}

-(void) SDKCoreGMSGHandler:(id) loadAdWithRequestID:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) SDKCoreGMSGHandler:(id) loadAdWithRequestID:(id) parameters:(id)");
}

-(void) SDKCoreGMSGHandlerDidReceiveSDKCoreUpdateNotification:(id) {
	%orig;
	NSLog(@"-(void) SDKCoreGMSGHandlerDidReceiveSDKCoreUpdateNotification:(id)");
}

-(void) SDKCoreGMSGHandler:(id) didReceiveResultActionWithRequestID:(id) arguments:(id) {
	%orig;
	NSLog(@"-(void) SDKCoreGMSGHandler:(id) didReceiveResultActionWithRequestID:(id) arguments:(id)");
}

-(void) SDKCoreGMSGHandlerDidReceiveResumeSDKCoreRefreshAction:(id) {
	%orig;
	NSLog(@"-(void) SDKCoreGMSGHandlerDidReceiveResumeSDKCoreRefreshAction:(id)");
}

-(void) SDKCoreGMSGHandlerDidReceivePauseSDKCoreRefreshAction:(id) {
	%orig;
	NSLog(@"-(void) SDKCoreGMSGHandlerDidReceivePauseSDKCoreRefreshAction:(id)");
}

-(void) buildAdURL:(id) {
	%orig;
	NSLog(@"-(void) buildAdURL:(id)");
}

-(void) setSDKCoreWebViewExperiment {
	%orig;
	NSLog(@"-(void) setSDKCoreWebViewExperiment");
}

-(void) removeFinishedActiveViewWebViews {
	%orig;
	NSLog(@"-(void) removeFinishedActiveViewWebViews");
}

-(void) cacheRunningActiveViewWebView:(id) {
	%orig;
	NSLog(@"-(void) cacheRunningActiveViewWebView:(id)");
}

-(void) attemptToRefreshActiveWebViewSDKCore {
	%orig;
	NSLog(@"-(void) attemptToRefreshActiveWebViewSDKCore");
}

-(void) executeJavaScriptFromBlockWhenReady:(id) withCompletionBlock:(?) {
	%orig;
	NSLog(@"-(void) executeJavaScriptFromBlockWhenReady:(id) withCompletionBlock:(?)");
}

-(void) refreshActiveWebViewSDKCore {
	%orig;
	NSLog(@"-(void) refreshActiveWebViewSDKCore");
}

-(void) observeSDKCoreWebViewForSDKCoreLoadRequestCompleted {
	%orig;
	NSLog(@"-(void) observeSDKCoreWebViewForSDKCoreLoadRequestCompleted");
}

-(id) adRequestParameterJSONFromParameters:(id) {
	%orig;
	NSLog(@"-(id) adRequestParameterJSONFromParameters:(id)");
}

-(void) handleSDKCoreUpdate {
	%orig;
	NSLog(@"-(void) handleSDKCoreUpdate");
}

-(void) asynchronouslyRequestURLForDelegate:(id) {
	%orig;
	NSLog(@"-(void) asynchronouslyRequestURLForDelegate:(id)");
}

-(void) executePendingJavaScriptBlocks {
	%orig;
	NSLog(@"-(void) executePendingJavaScriptBlocks");
}

-(void) setActiveViewSamplingInterval:(double) {
	%orig;
	NSLog(@"-(void) setActiveViewSamplingInterval:(double)");
}

-(void) setSDKCoreJavaScriptCompletionBlockTimeoutInterval:(double) {
	%orig;
	NSLog(@"-(void) setSDKCoreJavaScriptCompletionBlockTimeoutInterval:(double)");
}

-(id) SDKCoreWebViewForActiveViewProcessing {
	%orig;
	NSLog(@"-(id) SDKCoreWebViewForActiveViewProcessing");
}

-(void) finishedUsingSDKCoreWebViewForActiveViewProcessing:(id) {
	%orig;
	NSLog(@"-(void) finishedUsingSDKCoreWebViewForActiveViewProcessing:(id)");
}

-(double) SDKCoreJavaScriptCompletionBlockTimeoutInterval {
	%orig;
	NSLog(@"-(double) SDKCoreJavaScriptCompletionBlockTimeoutInterval");
}

-(id) activeViewMonitorRefreshIntervals {
	%orig;
	NSLog(@"-(id) activeViewMonitorRefreshIntervals");
}

-(void) setActiveViewMonitorRefreshIntervals:(id) {
	%orig;
	NSLog(@"-(void) setActiveViewMonitorRefreshIntervals:(id)");
}

-(void) setActiveSDKCoreWebView:(id) {
	%orig;
	NSLog(@"-(void) setActiveSDKCoreWebView:(id)");
}

-(void) didFinishLoadingSDKCoreInSDKCoreWebView:(id) {
	%orig;
	NSLog(@"-(void) didFinishLoadingSDKCoreInSDKCoreWebView:(id)");
}

-(id) nextRequestID {
	%orig;
	NSLog(@"-(id) nextRequestID");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADRewardBasedVideoAd

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) loadAd:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id)");
}

-(void) setRequestInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setRequestInProgress:(bool)");
}

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(id) adStatistics {
	%orig;
	NSLog(@"-(id) adStatistics");
}

-(void) adFetcher:(id) didFetchAd:(id) {
	%orig;
	NSLog(@"-(void) adFetcher:(id) didFetchAd:(id)");
}

-(void) adFetcher:(id) didFailToFetchAd:(id) withError:(id) responseCode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) adFetcher:(id) didFailToFetchAd:(id) withError:(id) responseCode:(unsigned long long)");
}

-(void) interstitialDidStartPlayingRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidStartPlayingRewardBasedVideoAd:(id)");
}

-(void) interstitial:(id) didRewardUserWithReward:(id) {
	%orig;
	NSLog(@"-(void) interstitial:(id) didRewardUserWithReward:(id)");
}

-(void) interstitialDidReceiveAdClick:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidReceiveAdClick:(id)");
}

-(void) interstitialDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidReceiveAd:(id)");
}

-(void) interstitial:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) interstitial:(id) didFailToReceiveAdWithError:(id)");
}

-(void) interstitialWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillPresentScreen:(id)");
}

-(void) interstitialWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillDismissScreen:(id)");
}

-(void) interstitialDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidDismissScreen:(id)");
}

-(void) interstitialWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillLeaveApplication:(id)");
}

-(id) adNetworkClassName {
	%orig;
	NSLog(@"-(id) adNetworkClassName");
}

-(void) presentFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentFromRootViewController:(id)");
}

-(void) setAdNetworkClassName:(id) {
	%orig;
	NSLog(@"-(void) setAdNetworkClassName:(id)");
}

-(long long) requestedAdType {
	%orig;
	NSLog(@"-(long long) requestedAdType");
}

-(id) adLoadActionTimeRecorder {
	%orig;
	NSLog(@"-(id) adLoadActionTimeRecorder");
}

-(void) loadAdURLWithParameters:(id) {
	%orig;
	NSLog(@"-(void) loadAdURLWithParameters:(id)");
}

-(void) loadAd:(id) headers:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id) headers:(id)");
}

-(void) invalidJavaScriptRequest {
	%orig;
	NSLog(@"-(void) invalidJavaScriptRequest");
}

-(void) failedJavaScriptFile {
	%orig;
	NSLog(@"-(void) failedJavaScriptFile");
}

-(void) connector:(id) didFailToSetUpRewardBasedVideoAdWithError:(id) {
	%orig;
	NSLog(@"-(void) connector:(id) didFailToSetUpRewardBasedVideoAdWithError:(id)");
}

-(id) mediationConfig {
	%orig;
	NSLog(@"-(id) mediationConfig");
}

-(void) connectorDidSetUpRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) connectorDidSetUpRewardBasedVideoAd:(id)");
}

-(void) connectorDidReceiveRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) connectorDidReceiveRewardBasedVideoAd:(id)");
}

-(void) connector:(id) didFailToReceiveRewardBasedVideoAdWithError:(id) {
	%orig;
	NSLog(@"-(void) connector:(id) didFailToReceiveRewardBasedVideoAdWithError:(id)");
}

-(void) connectorDidReceiveClick:(id) {
	%orig;
	NSLog(@"-(void) connectorDidReceiveClick:(id)");
}

-(void) connector:(id) didRewardUserWithReward:(id) {
	%orig;
	NSLog(@"-(void) connector:(id) didRewardUserWithReward:(id)");
}

-(void) connectorDidOpenRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) connectorDidOpenRewardBasedVideoAd:(id)");
}

-(void) connectorDidStartPlayingRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) connectorDidStartPlayingRewardBasedVideoAd:(id)");
}

-(void) connectorDidCloseRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) connectorDidCloseRewardBasedVideoAd:(id)");
}

-(void) connectorWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) connectorWillLeaveApplication:(id)");
}

-(void) setMediationConfig:(id) {
	%orig;
	NSLog(@"-(void) setMediationConfig:(id)");
}

-(id) decodedJSONResponseFromAd:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) decodedJSONResponseFromAd:(id) error:(id*)");
}

-(void) setUpAdaptersForAdNetworkConfigs {
	%orig;
	NSLog(@"-(void) setUpAdaptersForAdNetworkConfigs");
}

-(void) buildPendingAdRequestConnectorsList {
	%orig;
	NSLog(@"-(void) buildPendingAdRequestConnectorsList");
}

-(void) makeNextAdRequest {
	%orig;
	NSLog(@"-(void) makeNextAdRequest");
}

-(void) pingNoFillURLs {
	%orig;
	NSLog(@"-(void) pingNoFillURLs");
}

-(void) mediation_connectorWillStartRequestingAd {
	%orig;
	NSLog(@"-(void) mediation_connectorWillStartRequestingAd");
}

-(void) requestAdFromConnector:(id) {
	%orig;
	NSLog(@"-(void) requestAdFromConnector:(id)");
}

-(void) mediation_adapterDidFailToSetUpWithNetworkConfig:(id) {
	%orig;
	NSLog(@"-(void) mediation_adapterDidFailToSetUpWithNetworkConfig:(id)");
}

-(void) removeStaleConnectors {
	%orig;
	NSLog(@"-(void) removeStaleConnectors");
}

-(void) mediation_connectorDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) mediation_connectorDidReceiveAd:(id)");
}

-(void) mediation_connectorDidFailToReceiveAd:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) mediation_connectorDidFailToReceiveAd:(id) withError:(id)");
}

-(void) setUpAdaptersForAdNetworkConfigsFromAppConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setUpAdaptersForAdNetworkConfigsFromAppConfiguration:(id)");
}

-(void) setUpAdaptersFromApplicationConfiguration {
	%orig;
	NSLog(@"-(void) setUpAdaptersFromApplicationConfiguration");
}

-(void) loadInterstitialWithAdRequest:(id) {
	%orig;
	NSLog(@"-(void) loadInterstitialWithAdRequest:(id)");
}

-(void) startObservingApplicationConfiguration {
	%orig;
	NSLog(@"-(void) startObservingApplicationConfiguration");
}

-(void) stopObservingApplicationConfiguration {
	%orig;
	NSLog(@"-(void) stopObservingApplicationConfiguration");
}

-(void) fetchAdForRequest:(id) withAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) fetchAdForRequest:(id) withAdUnitID:(id)");
}

-(void) presentMediatedRewardBasedVideoAdFromViewController:(id) {
	%orig;
	NSLog(@"-(void) presentMediatedRewardBasedVideoAdFromViewController:(id)");
}

-(void) loadInterstitialWithAd:(id) {
	%orig;
	NSLog(@"-(void) loadInterstitialWithAd:(id)");
}

-(void) processMediationAd:(id) {
	%orig;
	NSLog(@"-(void) processMediationAd:(id)");
}

-(void) failedToLoadAdWithError:(id) {
	%orig;
	NSLog(@"-(void) failedToLoadAdWithError:(id)");
}

-(void) loadRequest:(id) withAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id) withAdUnitID:(id)");
}

-(void) adLoadedSuccessfully {
	%orig;
	NSLog(@"-(void) adLoadedSuccessfully");
}

-(id) adFetcher {
	%orig;
	NSLog(@"-(id) adFetcher");
}

-(void) setAdFetcher:(id) {
	%orig;
	NSLog(@"-(void) setAdFetcher:(id)");
}

-(id) pendingAdRequestConnectors {
	%orig;
	NSLog(@"-(id) pendingAdRequestConnectors");
}

-(void) setPendingAdRequestConnectors:(id) {
	%orig;
	NSLog(@"-(void) setPendingAdRequestConnectors:(id)");
}

-(id) allocationIDs {
	%orig;
	NSLog(@"-(id) allocationIDs");
}

-(void) setAllocationIDs:(id) {
	%orig;
	NSLog(@"-(void) setAllocationIDs:(id)");
}

-(id) requestingConnector {
	%orig;
	NSLog(@"-(id) requestingConnector");
}

-(void) setRequestingConnector:(id) {
	%orig;
	NSLog(@"-(void) setRequestingConnector:(id)");
}

-(id) receivedConnector {
	%orig;
	NSLog(@"-(id) receivedConnector");
}

-(void) setReceivedConnector:(id) {
	%orig;
	NSLog(@"-(void) setReceivedConnector:(id)");
}

-(id) pendingSetUpConnectorsTimestamp {
	%orig;
	NSLog(@"-(id) pendingSetUpConnectorsTimestamp");
}

-(void) setPendingSetUpConnectorsTimestamp:(id) {
	%orig;
	NSLog(@"-(void) setPendingSetUpConnectorsTimestamp:(id)");
}

-(id) connectors {
	%orig;
	NSLog(@"-(id) connectors");
}

-(void) setConnectors:(id) {
	%orig;
	NSLog(@"-(void) setConnectors:(id)");
}

-(bool) adUnitExposureBegan {
	%orig;
	NSLog(@"-(bool) adUnitExposureBegan");
}

-(void) setAdUnitExposureBegan:(bool) {
	%orig;
	NSLog(@"-(void) setAdUnitExposureBegan:(bool)");
}

-(void) resetFillStatus {
	%orig;
	NSLog(@"-(void) resetFillStatus");
}

-(void) setAd:(id) {
	%orig;
	NSLog(@"-(void) setAd:(id)");
}

-(void) setRequest:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id)");
}

-(bool) requestInProgress {
	%orig;
	NSLog(@"-(bool) requestInProgress");
}

-(id) ad {
	%orig;
	NSLog(@"-(id) ad");
}

-(id) userIdentifier {
	%orig;
	NSLog(@"-(id) userIdentifier");
}

-(void) setUserIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setUserIdentifier:(id)");
}

-(bool) isReady {
	%orig;
	NSLog(@"-(bool) isReady");
}

-(void) setRequestID:(id) {
	%orig;
	NSLog(@"-(void) setRequestID:(id)");
}

-(id) requestID {
	%orig;
	NSLog(@"-(id) requestID");
}

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

%end

%hook GADAdReward

-(id) initWithRewardDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithRewardDictionary:(id)");
}

-(id) initWithRewardType:(id) rewardAmount:(id) {
	%orig;
	NSLog(@"-(id) initWithRewardType:(id) rewardAmount:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(id) amount {
	%orig;
	NSLog(@"-(id) amount");
}

%end

%hook GADCorrelator

-(unsigned int) correlationID {
	%orig;
	NSLog(@"-(unsigned int) correlationID");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

%end

%hook GADRequest

+(id) requestWithMediationAdRequest:(id) {
	%orig;
	NSLog(@"+(id) requestWithMediationAdRequest:(id)");
}

+(long long) requestTypeFromString:(id) {
	%orig;
	NSLog(@"+(long long) requestTypeFromString:(id)");
}

+(id) extendedSDKVersionNumber {
	%orig;
	NSLog(@"+(id) extendedSDKVersionNumber");
}

+(id) sdkVersion {
	%orig;
	NSLog(@"+(id) sdkVersion");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) request {
	%orig;
	NSLog(@"+(id) request");
}

-(void) registerAdNetworkExtras:(id) {
	%orig;
	NSLog(@"-(void) registerAdNetworkExtras:(id)");
}

-(id) testDevices {
	%orig;
	NSLog(@"-(id) testDevices");
}

-(void) configureNetworkExtrasWithMediationAdRequest:(id) {
	%orig;
	NSLog(@"-(void) configureNetworkExtrasWithMediationAdRequest:(id)");
}

-(void) addAdapterListWithMediationAdRequest:(id) {
	%orig;
	NSLog(@"-(void) addAdapterListWithMediationAdRequest:(id)");
}

-(id) threadSafeParameters {
	%orig;
	NSLog(@"-(id) threadSafeParameters");
}

-(bool) cacheable {
	%orig;
	NSLog(@"-(bool) cacheable");
}

-(id) requestAgent {
	%orig;
	NSLog(@"-(id) requestAgent");
}

-(bool) isATestDevice {
	%orig;
	NSLog(@"-(bool) isATestDevice");
}

-(id) adNetworkExtrasFor:(Class) {
	%orig;
	NSLog(@"-(id) adNetworkExtrasFor:(Class)");
}

-(id) childDirectedTreatment {
	%orig;
	NSLog(@"-(id) childDirectedTreatment");
}

-(id) networkExtrasAdditionalParameters {
	%orig;
	NSLog(@"-(id) networkExtrasAdditionalParameters");
}

-(id) formatParameters {
	%orig;
	NSLog(@"-(id) formatParameters");
}

-(id) privateMediationExtras {
	%orig;
	NSLog(@"-(id) privateMediationExtras");
}

-(void) setTestDevices:(id) {
	%orig;
	NSLog(@"-(void) setTestDevices:(id)");
}

-(void) setFormatParameters:(id) {
	%orig;
	NSLog(@"-(void) setFormatParameters:(id)");
}

-(void) setPrivateMediationExtras:(id) {
	%orig;
	NSLog(@"-(void) setPrivateMediationExtras:(id)");
}

-(void) setChildDirectedTreatment:(id) {
	%orig;
	NSLog(@"-(void) setChildDirectedTreatment:(id)");
}

-(void) setRequestAgent:(id) {
	%orig;
	NSLog(@"-(void) setRequestAgent:(id)");
}

-(void) setCustomTargeting:(id) {
	%orig;
	NSLog(@"-(void) setCustomTargeting:(id)");
}

-(void) setAdConfigurationParameters:(id) {
	%orig;
	NSLog(@"-(void) setAdConfigurationParameters:(id)");
}

-(void) setNativeExpressEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setNativeExpressEnabled:(bool)");
}

-(void) removeAdNetworkExtrasFor:(Class) {
	%orig;
	NSLog(@"-(void) removeAdNetworkExtrasFor:(Class)");
}

-(id) birthdayString {
	%orig;
	NSLog(@"-(id) birthdayString");
}

-(id) contentURLString {
	%orig;
	NSLog(@"-(id) contentURLString");
}

-(void) setLocationWithLatitude:(double) longitude:(double) accuracy:(double) {
	%orig;
	NSLog(@"-(void) setLocationWithLatitude:(double) longitude:(double) accuracy:(double)");
}

-(void) tagForChildDirectedTreatment:(bool) {
	%orig;
	NSLog(@"-(void) tagForChildDirectedTreatment:(bool)");
}

-(void) setBirthdayWithMonth:(long long) day:(long long) year:(long long) {
	%orig;
	NSLog(@"-(void) setBirthdayWithMonth:(long long) day:(long long) year:(long long)");
}

-(void) setLocationWithDescription:(id) {
	%orig;
	NSLog(@"-(void) setLocationWithDescription:(id)");
}

-(id) customTargeting {
	%orig;
	NSLog(@"-(id) customTargeting");
}

-(id) adConfigurationParameters {
	%orig;
	NSLog(@"-(id) adConfigurationParameters");
}

-(bool) isNativeExpressEnabled {
	%orig;
	NSLog(@"-(bool) isNativeExpressEnabled");
}

-(long long) responseType {
	%orig;
	NSLog(@"-(long long) responseType");
}

-(id) genderString {
	%orig;
	NSLog(@"-(id) genderString");
}

-(void) setKeywords:(id) {
	%orig;
	NSLog(@"-(void) setKeywords:(id)");
}

-(id) keywords {
	%orig;
	NSLog(@"-(id) keywords");
}

-(void) setBirthday:(id) {
	%orig;
	NSLog(@"-(void) setBirthday:(id)");
}

-(id) birthday {
	%orig;
	NSLog(@"-(id) birthday");
}

-(id) initWithParameters:(id) {
	%orig;
	NSLog(@"-(id) initWithParameters:(id)");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setGender:(long long) {
	%orig;
	NSLog(@"-(void) setGender:(long long)");
}

-(long long) gender {
	%orig;
	NSLog(@"-(long long) gender");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setResponseType:(long long) {
	%orig;
	NSLog(@"-(void) setResponseType:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) origin {
	%orig;
	NSLog(@"-(id) origin");
}

-(void) setOrigin:(id) {
	%orig;
	NSLog(@"-(void) setOrigin:(id)");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(id) location {
	%orig;
	NSLog(@"-(id) location");
}

-(void) setLocation:(id) {
	%orig;
	NSLog(@"-(void) setLocation:(id)");
}

%end

%hook GADSearchRequest

-(id) threadSafeParameters {
	%orig;
	NSLog(@"-(id) threadSafeParameters");
}

-(bool) cacheable {
	%orig;
	NSLog(@"-(bool) cacheable");
}

-(void) setGradientFrom:(id) {
	%orig;
	NSLog(@"-(void) setGradientFrom:(id)");
}

-(void) setGradientTo:(id) {
	%orig;
	NSLog(@"-(void) setGradientTo:(id)");
}

-(void) setAnchorTextColor:(id) {
	%orig;
	NSLog(@"-(void) setAnchorTextColor:(id)");
}

-(void) setHeaderTextSize:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setHeaderTextSize:(unsigned long long)");
}

-(void) setBorderType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBorderType:(unsigned long long)");
}

-(void) setBorderThickness:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBorderThickness:(unsigned long long)");
}

-(void) setCustomChannels:(id) {
	%orig;
	NSLog(@"-(void) setCustomChannels:(id)");
}

-(void) setCallButtonColor:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCallButtonColor:(unsigned long long)");
}

-(void) setBackgroundSolid:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundSolid:(id)");
}

-(void) setBackgroundGradientFrom:(id) toColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundGradientFrom:(id) toColor:(id)");
}

-(id) gradientFrom {
	%orig;
	NSLog(@"-(id) gradientFrom");
}

-(id) gradientTo {
	%orig;
	NSLog(@"-(id) gradientTo");
}

-(id) headerColor {
	%orig;
	NSLog(@"-(id) headerColor");
}

-(id) anchorTextColor {
	%orig;
	NSLog(@"-(id) anchorTextColor");
}

-(unsigned long long) headerTextSize {
	%orig;
	NSLog(@"-(unsigned long long) headerTextSize");
}

-(unsigned long long) borderType {
	%orig;
	NSLog(@"-(unsigned long long) borderType");
}

-(unsigned long long) borderThickness {
	%orig;
	NSLog(@"-(unsigned long long) borderThickness");
}

-(id) customChannels {
	%orig;
	NSLog(@"-(id) customChannels");
}

-(unsigned long long) callButtonColor {
	%orig;
	NSLog(@"-(unsigned long long) callButtonColor");
}

-(void) setHeaderColor:(id) {
	%orig;
	NSLog(@"-(void) setHeaderColor:(id)");
}

-(void) setQuery:(id) {
	%orig;
	NSLog(@"-(void) setQuery:(id)");
}

-(id) initWithParameters:(id) {
	%orig;
	NSLog(@"-(id) initWithParameters:(id)");
}

-(id) descriptionTextColor {
	%orig;
	NSLog(@"-(id) descriptionTextColor");
}

-(void) setDescriptionTextColor:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionTextColor:(id)");
}

-(id) fontFamily {
	%orig;
	NSLog(@"-(id) fontFamily");
}

-(void) setFontFamily:(id) {
	%orig;
	NSLog(@"-(void) setFontFamily:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) setBorderColor:(id) {
	%orig;
	NSLog(@"-(void) setBorderColor:(id)");
}

-(id) borderColor {
	%orig;
	NSLog(@"-(id) borderColor");
}

-(id) query {
	%orig;
	NSLog(@"-(id) query");
}

%end

%hook GADDynamicHeightSearchRequest

-(void) parameterHelperSetValue:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) parameterHelperSetValue:(id) forKey:(id)");
}

-(id) dynamicHeightAdURLFragmentsWithAdUnitID:(id) {
	%orig;
	NSLog(@"-(id) dynamicHeightAdURLFragmentsWithAdUnitID:(id)");
}

-(void) setAdPage:(long long) {
	%orig;
	NSLog(@"-(void) setAdPage:(long long)");
}

-(void) setAdTestEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAdTestEnabled:(bool)");
}

-(void) setHostLanguage:(id) {
	%orig;
	NSLog(@"-(void) setHostLanguage:(id)");
}

-(void) setLocationExtensionTextColor:(id) {
	%orig;
	NSLog(@"-(void) setLocationExtensionTextColor:(id)");
}

-(void) setLocationExtensionFontSize:(double) {
	%orig;
	NSLog(@"-(void) setLocationExtensionFontSize:(double)");
}

-(void) setClickToCallExtensionEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setClickToCallExtensionEnabled:(bool)");
}

-(void) setLocationExtensionEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setLocationExtensionEnabled:(bool)");
}

-(void) setPlusOnesExtensionEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setPlusOnesExtensionEnabled:(bool)");
}

-(void) setSellerRatingsExtensionEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setSellerRatingsExtensionEnabled:(bool)");
}

-(void) setSiteLinksExtensionEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setSiteLinksExtensionEnabled:(bool)");
}

-(void) setCSSWidth:(id) {
	%orig;
	NSLog(@"-(void) setCSSWidth:(id)");
}

-(void) setNumberOfAds:(long long) {
	%orig;
	NSLog(@"-(void) setNumberOfAds:(long long)");
}

-(void) setAttributionFontFamily:(id) {
	%orig;
	NSLog(@"-(void) setAttributionFontFamily:(id)");
}

-(void) setAnnotationFontSize:(double) {
	%orig;
	NSLog(@"-(void) setAnnotationFontSize:(double)");
}

-(void) setAttributionFontSize:(double) {
	%orig;
	NSLog(@"-(void) setAttributionFontSize:(double)");
}

-(void) setDescriptionFontSize:(double) {
	%orig;
	NSLog(@"-(void) setDescriptionFontSize:(double)");
}

-(void) setDomainLinkFontSize:(double) {
	%orig;
	NSLog(@"-(void) setDomainLinkFontSize:(double)");
}

-(void) setAdBorderColor:(id) {
	%orig;
	NSLog(@"-(void) setAdBorderColor:(id)");
}

-(void) setAdSeparatorColor:(id) {
	%orig;
	NSLog(@"-(void) setAdSeparatorColor:(id)");
}

-(void) setAnnotationTextColor:(id) {
	%orig;
	NSLog(@"-(void) setAnnotationTextColor:(id)");
}

-(void) setAttributionTextColor:(id) {
	%orig;
	NSLog(@"-(void) setAttributionTextColor:(id)");
}

-(void) setDomainLinkColor:(id) {
	%orig;
	NSLog(@"-(void) setDomainLinkColor:(id)");
}

-(void) setTitleLinkColor:(id) {
	%orig;
	NSLog(@"-(void) setTitleLinkColor:(id)");
}

-(void) setAdBorderCSSSelections:(id) {
	%orig;
	NSLog(@"-(void) setAdBorderCSSSelections:(id)");
}

-(void) setAdjustableLineHeight:(double) {
	%orig;
	NSLog(@"-(void) setAdjustableLineHeight:(double)");
}

-(void) setAttributionBottomSpacing:(double) {
	%orig;
	NSLog(@"-(void) setAttributionBottomSpacing:(double)");
}

-(void) setBorderCSSSelections:(id) {
	%orig;
	NSLog(@"-(void) setBorderCSSSelections:(id)");
}

-(void) setTitleUnderlineHidden:(bool) {
	%orig;
	NSLog(@"-(void) setTitleUnderlineHidden:(bool)");
}

-(void) setBoldTitleEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setBoldTitleEnabled:(bool)");
}

-(void) setVerticalSpacing:(double) {
	%orig;
	NSLog(@"-(void) setVerticalSpacing:(double)");
}

-(void) setDetailedAttributionExtensionEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setDetailedAttributionExtensionEnabled:(bool)");
}

-(void) setLongerHeadlinesExtensionEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setLongerHeadlinesExtensionEnabled:(bool)");
}

-(void) setAdvancedOptionValue:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setAdvancedOptionValue:(id) forKey:(id)");
}

-(id) CSADynamicHeightSearchRequestURLWithAdUnitID:(id) {
	%orig;
	NSLog(@"-(id) CSADynamicHeightSearchRequestURLWithAdUnitID:(id)");
}

-(long long) adPage {
	%orig;
	NSLog(@"-(long long) adPage");
}

-(bool) adTestEnabled {
	%orig;
	NSLog(@"-(bool) adTestEnabled");
}

-(id) hostLanguage {
	%orig;
	NSLog(@"-(id) hostLanguage");
}

-(id) locationExtensionTextColor {
	%orig;
	NSLog(@"-(id) locationExtensionTextColor");
}

-(double) locationExtensionFontSize {
	%orig;
	NSLog(@"-(double) locationExtensionFontSize");
}

-(bool) clickToCallExtensionEnabled {
	%orig;
	NSLog(@"-(bool) clickToCallExtensionEnabled");
}

-(bool) locationExtensionEnabled {
	%orig;
	NSLog(@"-(bool) locationExtensionEnabled");
}

-(bool) plusOnesExtensionEnabled {
	%orig;
	NSLog(@"-(bool) plusOnesExtensionEnabled");
}

-(bool) sellerRatingsExtensionEnabled {
	%orig;
	NSLog(@"-(bool) sellerRatingsExtensionEnabled");
}

-(bool) siteLinksExtensionEnabled {
	%orig;
	NSLog(@"-(bool) siteLinksExtensionEnabled");
}

-(id) CSSWidth {
	%orig;
	NSLog(@"-(id) CSSWidth");
}

-(long long) numberOfAds {
	%orig;
	NSLog(@"-(long long) numberOfAds");
}

-(id) attributionFontFamily {
	%orig;
	NSLog(@"-(id) attributionFontFamily");
}

-(double) annotationFontSize {
	%orig;
	NSLog(@"-(double) annotationFontSize");
}

-(double) attributionFontSize {
	%orig;
	NSLog(@"-(double) attributionFontSize");
}

-(double) descriptionFontSize {
	%orig;
	NSLog(@"-(double) descriptionFontSize");
}

-(double) domainLinkFontSize {
	%orig;
	NSLog(@"-(double) domainLinkFontSize");
}

-(id) adBorderColor {
	%orig;
	NSLog(@"-(id) adBorderColor");
}

-(id) adSeparatorColor {
	%orig;
	NSLog(@"-(id) adSeparatorColor");
}

-(id) annotationTextColor {
	%orig;
	NSLog(@"-(id) annotationTextColor");
}

-(id) attributionTextColor {
	%orig;
	NSLog(@"-(id) attributionTextColor");
}

-(id) domainLinkColor {
	%orig;
	NSLog(@"-(id) domainLinkColor");
}

-(id) titleLinkColor {
	%orig;
	NSLog(@"-(id) titleLinkColor");
}

-(id) adBorderCSSSelections {
	%orig;
	NSLog(@"-(id) adBorderCSSSelections");
}

-(double) adjustableLineHeight {
	%orig;
	NSLog(@"-(double) adjustableLineHeight");
}

-(double) attributionBottomSpacing {
	%orig;
	NSLog(@"-(double) attributionBottomSpacing");
}

-(id) borderCSSSelections {
	%orig;
	NSLog(@"-(id) borderCSSSelections");
}

-(bool) titleUnderlineHidden {
	%orig;
	NSLog(@"-(bool) titleUnderlineHidden");
}

-(bool) boldTitleEnabled {
	%orig;
	NSLog(@"-(bool) boldTitleEnabled");
}

-(double) verticalSpacing {
	%orig;
	NSLog(@"-(double) verticalSpacing");
}

-(bool) detailedAttributionExtensionEnabled {
	%orig;
	NSLog(@"-(bool) detailedAttributionExtensionEnabled");
}

-(bool) longerHeadlinesExtensionEnabled {
	%orig;
	NSLog(@"-(bool) longerHeadlinesExtensionEnabled");
}

-(void) setQuery:(id) {
	%orig;
	NSLog(@"-(void) setQuery:(id)");
}

-(double) titleFontSize {
	%orig;
	NSLog(@"-(double) titleFontSize");
}

-(id) fontFamily {
	%orig;
	NSLog(@"-(id) fontFamily");
}

-(void) setFontFamily:(id) {
	%orig;
	NSLog(@"-(void) setFontFamily:(id)");
}

-(void) setTitleFontSize:(double) {
	%orig;
	NSLog(@"-(void) setTitleFontSize:(double)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) setBorderColor:(id) {
	%orig;
	NSLog(@"-(void) setBorderColor:(id)");
}

-(void) setTextColor:(id) {
	%orig;
	NSLog(@"-(void) setTextColor:(id)");
}

-(id) textColor {
	%orig;
	NSLog(@"-(id) textColor");
}

-(id) borderColor {
	%orig;
	NSLog(@"-(id) borderColor");
}

-(void) setChannel:(id) {
	%orig;
	NSLog(@"-(void) setChannel:(id)");
}

-(id) channel {
	%orig;
	NSLog(@"-(id) channel");
}

-(id) query {
	%orig;
	NSLog(@"-(id) query");
}

%end

%hook DFPRequest

+(void) updateCorrelator {
	%orig;
	NSLog(@"+(void) updateCorrelator");
}

-(void) setPublisherProvidedID:(id) {
	%orig;
	NSLog(@"-(void) setPublisherProvidedID:(id)");
}

-(id) threadSafeParameters {
	%orig;
	NSLog(@"-(id) threadSafeParameters");
}

-(void) setCategoryExclusions:(id) {
	%orig;
	NSLog(@"-(void) setCategoryExclusions:(id)");
}

-(id) publisherProvidedID {
	%orig;
	NSLog(@"-(id) publisherProvidedID");
}

-(id) categoryExclusions {
	%orig;
	NSLog(@"-(id) categoryExclusions");
}

-(id) initWithParameters:(id) {
	%orig;
	NSLog(@"-(id) initWithParameters:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook GADInAppPurchaseTransactionReporter

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(bool) shouldBeEnabled {
	%orig;
	NSLog(@"-(bool) shouldBeEnabled");
}

-(void) enableReporting {
	%orig;
	NSLog(@"-(void) enableReporting");
}

-(void) disableReporting {
	%orig;
	NSLog(@"-(void) disableReporting");
}

-(void) reportTransactionsFromArray:(id) sharedParameters:(id) {
	%orig;
	NSLog(@"-(void) reportTransactionsFromArray:(id) sharedParameters:(id)");
}

-(void) reportTransactionsFromArray:(id) {
	%orig;
	NSLog(@"-(void) reportTransactionsFromArray:(id)");
}

-(bool) wasDisabled {
	%orig;
	NSLog(@"-(bool) wasDisabled");
}

-(void) paymentQueue:(id) updatedTransactions:(id) {
	%orig;
	NSLog(@"-(void) paymentQueue:(id) updatedTransactions:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

%end

%hook GADInAppPurchase

-(void) reportPurchaseStatus:(long long) {
	%orig;
	NSLog(@"-(void) reportPurchaseStatus:(long long)");
}

-(id) productID {
	%orig;
	NSLog(@"-(id) productID");
}

-(long long) quantity {
	%orig;
	NSLog(@"-(long long) quantity");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADDefaultInAppPurchase

+(void) enableDefaultPurchaseFlowWithDelegate:(id) {
	%orig;
	NSLog(@"+(void) enableDefaultPurchaseFlowWithDelegate:(id)");
}

+(void) disableDefaultPurchaseFlow {
	%orig;
	NSLog(@"+(void) disableDefaultPurchaseFlow");
}

-(void) finishTransaction {
	%orig;
	NSLog(@"-(void) finishTransaction");
}

-(id) productID {
	%orig;
	NSLog(@"-(id) productID");
}

-(id) paymentTransaction {
	%orig;
	NSLog(@"-(id) paymentTransaction");
}

-(long long) quantity {
	%orig;
	NSLog(@"-(long long) quantity");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADOpener

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(void) openInAppStoreWithProductID:(id) fallbackURL:(id) shouldWaitForFetch:(bool) {
	%orig;
	NSLog(@"-(void) openInAppStoreWithProductID:(id) fallbackURL:(id) shouldWaitForFetch:(bool)");
}

-(void) fetchInAppStoreForProductID:(id) {
	%orig;
	NSLog(@"-(void) fetchInAppStoreForProductID:(id)");
}

-(void) openBrowserToURL:(id) supportedOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(void) openBrowserToURL:(id) supportedOrientations:(unsigned long long)");
}

-(void) openSafariViewControllerToURL:(id) supportedOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(void) openSafariViewControllerToURL:(id) supportedOrientations:(unsigned long long)");
}

-(void) openWebApp:(id) supportedOrientations:(unsigned long long) usingCustomClose:(bool) {
	%orig;
	NSLog(@"-(void) openWebApp:(id) supportedOrientations:(unsigned long long) usingCustomClose:(bool)");
}

-(void) openWebAppWithHTML:(id) baseURL:(id) supportedOrientations:(unsigned long long) usingCustomClose:(bool) {
	%orig;
	NSLog(@"-(void) openWebAppWithHTML:(id) baseURL:(id) supportedOrientations:(unsigned long long) usingCustomClose:(bool)");
}

-(void) expandToWebAppWithSupportedOrientations:(unsigned long long) usingCustomClose:(bool) {
	%orig;
	NSLog(@"-(void) expandToWebAppWithSupportedOrientations:(unsigned long long) usingCustomClose:(bool)");
}

-(void) openApp:(id) {
	%orig;
	NSLog(@"-(void) openApp:(id)");
}

-(void) openAppLink:(id) withEventID:(id) {
	%orig;
	NSLog(@"-(void) openAppLink:(id) withEventID:(id)");
}

-(void) openWebAppWithResizeProperties:(id) {
	%orig;
	NSLog(@"-(void) openWebAppWithResizeProperties:(id)");
}

-(void) openPromptToStorePictureAtURL:(id) {
	%orig;
	NSLog(@"-(void) openPromptToStorePictureAtURL:(id)");
}

-(void) openCalendarWithDictionary:(id) {
	%orig;
	NSLog(@"-(void) openCalendarWithDictionary:(id)");
}

-(id) autoClickProtection {
	%orig;
	NSLog(@"-(id) autoClickProtection");
}

-(id) cachedStoreProductViewController {
	%orig;
	NSLog(@"-(id) cachedStoreProductViewController");
}

-(void) didClickURL:(id) {
	%orig;
	NSLog(@"-(void) didClickURL:(id)");
}

-(void) openWebViewBrowserToURL:(id) supportedOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(void) openWebViewBrowserToURL:(id) supportedOrientations:(unsigned long long)");
}

-(bool) shouldPerformOpenActionWithOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(bool) shouldPerformOpenActionWithOrientations:(unsigned long long)");
}

-(bool) canOpenContent:(id) {
	%orig;
	NSLog(@"-(bool) canOpenContent:(id)");
}

-(void) configureOverlay:(id) orientations:(unsigned long long) usingCustomClose:(bool) {
	%orig;
	NSLog(@"-(void) configureOverlay:(id) orientations:(unsigned long long) usingCustomClose:(bool)");
}

-(void) disableAutoCollapseForResize {
	%orig;
	NSLog(@"-(void) disableAutoCollapseForResize");
}

-(id) overlayWithOrientations:(unsigned long long) useCustomClose:(bool) {
	%orig;
	NSLog(@"-(id) overlayWithOrientations:(unsigned long long) useCustomClose:(bool)");
}

-(bool) shouldOpenURL:(id) {
	%orig;
	NSLog(@"-(bool) shouldOpenURL:(id)");
}

-(void) willLeaveApplication {
	%orig;
	NSLog(@"-(void) willLeaveApplication");
}

-(id) confirmationMessageForURL:(id) {
	%orig;
	NSLog(@"-(id) confirmationMessageForURL:(id)");
}

-(void) confirmClickToURL:(id) message:(id) {
	%orig;
	NSLog(@"-(void) confirmClickToURL:(id) message:(id)");
}

-(void) presentComposerController:(id) forURL:(id) {
	%orig;
	NSLog(@"-(void) presentComposerController:(id) forURL:(id)");
}

-(id) navigationRequest {
	%orig;
	NSLog(@"-(id) navigationRequest");
}

-(void) setCachedStoreProductViewController:(id) {
	%orig;
	NSLog(@"-(void) setCachedStoreProductViewController:(id)");
}

-(bool) shouldPerformOpenAction {
	%orig;
	NSLog(@"-(bool) shouldPerformOpenAction");
}

-(void) setNavigationRequest:(id) {
	%orig;
	NSLog(@"-(void) setNavigationRequest:(id)");
}

-(void) openEmailComposer:(id) {
	%orig;
	NSLog(@"-(void) openEmailComposer:(id)");
}

-(void) openSmsComposer:(id) {
	%orig;
	NSLog(@"-(void) openSmsComposer:(id)");
}

-(bool) didOpenAnotherApplication {
	%orig;
	NSLog(@"-(bool) didOpenAnotherApplication");
}

-(void) setDidOpenAnotherApplication:(bool) {
	%orig;
	NSLog(@"-(void) setDidOpenAnotherApplication:(bool)");
}

-(void) setAutoClickProtection:(id) {
	%orig;
	NSLog(@"-(void) setAutoClickProtection:(id)");
}

-(void) setReferringURL:(id) {
	%orig;
	NSLog(@"-(void) setReferringURL:(id)");
}

-(id) referringURL {
	%orig;
	NSLog(@"-(id) referringURL");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) alertView:(id) clickedButtonAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) alertView:(id) clickedButtonAtIndex:(long long)");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(id) topViewController {
	%orig;
	NSLog(@"-(id) topViewController");
}

-(void) mailComposeController:(id) didFinishWithResult:(long long) error:(id) {
	%orig;
	NSLog(@"-(void) mailComposeController:(id) didFinishWithResult:(long long) error:(id)");
}

-(void) messageComposeViewController:(id) didFinishWithResult:(long long) {
	%orig;
	NSLog(@"-(void) messageComposeViewController:(id) didFinishWithResult:(long long)");
}

%end

%hook GADMessageComposeDelegateProxy

+(id) associatedDelegateProxyForController:(id) {
	%orig;
	NSLog(@"+(id) associatedDelegateProxyForController:(id)");
}

-(void) stopProxying {
	%orig;
	NSLog(@"-(void) stopProxying");
}

-(id) messageComposeDelegate {
	%orig;
	NSLog(@"-(id) messageComposeDelegate");
}

-(id) initInternal {
	%orig;
	NSLog(@"-(id) initInternal");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setMessageComposeDelegate:(id) {
	%orig;
	NSLog(@"-(void) setMessageComposeDelegate:(id)");
}

-(void) setMessageComposeViewController:(id) {
	%orig;
	NSLog(@"-(void) setMessageComposeViewController:(id)");
}

-(id) messageComposeViewController {
	%orig;
	NSLog(@"-(id) messageComposeViewController");
}

-(void) messageComposeViewController:(id) didFinishWithResult:(long long) {
	%orig;
	NSLog(@"-(void) messageComposeViewController:(id) didFinishWithResult:(long long)");
}

%end

%hook GADMailComposeDelegateProxy

+(id) associatedDelegateProxyForController:(id) {
	%orig;
	NSLog(@"+(id) associatedDelegateProxyForController:(id)");
}

-(void) stopProxying {
	%orig;
	NSLog(@"-(void) stopProxying");
}

-(id) mailComposeDelegate {
	%orig;
	NSLog(@"-(id) mailComposeDelegate");
}

-(id) initInternal {
	%orig;
	NSLog(@"-(id) initInternal");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setMailComposeDelegate:(id) {
	%orig;
	NSLog(@"-(void) setMailComposeDelegate:(id)");
}

-(id) mailComposeViewController {
	%orig;
	NSLog(@"-(id) mailComposeViewController");
}

-(void) setMailComposeViewController:(id) {
	%orig;
	NSLog(@"-(void) setMailComposeViewController:(id)");
}

-(void) mailComposeController:(id) didFinishWithResult:(long long) error:(id) {
	%orig;
	NSLog(@"-(void) mailComposeController:(id) didFinishWithResult:(long long) error:(id)");
}

%end

%hook GADGLSphericalShader

-(void) handleUserTouchMovedByVector:(CGVector) {
	%orig;
	NSLog(@"-(void) handleUserTouchMovedByVector:(CGVector)");
}

-(bool) setUpOpenGL {
	%orig;
	NSLog(@"-(bool) setUpOpenGL");
}

-(void) stopMotionTracking {
	%orig;
	NSLog(@"-(void) stopMotionTracking");
}

-(void) destroyOpenGLProgram {
	%orig;
	NSLog(@"-(void) destroyOpenGLProgram");
}

-(void) updateApplicationOrientation {
	%orig;
	NSLog(@"-(void) updateApplicationOrientation");
}

-(__CVBuffer*) createTextureWithPixelBuffer:(__CVBuffer*) index:(int) format:(int) width:(int) height:(int) {
	%orig;
	NSLog(@"-(__CVBuffer*) createTextureWithPixelBuffer:(__CVBuffer*) index:(int) format:(int) width:(int) height:(int)");
}

-(_GLKMatrix4) deviceRotationMatrix {
	%orig;
	NSLog(@"-(_GLKMatrix4) deviceRotationMatrix");
}

-(long long) lastApplicationOrientation {
	%orig;
	NSLog(@"-(long long) lastApplicationOrientation");
}

-(void) setLastApplicationOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setLastApplicationOrientation:(long long)");
}

-(id) initWithTouchPitchMultiplier:(double) touchRollMultiplier:(double) {
	%orig;
	NSLog(@"-(id) initWithTouchPitchMultiplier:(double) touchRollMultiplier:(double)");
}

-(void) startMotionTracking {
	%orig;
	NSLog(@"-(void) startMotionTracking");
}

-(void) displayPixelBuffer:(__CVBuffer*) inViewPortRect:(CGRect) {
	%orig;
	NSLog(@"-(void) displayPixelBuffer:(__CVBuffer*) inViewPortRect:(CGRect)");
}

-(void) cleanupTextures {
	%orig;
	NSLog(@"-(void) cleanupTextures");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADSlot

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(id) viewControllerForPresentingModalView {
	%orig;
	NSLog(@"-(id) viewControllerForPresentingModalView");
}

-(void) pingClickURLs {
	%orig;
	NSLog(@"-(void) pingClickURLs");
}

-(void) pingImpressionURLs {
	%orig;
	NSLog(@"-(void) pingImpressionURLs");
}

-(double) reloadInterval {
	%orig;
	NSLog(@"-(double) reloadInterval");
}

-(void) setReloadInterval:(double) {
	%orig;
	NSLog(@"-(void) setReloadInterval:(double)");
}

-(bool) monitoredViewVisible {
	%orig;
	NSLog(@"-(bool) monitoredViewVisible");
}

-(id) requestParametersForRequest:(id) {
	%orig;
	NSLog(@"-(id) requestParametersForRequest:(id)");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(bool) isBeingMediated {
	%orig;
	NSLog(@"-(bool) isBeingMediated");
}

-(id) forcedAdOrientation {
	%orig;
	NSLog(@"-(id) forcedAdOrientation");
}

-(id) pendingAdStatistics {
	%orig;
	NSLog(@"-(id) pendingAdStatistics");
}

-(void) setAdLoadDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdLoadDelegate:(id)");
}

-(void) setSlotDelegate:(id) {
	%orig;
	NSLog(@"-(void) setSlotDelegate:(id)");
}

-(void) setReloadable:(bool) {
	%orig;
	NSLog(@"-(void) setReloadable:(bool)");
}

-(void) setAdEventDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdEventDelegate:(id)");
}

-(void) finishActiveViewReporting {
	%orig;
	NSLog(@"-(void) finishActiveViewReporting");
}

-(void) MRAIDAdDidLoad {
	%orig;
	NSLog(@"-(void) MRAIDAdDidLoad");
}

-(void) startActiveViewReporting {
	%orig;
	NSLog(@"-(void) startActiveViewReporting");
}

-(void) ownerViewDidMoveToWindow:(id) {
	%orig;
	NSLog(@"-(void) ownerViewDidMoveToWindow:(id)");
}

-(bool) monitoredViewIsSubviewOfDeviceScreen {
	%orig;
	NSLog(@"-(bool) monitoredViewIsSubviewOfDeviceScreen");
}

-(void) startActiveViewReportingIfEnabled {
	%orig;
	NSLog(@"-(void) startActiveViewReportingIfEnabled");
}

-(void) createActiveViewMonitor {
	%orig;
	NSLog(@"-(void) createActiveViewMonitor");
}

-(id) activeViewJSCommandWithParams:(id) {
	%orig;
	NSLog(@"-(id) activeViewJSCommandWithParams:(id)");
}

-(id) slotDelegate {
	%orig;
	NSLog(@"-(id) slotDelegate");
}

-(id) CSI {
	%orig;
	NSLog(@"-(id) CSI");
}

-(id) gestureClickURLWithURL:(id) {
	%orig;
	NSLog(@"-(id) gestureClickURLWithURL:(id)");
}

-(id) SDKCoreWebView {
	%orig;
	NSLog(@"-(id) SDKCoreWebView");
}

-(void) adFetcher:(id) didFetchAd:(id) {
	%orig;
	NSLog(@"-(void) adFetcher:(id) didFetchAd:(id)");
}

-(void) adFetcher:(id) didFailToFetchAd:(id) withError:(id) responseCode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) adFetcher:(id) didFailToFetchAd:(id) withError:(id) responseCode:(unsigned long long)");
}

-(void) setSDKCoreWebView:(id) {
	%orig;
	NSLog(@"-(void) setSDKCoreWebView:(id)");
}

-(id) correlator {
	%orig;
	NSLog(@"-(id) correlator");
}

-(void) setCorrelator:(id) {
	%orig;
	NSLog(@"-(void) setCorrelator:(id)");
}

-(void) willStartAdRendering {
	%orig;
	NSLog(@"-(void) willStartAdRendering");
}

-(void) cancelPendingAndFutureActions {
	%orig;
	NSLog(@"-(void) cancelPendingAndFutureActions");
}

-(void) setAdResponseDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdResponseDelegate:(id)");
}

-(id) adNetworkClassName {
	%orig;
	NSLog(@"-(id) adNetworkClassName");
}

-(bool) isMediating {
	%orig;
	NSLog(@"-(bool) isMediating");
}

-(void) presentMediatedInterstitialFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentMediatedInterstitialFromRootViewController:(id)");
}

-(void) didMakeAdImpression {
	%orig;
	NSLog(@"-(void) didMakeAdImpression");
}

-(long long) requestedAdType {
	%orig;
	NSLog(@"-(long long) requestedAdType");
}

-(id) adLoadActionTimeRecorder {
	%orig;
	NSLog(@"-(id) adLoadActionTimeRecorder");
}

-(void) loadAdURLWithParameters:(id) {
	%orig;
	NSLog(@"-(void) loadAdURLWithParameters:(id)");
}

-(void) loadAd:(id) headers:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id) headers:(id)");
}

-(void) invalidJavaScriptRequest {
	%orig;
	NSLog(@"-(void) invalidJavaScriptRequest");
}

-(void) failedJavaScriptFile {
	%orig;
	NSLog(@"-(void) failedJavaScriptFile");
}

-(void) setMediationConnector:(id) {
	%orig;
	NSLog(@"-(void) setMediationConnector:(id)");
}

-(void) setViewForAdUsingView:(id) {
	%orig;
	NSLog(@"-(void) setViewForAdUsingView:(id)");
}

-(void) didReceiveValidAd {
	%orig;
	NSLog(@"-(void) didReceiveValidAd");
}

-(void) adFinishedLoadingContent {
	%orig;
	NSLog(@"-(void) adFinishedLoadingContent");
}

-(id) adFormat {
	%orig;
	NSLog(@"-(id) adFormat");
}

-(bool) canEnableActiveViewMonitoring {
	%orig;
	NSLog(@"-(bool) canEnableActiveViewMonitoring");
}

-(void) unloadActiveViewMonitor {
	%orig;
	NSLog(@"-(void) unloadActiveViewMonitor");
}

-(void) activeViewMonitorWillUnload {
	%orig;
	NSLog(@"-(void) activeViewMonitorWillUnload");
}

-(void) updatePositionFromView:(id) {
	%orig;
	NSLog(@"-(void) updatePositionFromView:(id)");
}

-(bool) viewHasMadeImpression {
	%orig;
	NSLog(@"-(bool) viewHasMadeImpression");
}

-(void) adLoadingStarted {
	%orig;
	NSLog(@"-(void) adLoadingStarted");
}

-(void) adURLBuildRequestCompleted {
	%orig;
	NSLog(@"-(void) adURLBuildRequestCompleted");
}

-(void) startedProcessingAd:(id) {
	%orig;
	NSLog(@"-(void) startedProcessingAd:(id)");
}

-(void) processMediationAdResponse:(id) {
	%orig;
	NSLog(@"-(void) processMediationAdResponse:(id)");
}

-(void) postVolumeNotification {
	%orig;
	NSLog(@"-(void) postVolumeNotification");
}

-(void) didChangeDeviceOrientation {
	%orig;
	NSLog(@"-(void) didChangeDeviceOrientation");
}

-(void) beginListeningToDeviceOrientationChangeEvent {
	%orig;
	NSLog(@"-(void) beginListeningToDeviceOrientationChangeEvent");
}

-(void) endListeningToDeviceOrientationChangeEvent {
	%orig;
	NSLog(@"-(void) endListeningToDeviceOrientationChangeEvent");
}

-(void) addCreativeOrientationChangeObserver:(id) selector:(SEL) {
	%orig;
	NSLog(@"-(void) addCreativeOrientationChangeObserver:(id) selector:(SEL)");
}

-(void) notifyDeviceFeatures {
	%orig;
	NSLog(@"-(void) notifyDeviceFeatures");
}

-(void) SDKDidBecomeReady {
	%orig;
	NSLog(@"-(void) SDKDidBecomeReady");
}

-(id) creativePositionDictionaryForActiveViewBounds:(CGRect) {
	%orig;
	NSLog(@"-(id) creativePositionDictionaryForActiveViewBounds:(CGRect)");
}

-(void) willProcessMediationResponse {
	%orig;
	NSLog(@"-(void) willProcessMediationResponse");
}

-(id) mediationConnector {
	%orig;
	NSLog(@"-(id) mediationConnector");
}

-(void) didFailToRetrieveSDKCoreWithError:(id) {
	%orig;
	NSLog(@"-(void) didFailToRetrieveSDKCoreWithError:(id)");
}

-(void) didReceiveAdURL {
	%orig;
	NSLog(@"-(void) didReceiveAdURL");
}

-(bool) changeAdTypeTo:(id) {
	%orig;
	NSLog(@"-(bool) changeAdTypeTo:(id)");
}

-(bool) isMakingRequest {
	%orig;
	NSLog(@"-(bool) isMakingRequest");
}

-(void) cancelPendingActions {
	%orig;
	NSLog(@"-(void) cancelPendingActions");
}

-(void) loadNextRequestWithAutoRefresh:(bool) {
	%orig;
	NSLog(@"-(void) loadNextRequestWithAutoRefresh:(bool)");
}

-(void) renderPendingCustomRenderingAd {
	%orig;
	NSLog(@"-(void) renderPendingCustomRenderingAd");
}

-(void) scheduleAdReloadTimer {
	%orig;
	NSLog(@"-(void) scheduleAdReloadTimer");
}

-(void) deactivateReloadTimer {
	%orig;
	NSLog(@"-(void) deactivateReloadTimer");
}

-(void) reloadCurrentRequest {
	%orig;
	NSLog(@"-(void) reloadCurrentRequest");
}

-(void) adFailedToReceiveContentWithError:(id) {
	%orig;
	NSLog(@"-(void) adFailedToReceiveContentWithError:(id)");
}

-(id) adKeyDelegate {
	%orig;
	NSLog(@"-(id) adKeyDelegate");
}

-(bool) shouldMakeRequest:(id) {
	%orig;
	NSLog(@"-(bool) shouldMakeRequest:(id)");
}

-(void) willRequestAdURL {
	%orig;
	NSLog(@"-(void) willRequestAdURL");
}

-(void) setHasAutoRefreshed:(bool) {
	%orig;
	NSLog(@"-(void) setHasAutoRefreshed:(bool)");
}

-(void) logRequestTestAdInstructions {
	%orig;
	NSLog(@"-(void) logRequestTestAdInstructions");
}

-(void) adLoadingFromInlineAd:(id) {
	%orig;
	NSLog(@"-(void) adLoadingFromInlineAd:(id)");
}

-(void) adLoadingFromSecretAdURL:(id) {
	%orig;
	NSLog(@"-(void) adLoadingFromSecretAdURL:(id)");
}

-(void) adURLBuildRequestStarted {
	%orig;
	NSLog(@"-(void) adURLBuildRequestStarted");
}

-(void) MRAIDAdDidUnload {
	%orig;
	NSLog(@"-(void) MRAIDAdDidUnload");
}

-(void) resetRequestState {
	%orig;
	NSLog(@"-(void) resetRequestState");
}

-(void) setLoadingAd:(id) {
	%orig;
	NSLog(@"-(void) setLoadingAd:(id)");
}

-(void) willFetchAdContent {
	%orig;
	NSLog(@"-(void) willFetchAdContent");
}

-(void) loadAdNetworkJavaScriptRequest:(id) {
	%orig;
	NSLog(@"-(void) loadAdNetworkJavaScriptRequest:(id)");
}

-(void) setNewAdSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setNewAdSize:(CGSize)");
}

-(void) adFetchingStartedWithURL:(id) {
	%orig;
	NSLog(@"-(void) adFetchingStartedWithURL:(id)");
}

-(void) appWillBecomeInactive:(id) {
	%orig;
	NSLog(@"-(void) appWillBecomeInactive:(id)");
}

-(void) adWillPresentFullScreen:(id) {
	%orig;
	NSLog(@"-(void) adWillPresentFullScreen:(id)");
}

-(void) adDidRelinquishFullScreen:(id) {
	%orig;
	NSLog(@"-(void) adDidRelinquishFullScreen:(id)");
}

-(void) applicationVolumeDidChange:(id) {
	%orig;
	NSLog(@"-(void) applicationVolumeDidChange:(id)");
}

-(void) makeRootLoggingObject {
	%orig;
	NSLog(@"-(void) makeRootLoggingObject");
}

-(void) createdAdView:(id) {
	%orig;
	NSLog(@"-(void) createdAdView:(id)");
}

-(void) sendCSIAdLoadTimings {
	%orig;
	NSLog(@"-(void) sendCSIAdLoadTimings");
}

-(void) invalidateState {
	%orig;
	NSLog(@"-(void) invalidateState");
}

-(bool) isGoogleAdURL:(id) {
	%orig;
	NSLog(@"-(bool) isGoogleAdURL:(id)");
}

-(void) setViewHasMadeImpression:(bool) {
	%orig;
	NSLog(@"-(void) setViewHasMadeImpression:(bool)");
}

-(void) didFailToReceiveAdWithError:(id) shouldCancelPendingActions:(bool) {
	%orig;
	NSLog(@"-(void) didFailToReceiveAdWithError:(id) shouldCancelPendingActions:(bool)");
}

-(void) willLoadAdHTMLInWebView {
	%orig;
	NSLog(@"-(void) willLoadAdHTMLInWebView");
}

-(void) finishedLoadingAdResponse:(id) {
	%orig;
	NSLog(@"-(void) finishedLoadingAdResponse:(id)");
}

-(bool) validateAdResponseWithAdSize:(GADAdSize) andValidAdSizes:(id) {
	%orig;
	NSLog(@"-(bool) validateAdResponseWithAdSize:(GADAdSize) andValidAdSizes:(id)");
}

-(id) loadingAd {
	%orig;
	NSLog(@"-(id) loadingAd");
}

-(GADAdSize) adSizeForMultiSizeAd {
	%orig;
	NSLog(@"-(GADAdSize) adSizeForMultiSizeAd");
}

-(CGSize) newAdSize {
	%orig;
	NSLog(@"-(CGSize) newAdSize");
}

-(void) adFetchingSucceeded {
	%orig;
	NSLog(@"-(void) adFetchingSucceeded");
}

-(void) didFetchAdContent {
	%orig;
	NSLog(@"-(void) didFetchAdContent");
}

-(void) processAdResponse:(id) {
	%orig;
	NSLog(@"-(void) processAdResponse:(id)");
}

-(void) adFetchingFailedWithResponseCode:(long long) error:(id) {
	%orig;
	NSLog(@"-(void) adFetchingFailedWithResponseCode:(long long) error:(id)");
}

-(void) setAdType:(id) andReloadRequest:(bool) {
	%orig;
	NSLog(@"-(void) setAdType:(id) andReloadRequest:(bool)");
}

-(void) mediatedAdNetworkAutoRefreshed {
	%orig;
	NSLog(@"-(void) mediatedAdNetworkAutoRefreshed");
}

-(void) processStandardAdResponse:(id) {
	%orig;
	NSLog(@"-(void) processStandardAdResponse:(id)");
}

-(void) startImpressionMonitoring {
	%orig;
	NSLog(@"-(void) startImpressionMonitoring");
}

-(void) pingManualTrackingURLs {
	%orig;
	NSLog(@"-(void) pingManualTrackingURLs");
}

-(void) processCustomRenderingAdResponse:(id) {
	%orig;
	NSLog(@"-(void) processCustomRenderingAdResponse:(id)");
}

-(id) adLoadDelegate {
	%orig;
	NSLog(@"-(id) adLoadDelegate");
}

-(id) adEventDelegate {
	%orig;
	NSLog(@"-(id) adEventDelegate");
}

-(id) adResponseDelegate {
	%orig;
	NSLog(@"-(id) adResponseDelegate");
}

-(void) setAdKeyDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdKeyDelegate:(id)");
}

-(bool) hasAutoRefreshed {
	%orig;
	NSLog(@"-(bool) hasAutoRefreshed");
}

-(bool) reloadable {
	%orig;
	NSLog(@"-(bool) reloadable");
}

-(bool) manualImpressionsEnabled {
	%orig;
	NSLog(@"-(bool) manualImpressionsEnabled");
}

-(void) setManualImpressionsEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setManualImpressionsEnabled:(bool)");
}

-(id) timeLastLoaded {
	%orig;
	NSLog(@"-(id) timeLastLoaded");
}

-(void) setTimeLastLoaded:(id) {
	%orig;
	NSLog(@"-(void) setTimeLastLoaded:(id)");
}

-(id) slotStats {
	%orig;
	NSLog(@"-(id) slotStats");
}

-(void) setIntermission:(id) {
	%orig;
	NSLog(@"-(void) setIntermission:(id)");
}

-(id) applicationStatistics {
	%orig;
	NSLog(@"-(id) applicationStatistics");
}

-(void) setApplicationStatistics:(id) {
	%orig;
	NSLog(@"-(void) setApplicationStatistics:(id)");
}

-(void) setPendingAdStatistics:(id) {
	%orig;
	NSLog(@"-(void) setPendingAdStatistics:(id)");
}

-(id) reloadTimer {
	%orig;
	NSLog(@"-(id) reloadTimer");
}

-(void) setReloadTimer:(id) {
	%orig;
	NSLog(@"-(void) setReloadTimer:(id)");
}

-(id) activeViewMonitoredView {
	%orig;
	NSLog(@"-(id) activeViewMonitoredView");
}

-(void) setActiveViewMonitoredView:(id) {
	%orig;
	NSLog(@"-(void) setActiveViewMonitoredView:(id)");
}

-(void) adWillLeaveApplication {
	%orig;
	NSLog(@"-(void) adWillLeaveApplication");
}

-(void) willLeaveAppDueToClick {
	%orig;
	NSLog(@"-(void) willLeaveAppDueToClick");
}

-(id) adFetcher {
	%orig;
	NSLog(@"-(id) adFetcher");
}

-(void) setAdFetcher:(id) {
	%orig;
	NSLog(@"-(void) setAdFetcher:(id)");
}

-(void) activeViewMonitoringDidStop:(unsigned long long) {
	%orig;
	NSLog(@"-(void) activeViewMonitoringDidStop:(unsigned long long)");
}

-(void) activeViewVisibilityChanged:(bool) {
	%orig;
	NSLog(@"-(void) activeViewVisibilityChanged:(bool)");
}

-(void) resetLogger {
	%orig;
	NSLog(@"-(void) resetLogger");
}

-(bool) activeViewMonitoringStarted:(unsigned long long) {
	%orig;
	NSLog(@"-(bool) activeViewMonitoringStarted:(unsigned long long)");
}

-(void) adWasClicked {
	%orig;
	NSLog(@"-(void) adWasClicked");
}

-(void) didLoadAdHTMLInWebView {
	%orig;
	NSLog(@"-(void) didLoadAdHTMLInWebView");
}

-(void) updateContentSize:(CGSize) {
	%orig;
	NSLog(@"-(void) updateContentSize:(CGSize)");
}

-(void) adDidLoadVideoWithSize:(CGSize) {
	%orig;
	NSLog(@"-(void) adDidLoadVideoWithSize:(CGSize)");
}

-(void) adWillPresentScreen {
	%orig;
	NSLog(@"-(void) adWillPresentScreen");
}

-(void) adWillDismissScreen {
	%orig;
	NSLog(@"-(void) adWillDismissScreen");
}

-(void) adDidDismissScreen {
	%orig;
	NSLog(@"-(void) adDidDismissScreen");
}

-(id) intermission {
	%orig;
	NSLog(@"-(id) intermission");
}

-(void) activeViewMonitorDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) activeViewMonitorDidRefresh:(id)");
}

-(void) impressionMonitorDidMonitorImpression:(id) {
	%orig;
	NSLog(@"-(void) impressionMonitorDidMonitorImpression:(id)");
}

-(bool) isMRAIDEnabled {
	%orig;
	NSLog(@"-(bool) isMRAIDEnabled");
}

-(void) handleError:(id) action:(id) {
	%orig;
	NSLog(@"-(void) handleError:(id) action:(id)");
}

-(id) adViewDelegate {
	%orig;
	NSLog(@"-(id) adViewDelegate");
}

-(void) interstitialViewWillAppear {
	%orig;
	NSLog(@"-(void) interstitialViewWillAppear");
}

-(void) interstitialViewWillDisappear {
	%orig;
	NSLog(@"-(void) interstitialViewWillDisappear");
}

-(void) updateVisibility:(bool) {
	%orig;
	NSLog(@"-(void) updateVisibility:(bool)");
}

-(void) notifyOrientationToMRAIDCreative {
	%orig;
	NSLog(@"-(void) notifyOrientationToMRAIDCreative");
}

-(void) setAdViewDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdViewDelegate:(id)");
}

-(id) ad {
	%orig;
	NSLog(@"-(id) ad");
}

-(id) nextRequest {
	%orig;
	NSLog(@"-(id) nextRequest");
}

-(void) setNextRequest:(id) {
	%orig;
	NSLog(@"-(void) setNextRequest:(id)");
}

-(void) setRequestID:(id) {
	%orig;
	NSLog(@"-(void) setRequestID:(id)");
}

-(void) cancelLoad {
	%orig;
	NSLog(@"-(void) cancelLoad");
}

-(id) requestID {
	%orig;
	NSLog(@"-(id) requestID");
}

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(id) loadingRequest {
	%orig;
	NSLog(@"-(id) loadingRequest");
}

-(void) setLoadingRequest:(id) {
	%orig;
	NSLog(@"-(void) setLoadingRequest:(id)");
}

-(id) adType {
	%orig;
	NSLog(@"-(id) adType");
}

-(void) setAdType:(id) {
	%orig;
	NSLog(@"-(void) setAdType:(id)");
}

-(void) resetState {
	%orig;
	NSLog(@"-(void) resetState");
}

-(void) appDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) appDidBecomeActive:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(long long) state {
	%orig;
	NSLog(@"-(long long) state");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setState:(long long) {
	%orig;
	NSLog(@"-(void) setState:(long long)");
}

-(void) invalidate {
	%orig;
	NSLog(@"-(void) invalidate");
}

-(id) placement {
	%orig;
	NSLog(@"-(id) placement");
}

-(void) setPlacement:(id) {
	%orig;
	NSLog(@"-(void) setPlacement:(id)");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

%end

%hook GADExtras

-(id) additionalParameters {
	%orig;
	NSLog(@"-(id) additionalParameters");
}

-(void) setAdditionalParameters:(id) {
	%orig;
	NSLog(@"-(void) setAdditionalParameters:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook GADAdType

+(id) interstitialAdType {
	%orig;
	NSLog(@"+(id) interstitialAdType");
}

+(id) bannerAdTypeForSize:(GADAdSize) {
	%orig;
	NSLog(@"+(id) bannerAdTypeForSize:(GADAdSize)");
}

-(GADAdSize) adSize {
	%orig;
	NSLog(@"-(GADAdSize) adSize");
}

-(void) setAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) setAdSize:(GADAdSize)");
}

-(id) initWithAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(id) initWithAdSize:(GADAdSize)");
}

-(id) initForInterstitial {
	%orig;
	NSLog(@"-(id) initForInterstitial");
}

-(id) initForRewardBasedVideoAd {
	%orig;
	NSLog(@"-(id) initForRewardBasedVideoAd");
}

-(bool) isRewardBasedVideoAd {
	%orig;
	NSLog(@"-(bool) isRewardBasedVideoAd");
}

-(bool) isInterstitial {
	%orig;
	NSLog(@"-(bool) isInterstitial");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook GADAdFetcher

-(id) adConnection {
	%orig;
	NSLog(@"-(id) adConnection");
}

-(bool) fetchRequestURL:(id) delegate:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) fetchRequestURL:(id) delegate:(id) error:(id*)");
}

-(void) connection:(id) loadDidReceiveCachedResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) loadDidReceiveCachedResponse:(id)");
}

-(void) connection:(id) loadDidFinish:(id) baseURL:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) loadDidFinish:(id) baseURL:(id)");
}

-(void) connection:(id) loadDidFail:(id) httpStatusCode:(long long) {
	%orig;
	NSLog(@"-(void) connection:(id) loadDidFail:(id) httpStatusCode:(long long)");
}

-(id) connection:(id) shouldRedirectToURL:(id) {
	%orig;
	NSLog(@"-(id) connection:(id) shouldRedirectToURL:(id)");
}

-(void) connection:(id) willPerformRedirect:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) willPerformRedirect:(id)");
}

-(bool) connection:(id) loadShouldUseCacheForResponse:(id) {
	%orig;
	NSLog(@"-(bool) connection:(id) loadShouldUseCacheForResponse:(id)");
}

-(void) setAdConnectionHasCompleted:(bool) {
	%orig;
	NSLog(@"-(void) setAdConnectionHasCompleted:(bool)");
}

-(bool) fetchRequestURL:(id) delegate:(id) responseHeaders:(id) responseAd:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) fetchRequestURL:(id) delegate:(id) responseHeaders:(id) responseAd:(id) error:(id*)");
}

-(void) markFetchStart {
	%orig;
	NSLog(@"-(void) markFetchStart");
}

-(bool) startFetchWithRequestURL:(id) responseHeaders:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) startFetchWithRequestURL:(id) responseHeaders:(id) error:(id*)");
}

-(void) processHTTPHeaders:(id) {
	%orig;
	NSLog(@"-(void) processHTTPHeaders:(id)");
}

-(void) resourceFailedToLoadWithError:(id) responseCode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) resourceFailedToLoadWithError:(id) responseCode:(unsigned long long)");
}

-(void) completedURLConnection {
	%orig;
	NSLog(@"-(void) completedURLConnection");
}

-(void) markFetchComplete {
	%orig;
	NSLog(@"-(void) markFetchComplete");
}

-(unsigned long long) adResponseTypeFromHeaders:(id) requestError:(id*) {
	%orig;
	NSLog(@"-(unsigned long long) adResponseTypeFromHeaders:(id) requestError:(id*)");
}

-(id) recursiveLock {
	%orig;
	NSLog(@"-(id) recursiveLock");
}

-(void) setRecursiveLock:(id) {
	%orig;
	NSLog(@"-(void) setRecursiveLock:(id)");
}

-(void) setAdConnection:(id) {
	%orig;
	NSLog(@"-(void) setAdConnection:(id)");
}

-(bool) adConnectionHasCompleted {
	%orig;
	NSLog(@"-(bool) adConnectionHasCompleted");
}

-(bool) fetchRemainingContentForAd:(id) headers:(id) delegate:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) fetchRemainingContentForAd:(id) headers:(id) delegate:(id) error:(id*)");
}

-(void) setAd:(id) {
	%orig;
	NSLog(@"-(void) setAd:(id)");
}

-(void) setRequest:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id)");
}

-(id) ad {
	%orig;
	NSLog(@"-(id) ad");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(void) setTimer:(id) {
	%orig;
	NSLog(@"-(void) setTimer:(id)");
}

-(id) timer {
	%orig;
	NSLog(@"-(id) timer");
}

%end

%hook GADNotification

+(bool) isNotificationURL:(id) {
	%orig;
	NSLog(@"+(bool) isNotificationURL:(id)");
}

-(id) initWithNotificationURL:(id) {
	%orig;
	NSLog(@"-(id) initWithNotificationURL:(id)");
}

-(id) initWithName:(id) parameters:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) parameters:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

%end

%hook GADAudioSession

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) setMixable:(bool) {
	%orig;
	NSLog(@"-(void) setMixable:(bool)");
}

-(void) resumeBackgroundAppAudioIfInterrupted {
	%orig;
	NSLog(@"-(void) resumeBackgroundAppAudioIfInterrupted");
}

-(void) disable {
	%orig;
	NSLog(@"-(void) disable");
}

-(void) restoreState {
	%orig;
	NSLog(@"-(void) restoreState");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) enable {
	%orig;
	NSLog(@"-(void) enable");
}

%end

%hook GADThreadStop

-(void) stopCurrentRunLoop {
	%orig;
	NSLog(@"-(void) stopCurrentRunLoop");
}

%end

%hook GADAdViewResource

-(void) addRequestHeaders:(id) {
	%orig;
	NSLog(@"-(void) addRequestHeaders:(id)");
}

-(id) initWithRequest:(id) sequenceNumber:(long long) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) sequenceNumber:(long long)");
}

-(void) appendContent:(id) {
	%orig;
	NSLog(@"-(void) appendContent:(id)");
}

-(id) dictionaryRepresentationExcludingHeaders:(id) {
	%orig;
	NSLog(@"-(id) dictionaryRepresentationExcludingHeaders:(id)");
}

-(long long) sequenceNumber {
	%orig;
	NSLog(@"-(long long) sequenceNumber");
}

-(void) setResponse:(id) {
	%orig;
	NSLog(@"-(void) setResponse:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

-(id) parent {
	%orig;
	NSLog(@"-(id) parent");
}

-(void) addChild:(id) {
	%orig;
	NSLog(@"-(void) addChild:(id)");
}

-(id) children {
	%orig;
	NSLog(@"-(id) children");
}

-(id) content {
	%orig;
	NSLog(@"-(id) content");
}

%end

%hook GADAdViewResourceRequest

-(id) dictionaryRepresentationExcludingHeaders:(id) {
	%orig;
	NSLog(@"-(id) dictionaryRepresentationExcludingHeaders:(id)");
}

-(id) resourceRequestWithHeaders:(id) {
	%orig;
	NSLog(@"-(id) resourceRequestWithHeaders:(id)");
}

-(id) mainDocumentURL {
	%orig;
	NSLog(@"-(id) mainDocumentURL");
}

-(id) initWithResourceRequest:(id) {
	%orig;
	NSLog(@"-(id) initWithResourceRequest:(id)");
}

-(id) headers {
	%orig;
	NSLog(@"-(id) headers");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(id) body {
	%orig;
	NSLog(@"-(id) body");
}

-(id) initWithRequest:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id)");
}

-(id) method {
	%orig;
	NSLog(@"-(id) method");
}

%end

%hook GADBlockInvocation

-(void) invokeBlockWithObject:(id) {
	%orig;
	NSLog(@"-(void) invokeBlockWithObject:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithBlock:(id) {
	%orig;
	NSLog(@"-(id) initWithBlock:(id)");
}

%end

%hook GADMRAIDResizeProperties

+(bool) isContentFrameValid:(CGRect) forBounds:(CGRect) allowOffscreen:(bool) closeButtonPosition:(long long) {
	%orig;
	NSLog(@"+(bool) isContentFrameValid:(CGRect) forBounds:(CGRect) allowOffscreen:(bool) closeButtonPosition:(long long)");
}

+(unsigned long long) autoresizingMaskForClosePosition:(long long) {
	%orig;
	NSLog(@"+(unsigned long long) autoresizingMaskForClosePosition:(long long)");
}

+(CGRect) closeButtonRectForPosition:(long long) contentFrame:(CGRect) {
	%orig;
	NSLog(@"+(CGRect) closeButtonRectForPosition:(long long) contentFrame:(CGRect)");
}

-(void) setAllowOffscreen:(bool) {
	%orig;
	NSLog(@"-(void) setAllowOffscreen:(bool)");
}

-(bool) allowOffscreen {
	%orig;
	NSLog(@"-(bool) allowOffscreen");
}

-(void) setCustomClosePosition:(long long) {
	%orig;
	NSLog(@"-(void) setCustomClosePosition:(long long)");
}

-(long long) customClosePosition {
	%orig;
	NSLog(@"-(long long) customClosePosition");
}

-(CGSize) size {
	%orig;
	NSLog(@"-(CGSize) size");
}

-(void) setSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setSize:(CGSize)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(CGVector) offset {
	%orig;
	NSLog(@"-(CGVector) offset");
}

-(void) setOffset:(CGVector) {
	%orig;
	NSLog(@"-(void) setOffset:(CGVector)");
}

%end

%hook GADAdLoaderOptions

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook GADVideoOptions

-(bool) customControlsRequested {
	%orig;
	NSLog(@"-(bool) customControlsRequested");
}

-(bool) clickToExpandRequested {
	%orig;
	NSLog(@"-(bool) clickToExpandRequested");
}

-(bool) startMuted {
	%orig;
	NSLog(@"-(bool) startMuted");
}

-(void) setStartMuted:(bool) {
	%orig;
	NSLog(@"-(void) setStartMuted:(bool)");
}

-(void) setCustomControlsRequested:(bool) {
	%orig;
	NSLog(@"-(void) setCustomControlsRequested:(bool)");
}

-(void) setClickToExpandRequested:(bool) {
	%orig;
	NSLog(@"-(void) setClickToExpandRequested:(bool)");
}

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook GADNativeAdViewAdOptions

-(long long) preferredAdChoicesPosition {
	%orig;
	NSLog(@"-(long long) preferredAdChoicesPosition");
}

-(void) setPreferredAdChoicesPosition:(long long) {
	%orig;
	NSLog(@"-(void) setPreferredAdChoicesPosition:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook GADNativeAdImageAdLoaderOptions

-(void) setShouldRequestMultipleImages:(bool) {
	%orig;
	NSLog(@"-(void) setShouldRequestMultipleImages:(bool)");
}

-(bool) shouldRequestMultipleImages {
	%orig;
	NSLog(@"-(bool) shouldRequestMultipleImages");
}

-(bool) disableImageLoading {
	%orig;
	NSLog(@"-(bool) disableImageLoading");
}

-(void) setDisableImageLoading:(bool) {
	%orig;
	NSLog(@"-(void) setDisableImageLoading:(bool)");
}

-(long long) preferredImageOrientation {
	%orig;
	NSLog(@"-(long long) preferredImageOrientation");
}

-(void) setPreferredImageOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setPreferredImageOrientation:(long long)");
}

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook GADMultipleAdsAdLoaderOptions

-(void) setNumberOfAds:(long long) {
	%orig;
	NSLog(@"-(void) setNumberOfAds:(long long)");
}

-(long long) numberOfAds {
	%orig;
	NSLog(@"-(long long) numberOfAds");
}

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook GADCorrelatorAdLoaderOptions

-(id) correlator {
	%orig;
	NSLog(@"-(id) correlator");
}

-(void) setCorrelator:(id) {
	%orig;
	NSLog(@"-(void) setCorrelator:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook DFPBannerViewOptions

-(bool) enableManualImpressions {
	%orig;
	NSLog(@"-(bool) enableManualImpressions");
}

-(void) setEnableManualImpressions:(bool) {
	%orig;
	NSLog(@"-(void) setEnableManualImpressions:(bool)");
}

-(id) appEventDelegate {
	%orig;
	NSLog(@"-(id) appEventDelegate");
}

-(void) setAppEventDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAppEventDelegate:(id)");
}

-(id) adSizeDelegate {
	%orig;
	NSLog(@"-(id) adSizeDelegate");
}

-(void) setAdSizeDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdSizeDelegate:(id)");
}

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook GADProductsRequest

+(void) requestProductsWithProductIdentifiers:(id) queue:(id) completionHandler:(id) {
	%orig;
	NSLog(@"+(void) requestProductsWithProductIdentifiers:(id) queue:(id) completionHandler:(id)");
}

-(void) requestWithQueue:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) requestWithQueue:(id) completionHandler:(id)");
}

-(void) request:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) request:(id) didFailWithError:(id)");
}

-(id) initWithProductIdentifiers:(id) {
	%orig;
	NSLog(@"-(id) initWithProductIdentifiers:(id)");
}

-(void) productsRequest:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) productsRequest:(id) didReceiveResponse:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADInAppPurchaseProductCache

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) requestProductsWithProductIdentifiers:(id) queue:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) requestProductsWithProductIdentifiers:(id) queue:(id) completionHandler:(id)");
}

-(id) cachedProductForProductID:(id) {
	%orig;
	NSLog(@"-(id) cachedProductForProductID:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADLocationService

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) setPublisherAuthorized:(bool) {
	%orig;
	NSLog(@"-(void) setPublisherAuthorized:(bool)");
}

-(void) startUpdatingLocation {
	%orig;
	NSLog(@"-(void) startUpdatingLocation");
}

-(void) locationManager:(id) didUpdateLocations:(id) {
	%orig;
	NSLog(@"-(void) locationManager:(id) didUpdateLocations:(id)");
}

-(void) locationManager:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) locationManager:(id) didFailWithError:(id)");
}

-(void) locationManager:(id) didChangeAuthorizationStatus:(int) {
	%orig;
	NSLog(@"-(void) locationManager:(id) didChangeAuthorizationStatus:(int)");
}

-(void) setFeatureEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setFeatureEnabled:(bool)");
}

-(void) disable {
	%orig;
	NSLog(@"-(void) disable");
}

-(void) updateLocation {
	%orig;
	NSLog(@"-(void) updateLocation");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) location {
	%orig;
	NSLog(@"-(id) location");
}

%end

%hook GADLocation

-(bool) isPreciseLocation {
	%orig;
	NSLog(@"-(bool) isPreciseLocation");
}

-(id) initWithLatitude:(double) longitude:(double) accuracy:(double) {
	%orig;
	NSLog(@"-(id) initWithLatitude:(double) longitude:(double) accuracy:(double)");
}

-(id) initWithLocationDescription:(id) {
	%orig;
	NSLog(@"-(id) initWithLocationDescription:(id)");
}

-(double) latitude {
	%orig;
	NSLog(@"-(double) latitude");
}

-(double) longitude {
	%orig;
	NSLog(@"-(double) longitude");
}

-(double) accuracy {
	%orig;
	NSLog(@"-(double) accuracy");
}

-(id) locationDescription {
	%orig;
	NSLog(@"-(id) locationDescription");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) dictionaryRepresentation {
	%orig;
	NSLog(@"-(id) dictionaryRepresentation");
}

%end

%hook GADScheduler

-(void) executeBlocks {
	%orig;
	NSLog(@"-(void) executeBlocks");
}

-(void) unscheduleTaskWithID:(long long) {
	%orig;
	NSLog(@"-(void) unscheduleTaskWithID:(long long)");
}

-(long long) taskIDScheduledOnQueue:(id) block:(id) {
	%orig;
	NSLog(@"-(long long) taskIDScheduledOnQueue:(id) block:(id)");
}

-(id) initWithInterval:(double) {
	%orig;
	NSLog(@"-(id) initWithInterval:(double)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook GADSchedulerTask

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) block {
	%orig;
	NSLog(@"-(id) block");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

-(void) setBlock:(id) {
	%orig;
	NSLog(@"-(void) setBlock:(id)");
}

-(void) setQueue:(id) {
	%orig;
	NSLog(@"-(void) setQueue:(id)");
}

%end

%hook GADNetwork

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) enableRadioAccessTechnologyChecking {
	%orig;
	NSLog(@"-(void) enableRadioAccessTechnologyChecking");
}

-(void) setNetworkTypeFromFlags:(unsigned int) {
	%orig;
	NSLog(@"-(void) setNetworkTypeFromFlags:(unsigned int)");
}

-(void) setNetworkType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setNetworkType:(unsigned long long)");
}

-(id) userAgentString {
	%orig;
	NSLog(@"-(id) userAgentString");
}

-(void) setUserAgentString:(id) {
	%orig;
	NSLog(@"-(void) setUserAgentString:(id)");
}

-(id) requestDictionary {
	%orig;
	NSLog(@"-(id) requestDictionary");
}

-(void) setRadioAccessTechnology:(id) {
	%orig;
	NSLog(@"-(void) setRadioAccessTechnology:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADBlockTimerTarget

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) block {
	%orig;
	NSLog(@"-(id) block");
}

-(void) timerFired:(id) {
	%orig;
	NSLog(@"-(void) timerFired:(id)");
}

-(void) setBlock:(id) {
	%orig;
	NSLog(@"-(void) setBlock:(id)");
}

%end

%hook GADWebViewPinger

+(bool) isAvailable {
	%orig;
	NSLog(@"+(bool) isAvailable");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) pingURLString:(id) queue:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) pingURLString:(id) queue:(id) completionBlock:(id)");
}

-(void) sendNextPing {
	%orig;
	NSLog(@"-(void) sendNextPing");
}

-(void) loadFinishedWithSuccess:(bool) {
	%orig;
	NSLog(@"-(void) loadFinishedWithSuccess:(bool)");
}

-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id)");
}

-(void) webView:(id) decidePolicyForNavigationResponse:(id) decisionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) decidePolicyForNavigationResponse:(id) decisionHandler:(id)");
}

-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id)");
}

-(void) webView:(id) didFailNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailNavigation:(id) withError:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADURLPingData

-(id) initWithURLString:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(id) initWithURLString:(id) completionBlock:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) completionBlock {
	%orig;
	NSLog(@"-(id) completionBlock");
}

-(id) URLString {
	%orig;
	NSLog(@"-(id) URLString");
}

%end

%hook GADURLConnection

+(id) cacheKeyForURL:(id) {
	%orig;
	NSLog(@"+(id) cacheKeyForURL:(id)");
}

+(id) memoryCache {
	%orig;
	NSLog(@"+(id) memoryCache");
}

+(id) defaultCachePath {
	%orig;
	NSLog(@"+(id) defaultCachePath");
}

+(void) clearCache {
	%orig;
	NSLog(@"+(void) clearCache");
}

-(bool) isInProgress {
	%orig;
	NSLog(@"-(bool) isInProgress");
}

-(bool) allowCache {
	%orig;
	NSLog(@"-(bool) allowCache");
}

-(id) cachedResponseForURL:(id) {
	%orig;
	NSLog(@"-(id) cachedResponseForURL:(id)");
}

-(void) setIsInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setIsInProgress:(bool)");
}

-(void) setAllowCache:(bool) {
	%orig;
	NSLog(@"-(void) setAllowCache:(bool)");
}

-(bool) tryToStoreResponseAndData {
	%orig;
	NSLog(@"-(bool) tryToStoreResponseAndData");
}

-(bool) startWithRequestURL:(id) delegate:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) startWithRequestURL:(id) delegate:(id) error:(id*)");
}

-(id) receivedData {
	%orig;
	NSLog(@"-(id) receivedData");
}

-(void) setResponse:(id) {
	%orig;
	NSLog(@"-(void) setResponse:(id)");
}

-(void) setSourceURL:(id) {
	%orig;
	NSLog(@"-(void) setSourceURL:(id)");
}

-(id) sourceURL {
	%orig;
	NSLog(@"-(id) sourceURL");
}

-(void) setReceivedData:(id) {
	%orig;
	NSLog(@"-(void) setReceivedData:(id)");
}

-(id) destinationURL {
	%orig;
	NSLog(@"-(id) destinationURL");
}

-(void) setDestinationURL:(id) {
	%orig;
	NSLog(@"-(void) setDestinationURL:(id)");
}

-(id) connection:(id) willSendRequest:(id) redirectResponse:(id) {
	%orig;
	NSLog(@"-(id) connection:(id) willSendRequest:(id) redirectResponse:(id)");
}

-(id) connection:(id) willCacheResponse:(id) {
	%orig;
	NSLog(@"-(id) connection:(id) willCacheResponse:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

-(id) connection {
	%orig;
	NSLog(@"-(id) connection");
}

-(void) setConnection:(id) {
	%orig;
	NSLog(@"-(void) setConnection:(id)");
}

-(void) connection:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didFailWithError:(id)");
}

-(void) connection:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveData:(id)");
}

-(void) connectionDidFinishLoading:(id) {
	%orig;
	NSLog(@"-(void) connectionDidFinishLoading:(id)");
}

-(void) connection:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveResponse:(id)");
}

%end

%hook GADURLConnectionRedirect

-(id) initWithResponse:(id) request:(id) {
	%orig;
	NSLog(@"-(id) initWithResponse:(id) request:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

%end

%hook GADPinger

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) pingURLString:(id) queue:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) pingURLString:(id) queue:(id) completionBlock:(id)");
}

-(void) storeRetryURLString:(id) retryGroupKey:(id) {
	%orig;
	NSLog(@"-(void) storeRetryURLString:(id) retryGroupKey:(id)");
}

-(void) pingWithRetryGroupKey:(id) URL:(id) retryURLString:(id) {
	%orig;
	NSLog(@"-(void) pingWithRetryGroupKey:(id) URL:(id) retryURLString:(id)");
}

-(void) sendPing:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) sendPing:(id) completionBlock:(id)");
}

-(void) removeRetryURLString:(id) retryGroupKey:(id) {
	%orig;
	NSLog(@"-(void) removeRetryURLString:(id) retryGroupKey:(id)");
}

-(void) pingRetryURLs {
	%orig;
	NSLog(@"-(void) pingRetryURLs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook GADNetworkLogger

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) logEvent:(id) timestamp:(id) components:(id) userInfo:(id) {
	%orig;
	NSLog(@"-(void) logEvent:(id) timestamp:(id) components:(id) userInfo:(id)");
}

-(void) logRequest:(id) timestamp:(id) components:(id) requestOnly:(bool) {
	%orig;
	NSLog(@"-(void) logRequest:(id) timestamp:(id) components:(id) requestOnly:(bool)");
}

-(void) logResponseHeader:(id) timestamp:(id) components:(id) {
	%orig;
	NSLog(@"-(void) logResponseHeader:(id) timestamp:(id) components:(id)");
}

-(void) logResponseBody:(id) withContent:(bool) timestamp:(id) components:(id) {
	%orig;
	NSLog(@"-(void) logResponseBody:(id) withContent:(bool) timestamp:(id) components:(id)");
}

-(void) logNetworkError:(id) timestamp:(id) components:(id) {
	%orig;
	NSLog(@"-(void) logNetworkError:(id) timestamp:(id) components:(id)");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isEnabled {
	%orig;
	NSLog(@"-(bool) isEnabled");
}

%end

%hook GADMRAIDInterceptor

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) interstitialImplementationURLString {
	%orig;
	NSLog(@"-(id) interstitialImplementationURLString");
}

-(id) bannerImplementationURLString {
	%orig;
	NSLog(@"-(id) bannerImplementationURLString");
}

-(id) expandedBannerImplementationURLString {
	%orig;
	NSLog(@"-(id) expandedBannerImplementationURLString");
}

-(void) updateImplementationURLStrings {
	%orig;
	NSLog(@"-(void) updateImplementationURLStrings");
}

-(bool) URLisImplementationURL:(id) {
	%orig;
	NSLog(@"-(bool) URLisImplementationURL:(id)");
}

-(id) MRAIDURLStringForAdView:(id) {
	%orig;
	NSLog(@"-(id) MRAIDURLStringForAdView:(id)");
}

-(bool) canRedirect {
	%orig;
	NSLog(@"-(bool) canRedirect");
}

-(bool) shouldRedirectRequest:(id) {
	%orig;
	NSLog(@"-(bool) shouldRedirectRequest:(id)");
}

-(void) setBannerImplementationURLString:(id) {
	%orig;
	NSLog(@"-(void) setBannerImplementationURLString:(id)");
}

-(void) setExpandedBannerImplementationURLString:(id) {
	%orig;
	NSLog(@"-(void) setExpandedBannerImplementationURLString:(id)");
}

-(void) setInterstitialImplementationURLString:(id) {
	%orig;
	NSLog(@"-(void) setInterstitialImplementationURLString:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

%end

%hook GADClickTrackerCollection

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) trackURLs:(id) {
	%orig;
	NSLog(@"-(void) trackURLs:(id)");
}

-(void) trackURL:(id) {
	%orig;
	NSLog(@"-(void) trackURL:(id)");
}

-(void) trackMediationURLsFromTemplates:(id) defaultTemplate:(id) networkID:(id) allocationID:(id) qData:(id) appKey:(id) refresh:(bool) durations:(id) exitCodes:(id) fillStatus:(id) eventType:(id) {
	%orig;
	NSLog(@"-(void) trackMediationURLsFromTemplates:(id) defaultTemplate:(id) networkID:(id) allocationID:(id) qData:(id) appKey:(id) refresh:(bool) durations:(id) exitCodes:(id) fillStatus:(id) eventType:(id)");
}

-(void) trackerDidFinishTracking:(id) {
	%orig;
	NSLog(@"-(void) trackerDidFinishTracking:(id)");
}

-(id) trackers {
	%orig;
	NSLog(@"-(id) trackers");
}

-(void) cleanupTrackers {
	%orig;
	NSLog(@"-(void) cleanupTrackers");
}

-(void) setTrackers:(id) {
	%orig;
	NSLog(@"-(void) setTrackers:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADClickTracker

-(void) trackURL:(id) {
	%orig;
	NSLog(@"-(void) trackURL:(id)");
}

-(void) beginBackgroundTask {
	%orig;
	NSLog(@"-(void) beginBackgroundTask");
}

-(void) URLTrackingDidEnd:(id) success:(bool) {
	%orig;
	NSLog(@"-(void) URLTrackingDidEnd:(id) success:(bool)");
}

-(bool) hasTracked {
	%orig;
	NSLog(@"-(bool) hasTracked");
}

-(void) endBackgroundTask {
	%orig;
	NSLog(@"-(void) endBackgroundTask");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

%end

%hook GADCachedURLResponse

-(id) initWithResponse:(id) data:(id) expirationDate:(id) destinationURL:(id) {
	%orig;
	NSLog(@"-(id) initWithResponse:(id) data:(id) expirationDate:(id) destinationURL:(id)");
}

-(id) destinationURL {
	%orig;
	NSLog(@"-(id) destinationURL");
}

-(void) setDestinationURL:(id) {
	%orig;
	NSLog(@"-(void) setDestinationURL:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

-(id) expirationDate {
	%orig;
	NSLog(@"-(id) expirationDate");
}

-(void) setExpirationDate:(id) {
	%orig;
	NSLog(@"-(void) setExpirationDate:(id)");
}

%end

%hook GADAdViewResourceCollection

+(void) setGreedyCollectionEnabled:(bool) {
	%orig;
	NSLog(@"+(void) setGreedyCollectionEnabled:(bool)");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(id) initWithAdView:(id) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id)");
}

-(void) addURLRequest:(id) {
	%orig;
	NSLog(@"-(void) addURLRequest:(id)");
}

-(void) addURLResponse:(id) forRequest:(id) {
	%orig;
	NSLog(@"-(void) addURLResponse:(id) forRequest:(id)");
}

-(void) addResourceData:(id) forRequest:(id) {
	%orig;
	NSLog(@"-(void) addResourceData:(id) forRequest:(id)");
}

-(void) adViewDidFinishLayout {
	%orig;
	NSLog(@"-(void) adViewDidFinishLayout");
}

-(void) addClickthroughURL:(id) {
	%orig;
	NSLog(@"-(void) addClickthroughURL:(id)");
}

-(void) addAutoClickRequest:(id) {
	%orig;
	NSLog(@"-(void) addAutoClickRequest:(id)");
}

-(id) redirectSourceForRequest:(id) {
	%orig;
	NSLog(@"-(id) redirectSourceForRequest:(id)");
}

-(id) referringResourceForRequest:(id) {
	%orig;
	NSLog(@"-(id) referringResourceForRequest:(id)");
}

-(id) resourceForRequest:(id) {
	%orig;
	NSLog(@"-(id) resourceForRequest:(id)");
}

-(void) addParentForResource:(id) {
	%orig;
	NSLog(@"-(void) addParentForResource:(id)");
}

-(void) updateSafeBrowsingReporter {
	%orig;
	NSLog(@"-(void) updateSafeBrowsingReporter");
}

-(void) addResourceRequest:(id) {
	%orig;
	NSLog(@"-(void) addResourceRequest:(id)");
}

-(void) addRedirectDestinationForResource:(id) {
	%orig;
	NSLog(@"-(void) addRedirectDestinationForResource:(id)");
}

-(bool) isMalicious {
	%orig;
	NSLog(@"-(bool) isMalicious");
}

-(id) mainDocumentURL {
	%orig;
	NSLog(@"-(id) mainDocumentURL");
}

-(void) setMainDocumentURL:(id) {
	%orig;
	NSLog(@"-(void) setMainDocumentURL:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) dictionaryRepresentation {
	%orig;
	NSLog(@"-(id) dictionaryRepresentation");
}

%end

%hook GADAdURLStash

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) adViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidStartLoad:(id)");
}

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(void) removeAdView:(id) {
	%orig;
	NSLog(@"-(void) removeAdView:(id)");
}

-(id) adViewForMainDocumentURL:(id) {
	%orig;
	NSLog(@"-(id) adViewForMainDocumentURL:(id)");
}

-(id) collectionForAdView:(id) {
	%orig;
	NSLog(@"-(id) collectionForAdView:(id)");
}

-(id) adViewForURLRequest:(id) {
	%orig;
	NSLog(@"-(id) adViewForURLRequest:(id)");
}

-(void) removeInformationForAdViewKey:(id) canonicalMainDocumentURL:(id) {
	%orig;
	NSLog(@"-(void) removeInformationForAdViewKey:(id) canonicalMainDocumentURL:(id)");
}

-(void) adViewWillLoadRootContent:(id) {
	%orig;
	NSLog(@"-(void) adViewWillLoadRootContent:(id)");
}

-(void) adView:(id) willLoadURLRequest:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) willLoadURLRequest:(id)");
}

-(void) adView:(id) request:(id) willReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) request:(id) willReceiveResponse:(id)");
}

-(void) adView:(id) request:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) request:(id) didReceiveData:(id)");
}

-(void) adViewDidFinishLayout:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLayout:(id)");
}

-(void) adView:(id) didClickThroughToURL:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didClickThroughToURL:(id)");
}

-(void) adView:(id) didAttemptAutoClickRequest:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didAttemptAutoClickRequest:(id)");
}

-(bool) shouldInterceptRequest:(id) {
	%orig;
	NSLog(@"-(bool) shouldInterceptRequest:(id)");
}

-(bool) hasLoadingAd {
	%orig;
	NSLog(@"-(bool) hasLoadingAd");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMediationNativeAdVideoController

-(void) setInitialStateWithVideoOptions:(id) {
	%orig;
	NSLog(@"-(void) setInitialStateWithVideoOptions:(id)");
}

-(id) initWithMediatedNativeContentAd:(id) {
	%orig;
	NSLog(@"-(id) initWithMediatedNativeContentAd:(id)");
}

-(long long) videoPlaybackState {
	%orig;
	NSLog(@"-(long long) videoPlaybackState");
}

-(void) observeMediatedNativeAd:(id) {
	%orig;
	NSLog(@"-(void) observeMediatedNativeAd:(id)");
}

-(void) stopObservingMediatedNativeAd {
	%orig;
	NSLog(@"-(void) stopObservingMediatedNativeAd");
}

-(void) setVideoPlaybackState:(long long) {
	%orig;
	NSLog(@"-(void) setVideoPlaybackState:(long long)");
}

-(bool) customControlsEnabled {
	%orig;
	NSLog(@"-(bool) customControlsEnabled");
}

-(bool) clickToExpandEnabled {
	%orig;
	NSLog(@"-(bool) clickToExpandEnabled");
}

-(id) initWithMediatedNativeAppInstallAd:(id) {
	%orig;
	NSLog(@"-(id) initWithMediatedNativeAppInstallAd:(id)");
}

-(void) setHasVideoContent:(bool) {
	%orig;
	NSLog(@"-(void) setHasVideoContent:(bool)");
}

-(void) setMute:(bool) {
	%orig;
	NSLog(@"-(void) setMute:(bool)");
}

-(double) aspectRatio {
	%orig;
	NSLog(@"-(double) aspectRatio");
}

-(bool) hasVideoContent {
	%orig;
	NSLog(@"-(bool) hasVideoContent");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook GADMediationNativeAdMediaContent

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) loadVideoWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadVideoWithCompletionHandler:(id)");
}

-(id) initWithMediatedNativeContentAd:(id) {
	%orig;
	NSLog(@"-(id) initWithMediatedNativeContentAd:(id)");
}

-(id) initWithMediatedNativeAppInstallAd:(id) {
	%orig;
	NSLog(@"-(id) initWithMediatedNativeAppInstallAd:(id)");
}

-(id) mediaView {
	%orig;
	NSLog(@"-(id) mediaView");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMediatedNativeAdNotificationSource

+(void) mediatedNativeAdDidRecordClick:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdDidRecordClick:(id)");
}

+(void) mediatedNativeAdWillPresentScreen:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdWillPresentScreen:(id)");
}

+(void) mediatedNativeAdWillDismissScreen:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdWillDismissScreen:(id)");
}

+(void) mediatedNativeAdDidDismissScreen:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdDidDismissScreen:(id)");
}

+(void) mediatedNativeAdWillLeaveApplication:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdWillLeaveApplication:(id)");
}

+(void) mediatedNativeAdDidPlayVideo:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdDidPlayVideo:(id)");
}

+(void) mediatedNativeAdDidPauseVideo:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdDidPauseVideo:(id)");
}

+(void) mediatedNativeAdDidEndVideoPlayback:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdDidEndVideoPlayback:(id)");
}

+(void) mediatedNativeAdDidRecordImpression:(id) {
	%orig;
	NSLog(@"+(void) mediatedNativeAdDidRecordImpression:(id)");
}

%end

%hook GADMediatedAd

-(id) adNetworkClassName {
	%orig;
	NSLog(@"-(id) adNetworkClassName");
}

-(void) setAdNetworkClassName:(id) {
	%orig;
	NSLog(@"-(void) setAdNetworkClassName:(id)");
}

-(id) loadableAdForAdLoader:(id) {
	%orig;
	NSLog(@"-(id) loadableAdForAdLoader:(id)");
}

-(void) reportClick {
	%orig;
	NSLog(@"-(void) reportClick");
}

-(void) reportImpression {
	%orig;
	NSLog(@"-(void) reportImpression");
}

-(void) addClickHandler:(id) {
	%orig;
	NSLog(@"-(void) addClickHandler:(id)");
}

-(void) addImpressionHandler:(id) {
	%orig;
	NSLog(@"-(void) addImpressionHandler:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMediatedNativeAd

-(bool) allowPublisherRenderedAttribution {
	%orig;
	NSLog(@"-(bool) allowPublisherRenderedAttribution");
}

-(void) setAllowPublisherRenderedAttribution:(bool) {
	%orig;
	NSLog(@"-(void) setAllowPublisherRenderedAttribution:(bool)");
}

-(void) setAdapterHandlesUserClicks:(bool) {
	%orig;
	NSLog(@"-(void) setAdapterHandlesUserClicks:(bool)");
}

-(void) setAdapterHandlesUserImpressions:(bool) {
	%orig;
	NSLog(@"-(void) setAdapterHandlesUserImpressions:(bool)");
}

-(id) loadableAdForAdLoader:(id) {
	%orig;
	NSLog(@"-(id) loadableAdForAdLoader:(id)");
}

-(void) reportImpression {
	%orig;
	NSLog(@"-(void) reportImpression");
}

-(Class) nativeAdClass {
	%orig;
	NSLog(@"-(Class) nativeAdClass");
}

-(bool) adapterHandlesUserImpressions {
	%orig;
	NSLog(@"-(bool) adapterHandlesUserImpressions");
}

-(bool) adapterHandlesUserClicks {
	%orig;
	NSLog(@"-(bool) adapterHandlesUserClicks");
}

-(void) reportMediatedAdShouldUntrackView:(id) {
	%orig;
	NSLog(@"-(void) reportMediatedAdShouldUntrackView:(id)");
}

-(void) reportAdNetworkClick {
	%orig;
	NSLog(@"-(void) reportAdNetworkClick");
}

-(void) reportAdNetworkImpression {
	%orig;
	NSLog(@"-(void) reportAdNetworkImpression");
}

-(void) reportClickOnAssetWithWithName:(id) view:(id) viewController:(id) {
	%orig;
	NSLog(@"-(void) reportClickOnAssetWithWithName:(id) view:(id) viewController:(id)");
}

-(void) reportMediatedAdRenderedInView:(id) viewController:(id) {
	%orig;
	NSLog(@"-(void) reportMediatedAdRenderedInView:(id) viewController:(id)");
}

-(void) setAd:(id) {
	%orig;
	NSLog(@"-(void) setAd:(id)");
}

-(id) ad {
	%orig;
	NSLog(@"-(id) ad");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMediatedBannerAd

-(id) loadableAdForAdLoader:(id) {
	%orig;
	NSLog(@"-(id) loadableAdForAdLoader:(id)");
}

-(id) initWithView:(id) bannerConnector:(id) {
	%orig;
	NSLog(@"-(id) initWithView:(id) bannerConnector:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

%end

%hook GADMRewardBasedVideoAdNetworkConnector

-(id) extras {
	%orig;
	NSLog(@"-(id) extras");
}

-(void) pingClickURLs {
	%orig;
	NSLog(@"-(void) pingClickURLs");
}

-(void) pingImpressionURLs {
	%orig;
	NSLog(@"-(void) pingImpressionURLs");
}

-(void) setUpWithAdNetworkConfig {
	%orig;
	NSLog(@"-(void) setUpWithAdNetworkConfig");
}

-(void) setUpWithMultipleAdNetworkConfigs {
	%orig;
	NSLog(@"-(void) setUpWithMultipleAdNetworkConfigs");
}

-(void) requestRewardBasedVideoAd {
	%orig;
	NSLog(@"-(void) requestRewardBasedVideoAd");
}

-(id) adNetworkConfig {
	%orig;
	NSLog(@"-(id) adNetworkConfig");
}

-(id) mediationConfig {
	%orig;
	NSLog(@"-(id) mediationConfig");
}

-(void) pingURLs:(id) defaultTemplate:(id) fillStatus:(id) eventType:(id) {
	%orig;
	NSLog(@"-(void) pingURLs:(id) defaultTemplate:(id) fillStatus:(id) eventType:(id)");
}

-(void) pingVideoStartPlayingURLs {
	%orig;
	NSLog(@"-(void) pingVideoStartPlayingURLs");
}

-(id) childDirectedTreatment {
	%orig;
	NSLog(@"-(id) childDirectedTreatment");
}

-(bool) userHasLocation {
	%orig;
	NSLog(@"-(bool) userHasLocation");
}

-(void) adapterDidSetUpRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) adapterDidSetUpRewardBasedVideoAd:(id)");
}

-(void) adapter:(id) didFailToSetUpRewardBasedVideoAdWithError:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailToSetUpRewardBasedVideoAdWithError:(id)");
}

-(void) adapterDidGetAdClick:(id) {
	%orig;
	NSLog(@"-(void) adapterDidGetAdClick:(id)");
}

-(void) adapterDidReceiveRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) adapterDidReceiveRewardBasedVideoAd:(id)");
}

-(void) adapterDidOpenRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) adapterDidOpenRewardBasedVideoAd:(id)");
}

-(void) adapterDidStartPlayingRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) adapterDidStartPlayingRewardBasedVideoAd:(id)");
}

-(void) adapterDidCloseRewardBasedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) adapterDidCloseRewardBasedVideoAd:(id)");
}

-(void) adapter:(id) didRewardUserWithReward:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didRewardUserWithReward:(id)");
}

-(void) adapterWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) adapterWillLeaveApplication:(id)");
}

-(void) adapter:(id) didFailToLoadRewardBasedVideoAdwithError:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailToLoadRewardBasedVideoAdwithError:(id)");
}

-(id) networkExtras {
	%orig;
	NSLog(@"-(id) networkExtras");
}

-(long long) userGender {
	%orig;
	NSLog(@"-(long long) userGender");
}

-(id) userBirthday {
	%orig;
	NSLog(@"-(id) userBirthday");
}

-(double) userLatitude {
	%orig;
	NSLog(@"-(double) userLatitude");
}

-(double) userLongitude {
	%orig;
	NSLog(@"-(double) userLongitude");
}

-(double) userLocationAccuracyInMeters {
	%orig;
	NSLog(@"-(double) userLocationAccuracyInMeters");
}

-(id) userLocationDescription {
	%orig;
	NSLog(@"-(id) userLocationDescription");
}

-(id) userKeywords {
	%orig;
	NSLog(@"-(id) userKeywords");
}

-(id) inlineAd {
	%orig;
	NSLog(@"-(id) inlineAd");
}

-(id) adapterNames {
	%orig;
	NSLog(@"-(id) adapterNames");
}

-(id) currentAdapterName {
	%orig;
	NSLog(@"-(id) currentAdapterName");
}

-(id) userRequestAgent {
	%orig;
	NSLog(@"-(id) userRequestAgent");
}

-(void) askAdapterToStopBeingDelegate {
	%orig;
	NSLog(@"-(void) askAdapterToStopBeingDelegate");
}

-(void) setAdNetworkConfig:(id) {
	%orig;
	NSLog(@"-(void) setAdNetworkConfig:(id)");
}

-(void) setUpAdapter {
	%orig;
	NSLog(@"-(void) setUpAdapter");
}

-(void) presentRewardBasedVideoAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentRewardBasedVideoAdFromRootViewController:(id)");
}

-(void) pingRewardedUserURLsWithReward:(id) userIdentifier:(id) {
	%orig;
	NSLog(@"-(void) pingRewardedUserURLsWithReward:(id) userIdentifier:(id)");
}

-(void) pingFillURLsWithFillStatus:(id) {
	%orig;
	NSLog(@"-(void) pingFillURLsWithFillStatus:(id)");
}

-(void) setMediationConfig:(id) {
	%orig;
	NSLog(@"-(void) setMediationConfig:(id)");
}

-(id) adNetworkConfigsFromAppConfiguration {
	%orig;
	NSLog(@"-(id) adNetworkConfigsFromAppConfiguration");
}

-(void) setAdNetworkConfigsFromAppConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setAdNetworkConfigsFromAppConfiguration:(id)");
}

-(void) setAd:(id) {
	%orig;
	NSLog(@"-(void) setAd:(id)");
}

-(id) publisherId {
	%orig;
	NSLog(@"-(id) publisherId");
}

-(id) userLocation {
	%orig;
	NSLog(@"-(id) userLocation");
}

-(void) setRequest:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id)");
}

-(id) ad {
	%orig;
	NSLog(@"-(id) ad");
}

-(id) credentials {
	%orig;
	NSLog(@"-(id) credentials");
}

-(bool) testMode {
	%orig;
	NSLog(@"-(bool) testMode");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

%end

%hook GADMConfig

-(long long) impressionDefinition {
	%orig;
	NSLog(@"-(long long) impressionDefinition");
}

-(bool) allowPublisherRenderedAttribution {
	%orig;
	NSLog(@"-(bool) allowPublisherRenderedAttribution");
}

-(id) defaultAdSize {
	%orig;
	NSLog(@"-(id) defaultAdSize");
}

-(bool) parseConfig:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) parseConfig:(id) error:(id*)");
}

-(long long) bannerAnimationType {
	%orig;
	NSLog(@"-(long long) bannerAnimationType");
}

-(void) setBannerAnimationType:(long long) {
	%orig;
	NSLog(@"-(void) setBannerAnimationType:(long long)");
}

-(void) setImpressionURLs:(id) {
	%orig;
	NSLog(@"-(void) setImpressionURLs:(id)");
}

-(void) setClickURLs:(id) {
	%orig;
	NSLog(@"-(void) setClickURLs:(id)");
}

-(void) setNoFillURLs:(id) {
	%orig;
	NSLog(@"-(void) setNoFillURLs:(id)");
}

-(void) setRewards:(id) {
	%orig;
	NSLog(@"-(void) setRewards:(id)");
}

-(bool) parseSettingsConfig:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) parseSettingsConfig:(id) error:(id*)");
}

-(void) setQdata:(id) {
	%orig;
	NSLog(@"-(void) setQdata:(id)");
}

-(id) initWithAppKey:(id) configDict:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) initWithAppKey:(id) configDict:(id) error:(id*)");
}

-(double) adNetworkTimeout {
	%orig;
	NSLog(@"-(double) adNetworkTimeout");
}

-(double) finalAdNetworkTimeout {
	%orig;
	NSLog(@"-(double) finalAdNetworkTimeout");
}

-(id) noFillURLs {
	%orig;
	NSLog(@"-(id) noFillURLs");
}

-(void) setAppKey:(id) {
	%orig;
	NSLog(@"-(void) setAppKey:(id)");
}

-(id) rewards {
	%orig;
	NSLog(@"-(id) rewards");
}

-(id) qdata {
	%orig;
	NSLog(@"-(id) qdata");
}

-(id) appKey {
	%orig;
	NSLog(@"-(id) appKey");
}

-(id) clickURLs {
	%orig;
	NSLog(@"-(id) clickURLs");
}

-(id) impressionURLs {
	%orig;
	NSLog(@"-(id) impressionURLs");
}

-(id) adNetworkConfigs {
	%orig;
	NSLog(@"-(id) adNetworkConfigs");
}

-(id) defaultSlotSize {
	%orig;
	NSLog(@"-(id) defaultSlotSize");
}

-(void) setRefreshInterval:(double) {
	%orig;
	NSLog(@"-(void) setRefreshInterval:(double)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(double) refreshInterval {
	%orig;
	NSLog(@"-(double) refreshInterval");
}

%end

%hook GADMAdapterGoogleAdMobAds

+(id) adapterVersion {
	%orig;
	NSLog(@"+(id) adapterVersion");
}

+(Class) networkExtrasClass {
	%orig;
	NSLog(@"+(Class) networkExtrasClass");
}

-(void) adViewDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adViewDidReceiveAd:(id)");
}

-(void) adView:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailToReceiveAdWithError:(id)");
}

-(void) adLoader:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didFailToReceiveAdWithError:(id)");
}

-(id) nativeCustomTemplateIDsForAdLoader:(id) {
	%orig;
	NSLog(@"-(id) nativeCustomTemplateIDsForAdLoader:(id)");
}

-(void) adLoader:(id) didReceiveNativeCustomTemplateAd:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didReceiveNativeCustomTemplateAd:(id)");
}

-(void) adViewWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewWillPresentScreen:(id)");
}

-(void) adViewWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewWillDismissScreen:(id)");
}

-(void) adViewDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewDidDismissScreen:(id)");
}

-(void) adViewWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) adViewWillLeaveApplication:(id)");
}

-(void) adLoader:(id) didReceiveNativeContentAd:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didReceiveNativeContentAd:(id)");
}

-(void) interstitialDidReceiveAdClick:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidReceiveAdClick:(id)");
}

-(void) interstitialDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidReceiveAd:(id)");
}

-(void) interstitial:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) interstitial:(id) didFailToReceiveAdWithError:(id)");
}

-(void) interstitialWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillPresentScreen:(id)");
}

-(void) interstitialWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillDismissScreen:(id)");
}

-(void) interstitialDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidDismissScreen:(id)");
}

-(void) interstitialWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillLeaveApplication:(id)");
}

-(void) getBannerWithSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) getBannerWithSize:(GADAdSize)");
}

-(void) getInterstitial {
	%orig;
	NSLog(@"-(void) getInterstitial");
}

-(bool) isBannerAnimationOK:(long long) {
	%orig;
	NSLog(@"-(bool) isBannerAnimationOK:(long long)");
}

-(void) presentInterstitialFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentInterstitialFromRootViewController:(id)");
}

-(void) getNativeAdWithAdTypes:(id) options:(id) {
	%orig;
	NSLog(@"-(void) getNativeAdWithAdTypes:(id) options:(id)");
}

-(bool) handlesUserClicks {
	%orig;
	NSLog(@"-(bool) handlesUserClicks");
}

-(bool) handlesUserImpressions {
	%orig;
	NSLog(@"-(bool) handlesUserImpressions");
}

-(void) changeAdSizeTo:(GADAdSize) {
	%orig;
	NSLog(@"-(void) changeAdSizeTo:(GADAdSize)");
}

-(void) rewardBasedVideoAdDidOpen:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAdDidOpen:(id)");
}

-(void) rewardBasedVideoAdDidStartPlaying:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAdDidStartPlaying:(id)");
}

-(void) rewardBasedVideoAdDidClose:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAdDidClose:(id)");
}

-(void) rewardBasedVideoAdWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAdWillLeaveApplication:(id)");
}

-(void) rewardBasedVideoAd:(id) didRewardUserWithReward:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAd:(id) didRewardUserWithReward:(id)");
}

-(void) rewardBasedVideoAdDidReceiveAdClick:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAdDidReceiveAdClick:(id)");
}

-(void) adLoader:(id) didReceiveNativeAd:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didReceiveNativeAd:(id)");
}

-(void) adView:(id) didReceiveAppEvent:(id) withInfo:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveAppEvent:(id) withInfo:(id)");
}

-(void) adLoader:(id) didReceiveNativeAppInstallAd:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didReceiveNativeAppInstallAd:(id)");
}

-(void) stopBeingDelegate {
	%orig;
	NSLog(@"-(void) stopBeingDelegate");
}

-(id) initWithRewardBasedVideoAdNetworkConnector:(id) {
	%orig;
	NSLog(@"-(id) initWithRewardBasedVideoAdNetworkConnector:(id)");
}

-(id) initWithGADMAdNetworkConnector:(id) {
	%orig;
	NSLog(@"-(id) initWithGADMAdNetworkConnector:(id)");
}

-(void) requestRewardBasedVideoAd {
	%orig;
	NSLog(@"-(void) requestRewardBasedVideoAd");
}

-(void) presentRewardBasedVideoAdWithRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentRewardBasedVideoAdWithRootViewController:(id)");
}

-(void) rewardBasedVideoAdDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAdDidReceiveAd:(id)");
}

-(void) rewardBasedVideoAd:(id) didFailToLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAd:(id) didFailToLoadWithError:(id)");
}

-(void) setUp {
	%orig;
	NSLog(@"-(void) setUp");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

%end

%hook GADMAdapterCustomEvents

+(id) adapterVersion {
	%orig;
	NSLog(@"+(id) adapterVersion");
}

+(Class) networkExtrasClass {
	%orig;
	NSLog(@"+(Class) networkExtrasClass");
}

-(id) viewControllerForPresentingModalView {
	%orig;
	NSLog(@"-(id) viewControllerForPresentingModalView");
}

-(void) getBannerWithSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) getBannerWithSize:(GADAdSize)");
}

-(void) getInterstitial {
	%orig;
	NSLog(@"-(void) getInterstitial");
}

-(bool) isBannerAnimationOK:(long long) {
	%orig;
	NSLog(@"-(bool) isBannerAnimationOK:(long long)");
}

-(void) presentInterstitialFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentInterstitialFromRootViewController:(id)");
}

-(void) getNativeAdWithAdTypes:(id) options:(id) {
	%orig;
	NSLog(@"-(void) getNativeAdWithAdTypes:(id) options:(id)");
}

-(bool) handlesUserClicks {
	%orig;
	NSLog(@"-(bool) handlesUserClicks");
}

-(bool) handlesUserImpressions {
	%orig;
	NSLog(@"-(bool) handlesUserImpressions");
}

-(id) connector {
	%orig;
	NSLog(@"-(id) connector");
}

-(void) setConnector:(id) {
	%orig;
	NSLog(@"-(void) setConnector:(id)");
}

-(void) callBackToConnectorWithError:(id) isInterstitial:(bool) {
	%orig;
	NSLog(@"-(void) callBackToConnectorWithError:(id) isInterstitial:(bool)");
}

-(id) customEventWithCredentials:(id) isInterstitial:(bool) {
	%orig;
	NSLog(@"-(id) customEventWithCredentials:(id) isInterstitial:(bool)");
}

-(void) setCustomEventBanner:(id) {
	%orig;
	NSLog(@"-(void) setCustomEventBanner:(id)");
}

-(void) setCustomEventInterstitial:(id) {
	%orig;
	NSLog(@"-(void) setCustomEventInterstitial:(id)");
}

-(void) setCustomEventNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setCustomEventNativeAd:(id)");
}

-(id) customEventBanner {
	%orig;
	NSLog(@"-(id) customEventBanner");
}

-(id) customEventInterstitial {
	%orig;
	NSLog(@"-(id) customEventInterstitial");
}

-(id) customEventNativeAd {
	%orig;
	NSLog(@"-(id) customEventNativeAd");
}

-(void) customEventBannerWasClicked:(id) {
	%orig;
	NSLog(@"-(void) customEventBannerWasClicked:(id)");
}

-(void) customEventInterstitialDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) customEventInterstitialDidReceiveAd:(id)");
}

-(void) customEventBanner:(id) didReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) customEventBanner:(id) didReceiveAd:(id)");
}

-(void) customEventBanner:(id) didFailAd:(id) {
	%orig;
	NSLog(@"-(void) customEventBanner:(id) didFailAd:(id)");
}

-(void) customEventBannerWillPresentModal:(id) {
	%orig;
	NSLog(@"-(void) customEventBannerWillPresentModal:(id)");
}

-(void) customEventBannerWillDismissModal:(id) {
	%orig;
	NSLog(@"-(void) customEventBannerWillDismissModal:(id)");
}

-(void) customEventBannerDidDismissModal:(id) {
	%orig;
	NSLog(@"-(void) customEventBannerDidDismissModal:(id)");
}

-(void) customEventBannerWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) customEventBannerWillLeaveApplication:(id)");
}

-(void) customEventBanner:(id) clickDidOccurInAd:(id) {
	%orig;
	NSLog(@"-(void) customEventBanner:(id) clickDidOccurInAd:(id)");
}

-(void) customEventInterstitial:(id) didFailAd:(id) {
	%orig;
	NSLog(@"-(void) customEventInterstitial:(id) didFailAd:(id)");
}

-(void) customEventInterstitialWasClicked:(id) {
	%orig;
	NSLog(@"-(void) customEventInterstitialWasClicked:(id)");
}

-(void) customEventInterstitialWillPresent:(id) {
	%orig;
	NSLog(@"-(void) customEventInterstitialWillPresent:(id)");
}

-(void) customEventInterstitialWillDismiss:(id) {
	%orig;
	NSLog(@"-(void) customEventInterstitialWillDismiss:(id)");
}

-(void) customEventInterstitialDidDismiss:(id) {
	%orig;
	NSLog(@"-(void) customEventInterstitialDidDismiss:(id)");
}

-(void) customEventInterstitialWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) customEventInterstitialWillLeaveApplication:(id)");
}

-(void) customEventInterstitial:(id) didReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) customEventInterstitial:(id) didReceiveAd:(id)");
}

-(void) customEventNativeAd:(id) didReceiveMediatedNativeAd:(id) {
	%orig;
	NSLog(@"-(void) customEventNativeAd:(id) didReceiveMediatedNativeAd:(id)");
}

-(void) customEventNativeAd:(id) didFailToLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) customEventNativeAd:(id) didFailToLoadWithError:(id)");
}

-(void) stopBeingDelegate {
	%orig;
	NSLog(@"-(void) stopBeingDelegate");
}

-(id) initWithGADMAdNetworkConnector:(id) {
	%orig;
	NSLog(@"-(id) initWithGADMAdNetworkConnector:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMAdURLAdapter

+(id) adapterVersion {
	%orig;
	NSLog(@"+(id) adapterVersion");
}

+(Class) networkExtrasClass {
	%orig;
	NSLog(@"+(Class) networkExtrasClass");
}

-(void) adViewDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adViewDidReceiveAd:(id)");
}

-(void) adView:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailToReceiveAdWithError:(id)");
}

-(void) adViewWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewWillPresentScreen:(id)");
}

-(void) adViewWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewWillDismissScreen:(id)");
}

-(void) adViewDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewDidDismissScreen:(id)");
}

-(void) adViewWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) adViewWillLeaveApplication:(id)");
}

-(void) interstitialDidReceiveAdClick:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidReceiveAdClick:(id)");
}

-(void) interstitialDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidReceiveAd:(id)");
}

-(void) interstitial:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) interstitial:(id) didFailToReceiveAdWithError:(id)");
}

-(void) interstitialWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillPresentScreen:(id)");
}

-(void) interstitialWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillDismissScreen:(id)");
}

-(void) interstitialDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) interstitialDidDismissScreen:(id)");
}

-(void) interstitialWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) interstitialWillLeaveApplication:(id)");
}

-(void) getBannerWithSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) getBannerWithSize:(GADAdSize)");
}

-(void) getInterstitial {
	%orig;
	NSLog(@"-(void) getInterstitial");
}

-(bool) isBannerAnimationOK:(long long) {
	%orig;
	NSLog(@"-(bool) isBannerAnimationOK:(long long)");
}

-(void) presentInterstitialFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentInterstitialFromRootViewController:(id)");
}

-(void) changeAdSizeTo:(GADAdSize) {
	%orig;
	NSLog(@"-(void) changeAdSizeTo:(GADAdSize)");
}

-(void) reportBannerLoadFailureWithCode:(long long) errorMessage:(id) {
	%orig;
	NSLog(@"-(void) reportBannerLoadFailureWithCode:(long long) errorMessage:(id)");
}

-(id) connector {
	%orig;
	NSLog(@"-(id) connector");
}

-(void) reportInterstitialLoadFailureWithCode:(long long) errorMessage:(id) {
	%orig;
	NSLog(@"-(void) reportInterstitialLoadFailureWithCode:(long long) errorMessage:(id)");
}

-(long long) requestedAdType {
	%orig;
	NSLog(@"-(long long) requestedAdType");
}

-(void) reportAdLoadFailureWithCode:(long long) errorMessage:(id) {
	%orig;
	NSLog(@"-(void) reportAdLoadFailureWithCode:(long long) errorMessage:(id)");
}

-(id) adLoadActionTimeRecorder {
	%orig;
	NSLog(@"-(id) adLoadActionTimeRecorder");
}

-(void) loadAdURLWithParameters:(id) {
	%orig;
	NSLog(@"-(void) loadAdURLWithParameters:(id)");
}

-(void) loadAd:(id) headers:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id) headers:(id)");
}

-(void) invalidJavaScriptRequest {
	%orig;
	NSLog(@"-(void) invalidJavaScriptRequest");
}

-(void) failedJavaScriptFile {
	%orig;
	NSLog(@"-(void) failedJavaScriptFile");
}

-(void) setBanner:(id) {
	%orig;
	NSLog(@"-(void) setBanner:(id)");
}

-(void) setConnector:(id) {
	%orig;
	NSLog(@"-(void) setConnector:(id)");
}

-(bool) shouldRespondToSDKCore {
	%orig;
	NSLog(@"-(bool) shouldRespondToSDKCore");
}

-(void) setShouldRespondToSDKCore:(bool) {
	%orig;
	NSLog(@"-(void) setShouldRespondToSDKCore:(bool)");
}

-(void) stopBeingDelegate {
	%orig;
	NSLog(@"-(void) stopBeingDelegate");
}

-(id) initWithGADMAdNetworkConnector:(id) {
	%orig;
	NSLog(@"-(id) initWithGADMAdNetworkConnector:(id)");
}

-(id) banner {
	%orig;
	NSLog(@"-(id) banner");
}

-(void) loadRequest {
	%orig;
	NSLog(@"-(void) loadRequest");
}

-(void) setRequestID:(id) {
	%orig;
	NSLog(@"-(void) setRequestID:(id)");
}

-(id) requestID {
	%orig;
	NSLog(@"-(id) requestID");
}

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(id) interstitial {
	%orig;
	NSLog(@"-(id) interstitial");
}

-(void) setInterstitial:(id) {
	%orig;
	NSLog(@"-(void) setInterstitial:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMAdNetworkConnector

-(id) extras {
	%orig;
	NSLog(@"-(id) extras");
}

-(id) viewControllerForPresentingModalView {
	%orig;
	NSLog(@"-(id) viewControllerForPresentingModalView");
}

-(CGSize) adSize {
	%orig;
	NSLog(@"-(CGSize) adSize");
}

-(double) croppedContentThreshold {
	%orig;
	NSLog(@"-(double) croppedContentThreshold");
}

-(id) initWithConfig:(id) networkConfig:(id) {
	%orig;
	NSLog(@"-(id) initWithConfig:(id) networkConfig:(id)");
}

-(id) adapterVersion {
	%orig;
	NSLog(@"-(id) adapterVersion");
}

-(id) networkExtrasForClass:(Class) {
	%orig;
	NSLog(@"-(id) networkExtrasForClass:(Class)");
}

-(bool) didNetworkRefresh {
	%orig;
	NSLog(@"-(bool) didNetworkRefresh");
}

-(void) pingMediationURLs:(id) defaultURL:(id) durations:(id) exitCodes:(id) fillStatus:(id) eventType:(id) {
	%orig;
	NSLog(@"-(void) pingMediationURLs:(id) defaultURL:(id) durations:(id) exitCodes:(id) fillStatus:(id) eventType:(id)");
}

-(void) reportFill {
	%orig;
	NSLog(@"-(void) reportFill");
}

-(void) setAdManager:(id) {
	%orig;
	NSLog(@"-(void) setAdManager:(id)");
}

-(void) setAdLoaderConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setAdLoaderConfiguration:(id)");
}

-(void) setDidNetworkRefresh:(bool) {
	%orig;
	NSLog(@"-(void) setDidNetworkRefresh:(bool)");
}

-(bool) isClicked {
	%orig;
	NSLog(@"-(bool) isClicked");
}

-(id) adLoaderConfiguration {
	%orig;
	NSLog(@"-(id) adLoaderConfiguration");
}

-(void) adapter:(id) didFailAd:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailAd:(id)");
}

-(void) getAdFromAdapterWithType:(id) {
	%orig;
	NSLog(@"-(void) getAdFromAdapterWithType:(id)");
}

-(void) adapter:(id) didReceiveMediatedNativeAd:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveMediatedNativeAd:(id)");
}

-(void) adapterWillPresentFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterWillPresentFullScreenModal:(id)");
}

-(void) adapterWillDismissFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterWillDismissFullScreenModal:(id)");
}

-(void) adapterDidDismissFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterDidDismissFullScreenModal:(id)");
}

-(void) adapterWillPresentInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterWillPresentInterstitial:(id)");
}

-(void) adapterWillDismissInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterWillDismissInterstitial:(id)");
}

-(void) adapterDidDismissInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterDidDismissInterstitial:(id)");
}

-(id) networkConfig {
	%orig;
	NSLog(@"-(id) networkConfig");
}

-(void) setNetworkConfig:(id) {
	%orig;
	NSLog(@"-(void) setNetworkConfig:(id)");
}

-(float) adVolume {
	%orig;
	NSLog(@"-(float) adVolume");
}

-(bool) adMuted {
	%orig;
	NSLog(@"-(bool) adMuted");
}

-(void) adapter:(id) didReceiveAdView:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveAdView:(id)");
}

-(void) adapterDidReceiveInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterDidReceiveInterstitial:(id)");
}

-(void) adapter:(id) didReceiveInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveInterstitial:(id)");
}

-(void) adapter:(id) clickDidOccurInBanner:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) clickDidOccurInBanner:(id)");
}

-(void) adapter:(id) didFailInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailInterstitial:(id)");
}

-(id) mediationConfig {
	%orig;
	NSLog(@"-(id) mediationConfig");
}

-(id) childDirectedTreatment {
	%orig;
	NSLog(@"-(id) childDirectedTreatment");
}

-(bool) userHasLocation {
	%orig;
	NSLog(@"-(bool) userHasLocation");
}

-(void) adapterDidGetAdClick:(id) {
	%orig;
	NSLog(@"-(void) adapterDidGetAdClick:(id)");
}

-(void) adapterWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) adapterWillLeaveApplication:(id)");
}

-(id) networkExtras {
	%orig;
	NSLog(@"-(id) networkExtras");
}

-(long long) userGender {
	%orig;
	NSLog(@"-(long long) userGender");
}

-(id) userBirthday {
	%orig;
	NSLog(@"-(id) userBirthday");
}

-(double) userLatitude {
	%orig;
	NSLog(@"-(double) userLatitude");
}

-(double) userLongitude {
	%orig;
	NSLog(@"-(double) userLongitude");
}

-(double) userLocationAccuracyInMeters {
	%orig;
	NSLog(@"-(double) userLocationAccuracyInMeters");
}

-(id) userLocationDescription {
	%orig;
	NSLog(@"-(id) userLocationDescription");
}

-(id) userKeywords {
	%orig;
	NSLog(@"-(id) userKeywords");
}

-(id) inlineAd {
	%orig;
	NSLog(@"-(id) inlineAd");
}

-(id) adapterNames {
	%orig;
	NSLog(@"-(id) adapterNames");
}

-(id) currentAdapterName {
	%orig;
	NSLog(@"-(id) currentAdapterName");
}

-(id) userRequestAgent {
	%orig;
	NSLog(@"-(id) userRequestAgent");
}

-(void) askAdapterToStopBeingDelegate {
	%orig;
	NSLog(@"-(void) askAdapterToStopBeingDelegate");
}

-(void) setUpAdapter {
	%orig;
	NSLog(@"-(void) setUpAdapter");
}

-(void) setMediationConfig:(id) {
	%orig;
	NSLog(@"-(void) setMediationConfig:(id)");
}

-(void) reportClick {
	%orig;
	NSLog(@"-(void) reportClick");
}

-(void) reportImpression {
	%orig;
	NSLog(@"-(void) reportImpression");
}

-(void) reportManualImpression {
	%orig;
	NSLog(@"-(void) reportManualImpression");
}

-(void) setClicked:(bool) {
	%orig;
	NSLog(@"-(void) setClicked:(bool)");
}

-(id) publisherId {
	%orig;
	NSLog(@"-(id) publisherId");
}

-(id) adapter {
	%orig;
	NSLog(@"-(id) adapter");
}

-(id) userLocation {
	%orig;
	NSLog(@"-(id) userLocation");
}

-(void) setAdapter:(id) {
	%orig;
	NSLog(@"-(void) setAdapter:(id)");
}

-(id) credentials {
	%orig;
	NSLog(@"-(id) credentials");
}

-(bool) testMode {
	%orig;
	NSLog(@"-(bool) testMode");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(id) adManager {
	%orig;
	NSLog(@"-(id) adManager");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMAdNetworkConnectorNativeExpressAd

+(id) JSONAssetsFromMediatedNativeAppInstallAd:(id) {
	%orig;
	NSLog(@"+(id) JSONAssetsFromMediatedNativeAppInstallAd:(id)");
}

+(id) JSONAssetsFromMediatedNativeContentAd:(id) {
	%orig;
	NSLog(@"+(id) JSONAssetsFromMediatedNativeContentAd:(id)");
}

-(id) initWithConfig:(id) networkConfig:(id) {
	%orig;
	NSLog(@"-(id) initWithConfig:(id) networkConfig:(id)");
}

-(void) setAdManager:(id) {
	%orig;
	NSLog(@"-(void) setAdManager:(id)");
}

-(void) setAdLoaderConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setAdLoaderConfiguration:(id)");
}

-(id) adLoaderConfiguration {
	%orig;
	NSLog(@"-(id) adLoaderConfiguration");
}

-(void) adapter:(id) didFailAd:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailAd:(id)");
}

-(void) getAdFromAdapterWithType:(id) {
	%orig;
	NSLog(@"-(void) getAdFromAdapterWithType:(id)");
}

-(void) adapter:(id) didReceiveMediatedNativeAd:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveMediatedNativeAd:(id)");
}

-(id) assetsFromMediatedNativeAd:(id) {
	%orig;
	NSLog(@"-(id) assetsFromMediatedNativeAd:(id)");
}

-(void) loadNativeExpressHTMLTemplateForMediatedNativeAd:(id) {
	%orig;
	NSLog(@"-(void) loadNativeExpressHTMLTemplateForMediatedNativeAd:(id)");
}

-(void) setUpAdapter {
	%orig;
	NSLog(@"-(void) setUpAdapter");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMAdNetworkConnectorNativeAd

-(void) adapter:(id) didFailAd:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailAd:(id)");
}

-(void) logIncorrectAdapterNotificationImplementation {
	%orig;
	NSLog(@"-(void) logIncorrectAdapterNotificationImplementation");
}

-(void) getAdFromAdapterWithType:(id) {
	%orig;
	NSLog(@"-(void) getAdFromAdapterWithType:(id)");
}

-(void) adapter:(id) didReceiveMediatedNativeAd:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveMediatedNativeAd:(id)");
}

-(void) adapterWillPresentFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterWillPresentFullScreenModal:(id)");
}

-(void) adapterWillDismissFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterWillDismissFullScreenModal:(id)");
}

-(void) adapterDidDismissFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterDidDismissFullScreenModal:(id)");
}

-(void) adapterWillPresentInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterWillPresentInterstitial:(id)");
}

-(void) adapterWillDismissInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterWillDismissInterstitial:(id)");
}

-(void) adapterDidDismissInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterDidDismissInterstitial:(id)");
}

-(void) adapterDidGetAdClick:(id) {
	%orig;
	NSLog(@"-(void) adapterDidGetAdClick:(id)");
}

-(void) adapterWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) adapterWillLeaveApplication:(id)");
}

%end

%hook GADMAdNetworkConnectorInterstitial

-(void) setCalledWillDismissInterstitial:(bool) {
	%orig;
	NSLog(@"-(void) setCalledWillDismissInterstitial:(bool)");
}

-(bool) calledWillDismissInterstitial {
	%orig;
	NSLog(@"-(bool) calledWillDismissInterstitial");
}

-(void) adapter:(id) didFailAd:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailAd:(id)");
}

-(void) getAdFromAdapterWithType:(id) {
	%orig;
	NSLog(@"-(void) getAdFromAdapterWithType:(id)");
}

-(void) adapterWillPresentFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterWillPresentFullScreenModal:(id)");
}

-(void) adapterWillDismissFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterWillDismissFullScreenModal:(id)");
}

-(void) adapterDidDismissFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterDidDismissFullScreenModal:(id)");
}

-(void) adapterWillPresentInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterWillPresentInterstitial:(id)");
}

-(void) adapterWillDismissInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterWillDismissInterstitial:(id)");
}

-(void) adapterDidDismissInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterDidDismissInterstitial:(id)");
}

-(void) adapter:(id) didReceiveAdView:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveAdView:(id)");
}

-(void) adapterDidReceiveInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterDidReceiveInterstitial:(id)");
}

-(void) adapter:(id) didReceiveInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveInterstitial:(id)");
}

-(void) adapter:(id) clickDidOccurInBanner:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) clickDidOccurInBanner:(id)");
}

-(void) adapter:(id) didFailInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailInterstitial:(id)");
}

-(void) adapterWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) adapterWillLeaveApplication:(id)");
}

%end

%hook GADMAdNetworkConnectorBanner

-(bool) didNetworkReturn {
	%orig;
	NSLog(@"-(bool) didNetworkReturn");
}

-(void) setDidNetworkReturn:(bool) {
	%orig;
	NSLog(@"-(void) setDidNetworkReturn:(bool)");
}

-(void) adapter:(id) didFailAd:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailAd:(id)");
}

-(void) getAdFromAdapterWithType:(id) {
	%orig;
	NSLog(@"-(void) getAdFromAdapterWithType:(id)");
}

-(void) adapterWillPresentFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterWillPresentFullScreenModal:(id)");
}

-(void) adapterWillDismissFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterWillDismissFullScreenModal:(id)");
}

-(void) adapterDidDismissFullScreenModal:(id) {
	%orig;
	NSLog(@"-(void) adapterDidDismissFullScreenModal:(id)");
}

-(void) adapterWillPresentInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterWillPresentInterstitial:(id)");
}

-(void) adapterWillDismissInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterWillDismissInterstitial:(id)");
}

-(void) adapterDidDismissInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterDidDismissInterstitial:(id)");
}

-(void) adapter:(id) didReceiveAppEvent:(id) withInfo:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveAppEvent:(id) withInfo:(id)");
}

-(void) adapter:(id) didReceiveAdView:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didReceiveAdView:(id)");
}

-(void) adapterDidReceiveInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapterDidReceiveInterstitial:(id)");
}

-(void) adapter:(id) didFailInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailInterstitial:(id)");
}

-(void) adapterWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) adapterWillLeaveApplication:(id)");
}

-(id) queuedAppEvents {
	%orig;
	NSLog(@"-(id) queuedAppEvents");
}

-(void) impressionMonitorDidMonitorImpression:(id) {
	%orig;
	NSLog(@"-(void) impressionMonitorDidMonitorImpression:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMAdNetworkConfig

-(id) extras {
	%orig;
	NSLog(@"-(id) extras");
}

-(bool) setError:(id*) withErrorCode:(long long) errorMessage:(id) {
	%orig;
	NSLog(@"-(bool) setError:(id*) withErrorCode:(long long) errorMessage:(id)");
}

-(id) errorMessageForMissingAdapterClasses:(id) {
	%orig;
	NSLog(@"-(id) errorMessageForMissingAdapterClasses:(id)");
}

-(bool) resolveAdNetworkClassForCustomEventWithError:(id*) {
	%orig;
	NSLog(@"-(bool) resolveAdNetworkClassForCustomEventWithError:(id*)");
}

-(id) nativeExpressAdLoaderOptions {
	%orig;
	NSLog(@"-(id) nativeExpressAdLoaderOptions");
}

-(id) nativeExpressHTMLTemplate {
	%orig;
	NSLog(@"-(id) nativeExpressHTMLTemplate");
}

-(id) nativeExpressAdBaseURL {
	%orig;
	NSLog(@"-(id) nativeExpressAdBaseURL");
}

-(id) nativeExpressTemplateIDs {
	%orig;
	NSLog(@"-(id) nativeExpressTemplateIDs");
}

-(id) nativeExpressAssets {
	%orig;
	NSLog(@"-(id) nativeExpressAssets");
}

-(Class) adapterClass {
	%orig;
	NSLog(@"-(Class) adapterClass");
}

-(id) networkID {
	%orig;
	NSLog(@"-(id) networkID");
}

-(id) allocationID {
	%orig;
	NSLog(@"-(id) allocationID");
}

-(id) clickURLs {
	%orig;
	NSLog(@"-(id) clickURLs");
}

-(id) impressionURLs {
	%orig;
	NSLog(@"-(id) impressionURLs");
}

-(id) videoStartURLs {
	%orig;
	NSLog(@"-(id) videoStartURLs");
}

-(id) rewardedUserURLs {
	%orig;
	NSLog(@"-(id) rewardedUserURLs");
}

-(id) fillURLs {
	%orig;
	NSLog(@"-(id) fillURLs");
}

-(id) adapterList {
	%orig;
	NSLog(@"-(id) adapterList");
}

-(id) slotSizes {
	%orig;
	NSLog(@"-(id) slotSizes");
}

-(id) responseType {
	%orig;
	NSLog(@"-(id) responseType");
}

-(id) ad {
	%orig;
	NSLog(@"-(id) ad");
}

-(id) credentials {
	%orig;
	NSLog(@"-(id) credentials");
}

-(id) publisherID {
	%orig;
	NSLog(@"-(id) publisherID");
}

-(id) initWithDictionary:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id) error:(id*)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook GADMAdNetworkAdapter

+(id) availableAdapterNamesInSet:(id) {
	%orig;
	NSLog(@"+(id) availableAdapterNamesInSet:(id)");
}

+(bool) classIsAdapterClass:(Class) {
	%orig;
	NSLog(@"+(bool) classIsAdapterClass:(Class)");
}

+(bool) classImplementsCurrentAdapterAPI:(Class) {
	%orig;
	NSLog(@"+(bool) classImplementsCurrentAdapterAPI:(Class)");
}

%end

%hook GADMAdManager

-(void) setRequestInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setRequestInProgress:(bool)");
}

-(void) reportNoFill {
	%orig;
	NSLog(@"-(void) reportNoFill");
}

-(void) resetRequestingState {
	%orig;
	NSLog(@"-(void) resetRequestingState");
}

-(void) setAdNetworkTimeoutTimer:(id) {
	%orig;
	NSLog(@"-(void) setAdNetworkTimeoutTimer:(id)");
}

-(void) makeAdRequest {
	%orig;
	NSLog(@"-(void) makeAdRequest");
}

-(id) dequeueAdNetworkConfig {
	%orig;
	NSLog(@"-(id) dequeueAdNetworkConfig");
}

-(void) notifyDelegateOfFailureToReceiveWithError:(id) {
	%orig;
	NSLog(@"-(void) notifyDelegateOfFailureToReceiveWithError:(id)");
}

-(id) adNetworkTimeoutTimer {
	%orig;
	NSLog(@"-(id) adNetworkTimeoutTimer");
}

-(void) adNetworkTimeoutHandler:(id) {
	%orig;
	NSLog(@"-(void) adNetworkTimeoutHandler:(id)");
}

-(void) startCSITiming {
	%orig;
	NSLog(@"-(void) startCSITiming");
}

-(void) endCSITimingWithFailedAdapter:(id) {
	%orig;
	NSLog(@"-(void) endCSITimingWithFailedAdapter:(id)");
}

-(bool) shouldProcessResponseFromConnector:(id) {
	%orig;
	NSLog(@"-(bool) shouldProcessResponseFromConnector:(id)");
}

-(void) endCSITimingWithSucceededAdapter:(id) {
	%orig;
	NSLog(@"-(void) endCSITimingWithSucceededAdapter:(id)");
}

-(void) updateAdapterTimingsForConnector:(id) error:(id) {
	%orig;
	NSLog(@"-(void) updateAdapterTimingsForConnector:(id) error:(id)");
}

-(id) mediationTimeRecorder {
	%orig;
	NSLog(@"-(id) mediationTimeRecorder");
}

-(void) mediateForAdType:(id) config:(id) {
	%orig;
	NSLog(@"-(void) mediateForAdType:(id) config:(id)");
}

-(void) adRequestReturnsFromConnector:(id) withView:(id) {
	%orig;
	NSLog(@"-(void) adRequestReturnsFromConnector:(id) withView:(id)");
}

-(void) adRequestReturnsFromConnector:(id) withInterstitial:(id) {
	%orig;
	NSLog(@"-(void) adRequestReturnsFromConnector:(id) withInterstitial:(id)");
}

-(bool) connectorShouldReturnMediatedAd:(id) {
	%orig;
	NSLog(@"-(bool) connectorShouldReturnMediatedAd:(id)");
}

-(void) presentInterstitialFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentInterstitialFromRootViewController:(id)");
}

-(void) adRequestReturnsFromConnector:(id) withMediatedAd:(id) {
	%orig;
	NSLog(@"-(void) adRequestReturnsFromConnector:(id) withMediatedAd:(id)");
}

-(void) adRequestFailedFromConnector:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) adRequestFailedFromConnector:(id) withError:(id)");
}

-(bool) changeAdTypeTo:(id) {
	%orig;
	NSLog(@"-(bool) changeAdTypeTo:(id)");
}

-(void) cancelPendingActions {
	%orig;
	NSLog(@"-(void) cancelPendingActions");
}

-(id) requestingConnector {
	%orig;
	NSLog(@"-(id) requestingConnector");
}

-(void) setRequestingConnector:(id) {
	%orig;
	NSLog(@"-(void) setRequestingConnector:(id)");
}

-(id) receivedConnector {
	%orig;
	NSLog(@"-(id) receivedConnector");
}

-(void) setReceivedConnector:(id) {
	%orig;
	NSLog(@"-(void) setReceivedConnector:(id)");
}

-(bool) requestInProgress {
	%orig;
	NSLog(@"-(bool) requestInProgress");
}

-(id) adType {
	%orig;
	NSLog(@"-(id) adType");
}

-(void) setAdType:(id) {
	%orig;
	NSLog(@"-(void) setAdType:(id)");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) config {
	%orig;
	NSLog(@"-(id) config");
}

-(void) setConfig:(id) {
	%orig;
	NSLog(@"-(void) setConfig:(id)");
}

%end

%hook GADCustomEventRequest

-(bool) userHasLocation {
	%orig;
	NSLog(@"-(bool) userHasLocation");
}

-(long long) userGender {
	%orig;
	NSLog(@"-(long long) userGender");
}

-(id) userBirthday {
	%orig;
	NSLog(@"-(id) userBirthday");
}

-(double) userLatitude {
	%orig;
	NSLog(@"-(double) userLatitude");
}

-(double) userLongitude {
	%orig;
	NSLog(@"-(double) userLongitude");
}

-(double) userLocationAccuracyInMeters {
	%orig;
	NSLog(@"-(double) userLocationAccuracyInMeters");
}

-(id) userLocationDescription {
	%orig;
	NSLog(@"-(id) userLocationDescription");
}

-(id) userKeywords {
	%orig;
	NSLog(@"-(id) userKeywords");
}

-(id) initWithConnector:(id) {
	%orig;
	NSLog(@"-(id) initWithConnector:(id)");
}

-(bool) isTesting {
	%orig;
	NSLog(@"-(bool) isTesting");
}

-(id) additionalParameters {
	%orig;
	NSLog(@"-(id) additionalParameters");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADCustomEventExtras

-(void) setExtras:(id) forLabel:(id) {
	%orig;
	NSLog(@"-(void) setExtras:(id) forLabel:(id)");
}

-(void) removeAllExtras {
	%orig;
	NSLog(@"-(void) removeAllExtras");
}

-(id) allExtras {
	%orig;
	NSLog(@"-(id) allExtras");
}

-(id) extrasForLabel:(id) {
	%orig;
	NSLog(@"-(id) extrasForLabel:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMWebViewRenderedChecker

-(double) percentOfImage:(id) ofColor:(id) {
	%orig;
	NSLog(@"-(double) percentOfImage:(id) ofColor:(id)");
}

-(void) checkIsContentRenderedInWebView {
	%orig;
	NSLog(@"-(void) checkIsContentRenderedInWebView");
}

-(id) initWithWebView:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithWebView:(id) delegate:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

%end

%hook GADMAdapterHTML

+(id) adapterVersion {
	%orig;
	NSLog(@"+(id) adapterVersion");
}

+(Class) networkExtrasClass {
	%orig;
	NSLog(@"+(Class) networkExtrasClass");
}

-(id) errorWithCode:(long long) text:(id) {
	%orig;
	NSLog(@"-(id) errorWithCode:(long long) text:(id)");
}

-(void) startRenderingTimer {
	%orig;
	NSLog(@"-(void) startRenderingTimer");
}

-(void) stopRenderingTimer {
	%orig;
	NSLog(@"-(void) stopRenderingTimer");
}

-(void) createWebViewWithSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) createWebViewWithSize:(GADAdSize)");
}

-(void) failInterstitialRequest {
	%orig;
	NSLog(@"-(void) failInterstitialRequest");
}

-(id) stripTrailingSlashFromPath:(id) {
	%orig;
	NSLog(@"-(id) stripTrailingSlashFromPath:(id)");
}

-(bool) isPath:(id) equivalentToPath:(id) {
	%orig;
	NSLog(@"-(bool) isPath:(id) equivalentToPath:(id)");
}

-(bool) isPassbackRequest:(id) {
	%orig;
	NSLog(@"-(bool) isPassbackRequest:(id)");
}

-(void) webView:(id) isRendered:(bool) {
	%orig;
	NSLog(@"-(void) webView:(id) isRendered:(bool)");
}

-(void) getBannerWithSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) getBannerWithSize:(GADAdSize)");
}

-(void) getInterstitial {
	%orig;
	NSLog(@"-(void) getInterstitial");
}

-(bool) isBannerAnimationOK:(long long) {
	%orig;
	NSLog(@"-(bool) isBannerAnimationOK:(long long)");
}

-(void) presentInterstitialFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentInterstitialFromRootViewController:(id)");
}

-(id) connector {
	%orig;
	NSLog(@"-(id) connector");
}

-(void) setConnector:(id) {
	%orig;
	NSLog(@"-(void) setConnector:(id)");
}

-(void) stopBeingDelegate {
	%orig;
	NSLog(@"-(void) stopBeingDelegate");
}

-(id) initWithGADMAdNetworkConnector:(id) {
	%orig;
	NSLog(@"-(id) initWithGADMAdNetworkConnector:(id)");
}

-(void) clearWebView {
	%orig;
	NSLog(@"-(void) clearWebView");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

%end

%hook GADAdPreprocessor

-(void) handleJavaScriptLoadedNotification:(id) {
	%orig;
	NSLog(@"-(void) handleJavaScriptLoadedNotification:(id)");
}

-(void) slotFinishedLoadingAdContent:(id) {
	%orig;
	NSLog(@"-(void) slotFinishedLoadingAdContent:(id)");
}

-(void) slot:(id) didFailToLoadAdContentWithError:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didFailToLoadAdContentWithError:(id)");
}

-(id) initWithAdUnitID:(id) {
	%orig;
	NSLog(@"-(id) initWithAdUnitID:(id)");
}

-(void) handlePreprocessorNotification:(id) {
	%orig;
	NSLog(@"-(void) handlePreprocessorNotification:(id)");
}

-(id) environmentJSONString {
	%orig;
	NSLog(@"-(id) environmentJSONString");
}

-(void) callAndClearCompletionHandlerWithAdConfiguration:(id) slot:(id) error:(id) {
	%orig;
	NSLog(@"-(void) callAndClearCompletionHandlerWithAdConfiguration:(id) slot:(id) error:(id)");
}

-(void) preprocessNativeAdJSON:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) preprocessNativeAdJSON:(id) completionHandler:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAdLoader

-(id) initWithAdUnitID:(id) rootViewController:(id) adTypes:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithAdUnitID:(id) rootViewController:(id) adTypes:(id) options:(id)");
}

-(id) nativeAds {
	%orig;
	NSLog(@"-(id) nativeAds");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(void) slotFinishedLoadingAdContent:(id) {
	%orig;
	NSLog(@"-(void) slotFinishedLoadingAdContent:(id)");
}

-(void) slot:(id) didFailToLoadAdContentWithError:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didFailToLoadAdContentWithError:(id)");
}

-(id) validAdSizes {
	%orig;
	NSLog(@"-(id) validAdSizes");
}

-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id)");
}

-(id) adLoaderConfigurationForAd:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"-(id) adLoaderConfigurationForAd:(id) networkConfiguration:(id)");
}

-(void) ad:(id) processMediatedAd:(id) withCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) ad:(id) processMediatedAd:(id) withCompletionHandler:(id)");
}

-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*)");
}

-(void) slot:(id) willProcessMediatedAdResponse:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) willProcessMediatedAdResponse:(id)");
}

-(void) handleFailedRequestWithRequestError:(id) isFinalResult:(bool) {
	%orig;
	NSLog(@"-(void) handleFailedRequestWithRequestError:(id) isFinalResult:(bool)");
}

-(void) adDidFinishLoadingAssets:(id) isFinalResult:(bool) {
	%orig;
	NSLog(@"-(void) adDidFinishLoadingAssets:(id) isFinalResult:(bool)");
}

-(void) preprocessAdJSON:(id) atIndex:(long long) {
	%orig;
	NSLog(@"-(void) preprocessAdJSON:(id) atIndex:(long long)");
}

-(void) loadAssetsForNativeAd:(id) index:(long long) {
	%orig;
	NSLog(@"-(void) loadAssetsForNativeAd:(id) index:(long long)");
}

-(id) appEventAdLoaders {
	%orig;
	NSLog(@"-(id) appEventAdLoaders");
}

-(id) adPreprocessors {
	%orig;
	NSLog(@"-(id) adPreprocessors");
}

-(void) setAdLoaderConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setAdLoaderConfiguration:(id)");
}

-(id) adLoaderConfiguration {
	%orig;
	NSLog(@"-(id) adLoaderConfiguration");
}

-(void) finishLoading {
	%orig;
	NSLog(@"-(void) finishLoading");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(CGRect) bounds {
	%orig;
	NSLog(@"-(CGRect) bounds");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(CGRect) frame {
	%orig;
	NSLog(@"-(CGRect) frame");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

-(bool) isLoading {
	%orig;
	NSLog(@"-(bool) isLoading");
}

%end

%hook GADAdLoadResults

-(void) handleLoadResult:(id) isFinalResult:(bool) {
	%orig;
	NSLog(@"-(void) handleLoadResult:(id) isFinalResult:(bool)");
}

-(id) initWithAdLoader:(id) requestedAdCount:(long long) {
	%orig;
	NSLog(@"-(id) initWithAdLoader:(id) requestedAdCount:(long long)");
}

-(void) setReturnedAdCount:(long long) {
	%orig;
	NSLog(@"-(void) setReturnedAdCount:(long long)");
}

-(void) insertAdLoadResult:(id) atIndex:(long long) {
	%orig;
	NSLog(@"-(void) insertAdLoadResult:(id) atIndex:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAdConfiguration

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) options {
	%orig;
	NSLog(@"-(id) options");
}

-(id) initWithOptions:(id) {
	%orig;
	NSLog(@"-(id) initWithOptions:(id)");
}

%end

%hook GADInterstitialPoolRefillOnPopPolicy

-(void) addPool:(id) {
	%orig;
	NSLog(@"-(void) addPool:(id)");
}

-(void) interstitialPoolDidAddEntry:(id) {
	%orig;
	NSLog(@"-(void) interstitialPoolDidAddEntry:(id)");
}

-(void) interstitialPoolDidRemoveEntry:(id) {
	%orig;
	NSLog(@"-(void) interstitialPoolDidRemoveEntry:(id)");
}

%end

%hook GADInterstitialPoolGroupRefillPolicy

-(void) addPool:(id) {
	%orig;
	NSLog(@"-(void) addPool:(id)");
}

-(void) fillPools {
	%orig;
	NSLog(@"-(void) fillPools");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADInterstitialPoolRefillWhenIdlePolicy

-(void) addPool:(id) {
	%orig;
	NSLog(@"-(void) addPool:(id)");
}

-(void) interstitialPoolDidRemoveEntry:(id) {
	%orig;
	NSLog(@"-(void) interstitialPoolDidRemoveEntry:(id)");
}

-(void) fillPools {
	%orig;
	NSLog(@"-(void) fillPools");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADInterstitialPoolRefillOnDismissPolicy

-(void) interstitialPoolDidAddEntry:(id) {
	%orig;
	NSLog(@"-(void) interstitialPoolDidAddEntry:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADInterstitialPool

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(id) initWithRequest:(id) adUnitID:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) adUnitID:(id)");
}

-(void) scheduleTimeout:(double) cacheEntry:(id) {
	%orig;
	NSLog(@"-(void) scheduleTimeout:(double) cacheEntry:(id)");
}

-(void) addCacheEntryWithTimeout:(double) maxCount:(long long) {
	%orig;
	NSLog(@"-(void) addCacheEntryWithTimeout:(double) maxCount:(long long)");
}

-(void) setRequest:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) removeObject:(id) {
	%orig;
	NSLog(@"-(void) removeObject:(id)");
}

-(void) fill {
	%orig;
	NSLog(@"-(void) fill");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(id) nextEntry {
	%orig;
	NSLog(@"-(id) nextEntry");
}

%end

%hook GADInterstitialOwner

-(void) interstitialIsDismissed {
	%orig;
	NSLog(@"-(void) interstitialIsDismissed");
}

-(void) interstitialDidCreateSlot {
	%orig;
	NSLog(@"-(void) interstitialDidCreateSlot");
}

-(void) interstitialWillBePresented {
	%orig;
	NSLog(@"-(void) interstitialWillBePresented");
}

-(void) observeInterstitial:(id) {
	%orig;
	NSLog(@"-(void) observeInterstitial:(id)");
}

-(void) moveAdViewToPlaceholderWindow:(id) {
	%orig;
	NSLog(@"-(void) moveAdViewToPlaceholderWindow:(id)");
}

-(void) interstitialDelayPageCloseStopped {
	%orig;
	NSLog(@"-(void) interstitialDelayPageCloseStopped");
}

-(void) interstitialDelayPageCloseStarted {
	%orig;
	NSLog(@"-(void) interstitialDelayPageCloseStarted");
}

-(id) initWithInterstitial:(id) {
	%orig;
	NSLog(@"-(id) initWithInterstitial:(id)");
}

-(void) stopObserving {
	%orig;
	NSLog(@"-(void) stopObserving");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADInterstitialCacheEntry

+(void) sendCSIPingForTimeRecorder:(id) {
	%orig;
	NSLog(@"+(void) sendCSIPingForTimeRecorder:(id)");
}

-(void) slotFinishedLoadingAdContent:(id) {
	%orig;
	NSLog(@"-(void) slotFinishedLoadingAdContent:(id)");
}

-(void) slot:(id) didFailToLoadAdContentWithError:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didFailToLoadAdContentWithError:(id)");
}

-(bool) slot:(id) shouldLoadRequest:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) shouldLoadRequest:(id) error:(id*)");
}

-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id)");
}

-(void) slotDidMoveToPlacement {
	%orig;
	NSLog(@"-(void) slotDidMoveToPlacement");
}

-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*)");
}

-(void) slot:(id) willProcessMediatedAdResponse:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) willProcessMediatedAdResponse:(id)");
}

-(id) initWithRequest:(id) adUnitID:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) adUnitID:(id)");
}

-(bool) loaded {
	%orig;
	NSLog(@"-(bool) loaded");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

%end

%hook GADInterstitialCache

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) cacheEntryForRequest:(id) adUnitID:(id) {
	%orig;
	NSLog(@"-(id) cacheEntryForRequest:(id) adUnitID:(id)");
}

-(void) loadInterstitialsForSavedRequests {
	%orig;
	NSLog(@"-(void) loadInterstitialsForSavedRequests");
}

-(void) updateRefillPolicy {
	%orig;
	NSLog(@"-(void) updateRefillPolicy");
}

-(void) didAccessKey:(id) request:(id) {
	%orig;
	NSLog(@"-(void) didAccessKey:(id) request:(id)");
}

-(void) loadRequest:(id) adUnitID:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id) adUnitID:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADInterstitial

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(void) slotWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) slotWillPresentScreen:(id)");
}

-(void) slotWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) slotWillDismissScreen:(id)");
}

-(void) slotDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) slotDidDismissScreen:(id)");
}

-(void) slotWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) slotWillLeaveApplication:(id)");
}

-(void) slotFinishedLoadingAdContent:(id) {
	%orig;
	NSLog(@"-(void) slotFinishedLoadingAdContent:(id)");
}

-(void) slot:(id) didFailToLoadAdContentWithError:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didFailToLoadAdContentWithError:(id)");
}

-(bool) slot:(id) shouldLoadRequest:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) shouldLoadRequest:(id) error:(id*)");
}

-(bool) slotShouldReloadCurrentRequest:(id) {
	%orig;
	NSLog(@"-(bool) slotShouldReloadCurrentRequest:(id)");
}

-(void) slotDidLoadMRAIDAd:(id) {
	%orig;
	NSLog(@"-(void) slotDidLoadMRAIDAd:(id)");
}

-(void) slotDidReceiveAdClick:(id) {
	%orig;
	NSLog(@"-(void) slotDidReceiveAdClick:(id)");
}

-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id)");
}

-(void) rootObjectLoggerChanged {
	%orig;
	NSLog(@"-(void) rootObjectLoggerChanged");
}

-(void) rewardBasedVideoAdGMSGHandlerDidReceiveStartVideoNotification:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAdGMSGHandlerDidReceiveStartVideoNotification:(id)");
}

-(void) rewardBasedVideoAdGMSGHandler:(id) didReceiveRewardNotificationWithRewardItem:(id) {
	%orig;
	NSLog(@"-(void) rewardBasedVideoAdGMSGHandler:(id) didReceiveRewardNotificationWithRewardItem:(id)");
}

-(void) interstitialAdLoadSucceeded {
	%orig;
	NSLog(@"-(void) interstitialAdLoadSucceeded");
}

-(void) interstitialAdLoadFailedWithError:(id) {
	%orig;
	NSLog(@"-(void) interstitialAdLoadFailedWithError:(id)");
}

-(void) interstitialAdIsDismissed {
	%orig;
	NSLog(@"-(void) interstitialAdIsDismissed");
}

-(void) interstitialCreatedSlot:(id) {
	%orig;
	NSLog(@"-(void) interstitialCreatedSlot:(id)");
}

-(void) interstitialAdLoadStarted {
	%orig;
	NSLog(@"-(void) interstitialAdLoadStarted");
}

-(void) loadSlotFromCacheEntry:(id) {
	%orig;
	NSLog(@"-(void) loadSlotFromCacheEntry:(id)");
}

-(id) adNetworkClassName {
	%orig;
	NSLog(@"-(id) adNetworkClassName");
}

-(bool) canPresentFullScreen {
	%orig;
	NSLog(@"-(bool) canPresentFullScreen");
}

-(void) adPresentationDidFail {
	%orig;
	NSLog(@"-(void) adPresentationDidFail");
}

-(void) interstitialAdIsPresented {
	%orig;
	NSLog(@"-(void) interstitialAdIsPresented");
}

-(bool) canFitAdSize:(CGSize) inWindowSize:(CGSize) withThreshold:(double) {
	%orig;
	NSLog(@"-(bool) canFitAdSize:(CGSize) inWindowSize:(CGSize) withThreshold:(double)");
}

-(id) initWithAdUnitID:(id) {
	%orig;
	NSLog(@"-(id) initWithAdUnitID:(id)");
}

-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*)");
}

-(void) slot:(id) willProcessMediatedAdResponse:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) willProcessMediatedAdResponse:(id)");
}

-(void) setMediated {
	%orig;
	NSLog(@"-(void) setMediated");
}

-(void) presentFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentFromRootViewController:(id)");
}

-(bool) hasBeenUsed {
	%orig;
	NSLog(@"-(bool) hasBeenUsed");
}

-(void) setHasBeenUsed:(bool) {
	%orig;
	NSLog(@"-(void) setHasBeenUsed:(bool)");
}

-(id) inAppPurchaseDelegate {
	%orig;
	NSLog(@"-(id) inAppPurchaseDelegate");
}

-(void) setInAppPurchaseDelegate:(id) {
	%orig;
	NSLog(@"-(void) setInAppPurchaseDelegate:(id)");
}

-(bool) isReady {
	%orig;
	NSLog(@"-(bool) isReady");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(void) createSlot {
	%orig;
	NSLog(@"-(void) createSlot");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

%end

%hook DFPInterstitial

-(void) finishedRenderingAdView:(id) {
	%orig;
	NSLog(@"-(void) finishedRenderingAdView:(id)");
}

-(void) recordClick {
	%orig;
	NSLog(@"-(void) recordClick");
}

-(void) recordCustomAdImpression {
	%orig;
	NSLog(@"-(void) recordCustomAdImpression");
}

-(bool) slotShouldPreemptInProgressRequest:(id) {
	%orig;
	NSLog(@"-(bool) slotShouldPreemptInProgressRequest:(id)");
}

-(void) slot:(id) didReceiveAppEvent:(id) withInfo:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didReceiveAppEvent:(id) withInfo:(id)");
}

-(bool) slot:(id) notifyPublisherToRenderCustomRenderingAd:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) notifyPublisherToRenderCustomRenderingAd:(id) error:(id*)");
}

-(void) slot:(id) willLoadAdWithRequest:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) willLoadAdWithRequest:(id)");
}

-(id) correlator {
	%orig;
	NSLog(@"-(id) correlator");
}

-(void) setCorrelator:(id) {
	%orig;
	NSLog(@"-(void) setCorrelator:(id)");
}

-(void) setCustomAdRenderingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setCustomAdRenderingEnabled:(bool)");
}

-(id) customRenderedInterstitialDelegate {
	%orig;
	NSLog(@"-(id) customRenderedInterstitialDelegate");
}

-(bool) isCustomAdRenderingEnabled {
	%orig;
	NSLog(@"-(bool) isCustomAdRenderingEnabled");
}

-(id) appEventDelegate {
	%orig;
	NSLog(@"-(id) appEventDelegate");
}

-(void) setAppEventDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAppEventDelegate:(id)");
}

-(void) setCustomRenderedInterstitialDelegate:(id) {
	%orig;
	NSLog(@"-(void) setCustomRenderedInterstitialDelegate:(id)");
}

-(void) presentFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) presentFromRootViewController:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADPrecacheGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) resourceCache:(id) didFailCachingWithError:(id) {
	%orig;
	NSLog(@"-(void) resourceCache:(id) didFailCachingWithError:(id)");
}

-(void) resourceCacheDidSucceedCaching:(id) {
	%orig;
	NSLog(@"-(void) resourceCacheDidSucceedCaching:(id)");
}

-(void) resourceCacheDidReceiveData:(id) {
	%orig;
	NSLog(@"-(void) resourceCacheDidReceiveData:(id)");
}

-(void) resourceCacheDidReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) resourceCacheDidReceiveResponse:(id)");
}

-(void) adView:(id) didReceivePrecacheNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceivePrecacheNotification:(id)");
}

-(long long) lastBytesAfterCleanUp {
	%orig;
	NSLog(@"-(long long) lastBytesAfterCleanUp");
}

-(void) dispatchPrecacheEventWithBytesLoaded:(unsigned long long) totalBytes:(long long) event:(id) {
	%orig;
	NSLog(@"-(void) dispatchPrecacheEventWithBytesLoaded:(unsigned long long) totalBytes:(long long) event:(id)");
}

-(id) resourceCache {
	%orig;
	NSLog(@"-(id) resourceCache");
}

-(void) preload {
	%orig;
	NSLog(@"-(void) preload");
}

-(void) abort {
	%orig;
	NSLog(@"-(void) abort");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADNativeAdViewPolicy

-(void) recordImpression {
	%orig;
	NSLog(@"-(void) recordImpression");
}

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(void) finishActiveViewReporting {
	%orig;
	NSLog(@"-(void) finishActiveViewReporting");
}

-(void) addUserInteractionToAdView {
	%orig;
	NSLog(@"-(void) addUserInteractionToAdView");
}

-(void) stopImpressionMonitoring {
	%orig;
	NSLog(@"-(void) stopImpressionMonitoring");
}

-(void) finishAdExposureMonitoring {
	%orig;
	NSLog(@"-(void) finishAdExposureMonitoring");
}

-(void) updateAdChoicesContentView {
	%orig;
	NSLog(@"-(void) updateAdChoicesContentView");
}

-(bool) nativeAdHasVideo {
	%orig;
	NSLog(@"-(bool) nativeAdHasVideo");
}

-(id) tapHandlingEnvironmentWithTapLocation:(CGPoint) tappedViewName:(id) {
	%orig;
	NSLog(@"-(id) tapHandlingEnvironmentWithTapLocation:(CGPoint) tappedViewName:(id)");
}

-(id) nativeAdSignalDictionary {
	%orig;
	NSLog(@"-(id) nativeAdSignalDictionary");
}

-(id) signalDictionaryWithAssetView:(id) assetName:(id) adView:(id) {
	%orig;
	NSLog(@"-(id) signalDictionaryWithAssetView:(id) assetName:(id) adView:(id)");
}

-(void) updateAdChoicesView {
	%orig;
	NSLog(@"-(void) updateAdChoicesView");
}

-(void) updateOverlay {
	%orig;
	NSLog(@"-(void) updateOverlay");
}

-(void) orderViews {
	%orig;
	NSLog(@"-(void) orderViews");
}

-(void) handleImpressionTracking {
	%orig;
	NSLog(@"-(void) handleImpressionTracking");
}

-(void) constrainAdChoicesViewToCorner {
	%orig;
	NSLog(@"-(void) constrainAdChoicesViewToCorner");
}

-(void) checkForImpression {
	%orig;
	NSLog(@"-(void) checkForImpression");
}

-(bool) monitoredViewIsSubviewOfDeviceScreen {
	%orig;
	NSLog(@"-(bool) monitoredViewIsSubviewOfDeviceScreen");
}

-(void) startActiveViewReportingIfEnabled {
	%orig;
	NSLog(@"-(void) startActiveViewReportingIfEnabled");
}

-(void) handleVideoClickNotification:(id) {
	%orig;
	NSLog(@"-(void) handleVideoClickNotification:(id)");
}

-(void) createActiveViewMonitor {
	%orig;
	NSLog(@"-(void) createActiveViewMonitor");
}

-(void) enqueueJSCommandWithUnloaded:(bool) {
	%orig;
	NSLog(@"-(void) enqueueJSCommandWithUnloaded:(bool)");
}

-(id) activeViewJSCommandWithParams:(id) {
	%orig;
	NSLog(@"-(id) activeViewJSCommandWithParams:(id)");
}

-(id) initWithAdView:(id) attributionIconAssetName:(id) attributionTextAssetName:(id) backgroundAssetName:(id) isAdViewOwnedByPublisher:(bool) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id) attributionIconAssetName:(id) attributionTextAssetName:(id) backgroundAssetName:(id) isAdViewOwnedByPublisher:(bool)");
}

-(void) setAssetViews:(id) {
	%orig;
	NSLog(@"-(void) setAssetViews:(id)");
}

-(void) unregisterAdView {
	%orig;
	NSLog(@"-(void) unregisterAdView");
}

-(void) adViewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) adViewDidLayoutSubviews");
}

-(void) adViewDidMoveToSuperview {
	%orig;
	NSLog(@"-(void) adViewDidMoveToSuperview");
}

-(void) replaceAssetWithName:(id) withAssetView:(id) weakReferencePointer:(id*) {
	%orig;
	NSLog(@"-(void) replaceAssetWithName:(id) withAssetView:(id) weakReferencePointer:(id*)");
}

-(void) beginObservingVideoClickNotifications {
	%orig;
	NSLog(@"-(void) beginObservingVideoClickNotifications");
}

-(void) startImpressionMonitoring {
	%orig;
	NSLog(@"-(void) startImpressionMonitoring");
}

-(void) activeViewMonitoringDidStop:(unsigned long long) {
	%orig;
	NSLog(@"-(void) activeViewMonitoringDidStop:(unsigned long long)");
}

-(void) activeViewVisibilityChanged:(bool) {
	%orig;
	NSLog(@"-(void) activeViewVisibilityChanged:(bool)");
}

-(bool) activeViewMonitoringStarted:(unsigned long long) {
	%orig;
	NSLog(@"-(bool) activeViewMonitoringStarted:(unsigned long long)");
}

-(void) activeViewMonitorDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) activeViewMonitorDidRefresh:(id)");
}

-(void) impressionMonitorDidMonitorImpression:(id) {
	%orig;
	NSLog(@"-(void) impressionMonitorDidMonitorImpression:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) handleTap:(id) {
	%orig;
	NSLog(@"-(void) handleTap:(id)");
}

%end

%hook GADNativeAdImage

+(id) nativeAdImagesFromImageConfigurationArray:(id) options:(id) {
	%orig;
	NSLog(@"+(id) nativeAdImagesFromImageConfigurationArray:(id) options:(id)");
}

-(id) initWithURL:(id) scale:(double) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) scale:(double)");
}

-(bool) required {
	%orig;
	NSLog(@"-(bool) required");
}

-(id) imageURL {
	%orig;
	NSLog(@"-(id) imageURL");
}

-(void) setImageURL:(id) {
	%orig;
	NSLog(@"-(void) setImageURL:(id)");
}

-(void) setRequired:(bool) {
	%orig;
	NSLog(@"-(void) setRequired:(bool)");
}

-(void) loadImageWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadImageWithCompletionHandler:(id)");
}

-(id) initWithImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(double) scale {
	%orig;
	NSLog(@"-(double) scale");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(void) setScale:(double) {
	%orig;
	NSLog(@"-(void) setScale:(double)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook GADNativeAdAttribution

-(void) failedLoadingNativeAdImageWithError:(id) {
	%orig;
	NSLog(@"-(void) failedLoadingNativeAdImageWithError:(id)");
}

-(void) finishedLoadingNativeAdImage:(id) {
	%orig;
	NSLog(@"-(void) finishedLoadingNativeAdImage:(id)");
}

-(double) iconPresentationDuration {
	%orig;
	NSLog(@"-(double) iconPresentationDuration");
}

-(double) iconAnimationDuration {
	%orig;
	NSLog(@"-(double) iconAnimationDuration");
}

-(void) loadAssetsWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadAssetsWithCompletionHandler:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) font {
	%orig;
	NSLog(@"-(id) font");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(id) textColor {
	%orig;
	NSLog(@"-(id) textColor");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) icons {
	%orig;
	NSLog(@"-(id) icons");
}

%end

%hook GADNativeAd

+(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"+(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id)");
}

+(id) supportHTMLURL {
	%orig;
	NSLog(@"+(id) supportHTMLURL");
}

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) pingDebugSignal {
	%orig;
	NSLog(@"-(void) pingDebugSignal");
}

-(id) activeViewConfigurations {
	%orig;
	NSLog(@"-(id) activeViewConfigurations");
}

-(void) setActiveViewConfigurations:(id) {
	%orig;
	NSLog(@"-(void) setActiveViewConfigurations:(id)");
}

-(id) debugSignalInformation {
	%orig;
	NSLog(@"-(id) debugSignalInformation");
}

-(void) setDebugSignalInformation:(id) {
	%orig;
	NSLog(@"-(void) setDebugSignalInformation:(id)");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(void) slotWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) slotWillPresentScreen:(id)");
}

-(void) slotWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) slotWillDismissScreen:(id)");
}

-(void) slotDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) slotDidDismissScreen:(id)");
}

-(void) slotWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) slotWillLeaveApplication:(id)");
}

-(void) slotDidRecordImpression:(id) {
	%orig;
	NSLog(@"-(void) slotDidRecordImpression:(id)");
}

-(void) slotDidRecordClick:(id) {
	%orig;
	NSLog(@"-(void) slotDidRecordClick:(id)");
}

-(void) gadNativeAd_commonInit {
	%orig;
	NSLog(@"-(void) gadNativeAd_commonInit");
}

-(void) observeNotificationsFromMediatedNativeAd {
	%orig;
	NSLog(@"-(void) observeNotificationsFromMediatedNativeAd");
}

-(id) mediatedNativeAd {
	%orig;
	NSLog(@"-(id) mediatedNativeAd");
}

-(void) callAndClearAssetLoadCompletionHandlersWithError:(id) {
	%orig;
	NSLog(@"-(void) callAndClearAssetLoadCompletionHandlersWithError:(id)");
}

-(void) notifyLoadingDelegateIfAllRequestedAssetsHaveLoaded {
	%orig;
	NSLog(@"-(void) notifyLoadingDelegateIfAllRequestedAssetsHaveLoaded");
}

-(void) nativeAdViewPolicy:(id) didBeginTrackingView:(id) {
	%orig;
	NSLog(@"-(void) nativeAdViewPolicy:(id) didBeginTrackingView:(id)");
}

-(void) nativeAdViewPolicy:(id) didUnloadNativeAd:(id) fromView:(id) {
	%orig;
	NSLog(@"-(void) nativeAdViewPolicy:(id) didUnloadNativeAd:(id) fromView:(id)");
}

-(bool) hasRecordedImpression {
	%orig;
	NSLog(@"-(bool) hasRecordedImpression");
}

-(void) setExtraAssets:(id) {
	%orig;
	NSLog(@"-(void) setExtraAssets:(id)");
}

-(id) thirdPartyClickTrackingURLs {
	%orig;
	NSLog(@"-(id) thirdPartyClickTrackingURLs");
}

-(void) setThirdPartyClickTrackingURLs:(id) {
	%orig;
	NSLog(@"-(void) setThirdPartyClickTrackingURLs:(id)");
}

-(id) googleClickTrackingURLString {
	%orig;
	NSLog(@"-(id) googleClickTrackingURLString");
}

-(void) setGoogleClickTrackingURLString:(id) {
	%orig;
	NSLog(@"-(void) setGoogleClickTrackingURLString:(id)");
}

-(id) clickActions {
	%orig;
	NSLog(@"-(id) clickActions");
}

-(void) setClickActions:(id) {
	%orig;
	NSLog(@"-(void) setClickActions:(id)");
}

-(bool) publisherRenderAdChoicesAllowed {
	%orig;
	NSLog(@"-(bool) publisherRenderAdChoicesAllowed");
}

-(bool) publisherClickReportingAllowed {
	%orig;
	NSLog(@"-(bool) publisherClickReportingAllowed");
}

-(bool) publisherTouchReportingAllowed {
	%orig;
	NSLog(@"-(bool) publisherTouchReportingAllowed");
}

-(bool) publisherImpressionReportingAllowed {
	%orig;
	NSLog(@"-(bool) publisherImpressionReportingAllowed");
}

-(id) initWithMediatedNativeAd:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithMediatedNativeAd:(id) options:(id)");
}

-(id) mediatedNativeAdDelegate {
	%orig;
	NSLog(@"-(id) mediatedNativeAdDelegate");
}

-(id) extraAssets {
	%orig;
	NSLog(@"-(id) extraAssets");
}

-(void) performClickWithData:(id) {
	%orig;
	NSLog(@"-(void) performClickWithData:(id)");
}

-(void) reportTouchEventWithData:(id) {
	%orig;
	NSLog(@"-(void) reportTouchEventWithData:(id)");
}

-(bool) recordImpressionWithData:(id) {
	%orig;
	NSLog(@"-(bool) recordImpressionWithData:(id)");
}

-(id) requiredAssets {
	%orig;
	NSLog(@"-(id) requiredAssets");
}

-(void) loadAssetsWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadAssetsWithCompletionHandler:(id)");
}

-(bool) shouldLoadAssets {
	%orig;
	NSLog(@"-(bool) shouldLoadAssets");
}

-(void) addAssetWithNameToRequestedAssets:(id) {
	%orig;
	NSLog(@"-(void) addAssetWithNameToRequestedAssets:(id)");
}

-(void) failedToLoadAssetWithName:(id) {
	%orig;
	NSLog(@"-(void) failedToLoadAssetWithName:(id)");
}

-(void) finishedLoadingAssetWithName:(id) {
	%orig;
	NSLog(@"-(void) finishedLoadingAssetWithName:(id)");
}

-(id) mediaContent {
	%orig;
	NSLog(@"-(id) mediaContent");
}

-(id) adChoicesContentView {
	%orig;
	NSLog(@"-(id) adChoicesContentView");
}

-(id) adFormatTemplateID {
	%orig;
	NSLog(@"-(id) adFormatTemplateID");
}

-(void) reportIsMediaContentRendered:(bool) {
	%orig;
	NSLog(@"-(void) reportIsMediaContentRendered:(bool)");
}

-(bool) hasValidConfigurationForRequestParameters:(id) {
	%orig;
	NSLog(@"-(bool) hasValidConfigurationForRequestParameters:(id)");
}

-(void) performClickOnView:(id) assetName:(id) environment:(id) {
	%orig;
	NSLog(@"-(void) performClickOnView:(id) assetName:(id) environment:(id)");
}

-(void) recordImpressionWithEnvironment:(id) {
	%orig;
	NSLog(@"-(void) recordImpressionWithEnvironment:(id)");
}

-(id) adNetworkClassName {
	%orig;
	NSLog(@"-(id) adNetworkClassName");
}

-(void) setAdNetworkClassName:(id) {
	%orig;
	NSLog(@"-(void) setAdNetworkClassName:(id)");
}

-(void) mediatedNativeAdDidRecordClick:(id) {
	%orig;
	NSLog(@"-(void) mediatedNativeAdDidRecordClick:(id)");
}

-(void) mediatedNativeAdWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) mediatedNativeAdWillPresentScreen:(id)");
}

-(void) mediatedNativeAdWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) mediatedNativeAdWillDismissScreen:(id)");
}

-(void) mediatedNativeAdDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) mediatedNativeAdDidDismissScreen:(id)");
}

-(void) mediatedNativeAdWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) mediatedNativeAdWillLeaveApplication:(id)");
}

-(void) setMediatedNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setMediatedNativeAd:(id)");
}

-(void) setPublisherRenderAdChoicesAllowed:(bool) {
	%orig;
	NSLog(@"-(void) setPublisherRenderAdChoicesAllowed:(bool)");
}

-(void) mediatedNativeAdDidRecordImpression:(id) {
	%orig;
	NSLog(@"-(void) mediatedNativeAdDidRecordImpression:(id)");
}

-(void) stopObservingMediatedNativeAd {
	%orig;
	NSLog(@"-(void) stopObservingMediatedNativeAd");
}

-(id) initWithDictionary:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id) options:(id)");
}

-(long long) attributionCorner {
	%orig;
	NSLog(@"-(long long) attributionCorner");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(id) statistics {
	%orig;
	NSLog(@"-(id) statistics");
}

-(id) adConfiguration {
	%orig;
	NSLog(@"-(id) adConfiguration");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(void) setRootViewController:(id) {
	%orig;
	NSLog(@"-(void) setRootViewController:(id)");
}

%end

%hook GADNativeCustomTemplateAd

+(id) requiredDelegateProtocol {
	%orig;
	NSLog(@"+(id) requiredDelegateProtocol");
}

+(id) requestParametersForAdLoader:(id) {
	%orig;
	NSLog(@"+(id) requestParametersForAdLoader:(id)");
}

+(bool) canInitWithAdLoader:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) canInitWithAdLoader:(id) error:(id*)");
}

-(void) recordImpression {
	%orig;
	NSLog(@"-(void) recordImpression");
}

-(id) templateID {
	%orig;
	NSLog(@"-(id) templateID");
}

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(id) initWithMediatedNativeAd:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithMediatedNativeAd:(id) options:(id)");
}

-(id) requiredAssets {
	%orig;
	NSLog(@"-(id) requiredAssets");
}

-(void) loadAssetsWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadAssetsWithCompletionHandler:(id)");
}

-(void) adLoaderDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adLoaderDidReceiveAd:(id)");
}

-(id) adFormatTemplateID {
	%orig;
	NSLog(@"-(id) adFormatTemplateID");
}

-(void) GADNativeCustomTemplateAd_category {
	%orig;
	NSLog(@"-(void) GADNativeCustomTemplateAd_category");
}

-(id) availableAssetKeys {
	%orig;
	NSLog(@"-(id) availableAssetKeys");
}

-(void) removeCustomClickObserver {
	%orig;
	NSLog(@"-(void) removeCustomClickObserver");
}

-(void) handleNativeAdCustomClick:(id) {
	%orig;
	NSLog(@"-(void) handleNativeAdCustomClick:(id)");
}

-(bool) hasValidConfigurationForRequestParameters:(id) {
	%orig;
	NSLog(@"-(bool) hasValidConfigurationForRequestParameters:(id)");
}

-(void) performClickOnAssetWithKey:(id) {
	%orig;
	NSLog(@"-(void) performClickOnAssetWithKey:(id)");
}

-(void) handleVideoClickNotifications {
	%orig;
	NSLog(@"-(void) handleVideoClickNotifications");
}

-(void) loadImageAssetsWithImageDictionary:(id) {
	%orig;
	NSLog(@"-(void) loadImageAssetsWithImageDictionary:(id)");
}

-(void) beginObservingVideoClickNotifications {
	%orig;
	NSLog(@"-(void) beginObservingVideoClickNotifications");
}

-(void) performClickOnAssetWithKey:(id) customClickHandler:(id) {
	%orig;
	NSLog(@"-(void) performClickOnAssetWithKey:(id) customClickHandler:(id)");
}

-(void) setCustomClickHandler:(id) {
	%orig;
	NSLog(@"-(void) setCustomClickHandler:(id)");
}

-(id) customClickHandler {
	%orig;
	NSLog(@"-(id) customClickHandler");
}

-(id) imageForKey:(id) {
	%orig;
	NSLog(@"-(id) imageForKey:(id)");
}

-(void) setImage:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id) forKey:(id)");
}

-(id) initWithDictionary:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id) options:(id)");
}

-(id) mediaView {
	%orig;
	NSLog(@"-(id) mediaView");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) stringForKey:(id) {
	%orig;
	NSLog(@"-(id) stringForKey:(id)");
}

%end

%hook GADNativeContentAd

+(id) requiredDelegateProtocol {
	%orig;
	NSLog(@"+(id) requiredDelegateProtocol");
}

+(id) requestParametersForAdLoader:(id) {
	%orig;
	NSLog(@"+(id) requestParametersForAdLoader:(id)");
}

+(bool) canInitWithAdLoader:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) canInitWithAdLoader:(id) error:(id*)");
}

-(id) callToAction {
	%orig;
	NSLog(@"-(id) callToAction");
}

-(id) adChoicesIcon {
	%orig;
	NSLog(@"-(id) adChoicesIcon");
}

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) GADNativeContentAd_category {
	%orig;
	NSLog(@"-(void) GADNativeContentAd_category");
}

-(id) initWithMediatedNativeAd:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithMediatedNativeAd:(id) options:(id)");
}

-(void) performClickWithData:(id) {
	%orig;
	NSLog(@"-(void) performClickWithData:(id)");
}

-(void) reportTouchEventWithData:(id) {
	%orig;
	NSLog(@"-(void) reportTouchEventWithData:(id)");
}

-(bool) recordImpressionWithData:(id) {
	%orig;
	NSLog(@"-(bool) recordImpressionWithData:(id)");
}

-(void) unregisterAdView {
	%orig;
	NSLog(@"-(void) unregisterAdView");
}

-(id) requiredAssets {
	%orig;
	NSLog(@"-(id) requiredAssets");
}

-(void) loadAssetsWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadAssetsWithCompletionHandler:(id)");
}

-(void) adLoaderDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adLoaderDidReceiveAd:(id)");
}

-(id) mediaContent {
	%orig;
	NSLog(@"-(id) mediaContent");
}

-(id) adChoicesContentView {
	%orig;
	NSLog(@"-(id) adChoicesContentView");
}

-(id) adFormatTemplateID {
	%orig;
	NSLog(@"-(id) adFormatTemplateID");
}

-(void) registerAdView:(id) assetViews:(id) {
	%orig;
	NSLog(@"-(void) registerAdView:(id) assetViews:(id)");
}

-(void) setMediaContent:(id) {
	%orig;
	NSLog(@"-(void) setMediaContent:(id)");
}

-(void) setAdChoicesContentView:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesContentView:(id)");
}

-(id) logo {
	%orig;
	NSLog(@"-(id) logo");
}

-(id) initWithDictionary:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id) options:(id)");
}

-(id) headline {
	%orig;
	NSLog(@"-(id) headline");
}

-(id) advertiser {
	%orig;
	NSLog(@"-(id) advertiser");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) images {
	%orig;
	NSLog(@"-(id) images");
}

-(id) body {
	%orig;
	NSLog(@"-(id) body");
}

-(id) overlayView {
	%orig;
	NSLog(@"-(id) overlayView");
}

%end

%hook GADNativeAppInstallAd

+(id) requiredDelegateProtocol {
	%orig;
	NSLog(@"+(id) requiredDelegateProtocol");
}

+(id) requestParametersForAdLoader:(id) {
	%orig;
	NSLog(@"+(id) requestParametersForAdLoader:(id)");
}

+(bool) canInitWithAdLoader:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) canInitWithAdLoader:(id) error:(id*)");
}

-(id) callToAction {
	%orig;
	NSLog(@"-(id) callToAction");
}

-(id) adChoicesIcon {
	%orig;
	NSLog(@"-(id) adChoicesIcon");
}

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) GADNativeAppInstallAd_category {
	%orig;
	NSLog(@"-(void) GADNativeAppInstallAd_category");
}

-(id) initWithMediatedNativeAd:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithMediatedNativeAd:(id) options:(id)");
}

-(void) performClickWithData:(id) {
	%orig;
	NSLog(@"-(void) performClickWithData:(id)");
}

-(void) reportTouchEventWithData:(id) {
	%orig;
	NSLog(@"-(void) reportTouchEventWithData:(id)");
}

-(bool) recordImpressionWithData:(id) {
	%orig;
	NSLog(@"-(bool) recordImpressionWithData:(id)");
}

-(void) unregisterAdView {
	%orig;
	NSLog(@"-(void) unregisterAdView");
}

-(id) requiredAssets {
	%orig;
	NSLog(@"-(id) requiredAssets");
}

-(void) loadAssetsWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadAssetsWithCompletionHandler:(id)");
}

-(void) adLoaderDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adLoaderDidReceiveAd:(id)");
}

-(id) mediaContent {
	%orig;
	NSLog(@"-(id) mediaContent");
}

-(id) adChoicesContentView {
	%orig;
	NSLog(@"-(id) adChoicesContentView");
}

-(id) adFormatTemplateID {
	%orig;
	NSLog(@"-(id) adFormatTemplateID");
}

-(void) registerAdView:(id) assetViews:(id) {
	%orig;
	NSLog(@"-(void) registerAdView:(id) assetViews:(id)");
}

-(void) setMediaContent:(id) {
	%orig;
	NSLog(@"-(void) setMediaContent:(id)");
}

-(void) setAdChoicesContentView:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesContentView:(id)");
}

-(id) price {
	%orig;
	NSLog(@"-(id) price");
}

-(id) starRating {
	%orig;
	NSLog(@"-(id) starRating");
}

-(id) initWithDictionary:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id) options:(id)");
}

-(id) headline {
	%orig;
	NSLog(@"-(id) headline");
}

-(id) store {
	%orig;
	NSLog(@"-(id) store");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) icon {
	%orig;
	NSLog(@"-(id) icon");
}

-(id) images {
	%orig;
	NSLog(@"-(id) images");
}

-(id) body {
	%orig;
	NSLog(@"-(id) body");
}

-(id) overlayView {
	%orig;
	NSLog(@"-(id) overlayView");
}

%end

%hook GADMediaContent

+(id) videoSupportURL {
	%orig;
	NSLog(@"+(id) videoSupportURL");
}

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) handleJavaScriptLoadedNotification:(id) {
	%orig;
	NSLog(@"-(void) handleJavaScriptLoadedNotification:(id)");
}

-(void) notifyVideoLoadCompletedWithError:(id) {
	%orig;
	NSLog(@"-(void) notifyVideoLoadCompletedWithError:(id)");
}

-(void) slot:(id) didLoadVideoWithSize:(CGSize) {
	%orig;
	NSLog(@"-(void) slot:(id) didLoadVideoWithSize:(CGSize)");
}

-(void) slotFinishedLoadingAdContent:(id) {
	%orig;
	NSLog(@"-(void) slotFinishedLoadingAdContent:(id)");
}

-(void) slot:(id) didFailToLoadAdContentWithError:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didFailToLoadAdContentWithError:(id)");
}

-(CGRect) frameInInterface {
	%orig;
	NSLog(@"-(CGRect) frameInInterface");
}

-(void) loadVideoWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadVideoWithCompletionHandler:(id)");
}

-(id) initWithVideoDictionary:(id) placeholderImage:(id) videoOptions:(id) {
	%orig;
	NSLog(@"-(id) initWithVideoDictionary:(id) placeholderImage:(id) videoOptions:(id)");
}

-(id) mediaView {
	%orig;
	NSLog(@"-(id) mediaView");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook GADViewHierarchyTraverser

-(void) setTraversing:(bool) {
	%orig;
	NSLog(@"-(void) setTraversing:(bool)");
}

-(void) traverseView:(id) traversalBlock:(id) completionBlock:(?) {
	%orig;
	NSLog(@"-(void) traverseView:(id) traversalBlock:(id) completionBlock:(?)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADSKStoreProductViewControllerDelegate

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) productViewControllerDidFinish:(id) {
	%orig;
	NSLog(@"-(void) productViewControllerDidFinish:(id)");
}

%end

%hook GADPublicKey

-(id) initWithCertificateData:(id) {
	%orig;
	NSLog(@"-(id) initWithCertificateData:(id)");
}

-(bool) isSignatureValid:(id) forMessage:(id) {
	%orig;
	NSLog(@"-(bool) isSignatureValid:(id) forMessage:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

%end

%hook GADCrashReporter

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) reportUncaughtException:(id) {
	%orig;
	NSLog(@"-(void) reportUncaughtException:(id)");
}

-(void) handleUncaughtException:(id) {
	%orig;
	NSLog(@"-(void) handleUncaughtException:(id)");
}

-(bool) reportingEnabled {
	%orig;
	NSLog(@"-(bool) reportingEnabled");
}

-(void) setReportingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setReportingEnabled:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook GADShingleHashTuple

-(id) initWithShingle:(id) hashValue:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithShingle:(id) hashValue:(unsigned long long)");
}

-(id) shingle {
	%orig;
	NSLog(@"-(id) shingle");
}

-(unsigned long long) hashValue {
	%orig;
	NSLog(@"-(unsigned long long) hashValue");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADContentQueue

-(id) initWithQueueSize:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithQueueSize:(unsigned long long)");
}

-(id) contentWithHighestScore {
	%orig;
	NSLog(@"-(id) contentWithHighestScore");
}

-(id) contentWithSequenceNumber:(unsigned long long) {
	%orig;
	NSLog(@"-(id) contentWithSequenceNumber:(unsigned long long)");
}

-(void) deduplicate:(id) {
	%orig;
	NSLog(@"-(void) deduplicate:(id)");
}

-(void) enqueueContent:(id) {
	%orig;
	NSLog(@"-(void) enqueueContent:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADContent

-(void) selectShinglesFromTokens:(id) {
	%orig;
	NSLog(@"-(void) selectShinglesFromTokens:(id)");
}

-(id) shingleHash {
	%orig;
	NSLog(@"-(id) shingleHash");
}

-(void) updateHeapWithHash:(unsigned long long) shingle:(id) {
	%orig;
	NSLog(@"-(void) updateHeapWithHash:(unsigned long long) shingle:(id)");
}

-(void) applyRollingHashToTokens:(id) baseHash:(unsigned long long) {
	%orig;
	NSLog(@"-(void) applyRollingHashToTokens:(id) baseHash:(unsigned long long)");
}

-(void) deductServedPenalty {
	%orig;
	NSLog(@"-(void) deductServedPenalty");
}

-(void) updateContentWithText:(id) {
	%orig;
	NSLog(@"-(void) updateContentWithText:(id)");
}

-(unsigned long long) sequenceNumber {
	%orig;
	NSLog(@"-(unsigned long long) sequenceNumber");
}

-(id) initWithSequenceNumber:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithSequenceNumber:(unsigned long long)");
}

-(id) fingerprint {
	%orig;
	NSLog(@"-(id) fingerprint");
}

-(long long) score {
	%orig;
	NSLog(@"-(long long) score");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADCharacterSets

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) updateCharacterSets {
	%orig;
	NSLog(@"-(void) updateCharacterSets");
}

-(id) characterDelimitedSet {
	%orig;
	NSLog(@"-(id) characterDelimitedSet");
}

-(id) spaceDelimitedSet {
	%orig;
	NSLog(@"-(id) spaceDelimitedSet");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADLoggingHierarchy

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) setLogger:(id) forRootObject:(id) {
	%orig;
	NSLog(@"-(void) setLogger:(id) forRootObject:(id)");
}

-(id) rootObjectForObject:(id) {
	%orig;
	NSLog(@"-(id) rootObjectForObject:(id)");
}

-(void) linkObject:(id) withChildObjects:(id) {
	%orig;
	NSLog(@"-(void) linkObject:(id) withChildObjects:(id)");
}

-(void) removeLogger:(id) {
	%orig;
	NSLog(@"-(void) removeLogger:(id)");
}

-(id) loggerForObject:(id) {
	%orig;
	NSLog(@"-(id) loggerForObject:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) removeObject:(id) {
	%orig;
	NSLog(@"-(void) removeObject:(id)");
}

%end

%hook GADClearcutTimerCommandExecutor

-(void) asynchronouslyExecuteCommands:(id) {
	%orig;
	NSLog(@"-(void) asynchronouslyExecuteCommands:(id)");
}

-(void) sendBeacon {
	%orig;
	NSLog(@"-(void) sendBeacon");
}

-(id) initWithClearcutCommandExecutor:(id) timeInterval:(double) {
	%orig;
	NSLog(@"-(id) initWithClearcutCommandExecutor:(id) timeInterval:(double)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

%end

%hook GADClearcutLogger

-(void) reportBufferedParameters:(id) {
	%orig;
	NSLog(@"-(void) reportBufferedParameters:(id)");
}

-(id) clearcutParametersFromEvent:(id) {
	%orig;
	NSLog(@"-(id) clearcutParametersFromEvent:(id)");
}

-(bool) environmentReported {
	%orig;
	NSLog(@"-(bool) environmentReported");
}

-(void) reportEnvironment {
	%orig;
	NSLog(@"-(void) reportEnvironment");
}

-(bool) experimentIDsReported {
	%orig;
	NSLog(@"-(bool) experimentIDsReported");
}

-(void) reportExperimentIDs {
	%orig;
	NSLog(@"-(void) reportExperimentIDs");
}

-(void) executeClearcutCommandWithParameter:(id) {
	%orig;
	NSLog(@"-(void) executeClearcutCommandWithParameter:(id)");
}

-(void) setEnvironmentReported:(bool) {
	%orig;
	NSLog(@"-(void) setEnvironmentReported:(bool)");
}

-(void) setExperimentIDsReported:(bool) {
	%orig;
	NSLog(@"-(void) setExperimentIDsReported:(bool)");
}

-(void) reportEvent:(id) {
	%orig;
	NSLog(@"-(void) reportEvent:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADClearcutJSCoreCommandExecutor

-(void) handleNetworkIOWithParameters:(id) successCallback:(id) failureCallback:(id) {
	%orig;
	NSLog(@"-(void) handleNetworkIOWithParameters:(id) successCallback:(id) failureCallback:(id)");
}

-(void) asynchronouslyExecuteCommands:(id) {
	%orig;
	NSLog(@"-(void) asynchronouslyExecuteCommands:(id)");
}

-(id) initWithScript:(id) {
	%orig;
	NSLog(@"-(id) initWithScript:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

%end

%hook GADClearcutConfig

-(long long) maxBufferedCommandSize {
	%orig;
	NSLog(@"-(long long) maxBufferedCommandSize");
}

-(bool) useJSCore {
	%orig;
	NSLog(@"-(bool) useJSCore");
}

-(id) JSConfig {
	%orig;
	NSLog(@"-(id) JSConfig");
}

-(id) scriptURL {
	%orig;
	NSLog(@"-(id) scriptURL");
}

-(double) beaconInterval {
	%orig;
	NSLog(@"-(double) beaconInterval");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(bool) enabled {
	%orig;
	NSLog(@"-(bool) enabled");
}

-(id) baseURL {
	%orig;
	NSLog(@"-(id) baseURL");
}

%end

%hook GADClearcutAdViewCommandExecutor

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(id) initWithScript:(id) baseURL:(id) {
	%orig;
	NSLog(@"-(id) initWithScript:(id) baseURL:(id)");
}

-(void) adViewWebProcessDidTerminate:(id) {
	%orig;
	NSLog(@"-(void) adViewWebProcessDidTerminate:(id)");
}

-(void) asynchronouslyExecuteCommands:(id) {
	%orig;
	NSLog(@"-(void) asynchronouslyExecuteCommands:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

%end

%hook GADClearcut

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) resetUpdateCheckingState {
	%orig;
	NSLog(@"-(void) resetUpdateCheckingState");
}

-(void) updateCommandExecutorWithConfig:(id) script:(id) {
	%orig;
	NSLog(@"-(void) updateCommandExecutorWithConfig:(id) script:(id)");
}

-(id) nextUniqueID {
	%orig;
	NSLog(@"-(id) nextUniqueID");
}

-(void) asynchronouslyExecuteCommands:(id) {
	%orig;
	NSLog(@"-(void) asynchronouslyExecuteCommands:(id)");
}

-(void) updateIfNeeded {
	%orig;
	NSLog(@"-(void) updateIfNeeded");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

%end

%hook GADBufferedClearcutLogger

-(void) bufferParameters:(id) {
	%orig;
	NSLog(@"-(void) bufferParameters:(id)");
}

-(void) bufferEvent:(id) {
	%orig;
	NSLog(@"-(void) bufferEvent:(id)");
}

-(void) reportBufferedEventsToLogger:(id) {
	%orig;
	NSLog(@"-(void) reportBufferedEventsToLogger:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADCategories

-(void) linkCategoriesAndClasses {
	%orig;
	NSLog(@"-(void) linkCategoriesAndClasses");
}

%end

%hook GADVersionedCache

-(void) resourceCache:(id) didFailCachingWithError:(id) {
	%orig;
	NSLog(@"-(void) resourceCache:(id) didFailCachingWithError:(id)");
}

-(void) resourceCacheDidSucceedCaching:(id) {
	%orig;
	NSLog(@"-(void) resourceCacheDidSucceedCaching:(id)");
}

-(void) executeCompletionBlock:(id) onMainThreadWithError:(?) {
	%orig;
	NSLog(@"-(void) executeCompletionBlock:(id) onMainThreadWithError:(?)");
}

-(void) resetStateAndNotifyCompletionBlockWithError:(id) {
	%orig;
	NSLog(@"-(void) resetStateAndNotifyCompletionBlockWithError:(id)");
}

-(id) initWithCacheID:(id) {
	%orig;
	NSLog(@"-(id) initWithCacheID:(id)");
}

-(id) cacheData {
	%orig;
	NSLog(@"-(id) cacheData");
}

-(void) updateWithURL:(id) version:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) updateWithURL:(id) version:(id) completionBlock:(id)");
}

-(void) resetState {
	%orig;
	NSLog(@"-(void) resetState");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

%end

%hook GADResourceCache

-(id) initWithRequest:(id) fileURL:(id) contentType:(id) contentLength:(long long) removeFileOnDealloc:(bool) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) fileURL:(id) contentType:(id) contentLength:(long long) removeFileOnDealloc:(bool)");
}

-(double) networkSpeedInBytesPerSecond {
	%orig;
	NSLog(@"-(double) networkSpeedInBytesPerSecond");
}

-(void) commonInitWithRequest:(id) fileURL:(id) removeFileOnDealloc:(bool) {
	%orig;
	NSLog(@"-(void) commonInitWithRequest:(id) fileURL:(id) removeFileOnDealloc:(bool)");
}

-(void) cachingDidCompleteWithError:(id) {
	%orig;
	NSLog(@"-(void) cachingDidCompleteWithError:(id)");
}

-(void) appendDataToFile:(id) {
	%orig;
	NSLog(@"-(void) appendDataToFile:(id)");
}

-(id) initWithRequest:(id) fileURL:(id) removeFileOnDealloc:(bool) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) fileURL:(id) removeFileOnDealloc:(bool)");
}

-(id) initWithURLRequest:(id) cacheID:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) initWithURLRequest:(id) cacheID:(id) error:(id*)");
}

-(id) dataWithRange:(_NSRange) error:(id*) {
	%orig;
	NSLog(@"-(id) dataWithRange:(_NSRange) error:(id*)");
}

-(bool) responseHeadersReceived {
	%orig;
	NSLog(@"-(bool) responseHeadersReceived");
}

-(void) setMaxBytes:(long long) {
	%orig;
	NSLog(@"-(void) setMaxBytes:(long long)");
}

-(long long) contentLength {
	%orig;
	NSLog(@"-(long long) contentLength");
}

-(bool) completed {
	%orig;
	NSLog(@"-(bool) completed");
}

-(long long) maxBytes {
	%orig;
	NSLog(@"-(long long) maxBytes");
}

-(long long) cachedContentSize {
	%orig;
	NSLog(@"-(long long) cachedContentSize");
}

-(id) cacheID {
	%orig;
	NSLog(@"-(id) cacheID");
}

-(id) connection:(id) willSendRequest:(id) redirectResponse:(id) {
	%orig;
	NSLog(@"-(id) connection:(id) willSendRequest:(id) redirectResponse:(id)");
}

-(void) cancelWithError:(id) {
	%orig;
	NSLog(@"-(void) cancelWithError:(id)");
}

-(id) contentType {
	%orig;
	NSLog(@"-(id) contentType");
}

-(id) responseHeaders {
	%orig;
	NSLog(@"-(id) responseHeaders");
}

-(void) addResponseHeaders:(id) {
	%orig;
	NSLog(@"-(void) addResponseHeaders:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) valid {
	%orig;
	NSLog(@"-(bool) valid");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) fileURL {
	%orig;
	NSLog(@"-(id) fileURL");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(bool) started {
	%orig;
	NSLog(@"-(bool) started");
}

-(void) connection:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didFailWithError:(id)");
}

-(void) connection:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveData:(id)");
}

-(void) connectionDidFinishLoading:(id) {
	%orig;
	NSLog(@"-(void) connectionDidFinishLoading:(id)");
}

-(void) connection:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveResponse:(id)");
}

%end

%hook GADGCacheURLLoader

-(void) requestGCacheURLLoad:(id) withCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) requestGCacheURLLoad:(id) withCompletionBlock:(id)");
}

-(void) loadGCacheURL:(id) withCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) loadGCacheURL:(id) withCompletionBlock:(id)");
}

-(void) prefetchGCacheURL:(id) {
	%orig;
	NSLog(@"-(void) prefetchGCacheURL:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(bool) shouldBufferNotification:(id) adView:(id) {
	%orig;
	NSLog(@"-(bool) shouldBufferNotification:(id) adView:(id)");
}

-(bool) handleNotification:(id) adView:(id) {
	%orig;
	NSLog(@"-(bool) handleNotification:(id) adView:(id)");
}

-(bool) handleRequest:(id) adView:(id) {
	%orig;
	NSLog(@"-(bool) handleRequest:(id) adView:(id)");
}

-(void) flushBuffer {
	%orig;
	NSLog(@"-(void) flushBuffer");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADMRAIDGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

+(id) subActionBlockDictionary {
	%orig;
	NSLog(@"+(id) subActionBlockDictionary");
}

-(id) initWithOpener:(id) {
	%orig;
	NSLog(@"-(id) initWithOpener:(id)");
}

-(void) adView:(id) didReceiveMRAIDNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveMRAIDNotification:(id)");
}

-(void) adView:(id) didReceiveMRAIDLoadNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveMRAIDLoadNotification:(id)");
}

-(void) adView:(id) actionResize:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionResize:(id)");
}

-(void) adView:(id) actionStorePicture:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionStorePicture:(id)");
}

-(void) adView:(id) actionCreateCalendarEvent:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionCreateCalendarEvent:(id)");
}

-(void) adView:(id) actionSetOrientationProperties:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionSetOrientationProperties:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADVideoPlayerGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

+(id) subActionBlockDictionary {
	%orig;
	NSLog(@"+(id) subActionBlockDictionary");
}

-(void) adView:(id) didReceiveVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveVideoAction:(id)");
}

-(void) adView:(id) didReceivePrecacheAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceivePrecacheAction:(id)");
}

-(void) adView:(id) didReceiveNewVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveNewVideoAction:(id)");
}

-(void) adView:(id) didReceivePositionVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceivePositionVideoAction:(id)");
}

-(void) adView:(id) didReceiveSetVideoSourceAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveSetVideoSourceAction:(id)");
}

-(void) adView:(id) didReceiveLoadVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveLoadVideoAction:(id)");
}

-(void) adView:(id) didReceiveLoadControlVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveLoadControlVideoAction:(id)");
}

-(void) adView:(id) didReceivePlayVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceivePlayVideoAction:(id)");
}

-(void) adView:(id) didReceivePauseVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceivePauseVideoAction:(id)");
}

-(void) adView:(id) didReceiveSetVolumeAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveSetVolumeAction:(id)");
}

-(void) adView:(id) didReceiveMutedVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveMutedVideoAction:(id)");
}

-(void) adView:(id) didReceiveSeekToCurrentTimeAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveSeekToCurrentTimeAction:(id)");
}

-(void) adView:(id) didReceiveHideVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveHideVideoAction:(id)");
}

-(void) adView:(id) didReceiveShowVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveShowVideoAction:(id)");
}

-(void) adView:(id) didReceiveRotationVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveRotationVideoAction:(id)");
}

-(void) adView:(id) didReceiveBackgroundAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveBackgroundAction:(id)");
}

-(void) adView:(id) didReceiveTouchMoveAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveTouchMoveAction:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADVideoMetadataGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) didReceiveVideoMetadataAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveVideoMetadataAction:(id)");
}

%end

%hook GADSDKCoreGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(id) resourceCacheForFileURL:(id) {
	%orig;
	NSLog(@"-(id) resourceCacheForFileURL:(id)");
}

-(void) resourceCacheDidStartCaching:(id) {
	%orig;
	NSLog(@"-(void) resourceCacheDidStartCaching:(id)");
}

-(void) resourceCache:(id) didFailCachingWithError:(id) {
	%orig;
	NSLog(@"-(void) resourceCache:(id) didFailCachingWithError:(id)");
}

-(void) resourceCacheDidSucceedCaching:(id) {
	%orig;
	NSLog(@"-(void) resourceCacheDidSucceedCaching:(id)");
}

-(void) resourceCacheDidReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) resourceCacheDidReceiveResponse:(id)");
}

-(void) adView:(id) didReceiveloadAdURLAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveloadAdURLAction:(id)");
}

-(void) adView:(id) didReceiveLoadAdAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveLoadAdAction:(id)");
}

-(void) adView:(id) didReceiveInvalidAdRequestAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveInvalidAdRequestAction:(id)");
}

-(void) adView:(id) didReceiveloadSDKConstantsAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveloadSDKConstantsAction:(id)");
}

-(void) adView:(id) didReceiveFetchAdAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveFetchAdAction:(id)");
}

-(void) adView:(id) didReceiveSDKCoreReloadRequestWithParameters:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveSDKCoreReloadRequestWithParameters:(id)");
}

-(void) adView:(id) didReceiveAppSettings:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveAppSettings:(id)");
}

-(void) adView:(id) didReceiveSDKCoreSaveState:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveSDKCoreSaveState:(id)");
}

-(void) adView:(id) didReceiveResultAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveResultAction:(id)");
}

-(void) adView:(id) didReceiveCacheResourceAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveCacheResourceAction:(id)");
}

-(void) adView:(id) didReceiveRemoveResourceAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveRemoveResourceAction:(id)");
}

-(void) adView:(id) didReceiveResourceStatusCheckAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveResourceStatusCheckAction:(id)");
}

-(void) adView:(id) didReceiveCleanupCacheDirectoryAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveCleanupCacheDirectoryAction:(id)");
}

-(void) adView:(id) didReceiveSDKCoreRefreshAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveSDKCoreRefreshAction:(id)");
}

-(void) failedToFetchAd:(id) forRequestID:(id) withError:(id) responseCode:(long long) {
	%orig;
	NSLog(@"-(void) failedToFetchAd:(id) forRequestID:(id) withError:(id) responseCode:(long long)");
}

-(bool) isFetchInProgressForFetchRequestID:(id) {
	%orig;
	NSLog(@"-(bool) isFetchInProgressForFetchRequestID:(id)");
}

-(void) setAdFetcher:(id) forFetchRequestID:(id) {
	%orig;
	NSLog(@"-(void) setAdFetcher:(id) forFetchRequestID:(id)");
}

-(void) notifyResourceCache:(id) status:(id) cachingInProgress:(bool) error:(id) {
	%orig;
	NSLog(@"-(void) notifyResourceCache:(id) status:(id) cachingInProgress:(bool) error:(id)");
}

-(void) notifyCacheDictionary:(id) fileDictionary:(id) requestID:(id) error:(id) {
	%orig;
	NSLog(@"-(void) notifyCacheDictionary:(id) fileDictionary:(id) requestID:(id) error:(id)");
}

-(id) SDKCoreWebView {
	%orig;
	NSLog(@"-(id) SDKCoreWebView");
}

-(id) fetchRequestIDForAdFetcher:(id) {
	%orig;
	NSLog(@"-(id) fetchRequestIDForAdFetcher:(id)");
}

-(void) fetchedAd:(id) forFetchRequestID:(id) responseCode:(long long) {
	%orig;
	NSLog(@"-(void) fetchedAd:(id) forFetchRequestID:(id) responseCode:(long long)");
}

-(void) removeAdFetcherForFetchRequestID:(id) {
	%orig;
	NSLog(@"-(void) removeAdFetcherForFetchRequestID:(id)");
}

-(id) requestIDForResourceCache:(id) {
	%orig;
	NSLog(@"-(id) requestIDForResourceCache:(id)");
}

-(void) adFetcher:(id) didFetchAd:(id) {
	%orig;
	NSLog(@"-(void) adFetcher:(id) didFetchAd:(id)");
}

-(void) adFetcher:(id) didFailToFetchAd:(id) withError:(id) responseCode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) adFetcher:(id) didFailToFetchAd:(id) withError:(id) responseCode:(unsigned long long)");
}

-(void) setSDKCoreWebView:(id) {
	%orig;
	NSLog(@"-(void) setSDKCoreWebView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook GADRewardBasedVideoAdGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) didReceiveRewardBasedVideoAdAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveRewardBasedVideoAdAction:(id)");
}

-(void) adView:(id) didReceiveStartVideoAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveStartVideoAction:(id)");
}

-(void) adView:(id) didReceiveGrantRewardAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveGrantRewardAction:(id)");
}

%end

%hook GADOrientationGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) didReceiveForcedOrientationAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveForcedOrientationAction:(id)");
}

%end

%hook GADOpenerGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

+(id) subActionBlockDictionary {
	%orig;
	NSLog(@"+(id) subActionBlockDictionary");
}

-(void) adView:(id) didReceiveClickNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveClickNotification:(id)");
}

-(void) adView:(id) didReceiveOpenNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveOpenNotification:(id)");
}

-(void) adView:(id) fetchInAppStore:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) fetchInAppStore:(id)");
}

-(void) adView:(id) actionOpenInAppStore:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionOpenInAppStore:(id)");
}

-(void) adView:(id) actionOpenBrowser:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionOpenBrowser:(id)");
}

-(void) adView:(id) actionOpenWebApp:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionOpenWebApp:(id)");
}

-(void) adView:(id) actionExpand:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionExpand:(id)");
}

-(void) adView:(id) actionOpenApp:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionOpenApp:(id)");
}

-(void) adView:(id) actionOpenAppLink:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionOpenAppLink:(id)");
}

-(void) adView:(id) actionOpenInlineSafari:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) actionOpenInlineSafari:(id)");
}

-(id) opener {
	%orig;
	NSLog(@"-(id) opener");
}

-(id) URLFromParams:(id) key:(id) {
	%orig;
	NSLog(@"-(id) URLFromParams:(id) key:(id)");
}

-(unsigned long long) orientationFromParams:(id) {
	%orig;
	NSLog(@"-(unsigned long long) orientationFromParams:(id)");
}

-(bool) shouldUseCustomClose:(id) {
	%orig;
	NSLog(@"-(bool) shouldUseCustomClose:(id)");
}

-(id) initWithOpener:(id) {
	%orig;
	NSLog(@"-(id) initWithOpener:(id)");
}

-(void) setOpener:(id) {
	%orig;
	NSLog(@"-(void) setOpener:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADNativeAdVideoClickGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) didReceiveClickNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveClickNotification:(id)");
}

%end

%hook GADDelayPageLoadGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) delayPageLoadWithArguments:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) delayPageLoadWithArguments:(id)");
}

-(void) handleDelayLoadWithParameters:(id) {
	%orig;
	NSLog(@"-(void) handleDelayLoadWithParameters:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

%end

%hook GADDelayPageCloseGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(bool) shouldBufferNotification:(id) adView:(id) {
	%orig;
	NSLog(@"-(bool) shouldBufferNotification:(id) adView:(id)");
}

-(void) adView:(id) didReceiveDelayPageCloseAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveDelayPageCloseAction:(id)");
}

%end

%hook GADDefaultGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

+(long long) integerForKey:(id) fromDictionary:(id) withDefaultValue:(long long) {
	%orig;
	NSLog(@"+(long long) integerForKey:(id) fromDictionary:(id) withDefaultValue:(long long)");
}

-(void) adView:(id) didReceiveTrackHTTPNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveTrackHTTPNotification:(id)");
}

-(void) adView:(id) didReceiveLogNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveLogNotification:(id)");
}

-(void) adView:(id) didReceiveTouchNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveTouchNotification:(id)");
}

-(void) adView:(id) didReceiveVibrateNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveVibrateNotification:(id)");
}

-(void) adView:(id) didReceiveCanOpenURLsNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveCanOpenURLsNotification:(id)");
}

-(void) adView:(id) didReceiveCloseNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveCloseNotification:(id)");
}

%end

%hook GADCSIGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

+(id) subActionBlockDictionary {
	%orig;
	NSLog(@"+(id) subActionBlockDictionary");
}

-(void) adView:(id) didReceiveCSINotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveCSINotification:(id)");
}

-(void) adView:(id) didReceiveTickAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveTickAction:(id)");
}

-(void) adView:(id) didReceiveExperimentAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveExperimentAction:(id)");
}

-(void) adView:(id) didReceiveExtraAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveExtraAction:(id)");
}

-(id) CSI {
	%orig;
	NSLog(@"-(id) CSI");
}

-(id) CSIDelegate {
	%orig;
	NSLog(@"-(id) CSIDelegate");
}

-(void) setCSIDelegate:(id) {
	%orig;
	NSLog(@"-(void) setCSIDelegate:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAppEventGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) didReceiveAppEventNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveAppEventNotification:(id)");
}

-(bool) shouldBufferNotification:(id) adView:(id) {
	%orig;
	NSLog(@"-(bool) shouldBufferNotification:(id) adView:(id)");
}

-(id) initWithSlot:(id) {
	%orig;
	NSLog(@"-(id) initWithSlot:(id)");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAnalyticsGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) didReceiveLogEventNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveLogEventNotification:(id)");
}

%end

%hook GADAdRefreshGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) didReceiveRefreshAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveRefreshAction:(id)");
}

-(id) initWithOpener:(id) {
	%orig;
	NSLog(@"-(id) initWithOpener:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAdAppGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) configureCustomCloseButtonWithArguments:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) configureCustomCloseButtonWithArguments:(id)");
}

-(void) adView:(id) updateInterstitialPropertiesWithArguments:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) updateInterstitialPropertiesWithArguments:(id)");
}

-(bool) shouldBufferNotification:(id) adView:(id) {
	%orig;
	NSLog(@"-(bool) shouldBufferNotification:(id) adView:(id)");
}

%end

%hook GADActiveViewGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

-(void) adView:(id) didReceiveActiveViewTrackActiveViewNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveActiveViewTrackActiveViewNotification:(id)");
}

-(void) adView:(id) didReceiveActiveViewUntrackActiveViewNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveActiveViewUntrackActiveViewNotification:(id)");
}

-(void) adView:(id) didReceiveActiveViewVisibilityChangedNotification:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveActiveViewVisibilityChangedNotification:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook GADGCacheGMSGHandler

+(id) actionBlockDictionary {
	%orig;
	NSLog(@"+(id) actionBlockDictionary");
}

+(id) subActionBlockDictionary {
	%orig;
	NSLog(@"+(id) subActionBlockDictionary");
}

-(void) adView:(id) didReceiveGCacheAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveGCacheAction:(id)");
}

-(void) adView:(id) didReceiveStartCacheAction:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didReceiveStartCacheAction:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADCSIVariableTiming

-(id) initWithName:(id) startTime:(double) {
	%orig;
	NSLog(@"-(id) initWithName:(id) startTime:(double)");
}

-(void) resigningActive {
	%orig;
	NSLog(@"-(void) resigningActive");
}

-(double) length {
	%orig;
	NSLog(@"-(double) length");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(double) start {
	%orig;
	NSLog(@"-(double) start");
}

-(void) setLength:(double) {
	%orig;
	NSLog(@"-(void) setLength:(double)");
}

-(void) setStart:(double) {
	%orig;
	NSLog(@"-(void) setStart:(double)");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook GADCSITimeRecorder

+(double) currentTime {
	%orig;
	NSLog(@"+(double) currentTime");
}

-(void) startTimingVariableWithName:(id) key:(id) {
	%orig;
	NSLog(@"-(void) startTimingVariableWithName:(id) key:(id)");
}

-(void) endTimingVariableWithName:(id) key:(id) {
	%orig;
	NSLog(@"-(void) endTimingVariableWithName:(id) key:(id)");
}

-(double) durationAfterCommonEndTimingVariableWithName:(id) key:(id) {
	%orig;
	NSLog(@"-(double) durationAfterCommonEndTimingVariableWithName:(id) key:(id)");
}

-(void) cancelTimingVariableWithName:(id) key:(id) {
	%orig;
	NSLog(@"-(void) cancelTimingVariableWithName:(id) key:(id)");
}

-(void) addCompletedVariable:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) addCompletedVariable:(id) forKey:(id)");
}

-(void) startTimingVariableWithName:(id) {
	%orig;
	NSLog(@"-(void) startTimingVariableWithName:(id)");
}

-(void) endTimingVariableWithName:(id) {
	%orig;
	NSLog(@"-(void) endTimingVariableWithName:(id)");
}

-(long long) durationAfterEndTimingVariableWithName:(id) {
	%orig;
	NSLog(@"-(long long) durationAfterEndTimingVariableWithName:(id)");
}

-(void) cancelTimingVariableWithName:(id) {
	%orig;
	NSLog(@"-(void) cancelTimingVariableWithName:(id)");
}

-(id) ongoingVariables {
	%orig;
	NSLog(@"-(id) ongoingVariables");
}

-(id) completedVariables {
	%orig;
	NSLog(@"-(id) completedVariables");
}

-(void) addCompletedVariable:(id) {
	%orig;
	NSLog(@"-(void) addCompletedVariable:(id)");
}

-(void) removeCompletedVariableForKey:(id) {
	%orig;
	NSLog(@"-(void) removeCompletedVariableForKey:(id)");
}

-(void) addExperimentID:(id) {
	%orig;
	NSLog(@"-(void) addExperimentID:(id)");
}

-(void) removeExperimentID:(id) {
	%orig;
	NSLog(@"-(void) removeExperimentID:(id)");
}

-(void) setCustomizedParameterValue:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setCustomizedParameterValue:(id) forKey:(id)");
}

-(id) experimentIDs {
	%orig;
	NSLog(@"-(id) experimentIDs");
}

-(id) customizedParameters {
	%orig;
	NSLog(@"-(id) customizedParameters");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) action {
	%orig;
	NSLog(@"-(id) action");
}

-(id) initWithAction:(id) {
	%orig;
	NSLog(@"-(id) initWithAction:(id)");
}

-(void) setAction:(id) {
	%orig;
	NSLog(@"-(void) setAction:(id)");
}

%end

%hook GADCSIReporter

-(id) URLForTimeRecorder:(id) {
	%orig;
	NSLog(@"-(id) URLForTimeRecorder:(id)");
}

-(void) reportTimeRecorder:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) reportTimeRecorder:(id) completionBlock:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithConfiguration:(id)");
}

%end

%hook GADCSIConfiguration

+(id) defaultConfiguration {
	%orig;
	NSLog(@"+(id) defaultConfiguration");
}

-(void) setReportingProbability:(float) {
	%orig;
	NSLog(@"-(void) setReportingProbability:(float)");
}

-(bool) reportingEnabled {
	%orig;
	NSLog(@"-(bool) reportingEnabled");
}

-(void) setReportingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setReportingEnabled:(bool)");
}

-(id) server {
	%orig;
	NSLog(@"-(id) server");
}

-(void) setServiceName:(id) {
	%orig;
	NSLog(@"-(void) setServiceName:(id)");
}

-(void) setServer:(id) {
	%orig;
	NSLog(@"-(void) setServer:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setVersion:(long long) {
	%orig;
	NSLog(@"-(void) setVersion:(long long)");
}

-(long long) version {
	%orig;
	NSLog(@"-(long long) version");
}

-(id) serviceName {
	%orig;
	NSLog(@"-(id) serviceName");
}

-(id) initWithServiceName:(id) {
	%orig;
	NSLog(@"-(id) initWithServiceName:(id)");
}

%end

%hook GADCSI

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) GWSQueryID {
	%orig;
	NSLog(@"-(id) GWSQueryID");
}

-(void) setGWSQueryID:(id) {
	%orig;
	NSLog(@"-(void) setGWSQueryID:(id)");
}

-(void) setTimestamp:(long long) forLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimestamp:(long long) forLabel:(id)");
}

-(long long) timestampForLabel:(id) {
	%orig;
	NSLog(@"-(long long) timestampForLabel:(id)");
}

-(id) timeRecorderForAction:(id) {
	%orig;
	NSLog(@"-(id) timeRecorderForAction:(id)");
}

-(void) recordTimestampForLabel:(id) {
	%orig;
	NSLog(@"-(void) recordTimestampForLabel:(id)");
}

-(void) sendReport {
	%orig;
	NSLog(@"-(void) sendReport");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADBannerPool

-(void) removeEntry:(id) {
	%orig;
	NSLog(@"-(void) removeEntry:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(long long) count {
	%orig;
	NSLog(@"-(long long) count");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) nextEntry {
	%orig;
	NSLog(@"-(id) nextEntry");
}

-(void) addEntry:(id) {
	%orig;
	NSLog(@"-(void) addEntry:(id)");
}

%end

%hook GADBannerCache

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) updateCacheWithBannerView:(id) newKey:(id) {
	%orig;
	NSLog(@"-(void) updateCacheWithBannerView:(id) newKey:(id)");
}

-(id) cacheEntryForBannerView:(id) key:(id) {
	%orig;
	NSLog(@"-(id) cacheEntryForBannerView:(id) key:(id)");
}

-(id) bannerEntryFromPreviousCache:(id) {
	%orig;
	NSLog(@"-(id) bannerEntryFromPreviousCache:(id)");
}

-(void) addBannerEntryToCurrentCache:(id) key:(id) {
	%orig;
	NSLog(@"-(void) addBannerEntryToCurrentCache:(id) key:(id)");
}

-(id) cacheEntryForBannerView:(id) request:(id) {
	%orig;
	NSLog(@"-(id) cacheEntryForBannerView:(id) request:(id)");
}

-(void) loadRequest:(id) bannerView:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id) bannerView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAnalytics

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) endAdUnitExposure:(id) {
	%orig;
	NSLog(@"-(void) endAdUnitExposure:(id)");
}

-(void) beginAdUnitExposure:(id) {
	%orig;
	NSLog(@"-(void) beginAdUnitExposure:(id)");
}

-(id) googleAppID {
	%orig;
	NSLog(@"-(id) googleAppID");
}

-(id) appInstanceID {
	%orig;
	NSLog(@"-(id) appInstanceID");
}

-(id) adEventID {
	%orig;
	NSLog(@"-(id) adEventID");
}

-(void) getScreenName:(id*) screenClass:(id*) {
	%orig;
	NSLog(@"-(void) getScreenName:(id*) screenClass:(id*)");
}

-(void) setScreenName:(id) screenClass:(id) {
	%orig;
	NSLog(@"-(void) setScreenName:(id) screenClass:(id)");
}

-(void) logEventWithName:(id) adEventID:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) logEventWithName:(id) adEventID:(id) parameters:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADStubsForFIRAnalytics

-(void) endAdUnitExposure:(id) {
	%orig;
	NSLog(@"-(void) endAdUnitExposure:(id)");
}

-(void) beginAdUnitExposure:(id) {
	%orig;
	NSLog(@"-(void) beginAdUnitExposure:(id)");
}

-(id) googleAppID {
	%orig;
	NSLog(@"-(id) googleAppID");
}

-(id) appInstanceID {
	%orig;
	NSLog(@"-(id) appInstanceID");
}

-(id) adEventID {
	%orig;
	NSLog(@"-(id) adEventID");
}

-(void) logInternalEventWithOrigin:(id) name:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) logInternalEventWithOrigin:(id) name:(id) parameters:(id)");
}

-(void) getScreenName:(id*) screenClass:(id*) {
	%orig;
	NSLog(@"-(void) getScreenName:(id*) screenClass:(id*)");
}

-(void) setScreenName:(id) screenClass:(id) {
	%orig;
	NSLog(@"-(void) setScreenName:(id) screenClass:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAdExposureMonitor

-(void) viewMonitorDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) viewMonitorDidRefresh:(id)");
}

-(id) initWithView:(id) adUnitID:(id) {
	%orig;
	NSLog(@"-(id) initWithView:(id) adUnitID:(id)");
}

-(void) finishMonitoring {
	%orig;
	NSLog(@"-(void) finishMonitoring");
}

-(void) startMonitoring {
	%orig;
	NSLog(@"-(void) startMonitoring");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAdViewDelegate

-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) adViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidStartLoad:(id)");
}

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(void) adView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailLoadWithError:(id)");
}

-(bool) handlesClicks {
	%orig;
	NSLog(@"-(bool) handlesClicks");
}

-(void) adViewWebProcessDidTerminate:(id) {
	%orig;
	NSLog(@"-(void) adViewWebProcessDidTerminate:(id)");
}

-(void) adView:(id) didMoveToPlacement:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didMoveToPlacement:(id)");
}

-(id) CSIForGMSGHandler:(id) {
	%orig;
	NSLog(@"-(id) CSIForGMSGHandler:(id)");
}

-(id) opener {
	%orig;
	NSLog(@"-(id) opener");
}

-(void) handleGMSGURL:(id) adView:(id) {
	%orig;
	NSLog(@"-(void) handleGMSGURL:(id) adView:(id)");
}

-(void) handleDeeplinkPlusURL:(id) {
	%orig;
	NSLog(@"-(void) handleDeeplinkPlusURL:(id)");
}

-(bool) shouldTreatNavigationTypeAsClick:(long long) {
	%orig;
	NSLog(@"-(bool) shouldTreatNavigationTypeAsClick:(long long)");
}

-(bool) adViewDelegateAdView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) adViewDelegateAdView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) addGMSGHandler:(id) {
	%orig;
	NSLog(@"-(void) addGMSGHandler:(id)");
}

-(bool) hasLoadedAtLeastOnce {
	%orig;
	NSLog(@"-(bool) hasLoadedAtLeastOnce");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAdAppAdViewDelegate

-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) adViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidStartLoad:(id)");
}

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(void) adView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailLoadWithError:(id)");
}

-(id) CSIForGMSGHandler:(id) {
	%orig;
	NSLog(@"-(id) CSIForGMSGHandler:(id)");
}

-(id) initWithAdAppViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithAdAppViewController:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADBrowserAdViewDelegate

-(id) browserControllerForAdView:(id) {
	%orig;
	NSLog(@"-(id) browserControllerForAdView:(id)");
}

-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) adViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidStartLoad:(id)");
}

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(void) adView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailLoadWithError:(id)");
}

-(bool) handlesClicks {
	%orig;
	NSLog(@"-(bool) handlesClicks");
}

%end

%hook GADBannerAdViewDelegate

-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(void) adView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailLoadWithError:(id)");
}

-(void) adView:(id) contentSizeDidChange:(CGSize) {
	%orig;
	NSLog(@"-(void) adView:(id) contentSizeDidChange:(CGSize)");
}

-(void) adView:(id) didLoadVideoWithSize:(CGSize) {
	%orig;
	NSLog(@"-(void) adView:(id) didLoadVideoWithSize:(CGSize)");
}

-(void) adViewDidRecordImpression:(id) {
	%orig;
	NSLog(@"-(void) adViewDidRecordImpression:(id)");
}

-(void) adViewDidRecordClick:(id) {
	%orig;
	NSLog(@"-(void) adViewDidRecordClick:(id)");
}

-(id) CSIForGMSGHandler:(id) {
	%orig;
	NSLog(@"-(id) CSIForGMSGHandler:(id)");
}

-(bool) isLoadFinished {
	%orig;
	NSLog(@"-(bool) isLoadFinished");
}

-(void) loadHandlerDidCancel:(id) {
	%orig;
	NSLog(@"-(void) loadHandlerDidCancel:(id)");
}

-(void) loadHandlerDidChangeDelay:(id) from:(long long) to:(long long) {
	%orig;
	NSLog(@"-(void) loadHandlerDidChangeDelay:(id) from:(long long) to:(long long)");
}

-(bool) isLoadDelayed {
	%orig;
	NSLog(@"-(bool) isLoadDelayed");
}

-(id) initWithSlot:(id) {
	%orig;
	NSLog(@"-(id) initWithSlot:(id)");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAdNetworkJavaScriptAdViewDelegate

-(id) initWithSlot:(id) passbackURL:(id) {
	%orig;
	NSLog(@"-(id) initWithSlot:(id) passbackURL:(id)");
}

-(id) passbackURL {
	%orig;
	NSLog(@"-(id) passbackURL");
}

-(void) adViewDidRenderContent {
	%orig;
	NSLog(@"-(void) adViewDidRenderContent");
}

-(void) adViewDidNotRenderContent {
	%orig;
	NSLog(@"-(void) adViewDidNotRenderContent");
}

-(void) checkIsContentRenderedInAdView {
	%orig;
	NSLog(@"-(void) checkIsContentRenderedInAdView");
}

-(void) startRenderingTimerForAdView:(id) {
	%orig;
	NSLog(@"-(void) startRenderingTimerForAdView:(id)");
}

-(void) setPassbackURL:(id) {
	%orig;
	NSLog(@"-(void) setPassbackURL:(id)");
}

-(bool) wasPassbackReceived {
	%orig;
	NSLog(@"-(bool) wasPassbackReceived");
}

-(void) setWasPassbackReceived:(bool) {
	%orig;
	NSLog(@"-(void) setWasPassbackReceived:(bool)");
}

-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(void) stopRenderingTimer {
	%orig;
	NSLog(@"-(void) stopRenderingTimer");
}

-(bool) isPassbackRequest:(id) {
	%orig;
	NSLog(@"-(bool) isPassbackRequest:(id)");
}

-(id) initWithSlot:(id) {
	%orig;
	NSLog(@"-(id) initWithSlot:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook DFPCustomRenderedAd

-(id) adHTML {
	%orig;
	NSLog(@"-(id) adHTML");
}

-(void) recordImpression {
	%orig;
	NSLog(@"-(void) recordImpression");
}

-(void) finishedRenderingAdView:(id) {
	%orig;
	NSLog(@"-(void) finishedRenderingAdView:(id)");
}

-(void) recordClick {
	%orig;
	NSLog(@"-(void) recordClick");
}

-(id) adBaseURL {
	%orig;
	NSLog(@"-(id) adBaseURL");
}

-(id) initWithAdHTML:(id) adBaseURL:(id) eventHandler:(id) {
	%orig;
	NSLog(@"-(id) initWithAdHTML:(id) adBaseURL:(id) eventHandler:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAutoClickProtection

-(void) reportSpamOpenActionWithNavigationURLString:(id) {
	%orig;
	NSLog(@"-(void) reportSpamOpenActionWithNavigationURLString:(id)");
}

-(id) initWithAutoClickProtectionEnabled:(bool) {
	%orig;
	NSLog(@"-(id) initWithAutoClickProtectionEnabled:(bool)");
}

-(void) reportSpamOpenActionWithAdDebugDialogString:(id) navigationURLString:(id) {
	%orig;
	NSLog(@"-(void) reportSpamOpenActionWithAdDebugDialogString:(id) navigationURLString:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(bool) enabled {
	%orig;
	NSLog(@"-(bool) enabled");
}

%end

%hook GADAdLoaderConfiguration

-(id) initWithAdTypes:(id) options:(id) {
	%orig;
	NSLog(@"-(id) initWithAdTypes:(id) options:(id)");
}

-(id) adClassRequestParameters {
	%orig;
	NSLog(@"-(id) adClassRequestParameters");
}

-(void) setAdClassRequestParameters:(id) {
	%orig;
	NSLog(@"-(void) setAdClassRequestParameters:(id)");
}

-(id) adTypeClasses {
	%orig;
	NSLog(@"-(id) adTypeClasses");
}

-(id) adTypes {
	%orig;
	NSLog(@"-(id) adTypes");
}

-(id) requestParameters {
	%orig;
	NSLog(@"-(id) requestParameters");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) options {
	%orig;
	NSLog(@"-(id) options");
}

%end

%hook GADAd

-(id) reward {
	%orig;
	NSLog(@"-(id) reward");
}

-(void) setReward:(id) {
	%orig;
	NSLog(@"-(void) setReward:(id)");
}

-(id) adHTML {
	%orig;
	NSLog(@"-(id) adHTML");
}

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(void) addClickURLsFromArray:(id) {
	%orig;
	NSLog(@"-(void) addClickURLsFromArray:(id)");
}

-(void) addImpressionURLsFromArray:(id) {
	%orig;
	NSLog(@"-(void) addImpressionURLsFromArray:(id)");
}

-(void) addManualImpressionURLsFromArray:(id) {
	%orig;
	NSLog(@"-(void) addManualImpressionURLsFromArray:(id)");
}

-(void) pingClickURLs {
	%orig;
	NSLog(@"-(void) pingClickURLs");
}

-(void) pingDebugSignal {
	%orig;
	NSLog(@"-(void) pingDebugSignal");
}

-(void) pingImpressionURLs {
	%orig;
	NSLog(@"-(void) pingImpressionURLs");
}

-(void) pingManualImpressionURLs {
	%orig;
	NSLog(@"-(void) pingManualImpressionURLs");
}

-(id) adBaseURL {
	%orig;
	NSLog(@"-(id) adBaseURL");
}

-(void) setAdBaseURL:(id) {
	%orig;
	NSLog(@"-(void) setAdBaseURL:(id)");
}

-(void) setAdHTML:(id) {
	%orig;
	NSLog(@"-(void) setAdHTML:(id)");
}

-(id) adURL {
	%orig;
	NSLog(@"-(id) adURL");
}

-(void) setAdURL:(id) {
	%orig;
	NSLog(@"-(void) setAdURL:(id)");
}

-(id) activeViewConfigurations {
	%orig;
	NSLog(@"-(id) activeViewConfigurations");
}

-(void) setActiveViewConfigurations:(id) {
	%orig;
	NSLog(@"-(void) setActiveViewConfigurations:(id)");
}

-(long long) impressionDefinition {
	%orig;
	NSLog(@"-(long long) impressionDefinition");
}

-(void) setImpressionDefinition:(long long) {
	%orig;
	NSLog(@"-(void) setImpressionDefinition:(long long)");
}

-(id) MRAIDEventHandler {
	%orig;
	NSLog(@"-(id) MRAIDEventHandler");
}

-(void) setMRAIDEventHandler:(id) {
	%orig;
	NSLog(@"-(void) setMRAIDEventHandler:(id)");
}

-(bool) isFluid {
	%orig;
	NSLog(@"-(bool) isFluid");
}

-(void) setFluid:(bool) {
	%orig;
	NSLog(@"-(void) setFluid:(bool)");
}

-(double) reloadInterval {
	%orig;
	NSLog(@"-(double) reloadInterval");
}

-(void) setReloadInterval:(double) {
	%orig;
	NSLog(@"-(void) setReloadInterval:(double)");
}

-(id) debugDialogString {
	%orig;
	NSLog(@"-(id) debugDialogString");
}

-(void) setDebugDialogString:(id) {
	%orig;
	NSLog(@"-(void) setDebugDialogString:(id)");
}

-(id) customAdSizeString {
	%orig;
	NSLog(@"-(id) customAdSizeString");
}

-(void) setCustomAdSizeString:(id) {
	%orig;
	NSLog(@"-(void) setCustomAdSizeString:(id)");
}

-(id) safeBrowsingReporter {
	%orig;
	NSLog(@"-(id) safeBrowsingReporter");
}

-(void) setSafeBrowsingReporter:(id) {
	%orig;
	NSLog(@"-(void) setSafeBrowsingReporter:(id)");
}

-(double) croppedContentThreshold {
	%orig;
	NSLog(@"-(double) croppedContentThreshold");
}

-(void) setCroppedContentThreshold:(double) {
	%orig;
	NSLog(@"-(void) setCroppedContentThreshold:(double)");
}

-(bool) hasAdNetworkJavaScript {
	%orig;
	NSLog(@"-(bool) hasAdNetworkJavaScript");
}

-(id) adNetworkPassbackURL {
	%orig;
	NSLog(@"-(id) adNetworkPassbackURL");
}

-(id) GWSQueryID {
	%orig;
	NSLog(@"-(id) GWSQueryID");
}

-(void) setGWSQueryID:(id) {
	%orig;
	NSLog(@"-(void) setGWSQueryID:(id)");
}

-(id) mediationDelegate {
	%orig;
	NSLog(@"-(id) mediationDelegate");
}

-(void) setMediationDelegate:(id) {
	%orig;
	NSLog(@"-(void) setMediationDelegate:(id)");
}

-(id) debugSignalInformation {
	%orig;
	NSLog(@"-(id) debugSignalInformation");
}

-(void) setDebugSignalInformation:(id) {
	%orig;
	NSLog(@"-(void) setDebugSignalInformation:(id)");
}

-(bool) customCloseBlocked {
	%orig;
	NSLog(@"-(bool) customCloseBlocked");
}

-(void) setCustomCloseBlocked:(bool) {
	%orig;
	NSLog(@"-(void) setCustomCloseBlocked:(bool)");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(void) setOriginalRequest:(id) {
	%orig;
	NSLog(@"-(void) setOriginalRequest:(id)");
}

-(unsigned long long) responseType {
	%orig;
	NSLog(@"-(unsigned long long) responseType");
}

-(id) originalRequest {
	%orig;
	NSLog(@"-(id) originalRequest");
}

-(id) redirects {
	%orig;
	NSLog(@"-(id) redirects");
}

-(void) setStatistics:(id) {
	%orig;
	NSLog(@"-(void) setStatistics:(id)");
}

-(id) statistics {
	%orig;
	NSLog(@"-(id) statistics");
}

-(id) responseHeaders {
	%orig;
	NSLog(@"-(id) responseHeaders");
}

-(void) setResponseHeaders:(id) {
	%orig;
	NSLog(@"-(void) setResponseHeaders:(id)");
}

-(void) setResponseType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setResponseType:(unsigned long long)");
}

-(CGSize) size {
	%orig;
	NSLog(@"-(CGSize) size");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setScrollEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setScrollEnabled:(bool)");
}

-(bool) isScrollEnabled {
	%orig;
	NSLog(@"-(bool) isScrollEnabled");
}

-(void) setSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setSize:(CGSize)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(void) setSupportedOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSupportedOrientations:(unsigned long long)");
}

-(unsigned long long) supportedOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedOrientations");
}

%end

%hook GADBannerAd

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook FBSDKVideoUploader

-(id) _graphPathWithSuffix:(id) {
	%orig;
	NSLog(@"-(id) _graphPathWithSuffix:(id)");
}

-(id) initWithVideoName:(id) videoSize:(unsigned long long) parameters:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithVideoName:(id) videoSize:(unsigned long long) parameters:(id) delegate:(id)");
}

-(void) _postStartRequest {
	%orig;
	NSLog(@"-(void) _postStartRequest");
}

-(id) _extractOffsetsFromResultDictionary:(id) {
	%orig;
	NSLog(@"-(id) _extractOffsetsFromResultDictionary:(id)");
}

-(void) _startTransferRequestWithOffsetDictionary:(id) {
	%orig;
	NSLog(@"-(void) _startTransferRequestWithOffsetDictionary:(id)");
}

-(void) _postFinishRequest {
	%orig;
	NSLog(@"-(void) _postFinishRequest");
}

-(id) video {
	%orig;
	NSLog(@"-(id) video");
}

-(id) numberFormatter {
	%orig;
	NSLog(@"-(id) numberFormatter");
}

-(void) setGraphNode:(id) {
	%orig;
	NSLog(@"-(void) setGraphNode:(id)");
}

-(id) graphNode {
	%orig;
	NSLog(@"-(id) graphNode");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(void) setParameters:(id) {
	%orig;
	NSLog(@"-(void) setParameters:(id)");
}

%end

%hook FBSDKShareVideoContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) previewPhoto {
	%orig;
	NSLog(@"-(id) previewPhoto");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(bool) isEqualToShareVideoContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareVideoContent:(id)");
}

-(void) setPreviewPhoto:(id) {
	%orig;
	NSLog(@"-(void) setPreviewPhoto:(id)");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) video {
	%orig;
	NSLog(@"-(id) video");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setVideo:(id) {
	%orig;
	NSLog(@"-(void) setVideo:(id)");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKShareVideo

+(id) videoWithData:(id) {
	%orig;
	NSLog(@"+(id) videoWithData:(id)");
}

+(id) videoWithData:(id) previewPhoto:(id) {
	%orig;
	NSLog(@"+(id) videoWithData:(id) previewPhoto:(id)");
}

+(id) videoWithVideoAsset:(id) {
	%orig;
	NSLog(@"+(id) videoWithVideoAsset:(id)");
}

+(id) videoWithVideoAsset:(id) previewPhoto:(id) {
	%orig;
	NSLog(@"+(id) videoWithVideoAsset:(id) previewPhoto:(id)");
}

+(id) videoWithVideoURL:(id) {
	%orig;
	NSLog(@"+(id) videoWithVideoURL:(id)");
}

+(id) videoWithVideoURL:(id) previewPhoto:(id) {
	%orig;
	NSLog(@"+(id) videoWithVideoURL:(id) previewPhoto:(id)");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) previewPhoto {
	%orig;
	NSLog(@"-(id) previewPhoto");
}

-(bool) isEqualToShareVideo:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareVideo:(id)");
}

-(bool) _validateVideoAsset:(id) withOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) _validateVideoAsset:(id) withOptions:(unsigned long long) error:(id*)");
}

-(bool) _validateData:(id) withOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) _validateData:(id) withOptions:(unsigned long long) error:(id*)");
}

-(bool) _validateVideoURL:(id) withOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) _validateVideoURL:(id) withOptions:(unsigned long long) error:(id*)");
}

-(void) setPreviewPhoto:(id) {
	%orig;
	NSLog(@"-(void) setPreviewPhoto:(id)");
}

-(id) videoAsset {
	%orig;
	NSLog(@"-(id) videoAsset");
}

-(void) setVideoURL:(id) {
	%orig;
	NSLog(@"-(void) setVideoURL:(id)");
}

-(id) videoURL {
	%orig;
	NSLog(@"-(id) videoURL");
}

-(void) setVideoAsset:(id) {
	%orig;
	NSLog(@"-(void) setVideoAsset:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook FBSDKShareUtility

+(bool) validateRequiredValue:(id) name:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) validateRequiredValue:(id) name:(id) error:(id*)");
}

+(bool) validateNetworkURL:(id) name:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) validateNetworkURL:(id) name:(id) error:(id*)");
}

+(void) assertCollection:(id) ofClass:(id) name:(id) {
	%orig;
	NSLog(@"+(void) assertCollection:(id) ofClass:(id) name:(id)");
}

+(bool) validateArgumentWithName:(id) value:(unsigned long long) isIn:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) validateArgumentWithName:(id) value:(unsigned long long) isIn:(id) error:(id*)");
}

+(bool) validateShareContent:(id) bridgeOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"+(bool) validateShareContent:(id) bridgeOptions:(unsigned long long) error:(id*)");
}

+(id) getOpenGraphNameAndNamespaceFromFullName:(id) namespace:(id*) {
	%orig;
	NSLog(@"+(id) getOpenGraphNameAndNamespaceFromFullName:(id) namespace:(id*)");
}

+(void) testShareContent:(id) containsMedia:(bool*) containsPhotos:(bool*) containsVideos:(bool*) {
	%orig;
	NSLog(@"+(void) testShareContent:(id) containsMedia:(bool*) containsPhotos:(bool*) containsVideos:(bool*)");
}

+(void) buildAsyncWebPhotoContent:(id) completionHandler:(id) {
	%orig;
	NSLog(@"+(void) buildAsyncWebPhotoContent:(id) completionHandler:(id)");
}

+(bool) buildWebShareContent:(id) methodName:(id*) parameters:(id*) error:(id*) {
	%orig;
	NSLog(@"+(bool) buildWebShareContent:(id) methodName:(id*) parameters:(id*) error:(id*)");
}

+(id) feedShareDictionaryForContent:(id) {
	%orig;
	NSLog(@"+(id) feedShareDictionaryForContent:(id)");
}

+(id) parametersForShareContent:(id) bridgeOptions:(unsigned long long) shouldFailOnDataError:(bool) {
	%orig;
	NSLog(@"+(id) parametersForShareContent:(id) bridgeOptions:(unsigned long long) shouldFailOnDataError:(bool)");
}

+(bool) shareMediaContentContainsPhotosAndVideos:(id) {
	%orig;
	NSLog(@"+(bool) shareMediaContentContainsPhotosAndVideos:(id)");
}

+(id) hashtagStringFromHashtag:(id) {
	%orig;
	NSLog(@"+(id) hashtagStringFromHashtag:(id)");
}

+(bool) _isOpenGraphValue:(id) {
	%orig;
	NSLog(@"+(bool) _isOpenGraphValue:(id)");
}

+(void) assertOpenGraphValues:(id) requireKeyNamespace:(bool) {
	%orig;
	NSLog(@"+(void) assertOpenGraphValues:(id) requireKeyNamespace:(bool)");
}

+(void) assertOpenGraphValue:(id) {
	%orig;
	NSLog(@"+(void) assertOpenGraphValue:(id)");
}

+(void) assertOpenGraphKey:(id) requireNamespace:(bool) {
	%orig;
	NSLog(@"+(void) assertOpenGraphKey:(id) requireNamespace:(bool)");
}

+(id) convertOpenGraphValueContainer:(id) requireNamespace:(bool) {
	%orig;
	NSLog(@"+(id) convertOpenGraphValueContainer:(id) requireNamespace:(bool)");
}

+(id) buildWebShareTags:(id) {
	%orig;
	NSLog(@"+(id) buildWebShareTags:(id)");
}

+(void) _stageImagesForPhotoContent:(id) withCompletionHandler:(id) {
	%orig;
	NSLog(@"+(void) _stageImagesForPhotoContent:(id) withCompletionHandler:(id)");
}

+(id) convertOpenGraphValue:(id) {
	%orig;
	NSLog(@"+(id) convertOpenGraphValue:(id)");
}

+(void) _testObject:(id) containsMedia:(bool*) containsPhotos:(bool*) containsVideos:(bool*) {
	%orig;
	NSLog(@"+(void) _testObject:(id) containsMedia:(bool*) containsPhotos:(bool*) containsVideos:(bool*)");
}

+(void) _testOpenGraphValueContainer:(id) containsMedia:(bool*) containsPhotos:(bool*) containsVideos:(bool*) {
	%orig;
	NSLog(@"+(void) _testOpenGraphValueContainer:(id) containsMedia:(bool*) containsPhotos:(bool*) containsVideos:(bool*)");
}

+(bool) _validateAssetLibraryVideoURL:(id) name:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) _validateAssetLibraryVideoURL:(id) name:(id) error:(id*)");
}

+(id) convertPhoto:(id) {
	%orig;
	NSLog(@"+(id) convertPhoto:(id)");
}

+(id) _convertObject:(id) {
	%orig;
	NSLog(@"+(id) _convertObject:(id)");
}

+(void) assertCollection:(id) ofClassStrings:(id) name:(id) {
	%orig;
	NSLog(@"+(void) assertCollection:(id) ofClassStrings:(id) name:(id)");
}

+(id) convertOpenGraphValues:(id) {
	%orig;
	NSLog(@"+(id) convertOpenGraphValues:(id)");
}

+(id) imageWithCircleColor:(id) canvasSize:(CGSize) circleSize:(CGSize) {
	%orig;
	NSLog(@"+(id) imageWithCircleColor:(id) canvasSize:(CGSize) circleSize:(CGSize)");
}

+(bool) validateAssetLibraryURLsWithShareMediaContent:(id) name:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) validateAssetLibraryURLsWithShareMediaContent:(id) name:(id) error:(id*)");
}

+(bool) validateArray:(id) minCount:(unsigned long long) maxCount:(unsigned long long) name:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) validateArray:(id) minCount:(unsigned long long) maxCount:(unsigned long long) name:(id) error:(id*)");
}

+(bool) _validateFileURL:(id) name:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) _validateFileURL:(id) name:(id) error:(id*)");
}

%end

%hook FBSDKSharePhotoContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(bool) isEqualToSharePhotoContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToSharePhotoContent:(id)");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(id) photos {
	%orig;
	NSLog(@"-(id) photos");
}

-(void) setPhotos:(id) {
	%orig;
	NSLog(@"-(void) setPhotos:(id)");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKSharePhoto

+(id) photoWithImage:(id) userGenerated:(bool) {
	%orig;
	NSLog(@"+(id) photoWithImage:(id) userGenerated:(bool)");
}

+(id) photoWithPhotoAsset:(id) userGenerated:(bool) {
	%orig;
	NSLog(@"+(id) photoWithPhotoAsset:(id) userGenerated:(bool)");
}

+(id) photoWithImageURL:(id) userGenerated:(bool) {
	%orig;
	NSLog(@"+(id) photoWithImageURL:(id) userGenerated:(bool)");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(bool) isUserGenerated {
	%orig;
	NSLog(@"-(bool) isUserGenerated");
}

-(void) setUserGenerated:(bool) {
	%orig;
	NSLog(@"-(void) setUserGenerated:(bool)");
}

-(void) setPhotoAsset:(id) {
	%orig;
	NSLog(@"-(void) setPhotoAsset:(id)");
}

-(bool) isEqualToSharePhoto:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToSharePhoto:(id)");
}

-(id) photoAsset {
	%orig;
	NSLog(@"-(id) photoAsset");
}

-(id) caption {
	%orig;
	NSLog(@"-(id) caption");
}

-(void) setCaption:(id) {
	%orig;
	NSLog(@"-(void) setCaption:(id)");
}

-(id) imageURL {
	%orig;
	NSLog(@"-(id) imageURL");
}

-(void) setImageURL:(id) {
	%orig;
	NSLog(@"-(void) setImageURL:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKShareOpenGraphContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(id) previewPropertyName {
	%orig;
	NSLog(@"-(id) previewPropertyName");
}

-(bool) isEqualToShareOpenGraphContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareOpenGraphContent:(id)");
}

-(void) setPreviewPropertyName:(id) {
	%orig;
	NSLog(@"-(void) setPreviewPropertyName:(id)");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) action {
	%orig;
	NSLog(@"-(id) action");
}

-(void) setAction:(id) {
	%orig;
	NSLog(@"-(void) setAction:(id)");
}

%end

%hook FBSDKShareOpenGraphValueContainer

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) _valueOfClass:(Class) forKey:(id) {
	%orig;
	NSLog(@"-(id) _valueOfClass:(Class) forKey:(id)");
}

-(bool) requireKeyNamespace {
	%orig;
	NSLog(@"-(bool) requireKeyNamespace");
}

-(bool) isEqualToShareOpenGraphValueContainer:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareOpenGraphValueContainer:(id)");
}

-(id) photoForKey:(id) {
	%orig;
	NSLog(@"-(id) photoForKey:(id)");
}

-(void) setPhoto:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setPhoto:(id) forKey:(id)");
}

-(void) setURL:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setURL:(id) forKey:(id)");
}

-(void) setArray:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setArray:(id) forKey:(id)");
}

-(id) allData {
	%orig;
	NSLog(@"-(id) allData");
}

-(id) _valueForKey:(id) {
	%orig;
	NSLog(@"-(id) _valueForKey:(id)");
}

-(void) _setValue:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) _setValue:(id) forKey:(id)");
}

-(void) setString:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setString:(id) forKey:(id)");
}

-(void) parseProperties:(id) {
	%orig;
	NSLog(@"-(void) parseProperties:(id)");
}

-(void) setNumber:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setNumber:(id) forKey:(id)");
}

-(id) arrayForKey:(id) {
	%orig;
	NSLog(@"-(id) arrayForKey:(id)");
}

-(id) URLForKey:(id) {
	%orig;
	NSLog(@"-(id) URLForKey:(id)");
}

-(id) allProperties {
	%orig;
	NSLog(@"-(id) allProperties");
}

-(id) numberForKey:(id) {
	%orig;
	NSLog(@"-(id) numberForKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setObject:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKey:(id)");
}

-(id) objectForKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(id) objectForKeyedSubscript:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(id) objectForKey:(id) {
	%orig;
	NSLog(@"-(id) objectForKey:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) valueForKey:(id) {
	%orig;
	NSLog(@"-(id) valueForKey:(id)");
}

-(void) removeObjectForKey:(id) {
	%orig;
	NSLog(@"-(void) removeObjectForKey:(id)");
}

-(id) objectEnumerator {
	%orig;
	NSLog(@"-(id) objectEnumerator");
}

-(void) enumerateKeysAndObjectsUsingBlock:(id) {
	%orig;
	NSLog(@"-(void) enumerateKeysAndObjectsUsingBlock:(id)");
}

-(id) keyEnumerator {
	%orig;
	NSLog(@"-(id) keyEnumerator");
}

-(id) stringForKey:(id) {
	%orig;
	NSLog(@"-(id) stringForKey:(id)");
}

%end

%hook FBSDKShareOpenGraphObject

+(id) objectWithProperties:(id) {
	%orig;
	NSLog(@"+(id) objectWithProperties:(id)");
}

-(bool) isEqualToShareOpenGraphObject:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareOpenGraphObject:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKShareOpenGraphAction

+(id) actionWithType:(id) object:(id) key:(id) {
	%orig;
	NSLog(@"+(id) actionWithType:(id) object:(id) key:(id)");
}

+(id) actionWithType:(id) objectID:(id) key:(id) {
	%orig;
	NSLog(@"+(id) actionWithType:(id) objectID:(id) key:(id)");
}

+(id) actionWithType:(id) objectURL:(id) key:(id) {
	%orig;
	NSLog(@"+(id) actionWithType:(id) objectURL:(id) key:(id)");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) isEqualToShareOpenGraphAction:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareOpenGraphAction:(id)");
}

-(bool) requireKeyNamespace {
	%orig;
	NSLog(@"-(bool) requireKeyNamespace");
}

-(id) actionType {
	%orig;
	NSLog(@"-(id) actionType");
}

-(void) setActionType:(id) {
	%orig;
	NSLog(@"-(void) setActionType:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKShareMessengerURLActionButton

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(unsigned long long) webviewHeightRatio {
	%orig;
	NSLog(@"-(unsigned long long) webviewHeightRatio");
}

-(void) setWebviewHeightRatio:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setWebviewHeightRatio:(unsigned long long)");
}

-(bool) isMessengerExtensionURL {
	%orig;
	NSLog(@"-(bool) isMessengerExtensionURL");
}

-(void) setIsMessengerExtensionURL:(bool) {
	%orig;
	NSLog(@"-(void) setIsMessengerExtensionURL:(bool)");
}

-(bool) shouldHideWebviewShareButton {
	%orig;
	NSLog(@"-(bool) shouldHideWebviewShareButton");
}

-(void) setShouldHideWebviewShareButton:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideWebviewShareButton:(bool)");
}

-(id) fallbackURL {
	%orig;
	NSLog(@"-(id) fallbackURL");
}

-(void) setFallbackURL:(id) {
	%orig;
	NSLog(@"-(void) setFallbackURL:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

%end

%hook FBSDKShareMessengerOpenGraphMusicTemplateContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

%end

%hook FBSDKShareMessengerMediaTemplateContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(id) initWithAttachmentID:(id) {
	%orig;
	NSLog(@"-(id) initWithAttachmentID:(id)");
}

-(id) initWithMediaURL:(id) {
	%orig;
	NSLog(@"-(id) initWithMediaURL:(id)");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(unsigned long long) mediaType {
	%orig;
	NSLog(@"-(unsigned long long) mediaType");
}

-(id) mediaURL {
	%orig;
	NSLog(@"-(id) mediaURL");
}

-(void) setMediaType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMediaType:(unsigned long long)");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(id) attachmentID {
	%orig;
	NSLog(@"-(id) attachmentID");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

%end

%hook FBSDKShareMessengerGenericTemplateElement

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) imageURL {
	%orig;
	NSLog(@"-(id) imageURL");
}

-(void) setImageURL:(id) {
	%orig;
	NSLog(@"-(void) setImageURL:(id)");
}

-(void) setDefaultAction:(id) {
	%orig;
	NSLog(@"-(void) setDefaultAction:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setSubtitle:(id) {
	%orig;
	NSLog(@"-(void) setSubtitle:(id)");
}

-(id) subtitle {
	%orig;
	NSLog(@"-(id) subtitle");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

-(id) defaultAction {
	%orig;
	NSLog(@"-(id) defaultAction");
}

%end

%hook FBSDKShareMessengerGenericTemplateContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(void) setIsSharable:(bool) {
	%orig;
	NSLog(@"-(void) setIsSharable:(bool)");
}

-(bool) isSharable {
	%orig;
	NSLog(@"-(bool) isSharable");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(id) element {
	%orig;
	NSLog(@"-(id) element");
}

-(void) setElement:(id) {
	%orig;
	NSLog(@"-(void) setElement:(id)");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setImageAspectRatio:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setImageAspectRatio:(unsigned long long)");
}

-(unsigned long long) imageAspectRatio {
	%orig;
	NSLog(@"-(unsigned long long) imageAspectRatio");
}

%end

%hook FBSDKShareMessengerContentUtility

+(void) addToParameters:(id) contentForShare:(id) contentForPreview:(id) {
	%orig;
	NSLog(@"+(void) addToParameters:(id) contentForShare:(id) contentForPreview:(id)");
}

+(bool) validateMessengerActionButton:(id) isDefaultActionButton:(bool) pageID:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) validateMessengerActionButton:(id) isDefaultActionButton:(bool) pageID:(id) error:(id*)");
}

%end

%hook FBSDKShareMediaContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(bool) isEqualToShareMediaContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareMediaContent:(id)");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(void) setMedia:(id) {
	%orig;
	NSLog(@"-(void) setMedia:(id)");
}

-(id) media {
	%orig;
	NSLog(@"-(id) media");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKShareLinkContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(bool) isEqualToShareLinkContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareLinkContent:(id)");
}

-(void) setFeedParameters:(id) {
	%orig;
	NSLog(@"-(void) setFeedParameters:(id)");
}

-(id) feedParameters {
	%orig;
	NSLog(@"-(id) feedParameters");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) contentTitle {
	%orig;
	NSLog(@"-(id) contentTitle");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(id) imageURL {
	%orig;
	NSLog(@"-(id) imageURL");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setQuote:(id) {
	%orig;
	NSLog(@"-(void) setQuote:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(id) quote {
	%orig;
	NSLog(@"-(id) quote");
}

-(id) contentDescription {
	%orig;
	NSLog(@"-(id) contentDescription");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKShareDialog

+(id) showFromViewController:(id) withContent:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) showFromViewController:(id) withContent:(id) delegate:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setFromViewController:(id) {
	%orig;
	NSLog(@"-(void) setFromViewController:(id)");
}

-(void) setShareContent:(id) {
	%orig;
	NSLog(@"-(void) setShareContent:(id)");
}

-(void) webDialogDidCancel:(id) {
	%orig;
	NSLog(@"-(void) webDialogDidCancel:(id)");
}

-(void) webDialog:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didCompleteWithResults:(id)");
}

-(void) webDialog:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didFailWithError:(id)");
}

-(bool) canShow {
	%orig;
	NSLog(@"-(bool) canShow");
}

-(id) shareContent {
	%orig;
	NSLog(@"-(id) shareContent");
}

-(bool) shouldFailOnDataError {
	%orig;
	NSLog(@"-(bool) shouldFailOnDataError");
}

-(void) setShouldFailOnDataError:(bool) {
	%orig;
	NSLog(@"-(void) setShouldFailOnDataError:(bool)");
}

-(bool) _validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) _validateWithError:(id*)");
}

-(bool) _canShowNative {
	%orig;
	NSLog(@"-(bool) _canShowNative");
}

-(bool) _canShowShareSheet {
	%orig;
	NSLog(@"-(bool) _canShowShareSheet");
}

-(bool) _showAutomatic:(id*) {
	%orig;
	NSLog(@"-(bool) _showAutomatic:(id*)");
}

-(bool) _showBrowser:(id*) {
	%orig;
	NSLog(@"-(bool) _showBrowser:(id*)");
}

-(bool) _showFeedBrowser:(id*) {
	%orig;
	NSLog(@"-(bool) _showFeedBrowser:(id*)");
}

-(bool) _showFeedWeb:(id*) {
	%orig;
	NSLog(@"-(bool) _showFeedWeb:(id*)");
}

-(bool) _showNativeWithCanShowError:(id*) validationError:(id*) {
	%orig;
	NSLog(@"-(bool) _showNativeWithCanShowError:(id*) validationError:(id*)");
}

-(bool) _showShareSheetWithCanShowError:(id*) validationError:(id*) {
	%orig;
	NSLog(@"-(bool) _showShareSheetWithCanShowError:(id*) validationError:(id*)");
}

-(bool) _showWeb:(id*) {
	%orig;
	NSLog(@"-(bool) _showWeb:(id*)");
}

-(void) _invokeDelegateDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) _invokeDelegateDidFailWithError:(id)");
}

-(void) _logDialogShow {
	%orig;
	NSLog(@"-(void) _logDialogShow");
}

-(bool) _validateFullyCompatibleWithError:(id*) {
	%orig;
	NSLog(@"-(bool) _validateFullyCompatibleWithError:(id*)");
}

-(void) _cleanUpWebDialog {
	%orig;
	NSLog(@"-(void) _cleanUpWebDialog");
}

-(void) _invokeDelegateDidCancel {
	%orig;
	NSLog(@"-(void) _invokeDelegateDidCancel");
}

-(void) _handleWebResponseParameters:(id) error:(id) cancelled:(bool) {
	%orig;
	NSLog(@"-(void) _handleWebResponseParameters:(id) error:(id) cancelled:(bool)");
}

-(bool) _isDefaultToShareSheet {
	%orig;
	NSLog(@"-(bool) _isDefaultToShareSheet");
}

-(bool) _useNativeDialog {
	%orig;
	NSLog(@"-(bool) _useNativeDialog");
}

-(bool) _canUseFBShareSheet {
	%orig;
	NSLog(@"-(bool) _canUseFBShareSheet");
}

-(bool) _supportsShareSheetMinimumVersion:(id) {
	%orig;
	NSLog(@"-(bool) _supportsShareSheetMinimumVersion:(id)");
}

-(id) _contentVideoURL:(id) {
	%orig;
	NSLog(@"-(id) _contentVideoURL:(id)");
}

-(void) _invokeDelegateDidCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) _invokeDelegateDidCompleteWithResults:(id)");
}

-(bool) _validateShareContentForBrowserWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) _validateShareContentForBrowserWithOptions:(unsigned long long) error:(id*)");
}

-(bool) _photoContentHasAtLeastOneImage:(id) {
	%orig;
	NSLog(@"-(bool) _photoContentHasAtLeastOneImage:(id)");
}

-(bool) _useSafariViewController {
	%orig;
	NSLog(@"-(bool) _useSafariViewController");
}

-(bool) _validateShareContentForFeed:(id*) {
	%orig;
	NSLog(@"-(bool) _validateShareContentForFeed:(id*)");
}

-(bool) _validateShareContentForNative:(id*) {
	%orig;
	NSLog(@"-(bool) _validateShareContentForNative:(id*)");
}

-(void) _loadNativeMethodName:(id*) methodVersion:(id*) {
	%orig;
	NSLog(@"-(void) _loadNativeMethodName:(id*) methodVersion:(id*)");
}

-(bool) _validateShareContentForShareSheet:(id*) {
	%orig;
	NSLog(@"-(bool) _validateShareContentForShareSheet:(id*)");
}

-(id) _contentImages {
	%orig;
	NSLog(@"-(id) _contentImages");
}

-(id) _contentURLs {
	%orig;
	NSLog(@"-(id) _contentURLs");
}

-(id) _contentVideoURLs {
	%orig;
	NSLog(@"-(id) _contentVideoURLs");
}

-(id) _calculateInitialText {
	%orig;
	NSLog(@"-(id) _calculateInitialText");
}

-(bool) _canUseQuoteInShareSheet {
	%orig;
	NSLog(@"-(bool) _canUseQuoteInShareSheet");
}

-(bool) _validateShareMediaContentAvailability:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) _validateShareMediaContentAvailability:(id) error:(id*)");
}

-(bool) _isOpenGraphURLShare:(id) {
	%orig;
	NSLog(@"-(bool) _isOpenGraphURLShare:(id)");
}

-(bool) _canUseMMPInShareSheet {
	%orig;
	NSLog(@"-(bool) _canUseMMPInShareSheet");
}

-(bool) _canAttributeThroughShareSheet {
	%orig;
	NSLog(@"-(bool) _canAttributeThroughShareSheet");
}

-(id) _calculatePreJSONInitialTextWithHashtag:(id) {
	%orig;
	NSLog(@"-(id) _calculatePreJSONInitialTextWithHashtag:(id)");
}

-(bool) validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithError:(id*)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) show {
	%orig;
	NSLog(@"-(bool) show");
}

-(id) fromViewController {
	%orig;
	NSLog(@"-(id) fromViewController");
}

-(unsigned long long) mode {
	%orig;
	NSLog(@"-(unsigned long long) mode");
}

-(void) setMode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMode:(unsigned long long)");
}

%end

%hook FBSDKShareCameraEffectContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) addParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) addParameters:(id) bridgeOptions:(unsigned long long)");
}

-(bool) isEqualToShareCameraEffectContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToShareCameraEffectContent:(id)");
}

-(id) effectArguments {
	%orig;
	NSLog(@"-(id) effectArguments");
}

-(id) effectTextures {
	%orig;
	NSLog(@"-(id) effectTextures");
}

-(id) hashtag {
	%orig;
	NSLog(@"-(id) hashtag");
}

-(void) addToParameters:(id) bridgeOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addToParameters:(id) bridgeOptions:(unsigned long long)");
}

-(void) setHashtag:(id) {
	%orig;
	NSLog(@"-(void) setHashtag:(id)");
}

-(id) schemeForMode:(unsigned long long) {
	%orig;
	NSLog(@"-(id) schemeForMode:(unsigned long long)");
}

-(void) setEffectID:(id) {
	%orig;
	NSLog(@"-(void) setEffectID:(id)");
}

-(void) setEffectArguments:(id) {
	%orig;
	NSLog(@"-(void) setEffectArguments:(id)");
}

-(void) setEffectTextures:(id) {
	%orig;
	NSLog(@"-(void) setEffectTextures:(id)");
}

-(void) setPageID:(id) {
	%orig;
	NSLog(@"-(void) setPageID:(id)");
}

-(id) pageID {
	%orig;
	NSLog(@"-(id) pageID");
}

-(void) setPlaceID:(id) {
	%orig;
	NSLog(@"-(void) setPlaceID:(id)");
}

-(id) placeID {
	%orig;
	NSLog(@"-(id) placeID");
}

-(id) ref {
	%orig;
	NSLog(@"-(id) ref");
}

-(void) setRef:(id) {
	%orig;
	NSLog(@"-(void) setRef:(id)");
}

-(id) shareUUID {
	%orig;
	NSLog(@"-(id) shareUUID");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) setPeopleIDs:(id) {
	%orig;
	NSLog(@"-(void) setPeopleIDs:(id)");
}

-(id) effectID {
	%orig;
	NSLog(@"-(id) effectID");
}

-(id) peopleIDs {
	%orig;
	NSLog(@"-(id) peopleIDs");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKShareAPI

+(id) defaultAssetsLibrary {
	%orig;
	NSLog(@"+(id) defaultAssetsLibrary");
}

+(id) shareWithContent:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) shareWithContent:(id) delegate:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setShareContent:(id) {
	%orig;
	NSLog(@"-(void) setShareContent:(id)");
}

-(bool) _hasPublishActions {
	%orig;
	NSLog(@"-(bool) _hasPublishActions");
}

-(bool) _stageOpenGraphObject:(id) connection:(id) stagingHandler:(id) completionHandler:(?) {
	%orig;
	NSLog(@"-(bool) _stageOpenGraphObject:(id) connection:(id) stagingHandler:(id) completionHandler:(?)");
}

-(id) shareContent {
	%orig;
	NSLog(@"-(id) shareContent");
}

-(bool) _shareLinkContent:(id) {
	%orig;
	NSLog(@"-(bool) _shareLinkContent:(id)");
}

-(bool) _sharePhotoContent:(id) {
	%orig;
	NSLog(@"-(bool) _sharePhotoContent:(id)");
}

-(bool) _shareVideoContent:(id) {
	%orig;
	NSLog(@"-(bool) _shareVideoContent:(id)");
}

-(bool) _shareOpenGraphContent:(id) {
	%orig;
	NSLog(@"-(bool) _shareOpenGraphContent:(id)");
}

-(void) _addCommonParameters:(id) content:(id) {
	%orig;
	NSLog(@"-(void) _addCommonParameters:(id) content:(id)");
}

-(id) _graphPathWithSuffix:(id) {
	%orig;
	NSLog(@"-(id) _graphPathWithSuffix:(id)");
}

-(id) _connection:(id) addRequest:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) _connection:(id) addRequest:(id) completionHandler:(id)");
}

-(bool) _stageOpenGraphValueContainer:(id) connection:(id) stagingHandler:(id) {
	%orig;
	NSLog(@"-(bool) _stageOpenGraphValueContainer:(id) connection:(id) stagingHandler:(id)");
}

-(bool) _addToPendingShareAPI {
	%orig;
	NSLog(@"-(bool) _addToPendingShareAPI");
}

-(bool) _addEncodedParametersToDictionary:(id) key:(id) value:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) _addEncodedParametersToDictionary:(id) key:(id) value:(id) error:(id*)");
}

-(bool) _stageValue:(id) connection:(id) stagingHandler:(id) {
	%orig;
	NSLog(@"-(bool) _stageValue:(id) connection:(id) stagingHandler:(id)");
}

-(bool) _stagePhoto:(id) connection:(id) stagingHandler:(id) {
	%orig;
	NSLog(@"-(bool) _stagePhoto:(id) connection:(id) stagingHandler:(id)");
}

-(bool) _stageArray:(id) connection:(id) stagingHandler:(id) {
	%orig;
	NSLog(@"-(bool) _stageArray:(id) connection:(id) stagingHandler:(id)");
}

-(void) _removeFromPendingShareAPI {
	%orig;
	NSLog(@"-(void) _removeFromPendingShareAPI");
}

-(id) videoChunkDataForVideoUploader:(id) startOffset:(unsigned long long) endOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(id) videoChunkDataForVideoUploader:(id) startOffset:(unsigned long long) endOffset:(unsigned long long)");
}

-(void) videoUploader:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) videoUploader:(id) didCompleteWithResults:(id)");
}

-(void) videoUploader:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) videoUploader:(id) didFailWithError:(id)");
}

-(bool) shouldFailOnDataError {
	%orig;
	NSLog(@"-(bool) shouldFailOnDataError");
}

-(void) setShouldFailOnDataError:(bool) {
	%orig;
	NSLog(@"-(void) setShouldFailOnDataError:(bool)");
}

-(bool) createOpenGraphObject:(id) {
	%orig;
	NSLog(@"-(bool) createOpenGraphObject:(id)");
}

-(bool) canShare {
	%orig;
	NSLog(@"-(bool) canShare");
}

-(bool) validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithError:(id*)");
}

-(void) setGraphNode:(id) {
	%orig;
	NSLog(@"-(void) setGraphNode:(id)");
}

-(id) graphNode {
	%orig;
	NSLog(@"-(id) graphNode");
}

-(id) accessToken {
	%orig;
	NSLog(@"-(id) accessToken");
}

-(void) setAccessToken:(id) {
	%orig;
	NSLog(@"-(void) setAccessToken:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(bool) share {
	%orig;
	NSLog(@"-(bool) share");
}

%end

%hook FBSDKMessageDialog

+(id) showWithContent:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) showWithContent:(id) delegate:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setShareContent:(id) {
	%orig;
	NSLog(@"-(void) setShareContent:(id)");
}

-(bool) canShow {
	%orig;
	NSLog(@"-(bool) canShow");
}

-(void) _handleCompletionWithDialogResults:(id) response:(id) {
	%orig;
	NSLog(@"-(void) _handleCompletionWithDialogResults:(id) response:(id)");
}

-(id) shareContent {
	%orig;
	NSLog(@"-(id) shareContent");
}

-(bool) shouldFailOnDataError {
	%orig;
	NSLog(@"-(bool) shouldFailOnDataError");
}

-(void) setShouldFailOnDataError:(bool) {
	%orig;
	NSLog(@"-(void) setShouldFailOnDataError:(bool)");
}

-(bool) _canShowNative {
	%orig;
	NSLog(@"-(bool) _canShowNative");
}

-(void) _invokeDelegateDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) _invokeDelegateDidFailWithError:(id)");
}

-(void) _logDialogShow {
	%orig;
	NSLog(@"-(void) _logDialogShow");
}

-(void) _invokeDelegateDidCancel {
	%orig;
	NSLog(@"-(void) _invokeDelegateDidCancel");
}

-(void) _invokeDelegateDidCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) _invokeDelegateDidCompleteWithResults:(id)");
}

-(bool) validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithError:(id*)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) show {
	%orig;
	NSLog(@"-(bool) show");
}

%end

%hook FBSDKLikeDialog

+(id) likeWithObjectID:(id) objectType:(unsigned long long) delegate:(id) {
	%orig;
	NSLog(@"+(id) likeWithObjectID:(id) objectType:(unsigned long long) delegate:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setFromViewController:(id) {
	%orig;
	NSLog(@"-(void) setFromViewController:(id)");
}

-(void) _handleCompletionWithDialogResults:(id) error:(id) {
	%orig;
	NSLog(@"-(void) _handleCompletionWithDialogResults:(id) error:(id)");
}

-(bool) like {
	%orig;
	NSLog(@"-(bool) like");
}

-(bool) canLike {
	%orig;
	NSLog(@"-(bool) canLike");
}

-(bool) _canLikeNative {
	%orig;
	NSLog(@"-(bool) _canLikeNative");
}

-(bool) shouldFailOnDataError {
	%orig;
	NSLog(@"-(bool) shouldFailOnDataError");
}

-(void) setShouldFailOnDataError:(bool) {
	%orig;
	NSLog(@"-(void) setShouldFailOnDataError:(bool)");
}

-(void) setObjectID:(id) {
	%orig;
	NSLog(@"-(void) setObjectID:(id)");
}

-(id) objectID {
	%orig;
	NSLog(@"-(id) objectID");
}

-(bool) validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithError:(id*)");
}

-(unsigned long long) objectType {
	%orig;
	NSLog(@"-(unsigned long long) objectType");
}

-(void) setObjectType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setObjectType:(unsigned long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) fromViewController {
	%orig;
	NSLog(@"-(id) fromViewController");
}

%end

%hook FBSDKLikeActionControllerCache

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) accessTokenString {
	%orig;
	NSLog(@"-(id) accessTokenString");
}

-(id) initWithAccessTokenString:(id) {
	%orig;
	NSLog(@"-(id) initWithAccessTokenString:(id)");
}

-(void) resetForAccessTokenString:(id) {
	%orig;
	NSLog(@"-(void) resetForAccessTokenString:(id)");
}

-(void) _prune {
	%orig;
	NSLog(@"-(void) _prune");
}

-(id) objectForKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(id) objectForKeyedSubscript:(id)");
}

-(void) setObject:(id) forKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKeyedSubscript:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKLikeActionController

+(void) _accessTokenDidChangeNotification:(id) {
	%orig;
	NSLog(@"+(void) _accessTokenDidChangeNotification:(id)");
}

+(id) _cacheFileURL {
	%orig;
	NSLog(@"+(id) _cacheFileURL");
}

+(id) likeActionControllerForObjectID:(id) objectType:(unsigned long long) {
	%orig;
	NSLog(@"+(id) likeActionControllerForObjectID:(id) objectType:(unsigned long long)");
}

+(bool) isDisabled {
	%orig;
	NSLog(@"+(bool) isDisabled");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(void) _applicationWillResignActiveNotification:(id) {
	%orig;
	NSLog(@"+(void) _applicationWillResignActiveNotification:(id)");
}

-(id) initWithObjectID:(id) objectType:(unsigned long long) accessToken:(id) {
	%orig;
	NSLog(@"-(id) initWithObjectID:(id) objectType:(unsigned long long) accessToken:(id)");
}

-(void) _refreshWithMode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _refreshWithMode:(unsigned long long)");
}

-(void) _setExecuting:(bool) forKey:(id) {
	%orig;
	NSLog(@"-(void) _setExecuting:(bool) forKey:(id)");
}

-(bool) _useOGLike {
	%orig;
	NSLog(@"-(bool) _useOGLike");
}

-(void) _updateWithObjectIsLiked:(long long) likeCountStringWithLike:(id) likeCountStringWithoutLike:(id) socialSentenceWithLike:(id) socialSentenceWithoutLike:(id) unlikeToken:(id) soundEnabled:(bool) animated:(bool) deferred:(bool) {
	%orig;
	NSLog(@"-(void) _updateWithObjectIsLiked:(long long) likeCountStringWithLike:(id) likeCountStringWithoutLike:(id) socialSentenceWithLike:(id) socialSentenceWithoutLike:(id) unlikeToken:(id) soundEnabled:(bool) animated:(bool) deferred:(bool)");
}

-(void) _publishLikeWithUpdateBlock:(id) analyticsParameters:(?) fromViewController:(id) {
	%orig;
	NSLog(@"-(void) _publishLikeWithUpdateBlock:(id) analyticsParameters:(?) fromViewController:(id)");
}

-(void) _presentLikeDialogWithUpdateBlock:(id) analyticsParameters:(?) fromViewController:(id) {
	%orig;
	NSLog(@"-(void) _presentLikeDialogWithUpdateBlock:(id) analyticsParameters:(?) fromViewController:(id)");
}

-(void) _publishUnlikeWithUpdateBlock:(id) analyticsParameters:(?) fromViewController:(id) {
	%orig;
	NSLog(@"-(void) _publishUnlikeWithUpdateBlock:(id) analyticsParameters:(?) fromViewController:(id)");
}

-(bool) objectIsLiked {
	%orig;
	NSLog(@"-(bool) objectIsLiked");
}

-(void) _publishIfNeededWithUpdateBlock:(id) analyticsParameters:(?) fromViewController:(id) {
	%orig;
	NSLog(@"-(void) _publishIfNeededWithUpdateBlock:(id) analyticsParameters:(?) fromViewController:(id)");
}

-(void) _ensureVerifiedObjectID:(id) {
	%orig;
	NSLog(@"-(void) _ensureVerifiedObjectID:(id)");
}

-(void) likeDialog:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) likeDialog:(id) didCompleteWithResults:(id)");
}

-(void) likeDialog:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) likeDialog:(id) didFailWithError:(id)");
}

-(id) likeCountString {
	%orig;
	NSLog(@"-(id) likeCountString");
}

-(id) socialSentence {
	%orig;
	NSLog(@"-(id) socialSentence");
}

-(void) toggleLikeWithSoundEnabled:(bool) analyticsParameters:(id) fromViewController:(id) {
	%orig;
	NSLog(@"-(void) toggleLikeWithSoundEnabled:(bool) analyticsParameters:(id) fromViewController:(id)");
}

-(id) objectID {
	%orig;
	NSLog(@"-(id) objectID");
}

-(unsigned long long) objectType {
	%orig;
	NSLog(@"-(unsigned long long) objectType");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) _configure {
	%orig;
	NSLog(@"-(void) _configure");
}

-(id) lastUpdateTime {
	%orig;
	NSLog(@"-(id) lastUpdateTime");
}

-(bool) beginContentAccess {
	%orig;
	NSLog(@"-(bool) beginContentAccess");
}

-(void) endContentAccess {
	%orig;
	NSLog(@"-(void) endContentAccess");
}

-(void) discardContentIfPossible {
	%orig;
	NSLog(@"-(void) discardContentIfPossible");
}

-(bool) isContentDiscarded {
	%orig;
	NSLog(@"-(bool) isContentDiscarded");
}

-(void) refresh {
	%orig;
	NSLog(@"-(void) refresh");
}

%end

%hook FBSDKHashtag

+(id) hashtagWithString:(id) {
	%orig;
	NSLog(@"+(id) hashtagWithString:(id)");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) isEqualToHashtag:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToHashtag:(id)");
}

-(void) setStringRepresentation:(id) {
	%orig;
	NSLog(@"-(void) setStringRepresentation:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

-(id) stringRepresentation {
	%orig;
	NSLog(@"-(id) stringRepresentation");
}

%end

%hook FBSDKGameRequestFrictionlessRecipientCache

-(void) _accessTokenDidChangeNotification:(id) {
	%orig;
	NSLog(@"-(void) _accessTokenDidChangeNotification:(id)");
}

-(void) _updateCache {
	%orig;
	NSLog(@"-(void) _updateCache");
}

-(bool) recipientsAreFrictionless:(id) {
	%orig;
	NSLog(@"-(bool) recipientsAreFrictionless:(id)");
}

-(void) updateWithResults:(id) {
	%orig;
	NSLog(@"-(void) updateWithResults:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKGameRequestDialog

+(id) showWithContent:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) showWithContent:(id) delegate:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) webDialogDidCancel:(id) {
	%orig;
	NSLog(@"-(void) webDialogDidCancel:(id)");
}

-(void) webDialog:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didCompleteWithResults:(id)");
}

-(void) webDialog:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didFailWithError:(id)");
}

-(bool) canShow {
	%orig;
	NSLog(@"-(bool) canShow");
}

-(id) _actionTypeNameForActionType:(unsigned long long) {
	%orig;
	NSLog(@"-(id) _actionTypeNameForActionType:(unsigned long long)");
}

-(id) _filtersNameForFilters:(unsigned long long) {
	%orig;
	NSLog(@"-(id) _filtersNameForFilters:(unsigned long long)");
}

-(void) _handleCompletionWithDialogResults:(id) error:(id) {
	%orig;
	NSLog(@"-(void) _handleCompletionWithDialogResults:(id) error:(id)");
}

-(bool) frictionlessRequestsEnabled {
	%orig;
	NSLog(@"-(bool) frictionlessRequestsEnabled");
}

-(void) setFrictionlessRequestsEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setFrictionlessRequestsEnabled:(bool)");
}

-(void) setContent:(id) {
	%orig;
	NSLog(@"-(void) setContent:(id)");
}

-(void) _cleanUp {
	%orig;
	NSLog(@"-(void) _cleanUp");
}

-(bool) validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithError:(id*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) show {
	%orig;
	NSLog(@"-(bool) show");
}

-(id) content {
	%orig;
	NSLog(@"-(id) content");
}

%end

%hook FBSDKGameRequestContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(id) recipientSuggestions {
	%orig;
	NSLog(@"-(id) recipientSuggestions");
}

-(void) setRecipientSuggestions:(id) {
	%orig;
	NSLog(@"-(void) setRecipientSuggestions:(id)");
}

-(bool) isEqualToGameRequestContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToGameRequestContent:(id)");
}

-(void) setTo:(id) {
	%orig;
	NSLog(@"-(void) setTo:(id)");
}

-(id) to {
	%orig;
	NSLog(@"-(id) to");
}

-(void) setObjectID:(id) {
	%orig;
	NSLog(@"-(void) setObjectID:(id)");
}

-(id) objectID {
	%orig;
	NSLog(@"-(id) objectID");
}

-(unsigned long long) actionType {
	%orig;
	NSLog(@"-(unsigned long long) actionType");
}

-(void) setActionType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setActionType:(unsigned long long)");
}

-(id) suggestions {
	%orig;
	NSLog(@"-(id) suggestions");
}

-(id) recipients {
	%orig;
	NSLog(@"-(id) recipients");
}

-(void) setRecipients:(id) {
	%orig;
	NSLog(@"-(void) setRecipients:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) filters {
	%orig;
	NSLog(@"-(unsigned long long) filters");
}

-(void) setFilters:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setFilters:(unsigned long long)");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

-(void) setSuggestions:(id) {
	%orig;
	NSLog(@"-(void) setSuggestions:(id)");
}

%end

%hook FBSDKCameraEffectTextures

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) _valueOfClass:(Class) forKey:(id) {
	%orig;
	NSLog(@"-(id) _valueOfClass:(Class) forKey:(id)");
}

-(bool) isEqualToCameraEffectTextures:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToCameraEffectTextures:(id)");
}

-(id) _valueForKey:(id) {
	%orig;
	NSLog(@"-(id) _valueForKey:(id)");
}

-(void) _setValue:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) _setValue:(id) forKey:(id)");
}

-(id) imageForKey:(id) {
	%orig;
	NSLog(@"-(id) imageForKey:(id)");
}

-(void) setImage:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id) forKey:(id)");
}

-(id) allTextures {
	%orig;
	NSLog(@"-(id) allTextures");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKCameraEffectArguments

+(void) assertKey:(id) {
	%orig;
	NSLog(@"+(void) assertKey:(id)");
}

+(void) assertValue:(id) {
	%orig;
	NSLog(@"+(void) assertValue:(id)");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) isEqualToCameraEffectArguments:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToCameraEffectArguments:(id)");
}

-(id) _valueOfClass:(Class) forKey:(id) {
	%orig;
	NSLog(@"-(id) _valueOfClass:(Class) forKey:(id)");
}

-(id) allArguments {
	%orig;
	NSLog(@"-(id) allArguments");
}

-(void) setArray:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setArray:(id) forKey:(id)");
}

-(id) _valueForKey:(id) {
	%orig;
	NSLog(@"-(id) _valueForKey:(id)");
}

-(void) _setValue:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) _setValue:(id) forKey:(id)");
}

-(void) setString:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setString:(id) forKey:(id)");
}

-(id) arrayForKey:(id) {
	%orig;
	NSLog(@"-(id) arrayForKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) stringForKey:(id) {
	%orig;
	NSLog(@"-(id) stringForKey:(id)");
}

%end

%hook FBSDKAppInviteDialog

+(id) showWithContent:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) showWithContent:(id) delegate:(id)");
}

+(id) showFromViewController:(id) withContent:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) showFromViewController:(id) withContent:(id) delegate:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setFromViewController:(id) {
	%orig;
	NSLog(@"-(void) setFromViewController:(id)");
}

-(bool) canShow {
	%orig;
	NSLog(@"-(bool) canShow");
}

-(void) setContent:(id) {
	%orig;
	NSLog(@"-(void) setContent:(id)");
}

-(bool) validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithError:(id*)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) show {
	%orig;
	NSLog(@"-(bool) show");
}

-(id) fromViewController {
	%orig;
	NSLog(@"-(id) fromViewController");
}

-(id) content {
	%orig;
	NSLog(@"-(id) content");
}

%end

%hook FBSDKAppInviteContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) appInvitePreviewImageURL {
	%orig;
	NSLog(@"-(id) appInvitePreviewImageURL");
}

-(void) setAppInvitePreviewImageURL:(id) {
	%orig;
	NSLog(@"-(void) setAppInvitePreviewImageURL:(id)");
}

-(bool) _validatePromoCodeWithError:(id*) {
	%orig;
	NSLog(@"-(bool) _validatePromoCodeWithError:(id*)");
}

-(bool) isEqualToAppInviteContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToAppInviteContent:(id)");
}

-(id) appLinkURL {
	%orig;
	NSLog(@"-(id) appLinkURL");
}

-(id) promotionText {
	%orig;
	NSLog(@"-(id) promotionText");
}

-(bool) validateWithOptions:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithOptions:(unsigned long long) error:(id*)");
}

-(void) setPreviewImageURL:(id) {
	%orig;
	NSLog(@"-(void) setPreviewImageURL:(id)");
}

-(void) setAppLinkURL:(id) {
	%orig;
	NSLog(@"-(void) setAppLinkURL:(id)");
}

-(id) promotionCode {
	%orig;
	NSLog(@"-(id) promotionCode");
}

-(void) setPromotionCode:(id) {
	%orig;
	NSLog(@"-(void) setPromotionCode:(id)");
}

-(void) setPromotionText:(id) {
	%orig;
	NSLog(@"-(void) setPromotionText:(id)");
}

-(id) previewImageURL {
	%orig;
	NSLog(@"-(id) previewImageURL");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setDestination:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDestination:(unsigned long long)");
}

-(unsigned long long) destination {
	%orig;
	NSLog(@"-(unsigned long long) destination");
}

%end

%hook FBSDKAppGroupJoinDialog

+(id) showWithGroupID:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) showWithGroupID:(id) delegate:(id)");
}

-(void) webDialogDidCancel:(id) {
	%orig;
	NSLog(@"-(void) webDialogDidCancel:(id)");
}

-(void) webDialog:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didCompleteWithResults:(id)");
}

-(void) webDialog:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didFailWithError:(id)");
}

-(bool) canShow {
	%orig;
	NSLog(@"-(bool) canShow");
}

-(void) _handleCompletionWithDialogResults:(id) error:(id) {
	%orig;
	NSLog(@"-(void) _handleCompletionWithDialogResults:(id) error:(id)");
}

-(id) groupID {
	%orig;
	NSLog(@"-(id) groupID");
}

-(void) setGroupID:(id) {
	%orig;
	NSLog(@"-(void) setGroupID:(id)");
}

-(bool) validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithError:(id*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) show {
	%orig;
	NSLog(@"-(bool) show");
}

%end

%hook FBSDKAppGroupContent

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) isEqualToAppGroupContent:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToAppGroupContent:(id)");
}

-(void) setGroupDescription:(id) {
	%orig;
	NSLog(@"-(void) setGroupDescription:(id)");
}

-(void) setPrivacy:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setPrivacy:(unsigned long long)");
}

-(unsigned long long) privacy {
	%orig;
	NSLog(@"-(unsigned long long) privacy");
}

-(id) groupDescription {
	%orig;
	NSLog(@"-(id) groupDescription");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKAppGroupAddDialog

+(id) showWithContent:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) showWithContent:(id) delegate:(id)");
}

-(void) webDialogDidCancel:(id) {
	%orig;
	NSLog(@"-(void) webDialogDidCancel:(id)");
}

-(void) webDialog:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didCompleteWithResults:(id)");
}

-(void) webDialog:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didFailWithError:(id)");
}

-(bool) canShow {
	%orig;
	NSLog(@"-(bool) canShow");
}

-(void) _handleCompletionWithDialogResults:(id) error:(id) {
	%orig;
	NSLog(@"-(void) _handleCompletionWithDialogResults:(id) error:(id)");
}

-(void) setContent:(id) {
	%orig;
	NSLog(@"-(void) setContent:(id)");
}

-(bool) validateWithError:(id*) {
	%orig;
	NSLog(@"-(bool) validateWithError:(id*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) show {
	%orig;
	NSLog(@"-(bool) show");
}

-(id) content {
	%orig;
	NSLog(@"-(id) content");
}

%end

%hook FBSDKLoginUtility

+(id) userIDFromSignedRequest:(id) {
	%orig;
	NSLog(@"+(id) userIDFromSignedRequest:(id)");
}

+(id) stringForAudience:(unsigned long long) {
	%orig;
	NSLog(@"+(id) stringForAudience:(unsigned long long)");
}

+(id) queryParamsFromLoginURL:(id) {
	%orig;
	NSLog(@"+(id) queryParamsFromLoginURL:(id)");
}

%end

%hook FBSDKLoginManagerLoginResult

-(id) declinedPermissions {
	%orig;
	NSLog(@"-(id) declinedPermissions");
}

-(void) setDeclinedPermissions:(id) {
	%orig;
	NSLog(@"-(void) setDeclinedPermissions:(id)");
}

-(id) initWithToken:(id) isCancelled:(bool) grantedPermissions:(id) declinedPermissions:(id) {
	%orig;
	NSLog(@"-(id) initWithToken:(id) isCancelled:(bool) grantedPermissions:(id) declinedPermissions:(id)");
}

-(void) addLoggingExtra:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) addLoggingExtra:(id) forKey:(id)");
}

-(void) setIsSkipped:(bool) {
	%orig;
	NSLog(@"-(void) setIsSkipped:(bool)");
}

-(bool) isSkipped {
	%orig;
	NSLog(@"-(bool) isSkipped");
}

-(id) loggingExtras {
	%orig;
	NSLog(@"-(id) loggingExtras");
}

-(id) grantedPermissions {
	%orig;
	NSLog(@"-(id) grantedPermissions");
}

-(void) setGrantedPermissions:(id) {
	%orig;
	NSLog(@"-(void) setGrantedPermissions:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isCancelled {
	%orig;
	NSLog(@"-(bool) isCancelled");
}

-(id) token {
	%orig;
	NSLog(@"-(id) token");
}

-(void) setToken:(id) {
	%orig;
	NSLog(@"-(void) setToken:(id)");
}

%end

%hook FBSDKLoginManagerLogger

+(id) loggerFromParameters:(id) {
	%orig;
	NSLog(@"+(id) loggerFromParameters:(id)");
}

-(void) endLoginWithResult:(id) error:(id) {
	%orig;
	NSLog(@"-(void) endLoginWithResult:(id) error:(id)");
}

-(id) initWithLoggingToken:(id) {
	%orig;
	NSLog(@"-(id) initWithLoggingToken:(id)");
}

-(void) startSessionForLoginManager:(id) {
	%orig;
	NSLog(@"-(void) startSessionForLoginManager:(id)");
}

-(void) startAuthMethod:(id) {
	%orig;
	NSLog(@"-(void) startAuthMethod:(id)");
}

-(void) willAttemptAppSwitchingBehavior {
	%orig;
	NSLog(@"-(void) willAttemptAppSwitchingBehavior");
}

-(id) parametersWithTimeStampAndClientState:(id) forAuthMethod:(id) {
	%orig;
	NSLog(@"-(id) parametersWithTimeStampAndClientState:(id) forAuthMethod:(id)");
}

-(void) logNativeAppDialogResult:(bool) dialogDuration:(double) {
	%orig;
	NSLog(@"-(void) logNativeAppDialogResult:(bool) dialogDuration:(double)");
}

-(void) systemAuthDidShowDialog:(bool) isUnTOSedDevice:(bool) {
	%orig;
	NSLog(@"-(void) systemAuthDidShowDialog:(bool) isUnTOSedDevice:(bool)");
}

-(id) _parametersForNewEvent {
	%orig;
	NSLog(@"-(id) _parametersForNewEvent");
}

-(void) logEvent:(id) params:(id) {
	%orig;
	NSLog(@"-(void) logEvent:(id) params:(id)");
}

-(void) logEvent:(id) result:(id) error:(id) {
	%orig;
	NSLog(@"-(void) logEvent:(id) result:(id) error:(id)");
}

-(id) clientStateForAuthMethod:(id) andExistingState:(id) {
	%orig;
	NSLog(@"-(id) clientStateForAuthMethod:(id) andExistingState:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) endSession {
	%orig;
	NSLog(@"-(void) endSession");
}

%end

%hook FBSDKLoginManagerSystemAccountState

-(void) setDidShowDialog:(bool) {
	%orig;
	NSLog(@"-(void) setDidShowDialog:(bool)");
}

-(void) setReauthorize:(bool) {
	%orig;
	NSLog(@"-(void) setReauthorize:(bool)");
}

-(void) setUnTOSedDevice:(bool) {
	%orig;
	NSLog(@"-(void) setUnTOSedDevice:(bool)");
}

-(bool) isReauthorize {
	%orig;
	NSLog(@"-(bool) isReauthorize");
}

-(bool) isUnTOSedDevice {
	%orig;
	NSLog(@"-(bool) isUnTOSedDevice");
}

-(bool) didShowDialog {
	%orig;
	NSLog(@"-(bool) didShowDialog");
}

%end

%hook FBSDKLoginManager

+(id) stringForChallenge {
	%orig;
	NSLog(@"+(id) stringForChallenge");
}

+(void) renewSystemCredentials:(id) {
	%orig;
	NSLog(@"+(void) renewSystemCredentials:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setFromViewController:(id) {
	%orig;
	NSLog(@"-(void) setFromViewController:(id)");
}

-(void) logInWithReadPermissions:(id) fromViewController:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) logInWithReadPermissions:(id) fromViewController:(id) handler:(id)");
}

-(void) logOut {
	%orig;
	NSLog(@"-(void) logOut");
}

-(void) setDefaultAudience:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDefaultAudience:(unsigned long long)");
}

-(void) logInWithPublishPermissions:(id) fromViewController:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) logInWithPublishPermissions:(id) fromViewController:(id) handler:(id)");
}

-(bool) canOpenURL:(id) forApplication:(id) sourceApplication:(id) annotation:(id) {
	%orig;
	NSLog(@"-(bool) canOpenURL:(id) forApplication:(id) sourceApplication:(id) annotation:(id)");
}

-(bool) isAuthenticationURL:(id) {
	%orig;
	NSLog(@"-(bool) isAuthenticationURL:(id)");
}

-(void) webDialogDidCancel:(id) {
	%orig;
	NSLog(@"-(void) webDialogDidCancel:(id)");
}

-(void) webDialog:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didCompleteWithResults:(id)");
}

-(void) webDialog:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) webDialog:(id) didFailWithError:(id)");
}

-(void) logInWithPermissions:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) logInWithPermissions:(id) handler:(id)");
}

-(unsigned long long) defaultAudience {
	%orig;
	NSLog(@"-(unsigned long long) defaultAudience");
}

-(unsigned long long) loginBehavior {
	%orig;
	NSLog(@"-(unsigned long long) loginBehavior");
}

-(void) setLoginBehavior:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLoginBehavior:(unsigned long long)");
}

-(void) logInWithBehavior:(unsigned long long) {
	%orig;
	NSLog(@"-(void) logInWithBehavior:(unsigned long long)");
}

-(bool) validateLoginStartState {
	%orig;
	NSLog(@"-(bool) validateLoginStartState");
}

-(void) assertPermissions:(id) {
	%orig;
	NSLog(@"-(void) assertPermissions:(id)");
}

-(void) raiseLoginException:(id) {
	%orig;
	NSLog(@"-(void) raiseLoginException:(id)");
}

-(void) reauthorizeDataAccess:(id) {
	%orig;
	NSLog(@"-(void) reauthorizeDataAccess:(id)");
}

-(void) invokeHandler:(id) error:(id) {
	%orig;
	NSLog(@"-(void) invokeHandler:(id) error:(id)");
}

-(void) handleImplicitCancelOfLogIn {
	%orig;
	NSLog(@"-(void) handleImplicitCancelOfLogIn");
}

-(id) loadExpectedChallenge {
	%orig;
	NSLog(@"-(id) loadExpectedChallenge");
}

-(void) storeExpectedChallenge:(id) {
	%orig;
	NSLog(@"-(void) storeExpectedChallenge:(id)");
}

-(void) determineRecentlyGrantedPermissions:(id*) recentlyDeclinedPermissions:(id*) forGrantedPermission:(id) declinedPermissions:(id) {
	%orig;
	NSLog(@"-(void) determineRecentlyGrantedPermissions:(id*) recentlyDeclinedPermissions:(id*) forGrantedPermission:(id) declinedPermissions:(id)");
}

-(void) validateReauthentication:(id) withResult:(id) {
	%orig;
	NSLog(@"-(void) validateReauthentication:(id) withResult:(id)");
}

-(id) logInParametersWithPermissions:(id) serverConfiguration:(id) {
	%orig;
	NSLog(@"-(id) logInParametersWithPermissions:(id) serverConfiguration:(id)");
}

-(void) performNativeLogInWithParameters:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) performNativeLogInWithParameters:(id) handler:(id)");
}

-(void) performBrowserLogInWithParameters:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) performBrowserLogInWithParameters:(id) handler:(id)");
}

-(void) beginSystemLogIn {
	%orig;
	NSLog(@"-(void) beginSystemLogIn");
}

-(void) performWebLogInWithParameters:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) performWebLogInWithParameters:(id) handler:(id)");
}

-(void) logInWithReadPermissions:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) logInWithReadPermissions:(id) handler:(id)");
}

-(void) logInWithPublishPermissions:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) logInWithPublishPermissions:(id) handler:(id)");
}

-(void) reauthorizeDataAccess:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) reauthorizeDataAccess:(id) handler:(id)");
}

-(bool) isPerformingLogin {
	%orig;
	NSLog(@"-(bool) isPerformingLogin");
}

-(void) completeAuthentication:(id) expectChallenge:(bool) {
	%orig;
	NSLog(@"-(void) completeAuthentication:(id) expectChallenge:(bool)");
}

-(void) setRequestedPermissions:(id) {
	%orig;
	NSLog(@"-(void) setRequestedPermissions:(id)");
}

-(id) requestedPermissions {
	%orig;
	NSLog(@"-(id) requestedPermissions");
}

-(void) performSystemLogIn {
	%orig;
	NSLog(@"-(void) performSystemLogIn");
}

-(void) fallbackToNativeBehavior {
	%orig;
	NSLog(@"-(void) fallbackToNativeBehavior");
}

-(void) continueSystemLogInWithTokenString:(id) error:(id) state:(id) {
	%orig;
	NSLog(@"-(void) continueSystemLogInWithTokenString:(id) error:(id) state:(id)");
}

-(id) authType {
	%orig;
	NSLog(@"-(id) authType");
}

-(void) setAuthType:(id) {
	%orig;
	NSLog(@"-(void) setAuthType:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(id) fromViewController {
	%orig;
	NSLog(@"-(id) fromViewController");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(bool) application:(id) openURL:(id) sourceApplication:(id) annotation:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) openURL:(id) sourceApplication:(id) annotation:(id)");
}

%end

%hook FBSDKLoginSystemAccountErrorCompleter

-(void) completeLogIn:(id) withHandler:(id) {
	%orig;
	NSLog(@"-(void) completeLogIn:(id) withHandler:(id)");
}

-(id) initWithError:(id) permissions:(id) {
	%orig;
	NSLog(@"-(id) initWithError:(id) permissions:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKLoginSystemAccountCompleter

-(void) completeLogIn:(id) withHandler:(id) {
	%orig;
	NSLog(@"-(void) completeLogIn:(id) withHandler:(id)");
}

-(id) initWithTokenString:(id) appID:(id) {
	%orig;
	NSLog(@"-(id) initWithTokenString:(id) appID:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKLoginURLCompleter

-(void) setParametersWithDictionary:(id) appID:(id) {
	%orig;
	NSLog(@"-(void) setParametersWithDictionary:(id) appID:(id)");
}

-(void) setErrorWithDictionary:(id) {
	%orig;
	NSLog(@"-(void) setErrorWithDictionary:(id)");
}

-(void) attemptBrowserLogIn:(id) {
	%orig;
	NSLog(@"-(void) attemptBrowserLogIn:(id)");
}

-(void) completeLogIn:(id) withHandler:(id) {
	%orig;
	NSLog(@"-(void) completeLogIn:(id) withHandler:(id)");
}

-(id) initWithURLParameters:(id) appID:(id) {
	%orig;
	NSLog(@"-(id) initWithURLParameters:(id) appID:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKLoginCompletionParameters

-(id) dataAccessExpirationDate {
	%orig;
	NSLog(@"-(id) dataAccessExpirationDate");
}

-(id) declinedPermissions {
	%orig;
	NSLog(@"-(id) declinedPermissions");
}

-(id) accessTokenString {
	%orig;
	NSLog(@"-(id) accessTokenString");
}

-(void) setAccessTokenString:(id) {
	%orig;
	NSLog(@"-(void) setAccessTokenString:(id)");
}

-(void) setDeclinedPermissions:(id) {
	%orig;
	NSLog(@"-(void) setDeclinedPermissions:(id)");
}

-(bool) isSystemAccount {
	%orig;
	NSLog(@"-(bool) isSystemAccount");
}

-(void) setSystemAccount:(bool) {
	%orig;
	NSLog(@"-(void) setSystemAccount:(bool)");
}

-(void) setDataAccessExpirationDate:(id) {
	%orig;
	NSLog(@"-(void) setDataAccessExpirationDate:(id)");
}

-(id) challenge {
	%orig;
	NSLog(@"-(id) challenge");
}

-(void) setChallenge:(id) {
	%orig;
	NSLog(@"-(void) setChallenge:(id)");
}

-(id) appID {
	%orig;
	NSLog(@"-(id) appID");
}

-(void) setPermissions:(id) {
	%orig;
	NSLog(@"-(void) setPermissions:(id)");
}

-(id) initWithError:(id) {
	%orig;
	NSLog(@"-(id) initWithError:(id)");
}

-(id) userID {
	%orig;
	NSLog(@"-(id) userID");
}

-(id) permissions {
	%orig;
	NSLog(@"-(id) permissions");
}

-(void) setUserID:(id) {
	%orig;
	NSLog(@"-(void) setUserID:(id)");
}

-(void) setAppID:(id) {
	%orig;
	NSLog(@"-(void) setAppID:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) expirationDate {
	%orig;
	NSLog(@"-(id) expirationDate");
}

-(void) setExpirationDate:(id) {
	%orig;
	NSLog(@"-(void) setExpirationDate:(id)");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) setError:(id) {
	%orig;
	NSLog(@"-(void) setError:(id)");
}

%end

%hook FBSDKDeviceLoginManagerResult

-(id) initWithToken:(id) isCancelled:(bool) {
	%orig;
	NSLog(@"-(id) initWithToken:(id) isCancelled:(bool)");
}

-(id) accessToken {
	%orig;
	NSLog(@"-(id) accessToken");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isCancelled {
	%orig;
	NSLog(@"-(bool) isCancelled");
}

%end

%hook FBSDKDeviceLoginManager

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) _schedulePoll:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _schedulePoll:(unsigned long long)");
}

-(void) _notifyToken:(id) {
	%orig;
	NSLog(@"-(void) _notifyToken:(id)");
}

-(id) initWithPermissions:(id) enableSmartLogin:(bool) {
	%orig;
	NSLog(@"-(id) initWithPermissions:(id) enableSmartLogin:(bool)");
}

-(void) netService:(id) didNotPublish:(id) {
	%orig;
	NSLog(@"-(void) netService:(id) didNotPublish:(id)");
}

-(void) _notifyError:(id) {
	%orig;
	NSLog(@"-(void) _notifyError:(id)");
}

-(id) redirectURL {
	%orig;
	NSLog(@"-(id) redirectURL");
}

-(void) setRedirectURL:(id) {
	%orig;
	NSLog(@"-(void) setRedirectURL:(id)");
}

-(id) permissions {
	%orig;
	NSLog(@"-(id) permissions");
}

-(void) _processError:(id) {
	%orig;
	NSLog(@"-(void) _processError:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook FBSDKDeviceLoginCodeInfo

-(id) initWithIdentifier:(id) loginCode:(id) verificationURL:(id) expirationDate:(id) pollingInterval:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithIdentifier:(id) loginCode:(id) verificationURL:(id) expirationDate:(id) pollingInterval:(unsigned long long)");
}

-(id) loginCode {
	%orig;
	NSLog(@"-(id) loginCode");
}

-(id) verificationURL {
	%orig;
	NSLog(@"-(id) verificationURL");
}

-(unsigned long long) pollingInterval {
	%orig;
	NSLog(@"-(unsigned long long) pollingInterval");
}

-(id) identifier {
	%orig;
	NSLog(@"-(id) identifier");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) expirationDate {
	%orig;
	NSLog(@"-(id) expirationDate");
}

%end

%hook FBSDKWebViewAppLinkResolver

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) getALDataFromLoadedPage:(id) {
	%orig;
	NSLog(@"-(id) getALDataFromLoadedPage:(id)");
}

-(id) appLinkFromALData:(id) destination:(id) {
	%orig;
	NSLog(@"-(id) appLinkFromALData:(id) destination:(id)");
}

-(id) parseALData:(id) {
	%orig;
	NSLog(@"-(id) parseALData:(id)");
}

-(void) appLinkFromURL:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) appLinkFromURL:(id) handler:(id)");
}

-(void) followRedirects:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) followRedirects:(id) handler:(id)");
}

%end

%hook FBSDKWebViewAppLinkResolverWebViewDelegate

-(id) didFinishLoad {
	%orig;
	NSLog(@"-(id) didFinishLoad");
}

-(id) didFailLoadWithError {
	%orig;
	NSLog(@"-(id) didFailLoadWithError");
}

-(void) setDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) setDidFinishLoad:(id)");
}

-(void) setDidFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) setDidFailLoadWithError:(id)");
}

-(void) setHasLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setHasLoaded:(bool)");
}

-(bool) hasLoaded {
	%orig;
	NSLog(@"-(bool) hasLoaded");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) webView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailLoadWithError:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidStartLoad:(id)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

%end

%hook FBSDKWebDialog

+(id) showWithName:(id) parameters:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) showWithName:(id) parameters:(id) delegate:(id)");
}

-(id) _generateURL:(id*) {
	%orig;
	NSLog(@"-(id) _generateURL:(id*)");
}

-(CGRect) _applicationFrameForOrientation {
	%orig;
	NSLog(@"-(CGRect) _applicationFrameForOrientation");
}

-(bool) _showWebView {
	%orig;
	NSLog(@"-(bool) _showWebView");
}

-(void) _completeWithResults:(id) {
	%orig;
	NSLog(@"-(void) _completeWithResults:(id)");
}

-(void) _deviceOrientationDidChangeNotification:(id) {
	%orig;
	NSLog(@"-(void) _deviceOrientationDidChangeNotification:(id)");
}

-(void) _updateViewsWithScale:(double) alpha:(double) animationDuration:(double) completion:(id) {
	%orig;
	NSLog(@"-(void) _updateViewsWithScale:(double) alpha:(double) animationDuration:(double) completion:(id)");
}

-(CGAffineTransform) _transformForOrientation {
	%orig;
	NSLog(@"-(CGAffineTransform) _transformForOrientation");
}

-(void) webDialogView:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) webDialogView:(id) didCompleteWithResults:(id)");
}

-(void) webDialogView:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) webDialogView:(id) didFailWithError:(id)");
}

-(void) webDialogViewDidCancel:(id) {
	%orig;
	NSLog(@"-(void) webDialogViewDidCancel:(id)");
}

-(void) webDialogViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webDialogViewDidFinishLoad:(id)");
}

-(bool) deferVisibility {
	%orig;
	NSLog(@"-(bool) deferVisibility");
}

-(void) setDeferVisibility:(bool) {
	%orig;
	NSLog(@"-(void) setDeferVisibility:(bool)");
}

-(void) _addObservers {
	%orig;
	NSLog(@"-(void) _addObservers");
}

-(void) _removeObservers {
	%orig;
	NSLog(@"-(void) _removeObservers");
}

-(void) _dismissAnimated:(bool) {
	%orig;
	NSLog(@"-(void) _dismissAnimated:(bool)");
}

-(void) _failWithError:(id) {
	%orig;
	NSLog(@"-(void) _failWithError:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) show {
	%orig;
	NSLog(@"-(bool) show");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(void) _cancel {
	%orig;
	NSLog(@"-(void) _cancel");
}

-(void) setParameters:(id) {
	%orig;
	NSLog(@"-(void) setParameters:(id)");
}

%end

%hook FBSDKViewImpressionTracker

+(id) impressionTrackerWithEventName:(id) {
	%orig;
	NSLog(@"+(id) impressionTrackerWithEventName:(id)");
}

-(void) logImpressionWithIdentifier:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) logImpressionWithIdentifier:(id) parameters:(id)");
}

-(void) _applicationDidEnterBackgroundNotification:(id) {
	%orig;
	NSLog(@"-(void) _applicationDidEnterBackgroundNotification:(id)");
}

-(id) initWithEventName:(id) {
	%orig;
	NSLog(@"-(id) initWithEventName:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) eventName {
	%orig;
	NSLog(@"-(id) eventName");
}

%end

%hook FBSDKViewHierarchy

+(id) getParentViewController:(id) {
	%orig;
	NSLog(@"+(id) getParentViewController:(id)");
}

+(id) getChildren:(id) {
	%orig;
	NSLog(@"+(id) getChildren:(id)");
}

+(bool) isView:(id) superViewOfView:(id) {
	%orig;
	NSLog(@"+(bool) isView:(id) superViewOfView:(id)");
}

+(id) getParent:(id) {
	%orig;
	NSLog(@"+(id) getParent:(id)");
}

+(id) getPath:(id) limit:(int) {
	%orig;
	NSLog(@"+(id) getPath:(id) limit:(int)");
}

+(id) getAttributesOf:(id) parent:(id) {
	%orig;
	NSLog(@"+(id) getAttributesOf:(id) parent:(id)");
}

+(id) getText:(id) {
	%orig;
	NSLog(@"+(id) getText:(id)");
}

+(id) getHint:(id) {
	%orig;
	NSLog(@"+(id) getHint:(id)");
}

+(id) getIndexPath:(id) {
	%orig;
	NSLog(@"+(id) getIndexPath:(id)");
}

+(long long) getTag:(id) {
	%orig;
	NSLog(@"+(long long) getTag:(id)");
}

+(unsigned long long) getClassBitmask:(id) {
	%orig;
	NSLog(@"+(unsigned long long) getClassBitmask:(id)");
}

+(id) getDimensionOf:(id) {
	%orig;
	NSLog(@"+(id) getDimensionOf:(id)");
}

+(id) getTextStyle:(id) {
	%orig;
	NSLog(@"+(id) getTextStyle:(id)");
}

+(id) getParentTableView:(id) {
	%orig;
	NSLog(@"+(id) getParentTableView:(id)");
}

+(id) getParentCollectionView:(id) {
	%orig;
	NSLog(@"+(id) getParentCollectionView:(id)");
}

+(bool) isRCTButton:(id) {
	%orig;
	NSLog(@"+(bool) isRCTButton:(id)");
}

+(id) getViewReactTag:(id) {
	%orig;
	NSLog(@"+(id) getViewReactTag:(id)");
}

+(id) getPath:(id) {
	%orig;
	NSLog(@"+(id) getPath:(id)");
}

+(id) getDetailAttributesOf:(id) {
	%orig;
	NSLog(@"+(id) getDetailAttributesOf:(id)");
}

%end

%hook FBSDKUtility

+(id) startGCDTimerWithInterval:(double) block:(id) {
	%orig;
	NSLog(@"+(id) startGCDTimerWithInterval:(double) block:(id)");
}

+(void) stopGCDTimer:(id) {
	%orig;
	NSLog(@"+(void) stopGCDTimer:(id)");
}

+(id) dictionaryWithQueryString:(id) {
	%orig;
	NSLog(@"+(id) dictionaryWithQueryString:(id)");
}

+(id) SHA256Hash:(id) {
	%orig;
	NSLog(@"+(id) SHA256Hash:(id)");
}

+(id) queryStringWithDictionary:(id) error:(id*) {
	%orig;
	NSLog(@"+(id) queryStringWithDictionary:(id) error:(id*)");
}

+(id) URLDecode:(id) {
	%orig;
	NSLog(@"+(id) URLDecode:(id)");
}

+(id) URLEncode:(id) {
	%orig;
	NSLog(@"+(id) URLEncode:(id)");
}

%end

%hook FBSDKUserDataStore

+(void) initStore {
	%orig;
	NSLog(@"+(void) initStore");
}

+(void) setUserDataAndHash:(id) {
	%orig;
	NSLog(@"+(void) setUserDataAndHash:(id)");
}

+(void) setUserDataAndHash:(id) firstName:(id) lastName:(id) phone:(id) dateOfBirth:(id) gender:(id) city:(id) state:(id) zip:(id) country:(id) {
	%orig;
	NSLog(@"+(void) setUserDataAndHash:(id) firstName:(id) lastName:(id) phone:(id) dateOfBirth:(id) gender:(id) city:(id) state:(id) zip:(id) country:(id)");
}

+(id) getHashedUserData {
	%orig;
	NSLog(@"+(id) getHashedUserData");
}

+(void) initAndWait {
	%orig;
	NSLog(@"+(void) initAndWait");
}

+(id) hashUserData:(id) {
	%orig;
	NSLog(@"+(id) hashUserData:(id)");
}

+(bool) maybeSHA256Hashed:(id) {
	%orig;
	NSLog(@"+(bool) maybeSHA256Hashed:(id)");
}

+(id) normalizeData:(id) data:(id) {
	%orig;
	NSLog(@"+(id) normalizeData:(id) data:(id)");
}

+(id) encryptData:(id) {
	%orig;
	NSLog(@"+(id) encryptData:(id)");
}

%end

%hook FBSDKURLSessionTask

-(id) initWithRequest:(id) fromSession:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) fromSession:(id) completionHandler:(id)");
}

-(unsigned long long) loggerSerialNumber {
	%orig;
	NSLog(@"-(unsigned long long) loggerSerialNumber");
}

-(void) taskDidCompleteWithError:(id) {
	%orig;
	NSLog(@"-(void) taskDidCompleteWithError:(id)");
}

-(void) taskDidCompleteWithResponse:(id) data:(id) {
	%orig;
	NSLog(@"-(void) taskDidCompleteWithResponse:(id) data:(id)");
}

-(void) invokeHandler:(id) error:(?) response:(id) responseData:(id) {
	%orig;
	NSLog(@"-(void) invokeHandler:(id) error:(?) response:(id) responseData:(id)");
}

-(void) logAndInvokeHandler:(id) response:(?) responseData:(id) {
	%orig;
	NSLog(@"-(void) logAndInvokeHandler:(id) response:(?) responseData:(id)");
}

-(void) logAndInvokeHandler:(id) error:(?) {
	%orig;
	NSLog(@"-(void) logAndInvokeHandler:(id) error:(?)");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(void) setTask:(id) {
	%orig;
	NSLog(@"-(void) setTask:(id)");
}

-(unsigned long long) requestStartTime {
	%orig;
	NSLog(@"-(unsigned long long) requestStartTime");
}

-(void) setRequestStartTime:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setRequestStartTime:(unsigned long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) task {
	%orig;
	NSLog(@"-(id) task");
}

%end

%hook FBSDKURL

+(id) URLForRenderBackToReferrerBarURL:(id) {
	%orig;
	NSLog(@"+(id) URLForRenderBackToReferrerBarURL:(id)");
}

+(id) decodeURLString:(id) {
	%orig;
	NSLog(@"+(id) decodeURLString:(id)");
}

+(id) URLWithURL:(id) {
	%orig;
	NSLog(@"+(id) URLWithURL:(id)");
}

+(id) URLWithInboundURL:(id) sourceApplication:(id) {
	%orig;
	NSLog(@"+(id) URLWithInboundURL:(id) sourceApplication:(id)");
}

+(id) queryParametersForURL:(id) {
	%orig;
	NSLog(@"+(id) queryParametersForURL:(id)");
}

-(id) appLinkReferer {
	%orig;
	NSLog(@"-(id) appLinkReferer");
}

-(id) initWithURL:(id) forOpenInboundURL:(bool) sourceApplication:(id) forRenderBackToReferrerBar:(bool) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) forOpenInboundURL:(bool) sourceApplication:(id) forRenderBackToReferrerBar:(bool)");
}

-(id) targetQueryParameters {
	%orig;
	NSLog(@"-(id) targetQueryParameters");
}

-(id) appLinkExtras {
	%orig;
	NSLog(@"-(id) appLinkExtras");
}

-(id) inputQueryParameters {
	%orig;
	NSLog(@"-(id) inputQueryParameters");
}

-(id) inputURL {
	%orig;
	NSLog(@"-(id) inputURL");
}

-(id) targetURL {
	%orig;
	NSLog(@"-(id) targetURL");
}

-(id) appLinkData {
	%orig;
	NSLog(@"-(id) appLinkData");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKTypeUtility

+(id) stringValue:(id) {
	%orig;
	NSLog(@"+(id) stringValue:(id)");
}

+(id) dictionaryValue:(id) {
	%orig;
	NSLog(@"+(id) dictionaryValue:(id)");
}

+(long long) integerValue:(id) {
	%orig;
	NSLog(@"+(long long) integerValue:(id)");
}

+(bool) boolValue:(id) {
	%orig;
	NSLog(@"+(bool) boolValue:(id)");
}

+(id) _objectValue:(id) ofClass:(Class) {
	%orig;
	NSLog(@"+(id) _objectValue:(id) ofClass:(Class)");
}

+(id) objectValue:(id) {
	%orig;
	NSLog(@"+(id) objectValue:(id)");
}

+(id) arrayValue:(id) {
	%orig;
	NSLog(@"+(id) arrayValue:(id)");
}

+(double) timeIntervalValue:(id) {
	%orig;
	NSLog(@"+(double) timeIntervalValue:(id)");
}

+(unsigned long long) unsignedIntegerValue:(id) {
	%orig;
	NSLog(@"+(unsigned long long) unsignedIntegerValue:(id)");
}

+(id) URLValue:(id) {
	%orig;
	NSLog(@"+(id) URLValue:(id)");
}

%end

%hook FBSDKTimeSpentData

+(void) restore:(bool) {
	%orig;
	NSLog(@"+(void) restore:(bool)");
}

+(void) setSourceApplication:(id) openURL:(id) {
	%orig;
	NSLog(@"+(void) setSourceApplication:(id) openURL:(id)");
}

+(void) registerAutoResetSourceApplication {
	%orig;
	NSLog(@"+(void) registerAutoResetSourceApplication");
}

+(void) setSourceApplication:(id) isFromAppLink:(bool) {
	%orig;
	NSLog(@"+(void) setSourceApplication:(id) isFromAppLink:(bool)");
}

+(id) getSourceApplication {
	%orig;
	NSLog(@"+(id) getSourceApplication");
}

+(void) resetSourceApplication {
	%orig;
	NSLog(@"+(void) resetSourceApplication");
}

+(id) singleton {
	%orig;
	NSLog(@"+(id) singleton");
}

+(void) suspend {
	%orig;
	NSLog(@"+(void) suspend");
}

-(void) instanceSuspend {
	%orig;
	NSLog(@"-(void) instanceSuspend");
}

-(void) instanceRestore:(bool) {
	%orig;
	NSLog(@"-(void) instanceRestore:(bool)");
}

-(id) appEventsParametersForDeactivate {
	%orig;
	NSLog(@"-(id) appEventsParametersForDeactivate");
}

-(id) appEventsParametersForActivate {
	%orig;
	NSLog(@"-(id) appEventsParametersForActivate");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKTestUsersManager

+(id) sharedInstanceForAppID:(id) appSecret:(id) {
	%orig;
	NSLog(@"+(id) sharedInstanceForAppID:(id) appSecret:(id)");
}

-(id) initWithAppID:(id) appSecret:(id) {
	%orig;
	NSLog(@"-(id) initWithAppID:(id) appSecret:(id)");
}

-(id) userIdAndTokenOfExistingAccountWithPermissions:(id) skip:(id) {
	%orig;
	NSLog(@"-(id) userIdAndTokenOfExistingAccountWithPermissions:(id) skip:(id)");
}

-(void) requestTestAccountTokensWithArraysOfPermissions:(id) createIfNotFound:(bool) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) requestTestAccountTokensWithArraysOfPermissions:(id) createIfNotFound:(bool) completionHandler:(id)");
}

-(void) addTestAccountWithPermissions:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) addTestAccountWithPermissions:(id) completionHandler:(id)");
}

-(id) tokenDataForTokenString:(id) permissions:(id) userId:(id) {
	%orig;
	NSLog(@"-(id) tokenDataForTokenString:(id) permissions:(id) userId:(id)");
}

-(void) fetchExistingTestAccountsWithAfterCursor:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) fetchExistingTestAccountsWithAfterCursor:(id) handler:(id)");
}

-(id) appAccessToken {
	%orig;
	NSLog(@"-(id) appAccessToken");
}

-(void) makeFriendsWithFirst:(id) second:(id) callback:(id) {
	%orig;
	NSLog(@"-(void) makeFriendsWithFirst:(id) second:(id) callback:(id)");
}

-(void) removeTestAccount:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) removeTestAccount:(id) completionHandler:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKSystemAccountStoreAdapter

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

+(void) setSharedInstance:(id) {
	%orig;
	NSLog(@"+(void) setSharedInstance:(id)");
}

-(bool) forceBlockingRenew {
	%orig;
	NSLog(@"-(bool) forceBlockingRenew");
}

-(void) setForceBlockingRenew:(bool) {
	%orig;
	NSLog(@"-(void) setForceBlockingRenew:(bool)");
}

-(void) requestAccessToFacebookAccountStore:(id) retrying:(bool) handler:(id) {
	%orig;
	NSLog(@"-(void) requestAccessToFacebookAccountStore:(id) retrying:(bool) handler:(id)");
}

-(void) renewSystemAuthorization:(id) {
	%orig;
	NSLog(@"-(void) renewSystemAuthorization:(id)");
}

-(id) accessTokenString {
	%orig;
	NSLog(@"-(id) accessTokenString");
}

-(void) requestAccessToFacebookAccountStore:(id) defaultAudience:(id) isReauthorize:(bool) appID:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) requestAccessToFacebookAccountStore:(id) defaultAudience:(id) isReauthorize:(bool) appID:(id) handler:(id)");
}

-(id) accountStore {
	%orig;
	NSLog(@"-(id) accountStore");
}

-(id) accountType {
	%orig;
	NSLog(@"-(id) accountType");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKSwizzle

-(id) initWithBlock:(id) named:(?) forClass:(id) selector:(Class) originalMethod:(SEL) withNumArgs:(?*) {
	%orig;
	NSLog(@"-(id) initWithBlock:(id) named:(?) forClass:(id) selector:(Class) originalMethod:(SEL) withNumArgs:(?*)");
}

-(?*) originalMethod {
	%orig;
	NSLog(@"-(?*) originalMethod");
}

-(void) setNumArgs:(unsigned int) {
	%orig;
	NSLog(@"-(void) setNumArgs:(unsigned int)");
}

-(void) setOriginalMethod:(?*) {
	%orig;
	NSLog(@"-(void) setOriginalMethod:(?*)");
}

-(unsigned int) numArgs {
	%orig;
	NSLog(@"-(unsigned int) numArgs");
}

-(void) setBlocks:(id) {
	%orig;
	NSLog(@"-(void) setBlocks:(id)");
}

-(void) setClass:(Class) {
	%orig;
	NSLog(@"-(void) setClass:(Class)");
}

-(id) blocks {
	%orig;
	NSLog(@"-(id) blocks");
}

-(Class) class {
	%orig;
	NSLog(@"-(Class) class");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setSelector:(SEL) {
	%orig;
	NSLog(@"-(void) setSelector:(SEL)");
}

-(SEL) selector {
	%orig;
	NSLog(@"-(SEL) selector");
}

%end

%hook FBSDKSwizzler

+(void) swizzleSelector:(SEL) onClass:(Class) withBlock:(id) named:(?) {
	%orig;
	NSLog(@"+(void) swizzleSelector:(SEL) onClass:(Class) withBlock:(id) named:(?)");
}

+(bool) isLocallyDefinedMethod:(objc_method*) onClass:(Class) {
	%orig;
	NSLog(@"+(bool) isLocallyDefinedMethod:(objc_method*) onClass:(Class)");
}

+(id) swizzleForMethod:(objc_method*) {
	%orig;
	NSLog(@"+(id) swizzleForMethod:(objc_method*)");
}

+(void) setSwizzle:(id) forMethod:(objc_method*) {
	%orig;
	NSLog(@"+(void) setSwizzle:(id) forMethod:(objc_method*)");
}

+(void) removeSwizzleForMethod:(objc_method*) {
	%orig;
	NSLog(@"+(void) removeSwizzleForMethod:(objc_method*)");
}

+(void) printSwizzles {
	%orig;
	NSLog(@"+(void) printSwizzles");
}

+(void) unswizzleSelector:(SEL) onClass:(Class) {
	%orig;
	NSLog(@"+(void) unswizzleSelector:(SEL) onClass:(Class)");
}

+(void) unswizzleSelector:(SEL) onClass:(Class) named:(id) {
	%orig;
	NSLog(@"+(void) unswizzleSelector:(SEL) onClass:(Class) named:(id)");
}

+(void) setup {
	%orig;
	NSLog(@"+(void) setup");
}

%end

%hook FBSDKSettings

+(id) accessTokenCache {
	%orig;
	NSLog(@"+(id) accessTokenCache");
}

+(id) legacyUserDefaultTokenInformationKeyName {
	%orig;
	NSLog(@"+(id) legacyUserDefaultTokenInformationKeyName");
}

+(id) loggingBehaviors {
	%orig;
	NSLog(@"+(id) loggingBehaviors");
}

+(bool) limitEventAndDataUsage {
	%orig;
	NSLog(@"+(bool) limitEventAndDataUsage");
}

+(id) advertiserIDCollectionEnabled {
	%orig;
	NSLog(@"+(id) advertiserIDCollectionEnabled");
}

+(id) autoLogAppEventsEnabled {
	%orig;
	NSLog(@"+(id) autoLogAppEventsEnabled");
}

+(double) JPEGCompressionQuality {
	%orig;
	NSLog(@"+(double) JPEGCompressionQuality");
}

+(id) appURLSchemeSuffix {
	%orig;
	NSLog(@"+(id) appURLSchemeSuffix");
}

+(id) userAgentSuffix {
	%orig;
	NSLog(@"+(id) userAgentSuffix");
}

+(id) graphAPIVersion {
	%orig;
	NSLog(@"+(id) graphAPIVersion");
}

+(bool) isGraphErrorRecoveryDisabled {
	%orig;
	NSLog(@"+(bool) isGraphErrorRecoveryDisabled");
}

+(id) graphAPIDebugParamValue {
	%orig;
	NSLog(@"+(id) graphAPIDebugParamValue");
}

+(void) setGraphErrorRecoveryDisabled:(bool) {
	%orig;
	NSLog(@"+(void) setGraphErrorRecoveryDisabled:(bool)");
}

+(id) loggingBehavior {
	%orig;
	NSLog(@"+(id) loggingBehavior");
}

+(id) facebookDomainPart {
	%orig;
	NSLog(@"+(id) facebookDomainPart");
}

+(id) appEventSettingsForPlistKey:(id) defaultValue:(id) {
	%orig;
	NSLog(@"+(id) appEventSettingsForPlistKey:(id) defaultValue:(id)");
}

+(id) appEventSettingsForUserDefaultsKey:(id) defaultValue:(id) {
	%orig;
	NSLog(@"+(id) appEventSettingsForUserDefaultsKey:(id) defaultValue:(id)");
}

+(id) _JPEGCompressionQualityNumber {
	%orig;
	NSLog(@"+(id) _JPEGCompressionQualityNumber");
}

+(void) _setJPEGCompressionQualityNumber:(id) {
	%orig;
	NSLog(@"+(void) _setJPEGCompressionQualityNumber:(id)");
}

+(void) updateGraphAPIDebugBehavior {
	%orig;
	NSLog(@"+(void) updateGraphAPIDebugBehavior");
}

+(void) setLoggingBehaviors:(id) {
	%orig;
	NSLog(@"+(void) setLoggingBehaviors:(id)");
}

+(void) setAppURLSchemeSuffix:(id) {
	%orig;
	NSLog(@"+(void) setAppURLSchemeSuffix:(id)");
}

+(void) setClientToken:(id) {
	%orig;
	NSLog(@"+(void) setClientToken:(id)");
}

+(void) setFacebookDomainPart:(id) {
	%orig;
	NSLog(@"+(void) setFacebookDomainPart:(id)");
}

+(id) codelessDebugLogEnabled {
	%orig;
	NSLog(@"+(id) codelessDebugLogEnabled");
}

+(void) setCodelessDebugLogEnabled:(id) {
	%orig;
	NSLog(@"+(void) setCodelessDebugLogEnabled:(id)");
}

+(void) setJPEGCompressionQuality:(double) {
	%orig;
	NSLog(@"+(void) setJPEGCompressionQuality:(double)");
}

+(void) setLimitEventAndDataUsage:(bool) {
	%orig;
	NSLog(@"+(void) setLimitEventAndDataUsage:(bool)");
}

+(void) setLoggingBehavior:(id) {
	%orig;
	NSLog(@"+(void) setLoggingBehavior:(id)");
}

+(void) enableLoggingBehavior:(id) {
	%orig;
	NSLog(@"+(void) enableLoggingBehavior:(id)");
}

+(void) disableLoggingBehavior:(id) {
	%orig;
	NSLog(@"+(void) disableLoggingBehavior:(id)");
}

+(void) setLegacyUserDefaultTokenInformationKeyName:(id) {
	%orig;
	NSLog(@"+(void) setLegacyUserDefaultTokenInformationKeyName:(id)");
}

+(void) setAccessTokenCache:(id) {
	%orig;
	NSLog(@"+(void) setAccessTokenCache:(id)");
}

+(void) setUserAgentSuffix:(id) {
	%orig;
	NSLog(@"+(void) setUserAgentSuffix:(id)");
}

+(void) setGraphAPIVersion:(id) {
	%orig;
	NSLog(@"+(void) setGraphAPIVersion:(id)");
}

+(void) setAutoLogAppEventsEnabled:(id) {
	%orig;
	NSLog(@"+(void) setAutoLogAppEventsEnabled:(id)");
}

+(void) setAdvertiserIDCollectionEnabled:(id) {
	%orig;
	NSLog(@"+(void) setAdvertiserIDCollectionEnabled:(id)");
}

+(void) setDisplayName:(id) {
	%orig;
	NSLog(@"+(void) setDisplayName:(id)");
}

+(id) clientToken {
	%orig;
	NSLog(@"+(id) clientToken");
}

+(id) appID {
	%orig;
	NSLog(@"+(id) appID");
}

+(id) sdkVersion {
	%orig;
	NSLog(@"+(id) sdkVersion");
}

+(void) setAppID:(id) {
	%orig;
	NSLog(@"+(void) setAppID:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) displayName {
	%orig;
	NSLog(@"+(id) displayName");
}

%end

%hook FBSDKServerConfigurationManager

+(void) loadServerConfigurationWithCompletionBlock:(id) {
	%orig;
	NSLog(@"+(void) loadServerConfigurationWithCompletionBlock:(id)");
}

+(id) cachedServerConfiguration {
	%orig;
	NSLog(@"+(id) cachedServerConfiguration");
}

+(id) requestToLoadServerConfiguration:(id) {
	%orig;
	NSLog(@"+(id) requestToLoadServerConfiguration:(id)");
}

+(void) processLoadRequestResponse:(id) error:(id) appID:(id) {
	%orig;
	NSLog(@"+(void) processLoadRequestResponse:(id) error:(id) appID:(id)");
}

+(id) _defaultServerConfigurationForAppID:(id) {
	%orig;
	NSLog(@"+(id) _defaultServerConfigurationForAppID:(id)");
}

+(bool) _serverConfigurationTimestampIsValid:(id) {
	%orig;
	NSLog(@"+(bool) _serverConfigurationTimestampIsValid:(id)");
}

+(id) _wrapperBlockForLoadBlock:(SEL) {
	%orig;
	NSLog(@"+(id) _wrapperBlockForLoadBlock:(SEL)");
}

+(void) _didProcessConfigurationFromNetwork:(id) appID:(id) error:(id) {
	%orig;
	NSLog(@"+(void) _didProcessConfigurationFromNetwork:(id) appID:(id) error:(id)");
}

+(id) _parseDialogConfigurations:(id) {
	%orig;
	NSLog(@"+(id) _parseDialogConfigurations:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(void) clearCache {
	%orig;
	NSLog(@"+(void) clearCache");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook FBSDKServerConfiguration

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) eventBindings {
	%orig;
	NSLog(@"-(id) eventBindings");
}

-(bool) isAdvertisingIDEnabled {
	%orig;
	NSLog(@"-(bool) isAdvertisingIDEnabled");
}

-(bool) isCodelessEventsEnabled {
	%orig;
	NSLog(@"-(bool) isCodelessEventsEnabled");
}

-(bool) isImplicitPurchaseLoggingSupported {
	%orig;
	NSLog(@"-(bool) isImplicitPurchaseLoggingSupported");
}

-(bool) isImplicitLoggingSupported {
	%orig;
	NSLog(@"-(bool) isImplicitLoggingSupported");
}

-(id) dialogConfigurationForDialogName:(id) {
	%orig;
	NSLog(@"-(id) dialogConfigurationForDialogName:(id)");
}

-(bool) _useFeatureWithKey:(id) dialogName:(id) {
	%orig;
	NSLog(@"-(bool) _useFeatureWithKey:(id) dialogName:(id)");
}

-(id) initWithAppID:(id) appName:(id) loginTooltipEnabled:(bool) loginTooltipText:(id) defaultShareMode:(id) advertisingIDEnabled:(bool) implicitLoggingEnabled:(bool) implicitPurchaseLoggingEnabled:(bool) codelessEventsEnabled:(bool) systemAuthenticationEnabled:(bool) nativeAuthFlowEnabled:(bool) uninstallTrackingEnabled:(bool) dialogConfigurations:(id) dialogFlows:(id) timestamp:(id) errorConfiguration:(id) sessionTimeoutInterval:(double) defaults:(bool) loggingToken:(id) smartLoginOptions:(unsigned long long) smartLoginBookmarkIconURL:(id) smartLoginMenuIconURL:(id) updateMessage:(id) eventBindings:(id) {
	%orig;
	NSLog(@"-(id) initWithAppID:(id) appName:(id) loginTooltipEnabled:(bool) loginTooltipText:(id) defaultShareMode:(id) advertisingIDEnabled:(bool) implicitLoggingEnabled:(bool) implicitPurchaseLoggingEnabled:(bool) codelessEventsEnabled:(bool) systemAuthenticationEnabled:(bool) nativeAuthFlowEnabled:(bool) uninstallTrackingEnabled:(bool) dialogConfigurations:(id) dialogFlows:(id) timestamp:(id) errorConfiguration:(id) sessionTimeoutInterval:(double) defaults:(bool) loggingToken:(id) smartLoginOptions:(unsigned long long) smartLoginBookmarkIconURL:(id) smartLoginMenuIconURL:(id) updateMessage:(id) eventBindings:(id)");
}

-(bool) useNativeDialogForDialogName:(id) {
	%orig;
	NSLog(@"-(bool) useNativeDialogForDialogName:(id)");
}

-(bool) useSafariViewControllerForDialogName:(id) {
	%orig;
	NSLog(@"-(bool) useSafariViewControllerForDialogName:(id)");
}

-(bool) isDefaults {
	%orig;
	NSLog(@"-(bool) isDefaults");
}

-(id) defaultShareMode {
	%orig;
	NSLog(@"-(id) defaultShareMode");
}

-(id) errorConfiguration {
	%orig;
	NSLog(@"-(id) errorConfiguration");
}

-(bool) isLoginTooltipEnabled {
	%orig;
	NSLog(@"-(bool) isLoginTooltipEnabled");
}

-(bool) isNativeAuthFlowEnabled {
	%orig;
	NSLog(@"-(bool) isNativeAuthFlowEnabled");
}

-(bool) isSystemAuthenticationEnabled {
	%orig;
	NSLog(@"-(bool) isSystemAuthenticationEnabled");
}

-(bool) isUninstallTrackingEnabled {
	%orig;
	NSLog(@"-(bool) isUninstallTrackingEnabled");
}

-(id) loginTooltipText {
	%orig;
	NSLog(@"-(id) loginTooltipText");
}

-(double) sessionTimoutInterval {
	%orig;
	NSLog(@"-(double) sessionTimoutInterval");
}

-(void) setSessionTimoutInterval:(double) {
	%orig;
	NSLog(@"-(void) setSessionTimoutInterval:(double)");
}

-(id) loggingToken {
	%orig;
	NSLog(@"-(id) loggingToken");
}

-(unsigned long long) smartLoginOptions {
	%orig;
	NSLog(@"-(unsigned long long) smartLoginOptions");
}

-(id) smartLoginBookmarkIconURL {
	%orig;
	NSLog(@"-(id) smartLoginBookmarkIconURL");
}

-(id) smartLoginMenuIconURL {
	%orig;
	NSLog(@"-(id) smartLoginMenuIconURL");
}

-(id) updateMessage {
	%orig;
	NSLog(@"-(id) updateMessage");
}

-(id) appID {
	%orig;
	NSLog(@"-(id) appID");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) timestamp {
	%orig;
	NSLog(@"-(id) timestamp");
}

-(long long) version {
	%orig;
	NSLog(@"-(long long) version");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook FBSDKProfilePictureViewState

-(bool) isValidForState:(id) {
	%orig;
	NSLog(@"-(bool) isValidForState:(id)");
}

-(id) initWithProfileID:(id) size:(CGSize) scale:(double) pictureMode:(unsigned long long) imageShouldFit:(bool) {
	%orig;
	NSLog(@"-(id) initWithProfileID:(id) size:(CGSize) scale:(double) pictureMode:(unsigned long long) imageShouldFit:(bool)");
}

-(bool) imageShouldFit {
	%orig;
	NSLog(@"-(bool) imageShouldFit");
}

-(unsigned long long) pictureMode {
	%orig;
	NSLog(@"-(unsigned long long) pictureMode");
}

-(id) profileID {
	%orig;
	NSLog(@"-(id) profileID");
}

-(bool) isEqualToState:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToState:(id)");
}

-(CGSize) size {
	%orig;
	NSLog(@"-(CGSize) size");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(double) scale {
	%orig;
	NSLog(@"-(double) scale");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

%end

%hook FBSDKProfile

+(id) fetchCachedProfile {
	%orig;
	NSLog(@"+(id) fetchCachedProfile");
}

+(void) setCurrentProfile:(id) {
	%orig;
	NSLog(@"+(void) setCurrentProfile:(id)");
}

+(void) cacheProfile:(id) {
	%orig;
	NSLog(@"+(void) cacheProfile:(id)");
}

+(void) observeChangeAccessTokenChange:(id) {
	%orig;
	NSLog(@"+(void) observeChangeAccessTokenChange:(id)");
}

+(void) loadProfileWithToken:(id) completion:(id) {
	%orig;
	NSLog(@"+(void) loadProfileWithToken:(id) completion:(id)");
}

+(id) currentProfile {
	%orig;
	NSLog(@"+(id) currentProfile");
}

+(void) enableUpdatesOnAccessTokenChange:(bool) {
	%orig;
	NSLog(@"+(void) enableUpdatesOnAccessTokenChange:(bool)");
}

+(void) loadCurrentProfileWithCompletion:(id) {
	%orig;
	NSLog(@"+(void) loadCurrentProfileWithCompletion:(id)");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(bool) isEqualToProfile:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToProfile:(id)");
}

-(id) imagePathForPictureMode:(unsigned long long) size:(CGSize) {
	%orig;
	NSLog(@"-(id) imagePathForPictureMode:(unsigned long long) size:(CGSize)");
}

-(id) initWithUserID:(id) firstName:(id) middleName:(id) lastName:(id) name:(id) linkURL:(id) refreshDate:(id) {
	%orig;
	NSLog(@"-(id) initWithUserID:(id) firstName:(id) middleName:(id) lastName:(id) name:(id) linkURL:(id) refreshDate:(id)");
}

-(id) imageURLForPictureMode:(unsigned long long) size:(CGSize) {
	%orig;
	NSLog(@"-(id) imageURLForPictureMode:(unsigned long long) size:(CGSize)");
}

-(id) middleName {
	%orig;
	NSLog(@"-(id) middleName");
}

-(id) firstName {
	%orig;
	NSLog(@"-(id) firstName");
}

-(id) lastName {
	%orig;
	NSLog(@"-(id) lastName");
}

-(id) refreshDate {
	%orig;
	NSLog(@"-(id) refreshDate");
}

-(id) linkURL {
	%orig;
	NSLog(@"-(id) linkURL");
}

-(id) userID {
	%orig;
	NSLog(@"-(id) userID");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKPaymentProductRequestor

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) resolveProducts {
	%orig;
	NSLog(@"-(void) resolveProducts");
}

-(void) setProductRequest:(id) {
	%orig;
	NSLog(@"-(void) setProductRequest:(id)");
}

-(id) productRequest {
	%orig;
	NSLog(@"-(id) productRequest");
}

-(id) getTruncatedString:(id) {
	%orig;
	NSLog(@"-(id) getTruncatedString:(id)");
}

-(id) lengthOfSubscriptionPeriod:(id) {
	%orig;
	NSLog(@"-(id) lengthOfSubscriptionPeriod:(id)");
}

-(void) logImplicitPurchaseEvent:(id) valueToSum:(double) parameters:(id) {
	%orig;
	NSLog(@"-(void) logImplicitPurchaseEvent:(id) valueToSum:(double) parameters:(id)");
}

-(void) logTransactionEvent:(id) {
	%orig;
	NSLog(@"-(void) logTransactionEvent:(id)");
}

-(id) fetchDeviceReceipt {
	%orig;
	NSLog(@"-(id) fetchDeviceReceipt");
}

-(id) transaction {
	%orig;
	NSLog(@"-(id) transaction");
}

-(void) setTransaction:(id) {
	%orig;
	NSLog(@"-(void) setTransaction:(id)");
}

-(void) request:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) request:(id) didFailWithError:(id)");
}

-(void) requestDidFinish:(id) {
	%orig;
	NSLog(@"-(void) requestDidFinish:(id)");
}

-(void) productsRequest:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) productsRequest:(id) didReceiveResponse:(id)");
}

-(id) initWithTransaction:(id) {
	%orig;
	NSLog(@"-(id) initWithTransaction:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) cleanUp {
	%orig;
	NSLog(@"-(void) cleanUp");
}

%end

%hook FBSDKPaymentObserver

+(void) startObservingTransactions {
	%orig;
	NSLog(@"+(void) startObservingTransactions");
}

+(void) stopObservingTransactions {
	%orig;
	NSLog(@"+(void) stopObservingTransactions");
}

+(id) singleton {
	%orig;
	NSLog(@"+(id) singleton");
}

-(void) startObservingTransactions {
	%orig;
	NSLog(@"-(void) startObservingTransactions");
}

-(void) stopObservingTransactions {
	%orig;
	NSLog(@"-(void) stopObservingTransactions");
}

-(void) handleTransaction:(id) {
	%orig;
	NSLog(@"-(void) handleTransaction:(id)");
}

-(void) paymentQueue:(id) updatedTransactions:(id) {
	%orig;
	NSLog(@"-(void) paymentQueue:(id) updatedTransactions:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook FBSDKMeasurementEvent

+(void) postNotificationForEventName:(id) args:(id) {
	%orig;
	NSLog(@"+(void) postNotificationForEventName:(id) args:(id)");
}

-(id) initEventWithName:(id) args:(id) {
	%orig;
	NSLog(@"-(id) initEventWithName:(id) args:(id)");
}

-(void) postNotification {
	%orig;
	NSLog(@"-(void) postNotification");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKMath

+(unsigned long long) hashWithIntegerArray:(unsigned long long*) count:(unsigned long long) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithIntegerArray:(unsigned long long*) count:(unsigned long long)");
}

+(CGSize) ceilForSize:(CGSize) {
	%orig;
	NSLog(@"+(CGSize) ceilForSize:(CGSize)");
}

+(unsigned long long) hashWithDouble:(double) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithDouble:(double)");
}

+(unsigned long long) hashWithLong:(unsigned long long) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithLong:(unsigned long long)");
}

+(unsigned long long) hashWithInteger:(unsigned long long) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithInteger:(unsigned long long)");
}

+(unsigned long long) hashWithPointer:(const void*) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithPointer:(const void*)");
}

+(unsigned long long) hashWithInteger:(unsigned long long) andInteger:(unsigned long long) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithInteger:(unsigned long long) andInteger:(unsigned long long)");
}

+(CGPoint) ceilForPoint:(CGPoint) {
	%orig;
	NSLog(@"+(CGPoint) ceilForPoint:(CGPoint)");
}

+(CGPoint) floorForPoint:(CGPoint) {
	%orig;
	NSLog(@"+(CGPoint) floorForPoint:(CGPoint)");
}

+(CGSize) floorForSize:(CGSize) {
	%orig;
	NSLog(@"+(CGSize) floorForSize:(CGSize)");
}

+(unsigned long long) hashWithCGFloat:(double) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithCGFloat:(double)");
}

+(unsigned long long) hashWithCString:(const char*) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithCString:(const char*)");
}

+(unsigned long long) hashWithFloat:(float) {
	%orig;
	NSLog(@"+(unsigned long long) hashWithFloat:(float)");
}

%end

%hook FBSDKLogger

+(void) singleShotLogEntry:(id) logEntry:(id) {
	%orig;
	NSLog(@"+(void) singleShotLogEntry:(id) logEntry:(id)");
}

+(void) singleShotLogEntry:(id) formatString:(id) {
	%orig;
	NSLog(@"+(void) singleShotLogEntry:(id) formatString:(id)");
}

+(void) registerStringToReplace:(id) replaceWith:(id) {
	%orig;
	NSLog(@"+(void) registerStringToReplace:(id) replaceWith:(id)");
}

+(unsigned long long) generateSerialNumber {
	%orig;
	NSLog(@"+(unsigned long long) generateSerialNumber");
}

+(void) singleShotLogEntry:(id) timestampTag:(id) formatString:(id) {
	%orig;
	NSLog(@"+(void) singleShotLogEntry:(id) timestampTag:(id) formatString:(id)");
}

+(void) registerCurrentTime:(id) withTag:(id) {
	%orig;
	NSLog(@"+(void) registerCurrentTime:(id) withTag:(id)");
}

-(id) initWithLoggingBehavior:(id) {
	%orig;
	NSLog(@"-(id) initWithLoggingBehavior:(id)");
}

-(id) loggingBehavior {
	%orig;
	NSLog(@"-(id) loggingBehavior");
}

-(unsigned long long) loggerSerialNumber {
	%orig;
	NSLog(@"-(unsigned long long) loggerSerialNumber");
}

-(void) emitToNSLog {
	%orig;
	NSLog(@"-(void) emitToNSLog");
}

-(void) appendKey:(id) value:(id) {
	%orig;
	NSLog(@"-(void) appendKey:(id) value:(id)");
}

-(id) internalContents {
	%orig;
	NSLog(@"-(id) internalContents");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isActive {
	%orig;
	NSLog(@"-(bool) isActive");
}

-(void) appendString:(id) {
	%orig;
	NSLog(@"-(void) appendString:(id)");
}

-(void) appendFormat:(id) {
	%orig;
	NSLog(@"-(void) appendFormat:(id)");
}

-(id) contents {
	%orig;
	NSLog(@"-(id) contents");
}

-(void) setContents:(id) {
	%orig;
	NSLog(@"-(void) setContents:(id)");
}

%end

%hook FBSDKKeychainStore

-(id) initWithService:(id) accessGroup:(id) {
	%orig;
	NSLog(@"-(id) initWithService:(id) accessGroup:(id)");
}

-(bool) setDictionary:(id) forKey:(id) accessibility:(void*) {
	%orig;
	NSLog(@"-(bool) setDictionary:(id) forKey:(id) accessibility:(void*)");
}

-(bool) setData:(id) forKey:(id) accessibility:(void*) {
	%orig;
	NSLog(@"-(bool) setData:(id) forKey:(id) accessibility:(void*)");
}

-(bool) setString:(id) forKey:(id) accessibility:(void*) {
	%orig;
	NSLog(@"-(bool) setString:(id) forKey:(id) accessibility:(void*)");
}

-(id) service {
	%orig;
	NSLog(@"-(id) service");
}

-(id) queryForKey:(id) {
	%orig;
	NSLog(@"-(id) queryForKey:(id)");
}

-(id) dataForKey:(id) {
	%orig;
	NSLog(@"-(id) dataForKey:(id)");
}

-(id) accessGroup {
	%orig;
	NSLog(@"-(id) accessGroup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) stringForKey:(id) {
	%orig;
	NSLog(@"-(id) stringForKey:(id)");
}

-(id) dictionaryForKey:(id) {
	%orig;
	NSLog(@"-(id) dictionaryForKey:(id)");
}

%end

%hook FBSDKKeychainStoreViaBundleID

-(id) initWithService:(id) accessGroup:(id) {
	%orig;
	NSLog(@"-(id) initWithService:(id) accessGroup:(id)");
}

-(id) queryForKey:(id) {
	%orig;
	NSLog(@"-(id) queryForKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook FBSDKInternalUtility

+(void) dictionary:(id) setObject:(id) forKey:(id) {
	%orig;
	NSLog(@"+(void) dictionary:(id) setObject:(id) forKey:(id)");
}

+(void) deleteFacebookCookies {
	%orig;
	NSLog(@"+(void) deleteFacebookCookies");
}

+(id) hexadecimalStringFromData:(id) {
	%orig;
	NSLog(@"+(id) hexadecimalStringFromData:(id)");
}

+(bool) isUnity {
	%orig;
	NSLog(@"+(bool) isUnity");
}

+(void) validateFacebookReservedURLSchemes {
	%orig;
	NSLog(@"+(void) validateFacebookReservedURLSchemes");
}

+(bool) isOSRunTimeVersionAtLeast:(?) {
	%orig;
	NSLog(@"+(bool) isOSRunTimeVersionAtLeast:(?)");
}

+(id) topMostViewController {
	%orig;
	NSLog(@"+(id) topMostViewController");
}

+(Class) resolveBoltsClassWithName:(id) {
	%orig;
	NSLog(@"+(Class) resolveBoltsClassWithName:(id)");
}

+(id) objectForJSONString:(id) error:(id*) {
	%orig;
	NSLog(@"+(id) objectForJSONString:(id) error:(id*)");
}

+(id) URLWithScheme:(id) host:(id) path:(id) queryParameters:(id) error:(id*) {
	%orig;
	NSLog(@"+(id) URLWithScheme:(id) host:(id) path:(id) queryParameters:(id) error:(id*)");
}

+(id) appURLWithHost:(id) path:(id) queryParameters:(id) error:(id*) {
	%orig;
	NSLog(@"+(id) appURLWithHost:(id) path:(id) queryParameters:(id) error:(id*)");
}

+(id) facebookURLWithHostPrefix:(id) path:(id) queryParameters:(id) defaultVersion:(id) error:(id*) {
	%orig;
	NSLog(@"+(id) facebookURLWithHostPrefix:(id) path:(id) queryParameters:(id) defaultVersion:(id) error:(id*)");
}

+(void) validateURLSchemes {
	%orig;
	NSLog(@"+(void) validateURLSchemes");
}

+(bool) isFacebookBundleIdentifier:(id) {
	%orig;
	NSLog(@"+(bool) isFacebookBundleIdentifier:(id)");
}

+(bool) isSafariBundleIdentifier:(id) {
	%orig;
	NSLog(@"+(bool) isSafariBundleIdentifier:(id)");
}

+(id) bundleForStrings {
	%orig;
	NSLog(@"+(id) bundleForStrings");
}

+(id) queryStringWithDictionary:(id) error:(id*) invalidObjectHandler:(id) {
	%orig;
	NSLog(@"+(id) queryStringWithDictionary:(id) error:(id*) invalidObjectHandler:(id)");
}

+(unsigned long long) currentTimeInMilliseconds {
	%orig;
	NSLog(@"+(unsigned long long) currentTimeInMilliseconds");
}

+(id) convertRequestValue:(id) {
	%orig;
	NSLog(@"+(id) convertRequestValue:(id)");
}

+(void) extractPermissionsFromResponse:(id) grantedPermissions:(id) declinedPermissions:(id) {
	%orig;
	NSLog(@"+(void) extractPermissionsFromResponse:(id) grantedPermissions:(id) declinedPermissions:(id)");
}

+(long long) _compareOperatingSystemVersion:(?) toVersion:(?) {
	%orig;
	NSLog(@"+(long long) _compareOperatingSystemVersion:(?) toVersion:(?)");
}

+(int) getMajorVersionFromFullLibraryVersion:(int) {
	%orig;
	NSLog(@"+(int) getMajorVersionFromFullLibraryVersion:(int)");
}

+(id) _convertObjectToJSONObject:(id) invalidObjectHandler:(id) stop:(?) {
	%orig;
	NSLog(@"+(id) _convertObjectToJSONObject:(id) invalidObjectHandler:(id) stop:(?)");
}

+(bool) isUIKitLinkTimeVersionAtLeast:(int) {
	%orig;
	NSLog(@"+(bool) isUIKitLinkTimeVersionAtLeast:(int)");
}

+(bool) isUIKitRunTimeVersionAtLeast:(int) {
	%orig;
	NSLog(@"+(bool) isUIKitRunTimeVersionAtLeast:(int)");
}

+(void) checkRegisteredCanOpenURLScheme:(id) {
	%orig;
	NSLog(@"+(void) checkRegisteredCanOpenURLScheme:(id)");
}

+(bool) _canOpenURLScheme:(id) {
	%orig;
	NSLog(@"+(bool) _canOpenURLScheme:(id)");
}

+(void) array:(id) addObject:(id) {
	%orig;
	NSLog(@"+(void) array:(id) addObject:(id)");
}

+(void) validateAppID {
	%orig;
	NSLog(@"+(void) validateAppID");
}

+(bool) isRegisteredURLScheme:(id) {
	%orig;
	NSLog(@"+(bool) isRegisteredURLScheme:(id)");
}

+(id) findWindow {
	%orig;
	NSLog(@"+(id) findWindow");
}

+(bool) isRegisteredCanOpenURLScheme:(id) {
	%orig;
	NSLog(@"+(bool) isRegisteredCanOpenURLScheme:(id)");
}

+(bool) isPublishPermission:(id) {
	%orig;
	NSLog(@"+(bool) isPublishPermission:(id)");
}

+(id) dictionaryFromFBURL:(id) {
	%orig;
	NSLog(@"+(id) dictionaryFromFBURL:(id)");
}

+(bool) dictionary:(id) setJSONStringForObject:(id) forKey:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) dictionary:(id) setJSONStringForObject:(id) forKey:(id) error:(id*)");
}

+(bool) isBrowserURL:(id) {
	%orig;
	NSLog(@"+(bool) isBrowserURL:(id)");
}

+(bool) shouldManuallyAdjustOrientation {
	%orig;
	NSLog(@"+(bool) shouldManuallyAdjustOrientation");
}

+(void) registerTransientObject:(id) {
	%orig;
	NSLog(@"+(void) registerTransientObject:(id)");
}

+(void) unregisterTransientObject:(id) {
	%orig;
	NSLog(@"+(void) unregisterTransientObject:(id)");
}

+(bool) isFacebookAppInstalled {
	%orig;
	NSLog(@"+(bool) isFacebookAppInstalled");
}

+(bool) isMessengerAppInstalled {
	%orig;
	NSLog(@"+(bool) isMessengerAppInstalled");
}

+(bool) isMSQRDPlayerAppInstalled {
	%orig;
	NSLog(@"+(bool) isMSQRDPlayerAppInstalled");
}

+(id) validateRequiredClientAccessToken {
	%orig;
	NSLog(@"+(id) validateRequiredClientAccessToken");
}

+(bool) areAllPermissionsReadPermissions:(id) {
	%orig;
	NSLog(@"+(bool) areAllPermissionsReadPermissions:(id)");
}

+(bool) areAllPermissionsPublishPermissions:(id) {
	%orig;
	NSLog(@"+(bool) areAllPermissionsPublishPermissions:(id)");
}

+(id) facebookURLWithHostPrefix:(id) path:(id) queryParameters:(id) error:(id*) {
	%orig;
	NSLog(@"+(id) facebookURLWithHostPrefix:(id) path:(id) queryParameters:(id) error:(id*)");
}

+(id) JSONStringForObject:(id) error:(id*) invalidObjectHandler:(id) {
	%orig;
	NSLog(@"+(id) JSONStringForObject:(id) error:(id*) invalidObjectHandler:(id)");
}

+(bool) object:(id) isEqualToObject:(id) {
	%orig;
	NSLog(@"+(bool) object:(id) isEqualToObject:(id)");
}

+(id) appURLScheme {
	%orig;
	NSLog(@"+(id) appURLScheme");
}

+(?) operatingSystemVersion {
	%orig;
	NSLog(@"+(?) operatingSystemVersion");
}

+(id) viewControllerForView:(id) {
	%orig;
	NSLog(@"+(id) viewControllerForView:(id)");
}

%end

%hook FBSDKImageDownloader

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) downloadImageWithURL:(id) ttl:(double) completion:(id) {
	%orig;
	NSLog(@"-(void) downloadImageWithURL:(id) ttl:(double) completion:(id)");
}

-(void) removeAll {
	%orig;
	NSLog(@"-(void) removeAll");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKIcon

-(CGPath*) pathWithSize:(CGSize) {
	%orig;
	NSLog(@"-(CGPath*) pathWithSize:(CGSize)");
}

-(id) imageWithSize:(CGSize) {
	%orig;
	NSLog(@"-(id) imageWithSize:(CGSize)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) color {
	%orig;
	NSLog(@"-(id) color");
}

-(id) initWithColor:(id) {
	%orig;
	NSLog(@"-(id) initWithColor:(id)");
}

%end

%hook FBSDKMessengerIcon

-(CGPath*) pathWithSize:(CGSize) {
	%orig;
	NSLog(@"-(CGPath*) pathWithSize:(CGSize)");
}

%end

%hook FBSDKCheckmarkIcon

-(CGPath*) pathWithSize:(CGSize) {
	%orig;
	NSLog(@"-(CGPath*) pathWithSize:(CGSize)");
}

%end

%hook FBSDKMaleSilhouetteIcon

-(CGPath*) pathWithSize:(CGSize) {
	%orig;
	NSLog(@"-(CGPath*) pathWithSize:(CGSize)");
}

%end

%hook FBSDKLogo

-(CGPath*) pathWithSize:(CGSize) {
	%orig;
	NSLog(@"-(CGPath*) pathWithSize:(CGSize)");
}

%end

%hook FBSDKHybridAppEventsScriptMessageHandler

-(void) userContentController:(id) didReceiveScriptMessage:(id) {
	%orig;
	NSLog(@"-(void) userContentController:(id) didReceiveScriptMessage:(id)");
}

%end

%hook FBSDKGraphRequestPiggybackManager

+(void) addRefreshPiggyback:(id) permissionHandler:(id) {
	%orig;
	NSLog(@"+(void) addRefreshPiggyback:(id) permissionHandler:(id)");
}

+(void) addPiggybackRequests:(id) {
	%orig;
	NSLog(@"+(void) addPiggybackRequests:(id)");
}

+(void) addRefreshPiggybackIfStale:(id) {
	%orig;
	NSLog(@"+(void) addRefreshPiggybackIfStale:(id)");
}

+(void) addServerConfigurationPiggyback:(id) {
	%orig;
	NSLog(@"+(void) addServerConfigurationPiggyback:(id)");
}

%end

%hook FBSDKGraphRequestMetadata

-(id) initWithRequest:(id) completionHandler:(id) batchParameters:(?) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) completionHandler:(id) batchParameters:(?)");
}

-(id) batchParameters {
	%orig;
	NSLog(@"-(id) batchParameters");
}

-(void) invokeCompletionHandlerForConnection:(id) withResults:(id) error:(id) {
	%orig;
	NSLog(@"-(void) invokeCompletionHandlerForConnection:(id) withResults:(id) error:(id)");
}

-(void) setBatchParameters:(id) {
	%orig;
	NSLog(@"-(void) setBatchParameters:(id)");
}

-(void) setRequest:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) completionHandler {
	%orig;
	NSLog(@"-(id) completionHandler");
}

-(void) setCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setCompletionHandler:(id)");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

%end

%hook FBSDKGraphRequestDataAttachment

-(id) initWithData:(id) filename:(id) contentType:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id) filename:(id) contentType:(id)");
}

-(id) contentType {
	%orig;
	NSLog(@"-(id) contentType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(id) filename {
	%orig;
	NSLog(@"-(id) filename");
}

%end

%hook FBSDKGraphRequestConnection

+(void) setDefaultConnectionTimeout:(double) {
	%orig;
	NSLog(@"+(void) setDefaultConnectionTimeout:(double)");
}

+(id) userAgent {
	%orig;
	NSLog(@"+(id) userAgent");
}

-(void) addRequest:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) addRequest:(id) completionHandler:(id)");
}

-(void) processorDidAttemptRecovery:(id) didRecover:(bool) error:(id) {
	%orig;
	NSLog(@"-(void) processorDidAttemptRecovery:(id) didRecover:(bool) error:(id)");
}

-(void) addRequest:(id) batchEntryName:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) addRequest:(id) batchEntryName:(id) completionHandler:(id)");
}

-(void) addRequest:(id) batchParameters:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) addRequest:(id) batchParameters:(id) completionHandler:(id)");
}

-(void) cleanUpSession {
	%orig;
	NSLog(@"-(void) cleanUpSession");
}

-(void) overrideGraphAPIVersion:(id) {
	%orig;
	NSLog(@"-(void) overrideGraphAPIVersion:(id)");
}

-(id) requestWithBatch:(id) timeout:(double) {
	%orig;
	NSLog(@"-(id) requestWithBatch:(id) timeout:(double)");
}

-(void) logRequest:(id) bodyLength:(unsigned long long) bodyLogger:(id) attachmentLogger:(id) {
	%orig;
	NSLog(@"-(void) logRequest:(id) bodyLength:(unsigned long long) bodyLogger:(id) attachmentLogger:(id)");
}

-(void) completeFBSDKURLSessionWithResponse:(id) data:(id) networkError:(id) {
	%orig;
	NSLog(@"-(void) completeFBSDKURLSessionWithResponse:(id) data:(id) networkError:(id)");
}

-(void) registerTokenToOmitFromLog:(id) {
	%orig;
	NSLog(@"-(void) registerTokenToOmitFromLog:(id)");
}

-(id) urlStringForSingleRequest:(id) forBatch:(bool) {
	%orig;
	NSLog(@"-(id) urlStringForSingleRequest:(id) forBatch:(bool)");
}

-(id) accessTokenWithRequest:(id) {
	%orig;
	NSLog(@"-(id) accessTokenWithRequest:(id)");
}

-(void) addRequest:(id) toBatch:(id) attachments:(id) batchToken:(id) {
	%orig;
	NSLog(@"-(void) addRequest:(id) toBatch:(id) attachments:(id) batchToken:(id)");
}

-(bool) _shouldWarnOnMissingFieldsParam:(id) {
	%orig;
	NSLog(@"-(bool) _shouldWarnOnMissingFieldsParam:(id)");
}

-(void) _validateFieldsParamForGetRequests:(id) {
	%orig;
	NSLog(@"-(void) _validateFieldsParamForGetRequests:(id)");
}

-(void) appendAttachments:(id) toBody:(id) addFormData:(bool) logger:(id) {
	%orig;
	NSLog(@"-(void) appendAttachments:(id) toBody:(id) addFormData:(bool) logger:(id)");
}

-(void) appendJSONRequests:(id) toBody:(id) andNameAttachments:(id) logger:(id) {
	%orig;
	NSLog(@"-(void) appendJSONRequests:(id) toBody:(id) andNameAttachments:(id) logger:(id)");
}

-(id) parseJSONResponse:(id) error:(id*) statusCode:(long long) {
	%orig;
	NSLog(@"-(id) parseJSONResponse:(id) error:(id*) statusCode:(long long)");
}

-(void) completeWithResults:(id) networkError:(id) {
	%orig;
	NSLog(@"-(void) completeWithResults:(id) networkError:(id)");
}

-(id) parseJSONOrOtherwise:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) parseJSONOrOtherwise:(id) error:(id*)");
}

-(id) errorWithCode:(long long) statusCode:(long long) parsedJSONResponse:(id) innerError:(id) message:(id) {
	%orig;
	NSLog(@"-(id) errorWithCode:(long long) statusCode:(long long) parsedJSONResponse:(id) innerError:(id) message:(id)");
}

-(id) errorFromResult:(id) request:(id) {
	%orig;
	NSLog(@"-(id) errorFromResult:(id) request:(id)");
}

-(void) processResultBody:(id) error:(id) metadata:(id) canNotifyDelegate:(bool) {
	%orig;
	NSLog(@"-(void) processResultBody:(id) error:(id) metadata:(id) canNotifyDelegate:(bool)");
}

-(void) processResultDebugDictionary:(id) {
	%orig;
	NSLog(@"-(void) processResultDebugDictionary:(id)");
}

-(void) addRequest:(id) completionHandler:(id) batchEntryName:(?) {
	%orig;
	NSLog(@"-(void) addRequest:(id) completionHandler:(id) batchEntryName:(?)");
}

-(void) addRequest:(id) completionHandler:(id) batchParameters:(?) {
	%orig;
	NSLog(@"-(void) addRequest:(id) completionHandler:(id) batchParameters:(?)");
}

-(void) overrideVersionPartWith:(id) {
	%orig;
	NSLog(@"-(void) overrideVersionPartWith:(id)");
}

-(void) setTimeout:(double) {
	%orig;
	NSLog(@"-(void) setTimeout:(double)");
}

-(double) timeout {
	%orig;
	NSLog(@"-(double) timeout");
}

-(id) requests {
	%orig;
	NSLog(@"-(id) requests");
}

-(void) setRequests:(id) {
	%orig;
	NSLog(@"-(void) setRequests:(id)");
}

-(void) URLSession:(id) task:(id) didSendBodyData:(long long) totalBytesSent:(long long) totalBytesExpectedToSend:(long long) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) didSendBodyData:(long long) totalBytesSent:(long long) totalBytesExpectedToSend:(long long)");
}

-(void) setTask:(id) {
	%orig;
	NSLog(@"-(void) setTask:(id)");
}

-(id) URLResponse {
	%orig;
	NSLog(@"-(id) URLResponse");
}

-(unsigned long long) requestStartTime {
	%orig;
	NSLog(@"-(unsigned long long) requestStartTime");
}

-(void) setRequestStartTime:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setRequestStartTime:(unsigned long long)");
}

-(id) defaultSession {
	%orig;
	NSLog(@"-(id) defaultSession");
}

-(id) logger {
	%orig;
	NSLog(@"-(id) logger");
}

-(void) setLogger:(id) {
	%orig;
	NSLog(@"-(void) setLogger:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(unsigned long long) state {
	%orig;
	NSLog(@"-(unsigned long long) state");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setState:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setState:(unsigned long long)");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(id) task {
	%orig;
	NSLog(@"-(id) task");
}

-(void) setDelegateQueue:(id) {
	%orig;
	NSLog(@"-(void) setDelegateQueue:(id)");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook FBSDKGraphRequestBody

-(void) appendUTF8:(id) {
	%orig;
	NSLog(@"-(void) appendUTF8:(id)");
}

-(void) _appendWithKey:(id) filename:(id) contentType:(id) contentBlock:(id) {
	%orig;
	NSLog(@"-(void) _appendWithKey:(id) filename:(id) contentType:(id) contentBlock:(id)");
}

-(id) mimeContentType {
	%orig;
	NSLog(@"-(id) mimeContentType");
}

-(void) appendWithKey:(id) formValue:(id) logger:(id) {
	%orig;
	NSLog(@"-(void) appendWithKey:(id) formValue:(id) logger:(id)");
}

-(void) appendWithKey:(id) imageValue:(id) logger:(id) {
	%orig;
	NSLog(@"-(void) appendWithKey:(id) imageValue:(id) logger:(id)");
}

-(void) appendWithKey:(id) dataValue:(id) logger:(id) {
	%orig;
	NSLog(@"-(void) appendWithKey:(id) dataValue:(id) logger:(id)");
}

-(void) appendWithKey:(id) dataAttachmentValue:(id) logger:(id) {
	%orig;
	NSLog(@"-(void) appendWithKey:(id) dataAttachmentValue:(id) logger:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

%end

%hook FBSDKGraphRequest

+(bool) isAttachment:(id) {
	%orig;
	NSLog(@"+(bool) isAttachment:(id)");
}

+(id) serializeURL:(id) params:(id) httpMethod:(id) {
	%orig;
	NSLog(@"+(id) serializeURL:(id) params:(id) httpMethod:(id)");
}

+(id) serializeURL:(id) params:(id) httpMethod:(id) forBatch:(bool) {
	%orig;
	NSLog(@"+(id) serializeURL:(id) params:(id) httpMethod:(id) forBatch:(bool)");
}

+(id) preprocessParams:(id) {
	%orig;
	NSLog(@"+(id) preprocessParams:(id)");
}

+(id) serializeURL:(id) params:(id) {
	%orig;
	NSLog(@"+(id) serializeURL:(id) params:(id)");
}

-(id) initWithGraphPath:(id) parameters:(id) {
	%orig;
	NSLog(@"-(id) initWithGraphPath:(id) parameters:(id)");
}

-(id) initWithGraphPath:(id) parameters:(id) HTTPMethod:(id) {
	%orig;
	NSLog(@"-(id) initWithGraphPath:(id) parameters:(id) HTTPMethod:(id)");
}

-(id) initWithGraphPath:(id) parameters:(id) tokenString:(id) HTTPMethod:(id) flags:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithGraphPath:(id) parameters:(id) tokenString:(id) HTTPMethod:(id) flags:(unsigned long long)");
}

-(id) initWithGraphPath:(id) parameters:(id) flags:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithGraphPath:(id) parameters:(id) flags:(unsigned long long)");
}

-(id) initWithGraphPath:(id) parameters:(id) tokenString:(id) version:(id) HTTPMethod:(id) {
	%orig;
	NSLog(@"-(id) initWithGraphPath:(id) parameters:(id) tokenString:(id) version:(id) HTTPMethod:(id)");
}

-(bool) isGraphErrorRecoveryDisabled {
	%orig;
	NSLog(@"-(bool) isGraphErrorRecoveryDisabled");
}

-(id) graphPath {
	%orig;
	NSLog(@"-(id) graphPath");
}

-(void) setGraphErrorRecoveryDisabled:(bool) {
	%orig;
	NSLog(@"-(void) setGraphErrorRecoveryDisabled:(bool)");
}

-(id) HTTPMethod {
	%orig;
	NSLog(@"-(id) HTTPMethod");
}

-(unsigned long long) flags {
	%orig;
	NSLog(@"-(unsigned long long) flags");
}

-(void) setFlags:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setFlags:(unsigned long long)");
}

-(bool) hasAttachments {
	%orig;
	NSLog(@"-(bool) hasAttachments");
}

-(id) startWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(id) startWithCompletionHandler:(id)");
}

-(id) tokenString {
	%orig;
	NSLog(@"-(id) tokenString");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

%end

%hook FBSDKGraphErrorRecoveryProcessor

-(void) displayAlertWithRecoverySuggestion:(id) recoveryOptionsTitles:(id) {
	%orig;
	NSLog(@"-(void) displayAlertWithRecoverySuggestion:(id) recoveryOptionsTitles:(id)");
}

-(void) displayAlertWithTitle:(id) message:(id) cancelButtonTitle:(id) {
	%orig;
	NSLog(@"-(void) displayAlertWithTitle:(id) message:(id) cancelButtonTitle:(id)");
}

-(bool) processError:(id) request:(id) delegate:(id) {
	%orig;
	NSLog(@"-(bool) processError:(id) request:(id) delegate:(id)");
}

-(void) didPresentErrorWithRecovery:(bool) contextInfo:(void*) {
	%orig;
	NSLog(@"-(void) didPresentErrorWithRecovery:(bool) contextInfo:(void*)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook FBSDKGateKeeperManager

+(void) loadGateKeepers {
	%orig;
	NSLog(@"+(void) loadGateKeepers");
}

+(bool) _gateKeeperIsValid {
	%orig;
	NSLog(@"+(bool) _gateKeeperIsValid");
}

+(id) requestToLoadGateKeepers:(id) {
	%orig;
	NSLog(@"+(id) requestToLoadGateKeepers:(id)");
}

+(bool) _gateKeeperTimestampIsValid:(id) {
	%orig;
	NSLog(@"+(bool) _gateKeeperTimestampIsValid:(id)");
}

+(bool) boolForKey:(id) appID:(id) defaultValue:(bool) {
	%orig;
	NSLog(@"+(bool) boolForKey:(id) appID:(id) defaultValue:(bool)");
}

+(void) processLoadRequestResponse:(id) error:(id) appID:(id) {
	%orig;
	NSLog(@"+(void) processLoadRequestResponse:(id) error:(id) appID:(id)");
}

%end

%hook FBSDKEventBindingManager

+(id) parseArray:(id) {
	%orig;
	NSLog(@"+(id) parseArray:(id)");
}

-(void) updateBindings:(id) {
	%orig;
	NSLog(@"-(void) updateBindings:(id)");
}

-(void) matchView:(id) delegate:(id) {
	%orig;
	NSLog(@"-(void) matchView:(id) delegate:(id)");
}

-(void) matchSubviewsIn:(id) {
	%orig;
	NSLog(@"-(void) matchSubviewsIn:(id)");
}

-(void) rematchBindings {
	%orig;
	NSLog(@"-(void) rematchBindings");
}

-(id) initWithJSON:(id) {
	%orig;
	NSLog(@"-(id) initWithJSON:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook FBSDKEventBinding

+(id) findParameterOfPath:(id) pathType:(id) sourceView:(id) {
	%orig;
	NSLog(@"+(id) findParameterOfPath:(id) pathType:(id) sourceView:(id)");
}

+(bool) match:(id) pathComponent:(id) {
	%orig;
	NSLog(@"+(bool) match:(id) pathComponent:(id)");
}

+(id) findViewByPath:(id) parent:(id) level:(int) {
	%orig;
	NSLog(@"+(id) findViewByPath:(id) parent:(id) level:(int)");
}

+(bool) matchAnyView:(id) pathComponent:(id) {
	%orig;
	NSLog(@"+(bool) matchAnyView:(id) pathComponent:(id)");
}

+(bool) isViewMatchPath:(id) path:(id) {
	%orig;
	NSLog(@"+(bool) isViewMatchPath:(id) path:(id)");
}

+(bool) isPath:(id) matchViewPath:(id) {
	%orig;
	NSLog(@"+(bool) isPath:(id) matchViewPath:(id)");
}

-(id) pathType {
	%orig;
	NSLog(@"-(id) pathType");
}

-(id) initWithJSON:(id) {
	%orig;
	NSLog(@"-(id) initWithJSON:(id)");
}

-(id) appVersion {
	%orig;
	NSLog(@"-(id) appVersion");
}

-(void) trackEvent:(id) {
	%orig;
	NSLog(@"-(void) trackEvent:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) eventName {
	%orig;
	NSLog(@"-(id) eventName");
}

-(id) path {
	%orig;
	NSLog(@"-(id) path");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(id) eventType {
	%orig;
	NSLog(@"-(id) eventType");
}

%end

%hook FBSDKErrorRecoveryConfiguration

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) initWithRecoveryDescription:(id) optionDescriptions:(id) category:(unsigned long long) recoveryActionName:(id) {
	%orig;
	NSLog(@"-(id) initWithRecoveryDescription:(id) optionDescriptions:(id) category:(unsigned long long) recoveryActionName:(id)");
}

-(unsigned long long) errorCategory {
	%orig;
	NSLog(@"-(unsigned long long) errorCategory");
}

-(id) recoveryActionName {
	%orig;
	NSLog(@"-(id) recoveryActionName");
}

-(id) localizedRecoveryDescription {
	%orig;
	NSLog(@"-(id) localizedRecoveryDescription");
}

-(id) localizedRecoveryOptionDescriptions {
	%orig;
	NSLog(@"-(id) localizedRecoveryOptionDescriptions");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKErrorConfiguration

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(void) parseArray:(id) {
	%orig;
	NSLog(@"-(void) parseArray:(id)");
}

-(id) recoveryConfigurationForCode:(id) subcode:(id) request:(id) {
	%orig;
	NSLog(@"-(id) recoveryConfigurationForCode:(id) subcode:(id) request:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook FBSDKDynamicFrameworkLoader

+(__SecRandom*) loadkSecRandomDefault {
	%orig;
	NSLog(@"+(__SecRandom*) loadkSecRandomDefault");
}

+(void*) loadkSecAttrAccessibleAfterFirstUnlockThisDeviceOnly {
	%orig;
	NSLog(@"+(void*) loadkSecAttrAccessibleAfterFirstUnlockThisDeviceOnly");
}

+(void*) loadkSecAttrGeneric {
	%orig;
	NSLog(@"+(void*) loadkSecAttrGeneric");
}

+(void*) loadkSecValueData {
	%orig;
	NSLog(@"+(void*) loadkSecValueData");
}

+(void*) loadkSecAttrAccessible {
	%orig;
	NSLog(@"+(void*) loadkSecAttrAccessible");
}

+(void*) loadkSecReturnData {
	%orig;
	NSLog(@"+(void*) loadkSecReturnData");
}

+(void*) loadkSecMatchLimitOne {
	%orig;
	NSLog(@"+(void*) loadkSecMatchLimitOne");
}

+(void*) loadkSecMatchLimit {
	%orig;
	NSLog(@"+(void*) loadkSecMatchLimit");
}

+(void*) loadkSecClassGenericPassword {
	%orig;
	NSLog(@"+(void*) loadkSecClassGenericPassword");
}

+(void*) loadkSecClass {
	%orig;
	NSLog(@"+(void*) loadkSecClass");
}

+(void*) loadkSecAttrService {
	%orig;
	NSLog(@"+(void*) loadkSecAttrService");
}

+(void*) loadkSecAttrAccount {
	%orig;
	NSLog(@"+(void*) loadkSecAttrAccount");
}

+(void*) loadkSecAttrAccessGroup {
	%orig;
	NSLog(@"+(void*) loadkSecAttrAccessGroup");
}

%end

%hook FBSDKDialogConfiguration

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) initWithName:(id) URL:(id) appVersions:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) URL:(id) appVersions:(id)");
}

-(id) appVersions {
	%orig;
	NSLog(@"-(id) appVersions");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

%end

%hook FBSDKDeviceRequestsHelper

+(id) getDeviceInfo {
	%orig;
	NSLog(@"+(id) getDeviceInfo");
}

+(bool) startAdvertisementService:(id) withDelegate:(id) {
	%orig;
	NSLog(@"+(bool) startAdvertisementService:(id) withDelegate:(id)");
}

+(bool) isDelegate:(id) forAdvertisementService:(id) {
	%orig;
	NSLog(@"+(bool) isDelegate:(id) forAdvertisementService:(id)");
}

+(void) cleanUpAdvertisementService:(id) {
	%orig;
	NSLog(@"+(void) cleanUpAdvertisementService:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

%end

%hook FBSDKCrypto

+(id) makeMasterKey {
	%orig;
	NSLog(@"+(id) makeMasterKey");
}

+(id) randomBytes:(unsigned long long) {
	%orig;
	NSLog(@"+(id) randomBytes:(unsigned long long)");
}

+(id) randomString:(unsigned long long) {
	%orig;
	NSLog(@"+(id) randomString:(unsigned long long)");
}

-(id) initWithMasterKey:(id) {
	%orig;
	NSLog(@"-(id) initWithMasterKey:(id)");
}

-(id) decrypt:(id) additionalSignedData:(id) {
	%orig;
	NSLog(@"-(id) decrypt:(id) additionalSignedData:(id)");
}

-(id) _macForIV:(id) cipherData:(id) additionalDataToSign:(id) {
	%orig;
	NSLog(@"-(id) _macForIV:(id) cipherData:(id) additionalDataToSign:(id)");
}

-(id) initWithEncryptionKey:(id) macKey:(id) {
	%orig;
	NSLog(@"-(id) initWithEncryptionKey:(id) macKey:(id)");
}

-(id) encrypt:(id) additionalDataToSign:(id) {
	%orig;
	NSLog(@"-(id) encrypt:(id) additionalDataToSign:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKCodelessPathComponent

-(int) matchBitmask {
	%orig;
	NSLog(@"-(int) matchBitmask");
}

-(id) initWithJSON:(id) {
	%orig;
	NSLog(@"-(id) initWithJSON:(id)");
}

-(id) desc {
	%orig;
	NSLog(@"-(id) desc");
}

-(id) hint {
	%orig;
	NSLog(@"-(id) hint");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(int) section {
	%orig;
	NSLog(@"-(int) section");
}

-(int) row {
	%orig;
	NSLog(@"-(int) row");
}

-(int) tag {
	%orig;
	NSLog(@"-(int) tag");
}

-(int) index {
	%orig;
	NSLog(@"-(int) index");
}

-(id) className {
	%orig;
	NSLog(@"-(id) className");
}

%end

%hook FBSDKCodelessParameterComponent

-(id) pathType {
	%orig;
	NSLog(@"-(id) pathType");
}

-(id) initWithJSON:(id) {
	%orig;
	NSLog(@"-(id) initWithJSON:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(id) value {
	%orig;
	NSLog(@"-(id) value");
}

-(id) path {
	%orig;
	NSLog(@"-(id) path");
}

%end

%hook FBSDKCloseIcon

-(id) imageWithSize:(CGSize) {
	%orig;
	NSLog(@"-(id) imageWithSize:(CGSize)");
}

%end

%hook FBSDKBridgeAPIResponse

+(id) bridgeAPIResponseWithRequest:(id) error:(id) {
	%orig;
	NSLog(@"+(id) bridgeAPIResponseWithRequest:(id) error:(id)");
}

+(id) bridgeAPIResponseWithRequest:(id) responseURL:(id) sourceApplication:(id) error:(id*) {
	%orig;
	NSLog(@"+(id) bridgeAPIResponseWithRequest:(id) responseURL:(id) sourceApplication:(id) error:(id*)");
}

+(id) bridgeAPIResponseCancelledWithRequest:(id) {
	%orig;
	NSLog(@"+(id) bridgeAPIResponseCancelledWithRequest:(id)");
}

-(id) initWithRequest:(id) responseParameters:(id) cancelled:(bool) error:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) responseParameters:(id) cancelled:(bool) error:(id)");
}

-(id) responseParameters {
	%orig;
	NSLog(@"-(id) responseParameters");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(bool) isCancelled {
	%orig;
	NSLog(@"-(bool) isCancelled");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

%end

%hook FBSDKBridgeAPIRequest

+(id) _protocolForType:(unsigned long long) scheme:(id) {
	%orig;
	NSLog(@"+(id) _protocolForType:(unsigned long long) scheme:(id)");
}

+(id) protocolMap {
	%orig;
	NSLog(@"+(id) protocolMap");
}

+(id) bridgeAPIRequestWithProtocolType:(unsigned long long) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) userInfo:(id) {
	%orig;
	NSLog(@"+(id) bridgeAPIRequestWithProtocolType:(unsigned long long) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) userInfo:(id)");
}

-(id) requestURL:(id*) {
	%orig;
	NSLog(@"-(id) requestURL:(id*)");
}

-(id) initWithProtocol:(id) protocolType:(unsigned long long) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) userInfo:(id) {
	%orig;
	NSLog(@"-(id) initWithProtocol:(id) protocolType:(unsigned long long) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) userInfo:(id)");
}

-(id) methodVersion {
	%orig;
	NSLog(@"-(id) methodVersion");
}

-(unsigned long long) protocolType {
	%orig;
	NSLog(@"-(unsigned long long) protocolType");
}

-(id) methodName {
	%orig;
	NSLog(@"-(id) methodName");
}

-(id) actionID {
	%orig;
	NSLog(@"-(id) actionID");
}

-(id) userInfo {
	%orig;
	NSLog(@"-(id) userInfo");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) scheme {
	%orig;
	NSLog(@"-(id) scheme");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(id) protocol {
	%orig;
	NSLog(@"-(id) protocol");
}

%end

%hook FBSDKBridgeAPIProtocolWebV2

-(id) requestURLWithActionID:(id) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) requestURLWithActionID:(id) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) error:(id*)");
}

-(id) responseParametersForActionID:(id) queryParameters:(id) cancelled:(bool*) error:(id*) {
	%orig;
	NSLog(@"-(id) responseParametersForActionID:(id) queryParameters:(id) cancelled:(bool*) error:(id*)");
}

-(id) _redirectURLWithActionID:(id) methodName:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) _redirectURLWithActionID:(id) methodName:(id) error:(id*)");
}

-(id) _requestURLForDialogConfiguration:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) _requestURLForDialogConfiguration:(id) error:(id*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKBridgeAPIProtocolWebV1

-(id) requestURLWithActionID:(id) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) requestURLWithActionID:(id) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) error:(id*)");
}

-(id) responseParametersForActionID:(id) queryParameters:(id) cancelled:(bool*) error:(id*) {
	%orig;
	NSLog(@"-(id) responseParametersForActionID:(id) queryParameters:(id) cancelled:(bool*) error:(id*)");
}

%end

%hook FBSDKBridgeAPIProtocolNativeV1

+(void) clearData:(id) fromPasteboardOnApplicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"+(void) clearData:(id) fromPasteboardOnApplicationDidBecomeActive:(id)");
}

-(id) initWithAppScheme:(id) pasteboard:(id) dataLengthThreshold:(unsigned long long) includeAppIcon:(bool) {
	%orig;
	NSLog(@"-(id) initWithAppScheme:(id) pasteboard:(id) dataLengthThreshold:(unsigned long long) includeAppIcon:(bool)");
}

-(id) _JSONStringForObject:(id) enablePasteboard:(bool) error:(id*) {
	%orig;
	NSLog(@"-(id) _JSONStringForObject:(id) enablePasteboard:(bool) error:(id*)");
}

-(id) _bridgeParametersWithActionID:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) _bridgeParametersWithActionID:(id) error:(id*)");
}

-(id) appScheme {
	%orig;
	NSLog(@"-(id) appScheme");
}

-(id) _errorWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) _errorWithDictionary:(id)");
}

-(id) _appIcon {
	%orig;
	NSLog(@"-(id) _appIcon");
}

-(id) requestURLWithActionID:(id) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) requestURLWithActionID:(id) scheme:(id) methodName:(id) methodVersion:(id) parameters:(id) error:(id*)");
}

-(id) responseParametersForActionID:(id) queryParameters:(id) cancelled:(bool*) error:(id*) {
	%orig;
	NSLog(@"-(id) responseParametersForActionID:(id) queryParameters:(id) cancelled:(bool*) error:(id*)");
}

-(id) initWithAppScheme:(id) {
	%orig;
	NSLog(@"-(id) initWithAppScheme:(id)");
}

-(unsigned long long) dataLengthThreshold {
	%orig;
	NSLog(@"-(unsigned long long) dataLengthThreshold");
}

-(bool) includeAppIcon {
	%orig;
	NSLog(@"-(bool) includeAppIcon");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) pasteboard {
	%orig;
	NSLog(@"-(id) pasteboard");
}

%end

%hook FBSDKBridgeAPICrypto

+(id) _cipherKey {
	%orig;
	NSLog(@"+(id) _cipherKey");
}

+(id) _resetCipherKey {
	%orig;
	NSLog(@"+(id) _resetCipherKey");
}

+(void) addCipherKeyToQueryParameters:(id) {
	%orig;
	NSLog(@"+(void) addCipherKeyToQueryParameters:(id)");
}

+(id) decryptResponseForRequest:(id) queryParameters:(id) error:(id*) {
	%orig;
	NSLog(@"+(id) decryptResponseForRequest:(id) queryParameters:(id) error:(id*)");
}

+(void) reset {
	%orig;
	NSLog(@"+(void) reset");
}

%end

%hook FBSDKBoltsMeasurementEventListener

+(id) defaultListener {
	%orig;
	NSLog(@"+(id) defaultListener");
}

-(void) logFBAppEventForNotification:(id) {
	%orig;
	NSLog(@"-(void) logFBAppEventForNotification:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

%end

%hook FBSDKBase64

+(id) decodeAsData:(id) {
	%orig;
	NSLog(@"+(id) decodeAsData:(id)");
}

+(id) decodeAsString:(id) {
	%orig;
	NSLog(@"+(id) decodeAsString:(id)");
}

+(id) encodeString:(id) {
	%orig;
	NSLog(@"+(id) encodeString:(id)");
}

+(id) encodeData:(id) {
	%orig;
	NSLog(@"+(id) encodeData:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) decodeAsData:(id) {
	%orig;
	NSLog(@"-(id) decodeAsData:(id)");
}

-(id) decodeAsString:(id) {
	%orig;
	NSLog(@"-(id) decodeAsString:(id)");
}

-(id) encodeString:(id) {
	%orig;
	NSLog(@"-(id) encodeString:(id)");
}

-(id) encodeData:(id) {
	%orig;
	NSLog(@"-(id) encodeData:(id)");
}

%end

%hook FBSDKAudioResourceLoader

+(id) name {
	%orig;
	NSLog(@"+(id) name");
}

+(unsigned long long) version {
	%orig;
	NSLog(@"+(unsigned long long) version");
}

+(id) data {
	%orig;
	NSLog(@"+(id) data");
}

+(id) sharedLoader {
	%orig;
	NSLog(@"+(id) sharedLoader");
}

-(bool) loadSound:(id*) {
	%orig;
	NSLog(@"-(bool) loadSound:(id*)");
}

-(id) _fileURL:(id*) {
	%orig;
	NSLog(@"-(id) _fileURL:(id*)");
}

-(void) playSound {
	%orig;
	NSLog(@"-(void) playSound");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKLikeButtonPopWAV

+(id) name {
	%orig;
	NSLog(@"+(id) name");
}

+(id) data {
	%orig;
	NSLog(@"+(id) data");
}

%end

%hook FBSDKAppLinkUtility

+(void) fetchDeferredAppLink:(id) {
	%orig;
	NSLog(@"+(void) fetchDeferredAppLink:(id)");
}

+(bool) fetchDeferredAppInvite:(id) {
	%orig;
	NSLog(@"+(bool) fetchDeferredAppInvite:(id)");
}

+(id) appInvitePromotionCodeFromURL:(id) {
	%orig;
	NSLog(@"+(id) appInvitePromotionCodeFromURL:(id)");
}

%end

%hook FBSDKAppLinkTarget

+(id) appLinkTargetWithURL:(id) appStoreId:(id) appName:(id) {
	%orig;
	NSLog(@"+(id) appLinkTargetWithURL:(id) appStoreId:(id) appName:(id)");
}

-(void) setAppStoreId:(id) {
	%orig;
	NSLog(@"-(void) setAppStoreId:(id)");
}

-(id) appStoreId {
	%orig;
	NSLog(@"-(id) appStoreId");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(void) setURL:(id) {
	%orig;
	NSLog(@"-(void) setURL:(id)");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook FBSDKAppLinkReturnToRefererController

-(id) initForDisplayAboveNavController:(id) {
	%orig;
	NSLog(@"-(id) initForDisplayAboveNavController:(id)");
}

-(void) statusBarFrameDidChange:(id) {
	%orig;
	NSLog(@"-(void) statusBarFrameDidChange:(id)");
}

-(void) moveNavigationBar {
	%orig;
	NSLog(@"-(void) moveNavigationBar");
}

-(void) showViewForRefererAppLink:(id) {
	%orig;
	NSLog(@"-(void) showViewForRefererAppLink:(id)");
}

-(void) closeViewAnimated:(bool) explicitlyClosed:(bool) {
	%orig;
	NSLog(@"-(void) closeViewAnimated:(bool) explicitlyClosed:(bool)");
}

-(void) openRefererAppLink:(id) {
	%orig;
	NSLog(@"-(void) openRefererAppLink:(id)");
}

-(void) updateNavigationBarY:(double) {
	%orig;
	NSLog(@"-(void) updateNavigationBarY:(double)");
}

-(void) returnToRefererViewDidTapInsideCloseButton:(id) {
	%orig;
	NSLog(@"-(void) returnToRefererViewDidTapInsideCloseButton:(id)");
}

-(void) returnToRefererViewDidTapInsideLink:(id) link:(id) {
	%orig;
	NSLog(@"-(void) returnToRefererViewDidTapInsideLink:(id) link:(id)");
}

-(void) showViewForRefererURL:(id) {
	%orig;
	NSLog(@"-(void) showViewForRefererURL:(id)");
}

-(void) removeFromNavController {
	%orig;
	NSLog(@"-(void) removeFromNavController");
}

-(void) closeViewAnimated:(bool) {
	%orig;
	NSLog(@"-(void) closeViewAnimated:(bool)");
}

-(void) orientationDidChange:(id) {
	%orig;
	NSLog(@"-(void) orientationDidChange:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(void) statusBarFrameWillChange:(id) {
	%orig;
	NSLog(@"-(void) statusBarFrameWillChange:(id)");
}

%end

%hook FBSDKAppLinkResolver

+(id) resolver {
	%orig;
	NSLog(@"+(id) resolver");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) appLinkFromURLInBackground:(id) {
	%orig;
	NSLog(@"-(id) appLinkFromURLInBackground:(id)");
}

-(void) appLinkFromURL:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) appLinkFromURL:(id) handler:(id)");
}

-(void) setCachedBFAppLinks:(id) {
	%orig;
	NSLog(@"-(void) setCachedBFAppLinks:(id)");
}

-(void) setCachedFBSDKAppLinks:(id) {
	%orig;
	NSLog(@"-(void) setCachedFBSDKAppLinks:(id)");
}

-(void) appLinksFromURLs:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) appLinksFromURLs:(id) handler:(id)");
}

-(id) cachedFBSDKAppLinks {
	%orig;
	NSLog(@"-(id) cachedFBSDKAppLinks");
}

-(id) cachedBFAppLinks {
	%orig;
	NSLog(@"-(id) cachedBFAppLinks");
}

-(id) appLinksFromURLsInBackground:(id) {
	%orig;
	NSLog(@"-(id) appLinksFromURLsInBackground:(id)");
}

-(id) initWithUserInterfaceIdiom:(long long) {
	%orig;
	NSLog(@"-(id) initWithUserInterfaceIdiom:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) userInterfaceIdiom {
	%orig;
	NSLog(@"-(long long) userInterfaceIdiom");
}

-(void) setUserInterfaceIdiom:(long long) {
	%orig;
	NSLog(@"-(void) setUserInterfaceIdiom:(long long)");
}

%end

%hook FBSDKAppLinkNavigation

+(id) defaultResolver {
	%orig;
	NSLog(@"+(id) defaultResolver");
}

+(long long) navigateToAppLink:(id) error:(id*) {
	%orig;
	NSLog(@"+(long long) navigateToAppLink:(id) error:(id*)");
}

+(id) navigationWithAppLink:(id) extras:(id) appLinkData:(id) {
	%orig;
	NSLog(@"+(id) navigationWithAppLink:(id) extras:(id) appLinkData:(id)");
}

+(id) callbackAppLinkDataForAppWithName:(id) url:(id) {
	%orig;
	NSLog(@"+(id) callbackAppLinkDataForAppWithName:(id) url:(id)");
}

+(long long) navigationTypeForLink:(id) {
	%orig;
	NSLog(@"+(long long) navigationTypeForLink:(id)");
}

+(void) setDefaultResolver:(id) {
	%orig;
	NSLog(@"+(void) setDefaultResolver:(id)");
}

+(void) resolveAppLink:(id) resolver:(id) handler:(id) {
	%orig;
	NSLog(@"+(void) resolveAppLink:(id) resolver:(id) handler:(id)");
}

+(void) navigateToURL:(id) resolver:(id) handler:(id) {
	%orig;
	NSLog(@"+(void) navigateToURL:(id) resolver:(id) handler:(id)");
}

+(void) resolveAppLink:(id) handler:(id) {
	%orig;
	NSLog(@"+(void) resolveAppLink:(id) handler:(id)");
}

+(void) navigateToURL:(id) handler:(id) {
	%orig;
	NSLog(@"+(void) navigateToURL:(id) handler:(id)");
}

-(void) setExtras:(id) {
	%orig;
	NSLog(@"-(void) setExtras:(id)");
}

-(id) extras {
	%orig;
	NSLog(@"-(id) extras");
}

-(id) stringByEscapingQueryString:(id) {
	%orig;
	NSLog(@"-(id) stringByEscapingQueryString:(id)");
}

-(id) appLinkURLWithTargetURL:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) appLinkURLWithTargetURL:(id) error:(id*)");
}

-(void) postAppLinkNavigateEventNotificationWithTargetURL:(id) error:(id) type:(long long) {
	%orig;
	NSLog(@"-(void) postAppLinkNavigateEventNotificationWithTargetURL:(id) error:(id) type:(long long)");
}

-(long long) navigate:(id*) {
	%orig;
	NSLog(@"-(long long) navigate:(id*)");
}

-(id) appLinkData {
	%orig;
	NSLog(@"-(id) appLinkData");
}

-(void) setAppLinkData:(id) {
	%orig;
	NSLog(@"-(void) setAppLinkData:(id)");
}

-(long long) navigationType {
	%orig;
	NSLog(@"-(long long) navigationType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setAppLink:(id) {
	%orig;
	NSLog(@"-(void) setAppLink:(id)");
}

-(id) appLink {
	%orig;
	NSLog(@"-(id) appLink");
}

%end

%hook FBSDKAppLink

+(id) appLinkWithSourceURL:(id) targets:(id) webURL:(id) isBackToReferrer:(bool) {
	%orig;
	NSLog(@"+(id) appLinkWithSourceURL:(id) targets:(id) webURL:(id) isBackToReferrer:(bool)");
}

+(id) appLinkWithSourceURL:(id) targets:(id) webURL:(id) {
	%orig;
	NSLog(@"+(id) appLinkWithSourceURL:(id) targets:(id) webURL:(id)");
}

-(id) initWithIsBackToReferrer:(bool) {
	%orig;
	NSLog(@"-(id) initWithIsBackToReferrer:(bool)");
}

-(bool) isBackToReferrer {
	%orig;
	NSLog(@"-(bool) isBackToReferrer");
}

-(void) setBackToReferrer:(bool) {
	%orig;
	NSLog(@"-(void) setBackToReferrer:(bool)");
}

-(id) webURL {
	%orig;
	NSLog(@"-(id) webURL");
}

-(void) setSourceURL:(id) {
	%orig;
	NSLog(@"-(void) setSourceURL:(id)");
}

-(id) sourceURL {
	%orig;
	NSLog(@"-(id) sourceURL");
}

-(void) setWebURL:(id) {
	%orig;
	NSLog(@"-(void) setWebURL:(id)");
}

-(void) setTargets:(id) {
	%orig;
	NSLog(@"-(void) setTargets:(id)");
}

-(id) targets {
	%orig;
	NSLog(@"-(id) targets");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKAppEventsUtility

+(void) ensureOnMainThread:(id) className:(id) {
	%orig;
	NSLog(@"+(void) ensureOnMainThread:(id) className:(id)");
}

+(id) advertiserID {
	%orig;
	NSLog(@"+(id) advertiserID");
}

+(void) logAndNotify:(id) {
	%orig;
	NSLog(@"+(void) logAndNotify:(id)");
}

+(bool) validateIdentifier:(id) {
	%orig;
	NSLog(@"+(bool) validateIdentifier:(id)");
}

+(long long) unixTimeNow {
	%orig;
	NSLog(@"+(long long) unixTimeNow");
}

+(id) tokenStringToUseFor:(id) {
	%orig;
	NSLog(@"+(id) tokenStringToUseFor:(id)");
}

+(id) flushReasonToString:(unsigned long long) {
	%orig;
	NSLog(@"+(id) flushReasonToString:(unsigned long long)");
}

+(void) logAndNotify:(id) allowLogAsDeveloperError:(bool) {
	%orig;
	NSLog(@"+(void) logAndNotify:(id) allowLogAsDeveloperError:(bool)");
}

+(unsigned long long) advertisingTrackingStatus {
	%orig;
	NSLog(@"+(unsigned long long) advertisingTrackingStatus");
}

+(id) attributionID {
	%orig;
	NSLog(@"+(id) attributionID");
}

+(id) persistenceFilePath:(id) {
	%orig;
	NSLog(@"+(id) persistenceFilePath:(id)");
}

+(id) anonymousID {
	%orig;
	NSLog(@"+(id) anonymousID");
}

+(id) retrievePersistedAnonymousID {
	%orig;
	NSLog(@"+(id) retrievePersistedAnonymousID");
}

+(void) persistAnonymousID:(id) {
	%orig;
	NSLog(@"+(void) persistAnonymousID:(id)");
}

+(bool) matchString:(id) firstCharacterSet:(id) restOfStringCharacterSet:(id) {
	%orig;
	NSLog(@"+(bool) matchString:(id) firstCharacterSet:(id) restOfStringCharacterSet:(id)");
}

+(bool) regexValidateIdentifier:(id) {
	%orig;
	NSLog(@"+(bool) regexValidateIdentifier:(id)");
}

+(bool) isEmailAddress:(id) {
	%orig;
	NSLog(@"+(bool) isEmailAddress:(id)");
}

+(bool) isCreditCardNumber:(id) {
	%orig;
	NSLog(@"+(bool) isCreditCardNumber:(id)");
}

+(void) clearLibraryFiles {
	%orig;
	NSLog(@"+(void) clearLibraryFiles");
}

+(id) getNumberValue:(id) {
	%orig;
	NSLog(@"+(id) getNumberValue:(id)");
}

+(id) activityParametersDictionaryForEvent:(id) implicitEventsOnly:(bool) shouldAccessAdvertisingID:(bool) {
	%orig;
	NSLog(@"+(id) activityParametersDictionaryForEvent:(id) implicitEventsOnly:(bool) shouldAccessAdvertisingID:(bool)");
}

+(id) getVariable:(id) fromInstance:(id) {
	%orig;
	NSLog(@"+(id) getVariable:(id) fromInstance:(id)");
}

+(bool) isSensitiveUserData:(id) {
	%orig;
	NSLog(@"+(bool) isSensitiveUserData:(id)");
}

+(bool) isDebugBuild {
	%orig;
	NSLog(@"+(bool) isDebugBuild");
}

%end

%hook FBSDKAppEventsStateManager

+(void) persistAppEventsData:(id) {
	%orig;
	NSLog(@"+(void) persistAppEventsData:(id)");
}

+(id) retrievePersistedAppEventsStates {
	%orig;
	NSLog(@"+(id) retrievePersistedAppEventsStates");
}

+(void) clearPersistedAppEventsStates {
	%orig;
	NSLog(@"+(void) clearPersistedAppEventsStates");
}

+(id) filePath {
	%orig;
	NSLog(@"+(id) filePath");
}

%end

%hook FBSDKAppEventsState

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) initWithToken:(id) appID:(id) {
	%orig;
	NSLog(@"-(id) initWithToken:(id) appID:(id)");
}

-(bool) isCompatibleWithTokenString:(id) appID:(id) {
	%orig;
	NSLog(@"-(bool) isCompatibleWithTokenString:(id) appID:(id)");
}

-(void) addEvent:(id) isImplicit:(bool) {
	%orig;
	NSLog(@"-(void) addEvent:(id) isImplicit:(bool)");
}

-(bool) isCompatibleWithAppEventsState:(id) {
	%orig;
	NSLog(@"-(bool) isCompatibleWithAppEventsState:(id)");
}

-(void) addEventsFromAppEventState:(id) {
	%orig;
	NSLog(@"-(void) addEventsFromAppEventState:(id)");
}

-(id) extractReceiptData {
	%orig;
	NSLog(@"-(id) extractReceiptData");
}

-(id) JSONStringForEvents:(bool) {
	%orig;
	NSLog(@"-(id) JSONStringForEvents:(bool)");
}

-(bool) areAllEventsImplicit {
	%orig;
	NSLog(@"-(bool) areAllEventsImplicit");
}

-(unsigned long long) numSkipped {
	%orig;
	NSLog(@"-(unsigned long long) numSkipped");
}

-(id) events {
	%orig;
	NSLog(@"-(id) events");
}

-(id) appID {
	%orig;
	NSLog(@"-(id) appID");
}

-(id) tokenString {
	%orig;
	NSLog(@"-(id) tokenString");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

%end

%hook FBSDKAppEventsDeviceInfo

+(id) sharedDeviceInfo {
	%orig;
	NSLog(@"+(id) sharedDeviceInfo");
}

+(unsigned int) _coreCount {
	%orig;
	NSLog(@"+(unsigned int) _coreCount");
}

+(id) _getTotalDiskSpace {
	%orig;
	NSLog(@"+(id) _getTotalDiskSpace");
}

+(id) _getCarrier {
	%orig;
	NSLog(@"+(id) _getCarrier");
}

+(id) _getRemainingDiskSpace {
	%orig;
	NSLog(@"+(id) _getRemainingDiskSpace");
}

+(unsigned int) _readSysCtlUInt:(int) type:(int) {
	%orig;
	NSLog(@"+(unsigned int) _readSysCtlUInt:(int) type:(int)");
}

+(void) extendDictionaryWithDeviceInfo:(id) {
	%orig;
	NSLog(@"+(void) extendDictionaryWithDeviceInfo:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) encodedDeviceInfo {
	%orig;
	NSLog(@"-(id) encodedDeviceInfo");
}

-(void) _collectPersistentData {
	%orig;
	NSLog(@"-(void) _collectPersistentData");
}

-(bool) _isGroup1Expired {
	%orig;
	NSLog(@"-(bool) _isGroup1Expired");
}

-(void) _collectGroup1Data {
	%orig;
	NSLog(@"-(void) _collectGroup1Data");
}

-(id) _generateEncoding {
	%orig;
	NSLog(@"-(id) _generateEncoding");
}

-(void) setEncodedDeviceInfo:(id) {
	%orig;
	NSLog(@"-(void) setEncodedDeviceInfo:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKAppEvents

+(void) logEvent:(id) parameters:(id) {
	%orig;
	NSLog(@"+(void) logEvent:(id) parameters:(id)");
}

+(void) logEvent:(id) valueToSum:(double) parameters:(id) {
	%orig;
	NSLog(@"+(void) logEvent:(id) valueToSum:(double) parameters:(id)");
}

+(void) logEvent:(id) valueToSum:(id) parameters:(id) accessToken:(id) {
	%orig;
	NSLog(@"+(void) logEvent:(id) valueToSum:(id) parameters:(id) accessToken:(id)");
}

+(void) logPurchase:(double) currency:(id) parameters:(id) {
	%orig;
	NSLog(@"+(void) logPurchase:(double) currency:(id) parameters:(id)");
}

+(void) logPurchase:(double) currency:(id) parameters:(id) accessToken:(id) {
	%orig;
	NSLog(@"+(void) logPurchase:(double) currency:(id) parameters:(id) accessToken:(id)");
}

+(unsigned long long) flushBehavior {
	%orig;
	NSLog(@"+(unsigned long long) flushBehavior");
}

+(void) logPushNotificationOpen:(id) action:(id) {
	%orig;
	NSLog(@"+(void) logPushNotificationOpen:(id) action:(id)");
}

+(void) setPushNotificationsDeviceTokenString:(id) {
	%orig;
	NSLog(@"+(void) setPushNotificationsDeviceTokenString:(id)");
}

+(void) setFlushBehavior:(unsigned long long) {
	%orig;
	NSLog(@"+(void) setFlushBehavior:(unsigned long long)");
}

+(id) loggingOverrideAppID {
	%orig;
	NSLog(@"+(id) loggingOverrideAppID");
}

+(void) sendEventBindingsToUnity {
	%orig;
	NSLog(@"+(void) sendEventBindingsToUnity");
}

+(void) logEvent:(id) valueToSum:(double) {
	%orig;
	NSLog(@"+(void) logEvent:(id) valueToSum:(double)");
}

+(void) logPurchase:(double) currency:(id) {
	%orig;
	NSLog(@"+(void) logPurchase:(double) currency:(id)");
}

+(void) logPushNotificationOpen:(id) {
	%orig;
	NSLog(@"+(void) logPushNotificationOpen:(id)");
}

+(void) logProductItem:(id) availability:(unsigned long long) condition:(unsigned long long) description:(id) imageLink:(id) link:(id) title:(id) priceAmount:(double) currency:(id) gtin:(id) mpn:(id) brand:(id) parameters:(id) {
	%orig;
	NSLog(@"+(void) logProductItem:(id) availability:(unsigned long long) condition:(unsigned long long) description:(id) imageLink:(id) link:(id) title:(id) priceAmount:(double) currency:(id) gtin:(id) mpn:(id) brand:(id) parameters:(id)");
}

+(void) activateApp {
	%orig;
	NSLog(@"+(void) activateApp");
}

+(void) setPushNotificationsDeviceToken:(id) {
	%orig;
	NSLog(@"+(void) setPushNotificationsDeviceToken:(id)");
}

+(void) setLoggingOverrideAppID:(id) {
	%orig;
	NSLog(@"+(void) setLoggingOverrideAppID:(id)");
}

+(void) clearUserID {
	%orig;
	NSLog(@"+(void) clearUserID");
}

+(void) setUserEmail:(id) firstName:(id) lastName:(id) phone:(id) dateOfBirth:(id) gender:(id) city:(id) state:(id) zip:(id) country:(id) {
	%orig;
	NSLog(@"+(void) setUserEmail:(id) firstName:(id) lastName:(id) phone:(id) dateOfBirth:(id) gender:(id) city:(id) state:(id) zip:(id) country:(id)");
}

+(id) getUserData {
	%orig;
	NSLog(@"+(id) getUserData");
}

+(void) clearUserData {
	%orig;
	NSLog(@"+(void) clearUserData");
}

+(void) updateUserProperties:(id) handler:(id) {
	%orig;
	NSLog(@"+(void) updateUserProperties:(id) handler:(id)");
}

+(void) augmentHybridWKWebView:(id) {
	%orig;
	NSLog(@"+(void) augmentHybridWKWebView:(id)");
}

+(void) setIsUnityInit:(bool) {
	%orig;
	NSLog(@"+(void) setIsUnityInit:(bool)");
}

+(id) requestForCustomAudienceThirdPartyIDWithAccessToken:(id) {
	%orig;
	NSLog(@"+(id) requestForCustomAudienceThirdPartyIDWithAccessToken:(id)");
}

+(void) logImplicitEvent:(id) valueToSum:(id) parameters:(id) accessToken:(id) {
	%orig;
	NSLog(@"+(void) logImplicitEvent:(id) valueToSum:(id) parameters:(id) accessToken:(id)");
}

+(void) logEvent:(id) {
	%orig;
	NSLog(@"+(void) logEvent:(id)");
}

+(id) singleton {
	%orig;
	NSLog(@"+(id) singleton");
}

+(id) userID {
	%orig;
	NSLog(@"+(id) userID");
}

+(void) setUserID:(id) {
	%orig;
	NSLog(@"+(void) setUserID:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(void) setUserData:(id) {
	%orig;
	NSLog(@"+(void) setUserData:(id)");
}

+(void) flush {
	%orig;
	NSLog(@"+(void) flush");
}

-(void) flushTimerFired:(id) {
	%orig;
	NSLog(@"-(void) flushTimerFired:(id)");
}

-(void) fetchServerConfiguration:(id) {
	%orig;
	NSLog(@"-(void) fetchServerConfiguration:(id)");
}

-(void) applicationMovingFromActiveStateOrTerminating {
	%orig;
	NSLog(@"-(void) applicationMovingFromActiveStateOrTerminating");
}

-(void) instanceLogEvent:(id) valueToSum:(id) parameters:(id) isImplicitlyLogged:(bool) accessToken:(id) {
	%orig;
	NSLog(@"-(void) instanceLogEvent:(id) valueToSum:(id) parameters:(id) isImplicitlyLogged:(bool) accessToken:(id)");
}

-(unsigned long long) flushBehavior {
	%orig;
	NSLog(@"-(unsigned long long) flushBehavior");
}

-(void) flushForReason:(unsigned long long) {
	%orig;
	NSLog(@"-(void) flushForReason:(unsigned long long)");
}

-(void) publishInstall {
	%orig;
	NSLog(@"-(void) publishInstall");
}

-(void) setPushNotificationsDeviceTokenString:(id) {
	%orig;
	NSLog(@"-(void) setPushNotificationsDeviceTokenString:(id)");
}

-(id) pushNotificationsDeviceTokenString {
	%orig;
	NSLog(@"-(id) pushNotificationsDeviceTokenString");
}

-(void) setFlushBehavior:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setFlushBehavior:(unsigned long long)");
}

-(void) flushOnMainQueue:(id) forReason:(unsigned long long) {
	%orig;
	NSLog(@"-(void) flushOnMainQueue:(id) forReason:(unsigned long long)");
}

-(void) enableCodelessEvents {
	%orig;
	NSLog(@"-(void) enableCodelessEvents");
}

-(void) checkPersistedEvents {
	%orig;
	NSLog(@"-(void) checkPersistedEvents");
}

-(void) handleActivitiesPostCompletion:(id) loggingEntry:(id) appEventsState:(id) {
	%orig;
	NSLog(@"-(void) handleActivitiesPostCompletion:(id) loggingEntry:(id) appEventsState:(id)");
}

-(bool) disableTimer {
	%orig;
	NSLog(@"-(bool) disableTimer");
}

-(void) setDisableTimer:(bool) {
	%orig;
	NSLog(@"-(void) setDisableTimer:(bool)");
}

-(id) appID {
	%orig;
	NSLog(@"-(id) appID");
}

-(void) registerNotifications {
	%orig;
	NSLog(@"-(void) registerNotifications");
}

-(void) setFlushTimer:(id) {
	%orig;
	NSLog(@"-(void) setFlushTimer:(id)");
}

-(id) flushTimer {
	%orig;
	NSLog(@"-(id) flushTimer");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) applicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive");
}

%end

%hook FBSDKAccessTokenExpirer

-(void) _checkAccessTokenExpirationDate {
	%orig;
	NSLog(@"-(void) _checkAccessTokenExpirationDate");
}

-(void) _timerDidFire {
	%orig;
	NSLog(@"-(void) _timerDidFire");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBSDKAccessTokenCacheV4

-(id) accessToken {
	%orig;
	NSLog(@"-(id) accessToken");
}

-(void) setAccessToken:(id) {
	%orig;
	NSLog(@"-(void) setAccessToken:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) clearCache {
	%orig;
	NSLog(@"-(void) clearCache");
}

%end

%hook FBSDKAccessTokenCacheV3_21

-(id) accessToken {
	%orig;
	NSLog(@"-(id) accessToken");
}

-(void) setAccessToken:(id) {
	%orig;
	NSLog(@"-(void) setAccessToken:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) clearCache {
	%orig;
	NSLog(@"-(void) clearCache");
}

%end

%hook FBSDKAccessTokenCacheV3_17

-(id) accessToken {
	%orig;
	NSLog(@"-(id) accessToken");
}

-(void) setAccessToken:(id) {
	%orig;
	NSLog(@"-(void) setAccessToken:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) clearCache {
	%orig;
	NSLog(@"-(void) clearCache");
}

%end

%hook FBSDKAccessTokenCacheV3

+(id) accessTokenForV3Dictionary:(id) {
	%orig;
	NSLog(@"+(id) accessTokenForV3Dictionary:(id)");
}

-(id) accessToken {
	%orig;
	NSLog(@"-(id) accessToken");
}

-(void) setAccessToken:(id) {
	%orig;
	NSLog(@"-(void) setAccessToken:(id)");
}

-(void) clearCache {
	%orig;
	NSLog(@"-(void) clearCache");
}

%end

%hook FBSDKAccessTokenCache

+(id) deprecatedCacheClasses {
	%orig;
	NSLog(@"+(id) deprecatedCacheClasses");
}

+(void) resetV3CacheChecks {
	%orig;
	NSLog(@"+(void) resetV3CacheChecks");
}

-(id) accessToken {
	%orig;
	NSLog(@"-(id) accessToken");
}

-(void) setAccessToken:(id) {
	%orig;
	NSLog(@"-(void) setAccessToken:(id)");
}

-(void) clearCache {
	%orig;
	NSLog(@"-(void) clearCache");
}

%end

%hook FBSDKAccessToken

+(id) currentAccessToken {
	%orig;
	NSLog(@"+(id) currentAccessToken");
}

+(void) setCurrentAccessToken:(id) {
	%orig;
	NSLog(@"+(void) setCurrentAccessToken:(id)");
}

+(void) refreshCurrentAccessToken:(id) {
	%orig;
	NSLog(@"+(void) refreshCurrentAccessToken:(id)");
}

+(bool) currentAccessTokenIsActive {
	%orig;
	NSLog(@"+(bool) currentAccessTokenIsActive");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(id) initWithTokenString:(id) permissions:(id) declinedPermissions:(id) appID:(id) userID:(id) expirationDate:(id) refreshDate:(id) {
	%orig;
	NSLog(@"-(id) initWithTokenString:(id) permissions:(id) declinedPermissions:(id) appID:(id) userID:(id) expirationDate:(id) refreshDate:(id)");
}

-(bool) hasGranted:(id) {
	%orig;
	NSLog(@"-(bool) hasGranted:(id)");
}

-(id) initWithTokenString:(id) permissions:(id) declinedPermissions:(id) appID:(id) userID:(id) expirationDate:(id) refreshDate:(id) dataAccessExpirationDate:(id) {
	%orig;
	NSLog(@"-(id) initWithTokenString:(id) permissions:(id) declinedPermissions:(id) appID:(id) userID:(id) expirationDate:(id) refreshDate:(id) dataAccessExpirationDate:(id)");
}

-(id) dataAccessExpirationDate {
	%orig;
	NSLog(@"-(id) dataAccessExpirationDate");
}

-(id) declinedPermissions {
	%orig;
	NSLog(@"-(id) declinedPermissions");
}

-(bool) isEqualToAccessToken:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToAccessToken:(id)");
}

-(bool) isDataAccessExpired {
	%orig;
	NSLog(@"-(bool) isDataAccessExpired");
}

-(id) appID {
	%orig;
	NSLog(@"-(id) appID");
}

-(id) refreshDate {
	%orig;
	NSLog(@"-(id) refreshDate");
}

-(bool) isExpired {
	%orig;
	NSLog(@"-(bool) isExpired");
}

-(id) userID {
	%orig;
	NSLog(@"-(id) userID");
}

-(id) permissions {
	%orig;
	NSLog(@"-(id) permissions");
}

-(id) tokenString {
	%orig;
	NSLog(@"-(id) tokenString");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) expirationDate {
	%orig;
	NSLog(@"-(id) expirationDate");
}

%end

%hook FBSDKErrorRecoveryAttempter

+(id) recoveryAttempterFromConfiguration:(id) {
	%orig;
	NSLog(@"+(id) recoveryAttempterFromConfiguration:(id)");
}

-(void) completeRecovery:(bool) delegate:(id) didRecoverSelector:(SEL) contextInfo:(void*) {
	%orig;
	NSLog(@"-(void) completeRecovery:(bool) delegate:(id) didRecoverSelector:(SEL) contextInfo:(void*)");
}

-(void) attemptRecoveryFromError:(id) optionIndex:(unsigned long long) delegate:(id) didRecoverSelector:(SEL) contextInfo:(void*) {
	%orig;
	NSLog(@"-(void) attemptRecoveryFromError:(id) optionIndex:(unsigned long long) delegate:(id) didRecoverSelector:(SEL) contextInfo:(void*)");
}

%end

%hook _FBSDKLoginRecoveryAttempter

-(void) attemptRecoveryFromError:(id) optionIndex:(unsigned long long) delegate:(id) didRecoverSelector:(SEL) contextInfo:(void*) {
	%orig;
	NSLog(@"-(void) attemptRecoveryFromError:(id) optionIndex:(unsigned long long) delegate:(id) didRecoverSelector:(SEL) contextInfo:(void*)");
}

%end

%hook _FBSDKTemporaryErrorRecoveryAttempter

-(void) attemptRecoveryFromError:(id) optionIndex:(unsigned long long) delegate:(id) didRecoverSelector:(SEL) contextInfo:(void*) {
	%orig;
	NSLog(@"-(void) attemptRecoveryFromError:(id) optionIndex:(unsigned long long) delegate:(id) didRecoverSelector:(SEL) contextInfo:(void*)");
}

%end

%hook FNFDashTrackMetadata

+(id) segmentBaseMetadataWithId:(id) width:(unsigned int) height:(unsigned int) bandwidth:(unsigned int) qualityLabel:(id) mimeType:(id) codecs:(id) initializationUrl:(id) projection:(id) audioChannelConfiguration:(id) indexRange:(_NSRange) initializationRange:(_NSRange) {
	%orig;
	NSLog(@"+(id) segmentBaseMetadataWithId:(id) width:(unsigned int) height:(unsigned int) bandwidth:(unsigned int) qualityLabel:(id) mimeType:(id) codecs:(id) initializationUrl:(id) projection:(id) audioChannelConfiguration:(id) indexRange:(_NSRange) initializationRange:(_NSRange)");
}

+(id) segmentListMetadataWithId:(id) width:(unsigned int) height:(unsigned int) bandwidth:(unsigned int) qualityLabel:(id) mimeType:(id) codecs:(id) initializationUrl:(id) projection:(id) audioChannelConfiguration:(id) timelineTimescale:(unsigned int) timelineDuration:(unsigned int) timelineEntries:(id) {
	%orig;
	NSLog(@"+(id) segmentListMetadataWithId:(id) width:(unsigned int) height:(unsigned int) bandwidth:(unsigned int) qualityLabel:(id) mimeType:(id) codecs:(id) initializationUrl:(id) projection:(id) audioChannelConfiguration:(id) timelineTimescale:(unsigned int) timelineDuration:(unsigned int) timelineEntries:(id)");
}

+(id) segmentTemplateMetadataWithId:(id) width:(unsigned int) height:(unsigned int) bandwidth:(unsigned int) qualityLabel:(id) mimeType:(id) codecs:(id) initializationUrl:(id) projection:(id) audioChannelConfiguration:(id) timelineTimescale:(unsigned int) timelineEntries:(id) encodedInitData:(id) mpdUrl:(id) {
	%orig;
	NSLog(@"+(id) segmentTemplateMetadataWithId:(id) width:(unsigned int) height:(unsigned int) bandwidth:(unsigned int) qualityLabel:(id) mimeType:(id) codecs:(id) initializationUrl:(id) projection:(id) audioChannelConfiguration:(id) timelineTimescale:(unsigned int) timelineEntries:(id) encodedInitData:(id) mpdUrl:(id)");
}

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(id) timelineEntries {
	%orig;
	NSLog(@"-(id) timelineEntries");
}

-(id) initializationUrl {
	%orig;
	NSLog(@"-(id) initializationUrl");
}

-(id) mpdUrl {
	%orig;
	NSLog(@"-(id) mpdUrl");
}

-(id) encodedInitData {
	%orig;
	NSLog(@"-(id) encodedInitData");
}

-(unsigned int) timelineTimescale {
	%orig;
	NSLog(@"-(unsigned int) timelineTimescale");
}

-(id) qualityLabel {
	%orig;
	NSLog(@"-(id) qualityLabel");
}

-(id) audioChannelConfiguration {
	%orig;
	NSLog(@"-(id) audioChannelConfiguration");
}

-(id) initWithId:(id) width:(unsigned int) height:(unsigned int) bandwidth:(unsigned int) qualityLabel:(id) mimeType:(id) codecs:(id) initializationUrl:(id) projection:(id) audioChannelConfiguration:(id) indexRange:(_NSRange) initializationRange:(_NSRange) timelineTimescale:(unsigned int) timelineDuration:(unsigned int) timelineEntries:(id) encodedInitData:(id) mpdUrl:(id) {
	%orig;
	NSLog(@"-(id) initWithId:(id) width:(unsigned int) height:(unsigned int) bandwidth:(unsigned int) qualityLabel:(id) mimeType:(id) codecs:(id) initializationUrl:(id) projection:(id) audioChannelConfiguration:(id) indexRange:(_NSRange) initializationRange:(_NSRange) timelineTimescale:(unsigned int) timelineDuration:(unsigned int) timelineEntries:(id) encodedInitData:(id) mpdUrl:(id)");
}

-(_NSRange) initializationRange {
	%orig;
	NSLog(@"-(_NSRange) initializationRange");
}

-(unsigned int) timelineDuration {
	%orig;
	NSLog(@"-(unsigned int) timelineDuration");
}

-(unsigned int) bandwidth {
	%orig;
	NSLog(@"-(unsigned int) bandwidth");
}

-(_NSRange) indexRange {
	%orig;
	NSLog(@"-(_NSRange) indexRange");
}

-(id) projection {
	%orig;
	NSLog(@"-(id) projection");
}

-(id) codecs {
	%orig;
	NSLog(@"-(id) codecs");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned int) width {
	%orig;
	NSLog(@"-(unsigned int) width");
}

-(unsigned int) height {
	%orig;
	NSLog(@"-(unsigned int) height");
}

-(id) mimeType {
	%orig;
	NSLog(@"-(id) mimeType");
}

%end

%hook FNFDecompressionSessionWithVideoToolbox

-(id) initWithDelegate:(id) sampleBufferFormatDescription:(opaqueCMFormatDescription*) videoSize:(CGSize) async:(bool) timerManager:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) sampleBufferFormatDescription:(opaqueCMFormatDescription*) videoSize:(CGSize) async:(bool) timerManager:(id)");
}

-(void) enqueueSampleBuffer:(opaqueCMSampleBuffer*) iFrame:(unsigned long long) {
	%orig;
	NSLog(@"-(void) enqueueSampleBuffer:(opaqueCMSampleBuffer*) iFrame:(unsigned long long)");
}

-(unsigned char) canAcceptFormatDescription:(opaqueCMFormatDescription*) {
	%orig;
	NSLog(@"-(unsigned char) canAcceptFormatDescription:(opaqueCMFormatDescription*)");
}

-(CGSize) inputSize {
	%orig;
	NSLog(@"-(CGSize) inputSize");
}

-(void) closeSession {
	%orig;
	NSLog(@"-(void) closeSession");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook FBAdConcurrentArray

+(id) array {
	%orig;
	NSLog(@"+(id) array");
}

+(id) arrayWithCapacity:(unsigned long long) {
	%orig;
	NSLog(@"+(id) arrayWithCapacity:(unsigned long long)");
}

-(id) nonConcurrentCopy {
	%orig;
	NSLog(@"-(id) nonConcurrentCopy");
}

-(id) storage {
	%orig;
	NSLog(@"-(id) storage");
}

-(void) setStorage:(id) {
	%orig;
	NSLog(@"-(void) setStorage:(id)");
}

-(unsigned long long) countByEnumeratingWithState:(?*) objects:(id*) count:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) countByEnumeratingWithState:(?*) objects:(id*) count:(unsigned long long)");
}

-(void) addObject:(id) {
	%orig;
	NSLog(@"-(void) addObject:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(unsigned long long) count {
	%orig;
	NSLog(@"-(unsigned long long) count");
}

-(id) objectAtIndexedSubscript:(unsigned long long) {
	%orig;
	NSLog(@"-(id) objectAtIndexedSubscript:(unsigned long long)");
}

-(void) removeLastObject {
	%orig;
	NSLog(@"-(void) removeLastObject");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) removeObjectAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) removeObjectAtIndex:(unsigned long long)");
}

-(void) removeAllObjects {
	%orig;
	NSLog(@"-(void) removeAllObjects");
}

-(id) objectAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(id) objectAtIndex:(unsigned long long)");
}

-(void) removeObject:(id) {
	%orig;
	NSLog(@"-(void) removeObject:(id)");
}

-(void) insertObject:(id) atIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) insertObject:(id) atIndex:(unsigned long long)");
}

-(id) initWithCapacity:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithCapacity:(unsigned long long)");
}

-(void) setObject:(id) atIndexedSubscript:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setObject:(id) atIndexedSubscript:(unsigned long long)");
}

-(void) replaceObjectAtIndex:(unsigned long long) withObject:(id) {
	%orig;
	NSLog(@"-(void) replaceObjectAtIndex:(unsigned long long) withObject:(id)");
}

-(void) removeObjectIdenticalTo:(id) {
	%orig;
	NSLog(@"-(void) removeObjectIdenticalTo:(id)");
}

-(id) .cxx_construct {
	%orig;
	NSLog(@"-(id) .cxx_construct");
}

%end

%hook FBAdSafariDelegateTranslator

+(void) setNotificationCenter:(id) forObject:(id) {
	%orig;
	NSLog(@"+(void) setNotificationCenter:(id) forObject:(id)");
}

+(id) translatorForObject:(id) update:(bool) {
	%orig;
	NSLog(@"+(id) translatorForObject:(id) update:(bool)");
}

+(id) translatorForObject:(id) {
	%orig;
	NSLog(@"+(id) translatorForObject:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) inlineClientToken {
	%orig;
	NSLog(@"-(id) inlineClientToken");
}

-(long long) handlerTimeMs {
	%orig;
	NSLog(@"-(long long) handlerTimeMs");
}

-(long long) loadStartMs {
	%orig;
	NSLog(@"-(long long) loadStartMs");
}

-(long long) responseEndMs {
	%orig;
	NSLog(@"-(long long) responseEndMs");
}

-(long long) domContentLoadedMs {
	%orig;
	NSLog(@"-(long long) domContentLoadedMs");
}

-(long long) scrollReadyMs {
	%orig;
	NSLog(@"-(long long) scrollReadyMs");
}

-(long long) loadFinishMs {
	%orig;
	NSLog(@"-(long long) loadFinishMs");
}

-(void) setHandlerTimeMs:(long long) {
	%orig;
	NSLog(@"-(void) setHandlerTimeMs:(long long)");
}

-(void) setLoadStartMs:(long long) {
	%orig;
	NSLog(@"-(void) setLoadStartMs:(long long)");
}

-(void) setResponseEndMs:(long long) {
	%orig;
	NSLog(@"-(void) setResponseEndMs:(long long)");
}

-(void) setDomContentLoadedMs:(long long) {
	%orig;
	NSLog(@"-(void) setDomContentLoadedMs:(long long)");
}

-(void) setScrollReadyMs:(long long) {
	%orig;
	NSLog(@"-(void) setScrollReadyMs:(long long)");
}

-(void) setLoadFinishMs:(long long) {
	%orig;
	NSLog(@"-(void) setLoadFinishMs:(long long)");
}

-(void) setInlineClientToken:(id) {
	%orig;
	NSLog(@"-(void) setInlineClientToken:(id)");
}

-(void) safariViewControllerDidFinish:(id) {
	%orig;
	NSLog(@"-(void) safariViewControllerDidFinish:(id)");
}

-(void) safariViewController:(id) didCompleteInitialLoad:(bool) {
	%orig;
	NSLog(@"-(void) safariViewController:(id) didCompleteInitialLoad:(bool)");
}

-(void) setSafariViewController:(id) {
	%orig;
	NSLog(@"-(void) setSafariViewController:(id)");
}

-(id) safariViewController {
	%orig;
	NSLog(@"-(id) safariViewController");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

%end

%hook FNFDecompressionSessionWithoutVideoToolbox

-(id) initWithDelegate:(id) sampleBufferFormatDescription:(opaqueCMFormatDescription*) videoSize:(CGSize) async:(bool) timerManager:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) sampleBufferFormatDescription:(opaqueCMFormatDescription*) videoSize:(CGSize) async:(bool) timerManager:(id)");
}

-(void) enqueueSampleBuffer:(opaqueCMSampleBuffer*) iFrame:(unsigned long long) {
	%orig;
	NSLog(@"-(void) enqueueSampleBuffer:(opaqueCMSampleBuffer*) iFrame:(unsigned long long)");
}

-(unsigned char) canAcceptFormatDescription:(opaqueCMFormatDescription*) {
	%orig;
	NSLog(@"-(unsigned char) canAcceptFormatDescription:(opaqueCMFormatDescription*)");
}

-(void) _poll {
	%orig;
	NSLog(@"-(void) _poll");
}

-(void) _removeTemporaryFilesWithLimit:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _removeTemporaryFilesWithLimit:(unsigned long long)");
}

-(void) _flushSampleBuffersUsingQueue:(id) toIndex:(unsigned long long) toIndexIsKeyFrame:(bool) pollID:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _flushSampleBuffersUsingQueue:(id) toIndex:(unsigned long long) toIndexIsKeyFrame:(bool) pollID:(unsigned long long)");
}

-(void) _loadSampleBuffersBackFromFile:(id) usingQueue:(id) toIndex:(unsigned long long) toIndexIsKeyFrame:(bool) pollID:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _loadSampleBuffersBackFromFile:(id) usingQueue:(id) toIndex:(unsigned long long) toIndexIsKeyFrame:(bool) pollID:(unsigned long long)");
}

-(void) _handleAssetLoadCompletion:(id) toIndex:(unsigned long long) toIndexIsKeyFrame:(bool) pollID:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _handleAssetLoadCompletion:(id) toIndex:(unsigned long long) toIndexIsKeyFrame:(bool) pollID:(unsigned long long)");
}

-(void) _yieldDecompressedSampleBuffer:(opaqueCMSampleBuffer*) toDelegate:(id) {
	%orig;
	NSLog(@"-(void) _yieldDecompressedSampleBuffer:(opaqueCMSampleBuffer*) toDelegate:(id)");
}

-(void) _pollCompletedToIndex:(unsigned long long) toIndexIsKeyFrame:(bool) pollID:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _pollCompletedToIndex:(unsigned long long) toIndexIsKeyFrame:(bool) pollID:(unsigned long long)");
}

-(CGSize) inputSize {
	%orig;
	NSLog(@"-(CGSize) inputSize");
}

-(void) closeSession {
	%orig;
	NSLog(@"-(void) closeSession");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) .cxx_construct {
	%orig;
	NSLog(@"-(id) .cxx_construct");
}

%end

%hook FNFLocalMp4Asset

-(?) videoTrackDuration {
	%orig;
	NSLog(@"-(?) videoTrackDuration");
}

-(void) updatePlaybackTime:(?) {
	%orig;
	NSLog(@"-(void) updatePlaybackTime:(?)");
}

-(void) requestTimeLoadedUpdate {
	%orig;
	NSLog(@"-(void) requestTimeLoadedUpdate");
}

-(void) requestErrorNotificationIfNeeded {
	%orig;
	NSLog(@"-(void) requestErrorNotificationIfNeeded");
}

-(bool) resetAssetToBeginningIfNeeded {
	%orig;
	NSLog(@"-(bool) resetAssetToBeginningIfNeeded");
}

-(bool) seekToPosition:(?) {
	%orig;
	NSLog(@"-(bool) seekToPosition:(?)");
}

-(?) timeAfterSeek {
	%orig;
	NSLog(@"-(?) timeAfterSeek");
}

-(bool) trackHasMoreFrames:(long long) {
	%orig;
	NSLog(@"-(bool) trackHasMoreFrames:(long long)");
}

-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long) {
	%orig;
	NSLog(@"-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long)");
}

-(const char*) currentFrameDataForTrack:(long long) {
	%orig;
	NSLog(@"-(const char*) currentFrameDataForTrack:(long long)");
}

-(bool) containsTrack:(long long) {
	%orig;
	NSLog(@"-(bool) containsTrack:(long long)");
}

-(void) advanceFrameForTrack:(long long) {
	%orig;
	NSLog(@"-(void) advanceFrameForTrack:(long long)");
}

-(bool) shouldPauseForStallingWithNextCheckCallback:(id) stallReason:(?) {
	%orig;
	NSLog(@"-(bool) shouldPauseForStallingWithNextCheckCallback:(id) stallReason:(?)");
}

-(bool) shouldRestartAfterStalling {
	%orig;
	NSLog(@"-(bool) shouldRestartAfterStalling");
}

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(id) debugDetails {
	%orig;
	NSLog(@"-(id) debugDetails");
}

-(opaqueCMFormatDescription*) formatDesc {
	%orig;
	NSLog(@"-(opaqueCMFormatDescription*) formatDesc");
}

-(id) audioStreamExtraParameters {
	%orig;
	NSLog(@"-(id) audioStreamExtraParameters");
}

-(bool) embedFrameInfo {
	%orig;
	NSLog(@"-(bool) embedFrameInfo");
}

-(bool) decompressedFramebuffer {
	%orig;
	NSLog(@"-(bool) decompressedFramebuffer");
}

-(void) addErrorToLog:(id) shouldStopPlayback:(bool) {
	%orig;
	NSLog(@"-(void) addErrorToLog:(id) shouldStopPlayback:(bool)");
}

-(id) mpdAccessibilityDescription {
	%orig;
	NSLog(@"-(id) mpdAccessibilityDescription");
}

-(bool) shouldBufferVideoAsSoonAsPossible {
	%orig;
	NSLog(@"-(bool) shouldBufferVideoAsSoonAsPossible");
}

-(void) playbackPauseRequested:(int) {
	%orig;
	NSLog(@"-(void) playbackPauseRequested:(int)");
}

-(void) setEmbedFrameInfo:(bool) {
	%orig;
	NSLog(@"-(void) setEmbedFrameInfo:(bool)");
}

-(?) maxBufferTime {
	%orig;
	NSLog(@"-(?) maxBufferTime");
}

-(?) minBufferTime {
	%orig;
	NSLog(@"-(?) minBufferTime");
}

-(id) initWithLocalURL:(id) async:(bool) decompressedOutput:(bool) containerDimensions:(CGSize) {
	%orig;
	NSLog(@"-(id) initWithLocalURL:(id) async:(bool) decompressedOutput:(bool) containerDimensions:(CGSize)");
}

-(void) _releaseAudioBufferIfNeeded {
	%orig;
	NSLog(@"-(void) _releaseAudioBufferIfNeeded");
}

-(bool) createVideoReader:(?) {
	%orig;
	NSLog(@"-(bool) createVideoReader:(?)");
}

-(bool) createAudioReader:(?) {
	%orig;
	NSLog(@"-(bool) createAudioReader:(?)");
}

-(void) _startWithAsset:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) _startWithAsset:(id) completionHandler:(id)");
}

-(bool) is30MSFrame:(opaqueCMSampleBuffer*) {
	%orig;
	NSLog(@"-(bool) is30MSFrame:(opaqueCMSampleBuffer*)");
}

-(void) _getAudioPacketDescriptions {
	%orig;
	NSLog(@"-(void) _getAudioPacketDescriptions");
}

-(id) initWithLocalURL:(id) decompressedOutput:(bool) containerDimensions:(CGSize) {
	%orig;
	NSLog(@"-(id) initWithLocalURL:(id) decompressedOutput:(bool) containerDimensions:(CGSize)");
}

-(id) URLIfExists {
	%orig;
	NSLog(@"-(id) URLIfExists");
}

-(unsigned int) audioTimescale {
	%orig;
	NSLog(@"-(unsigned int) audioTimescale");
}

-(int) _currentAudioBufferIndex {
	%orig;
	NSLog(@"-(int) _currentAudioBufferIndex");
}

-(void) printASBD:(AudioStreamBasicDescription) {
	%orig;
	NSLog(@"-(void) printASBD:(AudioStreamBasicDescription)");
}

-(AudioStreamBasicDescription) asbd {
	%orig;
	NSLog(@"-(AudioStreamBasicDescription) asbd");
}

-(id) loadedTimeRanges {
	%orig;
	NSLog(@"-(id) loadedTimeRanges");
}

-(void) cancelLoading {
	%orig;
	NSLog(@"-(void) cancelLoading");
}

-(int) pauseReason {
	%orig;
	NSLog(@"-(int) pauseReason");
}

-(id) tracksWithMediaType:(id) {
	%orig;
	NSLog(@"-(id) tracksWithMediaType:(id)");
}

-(CGSize) naturalSize {
	%orig;
	NSLog(@"-(CGSize) naturalSize");
}

-(CGAffineTransform) preferredTransform {
	%orig;
	NSLog(@"-(CGAffineTransform) preferredTransform");
}

-(void) setAudioMix:(id) {
	%orig;
	NSLog(@"-(void) setAudioMix:(id)");
}

-(long long) statusOfValueForKey:(id) error:(id*) {
	%orig;
	NSLog(@"-(long long) statusOfValueForKey:(id) error:(id*)");
}

-(void) loadValuesAsynchronouslyForKeys:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadValuesAsynchronouslyForKeys:(id) completionHandler:(id)");
}

-(bool) isPlaybackBufferFull {
	%orig;
	NSLog(@"-(bool) isPlaybackBufferFull");
}

-(bool) isPlaybackLikelyToKeepUp {
	%orig;
	NSLog(@"-(bool) isPlaybackLikelyToKeepUp");
}

-(id) accessLog {
	%orig;
	NSLog(@"-(id) accessLog");
}

-(unsigned int) timescale {
	%orig;
	NSLog(@"-(unsigned int) timescale");
}

-(bool) isKeyFrame:(opaqueCMSampleBuffer*) {
	%orig;
	NSLog(@"-(bool) isKeyFrame:(opaqueCMSampleBuffer*)");
}

-(void) addOutput:(id) {
	%orig;
	NSLog(@"-(void) addOutput:(id)");
}

-(void) playbackStarted {
	%orig;
	NSLog(@"-(void) playbackStarted");
}

-(id) resourceLoader {
	%orig;
	NSLog(@"-(id) resourceLoader");
}

-(id) audioMix {
	%orig;
	NSLog(@"-(id) audioMix");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(long long) status {
	%orig;
	NSLog(@"-(long long) status");
}

-(id) asset {
	%orig;
	NSLog(@"-(id) asset");
}

%end

%hook FNFSynchronousPlayer

-(id) initWithDisplayEngine:(id) audioEngine:(id) clock:(id) runningQueue:(id) muted:(bool) {
	%orig;
	NSLog(@"-(id) initWithDisplayEngine:(id) audioEngine:(id) clock:(id) runningQueue:(id) muted:(bool)");
}

-(void) setCaptionParser:(id) {
	%orig;
	NSLog(@"-(void) setCaptionParser:(id)");
}

-(void) setAudioEngine:(id) {
	%orig;
	NSLog(@"-(void) setAudioEngine:(id)");
}

-(void) setVolume:(float) rampTime:(float) {
	%orig;
	NSLog(@"-(void) setVolume:(float) rampTime:(float)");
}

-(?) lastStartingTime {
	%orig;
	NSLog(@"-(?) lastStartingTime");
}

-(?) lastRequestedStartTime {
	%orig;
	NSLog(@"-(?) lastRequestedStartTime");
}

-(id) createPeriodicTimeObserverForInterval:(?) usingBlock:(id) {
	%orig;
	NSLog(@"-(id) createPeriodicTimeObserverForInterval:(?) usingBlock:(id)");
}

-(void) addTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) addTimeObserver:(id)");
}

-(void) addLevelMeterCallback:(id) timeInterval:(?) {
	%orig;
	NSLog(@"-(void) addLevelMeterCallback:(id) timeInterval:(?)");
}

-(void) removeLevelMeterCallback {
	%orig;
	NSLog(@"-(void) removeLevelMeterCallback");
}

-(void) addRepresentationChangedCallback:(id) {
	%orig;
	NSLog(@"-(void) addRepresentationChangedCallback:(id)");
}

-(id) queueForLayerUpdates {
	%orig;
	NSLog(@"-(id) queueForLayerUpdates");
}

-(void) layerUpdatedWithError:(id) {
	%orig;
	NSLog(@"-(void) layerUpdatedWithError:(id)");
}

-(bool) _readyToPlay {
	%orig;
	NSLog(@"-(bool) _readyToPlay");
}

-(id) _addStallTimer {
	%orig;
	NSLog(@"-(id) _addStallTimer");
}

-(void) _resumePlayback {
	%orig;
	NSLog(@"-(void) _resumePlayback");
}

-(id) _addPlaybackTimerForAsset {
	%orig;
	NSLog(@"-(id) _addPlaybackTimerForAsset");
}

-(id) _addDurationTimerForAsset {
	%orig;
	NSLog(@"-(id) _addDurationTimerForAsset");
}

-(void) _pause:(int) {
	%orig;
	NSLog(@"-(void) _pause:(int)");
}

-(void) _updateTimersOnPause {
	%orig;
	NSLog(@"-(void) _updateTimersOnPause");
}

-(void) _pausePlayback:(int) {
	%orig;
	NSLog(@"-(void) _pausePlayback:(int)");
}

-(void) _setupLayer {
	%orig;
	NSLog(@"-(void) _setupLayer");
}

-(void) _startVideo {
	%orig;
	NSLog(@"-(void) _startVideo");
}

-(void) _seekToTime:(?) frameSeekOn:(bool) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) _seekToTime:(?) frameSeekOn:(bool) completionHandler:(id)");
}

-(void) _manageStallStateWithDidStartPlaying:(bool) {
	%orig;
	NSLog(@"-(void) _manageStallStateWithDidStartPlaying:(bool)");
}

-(id) _addSampleBufferFlushTimerWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(id) _addSampleBufferFlushTimerWithCompletionHandler:(id)");
}

-(void) _syncVolume {
	%orig;
	NSLog(@"-(void) _syncVolume");
}

-(bool) _videoHasAudioTrack {
	%orig;
	NSLog(@"-(bool) _videoHasAudioTrack");
}

-(void) _adjustAudioFrameToCurrentPlaybackTime {
	%orig;
	NSLog(@"-(void) _adjustAudioFrameToCurrentPlaybackTime");
}

-(void) _reenableLevelMeteringIfNeeded {
	%orig;
	NSLog(@"-(void) _reenableLevelMeteringIfNeeded");
}

-(void) _levelMeterCallback {
	%orig;
	NSLog(@"-(void) _levelMeterCallback");
}

-(bool) _videoIsAudioActive {
	%orig;
	NSLog(@"-(bool) _videoIsAudioActive");
}

-(void) _playbackTimeListenerForAsset:(?) {
	%orig;
	NSLog(@"-(void) _playbackTimeListenerForAsset:(?)");
}

-(void) _playbackFinishedTimeForAsset:(?) {
	%orig;
	NSLog(@"-(void) _playbackFinishedTimeForAsset:(?)");
}

-(void) _flushSampleBuffersDuringFrameSeekWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) _flushSampleBuffersDuringFrameSeekWithCompletionHandler:(id)");
}

-(void) _videoLayerEnqueueFrameCallback {
	%orig;
	NSLog(@"-(void) _videoLayerEnqueueFrameCallback");
}

-(bool) _videoBufferLengthIsGreaterThan:(?) {
	%orig;
	NSLog(@"-(bool) _videoBufferLengthIsGreaterThan:(?)");
}

-(bool) _audioBufferLengthIsGreaterThan:(?) {
	%orig;
	NSLog(@"-(bool) _audioBufferLengthIsGreaterThan:(?)");
}

-(bool) _enqueuedTime:(?) isGreaterThanLength:(?) {
	%orig;
	NSLog(@"-(bool) _enqueuedTime:(?) isGreaterThanLength:(?)");
}

-(void) _audioEngineErrorCallback:(id) {
	%orig;
	NSLog(@"-(void) _audioEngineErrorCallback:(id)");
}

-(void) _checkIfRepresentationChanged {
	%orig;
	NSLog(@"-(void) _checkIfRepresentationChanged");
}

-(void) _markDisplayImmediately:(opaqueCMSampleBuffer*) {
	%orig;
	NSLog(@"-(void) _markDisplayImmediately:(opaqueCMSampleBuffer*)");
}

-(bool) _audioPutDataIntoBufferCallback:(AudioQueueBuffer*) timestamp:(AudioTimeStamp*) framePts:(?*) isfirstPacket:(bool*) {
	%orig;
	NSLog(@"-(bool) _audioPutDataIntoBufferCallback:(AudioQueueBuffer*) timestamp:(AudioTimeStamp*) framePts:(?*) isfirstPacket:(bool*)");
}

-(void) _enqueueBuffer {
	%orig;
	NSLog(@"-(void) _enqueueBuffer");
}

-(void) _videoLayerEnqueueDecompressedFrameCallback {
	%orig;
	NSLog(@"-(void) _videoLayerEnqueueDecompressedFrameCallback");
}

-(void) replaceCurrentItemWithPlayerItem:(id) {
	%orig;
	NSLog(@"-(void) replaceCurrentItemWithPlayerItem:(id)");
}

-(void) removeTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeTimeObserver:(id)");
}

-(void) seekToTime:(?) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) seekToTime:(?) completionHandler:(id)");
}

-(void) seekToTime:(?) toleranceBefore:(?) toleranceAfter:(?) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) seekToTime:(?) toleranceBefore:(?) toleranceAfter:(?) completionHandler:(id)");
}

-(bool) isMuted {
	%orig;
	NSLog(@"-(bool) isMuted");
}

-(void) setMuted:(bool) {
	%orig;
	NSLog(@"-(void) setMuted:(bool)");
}

-(void) _updateStatus:(long long) {
	%orig;
	NSLog(@"-(void) _updateStatus:(long long)");
}

-(void) _setupAudio {
	%orig;
	NSLog(@"-(void) _setupAudio");
}

-(void) setRenderer:(id) {
	%orig;
	NSLog(@"-(void) setRenderer:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) layer {
	%orig;
	NSLog(@"-(id) layer");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) currentItem {
	%orig;
	NSLog(@"-(id) currentItem");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(void) setVolume:(float) {
	%orig;
	NSLog(@"-(void) setVolume:(float)");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

-(void) setRate:(float) {
	%orig;
	NSLog(@"-(void) setRate:(float)");
}

-(float) rate {
	%orig;
	NSLog(@"-(float) rate");
}

-(long long) status {
	%orig;
	NSLog(@"-(long long) status");
}

-(void) applicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive");
}

-(void) applicationWillResignActive {
	%orig;
	NSLog(@"-(void) applicationWillResignActive");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(id) .cxx_construct {
	%orig;
	NSLog(@"-(id) .cxx_construct");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook FNFMpdTimelineEntry

-(id) mediaUrl {
	%orig;
	NSLog(@"-(id) mediaUrl");
}

-(id) initWithTime:(unsigned int) duration:(unsigned int) mediaUrl:(id) {
	%orig;
	NSLog(@"-(id) initWithTime:(unsigned int) duration:(unsigned int) mediaUrl:(id)");
}

-(unsigned int) time {
	%orig;
	NSLog(@"-(unsigned int) time");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned int) duration {
	%orig;
	NSLog(@"-(unsigned int) duration");
}

%end

%hook FBAdEnvironmentData

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(unsigned long long) podPosition {
	%orig;
	NSLog(@"-(unsigned long long) podPosition");
}

-(long long) templateId {
	%orig;
	NSLog(@"-(long long) templateId");
}

-(FBAdSize) adSize {
	%orig;
	NSLog(@"-(FBAdSize) adSize");
}

-(unsigned long long) numAdsRequested {
	%orig;
	NSLog(@"-(unsigned long long) numAdsRequested");
}

-(id) placementDefinition {
	%orig;
	NSLog(@"-(id) placementDefinition");
}

-(void) setPlacementDefinition:(id) {
	%orig;
	NSLog(@"-(void) setPlacementDefinition:(id)");
}

-(void) setPlacementType:(long long) {
	%orig;
	NSLog(@"-(void) setPlacementType:(long long)");
}

-(void) setBidPayload:(id) {
	%orig;
	NSLog(@"-(void) setBidPayload:(id)");
}

-(id) initWithPlacementId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) numAdsRequested:(unsigned long long) bidPayload:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) numAdsRequested:(unsigned long long) bidPayload:(id)");
}

-(id) bidPayload {
	%orig;
	NSLog(@"-(id) bidPayload");
}

-(id) initWithPlacementId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) bidPayload:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) bidPayload:(id)");
}

-(void) setRetryForPodPosition:(bool) {
	%orig;
	NSLog(@"-(void) setRetryForPodPosition:(bool)");
}

-(long long) initOrientation {
	%orig;
	NSLog(@"-(long long) initOrientation");
}

-(void) setAdSize:(FBAdSize) {
	%orig;
	NSLog(@"-(void) setAdSize:(FBAdSize)");
}

-(id) initInternalWithPlacementId:(id) publisherId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) numAdsRequested:(unsigned long long) bidPayload:(id) {
	%orig;
	NSLog(@"-(id) initInternalWithPlacementId:(id) publisherId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) numAdsRequested:(unsigned long long) bidPayload:(id)");
}

-(void) setPodPosition:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setPodPosition:(unsigned long long)");
}

-(void) setTemplateId:(long long) {
	%orig;
	NSLog(@"-(void) setTemplateId:(long long)");
}

-(void) setNumAdsRequested:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setNumAdsRequested:(unsigned long long)");
}

-(void) setInitOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setInitOrientation:(long long)");
}

-(bool) hasValidDefinition {
	%orig;
	NSLog(@"-(bool) hasValidDefinition");
}

-(id) initWithPlacementId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) {
	%orig;
	NSLog(@"-(id) initWithPlacementId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize)");
}

-(id) initWithPlacementId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) numAdsRequested:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithPlacementId:(id) placementType:(long long) templateID:(long long) adSize:(FBAdSize) numAdsRequested:(unsigned long long)");
}

-(id) adRequestParameters {
	%orig;
	NSLog(@"-(id) adRequestParameters");
}

-(id) bidderToken {
	%orig;
	NSLog(@"-(id) bidderToken");
}

-(CGSize) adViewInitSize {
	%orig;
	NSLog(@"-(CGSize) adViewInitSize");
}

-(void) setAdViewInitSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setAdViewInitSize:(CGSize)");
}

-(bool) retryForPodPosition {
	%orig;
	NSLog(@"-(bool) retryForPodPosition");
}

-(bool) isValidDefinition {
	%orig;
	NSLog(@"-(bool) isValidDefinition");
}

-(bool) isValidPlacementId {
	%orig;
	NSLog(@"-(bool) isValidPlacementId");
}

-(unsigned long long) podPositionInternal {
	%orig;
	NSLog(@"-(unsigned long long) podPositionInternal");
}

-(void) setPodPositionInternal:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setPodPositionInternal:(unsigned long long)");
}

-(long long) placementType {
	%orig;
	NSLog(@"-(long long) placementType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FNFExperimentContext

+(id) mobileConfigContextFromSession:(id) {
	%orig;
	NSLog(@"+(id) mobileConfigContextFromSession:(id)");
}

-(double) firstFetchSizeInSeconds {
	%orig;
	NSLog(@"-(double) firstFetchSizeInSeconds");
}

-(id) mobileConfig {
	%orig;
	NSLog(@"-(id) mobileConfig");
}

-(double) fetchBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) fetchBufferSizeInSeconds");
}

-(double) unstallBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) unstallBufferSizeInSeconds");
}

-(double) stallBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) stallBufferSizeInSeconds");
}

-(double) firstUnstallBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) firstUnstallBufferSizeInSeconds");
}

-(double) fetchBufferMultiplier {
	%orig;
	NSLog(@"-(double) fetchBufferMultiplier");
}

-(double) unstallBufferMultiplier {
	%orig;
	NSLog(@"-(double) unstallBufferMultiplier");
}

-(unsigned long long) videoNetworkerInMemoryCacheInBytes {
	%orig;
	NSLog(@"-(unsigned long long) videoNetworkerInMemoryCacheInBytes");
}

-(unsigned long long) videoNetworkerPrefetchInMemoryCacheInBytes {
	%orig;
	NSLog(@"-(unsigned long long) videoNetworkerPrefetchInMemoryCacheInBytes");
}

-(unsigned int) videoPrefetchMaxByteSize {
	%orig;
	NSLog(@"-(unsigned int) videoPrefetchMaxByteSize");
}

-(double) bufferDeciderNetworkFraction {
	%orig;
	NSLog(@"-(double) bufferDeciderNetworkFraction");
}

-(bool) filterByIndex {
	%orig;
	NSLog(@"-(bool) filterByIndex");
}

-(bool) dashLivePrefetchEnabled {
	%orig;
	NSLog(@"-(bool) dashLivePrefetchEnabled");
}

-(unsigned int) dashLiveSegmentsToPrefetch {
	%orig;
	NSLog(@"-(unsigned int) dashLiveSegmentsToPrefetch");
}

-(bool) dashLivePrefetchEnabledOnVideoHome {
	%orig;
	NSLog(@"-(bool) dashLivePrefetchEnabledOnVideoHome");
}

-(unsigned int) dashNotificationDelayBeforeIgnore {
	%orig;
	NSLog(@"-(unsigned int) dashNotificationDelayBeforeIgnore");
}

-(bool) vodDashPrefetchEnabled {
	%orig;
	NSLog(@"-(bool) vodDashPrefetchEnabled");
}

-(unsigned int) dashLiveSegmentsFromEndToStart {
	%orig;
	NSLog(@"-(unsigned int) dashLiveSegmentsFromEndToStart");
}

-(double) dashLiveFetchBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) dashLiveFetchBufferSizeInSeconds");
}

-(double) dashLiveUnstallBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) dashLiveUnstallBufferSizeInSeconds");
}

-(double) dashLiveStallBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) dashLiveStallBufferSizeInSeconds");
}

-(double) dashLiveFirstFetchSizeInSeconds {
	%orig;
	NSLog(@"-(double) dashLiveFirstFetchSizeInSeconds");
}

-(double) dashLiveFetchBufferMultiplier {
	%orig;
	NSLog(@"-(double) dashLiveFetchBufferMultiplier");
}

-(double) dashLiveUnstallBufferMultiplier {
	%orig;
	NSLog(@"-(double) dashLiveUnstallBufferMultiplier");
}

-(double) expectedPlayTimeAfterStall {
	%orig;
	NSLog(@"-(double) expectedPlayTimeAfterStall");
}

-(bool) enableLiveDynamicUnstallBufferSize {
	%orig;
	NSLog(@"-(bool) enableLiveDynamicUnstallBufferSize");
}

-(double) dashLiveUnstallBufferSizeExcellent {
	%orig;
	NSLog(@"-(double) dashLiveUnstallBufferSizeExcellent");
}

-(double) dashLiveUnstallBufferSizeGood {
	%orig;
	NSLog(@"-(double) dashLiveUnstallBufferSizeGood");
}

-(double) dashLiveUnstallBufferSizeModerate {
	%orig;
	NSLog(@"-(double) dashLiveUnstallBufferSizeModerate");
}

-(double) dashLiveUnstallBufferSizePoor {
	%orig;
	NSLog(@"-(double) dashLiveUnstallBufferSizePoor");
}

-(double) dashLiveUnstallBufferSizeUnknown {
	%orig;
	NSLog(@"-(double) dashLiveUnstallBufferSizeUnknown");
}

-(bool) enableVODDynamicUnstallBufferSize {
	%orig;
	NSLog(@"-(bool) enableVODDynamicUnstallBufferSize");
}

-(double) dashVODUnstallBufferSizeExcellent {
	%orig;
	NSLog(@"-(double) dashVODUnstallBufferSizeExcellent");
}

-(double) dashVODUnstallBufferSizeGood {
	%orig;
	NSLog(@"-(double) dashVODUnstallBufferSizeGood");
}

-(double) dashVODUnstallBufferSizeModerate {
	%orig;
	NSLog(@"-(double) dashVODUnstallBufferSizeModerate");
}

-(double) dashVODUnstallBufferSizePoor {
	%orig;
	NSLog(@"-(double) dashVODUnstallBufferSizePoor");
}

-(double) dashVODUnstallBufferSizeUnknown {
	%orig;
	NSLog(@"-(double) dashVODUnstallBufferSizeUnknown");
}

-(double) dashVodFetchBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) dashVodFetchBufferSizeInSeconds");
}

-(double) dashVodUnstallBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) dashVodUnstallBufferSizeInSeconds");
}

-(double) dashVodStallBufferSizeInSeconds {
	%orig;
	NSLog(@"-(double) dashVodStallBufferSizeInSeconds");
}

-(double) dashVodFirstFetchSizeInSeconds {
	%orig;
	NSLog(@"-(double) dashVodFirstFetchSizeInSeconds");
}

-(double) dashVodFetchBufferMultiplier {
	%orig;
	NSLog(@"-(double) dashVodFetchBufferMultiplier");
}

-(double) dashVodUnstallBufferMultiplier {
	%orig;
	NSLog(@"-(double) dashVodUnstallBufferMultiplier");
}

-(bool) dashVodEnableDiskCacheWifi {
	%orig;
	NSLog(@"-(bool) dashVodEnableDiskCacheWifi");
}

-(bool) dashVodEnableDiskCacheCell {
	%orig;
	NSLog(@"-(bool) dashVodEnableDiskCacheCell");
}

-(bool) dashVodDiskCacheFBCdnOnly {
	%orig;
	NSLog(@"-(bool) dashVodDiskCacheFBCdnOnly");
}

-(long long) dashVodDiskCacheWifiNetworkConditionMask {
	%orig;
	NSLog(@"-(long long) dashVodDiskCacheWifiNetworkConditionMask");
}

-(long long) dashVodDiskCacheCellNetworkConditionMask {
	%orig;
	NSLog(@"-(long long) dashVodDiskCacheCellNetworkConditionMask");
}

-(long long) dashVodDiskCacheWifiMaxSize {
	%orig;
	NSLog(@"-(long long) dashVodDiskCacheWifiMaxSize");
}

-(long long) dashVodDiskCacheCellMaxSize {
	%orig;
	NSLog(@"-(long long) dashVodDiskCacheCellMaxSize");
}

-(long long) dashVodDiskCacheWifiRestartSize {
	%orig;
	NSLog(@"-(long long) dashVodDiskCacheWifiRestartSize");
}

-(long long) dashVodDiskCacheCellRestartSize {
	%orig;
	NSLog(@"-(long long) dashVodDiskCacheCellRestartSize");
}

-(double) dashVodDiskCacheSafeMultiplier {
	%orig;
	NSLog(@"-(double) dashVodDiskCacheSafeMultiplier");
}

-(double) dashVodDiskCacheAbrThreshold {
	%orig;
	NSLog(@"-(double) dashVodDiskCacheAbrThreshold");
}

-(int) dashLiveStaleMpdUpdatesThreshold {
	%orig;
	NSLog(@"-(int) dashLiveStaleMpdUpdatesThreshold");
}

-(bool) dashShouldUpdateLoadedTimeEarlier {
	%orig;
	NSLog(@"-(bool) dashShouldUpdateLoadedTimeEarlier");
}

-(unsigned int) abrSelectorType {
	%orig;
	NSLog(@"-(unsigned int) abrSelectorType");
}

-(double) abrSelectorBandwidthFraction {
	%orig;
	NSLog(@"-(double) abrSelectorBandwidthFraction");
}

-(bool) abrFilterSizeScreen {
	%orig;
	NSLog(@"-(bool) abrFilterSizeScreen");
}

-(int) dashLivePushInitialSegmentCount {
	%orig;
	NSLog(@"-(int) dashLivePushInitialSegmentCount");
}

-(int) dashLivePushContinuousSegmentCount {
	%orig;
	NSLog(@"-(int) dashLivePushContinuousSegmentCount");
}

-(int) dashLiveMinutesToPadAvailabilityEndTime {
	%orig;
	NSLog(@"-(int) dashLiveMinutesToPadAvailabilityEndTime");
}

-(bool) dashLiveUsePtsForInitialTime {
	%orig;
	NSLog(@"-(bool) dashLiveUsePtsForInitialTime");
}

-(bool) enableVodMidstreamSwitch {
	%orig;
	NSLog(@"-(bool) enableVodMidstreamSwitch");
}

-(bool) enableLiveMidstreamSwitch {
	%orig;
	NSLog(@"-(bool) enableLiveMidstreamSwitch");
}

-(bool) logRepresentationEnded {
	%orig;
	NSLog(@"-(bool) logRepresentationEnded");
}

-(bool) enableVP9 {
	%orig;
	NSLog(@"-(bool) enableVP9");
}

-(bool) localFileEnabled {
	%orig;
	NSLog(@"-(bool) localFileEnabled");
}

-(bool) isBufferDecompressed {
	%orig;
	NSLog(@"-(bool) isBufferDecompressed");
}

-(bool) is360Enabled {
	%orig;
	NSLog(@"-(bool) is360Enabled");
}

-(bool) seamlessLoopEnabled {
	%orig;
	NSLog(@"-(bool) seamlessLoopEnabled");
}

-(bool) scaleRemoteAssets {
	%orig;
	NSLog(@"-(bool) scaleRemoteAssets");
}

-(int) decompressedBufferSize {
	%orig;
	NSLog(@"-(int) decompressedBufferSize");
}

-(bool) shouldCheckAllHeadersParsedAtDownloadComplete {
	%orig;
	NSLog(@"-(bool) shouldCheckAllHeadersParsedAtDownloadComplete");
}

-(bool) shouldFailOnFailedMoofParse {
	%orig;
	NSLog(@"-(bool) shouldFailOnFailedMoofParse");
}

-(bool) shouldFailOnUnparsedMoofs {
	%orig;
	NSLog(@"-(bool) shouldFailOnUnparsedMoofs");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBAdDatabaseManager

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(void) dropTableSyncWithDatabase:(sqlite3*) withTableName:(id) withCallback:(id) {
	%orig;
	NSLog(@"-(void) dropTableSyncWithDatabase:(sqlite3*) withTableName:(id) withCallback:(id)");
}

-(void) createTableSyncWithDatabase:(sqlite3*) withStatement:(const char*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) createTableSyncWithDatabase:(sqlite3*) withStatement:(const char*) withCallback:(id)");
}

-(void) initializeDatabaseWithCompletionCallback:(id) withDowngradeCallback:(?) withUpgradeCallback:(id) {
	%orig;
	NSLog(@"-(void) initializeDatabaseWithCompletionCallback:(id) withDowngradeCallback:(?) withUpgradeCallback:(id)");
}

-(void) insertWithStatementSync:(const char*) withDatabase:(sqlite3*) withStatementCallback:(id) withCompletionCallback:(?) {
	%orig;
	NSLog(@"-(void) insertWithStatementSync:(const char*) withDatabase:(sqlite3*) withStatementCallback:(id) withCompletionCallback:(?)");
}

-(void) getDatabase:(id) {
	%orig;
	NSLog(@"-(void) getDatabase:(id)");
}

-(void) deleteWithStatementSync:(const char*) withDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) deleteWithStatementSync:(const char*) withDatabase:(sqlite3*) withCallback:(id)");
}

-(void) queryWithStatementSync:(const char*) withDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) queryWithStatementSync:(const char*) withDatabase:(sqlite3*) withCallback:(id)");
}

-(void) deserializeWithStatementSync:(const char*) withDatabase:(sqlite3*) withDeserializeCallback:(id) withCallback:(?) {
	%orig;
	NSLog(@"-(void) deserializeWithStatementSync:(const char*) withDatabase:(sqlite3*) withDeserializeCallback:(id) withCallback:(?)");
}

-(void) openDatabaseWithCallback:(id) withRetry:(?) {
	%orig;
	NSLog(@"-(void) openDatabaseWithCallback:(id) withRetry:(?)");
}

-(void) setUserVersionSync:(int) withDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) setUserVersionSync:(int) withDatabase:(sqlite3*) withCallback:(id)");
}

-(void) setForeignKeyEnforcementSyncWithDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) setForeignKeyEnforcementSyncWithDatabase:(sqlite3*) withCallback:(id)");
}

-(void) queryUserVersionSyncWithDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) queryUserVersionSyncWithDatabase:(sqlite3*) withCallback:(id)");
}

-(void) openDatabaseWithCallback:(id) {
	%orig;
	NSLog(@"-(void) openDatabaseWithCallback:(id)");
}

-(id) storagePath {
	%orig;
	NSLog(@"-(id) storagePath");
}

-(void) setStoragePath:(id) {
	%orig;
	NSLog(@"-(void) setStoragePath:(id)");
}

-(bool) isInitialized {
	%orig;
	NSLog(@"-(bool) isInitialized");
}

-(void) setInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setInitialized:(bool)");
}

-(sqlite3*) database {
	%orig;
	NSLog(@"-(sqlite3*) database");
}

-(void) setDatabase:(sqlite3*) {
	%orig;
	NSLog(@"-(void) setDatabase:(sqlite3*)");
}

-(id) databaseQueue {
	%orig;
	NSLog(@"-(id) databaseQueue");
}

-(void) setDatabaseQueue:(id) {
	%orig;
	NSLog(@"-(void) setDatabaseQueue:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setOperationQueue:(id) {
	%orig;
	NSLog(@"-(void) setOperationQueue:(id)");
}

-(id) operationQueue {
	%orig;
	NSLog(@"-(id) operationQueue");
}

%end

%hook FBAdImage

+(void) loadImagesAsync:(id) withBlock:(id) {
	%orig;
	NSLog(@"+(void) loadImagesAsync:(id) withBlock:(id)");
}

+(void) loadImagesAsyncWithBlurredImages:(id) withContext:(id) withBlock:(id) {
	%orig;
	NSLog(@"+(void) loadImagesAsyncWithBlurredImages:(id) withContext:(id) withBlock:(id)");
}

-(void) loadImageAsyncWithBlock:(id) {
	%orig;
	NSLog(@"-(void) loadImageAsyncWithBlock:(id)");
}

-(void) preloadImageAsync {
	%orig;
	NSLog(@"-(void) preloadImageAsync");
}

-(id) initWithURL:(id) width:(long long) height:(long long) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) width:(long long) height:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(long long) width {
	%orig;
	NSLog(@"-(long long) width");
}

-(void) setWidth:(long long) {
	%orig;
	NSLog(@"-(void) setWidth:(long long)");
}

-(void) setHeight:(long long) {
	%orig;
	NSLog(@"-(void) setHeight:(long long)");
}

-(long long) height {
	%orig;
	NSLog(@"-(long long) height");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

%end

%hook FBInstreamAdChoicesIcon

-(id) initWithURL:(id) width:(long long) height:(long long) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) width:(long long) height:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook FBNativeAd

+(id) fakeNativeAd {
	%orig;
	NSLog(@"+(id) fakeNativeAd");
}

+(void) unregisterOutstandingRequest:(id) {
	%orig;
	NSLog(@"+(void) unregisterOutstandingRequest:(id)");
}

+(id) viewToNativeAdMap {
	%orig;
	NSLog(@"+(id) viewToNativeAdMap");
}

+(id) requests {
	%orig;
	NSLog(@"+(id) requests");
}

+(void) registerOutstandingRequest:(id) {
	%orig;
	NSLog(@"+(void) registerOutstandingRequest:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithPlacementID:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id)");
}

-(void) setMediaCachePolicy:(long long) {
	%orig;
	NSLog(@"-(void) setMediaCachePolicy:(long long)");
}

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(void) registerViewForInteraction:(id) withViewController:(id) {
	%orig;
	NSLog(@"-(void) registerViewForInteraction:(id) withViewController:(id)");
}

-(id) callToAction {
	%orig;
	NSLog(@"-(id) callToAction");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(id) getAdNetwork {
	%orig;
	NSLog(@"-(id) getAdNetwork");
}

-(double) firstImpressionTime {
	%orig;
	NSLog(@"-(double) firstImpressionTime");
}

-(void) unregisterView {
	%orig;
	NSLog(@"-(void) unregisterView");
}

-(void) setNativeAdView:(id) {
	%orig;
	NSLog(@"-(void) setNativeAdView:(id)");
}

-(id) nativeAdView {
	%orig;
	NSLog(@"-(id) nativeAdView");
}

-(id) adViewAttributes {
	%orig;
	NSLog(@"-(id) adViewAttributes");
}

-(id) socialContext {
	%orig;
	NSLog(@"-(id) socialContext");
}

-(void) registerViewForInteraction:(id) withViewController:(id) withClickableViews:(id) {
	%orig;
	NSLog(@"-(void) registerViewForInteraction:(id) withViewController:(id) withClickableViews:(id)");
}

-(void) setClickableViews:(id) {
	%orig;
	NSLog(@"-(void) setClickableViews:(id)");
}

-(id) clickableViews {
	%orig;
	NSLog(@"-(id) clickableViews");
}

-(void) setFirstImpressionTime:(double) {
	%orig;
	NSLog(@"-(void) setFirstImpressionTime:(double)");
}

-(void) logImpression {
	%orig;
	NSLog(@"-(void) logImpression");
}

-(void) setAdController:(id) {
	%orig;
	NSLog(@"-(void) setAdController:(id)");
}

-(void) doLoadAd:(id) {
	%orig;
	NSLog(@"-(void) doLoadAd:(id)");
}

-(void) displayAdControllerLoaded:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerLoaded:(id)");
}

-(void) displayAdControllerStopped:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerStopped:(id)");
}

-(void) displayAdController:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) didFailWithError:(id)");
}

-(void) displayAdController:(id) presentedData:(id) onImpression:(id) onClick:(?) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) presentedData:(id) onImpression:(id) onClick:(?)");
}

-(void) displayAdControllerImpression:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerImpression:(id)");
}

-(void) displayAdController:(id) clickThruWithURL:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) clickThruWithURL:(id)");
}

-(void) displayAdControllerUserClosed:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerUserClosed:(id)");
}

-(id) adChoicesIcon {
	%orig;
	NSLog(@"-(id) adChoicesIcon");
}

-(id) adChoicesLinkURL {
	%orig;
	NSLog(@"-(id) adChoicesLinkURL");
}

-(id) adChoicesText {
	%orig;
	NSLog(@"-(id) adChoicesText");
}

-(id) multiProductAdContent {
	%orig;
	NSLog(@"-(id) multiProductAdContent");
}

-(void) setDataModel:(id) {
	%orig;
	NSLog(@"-(void) setDataModel:(id)");
}

-(id) viewabilityValidator {
	%orig;
	NSLog(@"-(id) viewabilityValidator");
}

-(id) placementDefinition {
	%orig;
	NSLog(@"-(id) placementDefinition");
}

-(void) setViewabilityValidator:(id) {
	%orig;
	NSLog(@"-(void) setViewabilityValidator:(id)");
}

-(bool) viewabilityValidator:(id) checkedWithStatus:(long long) {
	%orig;
	NSLog(@"-(bool) viewabilityValidator:(id) checkedWithStatus:(long long)");
}

-(void) setPlacementDefinition:(id) {
	%orig;
	NSLog(@"-(void) setPlacementDefinition:(id)");
}

-(void) setAdChoicesIcon:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesIcon:(id)");
}

-(void) setAdProvider:(id) {
	%orig;
	NSLog(@"-(void) setAdProvider:(id)");
}

-(void) setBypassValidation:(bool) {
	%orig;
	NSLog(@"-(void) setBypassValidation:(bool)");
}

-(void) unregisterViewInternal {
	%orig;
	NSLog(@"-(void) unregisterViewInternal");
}

-(id) onImpression {
	%orig;
	NSLog(@"-(id) onImpression");
}

-(id) onClick {
	%orig;
	NSLog(@"-(id) onClick");
}

-(void) populateFromDataModel:(id) placementDefinition:(id) onImpression:(id) onClick:(?) {
	%orig;
	NSLog(@"-(void) populateFromDataModel:(id) placementDefinition:(id) onImpression:(id) onClick:(?)");
}

-(bool) hasCalledLoadAd {
	%orig;
	NSLog(@"-(bool) hasCalledLoadAd");
}

-(void) setHasCalledLoadAd:(bool) {
	%orig;
	NSLog(@"-(void) setHasCalledLoadAd:(bool)");
}

-(void) setLoadAdStartTime:(id) {
	%orig;
	NSLog(@"-(void) setLoadAdStartTime:(id)");
}

-(void) setAdChoicesLinkURL:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesLinkURL:(id)");
}

-(void) setAdChoicesText:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesText:(id)");
}

-(void) setAdViewAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAdViewAttributes:(id)");
}

-(void) setOnImpression:(id) {
	%orig;
	NSLog(@"-(void) setOnImpression:(id)");
}

-(void) setOnClick:(id) {
	%orig;
	NSLog(@"-(void) setOnClick:(id)");
}

-(id) loadAdStartTime {
	%orig;
	NSLog(@"-(id) loadAdStartTime");
}

-(long long) mediaCachePolicy {
	%orig;
	NSLog(@"-(long long) mediaCachePolicy");
}

-(bool) isMultiProductSupported {
	%orig;
	NSLog(@"-(bool) isMultiProductSupported");
}

-(void) setViewabilityValidatorDisabled:(bool) {
	%orig;
	NSLog(@"-(void) setViewabilityValidatorDisabled:(bool)");
}

-(bool) shouldBypassValidation {
	%orig;
	NSLog(@"-(bool) shouldBypassValidation");
}

-(bool) viewabilityValidatorDisabled {
	%orig;
	NSLog(@"-(bool) viewabilityValidatorDisabled");
}

-(id) generateViewSnapshot {
	%orig;
	NSLog(@"-(id) generateViewSnapshot");
}

-(void) detachTapGestureRecognizers {
	%orig;
	NSLog(@"-(void) detachTapGestureRecognizers");
}

-(id) generateLoggingDataWithExtraData:(id) {
	%orig;
	NSLog(@"-(id) generateLoggingDataWithExtraData:(id)");
}

-(bool) isHScroll {
	%orig;
	NSLog(@"-(bool) isHScroll");
}

-(bool) usedByMediaView {
	%orig;
	NSLog(@"-(bool) usedByMediaView");
}

-(id) mediaViewConfiguration {
	%orig;
	NSLog(@"-(id) mediaViewConfiguration");
}

-(id) lastTouchData {
	%orig;
	NSLog(@"-(id) lastTouchData");
}

-(void) setLastTouchData:(id) {
	%orig;
	NSLog(@"-(void) setLastTouchData:(id)");
}

-(id) generateViewLogging {
	%orig;
	NSLog(@"-(id) generateViewLogging");
}

-(id) generateLoggingWithView:(id) withClickableViews:(id) {
	%orig;
	NSLog(@"-(id) generateLoggingWithView:(id) withClickableViews:(id)");
}

-(id) loggingDataForView:(id) withSubviews:(bool) {
	%orig;
	NSLog(@"-(id) loggingDataForView:(id) withSubviews:(bool)");
}

-(id) generateViewSnapshotData {
	%orig;
	NSLog(@"-(id) generateViewSnapshotData");
}

-(void) handleTap:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) handleTap:(id) withEvent:(id)");
}

-(id) generateTapLoggingWithLocation:(CGPoint) inRect:(CGRect) {
	%orig;
	NSLog(@"-(id) generateTapLoggingWithLocation:(CGPoint) inRect:(CGRect)");
}

-(id) generateLoggingData {
	%orig;
	NSLog(@"-(id) generateLoggingData");
}

-(id) generateViewPostData {
	%orig;
	NSLog(@"-(id) generateViewPostData");
}

-(id) initWithPlacementID:(id) adProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adProvider:(id)");
}

-(void) disableViewabilityValidator {
	%orig;
	NSLog(@"-(void) disableViewabilityValidator");
}

-(id) rawBody {
	%orig;
	NSLog(@"-(id) rawBody");
}

-(void) setIsHScroll:(bool) {
	%orig;
	NSLog(@"-(void) setIsHScroll:(bool)");
}

-(void) setUsedByMediaView:(bool) {
	%orig;
	NSLog(@"-(void) setUsedByMediaView:(bool)");
}

-(void) setMediaViewConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setMediaViewConfiguration:(id)");
}

-(id) getExternalLoggingExtraDataWithSource:(id) {
	%orig;
	NSLog(@"-(id) getExternalLoggingExtraDataWithSource:(id)");
}

-(void) logExternalImpressionFromSource:(id) {
	%orig;
	NSLog(@"-(void) logExternalImpressionFromSource:(id)");
}

-(void) handleExternalClickWithViewController:(id) fromSource:(id) {
	%orig;
	NSLog(@"-(void) handleExternalClickWithViewController:(id) fromSource:(id)");
}

-(void) checkManualLoggingEligibility {
	%orig;
	NSLog(@"-(void) checkManualLoggingEligibility");
}

-(id) getManualLoggingExtraData {
	%orig;
	NSLog(@"-(id) getManualLoggingExtraData");
}

-(void) handleClickWithViewController:(id) {
	%orig;
	NSLog(@"-(void) handleClickWithViewController:(id)");
}

-(FBAdStarRating) starRating {
	%orig;
	NSLog(@"-(FBAdStarRating) starRating");
}

-(bool) isRegistered {
	%orig;
	NSLog(@"-(bool) isRegistered");
}

-(id) videoURL {
	%orig;
	NSLog(@"-(id) videoURL");
}

-(id) coverImage {
	%orig;
	NSLog(@"-(id) coverImage");
}

-(id) dataModel {
	%orig;
	NSLog(@"-(id) dataModel");
}

-(bool) isVideoSupported {
	%orig;
	NSLog(@"-(bool) isVideoSupported");
}

-(id) adController {
	%orig;
	NSLog(@"-(id) adController");
}

-(id) autoPlayEnabled {
	%orig;
	NSLog(@"-(id) autoPlayEnabled");
}

-(id) adProvider {
	%orig;
	NSLog(@"-(id) adProvider");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(bool) gestureRecognizerShouldBegin:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizerShouldBegin:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) subtitle {
	%orig;
	NSLog(@"-(id) subtitle");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(id) gestureRecognizers {
	%orig;
	NSLog(@"-(id) gestureRecognizers");
}

-(id) icon {
	%orig;
	NSLog(@"-(id) icon");
}

-(id) body {
	%orig;
	NSLog(@"-(id) body");
}

-(void) handleTap:(id) {
	%orig;
	NSLog(@"-(void) handleTap:(id)");
}

-(void) setGestureRecognizers:(id) {
	%orig;
	NSLog(@"-(void) setGestureRecognizers:(id)");
}

%end

%hook FNFMp4AtomManager

-(?) videoTrackDuration {
	%orig;
	NSLog(@"-(?) videoTrackDuration");
}

-(FNFSeekStatus) seekToPosition:(?) {
	%orig;
	NSLog(@"-(FNFSeekStatus) seekToPosition:(?)");
}

-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long) {
	%orig;
	NSLog(@"-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long)");
}

-(const char*) currentFrameDataForTrack:(long long) {
	%orig;
	NSLog(@"-(const char*) currentFrameDataForTrack:(long long)");
}

-(void) advanceFrameForTrack:(long long) {
	%orig;
	NSLog(@"-(void) advanceFrameForTrack:(long long)");
}

-(opaqueCMFormatDescription*) formatDesc {
	%orig;
	NSLog(@"-(opaqueCMFormatDescription*) formatDesc");
}

-(id) audioStreamExtraParameters {
	%orig;
	NSLog(@"-(id) audioStreamExtraParameters");
}

-(bool) parsedHeaders {
	%orig;
	NSLog(@"-(bool) parsedHeaders");
}

-(void) createNewDataBlockDistributors {
	%orig;
	NSLog(@"-(void) createNewDataBlockDistributors");
}

-(bool) shouldResetAssetToBeginning {
	%orig;
	NSLog(@"-(bool) shouldResetAssetToBeginning");
}

-(bool) containsAudio {
	%orig;
	NSLog(@"-(bool) containsAudio");
}

-(?) timeLoadedForOffset:(unsigned long long) track:(long long) {
	%orig;
	NSLog(@"-(?) timeLoadedForOffset:(unsigned long long) track:(long long)");
}

-(?) nextAbsoluteAudioTime {
	%orig;
	NSLog(@"-(?) nextAbsoluteAudioTime");
}

-(unsigned long long) offsetForTimeInSeconds:(float) track:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) offsetForTimeInSeconds:(float) track:(long long)");
}

-(void) _resetDataForSeekBack {
	%orig;
	NSLog(@"-(void) _resetDataForSeekBack");
}

-(?) currentVideoPts {
	%orig;
	NSLog(@"-(?) currentVideoPts");
}

-(bool) offsetIsAtLeastLargestOffset:(unsigned long long) track:(long long) {
	%orig;
	NSLog(@"-(bool) offsetIsAtLeastLargestOffset:(unsigned long long) track:(long long)");
}

-(id) dataBlockDistributorForTrack:(long long) {
	%orig;
	NSLog(@"-(id) dataBlockDistributorForTrack:(long long)");
}

-(unsigned long long) currentOffsetForTrack:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) currentOffsetForTrack:(long long)");
}

-(id) initWithMoovAtomSize:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithMoovAtomSize:(unsigned long long)");
}

-(bool) trackHasMoreFrames:(long long) isFullyDownloaded:(bool) {
	%orig;
	NSLog(@"-(bool) trackHasMoreFrames:(long long) isFullyDownloaded:(bool)");
}

-(void) parseAtomForTrack:(long long) {
	%orig;
	NSLog(@"-(void) parseAtomForTrack:(long long)");
}

-(bool) parsedHeaderForTrack:(long long) {
	%orig;
	NSLog(@"-(bool) parsedHeaderForTrack:(long long)");
}

-(AudioStreamBasicDescription) asbd {
	%orig;
	NSLog(@"-(AudioStreamBasicDescription) asbd");
}

-(unsigned long long) moovAtomSize {
	%orig;
	NSLog(@"-(unsigned long long) moovAtomSize");
}

-(unsigned long long) timescale {
	%orig;
	NSLog(@"-(unsigned long long) timescale");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(id) .cxx_construct {
	%orig;
	NSLog(@"-(id) .cxx_construct");
}

%end

%hook FBAdImageOpenGLRenderer

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setCiContext:(id) {
	%orig;
	NSLog(@"-(void) setCiContext:(id)");
}

-(id) initWithEAGLContext:(id) {
	%orig;
	NSLog(@"-(id) initWithEAGLContext:(id)");
}

-(void) setCiImage:(id) {
	%orig;
	NSLog(@"-(void) setCiImage:(id)");
}

-(void) renderCIImage:(id) {
	%orig;
	NSLog(@"-(void) renderCIImage:(id)");
}

-(id) ciImage {
	%orig;
	NSLog(@"-(id) ciImage");
}

-(id) glView {
	%orig;
	NSLog(@"-(id) glView");
}

-(void) setGlView:(id) {
	%orig;
	NSLog(@"-(void) setGlView:(id)");
}

-(id) ciContext {
	%orig;
	NSLog(@"-(id) ciContext");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) glkView:(id) drawInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) glkView:(id) drawInRect:(CGRect)");
}

%end

%hook FBAdWebKitContentContainer

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) offsiteAd {
	%orig;
	NSLog(@"-(id) offsiteAd");
}

-(bool) loadAdData:(id) minViewability:(int) {
	%orig;
	NSLog(@"-(bool) loadAdData:(id) minViewability:(int)");
}

-(id) activationCommand {
	%orig;
	NSLog(@"-(id) activationCommand");
}

-(bool) loadAdMarkup:(id) activationCommand:(id) {
	%orig;
	NSLog(@"-(bool) loadAdMarkup:(id) activationCommand:(id)");
}

-(void) initializeJavascriptAdControl {
	%orig;
	NSLog(@"-(void) initializeJavascriptAdControl");
}

-(id) getView {
	%orig;
	NSLog(@"-(id) getView");
}

-(bool) logClickWithExtraData:(id) {
	%orig;
	NSLog(@"-(bool) logClickWithExtraData:(id)");
}

-(CGPoint) lastTouchStartLocation {
	%orig;
	NSLog(@"-(CGPoint) lastTouchStartLocation");
}

-(CGPoint) lastTouchCurrentLocation {
	%orig;
	NSLog(@"-(CGPoint) lastTouchCurrentLocation");
}

-(double) lastTouchRadius {
	%orig;
	NSLog(@"-(double) lastTouchRadius");
}

-(double) lastTouchPressure {
	%orig;
	NSLog(@"-(double) lastTouchPressure");
}

-(double) lastTouchStartTimestamp {
	%orig;
	NSLog(@"-(double) lastTouchStartTimestamp");
}

-(double) lastTouchCurrentTimestamp {
	%orig;
	NSLog(@"-(double) lastTouchCurrentTimestamp");
}

-(double) firstImpressionTime {
	%orig;
	NSLog(@"-(double) firstImpressionTime");
}

-(void) setOffsiteAd:(id) {
	%orig;
	NSLog(@"-(void) setOffsiteAd:(id)");
}

-(void) setLoggedImpression:(bool) {
	%orig;
	NSLog(@"-(void) setLoggedImpression:(bool)");
}

-(void) setFirstImpressionTime:(double) {
	%orig;
	NSLog(@"-(void) setFirstImpressionTime:(double)");
}

-(void) setActivationCommand:(id) {
	%orig;
	NSLog(@"-(void) setActivationCommand:(id)");
}

-(void) setIsJavascriptAdControlInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setIsJavascriptAdControlInitialized:(bool)");
}

-(bool) isJavascriptAdControlInitialized {
	%orig;
	NSLog(@"-(bool) isJavascriptAdControlInitialized");
}

-(bool) hasLoggedImpression {
	%orig;
	NSLog(@"-(bool) hasLoggedImpression");
}

-(void) setLastTouchStartTimestamp:(double) {
	%orig;
	NSLog(@"-(void) setLastTouchStartTimestamp:(double)");
}

-(void) updateTouchDataWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) updateTouchDataWithTouches:(id) andEvent:(id)");
}

-(void) setLastTouchStartLocation:(CGPoint) {
	%orig;
	NSLog(@"-(void) setLastTouchStartLocation:(CGPoint)");
}

-(void) setLastTouchCurrentLocation:(CGPoint) {
	%orig;
	NSLog(@"-(void) setLastTouchCurrentLocation:(CGPoint)");
}

-(void) setLastTouchCurrentTimestamp:(double) {
	%orig;
	NSLog(@"-(void) setLastTouchCurrentTimestamp:(double)");
}

-(void) setLastTouchRadius:(double) {
	%orig;
	NSLog(@"-(void) setLastTouchRadius:(double)");
}

-(void) setLastTouchPressure:(double) {
	%orig;
	NSLog(@"-(void) setLastTouchPressure:(double)");
}

-(void) gestureRecognizer:(id) beganWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizer:(id) beganWithTouches:(id) andEvent:(id)");
}

-(void) gestureRecognizer:(id) movedWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizer:(id) movedWithTouches:(id) andEvent:(id)");
}

-(void) gestureRecognizer:(id) endedWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizer:(id) endedWithTouches:(id) andEvent:(id)");
}

-(void) gestureRecognizer:(id) cancelledWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizer:(id) cancelledWithTouches:(id) andEvent:(id)");
}

-(id) initWithAdView:(id) actualAdSize:(CGSize) adSizeType:(FBAdSize) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id) actualAdSize:(CGSize) adSizeType:(FBAdSize)");
}

-(CGSize) actualAdSize {
	%orig;
	NSLog(@"-(CGSize) actualAdSize");
}

-(void) setActualAdSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setActualAdSize:(CGSize)");
}

-(FBAdSize) adSizeType {
	%orig;
	NSLog(@"-(FBAdSize) adSizeType");
}

-(void) setAdSizeType:(FBAdSize) {
	%orig;
	NSLog(@"-(void) setAdSizeType:(FBAdSize)");
}

-(bool) logImpression {
	%orig;
	NSLog(@"-(bool) logImpression");
}

-(void) gestureRecognizerTapped:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizerTapped:(id)");
}

-(void) initializeJavascriptAdControlWithRetries:(long long) {
	%orig;
	NSLog(@"-(void) initializeJavascriptAdControlWithRetries:(long long)");
}

-(id) impressionRetryTimer {
	%orig;
	NSLog(@"-(id) impressionRetryTimer");
}

-(void) setImpressionRetryTimer:(id) {
	%orig;
	NSLog(@"-(void) setImpressionRetryTimer:(id)");
}

-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id)");
}

-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id)");
}

-(void) webView:(id) didFinishNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFinishNavigation:(id)");
}

-(void) webView:(id) didFailNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailNavigation:(id) withError:(id)");
}

-(void) setParent:(id) {
	%orig;
	NSLog(@"-(void) setParent:(id)");
}

-(id) requestURL {
	%orig;
	NSLog(@"-(id) requestURL");
}

-(void) setRequestURL:(id) {
	%orig;
	NSLog(@"-(void) setRequestURL:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(CGSize) minimumSize {
	%orig;
	NSLog(@"-(CGSize) minimumSize");
}

-(void) setMaximumSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setMaximumSize:(CGSize)");
}

-(void) setMinimumSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setMinimumSize:(CGSize)");
}

-(CGSize) maximumSize {
	%orig;
	NSLog(@"-(CGSize) maximumSize");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(id) parent {
	%orig;
	NSLog(@"-(id) parent");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

%end

%hook FBAdQualityViewabilityMeasurement

+(id) measurementWithTargetView:(id) {
	%orig;
	NSLog(@"+(id) measurementWithTargetView:(id)");
}

-(float) viewableRatio {
	%orig;
	NSLog(@"-(float) viewableRatio");
}

-(id) overlappingRectsInView:(id) targetRect:(CGRect) relativeToScreen:(bool) {
	%orig;
	NSLog(@"-(id) overlappingRectsInView:(id) targetRect:(CGRect) relativeToScreen:(bool)");
}

-(double) unionAreaOfRects:(id) {
	%orig;
	NSLog(@"-(double) unionAreaOfRects:(id)");
}

-(id) intersectingRectsInView:(id) targetRect:(CGRect) relativeToScreen:(bool) {
	%orig;
	NSLog(@"-(id) intersectingRectsInView:(id) targetRect:(CGRect) relativeToScreen:(bool)");
}

-(id) initWithTargetView:(id) {
	%orig;
	NSLog(@"-(id) initWithTargetView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) targetView {
	%orig;
	NSLog(@"-(id) targetView");
}

-(void) setTargetView:(id) {
	%orig;
	NSLog(@"-(void) setTargetView:(id)");
}

%end

%hook FBAdError

+(id) getNSError:(long long) {
	%orig;
	NSLog(@"+(id) getNSError:(long long)");
}

+(id) getNSError:(long long) description:(id) {
	%orig;
	NSLog(@"+(id) getNSError:(long long) description:(id)");
}

+(id) getNSError:(long long) domain:(id) description:(id) detail:(id) {
	%orig;
	NSLog(@"+(id) getNSError:(long long) domain:(id) description:(id) detail:(id)");
}

+(id) defaultDescriptions {
	%orig;
	NSLog(@"+(id) defaultDescriptions");
}

+(id) getNSError:(long long) description:(id) detail:(id) {
	%orig;
	NSLog(@"+(id) getNSError:(long long) description:(id) detail:(id)");
}

+(id) defaultDescriptionForKey:(id) {
	%orig;
	NSLog(@"+(id) defaultDescriptionForKey:(id)");
}

+(id) getNSError:(long long) detail:(id) {
	%orig;
	NSLog(@"+(id) getNSError:(long long) detail:(id)");
}

+(id) getErrorFromJSON:(id) withCode:(long long) description:(id) detail:(id) {
	%orig;
	NSLog(@"+(id) getErrorFromJSON:(id) withCode:(long long) description:(id) detail:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

%end

%hook FNFMp4Asset

-(void) dataWasReceivedForTrack:(long long) andIsComplete:(bool) {
	%orig;
	NSLog(@"-(void) dataWasReceivedForTrack:(long long) andIsComplete:(bool)");
}

-(?) videoTrackDuration {
	%orig;
	NSLog(@"-(?) videoTrackDuration");
}

-(void) updatePlaybackTime:(?) {
	%orig;
	NSLog(@"-(void) updatePlaybackTime:(?)");
}

-(void) requestTimeLoadedUpdate {
	%orig;
	NSLog(@"-(void) requestTimeLoadedUpdate");
}

-(void) requestErrorNotificationIfNeeded {
	%orig;
	NSLog(@"-(void) requestErrorNotificationIfNeeded");
}

-(bool) resetAssetToBeginningIfNeeded {
	%orig;
	NSLog(@"-(bool) resetAssetToBeginningIfNeeded");
}

-(bool) seekToPosition:(?) {
	%orig;
	NSLog(@"-(bool) seekToPosition:(?)");
}

-(?) timeAfterSeek {
	%orig;
	NSLog(@"-(?) timeAfterSeek");
}

-(bool) trackHasMoreFrames:(long long) {
	%orig;
	NSLog(@"-(bool) trackHasMoreFrames:(long long)");
}

-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long) {
	%orig;
	NSLog(@"-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long)");
}

-(const char*) currentFrameDataForTrack:(long long) {
	%orig;
	NSLog(@"-(const char*) currentFrameDataForTrack:(long long)");
}

-(bool) containsTrack:(long long) {
	%orig;
	NSLog(@"-(bool) containsTrack:(long long)");
}

-(void) advanceFrameForTrack:(long long) {
	%orig;
	NSLog(@"-(void) advanceFrameForTrack:(long long)");
}

-(bool) shouldPauseForStallingWithNextCheckCallback:(id) stallReason:(?) {
	%orig;
	NSLog(@"-(bool) shouldPauseForStallingWithNextCheckCallback:(id) stallReason:(?)");
}

-(bool) shouldRestartAfterStalling {
	%orig;
	NSLog(@"-(bool) shouldRestartAfterStalling");
}

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(id) debugDetails {
	%orig;
	NSLog(@"-(id) debugDetails");
}

-(opaqueCMFormatDescription*) formatDesc {
	%orig;
	NSLog(@"-(opaqueCMFormatDescription*) formatDesc");
}

-(id) audioStreamExtraParameters {
	%orig;
	NSLog(@"-(id) audioStreamExtraParameters");
}

-(bool) embedFrameInfo {
	%orig;
	NSLog(@"-(bool) embedFrameInfo");
}

-(bool) decompressedFramebuffer {
	%orig;
	NSLog(@"-(bool) decompressedFramebuffer");
}

-(void) addErrorToLog:(id) shouldStopPlayback:(bool) {
	%orig;
	NSLog(@"-(void) addErrorToLog:(id) shouldStopPlayback:(bool)");
}

-(id) mpdAccessibilityDescription {
	%orig;
	NSLog(@"-(id) mpdAccessibilityDescription");
}

-(bool) shouldBufferVideoAsSoonAsPossible {
	%orig;
	NSLog(@"-(bool) shouldBufferVideoAsSoonAsPossible");
}

-(void) playbackPauseRequested:(int) {
	%orig;
	NSLog(@"-(void) playbackPauseRequested:(int)");
}

-(void) setEmbedFrameInfo:(bool) {
	%orig;
	NSLog(@"-(void) setEmbedFrameInfo:(bool)");
}

-(?) maxBufferTime {
	%orig;
	NSLog(@"-(?) maxBufferTime");
}

-(?) minBufferTime {
	%orig;
	NSLog(@"-(?) minBufferTime");
}

-(void) loadingDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) loadingDidFailWithError:(id)");
}

-(void) _forTestingMakeSynchronous {
	%orig;
	NSLog(@"-(void) _forTestingMakeSynchronous");
}

-(void) _potentiallyStartRequest {
	%orig;
	NSLog(@"-(void) _potentiallyStartRequest");
}

-(bool) _fullyDownloaded {
	%orig;
	NSLog(@"-(bool) _fullyDownloaded");
}

-(void) _seekDataLoaderToTime:(?) offset:(unsigned long long) shouldUpdateOffset:(bool) track:(long long) {
	%orig;
	NSLog(@"-(void) _seekDataLoaderToTime:(?) offset:(unsigned long long) shouldUpdateOffset:(bool) track:(long long)");
}

-(void) _handleWarning:(id) {
	%orig;
	NSLog(@"-(void) _handleWarning:(id)");
}

-(void) parsingDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) parsingDidFailWithError:(id)");
}

-(void) _potentiallyStartRequestForTrack:(long long) {
	%orig;
	NSLog(@"-(void) _potentiallyStartRequestForTrack:(long long)");
}

-(void) willChangeValue {
	%orig;
	NSLog(@"-(void) willChangeValue");
}

-(void) didChangeValue {
	%orig;
	NSLog(@"-(void) didChangeValue");
}

-(double) assetCurrentBitRate {
	%orig;
	NSLog(@"-(double) assetCurrentBitRate");
}

-(id) dataBlockDistributorForTrack:(long long) {
	%orig;
	NSLog(@"-(id) dataBlockDistributorForTrack:(long long)");
}

-(unsigned long long) currentOffsetForTrack:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) currentOffsetForTrack:(long long)");
}

-(id) initWithURL:(id) moovAtomSize:(unsigned long long) bitrate:(unsigned long long) fetchBufferSizeInSeconds:(double) unstallBufferSizeInSeconds:(double) stallBufferSizeInSeconds:(double) firstFetchSizeInSeconds:(double) fetchBufferMultiplier:(double) unstallBufferMultiplier:(double) async:(bool) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) moovAtomSize:(unsigned long long) bitrate:(unsigned long long) fetchBufferSizeInSeconds:(double) unstallBufferSizeInSeconds:(double) stallBufferSizeInSeconds:(double) firstFetchSizeInSeconds:(double) fetchBufferMultiplier:(double) unstallBufferMultiplier:(double) async:(bool)");
}

-(void) _updateTimeLoaded {
	%orig;
	NSLog(@"-(void) _updateTimeLoaded");
}

-(bool) _fullyDownloaded:(long long) {
	%orig;
	NSLog(@"-(bool) _fullyDownloaded:(long long)");
}

-(void) resetDataForSeekBack {
	%orig;
	NSLog(@"-(void) resetDataForSeekBack");
}

-(id) initWithURL:(id) moovAtomSize:(unsigned long long) bitrate:(unsigned long long) fetchBufferSizeInSeconds:(double) unstallBufferSizeInSeconds:(double) stallBufferSizeInSeconds:(double) firstFetchSizeInSeconds:(double) fetchBufferMultiplier:(double) unstallBufferMultiplier:(double) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) moovAtomSize:(unsigned long long) bitrate:(unsigned long long) fetchBufferSizeInSeconds:(double) unstallBufferSizeInSeconds:(double) stallBufferSizeInSeconds:(double) firstFetchSizeInSeconds:(double) fetchBufferMultiplier:(double) unstallBufferMultiplier:(double)");
}

-(id) initWithURL:(id) moovAtomSize:(unsigned long long) bitrate:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) moovAtomSize:(unsigned long long) bitrate:(unsigned long long)");
}

-(id) initWithAtomManager:(id) dataLoader:(id) fetchBufferSizeInSeconds:(double) unstallBufferSizeInSeconds:(double) stallBufferSizeInSeconds:(double) firstFetchSizeInSeconds:(double) fetchBufferMultiplier:(double) unstallBufferMultiplier:(double) shouldShowBroadcastInterrupt:(bool) {
	%orig;
	NSLog(@"-(id) initWithAtomManager:(id) dataLoader:(id) fetchBufferSizeInSeconds:(double) unstallBufferSizeInSeconds:(double) stallBufferSizeInSeconds:(double) firstFetchSizeInSeconds:(double) fetchBufferMultiplier:(double) unstallBufferMultiplier:(double) shouldShowBroadcastInterrupt:(bool)");
}

-(AudioStreamBasicDescription) asbd {
	%orig;
	NSLog(@"-(AudioStreamBasicDescription) asbd");
}

-(void) _handleError:(id) {
	%orig;
	NSLog(@"-(void) _handleError:(id)");
}

-(id) loadedTimeRanges {
	%orig;
	NSLog(@"-(id) loadedTimeRanges");
}

-(void) cancelLoading {
	%orig;
	NSLog(@"-(void) cancelLoading");
}

-(int) pauseReason {
	%orig;
	NSLog(@"-(int) pauseReason");
}

-(id) tracksWithMediaType:(id) {
	%orig;
	NSLog(@"-(id) tracksWithMediaType:(id)");
}

-(CGSize) naturalSize {
	%orig;
	NSLog(@"-(CGSize) naturalSize");
}

-(CGAffineTransform) preferredTransform {
	%orig;
	NSLog(@"-(CGAffineTransform) preferredTransform");
}

-(void) setAudioMix:(id) {
	%orig;
	NSLog(@"-(void) setAudioMix:(id)");
}

-(long long) statusOfValueForKey:(id) error:(id*) {
	%orig;
	NSLog(@"-(long long) statusOfValueForKey:(id) error:(id*)");
}

-(void) loadValuesAsynchronouslyForKeys:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadValuesAsynchronouslyForKeys:(id) completionHandler:(id)");
}

-(bool) isPlaybackBufferFull {
	%orig;
	NSLog(@"-(bool) isPlaybackBufferFull");
}

-(bool) isPlaybackLikelyToKeepUp {
	%orig;
	NSLog(@"-(bool) isPlaybackLikelyToKeepUp");
}

-(id) accessLog {
	%orig;
	NSLog(@"-(id) accessLog");
}

-(unsigned long long) timescale {
	%orig;
	NSLog(@"-(unsigned long long) timescale");
}

-(void) addOutput:(id) {
	%orig;
	NSLog(@"-(void) addOutput:(id)");
}

-(id) dispatchQueue {
	%orig;
	NSLog(@"-(id) dispatchQueue");
}

-(void) playbackStarted {
	%orig;
	NSLog(@"-(void) playbackStarted");
}

-(id) resourceLoader {
	%orig;
	NSLog(@"-(id) resourceLoader");
}

-(id) audioMix {
	%orig;
	NSLog(@"-(id) audioMix");
}

-(void) reportWarning:(id) {
	%orig;
	NSLog(@"-(void) reportWarning:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(long long) status {
	%orig;
	NSLog(@"-(long long) status");
}

-(id) asset {
	%orig;
	NSLog(@"-(id) asset");
}

%end

%hook FBAdLogger

+(void) logAtLevel:(int) file:(const char*) lineNumber:(int) format:(id) {
	%orig;
	NSLog(@"+(void) logAtLevel:(int) file:(const char*) lineNumber:(int) format:(id)");
}

+(void) logInTestModeWithFile:(const char*) lineNumber:(int) format:(id) {
	%orig;
	NSLog(@"+(void) logInTestModeWithFile:(const char*) lineNumber:(int) format:(id)");
}

+(id) levelAsString:(int) {
	%orig;
	NSLog(@"+(id) levelAsString:(int)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

%end

%hook FBInterstitialAd

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithPlacementID:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id)");
}

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(void) setAdController:(id) {
	%orig;
	NSLog(@"-(void) setAdController:(id)");
}

-(void) setShowCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setShowCount:(unsigned long long)");
}

-(void) doLoadAd:(id) {
	%orig;
	NSLog(@"-(void) doLoadAd:(id)");
}

-(unsigned long long) showCount {
	%orig;
	NSLog(@"-(unsigned long long) showCount");
}

-(void) displayAdControllerLoaded:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerLoaded:(id)");
}

-(void) displayAdControllerStopped:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerStopped:(id)");
}

-(void) displayAdController:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) didFailWithError:(id)");
}

-(void) displayAdController:(id) presentedView:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) presentedView:(id)");
}

-(void) displayAdControllerImpression:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerImpression:(id)");
}

-(void) displayAdController:(id) clickThruWithURL:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) clickThruWithURL:(id)");
}

-(void) displayAdControllerUserClosed:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerUserClosed:(id)");
}

-(void) setMaxShowCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaxShowCount:(unsigned long long)");
}

-(unsigned long long) maxShowCount {
	%orig;
	NSLog(@"-(unsigned long long) maxShowCount");
}

-(bool) isReady {
	%orig;
	NSLog(@"-(bool) isReady");
}

-(bool) isInitialized {
	%orig;
	NSLog(@"-(bool) isInitialized");
}

-(void) setInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setInitialized:(bool)");
}

-(id) adController {
	%orig;
	NSLog(@"-(id) adController");
}

-(void) setReady:(bool) {
	%orig;
	NSLog(@"-(void) setReady:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook FBAdSdkCapabilityUtility

+(id) supportedCapabilities {
	%orig;
	NSLog(@"+(id) supportedCapabilities");
}

%end

%hook FBAdVideoLogger

-(id) inlineClientToken {
	%orig;
	NSLog(@"-(id) inlineClientToken");
}

-(void) setInlineClientToken:(id) {
	%orig;
	NSLog(@"-(void) setInlineClientToken:(id)");
}

-(void) registerStop:(?) {
	%orig;
	NSLog(@"-(void) registerStop:(?)");
}

-(id) initWithTargetView:(id) inlineClientToken:(id) viewableImpressionBlock:(id) targetVolumeBlock:(?) autoplay:(id) {
	%orig;
	NSLog(@"-(id) initWithTargetView:(id) inlineClientToken:(id) viewableImpressionBlock:(id) targetVolumeBlock:(?) autoplay:(id)");
}

-(id) loggingParams {
	%orig;
	NSLog(@"-(id) loggingParams");
}

-(void) registerProgress:(?) {
	%orig;
	NSLog(@"-(void) registerProgress:(?)");
}

-(void) registerPause:(?) {
	%orig;
	NSLog(@"-(void) registerPause:(?)");
}

-(void) registerResume:(?) {
	%orig;
	NSLog(@"-(void) registerResume:(?)");
}

-(void) registerSkip:(?) {
	%orig;
	NSLog(@"-(void) registerSkip:(?)");
}

-(void) registerComplete:(?) {
	%orig;
	NSLog(@"-(void) registerComplete:(?)");
}

-(void) initializeWithTargetView:(id) {
	%orig;
	NSLog(@"-(void) initializeWithTargetView:(id)");
}

-(void) onMRCRuleCallback:(bool) passed:(bool) statistics:(id) {
	%orig;
	NSLog(@"-(void) onMRCRuleCallback:(bool) passed:(bool) statistics:(id)");
}

-(void) onViewableImpressionRuleCallback:(bool) passed:(bool) statistics:(id) {
	%orig;
	NSLog(@"-(void) onViewableImpressionRuleCallback:(bool) passed:(bool) statistics:(id)");
}

-(id) adQualityManager {
	%orig;
	NSLog(@"-(id) adQualityManager");
}

-(void) registerProgress:(?) forceLog:(bool) {
	%orig;
	NSLog(@"-(void) registerProgress:(?) forceLog:(bool)");
}

-(void) logVideoEventForAction:(long long) {
	%orig;
	NSLog(@"-(void) logVideoEventForAction:(long long)");
}

-(bool) hasLoggedIABImpression {
	%orig;
	NSLog(@"-(bool) hasLoggedIABImpression");
}

-(void) setHasLoggedIABImpression:(bool) {
	%orig;
	NSLog(@"-(void) setHasLoggedIABImpression:(bool)");
}

-(void) setLastProgressBoundaryTime:(double) {
	%orig;
	NSLog(@"-(void) setLastProgressBoundaryTime:(double)");
}

-(void) setLastProgressCurrentTime:(double) {
	%orig;
	NSLog(@"-(void) setLastProgressCurrentTime:(double)");
}

-(id) loggingParamsForAction:(long long) {
	%orig;
	NSLog(@"-(id) loggingParamsForAction:(long long)");
}

-(double) lastProgressBoundaryTime {
	%orig;
	NSLog(@"-(double) lastProgressBoundaryTime");
}

-(void) logVideoEventForAction:(long long) extraData:(id) {
	%orig;
	NSLog(@"-(void) logVideoEventForAction:(long long) extraData:(id)");
}

-(id) loggingParamsForAction:(long long) extraData:(id) {
	%orig;
	NSLog(@"-(id) loggingParamsForAction:(long long) extraData:(id)");
}

-(double) lastProgressCurrentTime {
	%orig;
	NSLog(@"-(double) lastProgressCurrentTime");
}

-(id) viewableImpressionBlock {
	%orig;
	NSLog(@"-(id) viewableImpressionBlock");
}

-(id) targetVolumeBlock {
	%orig;
	NSLog(@"-(id) targetVolumeBlock");
}

-(void) logProgress {
	%orig;
	NSLog(@"-(void) logProgress");
}

-(void) setTargetVolumeBlock:(id) {
	%orig;
	NSLog(@"-(void) setTargetVolumeBlock:(id)");
}

-(void) setViewableImpressionBlock:(id) {
	%orig;
	NSLog(@"-(void) setViewableImpressionBlock:(id)");
}

-(id) initWithTargetView:(id) inlineClientToken:(id) targetVolumeBlock:(id) autoplay:(?) {
	%orig;
	NSLog(@"-(id) initWithTargetView:(id) inlineClientToken:(id) targetVolumeBlock:(id) autoplay:(?)");
}

-(void) registerSeekStart:(?) {
	%orig;
	NSLog(@"-(void) registerSeekStart:(?)");
}

-(void) registerSeekEnd:(?) {
	%orig;
	NSLog(@"-(void) registerSeekEnd:(?)");
}

-(bool) seeking {
	%orig;
	NSLog(@"-(bool) seeking");
}

-(void) setSeeking:(bool) {
	%orig;
	NSLog(@"-(void) setSeeking:(bool)");
}

-(bool) autoplay {
	%orig;
	NSLog(@"-(bool) autoplay");
}

-(void) setAutoplay:(bool) {
	%orig;
	NSLog(@"-(void) setAutoplay:(bool)");
}

-(void) flush:(?) {
	%orig;
	NSLog(@"-(void) flush:(?)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) targetView {
	%orig;
	NSLog(@"-(id) targetView");
}

-(void) setTargetView:(id) {
	%orig;
	NSLog(@"-(void) setTargetView:(id)");
}

%end

%hook FBAdCookieData

+(id) cookieStringForCookies:(id) {
	%orig;
	NSLog(@"+(id) cookieStringForCookies:(id)");
}

+(id) parseCookieData:(id) {
	%orig;
	NSLog(@"+(id) parseCookieData:(id)");
}

-(id) cookie {
	%orig;
	NSLog(@"-(id) cookie");
}

-(id) initWithMetadata:(id) {
	%orig;
	NSLog(@"-(id) initWithMetadata:(id)");
}

-(id) expiration {
	%orig;
	NSLog(@"-(id) expiration");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) value {
	%orig;
	NSLog(@"-(id) value");
}

-(id) key {
	%orig;
	NSLog(@"-(id) key");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(bool) isLocalOnly {
	%orig;
	NSLog(@"-(bool) isLocalOnly");
}

%end

%hook FBVideoAdController

-(id) viewControllerForPresentingModalView {
	%orig;
	NSLog(@"-(id) viewControllerForPresentingModalView");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(id) commandProcessorTouchInformation:(id) {
	%orig;
	NSLog(@"-(id) commandProcessorTouchInformation:(id)");
}

-(void) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) viewControllerDismissed:(id)");
}

-(id) commandHandler {
	%orig;
	NSLog(@"-(id) commandHandler");
}

-(void) setCommandHandler:(id) {
	%orig;
	NSLog(@"-(void) setCommandHandler:(id)");
}

-(void) setDataModel:(id) {
	%orig;
	NSLog(@"-(void) setDataModel:(id)");
}

-(void) loadAdFromDataModel:(id) {
	%orig;
	NSLog(@"-(void) loadAdFromDataModel:(id)");
}

-(void) contentViewDidPause:(id) {
	%orig;
	NSLog(@"-(void) contentViewDidPause:(id)");
}

-(void) contentViewDidResume:(id) {
	%orig;
	NSLog(@"-(void) contentViewDidResume:(id)");
}

-(void) contentViewDidUnload:(id) {
	%orig;
	NSLog(@"-(void) contentViewDidUnload:(id)");
}

-(void) contentViewDidSkip:(id) {
	%orig;
	NSLog(@"-(void) contentViewDidSkip:(id)");
}

-(void) contentViewDidClickthrough:(id) {
	%orig;
	NSLog(@"-(void) contentViewDidClickthrough:(id)");
}

-(void) contentViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) contentViewDidLoad:(id)");
}

-(void) contentViewDidProgress:(id) {
	%orig;
	NSLog(@"-(void) contentViewDidProgress:(id)");
}

-(void) contentViewDidEnd:(id) {
	%orig;
	NSLog(@"-(void) contentViewDidEnd:(id)");
}

-(void) contentView:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) contentView:(id) didFailWithError:(id)");
}

-(bool) isDataModelValid {
	%orig;
	NSLog(@"-(bool) isDataModelValid");
}

-(bool) isNetworkOnline {
	%orig;
	NSLog(@"-(bool) isNetworkOnline");
}

-(void) handleViewableImpression {
	%orig;
	NSLog(@"-(void) handleViewableImpression");
}

-(void) registerClick {
	%orig;
	NSLog(@"-(void) registerClick");
}

-(void) handleLink {
	%orig;
	NSLog(@"-(void) handleLink");
}

-(bool) contentViewEnded {
	%orig;
	NSLog(@"-(bool) contentViewEnded");
}

-(void) setContentViewEnded:(bool) {
	%orig;
	NSLog(@"-(void) setContentViewEnded:(bool)");
}

-(id) dataModel {
	%orig;
	NSLog(@"-(id) dataModel");
}

-(id) logger {
	%orig;
	NSLog(@"-(id) logger");
}

-(void) setLogger:(id) {
	%orig;
	NSLog(@"-(void) setLogger:(id)");
}

-(bool) contentViewLoaded {
	%orig;
	NSLog(@"-(bool) contentViewLoaded");
}

-(void) setContentViewLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setContentViewLoaded:(bool)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithContentView:(id) {
	%orig;
	NSLog(@"-(id) initWithContentView:(id)");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

-(bool) started {
	%orig;
	NSLog(@"-(bool) started");
}

-(void) setStarted:(bool) {
	%orig;
	NSLog(@"-(void) setStarted:(bool)");
}

%end

%hook FNFBufferSizeDecider

-(void) requestTimeLoadedUpdate {
	%orig;
	NSLog(@"-(void) requestTimeLoadedUpdate");
}

-(?) timeAfterSeek {
	%orig;
	NSLog(@"-(?) timeAfterSeek");
}

-(id) initWithConfigs:(?) {
	%orig;
	NSLog(@"-(id) initWithConfigs:(?)");
}

-(void) setRealtimeInfoProvider:(id) {
	%orig;
	NSLog(@"-(void) setRealtimeInfoProvider:(id)");
}

-(void) setBandwidthProvider:(id) {
	%orig;
	NSLog(@"-(void) setBandwidthProvider:(id)");
}

-(?) timeLoaded {
	%orig;
	NSLog(@"-(?) timeLoaded");
}

-(bool) shouldStall {
	%orig;
	NSLog(@"-(bool) shouldStall");
}

-(bool) shouldUnstall {
	%orig;
	NSLog(@"-(bool) shouldUnstall");
}

-(float) timeLoadedInSeconds {
	%orig;
	NSLog(@"-(float) timeLoadedInSeconds");
}

-(bool) updateTimeLoadedWithLoadedVideoTime:(?) videoFullyDownloaded:(bool) loadedAudioTime:(?) audioFullyDownloaded:(bool) {
	%orig;
	NSLog(@"-(bool) updateTimeLoadedWithLoadedVideoTime:(?) videoFullyDownloaded:(bool) loadedAudioTime:(?) audioFullyDownloaded:(bool)");
}

-(bool) updateTimeLoadedWithLoadedVideoTime:(?) videoFullyDownloaded:(bool) {
	%orig;
	NSLog(@"-(bool) updateTimeLoadedWithLoadedVideoTime:(?) videoFullyDownloaded:(bool)");
}

-(float) timeToLoadInSeconds {
	%orig;
	NSLog(@"-(float) timeToLoadInSeconds");
}

-(double) firstFetchSizeInSeconds {
	%orig;
	NSLog(@"-(double) firstFetchSizeInSeconds");
}

-(bool) shouldFetchForTrack:(long long) {
	%orig;
	NSLog(@"-(bool) shouldFetchForTrack:(long long)");
}

-(void) setTimeAfterSeek:(?) {
	%orig;
	NSLog(@"-(void) setTimeAfterSeek:(?)");
}

-(void) resetPlaybackTimeAndTimeLoaded {
	%orig;
	NSLog(@"-(void) resetPlaybackTimeAndTimeLoaded");
}

-(bool) _updateTimeLoaded:(?) fullyLoaded:(bool) {
	%orig;
	NSLog(@"-(bool) _updateTimeLoaded:(?) fullyLoaded:(bool)");
}

-(double) calUnstallBufferBasedOnConnection {
	%orig;
	NSLog(@"-(double) calUnstallBufferBasedOnConnection");
}

-(id) realtimeInfoProvider {
	%orig;
	NSLog(@"-(id) realtimeInfoProvider");
}

-(bool) shouldFetch {
	%orig;
	NSLog(@"-(bool) shouldFetch");
}

-(?) addFetchBufferToTime:(?) {
	%orig;
	NSLog(@"-(?) addFetchBufferToTime:(?)");
}

-(bool) hasLoadedTime:(?) {
	%orig;
	NSLog(@"-(bool) hasLoadedTime:(?)");
}

-(double) currentUnstallBuffer {
	%orig;
	NSLog(@"-(double) currentUnstallBuffer");
}

-(double) currentFetchBuffer {
	%orig;
	NSLog(@"-(double) currentFetchBuffer");
}

-(id) bandwidthProvider {
	%orig;
	NSLog(@"-(id) bandwidthProvider");
}

-(id) loadedTimeRanges {
	%orig;
	NSLog(@"-(id) loadedTimeRanges");
}

-(?) playbackTime {
	%orig;
	NSLog(@"-(?) playbackTime");
}

-(void) setPlaybackTime:(?) {
	%orig;
	NSLog(@"-(void) setPlaybackTime:(?)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook FBAdProviderResponseParser

-(id) parsePlacementDefinitionFromData:(id) {
	%orig;
	NSLog(@"-(id) parsePlacementDefinitionFromData:(id)");
}

-(void) parseResponseFromData:(id) successHandler:(id) errorHandler:(?) {
	%orig;
	NSLog(@"-(void) parseResponseFromData:(id) successHandler:(id) errorHandler:(?)");
}

-(id) onParseSuccess {
	%orig;
	NSLog(@"-(id) onParseSuccess");
}

-(void) setOnParseSuccess:(id) {
	%orig;
	NSLog(@"-(void) setOnParseSuccess:(id)");
}

-(id) onParseError {
	%orig;
	NSLog(@"-(id) onParseError");
}

-(void) setOnParseError:(id) {
	%orig;
	NSLog(@"-(void) setOnParseError:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FNFAdaptiveBitrateSelector

-(id) ifAvailableSelectPrefetchedVideoTrackFromMpd:(id) resourceLoader:(id) {
	%orig;
	NSLog(@"-(id) ifAvailableSelectPrefetchedVideoTrackFromMpd:(id) resourceLoader:(id)");
}

-(id) selectVideoTrackFromList:(id) {
	%orig;
	NSLog(@"-(id) selectVideoTrackFromList:(id)");
}

-(id) initWithSelectorType:(long long) filter:(long long) parameters:(FNFAbrParameters) bandwidthProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithSelectorType:(long long) filter:(long long) parameters:(FNFAbrParameters) bandwidthProvider:(id)");
}

-(id) selectRepresentationIdFromMetadata:(id) availableRepresentations:(id) defaultId:(id) {
	%orig;
	NSLog(@"-(id) selectRepresentationIdFromMetadata:(id) availableRepresentations:(id) defaultId:(id)");
}

-(void) _forTestingOverrideScreenWidth:(double) height:(double) {
	%orig;
	NSLog(@"-(void) _forTestingOverrideScreenWidth:(double) height:(double)");
}

-(void) _forTestingOverrideBandwidthProvider:(id) {
	%orig;
	NSLog(@"-(void) _forTestingOverrideBandwidthProvider:(id)");
}

-(double) lastBandwidthEstimateInBitsPerSecond {
	%orig;
	NSLog(@"-(double) lastBandwidthEstimateInBitsPerSecond");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

%end

%hook FBAdURLSessionTaskContainer

-(id) requestStart {
	%orig;
	NSLog(@"-(id) requestStart");
}

-(void) setRequestStart:(id) {
	%orig;
	NSLog(@"-(void) setRequestStart:(id)");
}

-(void) setTask:(id) {
	%orig;
	NSLog(@"-(void) setTask:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) state {
	%orig;
	NSLog(@"-(long long) state");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) task {
	%orig;
	NSLog(@"-(id) task");
}

%end

%hook FBAdURLSession

+(void) updateSession:(id) {
	%orig;
	NSLog(@"+(void) updateSession:(id)");
}

+(id) sharedSession {
	%orig;
	NSLog(@"+(id) sharedSession");
}

+(id) defaultConfiguration {
	%orig;
	NSLog(@"+(id) defaultConfiguration");
}

-(void) emptyQueue {
	%orig;
	NSLog(@"-(void) emptyQueue");
}

-(void) setUserAgentTimer:(id) {
	%orig;
	NSLog(@"-(void) setUserAgentTimer:(id)");
}

-(bool) isEmptyURL:(id) {
	%orig;
	NSLog(@"-(bool) isEmptyURL:(id)");
}

-(void) enqueueOrExecuteRequest:(id) {
	%orig;
	NSLog(@"-(void) enqueueOrExecuteRequest:(id)");
}

-(id) urlRequestWithURL:(id) HTTPMethod:(id) queryParameters:(id) {
	%orig;
	NSLog(@"-(id) urlRequestWithURL:(id) HTTPMethod:(id) queryParameters:(id)");
}

-(bool) isSSLValidationDisabled {
	%orig;
	NSLog(@"-(bool) isSSLValidationDisabled");
}

-(bool) isSandboxHost:(id) {
	%orig;
	NSLog(@"-(bool) isSandboxHost:(id)");
}

-(id) requestWithURLRequest:(id) responseHandler:(id) {
	%orig;
	NSLog(@"-(id) requestWithURLRequest:(id) responseHandler:(id)");
}

-(id) requestWithURL:(id) HTTPMethod:(id) queryParameters:(id) responseHandler:(id) {
	%orig;
	NSLog(@"-(id) requestWithURL:(id) HTTPMethod:(id) queryParameters:(id) responseHandler:(id)");
}

-(void) setSSLValidationDisabled:(bool) {
	%orig;
	NSLog(@"-(void) setSSLValidationDisabled:(bool)");
}

-(id) userAgentTimer {
	%orig;
	NSLog(@"-(id) userAgentTimer");
}

-(void) URLSession:(id) didReceiveChallenge:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) didReceiveChallenge:(id) completionHandler:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) valid {
	%orig;
	NSLog(@"-(bool) valid");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

-(void) setQueue:(id) {
	%orig;
	NSLog(@"-(void) setQueue:(id)");
}

%end

%hook FBAdResourceLoader

+(id) sharedResourceLoader {
	%orig;
	NSLog(@"+(id) sharedResourceLoader");
}

-(void) fetchDataAtURL:(id) withCacheFileURL:(id) withRetryBlock:(id) withDataBlock:(?) {
	%orig;
	NSLog(@"-(void) fetchDataAtURL:(id) withCacheFileURL:(id) withRetryBlock:(id) withDataBlock:(?)");
}

-(void) fetchImageAtURL:(id) withCacheFileURL:(id) withRetryBlock:(id) withImageBlock:(?) {
	%orig;
	NSLog(@"-(void) fetchImageAtURL:(id) withCacheFileURL:(id) withRetryBlock:(id) withImageBlock:(?)");
}

-(void) fetchVideotAtURL:(id) withCacheFileURL:(id) withRetryBlock:(id) withVideoBlock:(?) {
	%orig;
	NSLog(@"-(void) fetchVideotAtURL:(id) withCacheFileURL:(id) withRetryBlock:(id) withVideoBlock:(?)");
}

-(void) setPendingVideoRequests:(id) {
	%orig;
	NSLog(@"-(void) setPendingVideoRequests:(id)");
}

-(id) pendingVideoRequests {
	%orig;
	NSLog(@"-(id) pendingVideoRequests");
}

-(void) resourceLoader:(id) cancelLoadingRequest:(id) {
	%orig;
	NSLog(@"-(void) resourceLoader:(id) cancelLoadingRequest:(id)");
}

-(void) resourceLoader:(id) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) resourceLoader:(id) loadRequest:(id)");
}

-(bool) resourceLoader:(id) hasPrefetchedDataForUrl:(id) {
	%orig;
	NSLog(@"-(bool) resourceLoader:(id) hasPrefetchedDataForUrl:(id)");
}

-(void) fetchCacheObjectAtURL:(id) withCacheFileURL:(id) withFetchType:(long long) withRetryBlock:(id) withImageBlock:(?) withDataBlock:(id) withVideoBlock:(?) {
	%orig;
	NSLog(@"-(void) fetchCacheObjectAtURL:(id) withCacheFileURL:(id) withFetchType:(long long) withRetryBlock:(id) withImageBlock:(?) withDataBlock:(id) withVideoBlock:(?)");
}

-(id) videoRequestForKey:(id) {
	%orig;
	NSLog(@"-(id) videoRequestForKey:(id)");
}

-(void) removeVideoRequestForKey:(id) {
	%orig;
	NSLog(@"-(void) removeVideoRequestForKey:(id)");
}

-(void) addVideoRequest:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) addVideoRequest:(id) forKey:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBAdPlacementDefinition

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(long long) minViewabilityPercentage {
	%orig;
	NSLog(@"-(long long) minViewabilityPercentage");
}

-(void) setMinViewabilityPercentage:(long long) {
	%orig;
	NSLog(@"-(void) setMinViewabilityPercentage:(long long)");
}

-(double) viewabilityCheckInterval {
	%orig;
	NSLog(@"-(double) viewabilityCheckInterval");
}

-(double) viewabilityCheckInitialDelay {
	%orig;
	NSLog(@"-(double) viewabilityCheckInitialDelay");
}

-(long long) minViewabilityTicks {
	%orig;
	NSLog(@"-(long long) minViewabilityTicks");
}

-(long long) clientMaxRetryCount {
	%orig;
	NSLog(@"-(long long) clientMaxRetryCount");
}

-(FBAdSize) placementSize {
	%orig;
	NSLog(@"-(FBAdSize) placementSize");
}

-(void) setRefreshThreshold:(long long) {
	%orig;
	NSLog(@"-(void) setRefreshThreshold:(long long)");
}

-(void) setClientMaxRetryCount:(long long) {
	%orig;
	NSLog(@"-(void) setClientMaxRetryCount:(long long)");
}

-(void) setMinViewabilityTicks:(long long) {
	%orig;
	NSLog(@"-(void) setMinViewabilityTicks:(long long)");
}

-(void) setViewabilityCheckInitialDelay:(double) {
	%orig;
	NSLog(@"-(void) setViewabilityCheckInitialDelay:(double)");
}

-(void) setViewabilityCheckInterval:(double) {
	%orig;
	NSLog(@"-(void) setViewabilityCheckInterval:(double)");
}

-(void) setPlacementSize:(FBAdSize) {
	%orig;
	NSLog(@"-(void) setPlacementSize:(FBAdSize)");
}

-(void) ingestPlacementData:(id) {
	%orig;
	NSLog(@"-(void) ingestPlacementData:(id)");
}

-(long long) refreshThreshold {
	%orig;
	NSLog(@"-(long long) refreshThreshold");
}

-(void) setCookieData:(id) {
	%orig;
	NSLog(@"-(void) setCookieData:(id)");
}

-(id) cookieData {
	%orig;
	NSLog(@"-(id) cookieData");
}

-(id) initWithPlacementData:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementData:(id)");
}

-(bool) isCacheable {
	%orig;
	NSLog(@"-(bool) isCacheable");
}

-(void) setCacheable:(bool) {
	%orig;
	NSLog(@"-(void) setCacheable:(bool)");
}

-(void) setRefreshInterval:(long long) {
	%orig;
	NSLog(@"-(void) setRefreshInterval:(long long)");
}

-(long long) requestTimeout {
	%orig;
	NSLog(@"-(long long) requestTimeout");
}

-(void) setRequestTimeout:(long long) {
	%orig;
	NSLog(@"-(void) setRequestTimeout:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(long long) refreshInterval {
	%orig;
	NSLog(@"-(long long) refreshInterval");
}

%end

%hook FBAdPerformanceMetrics

+(unsigned int) coreCount {
	%orig;
	NSLog(@"+(unsigned int) coreCount");
}

+(unsigned long long) freeDiskBytes {
	%orig;
	NSLog(@"+(unsigned long long) freeDiskBytes");
}

+(unsigned long long) freeMemoryBytes {
	%orig;
	NSLog(@"+(unsigned long long) freeMemoryBytes");
}

+(unsigned long long) totalMemoryBytes {
	%orig;
	NSLog(@"+(unsigned long long) totalMemoryBytes");
}

+(?) freeAndTotalDiskBytes {
	%orig;
	NSLog(@"+(?) freeAndTotalDiskBytes");
}

+(unsigned long long) residentMemoryBytes {
	%orig;
	NSLog(@"+(unsigned long long) residentMemoryBytes");
}

+(unsigned long long) virtualMemoryBytes {
	%orig;
	NSLog(@"+(unsigned long long) virtualMemoryBytes");
}

+(FBAdDeviceBatteryInfo) batteryInfo {
	%orig;
	NSLog(@"+(FBAdDeviceBatteryInfo) batteryInfo");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

%end

%hook FBAdProvider

-(void) loadAdWithEnvironmentData:(id) {
	%orig;
	NSLog(@"-(void) loadAdWithEnvironmentData:(id)");
}

-(void) dispatchError:(id) {
	%orig;
	NSLog(@"-(void) dispatchError:(id)");
}

-(void) setParsingQueue:(id) {
	%orig;
	NSLog(@"-(void) setParsingQueue:(id)");
}

-(void) setAdParser:(id) {
	%orig;
	NSLog(@"-(void) setAdParser:(id)");
}

-(void) setEnvironmentData:(id) {
	%orig;
	NSLog(@"-(void) setEnvironmentData:(id)");
}

-(bool) maybeHandleBidPayload:(id) {
	%orig;
	NSLog(@"-(bool) maybeHandleBidPayload:(id)");
}

-(id) environmentData {
	%orig;
	NSLog(@"-(id) environmentData");
}

-(void) makeFirstAdRequestWithParameters:(id) {
	%orig;
	NSLog(@"-(void) makeFirstAdRequestWithParameters:(id)");
}

-(id) parsingQueue {
	%orig;
	NSLog(@"-(id) parsingQueue");
}

-(void) setAdSourceRequestQueue:(id) {
	%orig;
	NSLog(@"-(void) setAdSourceRequestQueue:(id)");
}

-(void) setAdResponse:(id) {
	%orig;
	NSLog(@"-(void) setAdResponse:(id)");
}

-(void) handleAdResponse:(id) data:(id) error:(id) canReturnSources:(bool) deliveryUrl:(id) {
	%orig;
	NSLog(@"-(void) handleAdResponse:(id) data:(id) error:(id) canReturnSources:(bool) deliveryUrl:(id)");
}

-(void) parseResponseFromData:(id) canReturnSources:(bool) {
	%orig;
	NSLog(@"-(void) parseResponseFromData:(id) canReturnSources:(bool)");
}

-(id) adParser {
	%orig;
	NSLog(@"-(id) adParser");
}

-(id) adResponse {
	%orig;
	NSLog(@"-(id) adResponse");
}

-(id) adSourceRequestQueue {
	%orig;
	NSLog(@"-(id) adSourceRequestQueue");
}

-(long long) adSourceQueries {
	%orig;
	NSLog(@"-(long long) adSourceQueries");
}

-(void) setAdSourceQueries:(long long) {
	%orig;
	NSLog(@"-(void) setAdSourceQueries:(long long)");
}

-(long long) adSourceCompletedQueries {
	%orig;
	NSLog(@"-(long long) adSourceCompletedQueries");
}

-(void) setAdSourceCompletedQueries:(long long) {
	%orig;
	NSLog(@"-(void) setAdSourceCompletedQueries:(long long)");
}

-(id) requestQueue {
	%orig;
	NSLog(@"-(id) requestQueue");
}

-(void) setRequestQueue:(id) {
	%orig;
	NSLog(@"-(void) setRequestQueue:(id)");
}

-(void) destroy {
	%orig;
	NSLog(@"-(void) destroy");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setActive:(bool) {
	%orig;
	NSLog(@"-(void) setActive:(bool)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) active {
	%orig;
	NSLog(@"-(bool) active");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

%end

%hook FBAdProviderWithResponse

-(id) initWithResponse:(id) forAdAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) initWithResponse:(id) forAdAtIndex:(long long)");
}

-(void) loadAdWithEnvironmentData:(id) {
	%orig;
	NSLog(@"-(void) loadAdWithEnvironmentData:(id)");
}

-(void) setResponse:(id) {
	%orig;
	NSLog(@"-(void) setResponse:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

%end

%hook FBAdConfigManager

+(id) sharedManagerWithAsyncLoad:(bool) {
	%orig;
	NSLog(@"+(id) sharedManagerWithAsyncLoad:(bool)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(bool) isInAppAppStoreDisabled {
	%orig;
	NSLog(@"-(bool) isInAppAppStoreDisabled");
}

-(id) rvAutoRotate {
	%orig;
	NSLog(@"-(id) rvAutoRotate");
}

-(double) adClickabilityThresholdInterval {
	%orig;
	NSLog(@"-(double) adClickabilityThresholdInterval");
}

-(bool) useCachedImageContextForSoftwareRenderer {
	%orig;
	NSLog(@"-(bool) useCachedImageContextForSoftwareRenderer");
}

-(id) loadConfigurationFromDictionary:(id) {
	%orig;
	NSLog(@"-(id) loadConfigurationFromDictionary:(id)");
}

-(id) saveConfiguration {
	%orig;
	NSLog(@"-(id) saveConfiguration");
}

-(id) loadConfigurationFromJSONString:(id) {
	%orig;
	NSLog(@"-(id) loadConfigurationFromJSONString:(id)");
}

-(double) unifiedLoggingImmediateDelay {
	%orig;
	NSLog(@"-(double) unifiedLoggingImmediateDelay");
}

-(long long) unifiedLoggingEventLimit {
	%orig;
	NSLog(@"-(long long) unifiedLoggingEventLimit");
}

-(bool) isVisibleAreaCheckEnabled {
	%orig;
	NSLog(@"-(bool) isVisibleAreaCheckEnabled");
}

-(long long) visibleAreaPercentage {
	%orig;
	NSLog(@"-(long long) visibleAreaPercentage");
}

-(id) initWithAsyncLoad:(bool) {
	%orig;
	NSLog(@"-(id) initWithAsyncLoad:(bool)");
}

-(id) loadConfigurationFromStorage:(bool) {
	%orig;
	NSLog(@"-(id) loadConfigurationFromStorage:(bool)");
}

-(id) configurationFileURL {
	%orig;
	NSLog(@"-(id) configurationFileURL");
}

-(id) loadConfigurationFromPropertyList:(id) {
	%orig;
	NSLog(@"-(id) loadConfigurationFromPropertyList:(id)");
}

-(id) loadConfigurationFromStorage {
	%orig;
	NSLog(@"-(id) loadConfigurationFromStorage");
}

-(id) deleteConfiguration {
	%orig;
	NSLog(@"-(id) deleteConfiguration");
}

-(bool) isFNFEnabled {
	%orig;
	NSLog(@"-(bool) isFNFEnabled");
}

-(bool) isFNFOffThreadRenderingEnabled {
	%orig;
	NSLog(@"-(bool) isFNFOffThreadRenderingEnabled");
}

-(bool) isMetalImageRendererEnabled {
	%orig;
	NSLog(@"-(bool) isMetalImageRendererEnabled");
}

-(bool) isRVPlayPauseButtonEnabled {
	%orig;
	NSLog(@"-(bool) isRVPlayPauseButtonEnabled");
}

-(bool) isRVMetadataEnabled {
	%orig;
	NSLog(@"-(bool) isRVMetadataEnabled");
}

-(bool) useCachedImageContextForMetalRenderer {
	%orig;
	NSLog(@"-(bool) useCachedImageContextForMetalRenderer");
}

-(bool) useCachedImageContextForOpenGLRenderer {
	%orig;
	NSLog(@"-(bool) useCachedImageContextForOpenGLRenderer");
}

-(double) adTapMargin {
	%orig;
	NSLog(@"-(double) adTapMargin");
}

-(long long) adTapMarginPercentage {
	%orig;
	NSLog(@"-(long long) adTapMarginPercentage");
}

-(bool) isAdClickabilityRestrictedUntilImpression {
	%orig;
	NSLog(@"-(bool) isAdClickabilityRestrictedUntilImpression");
}

-(double) minimumElapsedTimeAfterImpression {
	%orig;
	NSLog(@"-(double) minimumElapsedTimeAfterImpression");
}

-(id) saveConfiguration:(bool) {
	%orig;
	NSLog(@"-(id) saveConfiguration:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) objectForKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(id) objectForKeyedSubscript:(id)");
}

-(void) setObject:(id) forKeyedSubscript:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKeyedSubscript:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) configuration {
	%orig;
	NSLog(@"-(id) configuration");
}

-(void) setConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setConfiguration:(id)");
}

%end

%hook FBAdTimer

+(id) scheduledTimerWithTimeInterval:(double) repeats:(bool) queue:(id) block:(id) {
	%orig;
	NSLog(@"+(id) scheduledTimerWithTimeInterval:(double) repeats:(bool) queue:(id) block:(id)");
}

+(id) scheduledTimerWithTimeInterval:(double) repeatsUntilCondition:(id) queue:(?) block:(id) {
	%orig;
	NSLog(@"+(id) scheduledTimerWithTimeInterval:(double) repeatsUntilCondition:(id) queue:(?) block:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) scheduledTimerWithTimeInterval:(double) repeats:(bool) block:(id) {
	%orig;
	NSLog(@"+(id) scheduledTimerWithTimeInterval:(double) repeats:(bool) block:(id)");
}

-(id) scheduledTimerWithTimeInterval:(double) repeatsUntilCondition:(id) queue:(?) block:(id) {
	%orig;
	NSLog(@"-(id) scheduledTimerWithTimeInterval:(double) repeatsUntilCondition:(id) queue:(?) block:(id)");
}

-(id) innerBlock {
	%orig;
	NSLog(@"-(id) innerBlock");
}

-(void) setInnerBlock:(id) {
	%orig;
	NSLog(@"-(void) setInnerBlock:(id)");
}

-(void) setRepeats:(bool) {
	%orig;
	NSLog(@"-(void) setRepeats:(bool)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) userInfo {
	%orig;
	NSLog(@"-(id) userInfo");
}

-(void) setUserInfo:(id) {
	%orig;
	NSLog(@"-(void) setUserInfo:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) invalidate {
	%orig;
	NSLog(@"-(void) invalidate");
}

-(id) block {
	%orig;
	NSLog(@"-(id) block");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

-(void) setTimer:(id) {
	%orig;
	NSLog(@"-(void) setTimer:(id)");
}

-(id) timer {
	%orig;
	NSLog(@"-(id) timer");
}

-(double) timeInterval {
	%orig;
	NSLog(@"-(double) timeInterval");
}

-(bool) repeats {
	%orig;
	NSLog(@"-(bool) repeats");
}

-(void) fire {
	%orig;
	NSLog(@"-(void) fire");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

-(void) setTimeInterval:(double) {
	%orig;
	NSLog(@"-(void) setTimeInterval:(double)");
}

-(id) condition {
	%orig;
	NSLog(@"-(id) condition");
}

-(void) setCondition:(id) {
	%orig;
	NSLog(@"-(void) setCondition:(id)");
}

-(void) setBlock:(id) {
	%orig;
	NSLog(@"-(void) setBlock:(id)");
}

-(void) setQueue:(id) {
	%orig;
	NSLog(@"-(void) setQueue:(id)");
}

%end

%hook FBAdNotificationCenter

+(id) notificationCenterForObject:(id) {
	%orig;
	NSLog(@"+(id) notificationCenterForObject:(id)");
}

+(void) removeAllObserversForObject:(id) {
	%orig;
	NSLog(@"+(void) removeAllObserversForObject:(id)");
}

+(void) setNotificationCenter:(id) forObject:(id) {
	%orig;
	NSLog(@"+(void) setNotificationCenter:(id) forObject:(id)");
}

+(id) notificationCenterForObject:(id) update:(bool) {
	%orig;
	NSLog(@"+(id) notificationCenterForObject:(id) update:(bool)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) addNotificationWithName:(id) object:(id) block:(id) {
	%orig;
	NSLog(@"-(void) addNotificationWithName:(id) object:(id) block:(id)");
}

-(void) addNotificationWithName:(id) block:(id) {
	%orig;
	NSLog(@"-(void) addNotificationWithName:(id) block:(id)");
}

-(void) addNotificationWithName:(id) object:(id) queue:(id) block:(id) {
	%orig;
	NSLog(@"-(void) addNotificationWithName:(id) object:(id) queue:(id) block:(id)");
}

-(id) notificationCenter {
	%orig;
	NSLog(@"-(id) notificationCenter");
}

-(void) removeAllObservers {
	%orig;
	NSLog(@"-(void) removeAllObservers");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) object {
	%orig;
	NSLog(@"-(id) object");
}

-(void) setObject:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id)");
}

-(id) notifications {
	%orig;
	NSLog(@"-(id) notifications");
}

-(void) setNotifications:(id) {
	%orig;
	NSLog(@"-(void) setNotifications:(id)");
}

%end

%hook FBAssetLinearReader

-(id) initWithDataDistributor:(id) {
	%orig;
	NSLog(@"-(id) initWithDataDistributor:(id)");
}

-(const char*) bytesAtHead:(long long) {
	%orig;
	NSLog(@"-(const char*) bytesAtHead:(long long)");
}

-(void) moveHead:(unsigned long long) {
	%orig;
	NSLog(@"-(void) moveHead:(unsigned long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) offset {
	%orig;
	NSLog(@"-(unsigned long long) offset");
}

-(void) setOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setOffset:(unsigned long long)");
}

%end

%hook FNFRealClock

-(bool) addTimeObserver:(id) {
	%orig;
	NSLog(@"-(bool) addTimeObserver:(id)");
}

-(void) _dispatchSourceFiredForTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) _dispatchSourceFiredForTimeObserver:(id)");
}

-(void) _updateNextFireTimeForObserver:(id) {
	%orig;
	NSLog(@"-(void) _updateNextFireTimeForObserver:(id)");
}

-(void) removeAllTimeObserversInternal {
	%orig;
	NSLog(@"-(void) removeAllTimeObserversInternal");
}

-(void) removeTimeObserverInternal:(id) {
	%orig;
	NSLog(@"-(void) removeTimeObserverInternal:(id)");
}

-(id) createTimeObserverWithInterval:(?) block:(id) fireOnceAtExactTime:(?) followMasterClock:(bool) {
	%orig;
	NSLog(@"-(id) createTimeObserverWithInterval:(?) block:(id) fireOnceAtExactTime:(?) followMasterClock:(bool)");
}

-(void) resumeTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) resumeTimeObserver:(id)");
}

-(void) suspendTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) suspendTimeObserver:(id)");
}

-(void) removeAllTimeObservers {
	%orig;
	NSLog(@"-(void) removeAllTimeObservers");
}

-(void) syncWithLayer:(id) {
	%orig;
	NSLog(@"-(void) syncWithLayer:(id)");
}

-(void) removeTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeTimeObserver:(id)");
}

-(void) set:(?) {
	%orig;
	NSLog(@"-(void) set:(?)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) observers {
	%orig;
	NSLog(@"-(id) observers");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook FNFPlayerTimeObserver

-(bool) fireOnceAtExactTime {
	%orig;
	NSLog(@"-(bool) fireOnceAtExactTime");
}

-(void) setFireOnceAtExactTime:(bool) {
	%orig;
	NSLog(@"-(void) setFireOnceAtExactTime:(bool)");
}

-(bool) followMasterClock {
	%orig;
	NSLog(@"-(bool) followMasterClock");
}

-(void) setFollowMasterClock:(bool) {
	%orig;
	NSLog(@"-(void) setFollowMasterClock:(bool)");
}

-(bool) suspended {
	%orig;
	NSLog(@"-(bool) suspended");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) block {
	%orig;
	NSLog(@"-(id) block");
}

-(void) setInterval:(?) {
	%orig;
	NSLog(@"-(void) setInterval:(?)");
}

-(?) interval {
	%orig;
	NSLog(@"-(?) interval");
}

-(void) setTimer:(id) {
	%orig;
	NSLog(@"-(void) setTimer:(id)");
}

-(id) timer {
	%orig;
	NSLog(@"-(id) timer");
}

-(void) setSuspended:(bool) {
	%orig;
	NSLog(@"-(void) setSuspended:(bool)");
}

-(void) setBlock:(id) {
	%orig;
	NSLog(@"-(void) setBlock:(id)");
}

%end

%hook FNFDashPlaylistData

-(int) fetchIndexForTrack:(long long) {
	%orig;
	NSLog(@"-(int) fetchIndexForTrack:(long long)");
}

-(bool) isFragmented {
	%orig;
	NSLog(@"-(bool) isFragmented");
}

-(void) setVideoFetchIndex:(int) {
	%orig;
	NSLog(@"-(void) setVideoFetchIndex:(int)");
}

-(void) setAudioFetchIndex:(int) {
	%orig;
	NSLog(@"-(void) setAudioFetchIndex:(int)");
}

-(unsigned int) bitrateForRepresentation:(id) track:(long long) {
	%orig;
	NSLog(@"-(unsigned int) bitrateForRepresentation:(id) track:(long long)");
}

-(id) encodedDataInitForRepresentation:(id) track:(long long) {
	%orig;
	NSLog(@"-(id) encodedDataInitForRepresentation:(id) track:(long long)");
}

-(id) segmentedInitUrlForRepresentation:(id) track:(long long) {
	%orig;
	NSLog(@"-(id) segmentedInitUrlForRepresentation:(id) track:(long long)");
}

-(id) fragmentedUrlForRepresentation:(id) track:(long long) {
	%orig;
	NSLog(@"-(id) fragmentedUrlForRepresentation:(id) track:(long long)");
}

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(id) mpdAccessibilityDescription {
	%orig;
	NSLog(@"-(id) mpdAccessibilityDescription");
}

-(void) setShouldUpdateContinuously:(bool) {
	%orig;
	NSLog(@"-(void) setShouldUpdateContinuously:(bool)");
}

-(void) setIndexToForceFetchTo:(int) {
	%orig;
	NSLog(@"-(void) setIndexToForceFetchTo:(int)");
}

-(bool) isParsed {
	%orig;
	NSLog(@"-(bool) isParsed");
}

-(int) audioFetchIndex {
	%orig;
	NSLog(@"-(int) audioFetchIndex");
}

-(int) videoFetchIndex {
	%orig;
	NSLog(@"-(int) videoFetchIndex");
}

-(id) timelineEntries {
	%orig;
	NSLog(@"-(id) timelineEntries");
}

-(bool) containsAudioTrack {
	%orig;
	NSLog(@"-(bool) containsAudioTrack");
}

-(bool) shouldUpdateContinuously {
	%orig;
	NSLog(@"-(bool) shouldUpdateContinuously");
}

-(bool) expectsFutureUpdates {
	%orig;
	NSLog(@"-(bool) expectsFutureUpdates");
}

-(id) audioRepresentationId {
	%orig;
	NSLog(@"-(id) audioRepresentationId");
}

-(void) setIsParsed:(bool) {
	%orig;
	NSLog(@"-(void) setIsParsed:(bool)");
}

-(void) setPlaylistDuration:(?) {
	%orig;
	NSLog(@"-(void) setPlaylistDuration:(?)");
}

-(void) setMpdAccessibilityDescription:(id) {
	%orig;
	NSLog(@"-(void) setMpdAccessibilityDescription:(id)");
}

-(void) addRepresentationProperties:(id) track:(long long) {
	%orig;
	NSLog(@"-(void) addRepresentationProperties:(id) track:(long long)");
}

-(void) addFragmentedUrl:(id) representation:(id) track:(long long) {
	%orig;
	NSLog(@"-(void) addFragmentedUrl:(id) representation:(id) track:(long long)");
}

-(void) addFragmentedInitializationLength:(unsigned long long) representation:(id) track:(long long) {
	%orig;
	NSLog(@"-(void) addFragmentedInitializationLength:(unsigned long long) representation:(id) track:(long long)");
}

-(void) setExpectsFutureUpdates:(bool) {
	%orig;
	NSLog(@"-(void) setExpectsFutureUpdates:(bool)");
}

-(void) addEncodedInitData:(id) representation:(id) track:(long long) {
	%orig;
	NSLog(@"-(void) addEncodedInitData:(id) representation:(id) track:(long long)");
}

-(void) addSegmentedInitUrl:(id) representation:(id) track:(long long) {
	%orig;
	NSLog(@"-(void) addSegmentedInitUrl:(id) representation:(id) track:(long long)");
}

-(int) indexToForceFetchTo {
	%orig;
	NSLog(@"-(int) indexToForceFetchTo");
}

-(void) setUsedPrefetchQuality:(bool) {
	%orig;
	NSLog(@"-(void) setUsedPrefetchQuality:(bool)");
}

-(id) availableQualities {
	%orig;
	NSLog(@"-(id) availableQualities");
}

-(void) setAvailableQualitiesCount:(unsigned int) {
	%orig;
	NSLog(@"-(void) setAvailableQualitiesCount:(unsigned int)");
}

-(void) setAvailableQualities:(id) {
	%orig;
	NSLog(@"-(void) setAvailableQualities:(id)");
}

-(id) qualityLabel {
	%orig;
	NSLog(@"-(id) qualityLabel");
}

-(void) setQualityLabel:(id) {
	%orig;
	NSLog(@"-(void) setQualityLabel:(id)");
}

-(void) setRepresentationId:(id) {
	%orig;
	NSLog(@"-(void) setRepresentationId:(id)");
}

-(void) setContainsAudioTrack:(bool) {
	%orig;
	NSLog(@"-(void) setContainsAudioTrack:(bool)");
}

-(id) audioChannelConfiguration {
	%orig;
	NSLog(@"-(id) audioChannelConfiguration");
}

-(void) setAudioChannelConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setAudioChannelConfiguration:(id)");
}

-(void) setAudioRepresentationId:(id) {
	%orig;
	NSLog(@"-(void) setAudioRepresentationId:(id)");
}

-(bool) usedPrefetchQuality {
	%orig;
	NSLog(@"-(bool) usedPrefetchQuality");
}

-(unsigned int) availableQualitiesCount {
	%orig;
	NSLog(@"-(unsigned int) availableQualitiesCount");
}

-(bool) isFragmentedUrlOnFbCdn {
	%orig;
	NSLog(@"-(bool) isFragmentedUrlOnFbCdn");
}

-(unsigned long long) fragmentedInitializationLengthForRepresentation:(id) track:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) fragmentedInitializationLengthForRepresentation:(id) track:(long long)");
}

-(?) playlistDuration {
	%orig;
	NSLog(@"-(?) playlistDuration");
}

-(void) setTimelineEntries:(id) {
	%orig;
	NSLog(@"-(void) setTimelineEntries:(id)");
}

-(bool) isLive {
	%orig;
	NSLog(@"-(bool) isLive");
}

-(bool) isSegmented {
	%orig;
	NSLog(@"-(bool) isSegmented");
}

-(void) setProjection:(id) {
	%orig;
	NSLog(@"-(void) setProjection:(id)");
}

-(id) projection {
	%orig;
	NSLog(@"-(id) projection");
}

-(long long) videoType {
	%orig;
	NSLog(@"-(long long) videoType");
}

-(void) setVideoType:(long long) {
	%orig;
	NSLog(@"-(void) setVideoType:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) properties {
	%orig;
	NSLog(@"-(id) properties");
}

%end

%hook FNFDashTimelineEntry

-(void) addUrl:(id) representation:(id) {
	%orig;
	NSLog(@"-(void) addUrl:(id) representation:(id)");
}

-(id) selectedRepresentationId {
	%orig;
	NSLog(@"-(id) selectedRepresentationId");
}

-(id) availableRepresentations {
	%orig;
	NSLog(@"-(id) availableRepresentations");
}

-(id) getUrlForRepresentation:(id) {
	%orig;
	NSLog(@"-(id) getUrlForRepresentation:(id)");
}

-(void) selectRepresentation:(id) {
	%orig;
	NSLog(@"-(void) selectRepresentation:(id)");
}

-(id) initWithRange:(?) {
	%orig;
	NSLog(@"-(id) initWithRange:(?)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(?) range {
	%orig;
	NSLog(@"-(?) range");
}

-(id) defaultRepresentation {
	%orig;
	NSLog(@"-(id) defaultRepresentation");
}

%end

%hook FNFMp4FileBasedReader

-(const char*) bytesAtHead:(long long) {
	%orig;
	NSLog(@"-(const char*) bytesAtHead:(long long)");
}

-(void) moveHead:(unsigned long long) {
	%orig;
	NSLog(@"-(void) moveHead:(unsigned long long)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFilePath:(id) {
	%orig;
	NSLog(@"-(id) initWithFilePath:(id)");
}

%end

%hook FBAdKVOController

+(id) controllerWithObserver:(id) {
	%orig;
	NSLog(@"+(id) controllerWithObserver:(id)");
}

-(void) observe:(id) keyPath:(id) options:(unsigned long long) block:(id) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPath:(id) options:(unsigned long long) block:(id)");
}

-(void) unobserveAll {
	%orig;
	NSLog(@"-(void) unobserveAll");
}

-(void) observe:(id) keyPath:(id) options:(unsigned long long) action:(SEL) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPath:(id) options:(unsigned long long) action:(SEL)");
}

-(id) initWithObserver:(id) retainObserved:(bool) {
	%orig;
	NSLog(@"-(id) initWithObserver:(id) retainObserved:(bool)");
}

-(void) _observe:(id) info:(id) {
	%orig;
	NSLog(@"-(void) _observe:(id) info:(id)");
}

-(void) observe:(id) keyPath:(id) options:(unsigned long long) context:(void*) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPath:(id) options:(unsigned long long) context:(void*)");
}

-(void) _unobserve:(id) info:(id) {
	%orig;
	NSLog(@"-(void) _unobserve:(id) info:(id)");
}

-(void) _unobserve:(id) {
	%orig;
	NSLog(@"-(void) _unobserve:(id)");
}

-(void) _unobserveAll {
	%orig;
	NSLog(@"-(void) _unobserveAll");
}

-(void) observe:(id) keyPaths:(id) options:(unsigned long long) block:(id) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPaths:(id) options:(unsigned long long) block:(id)");
}

-(void) observe:(id) keyPaths:(id) options:(unsigned long long) action:(SEL) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPaths:(id) options:(unsigned long long) action:(SEL)");
}

-(void) observe:(id) keyPaths:(id) options:(unsigned long long) context:(void*) {
	%orig;
	NSLog(@"-(void) observe:(id) keyPaths:(id) options:(unsigned long long) context:(void*)");
}

-(void) unobserve:(id) keyPath:(id) {
	%orig;
	NSLog(@"-(void) unobserve:(id) keyPath:(id)");
}

-(void) unobserve:(id) {
	%orig;
	NSLog(@"-(void) unobserve:(id)");
}

-(id) initWithObserver:(id) {
	%orig;
	NSLog(@"-(id) initWithObserver:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(id) observer {
	%orig;
	NSLog(@"-(id) observer");
}

%end

%hook _FBAdKVOSharedController

+(id) sharedController {
	%orig;
	NSLog(@"+(id) sharedController");
}

-(void) observe:(id) info:(id) {
	%orig;
	NSLog(@"-(void) observe:(id) info:(id)");
}

-(void) unobserve:(id) info:(id) {
	%orig;
	NSLog(@"-(void) unobserve:(id) info:(id)");
}

-(void) unobserve:(id) infos:(id) {
	%orig;
	NSLog(@"-(void) unobserve:(id) infos:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

%end

%hook _FBAdKVOInfo

-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) block:(id) action:(?) context:(SEL) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) block:(id) action:(?) context:(SEL)");
}

-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) block:(id) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) block:(id)");
}

-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) action:(SEL) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) action:(SEL)");
}

-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) context:(void*) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id) options:(unsigned long long) context:(void*)");
}

-(id) initWithController:(id) keyPath:(id) {
	%orig;
	NSLog(@"-(id) initWithController:(id) keyPath:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) hash {
	%orig;
	NSLog(@"-(unsigned long long) hash");
}

-(id) debugDescription {
	%orig;
	NSLog(@"-(id) debugDescription");
}

%end

%hook FBAdQualityStatistics

+(id) statisticsWithViewableThreshold:(float) audibleThreshold:(float) {
	%orig;
	NSLog(@"+(id) statisticsWithViewableThreshold:(float) audibleThreshold:(float)");
}

+(id) statisticsWithViewableThreshold:(float) {
	%orig;
	NSLog(@"+(id) statisticsWithViewableThreshold:(float)");
}

-(void) registerAudibilityProgress:(double) volume:(float) {
	%orig;
	NSLog(@"-(void) registerAudibilityProgress:(double) volume:(float)");
}

-(void) registerViewabilityProgress:(double) viewableRatio:(float) {
	%orig;
	NSLog(@"-(void) registerViewabilityProgress:(double) viewableRatio:(float)");
}

-(id) initWithViewableThreshold:(float) audibleThreshold:(float) {
	%orig;
	NSLog(@"-(id) initWithViewableThreshold:(float) audibleThreshold:(float)");
}

-(id) audibilityStatistics {
	%orig;
	NSLog(@"-(id) audibilityStatistics");
}

-(id) viewabilityStatistics {
	%orig;
	NSLog(@"-(id) viewabilityStatistics");
}

-(id) initWithViewableThreshold:(float) {
	%orig;
	NSLog(@"-(id) initWithViewableThreshold:(float)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

%end

%hook FBAdConcurrentQueue

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) popAll:(id) {
	%orig;
	NSLog(@"-(void) popAll:(id)");
}

-(id) storage {
	%orig;
	NSLog(@"-(id) storage");
}

-(void) setStorage:(id) {
	%orig;
	NSLog(@"-(void) setStorage:(id)");
}

-(void) pop:(id) {
	%orig;
	NSLog(@"-(void) pop:(id)");
}

-(void) pushObject:(id) {
	%orig;
	NSLog(@"-(void) pushObject:(id)");
}

-(void) peek:(id) {
	%orig;
	NSLog(@"-(void) peek:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

-(void) setQueue:(id) {
	%orig;
	NSLog(@"-(void) setQueue:(id)");
}

%end

%hook FBAdViewabilityValidator

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) stopObservingNotifications {
	%orig;
	NSLog(@"-(void) stopObservingNotifications");
}

-(long long) minViewabilityPercentage {
	%orig;
	NSLog(@"-(long long) minViewabilityPercentage");
}

-(void) setMinViewabilityPercentage:(long long) {
	%orig;
	NSLog(@"-(void) setMinViewabilityPercentage:(long long)");
}

-(id) viewabilityHistoryJSON {
	%orig;
	NSLog(@"-(id) viewabilityHistoryJSON");
}

-(double) lastViewabilityPercentage {
	%orig;
	NSLog(@"-(double) lastViewabilityPercentage");
}

-(void) scheduleViewabilityCheck {
	%orig;
	NSLog(@"-(void) scheduleViewabilityCheck");
}

-(id) initWithView:(id) withInterval:(double) withInitialDelay:(double) withMinViewability:(long long) withTickDuration:(long long) shouldObserveNotifications:(bool) {
	%orig;
	NSLog(@"-(id) initWithView:(id) withInterval:(double) withInitialDelay:(double) withMinViewability:(long long) withTickDuration:(long long) shouldObserveNotifications:(bool)");
}

-(void) stopViewabilityCheck {
	%orig;
	NSLog(@"-(void) stopViewabilityCheck");
}

-(void) setCurrentTickCount:(long long) {
	%orig;
	NSLog(@"-(void) setCurrentTickCount:(long long)");
}

-(id) logSuccess:(bool) withStatus:(long long) withViewabilityPercentage:(double) {
	%orig;
	NSLog(@"-(id) logSuccess:(bool) withStatus:(long long) withViewabilityPercentage:(double)");
}

-(long long) currentTickCount {
	%orig;
	NSLog(@"-(long long) currentTickCount");
}

-(long long) tickDuration {
	%orig;
	NSLog(@"-(long long) tickDuration");
}

-(void) setLastViewabilityPercentage:(double) {
	%orig;
	NSLog(@"-(void) setLastViewabilityPercentage:(double)");
}

-(bool) isviewOnScreenNotificationFinished {
	%orig;
	NSLog(@"-(bool) isviewOnScreenNotificationFinished");
}

-(void) updateCurrentStatus:(long long) {
	%orig;
	NSLog(@"-(void) updateCurrentStatus:(long long)");
}

-(void) isViewOnScreenWithBlock:(id) {
	%orig;
	NSLog(@"-(void) isViewOnScreenWithBlock:(id)");
}

-(void) addHistoryEvent:(long long) {
	%orig;
	NSLog(@"-(void) addHistoryEvent:(long long)");
}

-(void) sendViewNotification:(long long) {
	%orig;
	NSLog(@"-(void) sendViewNotification:(long long)");
}

-(void) setViewOnScreenNotificationFinished:(bool) {
	%orig;
	NSLog(@"-(void) setViewOnScreenNotificationFinished:(bool)");
}

-(double) checkInterval {
	%orig;
	NSLog(@"-(double) checkInterval");
}

-(void) scheduleViewabilityCheckWithInterval:(double) withInitialDelay:(double) {
	%orig;
	NSLog(@"-(void) scheduleViewabilityCheckWithInterval:(double) withInitialDelay:(double)");
}

-(void) checkViewability {
	%orig;
	NSLog(@"-(void) checkViewability");
}

-(void) setCheckViewabilityTimer:(id) {
	%orig;
	NSLog(@"-(void) setCheckViewabilityTimer:(id)");
}

-(id) checkViewabilityTimer {
	%orig;
	NSLog(@"-(id) checkViewabilityTimer");
}

-(bool) isObservingNotifications {
	%orig;
	NSLog(@"-(bool) isObservingNotifications");
}

-(void) onApplicationBackgrounded {
	%orig;
	NSLog(@"-(void) onApplicationBackgrounded");
}

-(void) onApplicationForegrounded {
	%orig;
	NSLog(@"-(void) onApplicationForegrounded");
}

-(void) setObservingNotifications:(bool) {
	%orig;
	NSLog(@"-(void) setObservingNotifications:(bool)");
}

-(id) initWithView:(id) withMinViewability:(long long) shouldObserveNotifications:(bool) {
	%orig;
	NSLog(@"-(id) initWithView:(id) withMinViewability:(long long) shouldObserveNotifications:(bool)");
}

-(id) viewabilityHistory {
	%orig;
	NSLog(@"-(id) viewabilityHistory");
}

-(void) setTickDuration:(long long) {
	%orig;
	NSLog(@"-(void) setTickDuration:(long long)");
}

-(void) setCheckInterval:(double) {
	%orig;
	NSLog(@"-(void) setCheckInterval:(double)");
}

-(void) setViewabilityHistory:(id) {
	%orig;
	NSLog(@"-(void) setViewabilityHistory:(id)");
}

-(void) startObservingNotifications {
	%orig;
	NSLog(@"-(void) startObservingNotifications");
}

-(void) resumeTimer {
	%orig;
	NSLog(@"-(void) resumeTimer");
}

-(void) setCurrentStatus:(long long) {
	%orig;
	NSLog(@"-(void) setCurrentStatus:(long long)");
}

-(long long) currentStatus {
	%orig;
	NSLog(@"-(long long) currentStatus");
}

-(double) initialDelay {
	%orig;
	NSLog(@"-(double) initialDelay");
}

-(void) setInitialDelay:(double) {
	%orig;
	NSLog(@"-(void) setInitialDelay:(double)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(void) invalidateTimer {
	%orig;
	NSLog(@"-(void) invalidateTimer");
}

-(id) .cxx_construct {
	%orig;
	NSLog(@"-(id) .cxx_construct");
}

%end

%hook FNFAudioQueue

+(AQBufferParameters) _calculateBufferSizeAndPacketCountWithAsbd:(AudioStreamBasicDescription) frameSize:(unsigned int) {
	%orig;
	NSLog(@"+(AQBufferParameters) _calculateBufferSizeAndPacketCountWithAsbd:(AudioStreamBasicDescription) frameSize:(unsigned int)");
}

-(void) setVolume:(float) rampTime:(float) {
	%orig;
	NSLog(@"-(void) setVolume:(float) rampTime:(float)");
}

-(bool) _createAudioQueue {
	%orig;
	NSLog(@"-(bool) _createAudioQueue");
}

-(void) _readDataIntoBuffer {
	%orig;
	NSLog(@"-(void) _readDataIntoBuffer");
}

-(void) _stopAudio {
	%orig;
	NSLog(@"-(void) _stopAudio");
}

-(void) _removeAudioQueue {
	%orig;
	NSLog(@"-(void) _removeAudioQueue");
}

-(void) enableLevelMeteringWithCallback:(id) {
	%orig;
	NSLog(@"-(void) enableLevelMeteringWithCallback:(id)");
}

-(void) setAudioStreamBasicDescription:(AudioStreamBasicDescription) extraParameters:(id) putDataCallback:(id) errorCallback:(?) sampleFrameSize:(id) {
	%orig;
	NSLog(@"-(void) setAudioStreamBasicDescription:(AudioStreamBasicDescription) extraParameters:(id) putDataCallback:(id) errorCallback:(?) sampleFrameSize:(id)");
}

-(void) playWithStartTime:(?) {
	%orig;
	NSLog(@"-(void) playWithStartTime:(?)");
}

-(void) stopLoadingData {
	%orig;
	NSLog(@"-(void) stopLoadingData");
}

-(void) resumeEnqueuingData {
	%orig;
	NSLog(@"-(void) resumeEnqueuingData");
}

-(void) sendCurrentAudioLevelToCallback {
	%orig;
	NSLog(@"-(void) sendCurrentAudioLevelToCallback");
}

-(void) removeLevelMetering {
	%orig;
	NSLog(@"-(void) removeLevelMetering");
}

-(void) audioQueueIsRunningCallback:(OpaqueAudioQueue*) {
	%orig;
	NSLog(@"-(void) audioQueueIsRunningCallback:(OpaqueAudioQueue*)");
}

-(void) audioQueueErrorCallback:(OpaqueAudioQueue*) {
	%orig;
	NSLog(@"-(void) audioQueueErrorCallback:(OpaqueAudioQueue*)");
}

-(void) audioQueueOutputCallback:(OpaqueAudioQueue*) inBuffer:(AudioQueueBuffer*) {
	%orig;
	NSLog(@"-(void) audioQueueOutputCallback:(OpaqueAudioQueue*) inBuffer:(AudioQueueBuffer*)");
}

-(int) _queueState {
	%orig;
	NSLog(@"-(int) _queueState");
}

-(?) getCurrentTime {
	%orig;
	NSLog(@"-(?) getCurrentTime");
}

-(int) _startQueue {
	%orig;
	NSLog(@"-(int) _startQueue");
}

-(void) prepareToPlay {
	%orig;
	NSLog(@"-(void) prepareToPlay");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(void) invalidate {
	%orig;
	NSLog(@"-(void) invalidate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook FBAdSafariViewController

+(long long) currentTimeMs {
	%orig;
	NSLog(@"+(long long) currentTimeMs");
}

+(void) presentSafariViewControllerWithURL:(id) withRootViewController:(id) withInlineClientToken:(id) withHandlerTime:(long long) withDelegate:(id) {
	%orig;
	NSLog(@"+(void) presentSafariViewControllerWithURL:(id) withRootViewController:(id) withInlineClientToken:(id) withHandlerTime:(long long) withDelegate:(id)");
}

+(bool) supportsSafariServices {
	%orig;
	NSLog(@"+(bool) supportsSafariServices");
}

+(bool) supportsWebKit {
	%orig;
	NSLog(@"+(bool) supportsWebKit");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

%end

%hook FBAdClientEventManager

+(id) createErrorEventWithMessage:(id) {
	%orig;
	NSLog(@"+(id) createErrorEventWithMessage:(id)");
}

+(void) addClientEvent:(id) {
	%orig;
	NSLog(@"+(void) addClientEvent:(id)");
}

+(id) createEventName:(id) withEventData:(id) withRequestId:(id) {
	%orig;
	NSLog(@"+(id) createEventName:(id) withEventData:(id) withRequestId:(id)");
}

+(id) createErrorEventWithException:(id) {
	%orig;
	NSLog(@"+(id) createErrorEventWithException:(id)");
}

+(id) clientEvents {
	%orig;
	NSLog(@"+(id) clientEvents");
}

+(id) dumpClientEventsToJson {
	%orig;
	NSLog(@"+(id) dumpClientEventsToJson");
}

+(id) createErrorEventWithFormat:(id) {
	%orig;
	NSLog(@"+(id) createErrorEventWithFormat:(id)");
}

+(id) createEventName:(id) withEventData:(id) {
	%orig;
	NSLog(@"+(id) createEventName:(id) withEventData:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

%end

%hook FBAdQualityMetric

+(id) metricWithEligibleThreshold:(float) {
	%orig;
	NSLog(@"+(id) metricWithEligibleThreshold:(float)");
}

-(double) eligibleSeconds {
	%orig;
	NSLog(@"-(double) eligibleSeconds");
}

-(id) initWithEligibleThreshold:(float) {
	%orig;
	NSLog(@"-(id) initWithEligibleThreshold:(float)");
}

-(double) continuousEligibleSeconds {
	%orig;
	NSLog(@"-(double) continuousEligibleSeconds");
}

-(float) eligibleThreshold {
	%orig;
	NSLog(@"-(float) eligibleThreshold");
}

-(double) maxContinuousEligibleSeconds {
	%orig;
	NSLog(@"-(double) maxContinuousEligibleSeconds");
}

-(double) measurementSeconds {
	%orig;
	NSLog(@"-(double) measurementSeconds");
}

-(void) registerProgress:(double) value:(float) {
	%orig;
	NSLog(@"-(void) registerProgress:(double) value:(float)");
}

-(float) current {
	%orig;
	NSLog(@"-(float) current");
}

-(float) sum {
	%orig;
	NSLog(@"-(float) sum");
}

-(float) min {
	%orig;
	NSLog(@"-(float) min");
}

-(float) max {
	%orig;
	NSLog(@"-(float) max");
}

-(float) avg {
	%orig;
	NSLog(@"-(float) avg");
}

-(void) setSum:(float) {
	%orig;
	NSLog(@"-(void) setSum:(float)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(long long) measurementCount {
	%orig;
	NSLog(@"-(long long) measurementCount");
}

%end

%hook FBAdPlacement

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setAdCandidates:(id) {
	%orig;
	NSLog(@"-(void) setAdCandidates:(id)");
}

-(id) adCandidates {
	%orig;
	NSLog(@"-(id) adCandidates");
}

-(id) initWithCode:(long long) message:(id) definition:(id) adCandidates:(id) {
	%orig;
	NSLog(@"-(id) initWithCode:(long long) message:(id) definition:(id) adCandidates:(id)");
}

-(void) setDefinition:(id) {
	%orig;
	NSLog(@"-(void) setDefinition:(id)");
}

-(void) setCode:(long long) {
	%orig;
	NSLog(@"-(void) setCode:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(long long) code {
	%orig;
	NSLog(@"-(long long) code");
}

-(id) definition {
	%orig;
	NSLog(@"-(id) definition");
}

%end

%hook FBAdEventManager

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(void) logEventOfType:(id) withPriority:(unsigned long long) withToken:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) logEventOfType:(id) withPriority:(unsigned long long) withToken:(id) withExtraData:(id)");
}

-(void) logImpressionForToken:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) logImpressionForToken:(id) withExtraData:(id)");
}

-(void) logSnapshotForToken:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) logSnapshotForToken:(id) withExtraData:(id)");
}

-(id) initWithDatabaseManager:(id) {
	%orig;
	NSLog(@"-(id) initWithDatabaseManager:(id)");
}

-(void) setupDatabaseWithCallback:(id) {
	%orig;
	NSLog(@"-(void) setupDatabaseWithCallback:(id)");
}

-(void) dispatchEventsImmediately {
	%orig;
	NSLog(@"-(void) dispatchEventsImmediately");
}

-(const char*) tokenTableString {
	%orig;
	NSLog(@"-(const char*) tokenTableString");
}

-(const char*) eventTableString {
	%orig;
	NSLog(@"-(const char*) eventTableString");
}

-(void) removeAllOrphanedTokensSyncWithDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) removeAllOrphanedTokensSyncWithDatabase:(sqlite3*) withCallback:(id)");
}

-(void) removeAllOrphanedEventsSyncWithDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) removeAllOrphanedEventsSyncWithDatabase:(sqlite3*) withCallback:(id)");
}

-(void) queryTokensSyncWithStatement:(const char*) withDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) queryTokensSyncWithStatement:(const char*) withDatabase:(sqlite3*) withCallback:(id)");
}

-(bool) shouldDispatchNow:(id) {
	%orig;
	NSLog(@"-(bool) shouldDispatchNow:(id)");
}

-(void) dispatchEvents {
	%orig;
	NSLog(@"-(void) dispatchEvents");
}

-(void) insertEvent:(id) withDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) insertEvent:(id) withDatabase:(sqlite3*) withCallback:(id)");
}

-(void) logEventOfType:(id) withPriority:(unsigned long long) withToken:(id) withExtraData:(id) withCallback:(id) {
	%orig;
	NSLog(@"-(void) logEventOfType:(id) withPriority:(unsigned long long) withToken:(id) withExtraData:(id) withCallback:(id)");
}

-(void) logEvent:(id) withCallback:(id) {
	%orig;
	NSLog(@"-(void) logEvent:(id) withCallback:(id)");
}

-(void) tokenIdForToken:(id) withCallback:(id) {
	%orig;
	NSLog(@"-(void) tokenIdForToken:(id) withCallback:(id)");
}

-(id) eventsInTransit {
	%orig;
	NSLog(@"-(id) eventsInTransit");
}

-(id) eventURL {
	%orig;
	NSLog(@"-(id) eventURL");
}

-(void) sendRequestInternal:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) sendRequestInternal:(id) withExtraData:(id)");
}

-(void) queryEventsSyncWithStatement:(const char*) withDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) queryEventsSyncWithStatement:(const char*) withDatabase:(sqlite3*) withCallback:(id)");
}

-(bool) isEventSuccessful:(id) {
	%orig;
	NSLog(@"-(bool) isEventSuccessful:(id)");
}

-(bool) isEventRetriable:(id) {
	%orig;
	NSLog(@"-(bool) isEventRetriable:(id)");
}

-(void) cleanupEventsSync:(id) withDatabase:(sqlite3*) {
	%orig;
	NSLog(@"-(void) cleanupEventsSync:(id) withDatabase:(sqlite3*)");
}

-(void) retryDispatch {
	%orig;
	NSLog(@"-(void) retryDispatch");
}

-(void) logStoreClickForToken:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) logStoreClickForToken:(id) withExtraData:(id)");
}

-(void) logLinkClickForToken:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) logLinkClickForToken:(id) withExtraData:(id)");
}

-(void) logVideoEventForToken:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) logVideoEventForToken:(id) withExtraData:(id)");
}

-(void) logCloseEventForToken:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) logCloseEventForToken:(id) withExtraData:(id)");
}

-(void) logBrowserSessionEventForToken:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) logBrowserSessionEventForToken:(id) withExtraData:(id)");
}

-(void) removeAllOrphanedTokensWithDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) removeAllOrphanedTokensWithDatabase:(sqlite3*) withCallback:(id)");
}

-(void) removeAllOrphanedEventsWithDatabase:(sqlite3*) withCallback:(id) {
	%orig;
	NSLog(@"-(void) removeAllOrphanedEventsWithDatabase:(sqlite3*) withCallback:(id)");
}

-(double) sessionTime {
	%orig;
	NSLog(@"-(double) sessionTime");
}

-(void) setEventsInTransit:(id) {
	%orig;
	NSLog(@"-(void) setEventsInTransit:(id)");
}

-(void) setSessionId:(id) {
	%orig;
	NSLog(@"-(void) setSessionId:(id)");
}

-(id) sessionId {
	%orig;
	NSLog(@"-(id) sessionId");
}

-(id) databaseManager {
	%orig;
	NSLog(@"-(id) databaseManager");
}

-(void) setDatabaseManager:(id) {
	%orig;
	NSLog(@"-(void) setDatabaseManager:(id)");
}

-(id) sessionStartTime {
	%orig;
	NSLog(@"-(id) sessionStartTime");
}

-(void) setSessionStartTime:(id) {
	%orig;
	NSLog(@"-(void) setSessionStartTime:(id)");
}

-(void) setDispatchTimer:(id) {
	%orig;
	NSLog(@"-(void) setDispatchTimer:(id)");
}

-(id) dispatchTimer {
	%orig;
	NSLog(@"-(id) dispatchTimer");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBAdUtility

+(void) setApplicationStatusBarHidden:(bool) {
	%orig;
	NSLog(@"+(void) setApplicationStatusBarHidden:(bool)");
}

+(id) parseQueryString:(id) {
	%orig;
	NSLog(@"+(id) parseQueryString:(id)");
}

+(id) getJSONStringFromObject:(id) {
	%orig;
	NSLog(@"+(id) getJSONStringFromObject:(id)");
}

+(id) getObjectFromJSONString:(id) {
	%orig;
	NSLog(@"+(id) getObjectFromJSONString:(id)");
}

+(bool) isStringEmpty:(id) {
	%orig;
	NSLog(@"+(bool) isStringEmpty:(id)");
}

+(void) throwExceptionWithName:(id) reason:(id) {
	%orig;
	NSLog(@"+(void) throwExceptionWithName:(id) reason:(id)");
}

+(void) throwExceptionWithName:(id) reason:(id) userInfo:(id) {
	%orig;
	NSLog(@"+(void) throwExceptionWithName:(id) reason:(id) userInfo:(id)");
}

+(void) animateWithFadeIn:(id) completion:(id) {
	%orig;
	NSLog(@"+(void) animateWithFadeIn:(id) completion:(id)");
}

+(void) traverseView:(id) withBlock:(id) {
	%orig;
	NSLog(@"+(void) traverseView:(id) withBlock:(id)");
}

+(id) allInteractableTargets:(id) excluding:(id) {
	%orig;
	NSLog(@"+(id) allInteractableTargets:(id) excluding:(id)");
}

+(long long) interfaceOrientationFromServerOrientation:(long long) {
	%orig;
	NSLog(@"+(long long) interfaceOrientationFromServerOrientation:(long long)");
}

+(void) logTracker:(id) withExtraData:(id) {
	%orig;
	NSLog(@"+(void) logTracker:(id) withExtraData:(id)");
}

+(id) testHashForSelf {
	%orig;
	NSLog(@"+(id) testHashForSelf");
}

+(void) startObservingBackgroundNotifications:(id) usingBackgroundBlock:(id) usingForegroundBlock:(?) {
	%orig;
	NSLog(@"+(void) startObservingBackgroundNotifications:(id) usingBackgroundBlock:(id) usingForegroundBlock:(?)");
}

+(void) initializeAudienceNetwork {
	%orig;
	NSLog(@"+(void) initializeAudienceNetwork");
}

+(bool) interfaceOrientationMaskSupportsPortrait:(unsigned long long) {
	%orig;
	NSLog(@"+(bool) interfaceOrientationMaskSupportsPortrait:(unsigned long long)");
}

+(bool) interfaceOrientationMaskSupportsLandscape:(unsigned long long) {
	%orig;
	NSLog(@"+(bool) interfaceOrientationMaskSupportsLandscape:(unsigned long long)");
}

+(long long) serverOrientationFromInterfaceOrientationMask:(unsigned long long) {
	%orig;
	NSLog(@"+(long long) serverOrientationFromInterfaceOrientationMask:(unsigned long long)");
}

+(id) getAdvertisingIdentifier {
	%orig;
	NSLog(@"+(id) getAdvertisingIdentifier");
}

+(id) testHashForAdvertiserID:(id) {
	%orig;
	NSLog(@"+(id) testHashForAdvertiserID:(id)");
}

+(id) parseQuery:(id) {
	%orig;
	NSLog(@"+(id) parseQuery:(id)");
}

+(id) attemptRecoveryOfObject:(id) ofClass:(Class) {
	%orig;
	NSLog(@"+(id) attemptRecoveryOfObject:(id) ofClass:(Class)");
}

+(id) createQueryParameterFromKey:(id) object:(id) {
	%orig;
	NSLog(@"+(id) createQueryParameterFromKey:(id) object:(id)");
}

+(id) generateUserAgentStringFromRawString:(id) {
	%orig;
	NSLog(@"+(id) generateUserAgentStringFromRawString:(id)");
}

+(id) cleanUserAgentString:(id) {
	%orig;
	NSLog(@"+(id) cleanUserAgentString:(id)");
}

+(id) getObjectFromPropertyList:(id) {
	%orig;
	NSLog(@"+(id) getObjectFromPropertyList:(id)");
}

+(id) getPropertyListFromObject:(id) {
	%orig;
	NSLog(@"+(id) getPropertyListFromObject:(id)");
}

+(void) sendRequestInternal:(id) withExtraData:(id) withPostData:(id) {
	%orig;
	NSLog(@"+(void) sendRequestInternal:(id) withExtraData:(id) withPostData:(id)");
}

+(void) displayDebugMessage:(id) {
	%orig;
	NSLog(@"+(void) displayDebugMessage:(id)");
}

+(void) displayVerboseDebugMessage:(id) {
	%orig;
	NSLog(@"+(void) displayVerboseDebugMessage:(id)");
}

+(bool) isViewMarked:(id) {
	%orig;
	NSLog(@"+(bool) isViewMarked:(id)");
}

+(id) findAdInViewController:(id) {
	%orig;
	NSLog(@"+(id) findAdInViewController:(id)");
}

+(id) topViewControllerOverride {
	%orig;
	NSLog(@"+(id) topViewControllerOverride");
}

+(id) viewControllerFromView:(id) {
	%orig;
	NSLog(@"+(id) viewControllerFromView:(id)");
}

+(id) traverseResponderChainForViewController:(id) {
	%orig;
	NSLog(@"+(id) traverseResponderChainForViewController:(id)");
}

+(id) currentWindow {
	%orig;
	NSLog(@"+(id) currentWindow");
}

+(void) loadRemoteImageWithURL:(id) withBlock:(id) queue:(?) retry:(id) {
	%orig;
	NSLog(@"+(void) loadRemoteImageWithURL:(id) withBlock:(id) queue:(?) retry:(id)");
}

+(void) loadRemoteImageWithURL:(id) withBlock:(id) retry:(?) {
	%orig;
	NSLog(@"+(void) loadRemoteImageWithURL:(id) withBlock:(id) retry:(?)");
}

+(void) animateWithFadeIn:(id) customAnimations:(id) completion:(?) {
	%orig;
	NSLog(@"+(void) animateWithFadeIn:(id) customAnimations:(id) completion:(?)");
}

+(void) animateWithFade:(bool) views:(id) animations:(id) completion:(?) {
	%orig;
	NSLog(@"+(void) animateWithFade:(bool) views:(id) animations:(id) completion:(?)");
}

+(void) animateWithFadeOut:(id) customAnimations:(id) completion:(?) {
	%orig;
	NSLog(@"+(void) animateWithFadeOut:(id) customAnimations:(id) completion:(?)");
}

+(void) animateWithStandardAnimations:(id) completion:(?) {
	%orig;
	NSLog(@"+(void) animateWithStandardAnimations:(id) completion:(?)");
}

+(void) animateWithFadeIn:(id) duration:(double) customAnimations:(id) completion:(?) {
	%orig;
	NSLog(@"+(void) animateWithFadeIn:(id) duration:(double) customAnimations:(id) completion:(?)");
}

+(void) animateWithFade:(bool) duration:(double) views:(id) animations:(id) completion:(?) {
	%orig;
	NSLog(@"+(void) animateWithFade:(bool) duration:(double) views:(id) animations:(id) completion:(?)");
}

+(void) animateWithFadeOut:(id) duration:(double) customAnimations:(id) completion:(?) {
	%orig;
	NSLog(@"+(void) animateWithFadeOut:(id) duration:(double) customAnimations:(id) completion:(?)");
}

+(void) animateWithStandardAnimations:(id) duration:(?) completion:(double) {
	%orig;
	NSLog(@"+(void) animateWithStandardAnimations:(id) duration:(?) completion:(double)");
}

+(void) animateEnabled:(bool) withStandardAnimations:(id) duration:(?) completion:(double) {
	%orig;
	NSLog(@"+(void) animateEnabled:(bool) withStandardAnimations:(id) duration:(?) completion:(double)");
}

+(id) allInteractableTargets:(id) {
	%orig;
	NSLog(@"+(id) allInteractableTargets:(id)");
}

+(id) snapshotOfView:(id) withRect:(CGRect) withBlock:(id) {
	%orig;
	NSLog(@"+(id) snapshotOfView:(id) withRect:(CGRect) withBlock:(id)");
}

+(id) blurImage:(id) withRadius:(double) usingContext:(id) {
	%orig;
	NSLog(@"+(id) blurImage:(id) withRadius:(double) usingContext:(id)");
}

+(id) addGaussianBlurToImage:(id) usingContext:(id) {
	%orig;
	NSLog(@"+(id) addGaussianBlurToImage:(id) usingContext:(id)");
}

+(void) markView:(id) {
	%orig;
	NSLog(@"+(void) markView:(id)");
}

+(id) findAdOnScreen {
	%orig;
	NSLog(@"+(id) findAdOnScreen");
}

+(void) setTopViewControllerOverride:(id) {
	%orig;
	NSLog(@"+(void) setTopViewControllerOverride:(id)");
}

+(void) loadRemoteImagesWithURLs:(id) withBlock:(id) retry:(?) {
	%orig;
	NSLog(@"+(void) loadRemoteImagesWithURLs:(id) withBlock:(id) retry:(?)");
}

+(void) loadRemoteImageWithURL:(id) withBlock:(id) {
	%orig;
	NSLog(@"+(void) loadRemoteImageWithURL:(id) withBlock:(id)");
}

+(void) loadRemoteVideoWithURL:(id) withBlock:(id) {
	%orig;
	NSLog(@"+(void) loadRemoteVideoWithURL:(id) withBlock:(id)");
}

+(void) animateWithFadeOut:(id) completion:(id) {
	%orig;
	NSLog(@"+(void) animateWithFadeOut:(id) completion:(id)");
}

+(void) animateWithFadeIn:(id) duration:(double) completion:(id) {
	%orig;
	NSLog(@"+(void) animateWithFadeIn:(id) duration:(double) completion:(id)");
}

+(void) animateWithFadeOut:(id) duration:(double) completion:(id) {
	%orig;
	NSLog(@"+(void) animateWithFadeOut:(id) duration:(double) completion:(id)");
}

+(void) animateEnabled:(bool) withTransactionBlock:(id) duration:(?) completion:(double) {
	%orig;
	NSLog(@"+(void) animateEnabled:(bool) withTransactionBlock:(id) duration:(?) completion:(double)");
}

+(id) snapshotOfView:(id) withBlock:(id) {
	%orig;
	NSLog(@"+(id) snapshotOfView:(id) withBlock:(id)");
}

+(void) addGaussianBlurToImages:(id) usingContext:(id) withBlock:(id) {
	%orig;
	NSLog(@"+(void) addGaussianBlurToImages:(id) usingContext:(id) withBlock:(id)");
}

+(bool) isAdSizeType:(FBAdSize) sameWith:(FBAdSize) {
	%orig;
	NSLog(@"+(bool) isAdSizeType:(FBAdSize) sameWith:(FBAdSize)");
}

+(CGSize) sizeThatFits:(CGSize) isFlexibileAdSize:(bool) actualAdSize:(CGSize) {
	%orig;
	NSLog(@"+(CGSize) sizeThatFits:(CGSize) isFlexibileAdSize:(bool) actualAdSize:(CGSize)");
}

+(long long) getTemplateID:(FBAdSize) {
	%orig;
	NSLog(@"+(long long) getTemplateID:(FBAdSize)");
}

+(void) stopObservingBackgroundNotifications:(id) {
	%orig;
	NSLog(@"+(void) stopObservingBackgroundNotifications:(id)");
}

+(void) currentUserAgentWithBlock:(id) {
	%orig;
	NSLog(@"+(void) currentUserAgentWithBlock:(id)");
}

+(id) createQueryStringFromParameters:(id) {
	%orig;
	NSLog(@"+(id) createQueryStringFromParameters:(id)");
}

+(double) deviceVolume {
	%orig;
	NSLog(@"+(double) deviceVolume");
}

+(bool) isAdvertisingTrackingEnabled {
	%orig;
	NSLog(@"+(bool) isAdvertisingTrackingEnabled");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) topViewController {
	%orig;
	NSLog(@"+(id) topViewController");
}

+(unsigned long long) supportedInterfaceOrientationsForWindow:(id) {
	%orig;
	NSLog(@"+(unsigned long long) supportedInterfaceOrientationsForWindow:(id)");
}

+(id) currentLocale {
	%orig;
	NSLog(@"+(id) currentLocale");
}

%end

%hook FBAdProviderResponse

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(id) initWithType:(long long) {
	%orig;
	NSLog(@"-(id) initWithType:(long long)");
}

%end

%hook FBAdProviderResponseError

-(void) setAdPlacementDefinition:(id) {
	%orig;
	NSLog(@"-(void) setAdPlacementDefinition:(id)");
}

-(id) initWithErrorMessage:(id) withErrorCode:(long long) withPlacementDefinition:(id) {
	%orig;
	NSLog(@"-(id) initWithErrorMessage:(id) withErrorCode:(long long) withPlacementDefinition:(id)");
}

-(id) adPlacementDefinition {
	%orig;
	NSLog(@"-(id) adPlacementDefinition");
}

-(void) setErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) setErrorCode:(long long)");
}

-(long long) errorCode {
	%orig;
	NSLog(@"-(long long) errorCode");
}

-(void) setErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) setErrorMessage:(id)");
}

-(id) errorMessage {
	%orig;
	NSLog(@"-(id) errorMessage");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithType:(long long) {
	%orig;
	NSLog(@"-(id) initWithType:(long long)");
}

%end

%hook FBAdProviderResponseAds

-(void) setAdPlacement:(id) {
	%orig;
	NSLog(@"-(void) setAdPlacement:(id)");
}

-(id) adPlacement {
	%orig;
	NSLog(@"-(id) adPlacement");
}

-(id) initWithAdPlacement:(id) {
	%orig;
	NSLog(@"-(id) initWithAdPlacement:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithType:(long long) {
	%orig;
	NSLog(@"-(id) initWithType:(long long)");
}

%end

%hook FBAdProviderCannedResponse

-(id) adPlacement {
	%orig;
	NSLog(@"-(id) adPlacement");
}

-(void) setCannedPlacement:(id) {
	%orig;
	NSLog(@"-(void) setCannedPlacement:(id)");
}

-(id) cannedPlacement {
	%orig;
	NSLog(@"-(id) cannedPlacement");
}

-(id) initWithResponse:(id) forAdAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) initWithResponse:(id) forAdAtIndex:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FNFDecompressionSessionForVP9

-(id) initWithDelegate:(id) sampleBufferFormatDescription:(opaqueCMFormatDescription*) videoSize:(CGSize) async:(bool) timerManager:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) sampleBufferFormatDescription:(opaqueCMFormatDescription*) videoSize:(CGSize) async:(bool) timerManager:(id)");
}

-(void) enqueueSampleBuffer:(opaqueCMSampleBuffer*) iFrame:(unsigned long long) {
	%orig;
	NSLog(@"-(void) enqueueSampleBuffer:(opaqueCMSampleBuffer*) iFrame:(unsigned long long)");
}

-(unsigned char) canAcceptFormatDescription:(opaqueCMFormatDescription*) {
	%orig;
	NSLog(@"-(unsigned char) canAcceptFormatDescription:(opaqueCMFormatDescription*)");
}

-(CGSize) inputSize {
	%orig;
	NSLog(@"-(CGSize) inputSize");
}

-(void) closeSession {
	%orig;
	NSLog(@"-(void) closeSession");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook FBAdTimeObserver

-(id) initWithInterval:(?) queue:(id) usingBlock:(id) {
	%orig;
	NSLog(@"-(id) initWithInterval:(?) queue:(id) usingBlock:(id)");
}

-(id) downstreamObserver {
	%orig;
	NSLog(@"-(id) downstreamObserver");
}

-(void) setDownstreamObserver:(id) {
	%orig;
	NSLog(@"-(void) setDownstreamObserver:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) block {
	%orig;
	NSLog(@"-(id) block");
}

-(?) interval {
	%orig;
	NSLog(@"-(?) interval");
}

-(id) queue {
	%orig;
	NSLog(@"-(id) queue");
}

%end

%hook FBAdClientEvent

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithName:(id) data:(id) time:(id) requestId:(id) {
	%orig;
	NSLog(@"-(id) initWithName:(id) data:(id) time:(id) requestId:(id)");
}

-(id) getClientEventDictionary {
	%orig;
	NSLog(@"-(id) getClientEventDictionary");
}

-(id) time {
	%orig;
	NSLog(@"-(id) time");
}

-(void) setTime:(id) {
	%orig;
	NSLog(@"-(void) setTime:(id)");
}

-(id) requestId {
	%orig;
	NSLog(@"-(id) requestId");
}

-(void) setRequestId:(id) {
	%orig;
	NSLog(@"-(void) setRequestId:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook FBAdSettings

+(void) clearTestDevices {
	%orig;
	NSLog(@"+(void) clearTestDevices");
}

+(id) testDeviceHash {
	%orig;
	NSLog(@"+(id) testDeviceHash");
}

+(void) addTestDevice:(id) {
	%orig;
	NSLog(@"+(void) addTestDevice:(id)");
}

+(id) getWebviewBaseURL {
	%orig;
	NSLog(@"+(id) getWebviewBaseURL");
}

+(id) testDevices {
	%orig;
	NSLog(@"+(id) testDevices");
}

+(void) persistTestDevices {
	%orig;
	NSLog(@"+(void) persistTestDevices");
}

+(id) getBaseURL {
	%orig;
	NSLog(@"+(id) getBaseURL");
}

+(id) getBaseURLWithDefault:(id) withFormat:(id) {
	%orig;
	NSLog(@"+(id) getBaseURLWithDefault:(id) withFormat:(id)");
}

+(void) resetSessionID {
	%orig;
	NSLog(@"+(void) resetSessionID");
}

+(void) addTestDevices:(id) {
	%orig;
	NSLog(@"+(void) addTestDevices:(id)");
}

+(void) clearTestDevice:(id) {
	%orig;
	NSLog(@"+(void) clearTestDevice:(id)");
}

+(void) setIsChildDirected:(bool) {
	%orig;
	NSLog(@"+(void) setIsChildDirected:(bool)");
}

+(bool) isTestMode {
	%orig;
	NSLog(@"+(bool) isTestMode");
}

+(bool) isChildDirected {
	%orig;
	NSLog(@"+(bool) isChildDirected");
}

+(bool) isBackgroundVideoPlaybackAllowed {
	%orig;
	NSLog(@"+(bool) isBackgroundVideoPlaybackAllowed");
}

+(void) setBackgroundVideoPlaybackAllowed:(bool) {
	%orig;
	NSLog(@"+(void) setBackgroundVideoPlaybackAllowed:(bool)");
}

+(void) setMediationService:(id) {
	%orig;
	NSLog(@"+(void) setMediationService:(id)");
}

+(id) getMediationService {
	%orig;
	NSLog(@"+(id) getMediationService");
}

+(void) setUrlPrefix:(id) {
	%orig;
	NSLog(@"+(void) setUrlPrefix:(id)");
}

+(id) getDeliveryEndpoint {
	%orig;
	NSLog(@"+(id) getDeliveryEndpoint");
}

+(long long) getLogLevel {
	%orig;
	NSLog(@"+(long long) getLogLevel");
}

+(long long) mediaViewRenderingMethod {
	%orig;
	NSLog(@"+(long long) mediaViewRenderingMethod");
}

+(void) setMediaViewRenderingMethod:(long long) {
	%orig;
	NSLog(@"+(void) setMediaViewRenderingMethod:(long long)");
}

+(long long) testAdType {
	%orig;
	NSLog(@"+(long long) testAdType");
}

+(void) setTestAdType:(long long) {
	%orig;
	NSLog(@"+(void) setTestAdType:(long long)");
}

+(id) urlPrefix {
	%orig;
	NSLog(@"+(id) urlPrefix");
}

+(void) setLogLevel:(long long) {
	%orig;
	NSLog(@"+(void) setLogLevel:(long long)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) sessionID {
	%orig;
	NSLog(@"+(id) sessionID");
}

%end

%hook FNFAudioFormatHelper

+(AudioStreamBasicDescription) audioStreamBasicDescriptionWithFormatId:(unsigned int) channelCount:(unsigned int) sampleRateIndex:(unsigned int) framesPerPacket:(unsigned int) objectType:(unsigned int) {
	%orig;
	NSLog(@"+(AudioStreamBasicDescription) audioStreamBasicDescriptionWithFormatId:(unsigned int) channelCount:(unsigned int) sampleRateIndex:(unsigned int) framesPerPacket:(unsigned int) objectType:(unsigned int)");
}

%end

%hook FBAdWeakProxy

+(id) proxyForObject:(id) {
	%orig;
	NSLog(@"+(id) proxyForObject:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) methodSignatureForSelector:(SEL) {
	%orig;
	NSLog(@"-(id) methodSignatureForSelector:(SEL)");
}

-(id) object {
	%orig;
	NSLog(@"-(id) object");
}

-(void) forwardInvocation:(id) {
	%orig;
	NSLog(@"-(void) forwardInvocation:(id)");
}

-(void) setObject:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id)");
}

%end

%hook FBNativeAdsManager

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) stopObservingNotifications {
	%orig;
	NSLog(@"-(void) stopObservingNotifications");
}

-(void) nativeAdDidLoad:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidLoad:(id)");
}

-(void) nativeAd:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) nativeAd:(id) didFailWithError:(id)");
}

-(void) setMediaCachePolicy:(long long) {
	%orig;
	NSLog(@"-(void) setMediaCachePolicy:(long long)");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(unsigned long long) numAdsRequested {
	%orig;
	NSLog(@"-(unsigned long long) numAdsRequested");
}

-(id) nextNativeAd {
	%orig;
	NSLog(@"-(id) nextNativeAd");
}

-(id) nativeAdsLoaded {
	%orig;
	NSLog(@"-(id) nativeAdsLoaded");
}

-(unsigned long long) uniqueNativeAdCount {
	%orig;
	NSLog(@"-(unsigned long long) uniqueNativeAdCount");
}

-(void) disableAutoRefresh {
	%orig;
	NSLog(@"-(void) disableAutoRefresh");
}

-(void) updateRefreshInterval:(long long) {
	%orig;
	NSLog(@"-(void) updateRefreshInterval:(long long)");
}

-(void) onAdRequestError:(id) {
	%orig;
	NSLog(@"-(void) onAdRequestError:(id)");
}

-(id) initWithPlacementID:(id) forNumAdsRequested:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) forNumAdsRequested:(unsigned long long)");
}

-(void) setNativeAds:(id) {
	%orig;
	NSLog(@"-(void) setNativeAds:(id)");
}

-(void) setNativeAdsLoaded:(id) {
	%orig;
	NSLog(@"-(void) setNativeAdsLoaded:(id)");
}

-(void) adsAllLoaded {
	%orig;
	NSLog(@"-(void) adsAllLoaded");
}

-(void) invalidateRefresh {
	%orig;
	NSLog(@"-(void) invalidateRefresh");
}

-(void) setNativeAdsFailedCount:(long long) {
	%orig;
	NSLog(@"-(void) setNativeAdsFailedCount:(long long)");
}

-(void) setCurrentNativeAds:(id) {
	%orig;
	NSLog(@"-(void) setCurrentNativeAds:(id)");
}

-(void) setCurrentNativeAdPos:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCurrentNativeAdPos:(unsigned long long)");
}

-(id) currentNativeAds {
	%orig;
	NSLog(@"-(id) currentNativeAds");
}

-(unsigned long long) currentNativeAdPos {
	%orig;
	NSLog(@"-(unsigned long long) currentNativeAdPos");
}

-(void) setRefreshDisabled:(bool) {
	%orig;
	NSLog(@"-(void) setRefreshDisabled:(bool)");
}

-(bool) observingNotificaions {
	%orig;
	NSLog(@"-(bool) observingNotificaions");
}

-(void) setObservingNotificaions:(bool) {
	%orig;
	NSLog(@"-(void) setObservingNotificaions:(bool)");
}

-(void) imagesAllCached:(id) {
	%orig;
	NSLog(@"-(void) imagesAllCached:(id)");
}

-(long long) nativeAdsFailedCount {
	%orig;
	NSLog(@"-(long long) nativeAdsFailedCount");
}

-(void) onApplicationBackgrounded {
	%orig;
	NSLog(@"-(void) onApplicationBackgrounded");
}

-(void) onApplicationForegrounded {
	%orig;
	NSLog(@"-(void) onApplicationForegrounded");
}

-(void) onAdRequestSuccess:(id) {
	%orig;
	NSLog(@"-(void) onAdRequestSuccess:(id)");
}

-(void) loadAds {
	%orig;
	NSLog(@"-(void) loadAds");
}

-(id) nativeAds {
	%orig;
	NSLog(@"-(id) nativeAds");
}

-(void) setAdProvider:(id) {
	%orig;
	NSLog(@"-(void) setAdProvider:(id)");
}

-(long long) mediaCachePolicy {
	%orig;
	NSLog(@"-(long long) mediaCachePolicy");
}

-(void) setNumAdsRequested:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setNumAdsRequested:(unsigned long long)");
}

-(bool) isRefreshDisabled {
	%orig;
	NSLog(@"-(bool) isRefreshDisabled");
}

-(void) startObservingNotifications {
	%orig;
	NSLog(@"-(void) startObservingNotifications");
}

-(void) setRefreshInterval:(long long) {
	%orig;
	NSLog(@"-(void) setRefreshInterval:(long long)");
}

-(void) scheduleRefresh {
	%orig;
	NSLog(@"-(void) scheduleRefresh");
}

-(id) adProvider {
	%orig;
	NSLog(@"-(id) adProvider");
}

-(id) refreshTimer {
	%orig;
	NSLog(@"-(id) refreshTimer");
}

-(void) setRefreshTimer:(id) {
	%orig;
	NSLog(@"-(void) setRefreshTimer:(id)");
}

-(void) setValid:(bool) {
	%orig;
	NSLog(@"-(void) setValid:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setVersion:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setVersion:(unsigned long long)");
}

-(unsigned long long) version {
	%orig;
	NSLog(@"-(unsigned long long) version");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

-(long long) refreshInterval {
	%orig;
	NSLog(@"-(long long) refreshInterval");
}

%end

%hook FBAdQualityTest

+(id) testWithRule:(id) {
	%orig;
	NSLog(@"+(id) testWithRule:(id)");
}

-(void) registerProgress:(double) viewableRatio:(float) {
	%orig;
	NSLog(@"-(void) registerProgress:(double) viewableRatio:(float)");
}

-(void) setTestStatistics:(id) {
	%orig;
	NSLog(@"-(void) setTestStatistics:(id)");
}

-(void) setPassingStatistics:(id) {
	%orig;
	NSLog(@"-(void) setPassingStatistics:(id)");
}

-(void) onEnd {
	%orig;
	NSLog(@"-(void) onEnd");
}

-(id) passingStatistics {
	%orig;
	NSLog(@"-(id) passingStatistics");
}

-(void) onPassed {
	%orig;
	NSLog(@"-(void) onPassed");
}

-(void) setPassed:(bool) {
	%orig;
	NSLog(@"-(void) setPassed:(bool)");
}

-(void) registerEnd {
	%orig;
	NSLog(@"-(void) registerEnd");
}

-(id) initWithRule:(id) {
	%orig;
	NSLog(@"-(id) initWithRule:(id)");
}

-(id) testStatistics {
	%orig;
	NSLog(@"-(id) testStatistics");
}

-(void) onComplete {
	%orig;
	NSLog(@"-(void) onComplete");
}

-(id) rule {
	%orig;
	NSLog(@"-(id) rule");
}

-(bool) passed {
	%orig;
	NSLog(@"-(bool) passed");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) complete {
	%orig;
	NSLog(@"-(bool) complete");
}

-(bool) ended {
	%orig;
	NSLog(@"-(bool) ended");
}

-(void) setEnded:(bool) {
	%orig;
	NSLog(@"-(void) setEnded:(bool)");
}

-(void) setComplete:(bool) {
	%orig;
	NSLog(@"-(void) setComplete:(bool)");
}

%end

%hook FNFDashAsset

-(void) dataWasReceivedForTrack:(long long) representationId:(id) isComplete:(bool) allRequestedBytesReceived:(bool) forDiskCache:(bool) {
	%orig;
	NSLog(@"-(void) dataWasReceivedForTrack:(long long) representationId:(id) isComplete:(bool) allRequestedBytesReceived:(bool) forDiskCache:(bool)");
}

-(void) _forTestingBypassPrefetch {
	%orig;
	NSLog(@"-(void) _forTestingBypassPrefetch");
}

-(?) videoTrackDuration {
	%orig;
	NSLog(@"-(?) videoTrackDuration");
}

-(void) updatePlaybackTime:(?) {
	%orig;
	NSLog(@"-(void) updatePlaybackTime:(?)");
}

-(void) requestTimeLoadedUpdate {
	%orig;
	NSLog(@"-(void) requestTimeLoadedUpdate");
}

-(void) requestErrorNotificationIfNeeded {
	%orig;
	NSLog(@"-(void) requestErrorNotificationIfNeeded");
}

-(bool) resetAssetToBeginningIfNeeded {
	%orig;
	NSLog(@"-(bool) resetAssetToBeginningIfNeeded");
}

-(bool) seekToPosition:(?) {
	%orig;
	NSLog(@"-(bool) seekToPosition:(?)");
}

-(?) timeAfterSeek {
	%orig;
	NSLog(@"-(?) timeAfterSeek");
}

-(bool) trackHasMoreFrames:(long long) {
	%orig;
	NSLog(@"-(bool) trackHasMoreFrames:(long long)");
}

-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long) {
	%orig;
	NSLog(@"-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long)");
}

-(const char*) currentFrameDataForTrack:(long long) {
	%orig;
	NSLog(@"-(const char*) currentFrameDataForTrack:(long long)");
}

-(bool) containsTrack:(long long) {
	%orig;
	NSLog(@"-(bool) containsTrack:(long long)");
}

-(void) advanceFrameForTrack:(long long) {
	%orig;
	NSLog(@"-(void) advanceFrameForTrack:(long long)");
}

-(bool) shouldPauseForStallingWithNextCheckCallback:(id) stallReason:(?) {
	%orig;
	NSLog(@"-(bool) shouldPauseForStallingWithNextCheckCallback:(id) stallReason:(?)");
}

-(bool) shouldRestartAfterStalling {
	%orig;
	NSLog(@"-(bool) shouldRestartAfterStalling");
}

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(id) debugDetails {
	%orig;
	NSLog(@"-(id) debugDetails");
}

-(opaqueCMFormatDescription*) formatDesc {
	%orig;
	NSLog(@"-(opaqueCMFormatDescription*) formatDesc");
}

-(id) audioStreamExtraParameters {
	%orig;
	NSLog(@"-(id) audioStreamExtraParameters");
}

-(bool) embedFrameInfo {
	%orig;
	NSLog(@"-(bool) embedFrameInfo");
}

-(bool) decompressedFramebuffer {
	%orig;
	NSLog(@"-(bool) decompressedFramebuffer");
}

-(void) addErrorToLog:(id) shouldStopPlayback:(bool) {
	%orig;
	NSLog(@"-(void) addErrorToLog:(id) shouldStopPlayback:(bool)");
}

-(id) mpdAccessibilityDescription {
	%orig;
	NSLog(@"-(id) mpdAccessibilityDescription");
}

-(bool) shouldBufferVideoAsSoonAsPossible {
	%orig;
	NSLog(@"-(bool) shouldBufferVideoAsSoonAsPossible");
}

-(void) playbackPauseRequested:(int) {
	%orig;
	NSLog(@"-(void) playbackPauseRequested:(int)");
}

-(void) setEmbedFrameInfo:(bool) {
	%orig;
	NSLog(@"-(void) setEmbedFrameInfo:(bool)");
}

-(?) maxBufferTime {
	%orig;
	NSLog(@"-(?) maxBufferTime");
}

-(?) minBufferTime {
	%orig;
	NSLog(@"-(?) minBufferTime");
}

-(bool) hasPlaybackFailed {
	%orig;
	NSLog(@"-(bool) hasPlaybackFailed");
}

-(void) loadingDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) loadingDidFailWithError:(id)");
}

-(void) playlistUpdated {
	%orig;
	NSLog(@"-(void) playlistUpdated");
}

-(id) qualityLabel {
	%orig;
	NSLog(@"-(id) qualityLabel");
}

-(id) audioChannelConfiguration {
	%orig;
	NSLog(@"-(id) audioChannelConfiguration");
}

-(unsigned int) unfetchedSegmentCapHitCount {
	%orig;
	NSLog(@"-(unsigned int) unfetchedSegmentCapHitCount");
}

-(void) _forTestingMakeSynchronous {
	%orig;
	NSLog(@"-(void) _forTestingMakeSynchronous");
}

-(id) initWithConfig:(FNFDashAssetConfig) mpdData:(id) mpdUrl:(id) bandwidthProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithConfig:(FNFDashAssetConfig) mpdData:(id) mpdUrl:(id) bandwidthProvider:(id)");
}

-(void) createNewDataBlockDistributors {
	%orig;
	NSLog(@"-(void) createNewDataBlockDistributors");
}

-(void) _potentiallyStartRequest {
	%orig;
	NSLog(@"-(void) _potentiallyStartRequest");
}

-(bool) _fullyDownloaded {
	%orig;
	NSLog(@"-(bool) _fullyDownloaded");
}

-(bool) shouldResetAssetToBeginning {
	%orig;
	NSLog(@"-(bool) shouldResetAssetToBeginning");
}

-(bool) _fragmentedSeekToPosition:(?) {
	%orig;
	NSLog(@"-(bool) _fragmentedSeekToPosition:(?)");
}

-(bool) _liveSeekToNextKeyFrame {
	%orig;
	NSLog(@"-(bool) _liveSeekToNextKeyFrame");
}

-(FNFSeekStatus) _segmentedVodSeekToPosition:(?) {
	%orig;
	NSLog(@"-(FNFSeekStatus) _segmentedVodSeekToPosition:(?)");
}

-(void) _seekDataLoaderToTime:(?) offset:(unsigned long long) shouldUpdateOffset:(bool) track:(long long) {
	%orig;
	NSLog(@"-(void) _seekDataLoaderToTime:(?) offset:(unsigned long long) shouldUpdateOffset:(bool) track:(long long)");
}

-(bool) containsAudio {
	%orig;
	NSLog(@"-(bool) containsAudio");
}

-(bool) _isFullyDownloadedForTrack:(long long) {
	%orig;
	NSLog(@"-(bool) _isFullyDownloadedForTrack:(long long)");
}

-(void) _sendDryNotificationIfApplicable {
	%orig;
	NSLog(@"-(void) _sendDryNotificationIfApplicable");
}

-(void) _sendUndryNotificationIfApplicable {
	%orig;
	NSLog(@"-(void) _sendUndryNotificationIfApplicable");
}

-(bool) _isDiskCacheEnabled {
	%orig;
	NSLog(@"-(bool) _isDiskCacheEnabled");
}

-(id) _dataForRep:(id) track:(long long) {
	%orig;
	NSLog(@"-(id) _dataForRep:(id) track:(long long)");
}

-(void) _handleWarning:(id) {
	%orig;
	NSLog(@"-(void) _handleWarning:(id)");
}

-(unsigned int) availableQualitiesCount {
	%orig;
	NSLog(@"-(unsigned int) availableQualitiesCount");
}

-(double) nextLiveAudioTimestamp {
	%orig;
	NSLog(@"-(double) nextLiveAudioTimestamp");
}

-(bool) _shouldCancelDiskCache:(long long) {
	%orig;
	NSLog(@"-(bool) _shouldCancelDiskCache:(long long)");
}

-(void) setDashPlaylistData:(id) {
	%orig;
	NSLog(@"-(void) setDashPlaylistData:(id)");
}

-(void) _parseAtomForTrack:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(void) _parseAtomForTrack:(long long) representationId:(id)");
}

-(void) parsingDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) parsingDidFailWithError:(id)");
}

-(bool) _previousFragmentedRequestFinishedAtBoundaryForTrack:(long long) {
	%orig;
	NSLog(@"-(bool) _previousFragmentedRequestFinishedAtBoundaryForTrack:(long long)");
}

-(?) timeLoadedForOffset:(unsigned long long) track:(long long) {
	%orig;
	NSLog(@"-(?) timeLoadedForOffset:(unsigned long long) track:(long long)");
}

-(void) _updateTimeLoaded:(?) {
	%orig;
	NSLog(@"-(void) _updateTimeLoaded:(?)");
}

-(void) _potentiallyStartRequestForTrack:(long long) {
	%orig;
	NSLog(@"-(void) _potentiallyStartRequestForTrack:(long long)");
}

-(?) nextAbsoluteAudioTime {
	%orig;
	NSLog(@"-(?) nextAbsoluteAudioTime");
}

-(id) _newRepDataForTrack:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(id) _newRepDataForTrack:(long long) representationId:(id)");
}

-(void) _verifySidxParsingAgainstFileLengthForRepresentationData:(id) {
	%orig;
	NSLog(@"-(void) _verifySidxParsingAgainstFileLengthForRepresentationData:(id)");
}

-(bool) _isDiskCacheEnabledForCurrentReachabilityState {
	%orig;
	NSLog(@"-(bool) _isDiskCacheEnabledForCurrentReachabilityState");
}

-(bool) _isDiskCacheEnabledForCurrentConnectionQuality {
	%orig;
	NSLog(@"-(bool) _isDiskCacheEnabledForCurrentConnectionQuality");
}

-(unsigned long long) _diskCacheFetchLength:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) _diskCacheFetchLength:(long long)");
}

-(bool) _shouldStartDiskCache:(long long) {
	%orig;
	NSLog(@"-(bool) _shouldStartDiskCache:(long long)");
}

-(unsigned long long) _nextDiskCacheOffset:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) _nextDiskCacheOffset:(long long)");
}

-(bool) _shouldFetchDataForTrack:(long long) {
	%orig;
	NSLog(@"-(bool) _shouldFetchDataForTrack:(long long)");
}

-(void) _selectRepresentationForTrack:(long long) {
	%orig;
	NSLog(@"-(void) _selectRepresentationForTrack:(long long)");
}

-(void) _fragmentedFetchForTrack:(long long) {
	%orig;
	NSLog(@"-(void) _fragmentedFetchForTrack:(long long)");
}

-(void) _segmentedFetchForTrack:(long long) {
	%orig;
	NSLog(@"-(void) _segmentedFetchForTrack:(long long)");
}

-(unsigned long long) offsetForTimeInSeconds:(float) track:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) offsetForTimeInSeconds:(float) track:(long long)");
}

-(id) _selectSegmentedQualityForTrack:(long long) {
	%orig;
	NSLog(@"-(id) _selectSegmentedQualityForTrack:(long long)");
}

-(id) _selectFragmentedQualityForTrack:(long long) {
	%orig;
	NSLog(@"-(id) _selectFragmentedQualityForTrack:(long long)");
}

-(void) _attemptToParseInitializationAtomsForTrack:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(void) _attemptToParseInitializationAtomsForTrack:(long long) representationId:(id)");
}

-(void) _attemptToParseMoofAtomsForTrack:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(void) _attemptToParseMoofAtomsForTrack:(long long) representationId:(id)");
}

-(void) createNewDataBlockDistributorForTrack:(long long) {
	%orig;
	NSLog(@"-(void) createNewDataBlockDistributorForTrack:(long long)");
}

-(void) _resetDataForSeekBack {
	%orig;
	NSLog(@"-(void) _resetDataForSeekBack");
}

-(bool) _advanceToNextGopKeyframe {
	%orig;
	NSLog(@"-(bool) _advanceToNextGopKeyframe");
}

-(int) _videoSegmentIndexForTime:(?) {
	%orig;
	NSLog(@"-(int) _videoSegmentIndexForTime:(?)");
}

-(?) currentVideoPts {
	%orig;
	NSLog(@"-(?) currentVideoPts");
}

-(FNFSeekStatus) _segmentedSeekStatusForTime:(?) shouldUpdateOffset:(bool) shouldSeekAudio:(bool) newOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(FNFSeekStatus) _segmentedSeekStatusForTime:(?) shouldUpdateOffset:(bool) shouldSeekAudio:(bool) newOffset:(unsigned long long)");
}

-(bool) _isCurrentFrameAKeyframe {
	%orig;
	NSLog(@"-(bool) _isCurrentFrameAKeyframe");
}

-(void) _advanceAudioToMatchVideo {
	%orig;
	NSLog(@"-(void) _advanceAudioToMatchVideo");
}

-(void) willChangeValue {
	%orig;
	NSLog(@"-(void) willChangeValue");
}

-(void) didChangeValue {
	%orig;
	NSLog(@"-(void) didChangeValue");
}

-(double) elapsedVideoTimestamp {
	%orig;
	NSLog(@"-(double) elapsedVideoTimestamp");
}

-(double) assetCurrentBitRate {
	%orig;
	NSLog(@"-(double) assetCurrentBitRate");
}

-(double) loadingStartedTimestamp {
	%orig;
	NSLog(@"-(double) loadingStartedTimestamp");
}

-(FNFDashAssetPrefetchMetadata) getUpdatedPrefetchMetadataIfPossible {
	%orig;
	NSLog(@"-(FNFDashAssetPrefetchMetadata) getUpdatedPrefetchMetadataIfPossible");
}

-(bool) isAbrEnabled {
	%orig;
	NSLog(@"-(bool) isAbrEnabled");
}

-(unsigned long long) requestedBytesCount {
	%orig;
	NSLog(@"-(unsigned long long) requestedBytesCount");
}

-(int) unfetchedSegmentCountForTrack:(long long) {
	%orig;
	NSLog(@"-(int) unfetchedSegmentCountForTrack:(long long)");
}

-(bool) offsetIsAtLeastLargestOffset:(unsigned long long) track:(long long) {
	%orig;
	NSLog(@"-(bool) offsetIsAtLeastLargestOffset:(unsigned long long) track:(long long)");
}

-(id) dataBlockDistributorForTrack:(long long) {
	%orig;
	NSLog(@"-(id) dataBlockDistributorForTrack:(long long)");
}

-(unsigned long long) currentOffsetForTrack:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) currentOffsetForTrack:(long long)");
}

-(id) dataLoaderForTrack:(long long) {
	%orig;
	NSLog(@"-(id) dataLoaderForTrack:(long long)");
}

-(id) dataLoaderForTrack:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(id) dataLoaderForTrack:(long long) representationId:(id)");
}

-(int) vodSegmentIndexForTrack:(long long) {
	%orig;
	NSLog(@"-(int) vodSegmentIndexForTrack:(long long)");
}

-(int) segmentsParsedCountForTrack:(long long) {
	%orig;
	NSLog(@"-(int) segmentsParsedCountForTrack:(long long)");
}

-(bool) parsedHeadersForTrack:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(bool) parsedHeadersForTrack:(long long) representationId:(id)");
}

-(id) downloadTrackerForTrack:(long long) {
	%orig;
	NSLog(@"-(id) downloadTrackerForTrack:(long long)");
}

-(id) playlistLoader {
	%orig;
	NSLog(@"-(id) playlistLoader");
}

-(id) abrSelector {
	%orig;
	NSLog(@"-(id) abrSelector");
}

-(id) fetchingRepresentationIdForTrack:(long long) {
	%orig;
	NSLog(@"-(id) fetchingRepresentationIdForTrack:(long long)");
}

-(unsigned long long) sidxOffsetForSegmentIndex:(int) track:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(unsigned long long) sidxOffsetForSegmentIndex:(int) track:(long long) representationId:(id)");
}

-(unsigned long long) sidxEndOffsetForTrack:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(unsigned long long) sidxEndOffsetForTrack:(long long) representationId:(id)");
}

-(FNFDashAssetPrefetchMetadata) prefetchMetadata {
	%orig;
	NSLog(@"-(FNFDashAssetPrefetchMetadata) prefetchMetadata");
}

-(void) setPrefetchMetadata:(FNFDashAssetPrefetchMetadata) {
	%orig;
	NSLog(@"-(void) setPrefetchMetadata:(FNFDashAssetPrefetchMetadata)");
}

-(AudioStreamBasicDescription) asbd {
	%orig;
	NSLog(@"-(AudioStreamBasicDescription) asbd");
}

-(void) _handleError:(id) {
	%orig;
	NSLog(@"-(void) _handleError:(id)");
}

-(id) playlistData {
	%orig;
	NSLog(@"-(id) playlistData");
}

-(id) loadedTimeRanges {
	%orig;
	NSLog(@"-(id) loadedTimeRanges");
}

-(void) cancelLoading {
	%orig;
	NSLog(@"-(void) cancelLoading");
}

-(int) pauseReason {
	%orig;
	NSLog(@"-(int) pauseReason");
}

-(id) tracksWithMediaType:(id) {
	%orig;
	NSLog(@"-(id) tracksWithMediaType:(id)");
}

-(CGSize) naturalSize {
	%orig;
	NSLog(@"-(CGSize) naturalSize");
}

-(CGAffineTransform) preferredTransform {
	%orig;
	NSLog(@"-(CGAffineTransform) preferredTransform");
}

-(void) setAudioMix:(id) {
	%orig;
	NSLog(@"-(void) setAudioMix:(id)");
}

-(long long) statusOfValueForKey:(id) error:(id*) {
	%orig;
	NSLog(@"-(long long) statusOfValueForKey:(id) error:(id*)");
}

-(void) loadValuesAsynchronouslyForKeys:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadValuesAsynchronouslyForKeys:(id) completionHandler:(id)");
}

-(bool) isPlaybackBufferFull {
	%orig;
	NSLog(@"-(bool) isPlaybackBufferFull");
}

-(bool) isPlaybackLikelyToKeepUp {
	%orig;
	NSLog(@"-(bool) isPlaybackLikelyToKeepUp");
}

-(id) projection {
	%orig;
	NSLog(@"-(id) projection");
}

-(id) accessLog {
	%orig;
	NSLog(@"-(id) accessLog");
}

-(unsigned long long) timescale {
	%orig;
	NSLog(@"-(unsigned long long) timescale");
}

-(unsigned long long) receivedBytesCount {
	%orig;
	NSLog(@"-(unsigned long long) receivedBytesCount");
}

-(void) addOutput:(id) {
	%orig;
	NSLog(@"-(void) addOutput:(id)");
}

-(id) dispatchQueue {
	%orig;
	NSLog(@"-(id) dispatchQueue");
}

-(void) playbackStarted {
	%orig;
	NSLog(@"-(void) playbackStarted");
}

-(id) resourceLoader {
	%orig;
	NSLog(@"-(id) resourceLoader");
}

-(id) audioMix {
	%orig;
	NSLog(@"-(id) audioMix");
}

-(void) reportWarning:(id) {
	%orig;
	NSLog(@"-(void) reportWarning:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(long long) status {
	%orig;
	NSLog(@"-(long long) status");
}

-(id) asset {
	%orig;
	NSLog(@"-(id) asset");
}

%end

%hook FNFDashKeyframeMetadata

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(void) setRepresentationId:(id) {
	%orig;
	NSLog(@"-(void) setRepresentationId:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(int) index {
	%orig;
	NSLog(@"-(int) index");
}

-(void) setIndex:(int) {
	%orig;
	NSLog(@"-(void) setIndex:(int)");
}

%end

%hook FNFDashRepresentationSpecificData

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(opaqueCMFormatDescription*) formatDesc {
	%orig;
	NSLog(@"-(opaqueCMFormatDescription*) formatDesc");
}

-(void) setRepresentationId:(id) {
	%orig;
	NSLog(@"-(void) setRepresentationId:(id)");
}

-(FNFMP4MoovAtomProvider*) atomProvider {
	%orig;
	NSLog(@"-(FNFMP4MoovAtomProvider*) atomProvider");
}

-(bool) parsedMoovAtom {
	%orig;
	NSLog(@"-(bool) parsedMoovAtom");
}

-(void) setParsedMoovAtom:(bool) {
	%orig;
	NSLog(@"-(void) setParsedMoovAtom:(bool)");
}

-(bool) parsedHeaders {
	%orig;
	NSLog(@"-(bool) parsedHeaders");
}

-(void) setParsedHeaders:(bool) {
	%orig;
	NSLog(@"-(void) setParsedHeaders:(bool)");
}

-(unsigned long long) readerOffsetBeforeFirstParseAttempt {
	%orig;
	NSLog(@"-(unsigned long long) readerOffsetBeforeFirstParseAttempt");
}

-(void) setReaderOffsetBeforeFirstParseAttempt:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setReaderOffsetBeforeFirstParseAttempt:(unsigned long long)");
}

-(bool) hasReaderOffsetBeenSet {
	%orig;
	NSLog(@"-(bool) hasReaderOffsetBeenSet");
}

-(void) setHasReaderOffsetBeenSet:(bool) {
	%orig;
	NSLog(@"-(void) setHasReaderOffsetBeenSet:(bool)");
}

-(void) setFormatDesc:(opaqueCMFormatDescription*) {
	%orig;
	NSLog(@"-(void) setFormatDesc:(opaqueCMFormatDescription*)");
}

-(int) trackId {
	%orig;
	NSLog(@"-(int) trackId");
}

-(void) setTrackId:(int) {
	%orig;
	NSLog(@"-(void) setTrackId:(int)");
}

-(id) dataLoader {
	%orig;
	NSLog(@"-(id) dataLoader");
}

-(void) setDataLoader:(id) {
	%orig;
	NSLog(@"-(void) setDataLoader:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) .cxx_construct {
	%orig;
	NSLog(@"-(id) .cxx_construct");
}

%end

%hook FBAdDevice

+(bool) systemVersionIsGreaterThanOrEqualToiOS8 {
	%orig;
	NSLog(@"+(bool) systemVersionIsGreaterThanOrEqualToiOS8");
}

+(id) machine {
	%orig;
	NSLog(@"+(id) machine");
}

+(unsigned int) coreCount {
	%orig;
	NSLog(@"+(unsigned int) coreCount");
}

+(unsigned long long) freeDiskBytes {
	%orig;
	NSLog(@"+(unsigned long long) freeDiskBytes");
}

+(unsigned long long) freeMemoryBytes {
	%orig;
	NSLog(@"+(unsigned long long) freeMemoryBytes");
}

+(unsigned long long) totalMemoryBytes {
	%orig;
	NSLog(@"+(unsigned long long) totalMemoryBytes");
}

+(bool) systemVersionIsGreaterThanOrEqualTo:(id) {
	%orig;
	NSLog(@"+(bool) systemVersionIsGreaterThanOrEqualTo:(id)");
}

+(void) initializeAndCacheValues {
	%orig;
	NSLog(@"+(void) initializeAndCacheValues");
}

+(unsigned long long) freeDiskSpace {
	%orig;
	NSLog(@"+(unsigned long long) freeDiskSpace");
}

+(unsigned long long) adjustedFillRate {
	%orig;
	NSLog(@"+(unsigned long long) adjustedFillRate");
}

+(FBAdDeviceBatteryInfo) deviceBatteryInfo {
	%orig;
	NSLog(@"+(FBAdDeviceBatteryInfo) deviceBatteryInfo");
}

+(bool) isSlowerDevice {
	%orig;
	NSLog(@"+(bool) isSlowerDevice");
}

+(bool) isRunningOnPadInPhoneEmulator {
	%orig;
	NSLog(@"+(bool) isRunningOnPadInPhoneEmulator");
}

+(id) systemBuildNumber {
	%orig;
	NSLog(@"+(id) systemBuildNumber");
}

+(bool) systemVersionIsLessThan:(id) {
	%orig;
	NSLog(@"+(bool) systemVersionIsLessThan:(id)");
}

+(bool) systemVersionIsGreaterThanOrEqualToiOS9 {
	%orig;
	NSLog(@"+(bool) systemVersionIsGreaterThanOrEqualToiOS9");
}

+(bool) isPad {
	%orig;
	NSLog(@"+(bool) isPad");
}

+(void) resetCache {
	%orig;
	NSLog(@"+(void) resetCache");
}

+(unsigned long long) deviceModel {
	%orig;
	NSLog(@"+(unsigned long long) deviceModel");
}

+(id) machineName {
	%orig;
	NSLog(@"+(id) machineName");
}

+(id) architecture {
	%orig;
	NSLog(@"+(id) architecture");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) model {
	%orig;
	NSLog(@"+(id) model");
}

+(id) systemName {
	%orig;
	NSLog(@"+(id) systemName");
}

+(id) systemVersion {
	%orig;
	NSLog(@"+(id) systemVersion");
}

%end

%hook FBAdQualityRule

+(id) ruleWithViewableRatio:(float) viewableSeconds:(double) continuous:(bool) endCallback:(id) {
	%orig;
	NSLog(@"+(id) ruleWithViewableRatio:(float) viewableSeconds:(double) continuous:(bool) endCallback:(id)");
}

+(id) mrcRuleWithEndCallback:(id) {
	%orig;
	NSLog(@"+(id) mrcRuleWithEndCallback:(id)");
}

+(id) viewableImpressionRuleWithEndCallback:(id) {
	%orig;
	NSLog(@"+(id) viewableImpressionRuleWithEndCallback:(id)");
}

-(float) viewableRatio {
	%orig;
	NSLog(@"-(float) viewableRatio");
}

-(id) initWithViewableRatio:(float) viewableSeconds:(double) continuous:(bool) endCallback:(id) {
	%orig;
	NSLog(@"-(id) initWithViewableRatio:(float) viewableSeconds:(double) continuous:(bool) endCallback:(id)");
}

-(double) viewableSeconds {
	%orig;
	NSLog(@"-(double) viewableSeconds");
}

-(id) endCallback {
	%orig;
	NSLog(@"-(id) endCallback");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isContinuous {
	%orig;
	NSLog(@"-(bool) isContinuous");
}

%end

%hook FNFPlayer

-(void) setCaptionParser:(id) {
	%orig;
	NSLog(@"-(void) setCaptionParser:(id)");
}

-(void) setAudioEngine:(id) {
	%orig;
	NSLog(@"-(void) setAudioEngine:(id)");
}

-(void) setVolume:(float) rampTime:(float) {
	%orig;
	NSLog(@"-(void) setVolume:(float) rampTime:(float)");
}

-(?) lastStartingTime {
	%orig;
	NSLog(@"-(?) lastStartingTime");
}

-(?) lastRequestedStartTime {
	%orig;
	NSLog(@"-(?) lastRequestedStartTime");
}

-(void) addLevelMeterCallback:(id) timeInterval:(?) {
	%orig;
	NSLog(@"-(void) addLevelMeterCallback:(id) timeInterval:(?)");
}

-(void) removeLevelMeterCallback {
	%orig;
	NSLog(@"-(void) removeLevelMeterCallback");
}

-(void) addRepresentationChangedCallback:(id) {
	%orig;
	NSLog(@"-(void) addRepresentationChangedCallback:(id)");
}

-(void) statusUpdated:(long long) {
	%orig;
	NSLog(@"-(void) statusUpdated:(long long)");
}

-(void) currentItemUpdated:(id) {
	%orig;
	NSLog(@"-(void) currentItemUpdated:(id)");
}

-(void) rateUpdated:(float) {
	%orig;
	NSLog(@"-(void) rateUpdated:(float)");
}

-(id) initWithDisplayEngine:(id) {
	%orig;
	NSLog(@"-(id) initWithDisplayEngine:(id)");
}

-(bool) allowsExternalPlayback {
	%orig;
	NSLog(@"-(bool) allowsExternalPlayback");
}

-(void) replaceCurrentItemWithPlayerItem:(id) {
	%orig;
	NSLog(@"-(void) replaceCurrentItemWithPlayerItem:(id)");
}

-(void) removeTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeTimeObserver:(id)");
}

-(void) seekToTime:(?) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) seekToTime:(?) completionHandler:(id)");
}

-(id) addPeriodicTimeObserverForInterval:(?) queue:(id) usingBlock:(id) {
	%orig;
	NSLog(@"-(id) addPeriodicTimeObserverForInterval:(?) queue:(id) usingBlock:(id)");
}

-(void) seekToTime:(?) toleranceBefore:(?) toleranceAfter:(?) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) seekToTime:(?) toleranceBefore:(?) toleranceAfter:(?) completionHandler:(id)");
}

-(void) setAllowsExternalPlayback:(bool) {
	%orig;
	NSLog(@"-(void) setAllowsExternalPlayback:(bool)");
}

-(bool) isMuted {
	%orig;
	NSLog(@"-(bool) isMuted");
}

-(void) setMuted:(bool) {
	%orig;
	NSLog(@"-(void) setMuted:(bool)");
}

-(void) seekToTime:(?) toleranceBefore:(?) toleranceAfter:(?) {
	%orig;
	NSLog(@"-(void) seekToTime:(?) toleranceBefore:(?) toleranceAfter:(?)");
}

-(void) seekToTime:(?) {
	%orig;
	NSLog(@"-(void) seekToTime:(?)");
}

-(void) _applicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) _applicationDidBecomeActive");
}

-(void) setRenderer:(id) {
	%orig;
	NSLog(@"-(void) setRenderer:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) layer {
	%orig;
	NSLog(@"-(id) layer");
}

-(id) currentItem {
	%orig;
	NSLog(@"-(id) currentItem");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(void) setVolume:(float) {
	%orig;
	NSLog(@"-(void) setVolume:(float)");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

-(void) setRate:(float) {
	%orig;
	NSLog(@"-(void) setRate:(float)");
}

-(float) rate {
	%orig;
	NSLog(@"-(float) rate");
}

-(long long) status {
	%orig;
	NSLog(@"-(long long) status");
}

-(void) _applicationWillResignActive {
	%orig;
	NSLog(@"-(void) _applicationWillResignActive");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook FBRewardedVideoAdInternal

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(bool) startAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id) animated:(bool)");
}

-(bool) startAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id)");
}

-(id) rewardedVideoDataModel {
	%orig;
	NSLog(@"-(id) rewardedVideoDataModel");
}

-(long long) minViewabilityPercentage {
	%orig;
	NSLog(@"-(long long) minViewabilityPercentage");
}

-(void) setMinViewabilityPercentage:(long long) {
	%orig;
	NSLog(@"-(void) setMinViewabilityPercentage:(long long)");
}

-(void) setRewardData:(id) {
	%orig;
	NSLog(@"-(void) setRewardData:(id)");
}

-(id) rewardData {
	%orig;
	NSLog(@"-(id) rewardData");
}

-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) rootViewController:(id) rewardData:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) rootViewController:(id) rewardData:(id)");
}

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) setEndCardController:(id) {
	%orig;
	NSLog(@"-(void) setEndCardController:(id)");
}

-(id) endCardController {
	%orig;
	NSLog(@"-(id) endCardController");
}

-(void) checkServerSideReward {
	%orig;
	NSLog(@"-(void) checkServerSideReward");
}

-(void) rewardedVideoAdVideoDidLoad:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdVideoDidLoad:(id)");
}

-(void) rewardedVideoAdVideo:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdVideo:(id) didFailWithError:(id)");
}

-(void) rewardedVideoAdVideoComplete:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdVideoComplete:(id)");
}

-(void) rewardedVideoAdVideoWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdVideoWillLogImpression:(id)");
}

-(void) rewardedVideoAdVideoWillClose:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdVideoWillClose:(id)");
}

-(void) rewardedVideoAdEndCardDidClick:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdEndCardDidClick:(id)");
}

-(void) rewardedVideoAdEndCardWillClose:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdEndCardWillClose:(id)");
}

-(void) setVideoController:(id) {
	%orig;
	NSLog(@"-(void) setVideoController:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook FBAdConnectionUtility

+(id) forceThrottle {
	%orig;
	NSLog(@"+(id) forceThrottle");
}

+(id) getLastLoadTimeForEnvironmentData:(id) {
	%orig;
	NSLog(@"+(id) getLastLoadTimeForEnvironmentData:(id)");
}

+(long long) getLastRefreshThresholdForEnvironmentData:(id) {
	%orig;
	NSLog(@"+(long long) getLastRefreshThresholdForEnvironmentData:(id)");
}

+(id) sharedLastLoadTimeMap {
	%orig;
	NSLog(@"+(id) sharedLastLoadTimeMap");
}

+(id) sharedLastRefreshThresholdMap {
	%orig;
	NSLog(@"+(id) sharedLastRefreshThresholdMap");
}

+(void) setForceThrottle:(id) {
	%orig;
	NSLog(@"+(void) setForceThrottle:(id)");
}

+(bool) shouldThrottleFrequentLoadForEnvironmentData:(id) {
	%orig;
	NSLog(@"+(bool) shouldThrottleFrequentLoadForEnvironmentData:(id)");
}

+(id) cachedResponseForEnvironmentData:(id) {
	%orig;
	NSLog(@"+(id) cachedResponseForEnvironmentData:(id)");
}

+(void) setLastLoadTime:(id) forEnvironmentData:(id) {
	%orig;
	NSLog(@"+(void) setLastLoadTime:(id) forEnvironmentData:(id)");
}

+(void) setLastRefreshThreshold:(long long) forEnvironmentData:(id) {
	%orig;
	NSLog(@"+(void) setLastRefreshThreshold:(long long) forEnvironmentData:(id)");
}

+(void) setCachedResponse:(id) forEnvironmentData:(id) {
	%orig;
	NSLog(@"+(void) setCachedResponse:(id) forEnvironmentData:(id)");
}

%end

%hook FBDisplayAdController

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) stopObservingNotifications {
	%orig;
	NSLog(@"-(void) stopObservingNotifications");
}

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(void) adapter:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailWithError:(id)");
}

-(bool) startAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id) animated:(bool)");
}

-(void) adapterDidClick:(id) url:(id) playerHandles:(bool) {
	%orig;
	NSLog(@"-(void) adapterDidClick:(id) url:(id) playerHandles:(bool)");
}

-(void) adapterDidUnload:(id) {
	%orig;
	NSLog(@"-(void) adapterDidUnload:(id)");
}

-(void) adapterWillUnload:(id) {
	%orig;
	NSLog(@"-(void) adapterWillUnload:(id)");
}

-(void) adapterDidLoad:(id) {
	%orig;
	NSLog(@"-(void) adapterDidLoad:(id)");
}

-(void) adapterWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) adapterWillLogImpression:(id)");
}

-(bool) startAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id)");
}

-(void) adapterDidFinishHandlingClick:(id) {
	%orig;
	NSLog(@"-(void) adapterDidFinishHandlingClick:(id)");
}

-(void) adapterDidComplete:(id) {
	%orig;
	NSLog(@"-(void) adapterDidComplete:(id)");
}

-(void) adapterServerRewardSuccess:(id) {
	%orig;
	NSLog(@"-(void) adapterServerRewardSuccess:(id)");
}

-(void) adapterServerRewardFailed:(id) {
	%orig;
	NSLog(@"-(void) adapterServerRewardFailed:(id)");
}

-(CGSize) actualAdSize {
	%orig;
	NSLog(@"-(CGSize) actualAdSize");
}

-(void) setActualAdSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setActualAdSize:(CGSize)");
}

-(FBAdSize) adSizeType {
	%orig;
	NSLog(@"-(FBAdSize) adSizeType");
}

-(void) setAdSizeType:(FBAdSize) {
	%orig;
	NSLog(@"-(void) setAdSizeType:(FBAdSize)");
}

-(void) setRewardData:(id) {
	%orig;
	NSLog(@"-(void) setRewardData:(id)");
}

-(void) disableAutoRefresh {
	%orig;
	NSLog(@"-(void) disableAutoRefresh");
}

-(id) rewardData {
	%orig;
	NSLog(@"-(id) rewardData");
}

-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) withAdSize:(FBAdSize) withAdProvider:(id) withRewardData:(id) withBidPayload:(id) {
	%orig;
	NSLog(@"-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) withAdSize:(FBAdSize) withAdProvider:(id) withRewardData:(id) withBidPayload:(id)");
}

-(id) placementDefinition {
	%orig;
	NSLog(@"-(id) placementDefinition");
}

-(bool) viewabilityValidator:(id) checkedWithStatus:(long long) {
	%orig;
	NSLog(@"-(bool) viewabilityValidator:(id) checkedWithStatus:(long long)");
}

-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) withAdSize:(FBAdSize) {
	%orig;
	NSLog(@"-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) withAdSize:(FBAdSize)");
}

-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) withAdSize:(FBAdSize) withAdProvider:(id) {
	%orig;
	NSLog(@"-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) withAdSize:(FBAdSize) withAdProvider:(id)");
}

-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) withAdSize:(FBAdSize) withAdProvider:(id) withRewardData:(id) {
	%orig;
	NSLog(@"-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) withAdSize:(FBAdSize) withAdProvider:(id) withRewardData:(id)");
}

-(void) checkInitialization {
	%orig;
	NSLog(@"-(void) checkInitialization");
}

-(void) setPlacementType:(long long) {
	%orig;
	NSLog(@"-(void) setPlacementType:(long long)");
}

-(void) setTemplateID:(long long) {
	%orig;
	NSLog(@"-(void) setTemplateID:(long long)");
}

-(void) setBidPayload:(id) {
	%orig;
	NSLog(@"-(void) setBidPayload:(id)");
}

-(long long) templateID {
	%orig;
	NSLog(@"-(long long) templateID");
}

-(id) bidPayload {
	%orig;
	NSLog(@"-(id) bidPayload");
}

-(void) initialLoadAd {
	%orig;
	NSLog(@"-(void) initialLoadAd");
}

-(void) invalidateCurrentAd {
	%orig;
	NSLog(@"-(void) invalidateCurrentAd");
}

-(void) invalidateInProgressAd {
	%orig;
	NSLog(@"-(void) invalidateInProgressAd");
}

-(void) notifyAdViewPresented {
	%orig;
	NSLog(@"-(void) notifyAdViewPresented");
}

-(void) notifyAdError:(id) {
	%orig;
	NSLog(@"-(void) notifyAdError:(id)");
}

-(void) updateRefreshInterval:(long long) {
	%orig;
	NSLog(@"-(void) updateRefreshInterval:(long long)");
}

-(void) invalidateRefreshTimer {
	%orig;
	NSLog(@"-(void) invalidateRefreshTimer");
}

-(id) currentPlacementDefinition {
	%orig;
	NSLog(@"-(id) currentPlacementDefinition");
}

-(bool) adapterHadImpression {
	%orig;
	NSLog(@"-(bool) adapterHadImpression");
}

-(bool) controllerHadImpression {
	%orig;
	NSLog(@"-(bool) controllerHadImpression");
}

-(void) setAdapterHadImpression:(bool) {
	%orig;
	NSLog(@"-(void) setAdapterHadImpression:(bool)");
}

-(void) setControllerHadImpression:(bool) {
	%orig;
	NSLog(@"-(void) setControllerHadImpression:(bool)");
}

-(void) notifyAdImpression {
	%orig;
	NSLog(@"-(void) notifyAdImpression");
}

-(id) currentAdCandidate {
	%orig;
	NSLog(@"-(id) currentAdCandidate");
}

-(void) notifyAdClickThruWithURL:(id) playerHandles:(bool) {
	%orig;
	NSLog(@"-(void) notifyAdClickThruWithURL:(id) playerHandles:(bool)");
}

-(void) notifyAdUserClose {
	%orig;
	NSLog(@"-(void) notifyAdUserClose");
}

-(void) notifyAdStopped {
	%orig;
	NSLog(@"-(void) notifyAdStopped");
}

-(void) logImpressionFromSource:(long long) {
	%orig;
	NSLog(@"-(void) logImpressionFromSource:(long long)");
}

-(void) notifyAdVideoComplete {
	%orig;
	NSLog(@"-(void) notifyAdVideoComplete");
}

-(void) setCurrentViewabilityValidator:(id) {
	%orig;
	NSLog(@"-(void) setCurrentViewabilityValidator:(id)");
}

-(id) currentViewabilityValidator {
	%orig;
	NSLog(@"-(id) currentViewabilityValidator");
}

-(id) nextAdapter {
	%orig;
	NSLog(@"-(id) nextAdapter");
}

-(double) adapterLoadTime {
	%orig;
	NSLog(@"-(double) adapterLoadTime");
}

-(void) setAdapterLoadTime:(double) {
	%orig;
	NSLog(@"-(void) setAdapterLoadTime:(double)");
}

-(void) setCurrentAdapter:(id) {
	%orig;
	NSLog(@"-(void) setCurrentAdapter:(id)");
}

-(id) nextPlacementDefinition {
	%orig;
	NSLog(@"-(id) nextPlacementDefinition");
}

-(void) setCurrentPlacementDefinition:(id) {
	%orig;
	NSLog(@"-(void) setCurrentPlacementDefinition:(id)");
}

-(void) ensureViewabilityValidator {
	%orig;
	NSLog(@"-(void) ensureViewabilityValidator");
}

-(void) setNextAdapter:(id) {
	%orig;
	NSLog(@"-(void) setNextAdapter:(id)");
}

-(id) nextAdapterTimeoutTimer {
	%orig;
	NSLog(@"-(id) nextAdapterTimeoutTimer");
}

-(void) setNextAdapterTimeoutTimer:(id) {
	%orig;
	NSLog(@"-(void) setNextAdapterTimeoutTimer:(id)");
}

-(void) setNextAdsData:(id) {
	%orig;
	NSLog(@"-(void) setNextAdsData:(id)");
}

-(void) setNextAdsDataCurrentPos:(long long) {
	%orig;
	NSLog(@"-(void) setNextAdsDataCurrentPos:(long long)");
}

-(void) setNextAdapterName:(id) {
	%orig;
	NSLog(@"-(void) setNextAdapterName:(id)");
}

-(void) notifyAdLoaded {
	%orig;
	NSLog(@"-(void) notifyAdLoaded");
}

-(bool) tryNextAdFromList {
	%orig;
	NSLog(@"-(bool) tryNextAdFromList");
}

-(void) scheduleRefreshIn:(long long) {
	%orig;
	NSLog(@"-(void) scheduleRefreshIn:(long long)");
}

-(id) nextAdapterName {
	%orig;
	NSLog(@"-(id) nextAdapterName");
}

-(void) setInitialAdViewSize:(FBAdSize) {
	%orig;
	NSLog(@"-(void) setInitialAdViewSize:(FBAdSize)");
}

-(void) setFlexibleAdSize:(bool) {
	%orig;
	NSLog(@"-(void) setFlexibleAdSize:(bool)");
}

-(bool) isFlexibleAdSize {
	%orig;
	NSLog(@"-(bool) isFlexibleAdSize");
}

-(void) setNextPlacementDefinition:(id) {
	%orig;
	NSLog(@"-(void) setNextPlacementDefinition:(id)");
}

-(void) onAdRequestError:(id) {
	%orig;
	NSLog(@"-(void) onAdRequestError:(id)");
}

-(long long) nextAdsDataCurrentPos {
	%orig;
	NSLog(@"-(long long) nextAdsDataCurrentPos");
}

-(id) nextAdsData {
	%orig;
	NSLog(@"-(id) nextAdsData");
}

-(void) setCurrentAdCandidate:(id) {
	%orig;
	NSLog(@"-(void) setCurrentAdCandidate:(id)");
}

-(void) scheduleTimeout:(long long) {
	%orig;
	NSLog(@"-(void) scheduleTimeout:(long long)");
}

-(bool) startAd {
	%orig;
	NSLog(@"-(bool) startAd");
}

-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long) {
	%orig;
	NSLog(@"-(void) loadAdWithPlacementId:(id) withPlacementType:(long long) withTemplateID:(long long)");
}

-(void) onApplicationBackgrounded {
	%orig;
	NSLog(@"-(void) onApplicationBackgrounded");
}

-(void) onApplicationForegrounded {
	%orig;
	NSLog(@"-(void) onApplicationForegrounded");
}

-(void) onAdRequestSuccess:(id) {
	%orig;
	NSLog(@"-(void) onAdRequestSuccess:(id)");
}

-(void) setAdProvider:(id) {
	%orig;
	NSLog(@"-(void) setAdProvider:(id)");
}

-(id) currentAdapter {
	%orig;
	NSLog(@"-(id) currentAdapter");
}

-(void) disableViewabilityValidator {
	%orig;
	NSLog(@"-(void) disableViewabilityValidator");
}

-(bool) loaded {
	%orig;
	NSLog(@"-(bool) loaded");
}

-(void) setRetryCount:(long long) {
	%orig;
	NSLog(@"-(void) setRetryCount:(long long)");
}

-(long long) retryCount {
	%orig;
	NSLog(@"-(long long) retryCount");
}

-(bool) initialized {
	%orig;
	NSLog(@"-(bool) initialized");
}

-(void) retry {
	%orig;
	NSLog(@"-(void) retry");
}

-(void) setLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setLoaded:(bool)");
}

-(void) setInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setInitialized:(bool)");
}

-(void) startObservingNotifications {
	%orig;
	NSLog(@"-(void) startObservingNotifications");
}

-(void) invalidateTimeoutTimer {
	%orig;
	NSLog(@"-(void) invalidateTimeoutTimer");
}

-(void) setRefreshInterval:(long long) {
	%orig;
	NSLog(@"-(void) setRefreshInterval:(long long)");
}

-(void) scheduleRefresh {
	%orig;
	NSLog(@"-(void) scheduleRefresh");
}

-(long long) placementType {
	%orig;
	NSLog(@"-(long long) placementType");
}

-(id) adProvider {
	%orig;
	NSLog(@"-(id) adProvider");
}

-(id) refreshTimer {
	%orig;
	NSLog(@"-(id) refreshTimer");
}

-(void) setRefreshTimer:(id) {
	%orig;
	NSLog(@"-(void) setRefreshTimer:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) environment {
	%orig;
	NSLog(@"-(id) environment");
}

-(void) setEnvironment:(id) {
	%orig;
	NSLog(@"-(void) setEnvironment:(id)");
}

-(void) refresh {
	%orig;
	NSLog(@"-(void) refresh");
}

-(bool) started {
	%orig;
	NSLog(@"-(bool) started");
}

-(void) setStarted:(bool) {
	%orig;
	NSLog(@"-(void) setStarted:(bool)");
}

-(long long) refreshInterval {
	%orig;
	NSLog(@"-(long long) refreshInterval");
}

%end

%hook FBAdCandidate

+(long long) trackerTypeFromString:(id) {
	%orig;
	NSLog(@"+(long long) trackerTypeFromString:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setAdapterID:(id) {
	%orig;
	NSLog(@"-(void) setAdapterID:(id)");
}

-(void) setTrackersByType:(id) {
	%orig;
	NSLog(@"-(void) setTrackersByType:(id)");
}

-(void) setTrackersFired:(id) {
	%orig;
	NSLog(@"-(void) setTrackersFired:(id)");
}

-(id) trackersByType {
	%orig;
	NSLog(@"-(id) trackersByType");
}

-(id) trackersFired {
	%orig;
	NSLog(@"-(id) trackersFired");
}

-(id) initWithAdapterID:(id) data:(id) trackers:(id) {
	%orig;
	NSLog(@"-(id) initWithAdapterID:(id) data:(id) trackers:(id)");
}

-(void) fireTrackers:(long long) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) fireTrackers:(long long) withExtraData:(id)");
}

-(id) adapterID {
	%orig;
	NSLog(@"-(id) adapterID");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook FBRewardedVideoRewardData

-(id) initWithUserID:(id) withCurrency:(id) withAmount:(long long) {
	%orig;
	NSLog(@"-(id) initWithUserID:(id) withCurrency:(id) withAmount:(long long)");
}

-(id) currency {
	%orig;
	NSLog(@"-(id) currency");
}

-(id) userID {
	%orig;
	NSLog(@"-(id) userID");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) amount {
	%orig;
	NSLog(@"-(long long) amount");
}

%end

%hook FNFDashRepresentationProperties

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(id) qualityLabel {
	%orig;
	NSLog(@"-(id) qualityLabel");
}

-(unsigned int) bandwidth {
	%orig;
	NSLog(@"-(unsigned int) bandwidth");
}

-(id) initWithTrack:(id) {
	%orig;
	NSLog(@"-(id) initWithTrack:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned int) width {
	%orig;
	NSLog(@"-(unsigned int) width");
}

-(unsigned int) height {
	%orig;
	NSLog(@"-(unsigned int) height");
}

%end

%hook FNFMediaPresentationDescription

+(id) presentationDescriptionWithContentsOfXml:(id) mpdUrl:(id) segmentsFromEndToStartForLive:(unsigned int) vp9Enabled:(bool) error:(id*) {
	%orig;
	NSLog(@"+(id) presentationDescriptionWithContentsOfXml:(id) mpdUrl:(id) segmentsFromEndToStartForLive:(unsigned int) vp9Enabled:(bool) error:(id*)");
}

+(_NSRange) rangeFromStartToEndString:(id) {
	%orig;
	NSLog(@"+(_NSRange) rangeFromStartToEndString:(id)");
}

+(id) urlFromBase:(id) suffix:(id) {
	%orig;
	NSLog(@"+(id) urlFromBase:(id) suffix:(id)");
}

-(bool) isFragmented {
	%orig;
	NSLog(@"-(bool) isFragmented");
}

-(id) mpdAccessibilityDescription {
	%orig;
	NSLog(@"-(id) mpdAccessibilityDescription");
}

-(id) availabilityEndTime {
	%orig;
	NSLog(@"-(id) availabilityEndTime");
}

-(double) publishFrameTimeMS {
	%orig;
	NSLog(@"-(double) publishFrameTimeMS");
}

-(id) initWithAudioTracks:(id) videoTracks:(id) isDynamic:(bool) isFragmented:(bool) durationMS:(unsigned int) videoType:(long long) mpdAccessibilityDescription:(id) publishFrameTime:(unsigned long long) availabilityEndTime:(id) {
	%orig;
	NSLog(@"-(id) initWithAudioTracks:(id) videoTracks:(id) isDynamic:(bool) isFragmented:(bool) durationMS:(unsigned int) videoType:(long long) mpdAccessibilityDescription:(id) publishFrameTime:(unsigned long long) availabilityEndTime:(id)");
}

-(unsigned int) durationMS {
	%orig;
	NSLog(@"-(unsigned int) durationMS");
}

-(id) audioTracks {
	%orig;
	NSLog(@"-(id) audioTracks");
}

-(id) videoTracks {
	%orig;
	NSLog(@"-(id) videoTracks");
}

-(long long) videoType {
	%orig;
	NSLog(@"-(long long) videoType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isDynamic {
	%orig;
	NSLog(@"-(bool) isDynamic");
}

%end

%hook FBRewardedVideoAd

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithPlacementID:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id)");
}

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(bool) showAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id) animated:(bool)");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(id) initWithPlacementID:(id) withUserID:(id) withCurrency:(id) withAmount:(long long) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) withUserID:(id) withCurrency:(id) withAmount:(long long)");
}

-(void) setAdController:(id) {
	%orig;
	NSLog(@"-(void) setAdController:(id)");
}

-(void) setShowCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setShowCount:(unsigned long long)");
}

-(void) setRewardData:(id) {
	%orig;
	NSLog(@"-(void) setRewardData:(id)");
}

-(id) rewardData {
	%orig;
	NSLog(@"-(id) rewardData");
}

-(void) doLoadAd:(id) {
	%orig;
	NSLog(@"-(void) doLoadAd:(id)");
}

-(unsigned long long) showCount {
	%orig;
	NSLog(@"-(unsigned long long) showCount");
}

-(void) displayAdControllerLoaded:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerLoaded:(id)");
}

-(void) displayAdControllerStopped:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerStopped:(id)");
}

-(void) displayAdController:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) didFailWithError:(id)");
}

-(void) displayAdControllerImpression:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerImpression:(id)");
}

-(void) displayAdController:(id) clickThruWithURL:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) clickThruWithURL:(id)");
}

-(void) displayAdControllerUserClosed:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerUserClosed:(id)");
}

-(void) displayAdControllerVideoComplete:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerVideoComplete:(id)");
}

-(void) displayAdControllerServerRewardSuccess:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerServerRewardSuccess:(id)");
}

-(void) displayAdControllerServerRewardFailed:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerServerRewardFailed:(id)");
}

-(id) initWithPlacementID:(id) withUserID:(id) withCurrency:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) withUserID:(id) withCurrency:(id)");
}

-(bool) isReady {
	%orig;
	NSLog(@"-(bool) isReady");
}

-(bool) isInitialized {
	%orig;
	NSLog(@"-(bool) isInitialized");
}

-(void) setInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setInitialized:(bool)");
}

-(id) adController {
	%orig;
	NSLog(@"-(id) adController");
}

-(void) setReady:(bool) {
	%orig;
	NSLog(@"-(void) setReady:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook FNFDashPlaylistLoader

-(void) _cancelPlaylistTimer {
	%orig;
	NSLog(@"-(void) _cancelPlaylistTimer");
}

-(bool) _handleMpdData:(id) {
	%orig;
	NSLog(@"-(bool) _handleMpdData:(id)");
}

-(void) _updatePlaylist {
	%orig;
	NSLog(@"-(void) _updatePlaylist");
}

-(id) _baseMutableStringForPushParams:(id) {
	%orig;
	NSLog(@"-(id) _baseMutableStringForPushParams:(id)");
}

-(id) _addPushParamsForFirstRequest:(id) {
	%orig;
	NSLog(@"-(id) _addPushParamsForFirstRequest:(id)");
}

-(id) _addPushParamsForContinuousRequests:(id) {
	%orig;
	NSLog(@"-(id) _addPushParamsForContinuousRequests:(id)");
}

-(void) _playlistLoadingRequestCallback:(id) error:(id) {
	%orig;
	NSLog(@"-(void) _playlistLoadingRequestCallback:(id) error:(id)");
}

-(void) logManifestWithMessage:(id) mpdData:(id) {
	%orig;
	NSLog(@"-(void) logManifestWithMessage:(id) mpdData:(id)");
}

-(void) _validateTrackListsForMpd:(id) {
	%orig;
	NSLog(@"-(void) _validateTrackListsForMpd:(id)");
}

-(void) _markAvailableQualitiesForMpd:(id) {
	%orig;
	NSLog(@"-(void) _markAvailableQualitiesForMpd:(id)");
}

-(id) _selectFragmentedVideoTrackFromMpd:(id) {
	%orig;
	NSLog(@"-(id) _selectFragmentedVideoTrackFromMpd:(id)");
}

-(bool) _isValidEnoughToContinueWithVideoTrack:(id) type:(long long) {
	%orig;
	NSLog(@"-(bool) _isValidEnoughToContinueWithVideoTrack:(id) type:(long long)");
}

-(void) _markCbrSelectedQuality:(id) {
	%orig;
	NSLog(@"-(void) _markCbrSelectedQuality:(id)");
}

-(void) _extractMetadataFromAudioTrack:(id) {
	%orig;
	NSLog(@"-(void) _extractMetadataFromAudioTrack:(id)");
}

-(double) publishFrameTimeMS {
	%orig;
	NSLog(@"-(double) publishFrameTimeMS");
}

-(id) _selectSegmentedVideoTrackFromMpd:(id) {
	%orig;
	NSLog(@"-(id) _selectSegmentedVideoTrackFromMpd:(id)");
}

-(void) _validateVideoTrack:(id) audioTrack:(id) {
	%orig;
	NSLog(@"-(void) _validateVideoTrack:(id) audioTrack:(id)");
}

-(void) _addEntriesFromTrackMetadata:(id) track:(long long) {
	%orig;
	NSLog(@"-(void) _addEntriesFromTrackMetadata:(id) track:(long long)");
}

-(void) _logStalenessForVideoTrack:(id) {
	%orig;
	NSLog(@"-(void) _logStalenessForVideoTrack:(id)");
}

-(void) _capUnfetchedSegmentsIfNecessary {
	%orig;
	NSLog(@"-(void) _capUnfetchedSegmentsIfNecessary");
}

-(void) _updatePlaylistTimerForPlaylistWasDynamic:(bool) {
	%orig;
	NSLog(@"-(void) _updatePlaylistTimerForPlaylistWasDynamic:(bool)");
}

-(id) initWithMpdUrl:(id) mpdData:(id) playlistData:(id) resourceLoader:(id) abrSelector:(id) segmentsFromEndToStartPrefetch:(int) segmentsFromEndToStartUpdate:(int) unfetchedSegmentCap:(int) unfetchedSegmentsAfterCap:(int) staleMpdUpdatesThreshold:(int) pushInitialSegmentCount:(int) pushContinuousSegmentCount:(int) minutesToPadAvailEndTime:(int) ignorePrefetchQualitySelection:(bool) enableVP9:(bool) {
	%orig;
	NSLog(@"-(id) initWithMpdUrl:(id) mpdData:(id) playlistData:(id) resourceLoader:(id) abrSelector:(id) segmentsFromEndToStartPrefetch:(int) segmentsFromEndToStartUpdate:(int) unfetchedSegmentCap:(int) unfetchedSegmentsAfterCap:(int) staleMpdUpdatesThreshold:(int) pushInitialSegmentCount:(int) pushContinuousSegmentCount:(int) minutesToPadAvailEndTime:(int) ignorePrefetchQualitySelection:(bool) enableVP9:(bool)");
}

-(void) handleInlinedManifest {
	%orig;
	NSLog(@"-(void) handleInlinedManifest");
}

-(void) forcePlaylistUpdate {
	%orig;
	NSLog(@"-(void) forcePlaylistUpdate");
}

-(void) pauseWithUnplayedData:(unsigned int) {
	%orig;
	NSLog(@"-(void) pauseWithUnplayedData:(unsigned int)");
}

-(bool) isStreamDry {
	%orig;
	NSLog(@"-(bool) isStreamDry");
}

-(unsigned int) unfetchedSegmentCapHitCount {
	%orig;
	NSLog(@"-(unsigned int) unfetchedSegmentCapHitCount");
}

-(void) _forTestingOverrideTimerManager:(id) {
	%orig;
	NSLog(@"-(void) _forTestingOverrideTimerManager:(id)");
}

-(void) _forTestingMakeSynchronous {
	%orig;
	NSLog(@"-(void) _forTestingMakeSynchronous");
}

-(void) _forTestingEnableLiveMidstreamSwitch {
	%orig;
	NSLog(@"-(void) _forTestingEnableLiveMidstreamSwitch");
}

-(void) _forTestingEnableVodMidstreamSwitch {
	%orig;
	NSLog(@"-(void) _forTestingEnableVodMidstreamSwitch");
}

-(unsigned int) segmentsFromEndToStart {
	%orig;
	NSLog(@"-(unsigned int) segmentsFromEndToStart");
}

-(bool) live {
	%orig;
	NSLog(@"-(bool) live");
}

-(id) playlistData {
	%orig;
	NSLog(@"-(id) playlistData");
}

-(id) resourceLoader {
	%orig;
	NSLog(@"-(id) resourceLoader");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

%end

%hook FBNativeAdCollectionViewAdProvider

-(void) nativeAdWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) nativeAdWillLogImpression:(id)");
}

-(void) nativeAdDidClick:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidClick:(id)");
}

-(void) nativeAdDidFinishHandlingClick:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidFinishHandlingClick:(id)");
}

-(id) currentIndexPathToAdMap {
	%orig;
	NSLog(@"-(id) currentIndexPathToAdMap");
}

-(void) setCurrentIndexPathToAdMap:(id) {
	%orig;
	NSLog(@"-(void) setCurrentIndexPathToAdMap:(id)");
}

-(bool) isAdCellAtIndexPath:(id) forStride:(unsigned long long) {
	%orig;
	NSLog(@"-(bool) isAdCellAtIndexPath:(id) forStride:(unsigned long long)");
}

-(void) nativeAdsLoaded {
	%orig;
	NSLog(@"-(void) nativeAdsLoaded");
}

-(void) nativeAdsFailedToLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) nativeAdsFailedToLoadWithError:(id)");
}

-(id) adjustNonAdCellIndexPath:(id) forStride:(unsigned long long) {
	%orig;
	NSLog(@"-(id) adjustNonAdCellIndexPath:(id) forStride:(unsigned long long)");
}

-(unsigned long long) adjustCount:(unsigned long long) forStride:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) adjustCount:(unsigned long long) forStride:(unsigned long long)");
}

-(id) collectionView:(id) nativeAdForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) nativeAdForRowAtIndexPath:(id)");
}

-(id) initWithManager:(id) {
	%orig;
	NSLog(@"-(id) initWithManager:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) manager {
	%orig;
	NSLog(@"-(id) manager");
}

-(void) setManager:(id) {
	%orig;
	NSLog(@"-(void) setManager:(id)");
}

%end

%hook FBNativeAdCollectionViewCellProvider

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) currentIndexPathToAdMap {
	%orig;
	NSLog(@"-(id) currentIndexPathToAdMap");
}

-(void) setCurrentIndexPathToAdMap:(id) {
	%orig;
	NSLog(@"-(void) setCurrentIndexPathToAdMap:(id)");
}

-(id) initWithManager:(id) forType:(long long) forAttributes:(id) {
	%orig;
	NSLog(@"-(id) initWithManager:(id) forType:(long long) forAttributes:(id)");
}

-(id) initWithManager:(id) forType:(long long) {
	%orig;
	NSLog(@"-(id) initWithManager:(id) forType:(long long)");
}

-(id) uniqueCollectionCellIdentifier {
	%orig;
	NSLog(@"-(id) uniqueCollectionCellIdentifier");
}

-(void) setUniqueCollectionCellIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setUniqueCollectionCellIdentifier:(id)");
}

-(long long) collectionView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfRowsInSection:(long long)");
}

-(double) collectionView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) collectionView:(id) heightForRowAtIndexPath:(id)");
}

-(id) collectionCellIdentifier {
	%orig;
	NSLog(@"-(id) collectionCellIdentifier");
}

-(id) initWithManager:(id) {
	%orig;
	NSLog(@"-(id) initWithManager:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(void) setAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAttributes:(id)");
}

-(id) manager {
	%orig;
	NSLog(@"-(id) manager");
}

-(void) setManager:(id) {
	%orig;
	NSLog(@"-(void) setManager:(id)");
}

%end

%hook FBAdEventToken

+(id) deserializeFromSqlite:(sqlite3_stmt*) {
	%orig;
	NSLog(@"+(id) deserializeFromSqlite:(sqlite3_stmt*)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setTokenId:(id) {
	%orig;
	NSLog(@"-(void) setTokenId:(id)");
}

-(id) initWithToken:(id) {
	%orig;
	NSLog(@"-(id) initWithToken:(id)");
}

-(id) tokenId {
	%orig;
	NSLog(@"-(id) tokenId");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) token {
	%orig;
	NSLog(@"-(id) token");
}

-(void) setToken:(id) {
	%orig;
	NSLog(@"-(void) setToken:(id)");
}

%end

%hook FBAdDataModel

-(id) inlineClientToken {
	%orig;
	NSLog(@"-(id) inlineClientToken");
}

-(id) requestId {
	%orig;
	NSLog(@"-(id) requestId");
}

-(id) initWithMetadata:(id) {
	%orig;
	NSLog(@"-(id) initWithMetadata:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook FBInstreamAdDataModel

-(id) skippableSeconds {
	%orig;
	NSLog(@"-(id) skippableSeconds");
}

-(bool) persistentAdDetails {
	%orig;
	NSLog(@"-(bool) persistentAdDetails");
}

-(id) callToActionText {
	%orig;
	NSLog(@"-(id) callToActionText");
}

-(id) videoHDURL {
	%orig;
	NSLog(@"-(id) videoHDURL");
}

-(id) countdownFormat {
	%orig;
	NSLog(@"-(id) countdownFormat");
}

-(bool) countdownEnabled {
	%orig;
	NSLog(@"-(bool) countdownEnabled");
}

-(id) clickLoggingURL {
	%orig;
	NSLog(@"-(id) clickLoggingURL");
}

-(id) clientEventReportURL {
	%orig;
	NSLog(@"-(id) clientEventReportURL");
}

-(id) impressionLoggingURL {
	%orig;
	NSLog(@"-(id) impressionLoggingURL");
}

-(id) nativeImpressionLoggingURL {
	%orig;
	NSLog(@"-(id) nativeImpressionLoggingURL");
}

-(id) videoLoggingURL {
	%orig;
	NSLog(@"-(id) videoLoggingURL");
}

-(id) destinationURL {
	%orig;
	NSLog(@"-(id) destinationURL");
}

-(id) videoURL {
	%orig;
	NSLog(@"-(id) videoURL");
}

-(id) initWithMetadata:(id) {
	%orig;
	NSLog(@"-(id) initWithMetadata:(id)");
}

-(bool) autoplay {
	%orig;
	NSLog(@"-(bool) autoplay");
}

-(id) accentColor {
	%orig;
	NSLog(@"-(id) accentColor");
}

-(id) callToActionURL {
	%orig;
	NSLog(@"-(id) callToActionURL");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) subtitle {
	%orig;
	NSLog(@"-(id) subtitle");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(id) icon {
	%orig;
	NSLog(@"-(id) icon");
}

-(id) textColor {
	%orig;
	NSLog(@"-(id) textColor");
}

-(long long) orientation {
	%orig;
	NSLog(@"-(long long) orientation");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook FBRewardedVideoAdDataModel

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) callToAction {
	%orig;
	NSLog(@"-(id) callToAction");
}

-(id) activationCommand {
	%orig;
	NSLog(@"-(id) activationCommand");
}

-(id) socialContext {
	%orig;
	NSLog(@"-(id) socialContext");
}

-(bool) fullyClickable {
	%orig;
	NSLog(@"-(bool) fullyClickable");
}

-(long long) snapshotDelayPostInSecond {
	%orig;
	NSLog(@"-(long long) snapshotDelayPostInSecond");
}

-(id) commandURL {
	%orig;
	NSLog(@"-(id) commandURL");
}

-(bool) manualImpressionEnabled {
	%orig;
	NSLog(@"-(bool) manualImpressionEnabled");
}

-(bool) viewJSONLoggingEnabled {
	%orig;
	NSLog(@"-(bool) viewJSONLoggingEnabled");
}

-(bool) viewSnapshotLoggingEnabled {
	%orig;
	NSLog(@"-(bool) viewSnapshotLoggingEnabled");
}

-(double) snapshotCompressionQuality {
	%orig;
	NSLog(@"-(double) snapshotCompressionQuality");
}

-(id) adChoicesIcon {
	%orig;
	NSLog(@"-(id) adChoicesIcon");
}

-(id) adChoicesLinkURL {
	%orig;
	NSLog(@"-(id) adChoicesLinkURL");
}

-(id) adChoicesText {
	%orig;
	NSLog(@"-(id) adChoicesText");
}

-(bool) videoAutoplayEnabled {
	%orig;
	NSLog(@"-(bool) videoAutoplayEnabled");
}

-(id) skippableSeconds {
	%orig;
	NSLog(@"-(id) skippableSeconds");
}

-(id) contextSwitch {
	%orig;
	NSLog(@"-(id) contextSwitch");
}

-(FBAdStarRating) starRating {
	%orig;
	NSLog(@"-(FBAdStarRating) starRating");
}

-(id) destinationURL {
	%orig;
	NSLog(@"-(id) destinationURL");
}

-(id) iconURL {
	%orig;
	NSLog(@"-(id) iconURL");
}

-(id) videoURL {
	%orig;
	NSLog(@"-(id) videoURL");
}

-(id) initWithMetadata:(id) {
	%orig;
	NSLog(@"-(id) initWithMetadata:(id)");
}

-(id) markup {
	%orig;
	NSLog(@"-(id) markup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) subtitle {
	%orig;
	NSLog(@"-(id) subtitle");
}

-(id) metadata {
	%orig;
	NSLog(@"-(id) metadata");
}

-(id) body {
	%orig;
	NSLog(@"-(id) body");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook FBNativeAdMultiProductDataModel

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) callToAction {
	%orig;
	NSLog(@"-(id) callToAction");
}

-(id) commandURL {
	%orig;
	NSLog(@"-(id) commandURL");
}

-(id) initWithMetadata:(id) {
	%orig;
	NSLog(@"-(id) initWithMetadata:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) subtitle {
	%orig;
	NSLog(@"-(id) subtitle");
}

-(id) metadata {
	%orig;
	NSLog(@"-(id) metadata");
}

-(id) body {
	%orig;
	NSLog(@"-(id) body");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook FBNativeAdDataModel

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) callToAction {
	%orig;
	NSLog(@"-(id) callToAction");
}

-(id) adViewAttributes {
	%orig;
	NSLog(@"-(id) adViewAttributes");
}

-(id) socialContext {
	%orig;
	NSLog(@"-(id) socialContext");
}

-(bool) fullyClickable {
	%orig;
	NSLog(@"-(bool) fullyClickable");
}

-(long long) snapshotDelayPostInSecond {
	%orig;
	NSLog(@"-(long long) snapshotDelayPostInSecond");
}

-(id) commandURL {
	%orig;
	NSLog(@"-(id) commandURL");
}

-(id) processMultiProductAdMetadata:(id) {
	%orig;
	NSLog(@"-(id) processMultiProductAdMetadata:(id)");
}

-(bool) manualImpressionEnabled {
	%orig;
	NSLog(@"-(bool) manualImpressionEnabled");
}

-(bool) viewJSONLoggingEnabled {
	%orig;
	NSLog(@"-(bool) viewJSONLoggingEnabled");
}

-(bool) viewSnapshotLoggingEnabled {
	%orig;
	NSLog(@"-(bool) viewSnapshotLoggingEnabled");
}

-(double) snapshotCompressionQuality {
	%orig;
	NSLog(@"-(double) snapshotCompressionQuality");
}

-(id) adChoicesIcon {
	%orig;
	NSLog(@"-(id) adChoicesIcon");
}

-(id) adChoicesLinkURL {
	%orig;
	NSLog(@"-(id) adChoicesLinkURL");
}

-(id) adChoicesText {
	%orig;
	NSLog(@"-(id) adChoicesText");
}

-(id) videoAutoplayEnabled {
	%orig;
	NSLog(@"-(id) videoAutoplayEnabled");
}

-(id) multiProductAdContent {
	%orig;
	NSLog(@"-(id) multiProductAdContent");
}

-(FBAdStarRating) starRating {
	%orig;
	NSLog(@"-(FBAdStarRating) starRating");
}

-(id) destinationURL {
	%orig;
	NSLog(@"-(id) destinationURL");
}

-(id) videoURL {
	%orig;
	NSLog(@"-(id) videoURL");
}

-(id) initWithMetadata:(id) {
	%orig;
	NSLog(@"-(id) initWithMetadata:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) subtitle {
	%orig;
	NSLog(@"-(id) subtitle");
}

-(id) icon {
	%orig;
	NSLog(@"-(id) icon");
}

-(id) metadata {
	%orig;
	NSLog(@"-(id) metadata");
}

-(id) body {
	%orig;
	NSLog(@"-(id) body");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook FBHTMLAdDataModel

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) activationCommand {
	%orig;
	NSLog(@"-(id) activationCommand");
}

-(id) isTablet {
	%orig;
	NSLog(@"-(id) isTablet");
}

-(id) adHeight {
	%orig;
	NSLog(@"-(id) adHeight");
}

-(id) adWidth {
	%orig;
	NSLog(@"-(id) adWidth");
}

-(id) initWithMetadata:(id) {
	%orig;
	NSLog(@"-(id) initWithMetadata:(id)");
}

-(id) markup {
	%orig;
	NSLog(@"-(id) markup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) orientation {
	%orig;
	NSLog(@"-(long long) orientation");
}

-(id) isVideo {
	%orig;
	NSLog(@"-(id) isVideo");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook FNFRealTimer

-(id) initWithInterval:(unsigned long long) fireOnce:(bool) queue:(id) block:(id) {
	%orig;
	NSLog(@"-(id) initWithInterval:(unsigned long long) fireOnce:(bool) queue:(id) block:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook FNFRealTimerManager

-(id) createTimerWithInterval:(unsigned long long) fireOnce:(bool) queue:(id) block:(id) {
	%orig;
	NSLog(@"-(id) createTimerWithInterval:(unsigned long long) fireOnce:(bool) queue:(id) block:(id)");
}

%end

%hook FBAdImageMetalRenderer

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setCiContext:(id) {
	%orig;
	NSLog(@"-(void) setCiContext:(id)");
}

-(id) initWithMTLDevice:(id) {
	%orig;
	NSLog(@"-(id) initWithMTLDevice:(id)");
}

-(id) mtkView {
	%orig;
	NSLog(@"-(id) mtkView");
}

-(void) setMtkView:(id) {
	%orig;
	NSLog(@"-(void) setMtkView:(id)");
}

-(void) setCiImage:(id) {
	%orig;
	NSLog(@"-(void) setCiImage:(id)");
}

-(void) renderCIImage:(id) {
	%orig;
	NSLog(@"-(void) renderCIImage:(id)");
}

-(id) ciImage {
	%orig;
	NSLog(@"-(id) ciImage");
}

-(id) commandQueue {
	%orig;
	NSLog(@"-(id) commandQueue");
}

-(void) setCommandQueue:(id) {
	%orig;
	NSLog(@"-(void) setCommandQueue:(id)");
}

-(id) device {
	%orig;
	NSLog(@"-(id) device");
}

-(void) setDevice:(id) {
	%orig;
	NSLog(@"-(void) setDevice:(id)");
}

-(id) ciContext {
	%orig;
	NSLog(@"-(id) ciContext");
}

-(void) mtkView:(id) drawableSizeWillChange:(CGSize) {
	%orig;
	NSLog(@"-(void) mtkView:(id) drawableSizeWillChange:(CGSize)");
}

-(void) drawInMTKView:(id) {
	%orig;
	NSLog(@"-(void) drawInMTKView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

%end

%hook FNFDefaultRenderer

-(bool) _loadShaders {
	%orig;
	NSLog(@"-(bool) _loadShaders");
}

-(void) _configureVertexAttributes {
	%orig;
	NSLog(@"-(void) _configureVertexAttributes");
}

-(bool) _updateVertexArrayWithPresentationRect:(CGSize) videoGravity:(id) layerBounds:(CGRect) transform:(CGAffineTransform) {
	%orig;
	NSLog(@"-(bool) _updateVertexArrayWithPresentationRect:(CGSize) videoGravity:(id) layerBounds:(CGRect) transform:(CGAffineTransform)");
}

-(bool) shouldRenderWhilePlaybackPaused {
	%orig;
	NSLog(@"-(bool) shouldRenderWhilePlaybackPaused");
}

-(bool) _setupBuffers {
	%orig;
	NSLog(@"-(bool) _setupBuffers");
}

-(void) restoreGLState {
	%orig;
	NSLog(@"-(void) restoreGLState");
}

-(bool) setupGLState {
	%orig;
	NSLog(@"-(bool) setupGLState");
}

-(bool) drawFrame:(bool) presentationRect:(CGSize) backingWidth:(int) backingHeight:(int) frameBuffer:(unsigned int) videoGravity:(id) rotation:(double) layerBounds:(CGRect) transform:(CGAffineTransform) colorConversion:(const float*) {
	%orig;
	NSLog(@"-(bool) drawFrame:(bool) presentationRect:(CGSize) backingWidth:(int) backingHeight:(int) frameBuffer:(unsigned int) videoGravity:(id) rotation:(double) layerBounds:(CGRect) transform:(CGAffineTransform) colorConversion:(const float*)");
}

-(void) processPixelBuffer:(__CVBuffer*) {
	%orig;
	NSLog(@"-(void) processPixelBuffer:(__CVBuffer*)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) invalidate {
	%orig;
	NSLog(@"-(void) invalidate");
}

%end

%hook FBAdImageSoftwareRenderer

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setCiContext:(id) {
	%orig;
	NSLog(@"-(void) setCiContext:(id)");
}

-(id) internalImageView {
	%orig;
	NSLog(@"-(id) internalImageView");
}

-(void) setInternalImageView:(id) {
	%orig;
	NSLog(@"-(void) setInternalImageView:(id)");
}

-(void) setCiImage:(id) {
	%orig;
	NSLog(@"-(void) setCiImage:(id)");
}

-(void) renderCIImage:(id) {
	%orig;
	NSLog(@"-(void) renderCIImage:(id)");
}

-(id) ciImage {
	%orig;
	NSLog(@"-(id) ciImage");
}

-(id) ciContext {
	%orig;
	NSLog(@"-(id) ciContext");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

%end

%hook FNFIdleTimeoutManager

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) _setApplication:(id) {
	%orig;
	NSLog(@"-(void) _setApplication:(id)");
}

-(void) addNonIdlingClient:(id) {
	%orig;
	NSLog(@"-(void) addNonIdlingClient:(id)");
}

-(void) removeNonIdlingClient:(id) {
	%orig;
	NSLog(@"-(void) removeNonIdlingClient:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBBidPayload

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setBidID:(long long) {
	%orig;
	NSLog(@"-(void) setBidID:(long long)");
}

-(void) validateOrThrow:(id) placementID:(id) templateID:(long long) {
	%orig;
	NSLog(@"-(void) validateOrThrow:(id) placementID:(id) templateID:(long long)");
}

-(id) initWithJsonData:(id) placementID:(id) templateID:(long long) {
	%orig;
	NSLog(@"-(id) initWithJsonData:(id) placementID:(id) templateID:(long long)");
}

-(bool) hasServerResponse {
	%orig;
	NSLog(@"-(bool) hasServerResponse");
}

-(bool) hasBidID {
	%orig;
	NSLog(@"-(bool) hasBidID");
}

-(long long) bidID {
	%orig;
	NSLog(@"-(long long) bidID");
}

-(id) serverResponse {
	%orig;
	NSLog(@"-(id) serverResponse");
}

-(id) payloadType {
	%orig;
	NSLog(@"-(id) payloadType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBAdWebContentContainer

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) offsiteAd {
	%orig;
	NSLog(@"-(id) offsiteAd");
}

-(bool) loadAdData:(id) minViewability:(int) {
	%orig;
	NSLog(@"-(bool) loadAdData:(id) minViewability:(int)");
}

-(id) activationCommand {
	%orig;
	NSLog(@"-(id) activationCommand");
}

-(bool) loadAdMarkup:(id) activationCommand:(id) {
	%orig;
	NSLog(@"-(bool) loadAdMarkup:(id) activationCommand:(id)");
}

-(void) initializeJavascriptAdControl {
	%orig;
	NSLog(@"-(void) initializeJavascriptAdControl");
}

-(id) getView {
	%orig;
	NSLog(@"-(id) getView");
}

-(bool) logClickWithExtraData:(id) {
	%orig;
	NSLog(@"-(bool) logClickWithExtraData:(id)");
}

-(id) rewardedVideoDataModel {
	%orig;
	NSLog(@"-(id) rewardedVideoDataModel");
}

-(CGPoint) lastTouchStartLocation {
	%orig;
	NSLog(@"-(CGPoint) lastTouchStartLocation");
}

-(CGPoint) lastTouchCurrentLocation {
	%orig;
	NSLog(@"-(CGPoint) lastTouchCurrentLocation");
}

-(double) lastTouchRadius {
	%orig;
	NSLog(@"-(double) lastTouchRadius");
}

-(double) lastTouchPressure {
	%orig;
	NSLog(@"-(double) lastTouchPressure");
}

-(double) lastTouchStartTimestamp {
	%orig;
	NSLog(@"-(double) lastTouchStartTimestamp");
}

-(double) lastTouchCurrentTimestamp {
	%orig;
	NSLog(@"-(double) lastTouchCurrentTimestamp");
}

-(double) firstImpressionTime {
	%orig;
	NSLog(@"-(double) firstImpressionTime");
}

-(void) setOffsiteAd:(id) {
	%orig;
	NSLog(@"-(void) setOffsiteAd:(id)");
}

-(void) setLoggedImpression:(bool) {
	%orig;
	NSLog(@"-(void) setLoggedImpression:(bool)");
}

-(void) setFirstImpressionTime:(double) {
	%orig;
	NSLog(@"-(void) setFirstImpressionTime:(double)");
}

-(id) htmlDataModel {
	%orig;
	NSLog(@"-(id) htmlDataModel");
}

-(void) setActivationCommand:(id) {
	%orig;
	NSLog(@"-(void) setActivationCommand:(id)");
}

-(void) setIsJavascriptAdControlInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setIsJavascriptAdControlInitialized:(bool)");
}

-(bool) isJavascriptAdControlInitialized {
	%orig;
	NSLog(@"-(bool) isJavascriptAdControlInitialized");
}

-(bool) hasLoggedImpression {
	%orig;
	NSLog(@"-(bool) hasLoggedImpression");
}

-(void) setLastTouchStartTimestamp:(double) {
	%orig;
	NSLog(@"-(void) setLastTouchStartTimestamp:(double)");
}

-(void) updateTouchDataWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) updateTouchDataWithTouches:(id) andEvent:(id)");
}

-(void) setLastTouchStartLocation:(CGPoint) {
	%orig;
	NSLog(@"-(void) setLastTouchStartLocation:(CGPoint)");
}

-(void) setLastTouchCurrentLocation:(CGPoint) {
	%orig;
	NSLog(@"-(void) setLastTouchCurrentLocation:(CGPoint)");
}

-(void) setLastTouchCurrentTimestamp:(double) {
	%orig;
	NSLog(@"-(void) setLastTouchCurrentTimestamp:(double)");
}

-(void) setLastTouchRadius:(double) {
	%orig;
	NSLog(@"-(void) setLastTouchRadius:(double)");
}

-(void) setLastTouchPressure:(double) {
	%orig;
	NSLog(@"-(void) setLastTouchPressure:(double)");
}

-(void) gestureRecognizer:(id) beganWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizer:(id) beganWithTouches:(id) andEvent:(id)");
}

-(void) gestureRecognizer:(id) movedWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizer:(id) movedWithTouches:(id) andEvent:(id)");
}

-(void) gestureRecognizer:(id) endedWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizer:(id) endedWithTouches:(id) andEvent:(id)");
}

-(void) gestureRecognizer:(id) cancelledWithTouches:(id) andEvent:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizer:(id) cancelledWithTouches:(id) andEvent:(id)");
}

-(id) initWithAdView:(id) actualAdSize:(CGSize) adSizeType:(FBAdSize) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id) actualAdSize:(CGSize) adSizeType:(FBAdSize)");
}

-(CGSize) actualAdSize {
	%orig;
	NSLog(@"-(CGSize) actualAdSize");
}

-(void) setActualAdSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setActualAdSize:(CGSize)");
}

-(FBAdSize) adSizeType {
	%orig;
	NSLog(@"-(FBAdSize) adSizeType");
}

-(void) setAdSizeType:(FBAdSize) {
	%orig;
	NSLog(@"-(void) setAdSizeType:(FBAdSize)");
}

-(bool) logImpression {
	%orig;
	NSLog(@"-(bool) logImpression");
}

-(void) gestureRecognizerTapped:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizerTapped:(id)");
}

-(void) setParent:(id) {
	%orig;
	NSLog(@"-(void) setParent:(id)");
}

-(id) requestURL {
	%orig;
	NSLog(@"-(id) requestURL");
}

-(void) setRequestURL:(id) {
	%orig;
	NSLog(@"-(void) setRequestURL:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(CGSize) minimumSize {
	%orig;
	NSLog(@"-(CGSize) minimumSize");
}

-(void) setMaximumSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setMaximumSize:(CGSize)");
}

-(void) setMinimumSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setMinimumSize:(CGSize)");
}

-(CGSize) maximumSize {
	%orig;
	NSLog(@"-(CGSize) maximumSize");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(id) parent {
	%orig;
	NSLog(@"-(id) parent");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

%end

%hook FNFDataBlockDistributor

-(void) deliverData:(id) withOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(void) deliverData:(id) withOffset:(unsigned long long)");
}

-(const char*) _unlockedBytesAtHead:(unsigned long long) withHeadType:(unsigned long long) {
	%orig;
	NSLog(@"-(const char*) _unlockedBytesAtHead:(unsigned long long) withHeadType:(unsigned long long)");
}

-(unsigned long long) offsetForHeadType:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) offsetForHeadType:(unsigned long long)");
}

-(void) addHeadType:(unsigned long long) withOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addHeadType:(unsigned long long) withOffset:(unsigned long long)");
}

-(void) moveHeadTo:(unsigned long long) withHeadType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) moveHeadTo:(unsigned long long) withHeadType:(unsigned long long)");
}

-(const char*) bytesAtHead:(unsigned long long) withHeadType:(unsigned long long) {
	%orig;
	NSLog(@"-(const char*) bytesAtHead:(unsigned long long) withHeadType:(unsigned long long)");
}

-(void) removeHeadType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) removeHeadType:(unsigned long long)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) consumer {
	%orig;
	NSLog(@"-(id) consumer");
}

-(void) setConsumer:(id) {
	%orig;
	NSLog(@"-(void) setConsumer:(id)");
}

-(id) .cxx_construct {
	%orig;
	NSLog(@"-(id) .cxx_construct");
}

%end

%hook FBAdBrowserSessionData

+(long long) currentTimeMs {
	%orig;
	NSLog(@"+(long long) currentTimeMs");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(long long) handlerTimeMs {
	%orig;
	NSLog(@"-(long long) handlerTimeMs");
}

-(long long) loadStartMs {
	%orig;
	NSLog(@"-(long long) loadStartMs");
}

-(long long) responseEndMs {
	%orig;
	NSLog(@"-(long long) responseEndMs");
}

-(long long) domContentLoadedMs {
	%orig;
	NSLog(@"-(long long) domContentLoadedMs");
}

-(long long) scrollReadyMs {
	%orig;
	NSLog(@"-(long long) scrollReadyMs");
}

-(long long) loadFinishMs {
	%orig;
	NSLog(@"-(long long) loadFinishMs");
}

-(long long) sessionFinishMs {
	%orig;
	NSLog(@"-(long long) sessionFinishMs");
}

-(id) initWithURL:(id) withHandlerTime:(long long) withLoadStart:(long long) withResponseEnd:(long long) withDOMContentLoaded:(long long) withScrollReady:(long long) withLoadFinish:(long long) withSessionFinish:(long long) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) withHandlerTime:(long long) withLoadStart:(long long) withResponseEnd:(long long) withDOMContentLoaded:(long long) withScrollReady:(long long) withLoadFinish:(long long) withSessionFinish:(long long)");
}

-(id) dataMap {
	%orig;
	NSLog(@"-(id) dataMap");
}

-(void) setHandlerTimeMs:(long long) {
	%orig;
	NSLog(@"-(void) setHandlerTimeMs:(long long)");
}

-(void) setLoadStartMs:(long long) {
	%orig;
	NSLog(@"-(void) setLoadStartMs:(long long)");
}

-(void) setResponseEndMs:(long long) {
	%orig;
	NSLog(@"-(void) setResponseEndMs:(long long)");
}

-(void) setDomContentLoadedMs:(long long) {
	%orig;
	NSLog(@"-(void) setDomContentLoadedMs:(long long)");
}

-(void) setScrollReadyMs:(long long) {
	%orig;
	NSLog(@"-(void) setScrollReadyMs:(long long)");
}

-(void) setLoadFinishMs:(long long) {
	%orig;
	NSLog(@"-(void) setLoadFinishMs:(long long)");
}

-(void) setSessionFinishMs:(long long) {
	%orig;
	NSLog(@"-(void) setSessionFinishMs:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

%end

%hook FBAdScreen

+(CGRect) boundsInOrientation {
	%orig;
	NSLog(@"+(CGRect) boundsInOrientation");
}

+(void) recomputeCachedState {
	%orig;
	NSLog(@"+(void) recomputeCachedState");
}

+(CGSize) sizeInOrientation {
	%orig;
	NSLog(@"+(CGSize) sizeInOrientation");
}

+(CGSize) nativeSize {
	%orig;
	NSLog(@"+(CGSize) nativeSize");
}

+(CGSize) size {
	%orig;
	NSLog(@"+(CGSize) size");
}

+(CGRect) bounds {
	%orig;
	NSLog(@"+(CGRect) bounds");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(double) scale {
	%orig;
	NSLog(@"+(double) scale");
}

+(long long) orientation {
	%orig;
	NSLog(@"+(long long) orientation");
}

+(double) nativeScale {
	%orig;
	NSLog(@"+(double) nativeScale");
}

%end

%hook FBAdConnectionInfo

+(id) currentCellularConnection {
	%orig;
	NSLog(@"+(id) currentCellularConnection");
}

+(unsigned long long) statusForReachabilityFlags:(unsigned int) {
	%orig;
	NSLog(@"+(unsigned long long) statusForReachabilityFlags:(unsigned int)");
}

+(unsigned long long) currentConnectionCategory {
	%orig;
	NSLog(@"+(unsigned long long) currentConnectionCategory");
}

+(unsigned long long) typeFromString:(id) {
	%orig;
	NSLog(@"+(unsigned long long) typeFromString:(id)");
}

+(unsigned long long) currentConnection {
	%orig;
	NSLog(@"+(unsigned long long) currentConnection");
}

+(unsigned long long) currentReachabilityStatus {
	%orig;
	NSLog(@"+(unsigned long long) currentReachabilityStatus");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(unsigned long long) categoryForType:(unsigned long long) {
	%orig;
	NSLog(@"+(unsigned long long) categoryForType:(unsigned long long)");
}

%end

%hook FBNativeAdViewAttributes

+(id) colorFromHexString:(id) {
	%orig;
	NSLog(@"+(id) colorFromHexString:(id)");
}

+(id) internalAttributesForAttributes:(id) {
	%orig;
	NSLog(@"+(id) internalAttributesForAttributes:(id)");
}

+(id) internalAttributesForType:(long long) {
	%orig;
	NSLog(@"+(id) internalAttributesForType:(long long)");
}

+(id) defaultAttributesForType:(long long) {
	%orig;
	NSLog(@"+(id) defaultAttributesForType:(long long)");
}

-(id) buttonBorderRadius {
	%orig;
	NSLog(@"-(id) buttonBorderRadius");
}

-(void) setButtonBorderRadius:(id) {
	%orig;
	NSLog(@"-(void) setButtonBorderRadius:(id)");
}

-(void) setBorderRadius:(id) {
	%orig;
	NSLog(@"-(void) setBorderRadius:(id)");
}

-(id) bypassAdLoad {
	%orig;
	NSLog(@"-(id) bypassAdLoad");
}

-(id) descriptionColor {
	%orig;
	NSLog(@"-(id) descriptionColor");
}

-(id) buttonTitleColor {
	%orig;
	NSLog(@"-(id) buttonTitleColor");
}

-(id) buttonBorderColor {
	%orig;
	NSLog(@"-(id) buttonBorderColor");
}

-(id) adChoicesBackgroundShown {
	%orig;
	NSLog(@"-(id) adChoicesBackgroundShown");
}

-(id) adChoicesTitleColor {
	%orig;
	NSLog(@"-(id) adChoicesTitleColor");
}

-(id) iconBorderRadius {
	%orig;
	NSLog(@"-(id) iconBorderRadius");
}

-(id) shouldClip {
	%orig;
	NSLog(@"-(id) shouldClip");
}

-(id) skipRegistration {
	%orig;
	NSLog(@"-(id) skipRegistration");
}

-(void) setDescriptionColor:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionColor:(id)");
}

-(void) setButtonTitleColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonTitleColor:(id)");
}

-(void) setButtonTitleFont:(id) {
	%orig;
	NSLog(@"-(void) setButtonTitleFont:(id)");
}

-(void) setButtonBorderColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonBorderColor:(id)");
}

-(void) setAdChoicesBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesBackgroundColor:(id)");
}

-(void) setAdChoicesTitleColor:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesTitleColor:(id)");
}

-(void) setAdChoicesIsHidden:(bool) {
	%orig;
	NSLog(@"-(void) setAdChoicesIsHidden:(bool)");
}

-(void) setBypassAdLoad:(id) {
	%orig;
	NSLog(@"-(void) setBypassAdLoad:(id)");
}

-(void) setSkipRegistration:(id) {
	%orig;
	NSLog(@"-(void) setSkipRegistration:(id)");
}

-(void) setShouldClip:(id) {
	%orig;
	NSLog(@"-(void) setShouldClip:(id)");
}

-(void) setIconBorderRadius:(id) {
	%orig;
	NSLog(@"-(void) setIconBorderRadius:(id)");
}

-(void) setAdChoicesBackgroundShown:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesBackgroundShown:(id)");
}

-(id) adChoicesBackgroundColor {
	%orig;
	NSLog(@"-(id) adChoicesBackgroundColor");
}

-(bool) adChoicesIsHidden {
	%orig;
	NSLog(@"-(bool) adChoicesIsHidden");
}

-(id) ratingEnabled {
	%orig;
	NSLog(@"-(id) ratingEnabled");
}

-(void) setRatingEnabled:(id) {
	%orig;
	NSLog(@"-(void) setRatingEnabled:(id)");
}

-(id) socialContextEnabled {
	%orig;
	NSLog(@"-(id) socialContextEnabled");
}

-(void) setSocialContextEnabled:(id) {
	%orig;
	NSLog(@"-(void) setSocialContextEnabled:(id)");
}

-(bool) isAutoplayEnabled {
	%orig;
	NSLog(@"-(bool) isAutoplayEnabled");
}

-(void) setAutoplayEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAutoplayEnabled:(bool)");
}

-(void) setButtonColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonColor:(id)");
}

-(id) borderRadius {
	%orig;
	NSLog(@"-(id) borderRadius");
}

-(id) buttonColor {
	%orig;
	NSLog(@"-(id) buttonColor");
}

-(id) descriptionFont {
	%orig;
	NSLog(@"-(id) descriptionFont");
}

-(void) setDescriptionFont:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionFont:(id)");
}

-(id) buttonTitleFont {
	%orig;
	NSLog(@"-(id) buttonTitleFont");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(id) titleColor {
	%orig;
	NSLog(@"-(id) titleColor");
}

-(void) setTitleColor:(id) {
	%orig;
	NSLog(@"-(void) setTitleColor:(id)");
}

-(id) titleFont {
	%orig;
	NSLog(@"-(id) titleFont");
}

-(void) setTitleFont:(id) {
	%orig;
	NSLog(@"-(void) setTitleFont:(id)");
}

%end

%hook FNFDashDownloadTracker

-(unsigned long long) bytesRequested {
	%orig;
	NSLog(@"-(unsigned long long) bytesRequested");
}

-(void) setBytesRequested:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBytesRequested:(unsigned long long)");
}

-(id) diskCacheResourceLoaderRequest {
	%orig;
	NSLog(@"-(id) diskCacheResourceLoaderRequest");
}

-(void) setDiskCacheResourceLoaderRequest:(id) {
	%orig;
	NSLog(@"-(void) setDiskCacheResourceLoaderRequest:(id)");
}

-(id) resourceLoaderRequest {
	%orig;
	NSLog(@"-(id) resourceLoaderRequest");
}

-(void) markRequestAsCanceled {
	%orig;
	NSLog(@"-(void) markRequestAsCanceled");
}

-(id) lastRequestRepresentationId {
	%orig;
	NSLog(@"-(id) lastRequestRepresentationId");
}

-(unsigned long long) lastRequestReceiveOffset {
	%orig;
	NSLog(@"-(unsigned long long) lastRequestReceiveOffset");
}

-(void) setRequest:(id) offset:(unsigned long long) length:(unsigned long long) representation:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id) offset:(unsigned long long) length:(unsigned long long) representation:(id)");
}

-(void) markBytesReceived:(unsigned long long) {
	%orig;
	NSLog(@"-(void) markBytesReceived:(unsigned long long)");
}

-(void) markRequestAsFinishedWithRequestLength:(unsigned long long) {
	%orig;
	NSLog(@"-(void) markRequestAsFinishedWithRequestLength:(unsigned long long)");
}

-(unsigned long long) currentRequestBytesReceived {
	%orig;
	NSLog(@"-(unsigned long long) currentRequestBytesReceived");
}

-(unsigned long long) bytesFromPrefetchCache {
	%orig;
	NSLog(@"-(unsigned long long) bytesFromPrefetchCache");
}

-(void) setBytesFromPrefetchCache:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBytesFromPrefetchCache:(unsigned long long)");
}

-(void) _clearCurrentRequestData {
	%orig;
	NSLog(@"-(void) _clearCurrentRequestData");
}

-(unsigned long long) currentRequestOffset {
	%orig;
	NSLog(@"-(unsigned long long) currentRequestOffset");
}

-(unsigned long long) currentRequestLength {
	%orig;
	NSLog(@"-(unsigned long long) currentRequestLength");
}

-(id) currentRequestRepresentationId {
	%orig;
	NSLog(@"-(id) currentRequestRepresentationId");
}

-(void) clearDataForSeek {
	%orig;
	NSLog(@"-(void) clearDataForSeek");
}

-(void) setBytesReceived:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBytesReceived:(unsigned long long)");
}

-(unsigned long long) bytesReceived {
	%orig;
	NSLog(@"-(unsigned long long) bytesReceived");
}

-(bool) fetchInProgress {
	%orig;
	NSLog(@"-(bool) fetchInProgress");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook FNFLoopingAsset

-(void) _loadedTimeRangeChanged:(id) {
	%orig;
	NSLog(@"-(void) _loadedTimeRangeChanged:(id)");
}

-(void) setBackupAsset:(id) {
	%orig;
	NSLog(@"-(void) setBackupAsset:(id)");
}

-(id) backupAsset {
	%orig;
	NSLog(@"-(id) backupAsset");
}

-(id) initWithAssetBlock:(id) loopCount:(?) {
	%orig;
	NSLog(@"-(id) initWithAssetBlock:(id) loopCount:(?)");
}

-(void) afterLoadingOriginalAsset:(id) keys:(?) {
	%orig;
	NSLog(@"-(void) afterLoadingOriginalAsset:(id) keys:(?)");
}

-(void) updatePlaybackTime:(?) {
	%orig;
	NSLog(@"-(void) updatePlaybackTime:(?)");
}

-(id) _activeAsset {
	%orig;
	NSLog(@"-(id) _activeAsset");
}

-(void) requestTimeLoadedUpdate {
	%orig;
	NSLog(@"-(void) requestTimeLoadedUpdate");
}

-(void) requestErrorNotificationIfNeeded {
	%orig;
	NSLog(@"-(void) requestErrorNotificationIfNeeded");
}

-(bool) resetAssetToBeginningIfNeeded {
	%orig;
	NSLog(@"-(bool) resetAssetToBeginningIfNeeded");
}

-(bool) seekToPosition:(?) {
	%orig;
	NSLog(@"-(bool) seekToPosition:(?)");
}

-(?) timeAfterSeek {
	%orig;
	NSLog(@"-(?) timeAfterSeek");
}

-(bool) trackHasMoreFrames:(long long) {
	%orig;
	NSLog(@"-(bool) trackHasMoreFrames:(long long)");
}

-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long) {
	%orig;
	NSLog(@"-(FNFFrameMetadata) currentFrameMetadataForTrack:(long long)");
}

-(void) _loopAssetIfLastVideoFrame {
	%orig;
	NSLog(@"-(void) _loopAssetIfLastVideoFrame");
}

-(FNFFrameMetadata) _calculateOffset:(FNFFrameMetadata) {
	%orig;
	NSLog(@"-(FNFFrameMetadata) _calculateOffset:(FNFFrameMetadata)");
}

-(const char*) currentFrameDataForTrack:(long long) {
	%orig;
	NSLog(@"-(const char*) currentFrameDataForTrack:(long long)");
}

-(bool) containsTrack:(long long) {
	%orig;
	NSLog(@"-(bool) containsTrack:(long long)");
}

-(void) advanceFrameForTrack:(long long) {
	%orig;
	NSLog(@"-(void) advanceFrameForTrack:(long long)");
}

-(bool) shouldPauseForStallingWithNextCheckCallback:(id) stallReason:(?) {
	%orig;
	NSLog(@"-(bool) shouldPauseForStallingWithNextCheckCallback:(id) stallReason:(?)");
}

-(bool) shouldRestartAfterStalling {
	%orig;
	NSLog(@"-(bool) shouldRestartAfterStalling");
}

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(id) debugDetails {
	%orig;
	NSLog(@"-(id) debugDetails");
}

-(opaqueCMFormatDescription*) formatDesc {
	%orig;
	NSLog(@"-(opaqueCMFormatDescription*) formatDesc");
}

-(id) audioStreamExtraParameters {
	%orig;
	NSLog(@"-(id) audioStreamExtraParameters");
}

-(bool) embedFrameInfo {
	%orig;
	NSLog(@"-(bool) embedFrameInfo");
}

-(bool) decompressedFramebuffer {
	%orig;
	NSLog(@"-(bool) decompressedFramebuffer");
}

-(void) addErrorToLog:(id) shouldStopPlayback:(bool) {
	%orig;
	NSLog(@"-(void) addErrorToLog:(id) shouldStopPlayback:(bool)");
}

-(id) mpdAccessibilityDescription {
	%orig;
	NSLog(@"-(id) mpdAccessibilityDescription");
}

-(bool) shouldBufferVideoAsSoonAsPossible {
	%orig;
	NSLog(@"-(bool) shouldBufferVideoAsSoonAsPossible");
}

-(void) playbackPauseRequested:(int) {
	%orig;
	NSLog(@"-(void) playbackPauseRequested:(int)");
}

-(void) setEmbedFrameInfo:(bool) {
	%orig;
	NSLog(@"-(void) setEmbedFrameInfo:(bool)");
}

-(?) maxBufferTime {
	%orig;
	NSLog(@"-(?) maxBufferTime");
}

-(?) minBufferTime {
	%orig;
	NSLog(@"-(?) minBufferTime");
}

-(id) initWithAssetBlock:(id) {
	%orig;
	NSLog(@"-(id) initWithAssetBlock:(id)");
}

-(id) orignalAsset {
	%orig;
	NSLog(@"-(id) orignalAsset");
}

-(bool) usingBackUp {
	%orig;
	NSLog(@"-(bool) usingBackUp");
}

-(int) currentLoopCount {
	%orig;
	NSLog(@"-(int) currentLoopCount");
}

-(?) videoRealDuration {
	%orig;
	NSLog(@"-(?) videoRealDuration");
}

-(AudioStreamBasicDescription) asbd {
	%orig;
	NSLog(@"-(AudioStreamBasicDescription) asbd");
}

-(void) setOriginalAsset:(id) {
	%orig;
	NSLog(@"-(void) setOriginalAsset:(id)");
}

-(id) originalAsset {
	%orig;
	NSLog(@"-(id) originalAsset");
}

-(id) loadedTimeRanges {
	%orig;
	NSLog(@"-(id) loadedTimeRanges");
}

-(void) cancelLoading {
	%orig;
	NSLog(@"-(void) cancelLoading");
}

-(int) pauseReason {
	%orig;
	NSLog(@"-(int) pauseReason");
}

-(id) tracksWithMediaType:(id) {
	%orig;
	NSLog(@"-(id) tracksWithMediaType:(id)");
}

-(CGSize) naturalSize {
	%orig;
	NSLog(@"-(CGSize) naturalSize");
}

-(CGAffineTransform) preferredTransform {
	%orig;
	NSLog(@"-(CGAffineTransform) preferredTransform");
}

-(void) setAudioMix:(id) {
	%orig;
	NSLog(@"-(void) setAudioMix:(id)");
}

-(long long) statusOfValueForKey:(id) error:(id*) {
	%orig;
	NSLog(@"-(long long) statusOfValueForKey:(id) error:(id*)");
}

-(void) loadValuesAsynchronouslyForKeys:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadValuesAsynchronouslyForKeys:(id) completionHandler:(id)");
}

-(bool) isPlaybackBufferFull {
	%orig;
	NSLog(@"-(bool) isPlaybackBufferFull");
}

-(bool) isPlaybackLikelyToKeepUp {
	%orig;
	NSLog(@"-(bool) isPlaybackLikelyToKeepUp");
}

-(id) accessLog {
	%orig;
	NSLog(@"-(id) accessLog");
}

-(?) videoDuration {
	%orig;
	NSLog(@"-(?) videoDuration");
}

-(void) addOutput:(id) {
	%orig;
	NSLog(@"-(void) addOutput:(id)");
}

-(void) playbackStarted {
	%orig;
	NSLog(@"-(void) playbackStarted");
}

-(id) resourceLoader {
	%orig;
	NSLog(@"-(id) resourceLoader");
}

-(id) audioMix {
	%orig;
	NSLog(@"-(id) audioMix");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(int) state {
	%orig;
	NSLog(@"-(int) state");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(long long) status {
	%orig;
	NSLog(@"-(long long) status");
}

-(id) asset {
	%orig;
	NSLog(@"-(id) asset");
}

%end

%hook FBAdQualityManager

+(id) managerWithTargetView:(id) rules:(id) {
	%orig;
	NSLog(@"+(id) managerWithTargetView:(id) rules:(id)");
}

-(id) initWithTargetView:(id) rules:(id) {
	%orig;
	NSLog(@"-(id) initWithTargetView:(id) rules:(id)");
}

-(void) setViewabilityMeasurement:(id) {
	%orig;
	NSLog(@"-(void) setViewabilityMeasurement:(id)");
}

-(id) viewabilityMeasurement {
	%orig;
	NSLog(@"-(id) viewabilityMeasurement");
}

-(void) registerProgress:(double) volume:(float) {
	%orig;
	NSLog(@"-(void) registerProgress:(double) volume:(float)");
}

-(id) tests {
	%orig;
	NSLog(@"-(id) tests");
}

-(void) setTests:(id) {
	%orig;
	NSLog(@"-(void) setTests:(id)");
}

-(id) statistics {
	%orig;
	NSLog(@"-(id) statistics");
}

-(void) resetStatistics {
	%orig;
	NSLog(@"-(void) resetStatistics");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) targetView {
	%orig;
	NSLog(@"-(id) targetView");
}

-(void) setTargetView:(id) {
	%orig;
	NSLog(@"-(void) setTargetView:(id)");
}

%end

%hook FBAdAdapterManager

+(id) builtInClassesForPlacementType:(long long) {
	%orig;
	NSLog(@"+(id) builtInClassesForPlacementType:(long long)");
}

+(id) classNameForId:(id) placementType:(long long) {
	%orig;
	NSLog(@"+(id) classNameForId:(id) placementType:(long long)");
}

+(id) registeredAdapters {
	%orig;
	NSLog(@"+(id) registeredAdapters");
}

+(Class) classForId:(id) placementType:(long long) {
	%orig;
	NSLog(@"+(Class) classForId:(id) placementType:(long long)");
}

+(id) availableAdaptersForPlacementType:(long long) {
	%orig;
	NSLog(@"+(id) availableAdaptersForPlacementType:(long long)");
}

+(id) adapterInstanceForId:(id) placementType:(long long) {
	%orig;
	NSLog(@"+(id) adapterInstanceForId:(id) placementType:(long long)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

%end

%hook FBAdEvent

+(id) deserializeFromSqlite:(sqlite3_stmt*) {
	%orig;
	NSLog(@"+(id) deserializeFromSqlite:(sqlite3_stmt*)");
}

-(void) setTokenId:(id) {
	%orig;
	NSLog(@"-(void) setTokenId:(id)");
}

-(id) initWithType:(id) withPriority:(unsigned long long) withTokenId:(id) withSessionId:(id) withSessionStartTime:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(id) initWithType:(id) withPriority:(unsigned long long) withTokenId:(id) withSessionId:(id) withSessionStartTime:(id) withExtraData:(id)");
}

-(void) logStatusMessage {
	%orig;
	NSLog(@"-(void) logStatusMessage");
}

-(id) jsonExtraData {
	%orig;
	NSLog(@"-(id) jsonExtraData");
}

-(id) time {
	%orig;
	NSLog(@"-(id) time");
}

-(void) setTime:(id) {
	%orig;
	NSLog(@"-(void) setTime:(id)");
}

-(void) setEventId:(id) {
	%orig;
	NSLog(@"-(void) setEventId:(id)");
}

-(id) eventId {
	%orig;
	NSLog(@"-(id) eventId");
}

-(void) setSessionId:(id) {
	%orig;
	NSLog(@"-(void) setSessionId:(id)");
}

-(id) sessionId {
	%orig;
	NSLog(@"-(id) sessionId");
}

-(void) setExtraData:(id) {
	%orig;
	NSLog(@"-(void) setExtraData:(id)");
}

-(id) sessionStartTime {
	%orig;
	NSLog(@"-(id) sessionStartTime");
}

-(void) setSessionStartTime:(id) {
	%orig;
	NSLog(@"-(void) setSessionStartTime:(id)");
}

-(void) setExpiration:(id) {
	%orig;
	NSLog(@"-(void) setExpiration:(id)");
}

-(id) expiration {
	%orig;
	NSLog(@"-(id) expiration");
}

-(id) tokenId {
	%orig;
	NSLog(@"-(id) tokenId");
}

-(id) extraData {
	%orig;
	NSLog(@"-(id) extraData");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setPriority:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setPriority:(unsigned long long)");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(unsigned long long) priority {
	%orig;
	NSLog(@"-(unsigned long long) priority");
}

%end

%hook FNFGLProgram

-(bool) initialized {
	%orig;
	NSLog(@"-(bool) initialized");
}

-(int) uniformIndex:(const char*) {
	%orig;
	NSLog(@"-(int) uniformIndex:(const char*)");
}

-(id) programLog {
	%orig;
	NSLog(@"-(id) programLog");
}

-(id) fragmentShaderLog {
	%orig;
	NSLog(@"-(id) fragmentShaderLog");
}

-(id) vertexShaderLog {
	%orig;
	NSLog(@"-(id) vertexShaderLog");
}

-(id) initWithVertexShader:(const char*) fragmentShader:(const char*) {
	%orig;
	NSLog(@"-(id) initWithVertexShader:(const char*) fragmentShader:(const char*)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned int) addAttribute:(id) {
	%orig;
	NSLog(@"-(unsigned int) addAttribute:(id)");
}

-(bool) validate {
	%orig;
	NSLog(@"-(bool) validate");
}

-(void) use {
	%orig;
	NSLog(@"-(void) use");
}

-(bool) link {
	%orig;
	NSLog(@"-(bool) link");
}

%end

%hook FNFMp4DataLoader

-(void) _fetchStartingAtOffset:(unsigned long long) length:(unsigned long long) forTrack:(long long) {
	%orig;
	NSLog(@"-(void) _fetchStartingAtOffset:(unsigned long long) length:(unsigned long long) forTrack:(long long)");
}

-(void) _dataCallback:(id) offset:(unsigned long long) dataRequest:(id) {
	%orig;
	NSLog(@"-(void) _dataCallback:(id) offset:(unsigned long long) dataRequest:(id)");
}

-(void) _dataFinished:(id) dataRequest:(id) contentInfo:(id) loadingRequest:(id) {
	%orig;
	NSLog(@"-(void) _dataFinished:(id) dataRequest:(id) contentInfo:(id) loadingRequest:(id)");
}

-(void) fetchFirstRequestForSeconds:(unsigned int) initializationAtomSize:(unsigned long long) track:(long long) {
	%orig;
	NSLog(@"-(void) fetchFirstRequestForSeconds:(unsigned int) initializationAtomSize:(unsigned long long) track:(long long)");
}

-(void) seekForwardToOffset:(unsigned long long) forTrack:(long long) {
	%orig;
	NSLog(@"-(void) seekForwardToOffset:(unsigned long long) forTrack:(long long)");
}

-(void) fetchToOffset:(unsigned long long) forTrack:(long long) {
	%orig;
	NSLog(@"-(void) fetchToOffset:(unsigned long long) forTrack:(long long)");
}

-(bool) isFullyDownloaded:(long long) {
	%orig;
	NSLog(@"-(bool) isFullyDownloaded:(long long)");
}

-(void) resetWithNewVideoDataBlockDistributor:(id) audioDataBlockDistributor:(id) {
	%orig;
	NSLog(@"-(void) resetWithNewVideoDataBlockDistributor:(id) audioDataBlockDistributor:(id)");
}

-(unsigned long long) currentReceiveOffsetForTrack:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) currentReceiveOffsetForTrack:(long long)");
}

-(unsigned long long) currentRequestOffsetForTrack:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) currentRequestOffsetForTrack:(long long)");
}

-(bool) fetchInProgressForTrack:(long long) {
	%orig;
	NSLog(@"-(bool) fetchInProgressForTrack:(long long)");
}

-(id) initWithUrl:(id) bitrate:(unsigned long long) dataBlockDistributor:(id) dispatchQueue:(id) async:(bool) {
	%orig;
	NSLog(@"-(id) initWithUrl:(id) bitrate:(unsigned long long) dataBlockDistributor:(id) dispatchQueue:(id) async:(bool)");
}

-(void) _forTestingOverrideResourceLoader:(id) {
	%orig;
	NSLog(@"-(void) _forTestingOverrideResourceLoader:(id)");
}

-(void) cancelRequests {
	%orig;
	NSLog(@"-(void) cancelRequests");
}

-(id) resourceLoader {
	%orig;
	NSLog(@"-(id) resourceLoader");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

%end

%hook FNFAssetResourceLoadingRequest

-(id) initWithContentInformationRequest:(id) dataRequest:(id) urlRequest:(id) completionCallback:(id) {
	%orig;
	NSLog(@"-(id) initWithContentInformationRequest:(id) dataRequest:(id) urlRequest:(id) completionCallback:(id)");
}

-(void) finishLoadingWithMetadataDictionary:(id) {
	%orig;
	NSLog(@"-(void) finishLoadingWithMetadataDictionary:(id)");
}

-(id) redirect {
	%orig;
	NSLog(@"-(id) redirect");
}

-(void) setRedirect:(id) {
	%orig;
	NSLog(@"-(void) setRedirect:(id)");
}

-(void) setResponse:(id) {
	%orig;
	NSLog(@"-(void) setResponse:(id)");
}

-(void) setMetadataDictionary:(id) {
	%orig;
	NSLog(@"-(void) setMetadataDictionary:(id)");
}

-(id) metadataDictionary {
	%orig;
	NSLog(@"-(id) metadataDictionary");
}

-(id) dataRequest {
	%orig;
	NSLog(@"-(id) dataRequest");
}

-(id) contentInformationRequest {
	%orig;
	NSLog(@"-(id) contentInformationRequest");
}

-(void) finishLoading {
	%orig;
	NSLog(@"-(void) finishLoading");
}

-(void) finishLoadingWithError:(id) {
	%orig;
	NSLog(@"-(void) finishLoadingWithError:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

%end

%hook FNFAssetResourceLoadingDataRequest

-(id) initWithRequestedOffset:(long long) requestedLength:(long long) dataCallback:(id) {
	%orig;
	NSLog(@"-(id) initWithRequestedOffset:(long long) requestedLength:(long long) dataCallback:(id)");
}

-(bool) bypassCache {
	%orig;
	NSLog(@"-(bool) bypassCache");
}

-(void) setBypassCache:(bool) {
	%orig;
	NSLog(@"-(void) setBypassCache:(bool)");
}

-(bool) enablePrefetchLookupWhenBypassCache {
	%orig;
	NSLog(@"-(bool) enablePrefetchLookupWhenBypassCache");
}

-(void) setEnablePrefetchLookupWhenBypassCache:(bool) {
	%orig;
	NSLog(@"-(void) setEnablePrefetchLookupWhenBypassCache:(bool)");
}

-(void) setIsAudio:(bool) {
	%orig;
	NSLog(@"-(void) setIsAudio:(bool)");
}

-(bool) firstRequest {
	%orig;
	NSLog(@"-(bool) firstRequest");
}

-(void) setFirstRequest:(bool) {
	%orig;
	NSLog(@"-(void) setFirstRequest:(bool)");
}

-(bool) isForDiskCache {
	%orig;
	NSLog(@"-(bool) isForDiskCache");
}

-(void) setIsForDiskCache:(bool) {
	%orig;
	NSLog(@"-(void) setIsForDiskCache:(bool)");
}

-(long long) requestedOffset {
	%orig;
	NSLog(@"-(long long) requestedOffset");
}

-(bool) isAudio {
	%orig;
	NSLog(@"-(bool) isAudio");
}

-(void) respondWithData:(id) {
	%orig;
	NSLog(@"-(void) respondWithData:(id)");
}

-(long long) requestedLength {
	%orig;
	NSLog(@"-(long long) requestedLength");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) currentOffset {
	%orig;
	NSLog(@"-(long long) currentOffset");
}

%end

%hook FNFAssetResourceLoader

-(void) setDelegate:(id) queue:(id) videoID:(id) trackerID:(id) analyticsTags:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id) queue:(id) videoID:(id) trackerID:(id) analyticsTags:(id)");
}

-(id) trackerID {
	%orig;
	NSLog(@"-(id) trackerID");
}

-(id) analyticsTags {
	%orig;
	NSLog(@"-(id) analyticsTags");
}

-(id) videoID {
	%orig;
	NSLog(@"-(id) videoID");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) delegateQueue {
	%orig;
	NSLog(@"-(id) delegateQueue");
}

%end

%hook FNFAssetResourceLoadingContentInformationRequest

-(bool) isByteRangeAccessSupported {
	%orig;
	NSLog(@"-(bool) isByteRangeAccessSupported");
}

-(long long) contentLength {
	%orig;
	NSLog(@"-(long long) contentLength");
}

-(id) contentType {
	%orig;
	NSLog(@"-(id) contentType");
}

-(void) setContentType:(id) {
	%orig;
	NSLog(@"-(void) setContentType:(id)");
}

-(void) setContentLength:(long long) {
	%orig;
	NSLog(@"-(void) setContentLength:(long long)");
}

-(void) setByteRangeAccessSupported:(bool) {
	%orig;
	NSLog(@"-(void) setByteRangeAccessSupported:(bool)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBDisplayAdAdapter

-(void) registerViewForInteraction:(id) withViewController:(id) {
	%orig;
	NSLog(@"-(void) registerViewForInteraction:(id) withViewController:(id)");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(bool) startAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id) animated:(bool)");
}

-(id) getAdNetwork {
	%orig;
	NSLog(@"-(id) getAdNetwork");
}

-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id) {
	%orig;
	NSLog(@"-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id)");
}

-(bool) startAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id)");
}

-(void) unregisterView {
	%orig;
	NSLog(@"-(void) unregisterView");
}

-(void) onImpressionWithExtraData:(id) withPostData:(id) {
	%orig;
	NSLog(@"-(void) onImpressionWithExtraData:(id) withPostData:(id)");
}

-(void) onClickForViewController:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) onClickForViewController:(id) withExtraData:(id)");
}

-(id) nativeAdData {
	%orig;
	NSLog(@"-(id) nativeAdData");
}

-(void) setNativeAdData:(id) {
	%orig;
	NSLog(@"-(void) setNativeAdData:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

%end

%hook FBANRewardedVideoAdAdapter

-(bool) startAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id) animated:(bool)");
}

-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id) {
	%orig;
	NSLog(@"-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id)");
}

-(bool) startAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id)");
}

-(void) rewardedVideoAdDidLoad:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdDidLoad:(id)");
}

-(void) rewardedVideoAd:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAd:(id) didFailWithError:(id)");
}

-(void) rewardedVideoAdWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdWillLogImpression:(id)");
}

-(void) rewardedVideoAdDidClick:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdDidClick:(id)");
}

-(void) rewardedVideoAdWillClose:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdWillClose:(id)");
}

-(void) rewardedVideoAdDidClose:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdDidClose:(id)");
}

-(void) rewardedVideoAdComplete:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdComplete:(id)");
}

-(void) setDataModel:(id) {
	%orig;
	NSLog(@"-(void) setDataModel:(id)");
}

-(void) rewardedVideoAdServerFailed:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdServerFailed:(id)");
}

-(void) rewardedVideoAdServerSuccess:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdServerSuccess:(id)");
}

-(void) setRewardedVideoAd:(id) {
	%orig;
	NSLog(@"-(void) setRewardedVideoAd:(id)");
}

-(id) rewardedVideoAd {
	%orig;
	NSLog(@"-(id) rewardedVideoAd");
}

-(id) dataModel {
	%orig;
	NSLog(@"-(id) dataModel");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook FBANInstreamAdAdapter

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(bool) startAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id) animated:(bool)");
}

-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id) {
	%orig;
	NSLog(@"-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id)");
}

-(bool) startAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id)");
}

-(void) loadAdData:(id) {
	%orig;
	NSLog(@"-(void) loadAdData:(id)");
}

-(void) setDataModel:(id) {
	%orig;
	NSLog(@"-(void) setDataModel:(id)");
}

-(id) videoAdController {
	%orig;
	NSLog(@"-(id) videoAdController");
}

-(void) controllerDidLoad:(id) {
	%orig;
	NSLog(@"-(void) controllerDidLoad:(id)");
}

-(void) controller:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) controller:(id) didFailWithError:(id)");
}

-(void) controllerWillRegisterProgress:(id) {
	%orig;
	NSLog(@"-(void) controllerWillRegisterProgress:(id)");
}

-(void) controllerDidClick:(id) {
	%orig;
	NSLog(@"-(void) controllerDidClick:(id)");
}

-(void) controllerDidEnd:(id) {
	%orig;
	NSLog(@"-(void) controllerDidEnd:(id)");
}

-(void) controllerDidUnload:(id) {
	%orig;
	NSLog(@"-(void) controllerDidUnload:(id)");
}

-(void) controllerWillRegisterViewableImpression:(id) {
	%orig;
	NSLog(@"-(void) controllerWillRegisterViewableImpression:(id)");
}

-(bool) controllerStarted {
	%orig;
	NSLog(@"-(bool) controllerStarted");
}

-(void) setControllerStarted:(bool) {
	%orig;
	NSLog(@"-(void) setControllerStarted:(bool)");
}

-(id) dataModel {
	%orig;
	NSLog(@"-(id) dataModel");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

%end

%hook FBANNativeAdAdapter

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) registerViewForInteraction:(id) withViewController:(id) {
	%orig;
	NSLog(@"-(void) registerViewForInteraction:(id) withViewController:(id)");
}

-(id) viewControllerForPresentingModalView {
	%orig;
	NSLog(@"-(id) viewControllerForPresentingModalView");
}

-(id) commandProcessorTouchInformation:(id) {
	%orig;
	NSLog(@"-(id) commandProcessorTouchInformation:(id)");
}

-(void) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) viewControllerDismissed:(id)");
}

-(bool) startAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id) animated:(bool)");
}

-(id) getAdNetwork {
	%orig;
	NSLog(@"-(id) getAdNetwork");
}

-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id) {
	%orig;
	NSLog(@"-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id)");
}

-(bool) startAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id)");
}

-(void) onImpressionWithExtraData:(id) withPostData:(id) {
	%orig;
	NSLog(@"-(void) onImpressionWithExtraData:(id) withPostData:(id)");
}

-(void) onClickForViewController:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(void) onClickForViewController:(id) withExtraData:(id)");
}

-(bool) hasLoggedImpression {
	%orig;
	NSLog(@"-(bool) hasLoggedImpression");
}

-(void) setCommandProcessor:(id) {
	%orig;
	NSLog(@"-(void) setCommandProcessor:(id)");
}

-(id) commandProcessor {
	%orig;
	NSLog(@"-(id) commandProcessor");
}

-(void) setHasLoggedImpression:(bool) {
	%orig;
	NSLog(@"-(void) setHasLoggedImpression:(bool)");
}

-(bool) hasLoggedVideoPlay {
	%orig;
	NSLog(@"-(bool) hasLoggedVideoPlay");
}

-(void) setHasLoggedVideoPlay:(bool) {
	%orig;
	NSLog(@"-(void) setHasLoggedVideoPlay:(bool)");
}

-(id) snapshotTimer {
	%orig;
	NSLog(@"-(id) snapshotTimer");
}

-(void) setSnapshotTimer:(id) {
	%orig;
	NSLog(@"-(void) setSnapshotTimer:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

%end

%hook FBANInterstitialAdAdapter

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) interstitialAdDidClick:(id) {
	%orig;
	NSLog(@"-(void) interstitialAdDidClick:(id)");
}

-(void) interstitialAdWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) interstitialAdWillLogImpression:(id)");
}

-(void) interstitialAdWillClose:(id) {
	%orig;
	NSLog(@"-(void) interstitialAdWillClose:(id)");
}

-(void) interstitialAdDidClose:(id) {
	%orig;
	NSLog(@"-(void) interstitialAdDidClose:(id)");
}

-(bool) startAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id) animated:(bool)");
}

-(id) getAdNetwork {
	%orig;
	NSLog(@"-(id) getAdNetwork");
}

-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id) {
	%orig;
	NSLog(@"-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id)");
}

-(bool) startAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id)");
}

-(void) interstitialAd:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) interstitialAd:(id) didFailWithError:(id)");
}

-(void) interstitialAdDidLoad:(id) {
	%orig;
	NSLog(@"-(void) interstitialAdDidLoad:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTarget:(id) {
	%orig;
	NSLog(@"-(void) setTarget:(id)");
}

-(id) target {
	%orig;
	NSLog(@"-(id) target");
}

%end

%hook FBANBannerAdAdapter

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) adViewDidClick:(id) {
	%orig;
	NSLog(@"-(void) adViewDidClick:(id)");
}

-(void) adViewDidFinishHandlingClick:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishHandlingClick:(id)");
}

-(void) adViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidLoad:(id)");
}

-(void) adView:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailWithError:(id)");
}

-(void) adViewWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) adViewWillLogImpression:(id)");
}

-(bool) startAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id) animated:(bool)");
}

-(id) getAdNetwork {
	%orig;
	NSLog(@"-(id) getAdNetwork");
}

-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id) {
	%orig;
	NSLog(@"-(void) loadAdData:(id) forSize:(FBAdSize) forOrientation:(long long) forPlacement:(id) placementDefinition:(id) rewardData:(id)");
}

-(bool) startAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) startAdFromRootViewController:(id)");
}

%end

%hook FBNativeAdTableViewAdProvider

-(void) nativeAdWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) nativeAdWillLogImpression:(id)");
}

-(void) nativeAdDidClick:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidClick:(id)");
}

-(void) nativeAdDidFinishHandlingClick:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidFinishHandlingClick:(id)");
}

-(id) currentIndexPathToAdMap {
	%orig;
	NSLog(@"-(id) currentIndexPathToAdMap");
}

-(void) setCurrentIndexPathToAdMap:(id) {
	%orig;
	NSLog(@"-(void) setCurrentIndexPathToAdMap:(id)");
}

-(bool) isAdCellAtIndexPath:(id) forStride:(unsigned long long) {
	%orig;
	NSLog(@"-(bool) isAdCellAtIndexPath:(id) forStride:(unsigned long long)");
}

-(void) nativeAdsLoaded {
	%orig;
	NSLog(@"-(void) nativeAdsLoaded");
}

-(void) nativeAdsFailedToLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) nativeAdsFailedToLoadWithError:(id)");
}

-(id) tableView:(id) nativeAdForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) nativeAdForRowAtIndexPath:(id)");
}

-(id) adjustNonAdCellIndexPath:(id) forStride:(unsigned long long) {
	%orig;
	NSLog(@"-(id) adjustNonAdCellIndexPath:(id) forStride:(unsigned long long)");
}

-(unsigned long long) adjustCount:(unsigned long long) forStride:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) adjustCount:(unsigned long long) forStride:(unsigned long long)");
}

-(id) initWithManager:(id) {
	%orig;
	NSLog(@"-(id) initWithManager:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) manager {
	%orig;
	NSLog(@"-(id) manager");
}

-(void) setManager:(id) {
	%orig;
	NSLog(@"-(void) setManager:(id)");
}

%end

%hook FBNativeAdTableViewCellProvider

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithManager:(id) forType:(long long) forAttributes:(id) {
	%orig;
	NSLog(@"-(id) initWithManager:(id) forType:(long long) forAttributes:(id)");
}

-(id) uniqueTableCellIdentifier {
	%orig;
	NSLog(@"-(id) uniqueTableCellIdentifier");
}

-(void) setUniqueTableCellIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setUniqueTableCellIdentifier:(id)");
}

-(id) initWithManager:(id) forType:(long long) {
	%orig;
	NSLog(@"-(id) initWithManager:(id) forType:(long long)");
}

-(id) tableCellIdentifier {
	%orig;
	NSLog(@"-(id) tableCellIdentifier");
}

-(id) initWithManager:(id) {
	%orig;
	NSLog(@"-(id) initWithManager:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(void) setAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAttributes:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) estimatedHeightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) estimatedHeightForRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

%end

%hook FNFDashDataLoader

-(unsigned long long) fetchedOffset {
	%orig;
	NSLog(@"-(unsigned long long) fetchedOffset");
}

-(void) _fetchNextFragmentedRangeAtOffset:(unsigned long long) length:(unsigned long long) forDiskCache:(bool) {
	%orig;
	NSLog(@"-(void) _fetchNextFragmentedRangeAtOffset:(unsigned long long) length:(unsigned long long) forDiskCache:(bool)");
}

-(void) fetchFromOffset:(unsigned long long) toOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(void) fetchFromOffset:(unsigned long long) toOffset:(unsigned long long)");
}

-(void) _fetchNextSegment {
	%orig;
	NSLog(@"-(void) _fetchNextSegment");
}

-(void) _cancelRequest:(id) resourceLoader:(id) {
	%orig;
	NSLog(@"-(void) _cancelRequest:(id) resourceLoader:(id)");
}

-(void) cancelDiskCache {
	%orig;
	NSLog(@"-(void) cancelDiskCache");
}

-(unsigned long long) diskCacheBytesReceived {
	%orig;
	NSLog(@"-(unsigned long long) diskCacheBytesReceived");
}

-(unsigned long long) inMemoryCacheBytesReceived {
	%orig;
	NSLog(@"-(unsigned long long) inMemoryCacheBytesReceived");
}

-(void) _handleInlineInitSegment {
	%orig;
	NSLog(@"-(void) _handleInlineInitSegment");
}

-(void) _fetchUrlRequest:(id) offset:(unsigned long long) length:(unsigned long long) firstSegment:(bool) forDiskCache:(bool) {
	%orig;
	NSLog(@"-(void) _fetchUrlRequest:(id) offset:(unsigned long long) length:(unsigned long long) firstSegment:(bool) forDiskCache:(bool)");
}

-(void) _prefetchSegmentedUrlRequest:(id) {
	%orig;
	NSLog(@"-(void) _prefetchSegmentedUrlRequest:(id)");
}

-(void) setDiskCacheBytesRequested:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDiskCacheBytesRequested:(unsigned long long)");
}

-(void) setDiskCacheBytesReceived:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDiskCacheBytesReceived:(unsigned long long)");
}

-(unsigned long long) diskCacheBytesNotified {
	%orig;
	NSLog(@"-(unsigned long long) diskCacheBytesNotified");
}

-(void) setDiskCacheBytesNotified:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDiskCacheBytesNotified:(unsigned long long)");
}

-(void) _dataCallbackHelper:(id) reqOffset:(unsigned long long) dataRequest:(id) forDiskCache:(bool) {
	%orig;
	NSLog(@"-(void) _dataCallbackHelper:(id) reqOffset:(unsigned long long) dataRequest:(id) forDiskCache:(bool)");
}

-(void) _requestFinishCallbackHelper:(id) request:(id) forDiskCache:(bool) contentRequest:(id) dataRequest:(id) {
	%orig;
	NSLog(@"-(void) _requestFinishCallbackHelper:(id) request:(id) forDiskCache:(bool) contentRequest:(id) dataRequest:(id)");
}

-(void) setInMemoryCacheBytesReceived:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setInMemoryCacheBytesReceived:(unsigned long long)");
}

-(id) initWithPlaylistData:(id) downloadTracker:(id) resourceLoader:(id) dataBlockDistributor:(id) enablePrefetchLookupWhenBypassCache:(bool) track:(long long) representationId:(id) {
	%orig;
	NSLog(@"-(id) initWithPlaylistData:(id) downloadTracker:(id) resourceLoader:(id) dataBlockDistributor:(id) enablePrefetchLookupWhenBypassCache:(bool) track:(long long) representationId:(id)");
}

-(void) diskCacheToOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(void) diskCacheToOffset:(unsigned long long)");
}

-(void) fetchToOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(void) fetchToOffset:(unsigned long long)");
}

-(void) seekForwardToOffset:(unsigned long long) {
	%orig;
	NSLog(@"-(void) seekForwardToOffset:(unsigned long long)");
}

-(void) resetWithDataBlockDistributor:(id) {
	%orig;
	NSLog(@"-(void) resetWithDataBlockDistributor:(id)");
}

-(float) approxInMemoryFetchedSecondsBasedOnBitrate {
	%orig;
	NSLog(@"-(float) approxInMemoryFetchedSecondsBasedOnBitrate");
}

-(float) approxDiskCachedSecondsBasedOnBitrate {
	%orig;
	NSLog(@"-(float) approxDiskCachedSecondsBasedOnBitrate");
}

-(bool) diskCacheFetchInProgress {
	%orig;
	NSLog(@"-(bool) diskCacheFetchInProgress");
}

-(float) inMemoryFetchPercentage {
	%orig;
	NSLog(@"-(float) inMemoryFetchPercentage");
}

-(float) diskCachePercentage {
	%orig;
	NSLog(@"-(float) diskCachePercentage");
}

-(bool) fragmentedIsFullyDownloaded {
	%orig;
	NSLog(@"-(bool) fragmentedIsFullyDownloaded");
}

-(void) _setUrlIndex:(int) {
	%orig;
	NSLog(@"-(void) _setUrlIndex:(int)");
}

-(int) fragmentedFetchCount {
	%orig;
	NSLog(@"-(int) fragmentedFetchCount");
}

-(int) fragmentedNoOpFetchCount {
	%orig;
	NSLog(@"-(int) fragmentedNoOpFetchCount");
}

-(int) unfetchedSegmentCount {
	%orig;
	NSLog(@"-(int) unfetchedSegmentCount");
}

-(id) segmentedInitUrl {
	%orig;
	NSLog(@"-(id) segmentedInitUrl");
}

-(id) segmentedUrl {
	%orig;
	NSLog(@"-(id) segmentedUrl");
}

-(int) segmentedCurrentRequestOffset {
	%orig;
	NSLog(@"-(int) segmentedCurrentRequestOffset");
}

-(int) indexToFetchTo {
	%orig;
	NSLog(@"-(int) indexToFetchTo");
}

-(void) _forTestingBypassPrefetch {
	%orig;
	NSLog(@"-(void) _forTestingBypassPrefetch");
}

-(unsigned long long) diskCacheBytesRequested {
	%orig;
	NSLog(@"-(unsigned long long) diskCacheBytesRequested");
}

-(void) _dataCallback:(id) offset:(unsigned long long) dataRequest:(id) {
	%orig;
	NSLog(@"-(void) _dataCallback:(id) offset:(unsigned long long) dataRequest:(id)");
}

-(void) _dataFinished:(id) dataRequest:(id) contentInfo:(id) loadingRequest:(id) {
	%orig;
	NSLog(@"-(void) _dataFinished:(id) dataRequest:(id) contentInfo:(id) loadingRequest:(id)");
}

-(id) representationId {
	%orig;
	NSLog(@"-(id) representationId");
}

-(void) _forTestingMakeSynchronous {
	%orig;
	NSLog(@"-(void) _forTestingMakeSynchronous");
}

-(void) _forTestingEnableVodMidstreamSwitch {
	%orig;
	NSLog(@"-(void) _forTestingEnableVodMidstreamSwitch");
}

-(long long) track {
	%orig;
	NSLog(@"-(long long) track");
}

-(id) playlistData {
	%orig;
	NSLog(@"-(id) playlistData");
}

-(void) cancelRequests {
	%orig;
	NSLog(@"-(void) cancelRequests");
}

-(id) resourceLoader {
	%orig;
	NSLog(@"-(id) resourceLoader");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(unsigned long long) fileSize {
	%orig;
	NSLog(@"-(unsigned long long) fileSize");
}

%end

%hook FBAdCommandProcessor

+(void) sendBouncebackInfo:(id) withAdAction:(long long) withRequestId:(id) {
	%orig;
	NSLog(@"+(void) sendBouncebackInfo:(id) withAdAction:(long long) withRequestId:(id)");
}

+(bool) shouldInvalidate:(id) {
	%orig;
	NSLog(@"+(bool) shouldInvalidate:(id)");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) interstitialAdDidClose:(id) {
	%orig;
	NSLog(@"-(void) interstitialAdDidClose:(id)");
}

-(bool) processCommand:(id) withExtraData:(id) adDataModel:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(bool) processCommand:(id) withExtraData:(id) adDataModel:(id) completionHandler:(id)");
}

-(bool) launchAppForEngagement:(id) {
	%orig;
	NSLog(@"-(bool) launchAppForEngagement:(id)");
}

-(bool) preloadProductViewControllerIfAvailable:(id) {
	%orig;
	NSLog(@"-(bool) preloadProductViewControllerIfAvailable:(id)");
}

-(bool) openLinkInApp:(id) {
	%orig;
	NSLog(@"-(bool) openLinkInApp:(id)");
}

-(void) callCompletionHandlerForCommand:(long long) withAdAction:(long long) {
	%orig;
	NSLog(@"-(void) callCompletionHandlerForCommand:(long long) withAdAction:(long long)");
}

-(bool) launchURLOutOfApp:(id) withAdAction:(long long) {
	%orig;
	NSLog(@"-(bool) launchURLOutOfApp:(id) withAdAction:(long long)");
}

-(bool) isValidViewController:(id) {
	%orig;
	NSLog(@"-(bool) isValidViewController:(id)");
}

-(id) adDataModel {
	%orig;
	NSLog(@"-(id) adDataModel");
}

-(void) doneCommandProcessing {
	%orig;
	NSLog(@"-(void) doneCommandProcessing");
}

-(void) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) viewControllerDismissed:(id)");
}

-(void) viewControllerCompleted:(id) {
	%orig;
	NSLog(@"-(void) viewControllerCompleted:(id)");
}

-(bool) processCommand:(id) adDataModel:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(bool) processCommand:(id) adDataModel:(id) completionHandler:(id)");
}

-(void) setAdDataModel:(id) {
	%orig;
	NSLog(@"-(void) setAdDataModel:(id)");
}

-(id) lastActionStartTime {
	%orig;
	NSLog(@"-(id) lastActionStartTime");
}

-(void) setLastActionStartTime:(id) {
	%orig;
	NSLog(@"-(void) setLastActionStartTime:(id)");
}

-(long long) lastAdAction {
	%orig;
	NSLog(@"-(long long) lastAdAction");
}

-(void) setLastAdAction:(long long) {
	%orig;
	NSLog(@"-(void) setLastAdAction:(long long)");
}

-(void) setProductViewController:(id) {
	%orig;
	NSLog(@"-(void) setProductViewController:(id)");
}

-(id) productViewController {
	%orig;
	NSLog(@"-(id) productViewController");
}

-(void) productViewControllerDidFinish:(id) {
	%orig;
	NSLog(@"-(void) productViewControllerDidFinish:(id)");
}

-(id) interstitialAd {
	%orig;
	NSLog(@"-(id) interstitialAd");
}

-(void) setInterstitialAd:(id) {
	%orig;
	NSLog(@"-(void) setInterstitialAd:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) completionHandler {
	%orig;
	NSLog(@"-(id) completionHandler");
}

-(void) setCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setCompletionHandler:(id)");
}

%end

%hook FBPlaceholderObject

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) fetchResource {
	%orig;
	NSLog(@"-(void) fetchResource");
}

-(void) setPersistPlaceholder:(id) {
	%orig;
	NSLog(@"-(void) setPersistPlaceholder:(id)");
}

-(void) cleanupPlaceholder {
	%orig;
	NSLog(@"-(void) cleanupPlaceholder");
}

-(id) fetchResourceOperation {
	%orig;
	NSLog(@"-(id) fetchResourceOperation");
}

-(bool) isFetchedResource {
	%orig;
	NSLog(@"-(bool) isFetchedResource");
}

-(void) setFetchedResource:(bool) {
	%orig;
	NSLog(@"-(void) setFetchedResource:(bool)");
}

-(void) setFetchResourceOperation:(id) {
	%orig;
	NSLog(@"-(void) setFetchResourceOperation:(id)");
}

-(long long) retriesLeft {
	%orig;
	NSLog(@"-(long long) retriesLeft");
}

-(void) setRetriesLeft:(long long) {
	%orig;
	NSLog(@"-(void) setRetriesLeft:(long long)");
}

-(id) fetchResourceBlock {
	%orig;
	NSLog(@"-(id) fetchResourceBlock");
}

-(id) initWithKey:(id) withURL:(id) withFetchType:(long long) withCache:(id) {
	%orig;
	NSLog(@"-(id) initWithKey:(id) withURL:(id) withFetchType:(long long) withCache:(id)");
}

-(void) setFetchType:(long long) {
	%orig;
	NSLog(@"-(void) setFetchType:(long long)");
}

-(id) persistPlaceholder {
	%orig;
	NSLog(@"-(id) persistPlaceholder");
}

-(void) setUnderlyingQueue:(id) {
	%orig;
	NSLog(@"-(void) setUnderlyingQueue:(id)");
}

-(void) addCallback:(id) {
	%orig;
	NSLog(@"-(void) addCallback:(id)");
}

-(long long) fetchType {
	%orig;
	NSLog(@"-(long long) fetchType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) key {
	%orig;
	NSLog(@"-(id) key");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

-(void) setKey:(id) {
	%orig;
	NSLog(@"-(void) setKey:(id)");
}

-(id) underlyingQueue {
	%orig;
	NSLog(@"-(id) underlyingQueue");
}

-(void) setCache:(id) {
	%orig;
	NSLog(@"-(void) setCache:(id)");
}

-(id) cache {
	%orig;
	NSLog(@"-(id) cache");
}

%end

%hook FBAdCachedObject

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithObject:(id) withExpiration:(id) {
	%orig;
	NSLog(@"-(id) initWithObject:(id) withExpiration:(id)");
}

-(void) setExpiration:(double) {
	%orig;
	NSLog(@"-(void) setExpiration:(double)");
}

-(double) expiration {
	%orig;
	NSLog(@"-(double) expiration");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) object {
	%orig;
	NSLog(@"-(id) object");
}

-(void) setObject:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id)");
}

%end

%hook GCDAsyncUdpSocket

+(bool) isIPv4Address:(id) {
	%orig;
	NSLog(@"+(bool) isIPv4Address:(id)");
}

+(bool) isIPv6Address:(id) {
	%orig;
	NSLog(@"+(bool) isIPv6Address:(id)");
}

+(unsigned short) portFromAddress:(id) {
	%orig;
	NSLog(@"+(unsigned short) portFromAddress:(id)");
}

+(id) hostFromSockaddr4:(const sockaddr_in*) {
	%orig;
	NSLog(@"+(id) hostFromSockaddr4:(const sockaddr_in*)");
}

+(id) hostFromSockaddr6:(const sockaddr_in6*) {
	%orig;
	NSLog(@"+(id) hostFromSockaddr6:(const sockaddr_in6*)");
}

+(unsigned short) portFromSockaddr4:(const sockaddr_in*) {
	%orig;
	NSLog(@"+(unsigned short) portFromSockaddr4:(const sockaddr_in*)");
}

+(unsigned short) portFromSockaddr6:(const sockaddr_in6*) {
	%orig;
	NSLog(@"+(unsigned short) portFromSockaddr6:(const sockaddr_in6*)");
}

+(bool) getHost:(id*) port:(unsigned short*) fromAddress:(id) {
	%orig;
	NSLog(@"+(bool) getHost:(id*) port:(unsigned short*) fromAddress:(id)");
}

+(bool) getHost:(id*) port:(unsigned short*) family:(int*) fromAddress:(id) {
	%orig;
	NSLog(@"+(bool) getHost:(id*) port:(unsigned short*) family:(int*) fromAddress:(id)");
}

+(id) hostFromAddress:(id) {
	%orig;
	NSLog(@"+(id) hostFromAddress:(id)");
}

+(int) familyFromAddress:(id) {
	%orig;
	NSLog(@"+(int) familyFromAddress:(id)");
}

+(void) listenerThread {
	%orig;
	NSLog(@"+(void) listenerThread");
}

+(void) startListenerThreadIfNeeded {
	%orig;
	NSLog(@"+(void) startListenerThreadIfNeeded");
}

+(void) addStreamListener:(id) {
	%orig;
	NSLog(@"+(void) addStreamListener:(id)");
}

+(void) removeStreamListener:(id) {
	%orig;
	NSLog(@"+(void) removeStreamListener:(id)");
}

+(void) ignore:(id) {
	%orig;
	NSLog(@"+(void) ignore:(id)");
}

-(id) initWithDelegate:(id) delegateQueue:(dispatch_queue_s*) socketQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) delegateQueue:(dispatch_queue_s*) socketQueue:(dispatch_queue_s*)");
}

-(void) setDelegate:(id) synchronously:(bool) {
	%orig;
	NSLog(@"-(void) setDelegate:(id) synchronously:(bool)");
}

-(void) setDelegateQueue:(dispatch_queue_s*) synchronously:(bool) {
	%orig;
	NSLog(@"-(void) setDelegateQueue:(dispatch_queue_s*) synchronously:(bool)");
}

-(void) setDelegate:(id) delegateQueue:(dispatch_queue_s*) synchronously:(bool) {
	%orig;
	NSLog(@"-(void) setDelegate:(id) delegateQueue:(dispatch_queue_s*) synchronously:(bool)");
}

-(id) errnoErrorWithReason:(id) {
	%orig;
	NSLog(@"-(id) errnoErrorWithReason:(id)");
}

-(id) badConfigError:(id) {
	%orig;
	NSLog(@"-(id) badConfigError:(id)");
}

-(id) badParamError:(id) {
	%orig;
	NSLog(@"-(id) badParamError:(id)");
}

-(id) otherError:(id) {
	%orig;
	NSLog(@"-(id) otherError:(id)");
}

-(int) socket4FD {
	%orig;
	NSLog(@"-(int) socket4FD");
}

-(int) socket6FD {
	%orig;
	NSLog(@"-(int) socket6FD");
}

-(id) connectedHost {
	%orig;
	NSLog(@"-(id) connectedHost");
}

-(unsigned short) connectedPort {
	%orig;
	NSLog(@"-(unsigned short) connectedPort");
}

-(void) removeStreamsFromRunLoop {
	%orig;
	NSLog(@"-(void) removeStreamsFromRunLoop");
}

-(id) gaiError:(int) {
	%orig;
	NSLog(@"-(id) gaiError:(int)");
}

-(id) initWithSocketQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(id) initWithSocketQueue:(dispatch_queue_s*)");
}

-(void) synchronouslySetDelegate:(id) {
	%orig;
	NSLog(@"-(void) synchronouslySetDelegate:(id)");
}

-(void) synchronouslySetDelegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) synchronouslySetDelegateQueue:(dispatch_queue_s*)");
}

-(void) getDelegate:(id*) delegateQueue:(dispatch_queue_s**) {
	%orig;
	NSLog(@"-(void) getDelegate:(id*) delegateQueue:(dispatch_queue_s**)");
}

-(void) setDelegate:(id) delegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) setDelegate:(id) delegateQueue:(dispatch_queue_s*)");
}

-(void) synchronouslySetDelegate:(id) delegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) synchronouslySetDelegate:(id) delegateQueue:(dispatch_queue_s*)");
}

-(bool) isIPv4Enabled {
	%orig;
	NSLog(@"-(bool) isIPv4Enabled");
}

-(void) setIPv4Enabled:(bool) {
	%orig;
	NSLog(@"-(void) setIPv4Enabled:(bool)");
}

-(void) setIPv6Enabled:(bool) {
	%orig;
	NSLog(@"-(void) setIPv6Enabled:(bool)");
}

-(bool) connectToHost:(id) onPort:(unsigned short) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToHost:(id) onPort:(unsigned short) error:(id*)");
}

-(id) errnoError {
	%orig;
	NSLog(@"-(id) errnoError");
}

-(id) localHost {
	%orig;
	NSLog(@"-(id) localHost");
}

-(id) connectedAddress {
	%orig;
	NSLog(@"-(id) connectedAddress");
}

-(bool) isIPv4 {
	%orig;
	NSLog(@"-(bool) isIPv4");
}

-(void) markSocketQueueTargetQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) markSocketQueueTargetQueue:(dispatch_queue_s*)");
}

-(void) unmarkSocketQueueTargetQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) unmarkSocketQueueTargetQueue:(dispatch_queue_s*)");
}

-(__CFReadStream*) readStream {
	%orig;
	NSLog(@"-(__CFReadStream*) readStream");
}

-(__CFWriteStream*) writeStream {
	%orig;
	NSLog(@"-(__CFWriteStream*) writeStream");
}

-(void) suspendSend4Source {
	%orig;
	NSLog(@"-(void) suspendSend4Source");
}

-(void) doSend {
	%orig;
	NSLog(@"-(void) doSend");
}

-(void) doReceive {
	%orig;
	NSLog(@"-(void) doReceive");
}

-(void) doReceiveEOF {
	%orig;
	NSLog(@"-(void) doReceiveEOF");
}

-(void) suspendSend6Source {
	%orig;
	NSLog(@"-(void) suspendSend6Source");
}

-(void) setupSendAndReceiveSourcesForSocket4 {
	%orig;
	NSLog(@"-(void) setupSendAndReceiveSourcesForSocket4");
}

-(void) setupSendAndReceiveSourcesForSocket6 {
	%orig;
	NSLog(@"-(void) setupSendAndReceiveSourcesForSocket6");
}

-(bool) createSocket4:(bool) socket6:(bool) error:(id*) {
	%orig;
	NSLog(@"-(bool) createSocket4:(bool) socket6:(bool) error:(id*)");
}

-(void) resumeSend4Source {
	%orig;
	NSLog(@"-(void) resumeSend4Source");
}

-(void) resumeReceive4Source {
	%orig;
	NSLog(@"-(void) resumeReceive4Source");
}

-(void) resumeSend6Source {
	%orig;
	NSLog(@"-(void) resumeSend6Source");
}

-(void) resumeReceive6Source {
	%orig;
	NSLog(@"-(void) resumeReceive6Source");
}

-(void) closeSocket4 {
	%orig;
	NSLog(@"-(void) closeSocket4");
}

-(void) closeSocket6 {
	%orig;
	NSLog(@"-(void) closeSocket6");
}

-(bool) getLocalAddress:(id*) host:(id*) port:(unsigned short*) forSocket:(int) withFamily:(int) {
	%orig;
	NSLog(@"-(bool) getLocalAddress:(id*) host:(id*) port:(unsigned short*) forSocket:(int) withFamily:(int)");
}

-(void) maybeUpdateCachedLocalAddress4Info {
	%orig;
	NSLog(@"-(void) maybeUpdateCachedLocalAddress4Info");
}

-(void) maybeUpdateCachedLocalAddress6Info {
	%orig;
	NSLog(@"-(void) maybeUpdateCachedLocalAddress6Info");
}

-(void) maybeUpdateCachedConnectedAddressInfo {
	%orig;
	NSLog(@"-(void) maybeUpdateCachedConnectedAddressInfo");
}

-(bool) preOp:(id*) {
	%orig;
	NSLog(@"-(bool) preOp:(id*)");
}

-(bool) bindToPort:(unsigned short) interface:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) bindToPort:(unsigned short) interface:(id) error:(id*)");
}

-(bool) preBind:(id*) {
	%orig;
	NSLog(@"-(bool) preBind:(id*)");
}

-(void) convertIntefaceDescription:(id) port:(unsigned short) intoAddress4:(id*) address6:(id*) {
	%orig;
	NSLog(@"-(void) convertIntefaceDescription:(id) port:(unsigned short) intoAddress4:(id*) address6:(id*)");
}

-(void) closeSockets {
	%orig;
	NSLog(@"-(void) closeSockets");
}

-(bool) preConnect:(id*) {
	%orig;
	NSLog(@"-(bool) preConnect:(id*)");
}

-(bool) createSockets:(id*) {
	%orig;
	NSLog(@"-(bool) createSockets:(id*)");
}

-(void) maybeConnect {
	%orig;
	NSLog(@"-(void) maybeConnect");
}

-(void) asyncResolveHost:(id) port:(unsigned short) withCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) asyncResolveHost:(id) port:(unsigned short) withCompletionBlock:(id)");
}

-(void) maybeDequeueSend {
	%orig;
	NSLog(@"-(void) maybeDequeueSend");
}

-(void) notifyDidNotConnect:(id) {
	%orig;
	NSLog(@"-(void) notifyDidNotConnect:(id)");
}

-(int) getAddress:(id*) error:(id*) fromAddresses:(id) {
	%orig;
	NSLog(@"-(int) getAddress:(id*) error:(id*) fromAddresses:(id)");
}

-(bool) connectWithAddress4:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectWithAddress4:(id) error:(id*)");
}

-(bool) connectWithAddress6:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectWithAddress6:(id) error:(id*)");
}

-(void) notifyDidConnectToAddress:(id) {
	%orig;
	NSLog(@"-(void) notifyDidConnectToAddress:(id)");
}

-(void) endCurrentSend {
	%orig;
	NSLog(@"-(void) endCurrentSend");
}

-(bool) joinMulticastGroup:(id) onInterface:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) joinMulticastGroup:(id) onInterface:(id) error:(id*)");
}

-(bool) performMulticastRequest:(int) forGroup:(id) onInterface:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) performMulticastRequest:(int) forGroup:(id) onInterface:(id) error:(id*)");
}

-(bool) leaveMulticastGroup:(id) onInterface:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) leaveMulticastGroup:(id) onInterface:(id) error:(id*)");
}

-(bool) preJoin:(id*) {
	%orig;
	NSLog(@"-(bool) preJoin:(id*)");
}

-(void) convertNumericHost:(id) port:(unsigned short) intoAddress4:(id*) address6:(id*) {
	%orig;
	NSLog(@"-(void) convertNumericHost:(id) port:(unsigned short) intoAddress4:(id*) address6:(id*)");
}

-(unsigned int) indexOfInterfaceAddr6:(id) {
	%orig;
	NSLog(@"-(unsigned int) indexOfInterfaceAddr6:(id)");
}

-(void) sendData:(id) withTimeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(void) sendData:(id) withTimeout:(double) tag:(long long)");
}

-(void) doPreSend {
	%orig;
	NSLog(@"-(void) doPreSend");
}

-(void) setSendFilter:(id) withQueue:(?) isAsynchronous:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) setSendFilter:(id) withQueue:(?) isAsynchronous:(dispatch_queue_s*)");
}

-(void) notifyDidNotSendDataWithTag:(long long) dueToError:(id) {
	%orig;
	NSLog(@"-(void) notifyDidNotSendDataWithTag:(long long) dueToError:(id)");
}

-(void) notifyDidSendDataWithTag:(long long) {
	%orig;
	NSLog(@"-(void) notifyDidSendDataWithTag:(long long)");
}

-(void) setupSendTimerWithTimeout:(double) {
	%orig;
	NSLog(@"-(void) setupSendTimerWithTimeout:(double)");
}

-(id) sendTimeoutError {
	%orig;
	NSLog(@"-(id) sendTimeoutError");
}

-(void) doSendTimeout {
	%orig;
	NSLog(@"-(void) doSendTimeout");
}

-(void) suspendReceive4Source {
	%orig;
	NSLog(@"-(void) suspendReceive4Source");
}

-(void) suspendReceive6Source {
	%orig;
	NSLog(@"-(void) suspendReceive6Source");
}

-(void) setReceiveFilter:(id) withQueue:(?) isAsynchronous:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) setReceiveFilter:(id) withQueue:(?) isAsynchronous:(dispatch_queue_s*)");
}

-(bool) isConnectedToAddress4:(id) {
	%orig;
	NSLog(@"-(bool) isConnectedToAddress4:(id)");
}

-(bool) isConnectedToAddress6:(id) {
	%orig;
	NSLog(@"-(bool) isConnectedToAddress6:(id)");
}

-(void) notifyDidReceiveData:(id) fromAddress:(id) withFilterContext:(id) {
	%orig;
	NSLog(@"-(void) notifyDidReceiveData:(id) fromAddress:(id) withFilterContext:(id)");
}

-(id) socketClosedError {
	%orig;
	NSLog(@"-(id) socketClosedError");
}

-(void) closeReadAndWriteStreams {
	%orig;
	NSLog(@"-(void) closeReadAndWriteStreams");
}

-(bool) createReadAndWriteStreams:(id*) {
	%orig;
	NSLog(@"-(bool) createReadAndWriteStreams:(id*)");
}

-(bool) isIPv4Preferred {
	%orig;
	NSLog(@"-(bool) isIPv4Preferred");
}

-(bool) isIPv6Preferred {
	%orig;
	NSLog(@"-(bool) isIPv6Preferred");
}

-(bool) isIPVersionNeutral {
	%orig;
	NSLog(@"-(bool) isIPVersionNeutral");
}

-(void) setPreferIPv4 {
	%orig;
	NSLog(@"-(void) setPreferIPv4");
}

-(void) setPreferIPv6 {
	%orig;
	NSLog(@"-(void) setPreferIPv6");
}

-(void) setIPVersionNeutral {
	%orig;
	NSLog(@"-(void) setIPVersionNeutral");
}

-(unsigned short) maxReceiveIPv4BufferSize {
	%orig;
	NSLog(@"-(unsigned short) maxReceiveIPv4BufferSize");
}

-(void) setMaxReceiveIPv4BufferSize:(unsigned short) {
	%orig;
	NSLog(@"-(void) setMaxReceiveIPv4BufferSize:(unsigned short)");
}

-(unsigned int) maxReceiveIPv6BufferSize {
	%orig;
	NSLog(@"-(unsigned int) maxReceiveIPv6BufferSize");
}

-(void) setMaxReceiveIPv6BufferSize:(unsigned int) {
	%orig;
	NSLog(@"-(void) setMaxReceiveIPv6BufferSize:(unsigned int)");
}

-(void) setMaxSendBufferSize:(unsigned short) {
	%orig;
	NSLog(@"-(void) setMaxSendBufferSize:(unsigned short)");
}

-(unsigned short) maxSendBufferSize {
	%orig;
	NSLog(@"-(unsigned short) maxSendBufferSize");
}

-(unsigned int) indexOfInterfaceAddr4:(id) {
	%orig;
	NSLog(@"-(unsigned int) indexOfInterfaceAddr4:(id)");
}

-(id) localAddress_IPv4 {
	%orig;
	NSLog(@"-(id) localAddress_IPv4");
}

-(id) localHost_IPv4 {
	%orig;
	NSLog(@"-(id) localHost_IPv4");
}

-(unsigned short) localPort_IPv4 {
	%orig;
	NSLog(@"-(unsigned short) localPort_IPv4");
}

-(id) localAddress_IPv6 {
	%orig;
	NSLog(@"-(id) localAddress_IPv6");
}

-(id) localHost_IPv6 {
	%orig;
	NSLog(@"-(id) localHost_IPv6");
}

-(unsigned short) localPort_IPv6 {
	%orig;
	NSLog(@"-(unsigned short) localPort_IPv6");
}

-(bool) bindToPort:(unsigned short) error:(id*) {
	%orig;
	NSLog(@"-(bool) bindToPort:(unsigned short) error:(id*)");
}

-(bool) bindToAddress:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) bindToAddress:(id) error:(id*)");
}

-(bool) joinMulticastGroup:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) joinMulticastGroup:(id) error:(id*)");
}

-(bool) enableReusePort:(bool) error:(id*) {
	%orig;
	NSLog(@"-(bool) enableReusePort:(bool) error:(id*)");
}

-(bool) enableBroadcast:(bool) error:(id*) {
	%orig;
	NSLog(@"-(bool) enableBroadcast:(bool) error:(id*)");
}

-(void) sendData:(id) withTag:(long long) {
	%orig;
	NSLog(@"-(void) sendData:(id) withTag:(long long)");
}

-(void) sendData:(id) toHost:(id) port:(unsigned short) withTimeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(void) sendData:(id) toHost:(id) port:(unsigned short) withTimeout:(double) tag:(long long)");
}

-(void) sendData:(id) toAddress:(id) withTimeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(void) sendData:(id) toAddress:(id) withTimeout:(double) tag:(long long)");
}

-(void) setSendFilter:(id) withQueue:(?) {
	%orig;
	NSLog(@"-(void) setSendFilter:(id) withQueue:(?)");
}

-(bool) receiveOnce:(id*) {
	%orig;
	NSLog(@"-(bool) receiveOnce:(id*)");
}

-(bool) beginReceiving:(id*) {
	%orig;
	NSLog(@"-(bool) beginReceiving:(id*)");
}

-(void) pauseReceiving {
	%orig;
	NSLog(@"-(void) pauseReceiving");
}

-(void) setReceiveFilter:(id) withQueue:(?) {
	%orig;
	NSLog(@"-(void) setReceiveFilter:(id) withQueue:(?)");
}

-(void) closeAfterSending {
	%orig;
	NSLog(@"-(void) closeAfterSending");
}

-(bool) registerForStreamCallbacks:(id*) {
	%orig;
	NSLog(@"-(bool) registerForStreamCallbacks:(id*)");
}

-(bool) addStreamsToRunLoop:(id*) {
	%orig;
	NSLog(@"-(bool) addStreamsToRunLoop:(id*)");
}

-(bool) openStreams:(id*) {
	%orig;
	NSLog(@"-(bool) openStreams:(id*)");
}

-(bool) enableBackgroundingOnSockets {
	%orig;
	NSLog(@"-(bool) enableBackgroundingOnSockets");
}

-(bool) connectToAddress:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToAddress:(id) error:(id*)");
}

-(bool) leaveMulticastGroup:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) leaveMulticastGroup:(id) error:(id*)");
}

-(void) notifyDidCloseWithError:(id) {
	%orig;
	NSLog(@"-(void) notifyDidCloseWithError:(id)");
}

-(bool) isClosed {
	%orig;
	NSLog(@"-(bool) isClosed");
}

-(id) initWithDelegate:(id) delegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) delegateQueue:(dispatch_queue_s*)");
}

-(bool) isConnected {
	%orig;
	NSLog(@"-(bool) isConnected");
}

-(int) socketFD {
	%orig;
	NSLog(@"-(int) socketFD");
}

-(bool) isIPv6Enabled {
	%orig;
	NSLog(@"-(bool) isIPv6Enabled");
}

-(void) closeWithError:(id) {
	%orig;
	NSLog(@"-(void) closeWithError:(id)");
}

-(bool) isIPv6 {
	%orig;
	NSLog(@"-(bool) isIPv6");
}

-(id) localAddress {
	%orig;
	NSLog(@"-(id) localAddress");
}

-(unsigned short) localPort {
	%orig;
	NSLog(@"-(unsigned short) localPort");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) performBlock:(id) {
	%orig;
	NSLog(@"-(void) performBlock:(id)");
}

-(void) close {
	%orig;
	NSLog(@"-(void) close");
}

-(id) userData {
	%orig;
	NSLog(@"-(id) userData");
}

-(void) setUserData:(id) {
	%orig;
	NSLog(@"-(void) setUserData:(id)");
}

-(void) applicationWillEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) applicationWillEnterForeground:(id)");
}

-(dispatch_queue_s*) delegateQueue {
	%orig;
	NSLog(@"-(dispatch_queue_s*) delegateQueue");
}

-(void) setDelegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) setDelegateQueue:(dispatch_queue_s*)");
}

%end

%hook GCDAsyncUdpSpecialPacket

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GCDAsyncUdpSendPacket

-(id) initWithData:(id) timeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(id) initWithData:(id) timeout:(double) tag:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GCDAsyncSocket

+(id) socketFromConnectedSocketFD:(int) delegate:(id) delegateQueue:(dispatch_queue_s*) socketQueue:(dispatch_queue_s*) error:(id*) {
	%orig;
	NSLog(@"+(id) socketFromConnectedSocketFD:(int) delegate:(id) delegateQueue:(dispatch_queue_s*) socketQueue:(dispatch_queue_s*) error:(id*)");
}

+(id) lookupHost:(id) port:(unsigned short) error:(id*) {
	%orig;
	NSLog(@"+(id) lookupHost:(id) port:(unsigned short) error:(id*)");
}

+(bool) isIPv4Address:(id) {
	%orig;
	NSLog(@"+(bool) isIPv4Address:(id)");
}

+(bool) isIPv6Address:(id) {
	%orig;
	NSLog(@"+(bool) isIPv6Address:(id)");
}

+(unsigned short) portFromAddress:(id) {
	%orig;
	NSLog(@"+(unsigned short) portFromAddress:(id)");
}

+(id) hostFromSockaddr4:(const sockaddr_in*) {
	%orig;
	NSLog(@"+(id) hostFromSockaddr4:(const sockaddr_in*)");
}

+(id) hostFromSockaddr6:(const sockaddr_in6*) {
	%orig;
	NSLog(@"+(id) hostFromSockaddr6:(const sockaddr_in6*)");
}

+(unsigned short) portFromSockaddr4:(const sockaddr_in*) {
	%orig;
	NSLog(@"+(unsigned short) portFromSockaddr4:(const sockaddr_in*)");
}

+(unsigned short) portFromSockaddr6:(const sockaddr_in6*) {
	%orig;
	NSLog(@"+(unsigned short) portFromSockaddr6:(const sockaddr_in6*)");
}

+(id) urlFromSockaddrUN:(const sockaddr_un*) {
	%orig;
	NSLog(@"+(id) urlFromSockaddrUN:(const sockaddr_un*)");
}

+(void) cfstreamThread {
	%orig;
	NSLog(@"+(void) cfstreamThread");
}

+(void) startCFStreamThreadIfNeeded {
	%orig;
	NSLog(@"+(void) startCFStreamThreadIfNeeded");
}

+(void) scheduleCFStreams:(id) {
	%orig;
	NSLog(@"+(void) scheduleCFStreams:(id)");
}

+(void) unscheduleCFStreams:(id) {
	%orig;
	NSLog(@"+(void) unscheduleCFStreams:(id)");
}

+(void) stopCFStreamThreadIfNeeded {
	%orig;
	NSLog(@"+(void) stopCFStreamThreadIfNeeded");
}

+(id) gaiError:(int) {
	%orig;
	NSLog(@"+(id) gaiError:(int)");
}

+(bool) getHost:(id*) port:(unsigned short*) fromAddress:(id) {
	%orig;
	NSLog(@"+(bool) getHost:(id*) port:(unsigned short*) fromAddress:(id)");
}

+(bool) getHost:(id*) port:(unsigned short*) family:(char*) fromAddress:(id) {
	%orig;
	NSLog(@"+(bool) getHost:(id*) port:(unsigned short*) family:(char*) fromAddress:(id)");
}

+(id) socketFromConnectedSocketFD:(int) socketQueue:(dispatch_queue_s*) error:(id*) {
	%orig;
	NSLog(@"+(id) socketFromConnectedSocketFD:(int) socketQueue:(dispatch_queue_s*) error:(id*)");
}

+(id) socketFromConnectedSocketFD:(int) delegate:(id) delegateQueue:(dispatch_queue_s*) error:(id*) {
	%orig;
	NSLog(@"+(id) socketFromConnectedSocketFD:(int) delegate:(id) delegateQueue:(dispatch_queue_s*) error:(id*)");
}

+(id) hostFromAddress:(id) {
	%orig;
	NSLog(@"+(id) hostFromAddress:(id)");
}

+(id) CRLFData {
	%orig;
	NSLog(@"+(id) CRLFData");
}

+(id) CRData {
	%orig;
	NSLog(@"+(id) CRData");
}

+(id) LFData {
	%orig;
	NSLog(@"+(id) LFData");
}

+(id) ZeroData {
	%orig;
	NSLog(@"+(id) ZeroData");
}

+(void) ignore:(id) {
	%orig;
	NSLog(@"+(void) ignore:(id)");
}

-(id) initWithDelegate:(id) delegateQueue:(dispatch_queue_s*) socketQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) delegateQueue:(dispatch_queue_s*) socketQueue:(dispatch_queue_s*)");
}

-(void) didConnect:(int) {
	%orig;
	NSLog(@"-(void) didConnect:(int)");
}

-(void) setDelegate:(id) synchronously:(bool) {
	%orig;
	NSLog(@"-(void) setDelegate:(id) synchronously:(bool)");
}

-(void) setDelegateQueue:(dispatch_queue_s*) synchronously:(bool) {
	%orig;
	NSLog(@"-(void) setDelegateQueue:(dispatch_queue_s*) synchronously:(bool)");
}

-(void) setDelegate:(id) delegateQueue:(dispatch_queue_s*) synchronously:(bool) {
	%orig;
	NSLog(@"-(void) setDelegate:(id) delegateQueue:(dispatch_queue_s*) synchronously:(bool)");
}

-(bool) acceptOnInterface:(id) port:(unsigned short) error:(id*) {
	%orig;
	NSLog(@"-(bool) acceptOnInterface:(id) port:(unsigned short) error:(id*)");
}

-(id) errnoErrorWithReason:(id) {
	%orig;
	NSLog(@"-(id) errnoErrorWithReason:(id)");
}

-(id) badConfigError:(id) {
	%orig;
	NSLog(@"-(id) badConfigError:(id)");
}

-(void) getInterfaceAddress4:(id*) address6:(id*) fromDescription:(id) port:(unsigned short) {
	%orig;
	NSLog(@"-(void) getInterfaceAddress4:(id*) address6:(id*) fromDescription:(id) port:(unsigned short)");
}

-(id) badParamError:(id) {
	%orig;
	NSLog(@"-(id) badParamError:(id)");
}

-(unsigned short) localPort4 {
	%orig;
	NSLog(@"-(unsigned short) localPort4");
}

-(bool) doAccept:(int) {
	%orig;
	NSLog(@"-(bool) doAccept:(int)");
}

-(id) otherError:(id) {
	%orig;
	NSLog(@"-(id) otherError:(id)");
}

-(id) getInterfaceAddressFromUrl:(id) {
	%orig;
	NSLog(@"-(id) getInterfaceAddressFromUrl:(id)");
}

-(void) setupReadAndWriteSourcesForNewlyConnectedSocket:(int) {
	%orig;
	NSLog(@"-(void) setupReadAndWriteSourcesForNewlyConnectedSocket:(int)");
}

-(bool) connectToHost:(id) onPort:(unsigned short) withTimeout:(double) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToHost:(id) onPort:(unsigned short) withTimeout:(double) error:(id*)");
}

-(bool) connectToHost:(id) onPort:(unsigned short) viaInterface:(id) withTimeout:(double) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToHost:(id) onPort:(unsigned short) viaInterface:(id) withTimeout:(double) error:(id*)");
}

-(bool) preConnectWithInterface:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) preConnectWithInterface:(id) error:(id*)");
}

-(void) lookup:(int) didFail:(id) {
	%orig;
	NSLog(@"-(void) lookup:(int) didFail:(id)");
}

-(void) lookup:(int) didSucceedWithAddress4:(id) address6:(id) {
	%orig;
	NSLog(@"-(void) lookup:(int) didSucceedWithAddress4:(id) address6:(id)");
}

-(void) startConnectTimeout:(double) {
	%orig;
	NSLog(@"-(void) startConnectTimeout:(double)");
}

-(bool) connectToAddress:(id) viaInterface:(id) withTimeout:(double) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToAddress:(id) viaInterface:(id) withTimeout:(double) error:(id*)");
}

-(bool) connectWithAddress4:(id) address6:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectWithAddress4:(id) address6:(id) error:(id*)");
}

-(bool) preConnectWithUrl:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) preConnectWithUrl:(id) error:(id*)");
}

-(bool) connectWithAddressUN:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectWithAddressUN:(id) error:(id*)");
}

-(void) endConnectTimeout {
	%orig;
	NSLog(@"-(void) endConnectTimeout");
}

-(bool) bindSocket:(int) toInterface:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) bindSocket:(int) toInterface:(id) error:(id*)");
}

-(void) closeUnusedSocket:(int) {
	%orig;
	NSLog(@"-(void) closeUnusedSocket:(int)");
}

-(int) socket4FD {
	%orig;
	NSLog(@"-(int) socket4FD");
}

-(int) socket6FD {
	%orig;
	NSLog(@"-(int) socket6FD");
}

-(void) didNotConnect:(int) error:(id) {
	%orig;
	NSLog(@"-(void) didNotConnect:(int) error:(id)");
}

-(int) createSocket:(int) connectInterface:(id) errPtr:(id*) {
	%orig;
	NSLog(@"-(int) createSocket:(int) connectInterface:(id) errPtr:(id*)");
}

-(void) connectSocket:(int) address:(id) stateIndex:(int) {
	%orig;
	NSLog(@"-(void) connectSocket:(int) address:(id) stateIndex:(int)");
}

-(bool) createReadAndWriteStream {
	%orig;
	NSLog(@"-(bool) createReadAndWriteStream");
}

-(bool) registerForStreamCallbacksIncludingReadWrite:(bool) {
	%orig;
	NSLog(@"-(bool) registerForStreamCallbacksIncludingReadWrite:(bool)");
}

-(bool) addStreamsToRunLoop {
	%orig;
	NSLog(@"-(bool) addStreamsToRunLoop");
}

-(bool) openStreams {
	%orig;
	NSLog(@"-(bool) openStreams");
}

-(id) connectedHost {
	%orig;
	NSLog(@"-(id) connectedHost");
}

-(unsigned short) connectedPort {
	%orig;
	NSLog(@"-(unsigned short) connectedPort");
}

-(id) connectedUrl {
	%orig;
	NSLog(@"-(id) connectedUrl");
}

-(void) maybeDequeueRead {
	%orig;
	NSLog(@"-(void) maybeDequeueRead");
}

-(void) maybeDequeueWrite {
	%orig;
	NSLog(@"-(void) maybeDequeueWrite");
}

-(void) doConnectTimeout {
	%orig;
	NSLog(@"-(void) doConnectTimeout");
}

-(id) connectTimeoutError {
	%orig;
	NSLog(@"-(id) connectTimeoutError");
}

-(void) endCurrentRead {
	%orig;
	NSLog(@"-(void) endCurrentRead");
}

-(void) endCurrentWrite {
	%orig;
	NSLog(@"-(void) endCurrentWrite");
}

-(void) removeStreamsFromRunLoop {
	%orig;
	NSLog(@"-(void) removeStreamsFromRunLoop");
}

-(void) resumeReadSource {
	%orig;
	NSLog(@"-(void) resumeReadSource");
}

-(void) resumeWriteSource {
	%orig;
	NSLog(@"-(void) resumeWriteSource");
}

-(void) maybeClose {
	%orig;
	NSLog(@"-(void) maybeClose");
}

-(id) connectedHostFromSocket4:(int) {
	%orig;
	NSLog(@"-(id) connectedHostFromSocket4:(int)");
}

-(id) connectedHostFromSocket6:(int) {
	%orig;
	NSLog(@"-(id) connectedHostFromSocket6:(int)");
}

-(unsigned short) connectedPortFromSocket4:(int) {
	%orig;
	NSLog(@"-(unsigned short) connectedPortFromSocket4:(int)");
}

-(unsigned short) connectedPortFromSocket6:(int) {
	%orig;
	NSLog(@"-(unsigned short) connectedPortFromSocket6:(int)");
}

-(id) connectedUrlFromSocketUN:(int) {
	%orig;
	NSLog(@"-(id) connectedUrlFromSocketUN:(int)");
}

-(id) localHostFromSocket4:(int) {
	%orig;
	NSLog(@"-(id) localHostFromSocket4:(int)");
}

-(id) localHostFromSocket6:(int) {
	%orig;
	NSLog(@"-(id) localHostFromSocket6:(int)");
}

-(unsigned short) localPortFromSocket4:(int) {
	%orig;
	NSLog(@"-(unsigned short) localPortFromSocket4:(int)");
}

-(unsigned short) localPortFromSocket6:(int) {
	%orig;
	NSLog(@"-(unsigned short) localPortFromSocket6:(int)");
}

-(void) doReadData {
	%orig;
	NSLog(@"-(void) doReadData");
}

-(void) doReadEOF {
	%orig;
	NSLog(@"-(void) doReadEOF");
}

-(void) doWriteData {
	%orig;
	NSLog(@"-(void) doWriteData");
}

-(void) readDataWithTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) maxLength:(unsigned long long) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataWithTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) maxLength:(unsigned long long) tag:(long long)");
}

-(void) readDataToLength:(unsigned long long) withTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataToLength:(unsigned long long) withTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) tag:(long long)");
}

-(void) readDataToData:(id) withTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) maxLength:(unsigned long long) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataToData:(id) withTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) maxLength:(unsigned long long) tag:(long long)");
}

-(void) maybeStartTLS {
	%orig;
	NSLog(@"-(void) maybeStartTLS");
}

-(void) setupReadTimerWithTimeout:(double) {
	%orig;
	NSLog(@"-(void) setupReadTimerWithTimeout:(double)");
}

-(void) flushSSLBuffers {
	%orig;
	NSLog(@"-(void) flushSSLBuffers");
}

-(bool) usingCFStreamForTLS {
	%orig;
	NSLog(@"-(bool) usingCFStreamForTLS");
}

-(void) suspendReadSource {
	%orig;
	NSLog(@"-(void) suspendReadSource");
}

-(bool) usingSecureTransportForTLS {
	%orig;
	NSLog(@"-(bool) usingSecureTransportForTLS");
}

-(void) ssl_continueSSLHandshake {
	%orig;
	NSLog(@"-(void) ssl_continueSSLHandshake");
}

-(id) readMaxedOutError {
	%orig;
	NSLog(@"-(id) readMaxedOutError");
}

-(id) sslError:(int) {
	%orig;
	NSLog(@"-(id) sslError:(int)");
}

-(void) completeCurrentRead {
	%orig;
	NSLog(@"-(void) completeCurrentRead");
}

-(id) connectionClosedError {
	%orig;
	NSLog(@"-(id) connectionClosedError");
}

-(void) doReadTimeout {
	%orig;
	NSLog(@"-(void) doReadTimeout");
}

-(void) doReadTimeoutWithExtension:(double) {
	%orig;
	NSLog(@"-(void) doReadTimeoutWithExtension:(double)");
}

-(id) readTimeoutError {
	%orig;
	NSLog(@"-(id) readTimeoutError");
}

-(void) setupWriteTimerWithTimeout:(double) {
	%orig;
	NSLog(@"-(void) setupWriteTimerWithTimeout:(double)");
}

-(void) suspendWriteSource {
	%orig;
	NSLog(@"-(void) suspendWriteSource");
}

-(void) completeCurrentWrite {
	%orig;
	NSLog(@"-(void) completeCurrentWrite");
}

-(void) doWriteTimeout {
	%orig;
	NSLog(@"-(void) doWriteTimeout");
}

-(void) doWriteTimeoutWithExtension:(double) {
	%orig;
	NSLog(@"-(void) doWriteTimeoutWithExtension:(double)");
}

-(id) writeTimeoutError {
	%orig;
	NSLog(@"-(id) writeTimeoutError");
}

-(void) ssl_startTLS {
	%orig;
	NSLog(@"-(void) ssl_startTLS");
}

-(void) cf_startTLS {
	%orig;
	NSLog(@"-(void) cf_startTLS");
}

-(void) ssl_shouldTrustPeer:(bool) stateIndex:(int) {
	%orig;
	NSLog(@"-(void) ssl_shouldTrustPeer:(bool) stateIndex:(int)");
}

-(bool) enableBackgroundingOnSocketWithCaveat:(bool) {
	%orig;
	NSLog(@"-(bool) enableBackgroundingOnSocketWithCaveat:(bool)");
}

-(id) initWithSocketQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(id) initWithSocketQueue:(dispatch_queue_s*)");
}

-(void) synchronouslySetDelegate:(id) {
	%orig;
	NSLog(@"-(void) synchronouslySetDelegate:(id)");
}

-(void) synchronouslySetDelegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) synchronouslySetDelegateQueue:(dispatch_queue_s*)");
}

-(void) getDelegate:(id*) delegateQueue:(dispatch_queue_s**) {
	%orig;
	NSLog(@"-(void) getDelegate:(id*) delegateQueue:(dispatch_queue_s**)");
}

-(void) setDelegate:(id) delegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) setDelegate:(id) delegateQueue:(dispatch_queue_s*)");
}

-(void) synchronouslySetDelegate:(id) delegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) synchronouslySetDelegate:(id) delegateQueue:(dispatch_queue_s*)");
}

-(bool) isIPv4Enabled {
	%orig;
	NSLog(@"-(bool) isIPv4Enabled");
}

-(void) setIPv4Enabled:(bool) {
	%orig;
	NSLog(@"-(void) setIPv4Enabled:(bool)");
}

-(void) setIPv6Enabled:(bool) {
	%orig;
	NSLog(@"-(void) setIPv6Enabled:(bool)");
}

-(bool) isIPv4PreferredOverIPv6 {
	%orig;
	NSLog(@"-(bool) isIPv4PreferredOverIPv6");
}

-(void) setIPv4PreferredOverIPv6:(bool) {
	%orig;
	NSLog(@"-(void) setIPv4PreferredOverIPv6:(bool)");
}

-(double) alternateAddressDelay {
	%orig;
	NSLog(@"-(double) alternateAddressDelay");
}

-(void) setAlternateAddressDelay:(double) {
	%orig;
	NSLog(@"-(void) setAlternateAddressDelay:(double)");
}

-(bool) acceptOnPort:(unsigned short) error:(id*) {
	%orig;
	NSLog(@"-(bool) acceptOnPort:(unsigned short) error:(id*)");
}

-(bool) acceptOnUrl:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) acceptOnUrl:(id) error:(id*)");
}

-(bool) connectToHost:(id) onPort:(unsigned short) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToHost:(id) onPort:(unsigned short) error:(id*)");
}

-(bool) connectToAddress:(id) withTimeout:(double) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToAddress:(id) withTimeout:(double) error:(id*)");
}

-(bool) connectToUrl:(id) withTimeout:(double) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToUrl:(id) withTimeout:(double) error:(id*)");
}

-(void) disconnectAfterReading {
	%orig;
	NSLog(@"-(void) disconnectAfterReading");
}

-(void) disconnectAfterWriting {
	%orig;
	NSLog(@"-(void) disconnectAfterWriting");
}

-(void) disconnectAfterReadingAndWriting {
	%orig;
	NSLog(@"-(void) disconnectAfterReadingAndWriting");
}

-(id) errnoError {
	%orig;
	NSLog(@"-(id) errnoError");
}

-(id) localHost {
	%orig;
	NSLog(@"-(id) localHost");
}

-(id) connectedHost4 {
	%orig;
	NSLog(@"-(id) connectedHost4");
}

-(id) connectedHost6 {
	%orig;
	NSLog(@"-(id) connectedHost6");
}

-(unsigned short) connectedPort4 {
	%orig;
	NSLog(@"-(unsigned short) connectedPort4");
}

-(unsigned short) connectedPort6 {
	%orig;
	NSLog(@"-(unsigned short) connectedPort6");
}

-(id) localHost4 {
	%orig;
	NSLog(@"-(id) localHost4");
}

-(id) localHost6 {
	%orig;
	NSLog(@"-(id) localHost6");
}

-(unsigned short) localPort6 {
	%orig;
	NSLog(@"-(unsigned short) localPort6");
}

-(id) connectedAddress {
	%orig;
	NSLog(@"-(id) connectedAddress");
}

-(bool) isIPv4 {
	%orig;
	NSLog(@"-(bool) isIPv4");
}

-(void) readDataWithTimeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataWithTimeout:(double) tag:(long long)");
}

-(void) readDataWithTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataWithTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) tag:(long long)");
}

-(void) readDataToLength:(unsigned long long) withTimeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataToLength:(unsigned long long) withTimeout:(double) tag:(long long)");
}

-(void) readDataToData:(id) withTimeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataToData:(id) withTimeout:(double) tag:(long long)");
}

-(void) readDataToData:(id) withTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataToData:(id) withTimeout:(double) buffer:(id) bufferOffset:(unsigned long long) tag:(long long)");
}

-(void) readDataToData:(id) withTimeout:(double) maxLength:(unsigned long long) tag:(long long) {
	%orig;
	NSLog(@"-(void) readDataToData:(id) withTimeout:(double) maxLength:(unsigned long long) tag:(long long)");
}

-(float) progressOfReadReturningTag:(long long*) bytesDone:(unsigned long long*) total:(unsigned long long*) {
	%orig;
	NSLog(@"-(float) progressOfReadReturningTag:(long long*) bytesDone:(unsigned long long*) total:(unsigned long long*)");
}

-(void) writeData:(id) withTimeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(void) writeData:(id) withTimeout:(double) tag:(long long)");
}

-(float) progressOfWriteReturningTag:(long long*) bytesDone:(unsigned long long*) total:(unsigned long long*) {
	%orig;
	NSLog(@"-(float) progressOfWriteReturningTag:(long long*) bytesDone:(unsigned long long*) total:(unsigned long long*)");
}

-(void) startTLS:(id) {
	%orig;
	NSLog(@"-(void) startTLS:(id)");
}

-(int) sslReadWithBuffer:(void*) length:(unsigned long long*) {
	%orig;
	NSLog(@"-(int) sslReadWithBuffer:(void*) length:(unsigned long long*)");
}

-(int) sslWriteWithBuffer:(const void*) length:(unsigned long long*) {
	%orig;
	NSLog(@"-(int) sslWriteWithBuffer:(const void*) length:(unsigned long long*)");
}

-(void) cf_finishSSLHandshake {
	%orig;
	NSLog(@"-(void) cf_finishSSLHandshake");
}

-(void) cf_abortSSLHandshake:(id) {
	%orig;
	NSLog(@"-(void) cf_abortSSLHandshake:(id)");
}

-(bool) autoDisconnectOnClosedReadStream {
	%orig;
	NSLog(@"-(bool) autoDisconnectOnClosedReadStream");
}

-(void) setAutoDisconnectOnClosedReadStream:(bool) {
	%orig;
	NSLog(@"-(void) setAutoDisconnectOnClosedReadStream:(bool)");
}

-(void) markSocketQueueTargetQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) markSocketQueueTargetQueue:(dispatch_queue_s*)");
}

-(void) unmarkSocketQueueTargetQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) unmarkSocketQueueTargetQueue:(dispatch_queue_s*)");
}

-(__CFReadStream*) readStream {
	%orig;
	NSLog(@"-(__CFReadStream*) readStream");
}

-(__CFWriteStream*) writeStream {
	%orig;
	NSLog(@"-(__CFWriteStream*) writeStream");
}

-(bool) enableBackgroundingOnSocket {
	%orig;
	NSLog(@"-(bool) enableBackgroundingOnSocket");
}

-(bool) enableBackgroundingOnSocketWithCaveat {
	%orig;
	NSLog(@"-(bool) enableBackgroundingOnSocketWithCaveat");
}

-(SSLContext*) sslContext {
	%orig;
	NSLog(@"-(SSLContext*) sslContext");
}

-(bool) connectToAddress:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) connectToAddress:(id) error:(id*)");
}

-(id) initWithDelegate:(id) delegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) delegateQueue:(dispatch_queue_s*)");
}

-(bool) isConnected {
	%orig;
	NSLog(@"-(bool) isConnected");
}

-(int) socketFD {
	%orig;
	NSLog(@"-(int) socketFD");
}

-(void) closeSocket:(int) {
	%orig;
	NSLog(@"-(void) closeSocket:(int)");
}

-(bool) isIPv6Enabled {
	%orig;
	NSLog(@"-(bool) isIPv6Enabled");
}

-(bool) isDisconnected {
	%orig;
	NSLog(@"-(bool) isDisconnected");
}

-(void) closeWithError:(id) {
	%orig;
	NSLog(@"-(void) closeWithError:(id)");
}

-(bool) isIPv6 {
	%orig;
	NSLog(@"-(bool) isIPv6");
}

-(id) localAddress {
	%orig;
	NSLog(@"-(id) localAddress");
}

-(unsigned short) localPort {
	%orig;
	NSLog(@"-(unsigned short) localPort");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) performBlock:(id) {
	%orig;
	NSLog(@"-(void) performBlock:(id)");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

-(id) userData {
	%orig;
	NSLog(@"-(id) userData");
}

-(void) setUserData:(id) {
	%orig;
	NSLog(@"-(void) setUserData:(id)");
}

-(bool) isSecure {
	%orig;
	NSLog(@"-(bool) isSecure");
}

-(dispatch_queue_s*) delegateQueue {
	%orig;
	NSLog(@"-(dispatch_queue_s*) delegateQueue");
}

-(void) setDelegateQueue:(dispatch_queue_s*) {
	%orig;
	NSLog(@"-(void) setDelegateQueue:(dispatch_queue_s*)");
}

%end

%hook GCDAsyncSpecialPacket

-(id) initWithTLSSettings:(id) {
	%orig;
	NSLog(@"-(id) initWithTLSSettings:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GCDAsyncWritePacket

-(id) initWithData:(id) timeout:(double) tag:(long long) {
	%orig;
	NSLog(@"-(id) initWithData:(id) timeout:(double) tag:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GCDAsyncReadPacket

-(id) initWithData:(id) startOffset:(unsigned long long) maxLength:(unsigned long long) timeout:(double) readLength:(unsigned long long) terminator:(id) tag:(long long) {
	%orig;
	NSLog(@"-(id) initWithData:(id) startOffset:(unsigned long long) maxLength:(unsigned long long) timeout:(double) readLength:(unsigned long long) terminator:(id) tag:(long long)");
}

-(void) ensureCapacityForAdditionalDataOfLength:(unsigned long long) {
	%orig;
	NSLog(@"-(void) ensureCapacityForAdditionalDataOfLength:(unsigned long long)");
}

-(unsigned long long) optimalReadLengthWithDefault:(unsigned long long) shouldPreBuffer:(bool*) {
	%orig;
	NSLog(@"-(unsigned long long) optimalReadLengthWithDefault:(unsigned long long) shouldPreBuffer:(bool*)");
}

-(unsigned long long) readLengthForNonTermWithHint:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) readLengthForNonTermWithHint:(unsigned long long)");
}

-(unsigned long long) readLengthForTermWithHint:(unsigned long long) shouldPreBuffer:(bool*) {
	%orig;
	NSLog(@"-(unsigned long long) readLengthForTermWithHint:(unsigned long long) shouldPreBuffer:(bool*)");
}

-(unsigned long long) readLengthForTermWithPreBuffer:(id) found:(bool*) {
	%orig;
	NSLog(@"-(unsigned long long) readLengthForTermWithPreBuffer:(id) found:(bool*)");
}

-(long long) searchForTermAfterPreBuffering:(long long) {
	%orig;
	NSLog(@"-(long long) searchForTermAfterPreBuffering:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GCDAsyncSocketPreBuffer

-(void) ensureCapacityForWrite:(unsigned long long) {
	%orig;
	NSLog(@"-(void) ensureCapacityForWrite:(unsigned long long)");
}

-(void) getReadBuffer:(char**) availableBytes:(unsigned long long*) {
	%orig;
	NSLog(@"-(void) getReadBuffer:(char**) availableBytes:(unsigned long long*)");
}

-(void) didRead:(unsigned long long) {
	%orig;
	NSLog(@"-(void) didRead:(unsigned long long)");
}

-(void) getWriteBuffer:(char**) availableSpace:(unsigned long long*) {
	%orig;
	NSLog(@"-(void) getWriteBuffer:(char**) availableSpace:(unsigned long long*)");
}

-(void) didWrite:(unsigned long long) {
	%orig;
	NSLog(@"-(void) didWrite:(unsigned long long)");
}

-(unsigned long long) availableBytes {
	%orig;
	NSLog(@"-(unsigned long long) availableBytes");
}

-(char*) readBuffer {
	%orig;
	NSLog(@"-(char*) readBuffer");
}

-(char*) writeBuffer {
	%orig;
	NSLog(@"-(char*) writeBuffer");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(id) initWithCapacity:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithCapacity:(unsigned long long)");
}

-(unsigned long long) availableSpace {
	%orig;
	NSLog(@"-(unsigned long long) availableSpace");
}

%end

%hook BugsnagUser

+(id) userWithUserId:(id) name:(id) emailAddress:(id) {
	%orig;
	NSLog(@"+(id) userWithUserId:(id) name:(id) emailAddress:(id)");
}

-(id) initWithUserId:(id) name:(id) emailAddress:(id) {
	%orig;
	NSLog(@"-(id) initWithUserId:(id) name:(id) emailAddress:(id)");
}

-(id) toJson {
	%orig;
	NSLog(@"-(id) toJson");
}

-(void) setEmailAddress:(id) {
	%orig;
	NSLog(@"-(void) setEmailAddress:(id)");
}

-(id) emailAddress {
	%orig;
	NSLog(@"-(id) emailAddress");
}

-(void) setUserId:(id) {
	%orig;
	NSLog(@"-(void) setUserId:(id)");
}

-(id) userId {
	%orig;
	NSLog(@"-(id) userId");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook BugsnagSink

-(void) filterReports:(id) onCompletion:(id) {
	%orig;
	NSLog(@"-(void) filterReports:(id) onCompletion:(id)");
}

-(id) apiClient {
	%orig;
	NSLog(@"-(id) apiClient");
}

-(void) setApiClient:(id) {
	%orig;
	NSLog(@"-(void) setApiClient:(id)");
}

-(id) getBodyFromReports:(id) {
	%orig;
	NSLog(@"-(id) getBodyFromReports:(id)");
}

-(id) initWithApiClient:(id) {
	%orig;
	NSLog(@"-(id) initWithApiClient:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook BugsnagSessionTrackingPayload

-(id) toJson {
	%orig;
	NSLog(@"-(id) toJson");
}

-(void) setSessions:(id) {
	%orig;
	NSLog(@"-(void) setSessions:(id)");
}

-(id) initWithSessions:(id) {
	%orig;
	NSLog(@"-(id) initWithSessions:(id)");
}

-(id) sessions {
	%orig;
	NSLog(@"-(id) sessions");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook BugsnagSessionTracker

-(id) initWithConfig:(id) apiClient:(id) callback:(id) {
	%orig;
	NSLog(@"-(id) initWithConfig:(id) apiClient:(id) callback:(id)");
}

-(void) startNewSession:(id) withUser:(id) autoCaptured:(bool) {
	%orig;
	NSLog(@"-(void) startNewSession:(id) withUser:(id) autoCaptured:(bool)");
}

-(void) suspendCurrentSession:(id) {
	%orig;
	NSLog(@"-(void) suspendCurrentSession:(id)");
}

-(void) incrementHandledError {
	%orig;
	NSLog(@"-(void) incrementHandledError");
}

-(void) trackSession {
	%orig;
	NSLog(@"-(void) trackSession");
}

-(id) sessionStore {
	%orig;
	NSLog(@"-(id) sessionStore");
}

-(void) setTrackedFirstSession:(bool) {
	%orig;
	NSLog(@"-(void) setTrackedFirstSession:(bool)");
}

-(bool) trackedFirstSession {
	%orig;
	NSLog(@"-(bool) trackedFirstSession");
}

-(id) apiClient {
	%orig;
	NSLog(@"-(id) apiClient");
}

-(void) onAutoCaptureEnabled {
	%orig;
	NSLog(@"-(void) onAutoCaptureEnabled");
}

-(void) setSessionStore:(id) {
	%orig;
	NSLog(@"-(void) setSessionStore:(id)");
}

-(void) setApiClient:(id) {
	%orig;
	NSLog(@"-(void) setApiClient:(id)");
}

-(void) setCallback:(id) {
	%orig;
	NSLog(@"-(void) setCallback:(id)");
}

-(id) callback {
	%orig;
	NSLog(@"-(id) callback");
}

-(bool) isInForeground {
	%orig;
	NSLog(@"-(bool) isInForeground");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) currentSession {
	%orig;
	NSLog(@"-(id) currentSession");
}

-(void) send {
	%orig;
	NSLog(@"-(void) send");
}

-(id) config {
	%orig;
	NSLog(@"-(id) config");
}

-(void) setConfig:(id) {
	%orig;
	NSLog(@"-(void) setConfig:(id)");
}

%end

%hook BugsnagSession

-(unsigned long long) unhandledCount {
	%orig;
	NSLog(@"-(unsigned long long) unhandledCount");
}

-(id) toJson {
	%orig;
	NSLog(@"-(id) toJson");
}

-(unsigned long long) handledCount {
	%orig;
	NSLog(@"-(unsigned long long) handledCount");
}

-(void) setUnhandledCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setUnhandledCount:(unsigned long long)");
}

-(id) initWithId:(id) startDate:(id) user:(id) autoCaptured:(bool) {
	%orig;
	NSLog(@"-(id) initWithId:(id) startDate:(id) user:(id) autoCaptured:(bool)");
}

-(void) setHandledCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setHandledCount:(unsigned long long)");
}

-(bool) autoCaptured {
	%orig;
	NSLog(@"-(bool) autoCaptured");
}

-(id) sessionId {
	%orig;
	NSLog(@"-(id) sessionId");
}

-(id) user {
	%orig;
	NSLog(@"-(id) user");
}

-(id) startedAt {
	%orig;
	NSLog(@"-(id) startedAt");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook BugsnagNotifier

-(void) notifyException:(id) block:(id) {
	%orig;
	NSLog(@"-(void) notifyException:(id) block:(id)");
}

-(void) notifyError:(id) block:(id) {
	%orig;
	NSLog(@"-(void) notifyError:(id) block:(id)");
}

-(void) notifyException:(id) atSeverity:(unsigned long long) block:(id) {
	%orig;
	NSLog(@"-(void) notifyException:(id) atSeverity:(unsigned long long) block:(id)");
}

-(void) internalClientNotify:(id) withData:(id) block:(id) {
	%orig;
	NSLog(@"-(void) internalClientNotify:(id) withData:(id) block:(id)");
}

-(void) addBreadcrumbWithBlock:(id) {
	%orig;
	NSLog(@"-(void) addBreadcrumbWithBlock:(id)");
}

-(void) crumbleNotification:(id) {
	%orig;
	NSLog(@"-(void) crumbleNotification:(id)");
}

-(void) clearBreadcrumbs {
	%orig;
	NSLog(@"-(void) clearBreadcrumbs");
}

-(void) setMetaDataLock:(id) {
	%orig;
	NSLog(@"-(void) setMetaDataLock:(id)");
}

-(void) setCrashSentry:(id) {
	%orig;
	NSLog(@"-(void) setCrashSentry:(id)");
}

-(void) setErrorReportApiClient:(id) {
	%orig;
	NSLog(@"-(void) setErrorReportApiClient:(id)");
}

-(void) setSessionTrackingApiClient:(id) {
	%orig;
	NSLog(@"-(void) setSessionTrackingApiClient:(id)");
}

-(id) sessionTrackingApiClient {
	%orig;
	NSLog(@"-(id) sessionTrackingApiClient");
}

-(void) metaDataChanged:(id) {
	%orig;
	NSLog(@"-(void) metaDataChanged:(id)");
}

-(void) initializeNotificationNameMap {
	%orig;
	NSLog(@"-(void) initializeNotificationNameMap");
}

-(id) crashSentry {
	%orig;
	NSLog(@"-(id) crashSentry");
}

-(id) errorReportApiClient {
	%orig;
	NSLog(@"-(id) errorReportApiClient");
}

-(void) setupConnectivityListener {
	%orig;
	NSLog(@"-(void) setupConnectivityListener");
}

-(void) updateAutomaticBreadcrumbDetectionSettings {
	%orig;
	NSLog(@"-(void) updateAutomaticBreadcrumbDetectionSettings");
}

-(void) watchLifecycleEvents:(id) {
	%orig;
	NSLog(@"-(void) watchLifecycleEvents:(id)");
}

-(void) batteryChanged:(id) {
	%orig;
	NSLog(@"-(void) batteryChanged:(id)");
}

-(void) lowMemoryWarning:(id) {
	%orig;
	NSLog(@"-(void) lowMemoryWarning:(id)");
}

-(void) willEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) willEnterBackground:(id)");
}

-(id) sessionTimer {
	%orig;
	NSLog(@"-(id) sessionTimer");
}

-(void) sessionTick:(id) {
	%orig;
	NSLog(@"-(void) sessionTick:(id)");
}

-(void) setSessionTimer:(id) {
	%orig;
	NSLog(@"-(void) setSessionTimer:(id)");
}

-(void) flushPendingReports {
	%orig;
	NSLog(@"-(void) flushPendingReports");
}

-(void) notify:(id) message:(id) handledState:(id) block:(id) {
	%orig;
	NSLog(@"-(void) notify:(id) message:(id) handledState:(id) block:(id)");
}

-(id) metaDataLock {
	%orig;
	NSLog(@"-(id) metaDataLock");
}

-(void) serializeBreadcrumbs {
	%orig;
	NSLog(@"-(void) serializeBreadcrumbs");
}

-(void) sendBreadcrumbForNotification:(id) {
	%orig;
	NSLog(@"-(void) sendBreadcrumbForNotification:(id)");
}

-(id) automaticBreadcrumbStateEvents {
	%orig;
	NSLog(@"-(id) automaticBreadcrumbStateEvents");
}

-(id) automaticBreadcrumbTableItemEvents {
	%orig;
	NSLog(@"-(id) automaticBreadcrumbTableItemEvents");
}

-(void) sendBreadcrumbForTableViewNotification:(id) {
	%orig;
	NSLog(@"-(void) sendBreadcrumbForTableViewNotification:(id)");
}

-(id) automaticBreadcrumbControlEvents {
	%orig;
	NSLog(@"-(id) automaticBreadcrumbControlEvents");
}

-(void) sendBreadcrumbForControlNotification:(id) {
	%orig;
	NSLog(@"-(void) sendBreadcrumbForControlNotification:(id)");
}

-(id) automaticBreadcrumbMenuItemEvents {
	%orig;
	NSLog(@"-(id) automaticBreadcrumbMenuItemEvents");
}

-(void) sendBreadcrumbForMenuItemNotification:(id) {
	%orig;
	NSLog(@"-(void) sendBreadcrumbForMenuItemNotification:(id)");
}

-(void) setDetails:(id) {
	%orig;
	NSLog(@"-(void) setDetails:(id)");
}

-(id) details {
	%orig;
	NSLog(@"-(id) details");
}

-(void) startSession {
	%orig;
	NSLog(@"-(void) startSession");
}

-(void) setNetworkReachable:(id) {
	%orig;
	NSLog(@"-(void) setNetworkReachable:(id)");
}

-(id) networkReachable {
	%orig;
	NSLog(@"-(id) networkReachable");
}

-(id) sessionTracker {
	%orig;
	NSLog(@"-(id) sessionTracker");
}

-(void) setSessionTracker:(id) {
	%orig;
	NSLog(@"-(void) setSessionTracker:(id)");
}

-(void) orientationChanged:(id) {
	%orig;
	NSLog(@"-(void) orientationChanged:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) state {
	%orig;
	NSLog(@"-(id) state");
}

-(void) setState:(id) {
	%orig;
	NSLog(@"-(void) setState:(id)");
}

-(id) configuration {
	%orig;
	NSLog(@"-(id) configuration");
}

-(void) setConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setConfiguration:(id)");
}

-(id) initWithConfiguration:(id) {
	%orig;
	NSLog(@"-(id) initWithConfiguration:(id)");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(void) willEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) willEnterForeground:(id)");
}

%end

%hook BugsnagMetaData

-(void) addAttribute:(id) withValue:(id) toTabWithName:(id) {
	%orig;
	NSLog(@"-(void) addAttribute:(id) withValue:(id) toTabWithName:(id)");
}

-(void) clearTab:(id) {
	%orig;
	NSLog(@"-(void) clearTab:(id)");
}

-(id) getTab:(id) {
	%orig;
	NSLog(@"-(id) getTab:(id)");
}

-(id) toDictionary {
	%orig;
	NSLog(@"-(id) toDictionary");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) dictionary {
	%orig;
	NSLog(@"-(id) dictionary");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) mutableCopyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) mutableCopyWithZone:(_NSZone*)");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(void) setDictionary:(id) {
	%orig;
	NSLog(@"-(void) setDictionary:(id)");
}

%end

%hook BugsnagHandledState

+(id) handledStateWithSeverityReason:(unsigned long long) severity:(unsigned long long) attrValue:(id) {
	%orig;
	NSLog(@"+(id) handledStateWithSeverityReason:(unsigned long long) severity:(unsigned long long) attrValue:(id)");
}

+(unsigned long long) severityReasonFromString:(id) {
	%orig;
	NSLog(@"+(unsigned long long) severityReasonFromString:(id)");
}

+(id) stringFromSeverityReason:(unsigned long long) {
	%orig;
	NSLog(@"+(id) stringFromSeverityReason:(unsigned long long)");
}

+(id) handledStateWithSeverityReason:(unsigned long long) {
	%orig;
	NSLog(@"+(id) handledStateWithSeverityReason:(unsigned long long)");
}

-(id) initWithSeverityReason:(unsigned long long) severity:(unsigned long long) unhandled:(bool) attrValue:(id) {
	%orig;
	NSLog(@"-(id) initWithSeverityReason:(unsigned long long) severity:(unsigned long long) unhandled:(bool) attrValue:(id)");
}

-(bool) unhandled {
	%orig;
	NSLog(@"-(bool) unhandled");
}

-(unsigned long long) severityReasonType {
	%orig;
	NSLog(@"-(unsigned long long) severityReasonType");
}

-(unsigned long long) originalSeverity {
	%orig;
	NSLog(@"-(unsigned long long) originalSeverity");
}

-(unsigned long long) currentSeverity {
	%orig;
	NSLog(@"-(unsigned long long) currentSeverity");
}

-(id) attrKey {
	%orig;
	NSLog(@"-(id) attrKey");
}

-(id) attrValue {
	%orig;
	NSLog(@"-(id) attrValue");
}

-(unsigned long long) calculateSeverityReasonType {
	%orig;
	NSLog(@"-(unsigned long long) calculateSeverityReasonType");
}

-(id) toJson {
	%orig;
	NSLog(@"-(id) toJson");
}

-(void) setCurrentSeverity:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCurrentSeverity:(unsigned long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook FileStoreInfo

+(id) fileStoreInfoWithId:(id) creationDate:(id) {
	%orig;
	NSLog(@"+(id) fileStoreInfoWithId:(id) creationDate:(id)");
}

-(id) initWithId:(id) creationDate:(id) {
	%orig;
	NSLog(@"-(id) initWithId:(id) creationDate:(id)");
}

-(id) creationDate {
	%orig;
	NSLog(@"-(id) creationDate");
}

-(id) fileId {
	%orig;
	NSLog(@"-(id) fileId");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) compare:(id) {
	%orig;
	NSLog(@"-(long long) compare:(id)");
}

%end

%hook BugsnagCrashSentry

-(void) install:(id) apiClient:(id) onCrash:(?*) {
	%orig;
	NSLog(@"-(void) install:(id) apiClient:(id) onCrash:(?*)");
}

-(void) reportUserException:(id) reason:(id) {
	%orig;
	NSLog(@"-(void) reportUserException:(id) reason:(id)");
}

%end

%hook RegisterErrorData

+(id) errorDataFromThreads:(id) {
	%orig;
	NSLog(@"+(id) errorDataFromThreads:(id)");
}

+(bool) isReservedWord:(id) {
	%orig;
	NSLog(@"+(bool) isReservedWord:(id)");
}

-(void) setErrorClass:(id) {
	%orig;
	NSLog(@"-(void) setErrorClass:(id)");
}

-(id) initWithClass:(id) message:(id) {
	%orig;
	NSLog(@"-(id) initWithClass:(id) message:(id)");
}

-(id) errorClass {
	%orig;
	NSLog(@"-(id) errorClass");
}

-(void) setErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) setErrorMessage:(id)");
}

-(id) errorMessage {
	%orig;
	NSLog(@"-(id) errorMessage");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook BugsnagCrashReport

-(id) releaseStage {
	%orig;
	NSLog(@"-(id) releaseStage");
}

-(void) setReleaseStage:(id) {
	%orig;
	NSLog(@"-(void) setReleaseStage:(id)");
}

-(void) addAttribute:(id) withValue:(id) toTabWithName:(id) {
	%orig;
	NSLog(@"-(void) addAttribute:(id) withValue:(id) toTabWithName:(id)");
}

-(void) setSeverity:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSeverity:(unsigned long long)");
}

-(id) breadcrumbs {
	%orig;
	NSLog(@"-(id) breadcrumbs");
}

-(void) setBreadcrumbs:(id) {
	%orig;
	NSLog(@"-(void) setBreadcrumbs:(id)");
}

-(id) notifyReleaseStages {
	%orig;
	NSLog(@"-(id) notifyReleaseStages");
}

-(void) setOverrideProperty:(id) value:(id) {
	%orig;
	NSLog(@"-(void) setOverrideProperty:(id) value:(id)");
}

-(id) customException {
	%orig;
	NSLog(@"-(id) customException");
}

-(id) serializeThreadsWithException:(id) {
	%orig;
	NSLog(@"-(id) serializeThreadsWithException:(id)");
}

-(id) dsymUUID {
	%orig;
	NSLog(@"-(id) dsymUUID");
}

-(id) groupingHash {
	%orig;
	NSLog(@"-(id) groupingHash");
}

-(id) deviceAppHash {
	%orig;
	NSLog(@"-(id) deviceAppHash");
}

-(id) generateSessionDict {
	%orig;
	NSLog(@"-(id) generateSessionDict");
}

-(id) initWithKSReport:(id) {
	%orig;
	NSLog(@"-(id) initWithKSReport:(id)");
}

-(void) addMetadata:(id) toTabWithName:(id) {
	%orig;
	NSLog(@"-(void) addMetadata:(id) toTabWithName:(id)");
}

-(bool) shouldBeSent {
	%orig;
	NSLog(@"-(bool) shouldBeSent");
}

-(void) setGroupingHash:(id) {
	%orig;
	NSLog(@"-(void) setGroupingHash:(id)");
}

-(void) attachCustomStacktrace:(id) withType:(id) {
	%orig;
	NSLog(@"-(void) attachCustomStacktrace:(id) withType:(id)");
}

-(id) serializableValueWithTopLevelData:(id) {
	%orig;
	NSLog(@"-(id) serializableValueWithTopLevelData:(id)");
}

-(id) enhancedErrorMessageForThread:(id) {
	%orig;
	NSLog(@"-(id) enhancedErrorMessageForThread:(id)");
}

-(void) setNotifyReleaseStages:(id) {
	%orig;
	NSLog(@"-(void) setNotifyReleaseStages:(id)");
}

-(void) setErrorClass:(id) {
	%orig;
	NSLog(@"-(void) setErrorClass:(id)");
}

-(void) setCustomException:(id) {
	%orig;
	NSLog(@"-(void) setCustomException:(id)");
}

-(id) toJson {
	%orig;
	NSLog(@"-(id) toJson");
}

-(id) initWithErrorName:(id) errorMessage:(id) configuration:(id) metaData:(id) handledState:(id) session:(id) {
	%orig;
	NSLog(@"-(id) initWithErrorName:(id) errorMessage:(id) configuration:(id) metaData:(id) handledState:(id) session:(id)");
}

-(id) handledState {
	%orig;
	NSLog(@"-(id) handledState");
}

-(id) errorClass {
	%orig;
	NSLog(@"-(id) errorClass");
}

-(void) setAppState:(id) {
	%orig;
	NSLog(@"-(void) setAppState:(id)");
}

-(id) metaData {
	%orig;
	NSLog(@"-(id) metaData");
}

-(unsigned long long) depth {
	%orig;
	NSLog(@"-(unsigned long long) depth");
}

-(id) overrides {
	%orig;
	NSLog(@"-(id) overrides");
}

-(void) setErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) setErrorMessage:(id)");
}

-(id) errorMessage {
	%orig;
	NSLog(@"-(id) errorMessage");
}

-(id) binaryImages {
	%orig;
	NSLog(@"-(id) binaryImages");
}

-(id) app {
	%orig;
	NSLog(@"-(id) app");
}

-(id) device {
	%orig;
	NSLog(@"-(id) device");
}

-(void) setDevice:(id) {
	%orig;
	NSLog(@"-(void) setDevice:(id)");
}

-(void) setMetaData:(id) {
	%orig;
	NSLog(@"-(void) setMetaData:(id)");
}

-(unsigned long long) severity {
	%orig;
	NSLog(@"-(unsigned long long) severity");
}

-(void) setErrorType:(id) {
	%orig;
	NSLog(@"-(void) setErrorType:(id)");
}

-(id) errorType {
	%orig;
	NSLog(@"-(id) errorType");
}

-(void) setApp:(id) {
	%orig;
	NSLog(@"-(void) setApp:(id)");
}

-(void) setDepth:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDepth:(unsigned long long)");
}

-(void) setDeviceState:(id) {
	%orig;
	NSLog(@"-(void) setDeviceState:(id)");
}

-(id) threads {
	%orig;
	NSLog(@"-(id) threads");
}

-(id) deviceState {
	%orig;
	NSLog(@"-(id) deviceState");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setContext:(id) {
	%orig;
	NSLog(@"-(void) setContext:(id)");
}

-(id) context {
	%orig;
	NSLog(@"-(id) context");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(id) appState {
	%orig;
	NSLog(@"-(id) appState");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) setError:(id) {
	%orig;
	NSLog(@"-(void) setError:(id)");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook BugsnagConfiguration

-(id) releaseStage {
	%orig;
	NSLog(@"-(id) releaseStage");
}

-(void) setReleaseStage:(id) {
	%orig;
	NSLog(@"-(void) setReleaseStage:(id)");
}

-(void) setUser:(id) withName:(id) andEmail:(id) {
	%orig;
	NSLog(@"-(void) setUser:(id) withName:(id) andEmail:(id)");
}

-(id) breadcrumbs {
	%orig;
	NSLog(@"-(id) breadcrumbs");
}

-(id) beforeSendBlocks {
	%orig;
	NSLog(@"-(id) beforeSendBlocks");
}

-(id) beforeNotifyHooks {
	%orig;
	NSLog(@"-(id) beforeNotifyHooks");
}

-(id) apiKey {
	%orig;
	NSLog(@"-(id) apiKey");
}

-(void) addBeforeSendBlock:(id) {
	%orig;
	NSLog(@"-(void) addBeforeSendBlock:(id)");
}

-(void) clearBeforeSendBlocks {
	%orig;
	NSLog(@"-(void) clearBeforeSendBlocks");
}

-(void) addBeforeNotifyHook:(id) {
	%orig;
	NSLog(@"-(void) addBeforeNotifyHook:(id)");
}

-(void) setAutomaticallyCollectBreadcrumbs:(bool) {
	%orig;
	NSLog(@"-(void) setAutomaticallyCollectBreadcrumbs:(bool)");
}

-(void) setShouldAutoCaptureSessions:(bool) {
	%orig;
	NSLog(@"-(void) setShouldAutoCaptureSessions:(bool)");
}

-(id) errorApiHeaders {
	%orig;
	NSLog(@"-(id) errorApiHeaders");
}

-(void) setNotifyURL:(id) {
	%orig;
	NSLog(@"-(void) setNotifyURL:(id)");
}

-(void) setBeforeSendBlocks:(id) {
	%orig;
	NSLog(@"-(void) setBeforeSendBlocks:(id)");
}

-(void) setOnCrashHandler:(?*) {
	%orig;
	NSLog(@"-(void) setOnCrashHandler:(?*)");
}

-(bool) autoNotify {
	%orig;
	NSLog(@"-(bool) autoNotify");
}

-(void) setAutoNotify:(bool) {
	%orig;
	NSLog(@"-(void) setAutoNotify:(bool)");
}

-(void) setSessionURL:(id) {
	%orig;
	NSLog(@"-(void) setSessionURL:(id)");
}

-(void) setBeforeNotifyHooks:(id) {
	%orig;
	NSLog(@"-(void) setBeforeNotifyHooks:(id)");
}

-(id) codeBundleId {
	%orig;
	NSLog(@"-(id) codeBundleId");
}

-(void) setCodeBundleId:(id) {
	%orig;
	NSLog(@"-(void) setCodeBundleId:(id)");
}

-(id) notifierType {
	%orig;
	NSLog(@"-(id) notifierType");
}

-(void) setNotifierType:(id) {
	%orig;
	NSLog(@"-(void) setNotifierType:(id)");
}

-(id) notifyReleaseStages {
	%orig;
	NSLog(@"-(id) notifyReleaseStages");
}

-(void) setNotifyReleaseStages:(id) {
	%orig;
	NSLog(@"-(void) setNotifyReleaseStages:(id)");
}

-(?*) onCrashHandler {
	%orig;
	NSLog(@"-(?*) onCrashHandler");
}

-(id) notifyURL {
	%orig;
	NSLog(@"-(id) notifyURL");
}

-(bool) automaticallyCollectBreadcrumbs {
	%orig;
	NSLog(@"-(bool) automaticallyCollectBreadcrumbs");
}

-(bool) shouldAutoCaptureSessions {
	%orig;
	NSLog(@"-(bool) shouldAutoCaptureSessions");
}

-(bool) shouldSendReports {
	%orig;
	NSLog(@"-(bool) shouldSendReports");
}

-(id) sessionURL {
	%orig;
	NSLog(@"-(id) sessionURL");
}

-(id) sessionApiHeaders {
	%orig;
	NSLog(@"-(id) sessionApiHeaders");
}

-(void) setCurrentUser:(id) {
	%orig;
	NSLog(@"-(void) setCurrentUser:(id)");
}

-(id) metaData {
	%orig;
	NSLog(@"-(id) metaData");
}

-(void) setAppVersion:(id) {
	%orig;
	NSLog(@"-(void) setAppVersion:(id)");
}

-(id) appVersion {
	%orig;
	NSLog(@"-(id) appVersion");
}

-(void) setMetaData:(id) {
	%orig;
	NSLog(@"-(void) setMetaData:(id)");
}

-(void) setApiKey:(id) {
	%orig;
	NSLog(@"-(void) setApiKey:(id)");
}

-(id) currentUser {
	%orig;
	NSLog(@"-(id) currentUser");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setContext:(id) {
	%orig;
	NSLog(@"-(void) setContext:(id)");
}

-(id) context {
	%orig;
	NSLog(@"-(id) context");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

-(id) config {
	%orig;
	NSLog(@"-(id) config");
}

-(void) setConfig:(id) {
	%orig;
	NSLog(@"-(void) setConfig:(id)");
}

%end

%hook BugsnagBreadcrumbs

-(void) addBreadcrumbWithBlock:(id) {
	%orig;
	NSLog(@"-(void) addBreadcrumbWithBlock:(id)");
}

-(id) breadcrumbs {
	%orig;
	NSLog(@"-(id) breadcrumbs");
}

-(void) clearBreadcrumbs {
	%orig;
	NSLog(@"-(void) clearBreadcrumbs");
}

-(void) resizeToFitCapacity:(unsigned long long) {
	%orig;
	NSLog(@"-(void) resizeToFitCapacity:(unsigned long long)");
}

-(void) addBreadcrumb:(id) {
	%orig;
	NSLog(@"-(void) addBreadcrumb:(id)");
}

-(void) setBreadcrumbs:(id) {
	%orig;
	NSLog(@"-(void) setBreadcrumbs:(id)");
}

-(id) arrayValue {
	%orig;
	NSLog(@"-(id) arrayValue");
}

-(id) readWriteQueue {
	%orig;
	NSLog(@"-(id) readWriteQueue");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(unsigned long long) count {
	%orig;
	NSLog(@"-(unsigned long long) count");
}

-(id) objectAtIndexedSubscript:(unsigned long long) {
	%orig;
	NSLog(@"-(id) objectAtIndexedSubscript:(unsigned long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(unsigned long long) capacity {
	%orig;
	NSLog(@"-(unsigned long long) capacity");
}

-(void) setCapacity:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCapacity:(unsigned long long)");
}

%end

%hook BugsnagBreadcrumb

+(id) breadcrumbWithBlock:(id) {
	%orig;
	NSLog(@"+(id) breadcrumbWithBlock:(id)");
}

-(void) setMetadata:(id) {
	%orig;
	NSLog(@"-(void) setMetadata:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

-(unsigned long long) type {
	%orig;
	NSLog(@"-(unsigned long long) type");
}

-(void) setType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setType:(unsigned long long)");
}

-(id) timestamp {
	%orig;
	NSLog(@"-(id) timestamp");
}

-(id) objectValue {
	%orig;
	NSLog(@"-(id) objectValue");
}

-(id) metadata {
	%orig;
	NSLog(@"-(id) metadata");
}

-(void) setTimestamp:(id) {
	%orig;
	NSLog(@"-(void) setTimestamp:(id)");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook BugsnagApiClient

-(id) deliveryOperation {
	%orig;
	NSLog(@"-(id) deliveryOperation");
}

-(id) prepareRequest:(id) headers:(id) {
	%orig;
	NSLog(@"-(id) prepareRequest:(id) headers:(id)");
}

-(id) prepareSession {
	%orig;
	NSLog(@"-(id) prepareSession");
}

-(id) generatedSession {
	%orig;
	NSLog(@"-(id) generatedSession");
}

-(void) setGeneratedSession:(id) {
	%orig;
	NSLog(@"-(void) setGeneratedSession:(id)");
}

-(id) initWithConfig:(id) queueName:(id) {
	%orig;
	NSLog(@"-(id) initWithConfig:(id) queueName:(id)");
}

-(void) flushPendingData {
	%orig;
	NSLog(@"-(void) flushPendingData");
}

-(void) sendData:(id) withPayload:(id) toURL:(id) headers:(id) onCompletion:(id) {
	%orig;
	NSLog(@"-(void) sendData:(id) withPayload:(id) toURL:(id) headers:(id) onCompletion:(id)");
}

-(id) sendQueue {
	%orig;
	NSLog(@"-(id) sendQueue");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) config {
	%orig;
	NSLog(@"-(id) config");
}

%end

%hook BugsnagSessionTrackingApiClient

-(id) deliveryOperation {
	%orig;
	NSLog(@"-(id) deliveryOperation");
}

%end

%hook BugsnagErrorReportApiClient

-(id) deliveryOperation {
	%orig;
	NSLog(@"-(id) deliveryOperation");
}

%end

%hook Bugsnag

+(void) startBugsnagWithConfiguration:(id) {
	%orig;
	NSLog(@"+(void) startBugsnagWithConfiguration:(id)");
}

+(void) clearTabWithName:(id) {
	%orig;
	NSLog(@"+(void) clearTabWithName:(id)");
}

+(void) addAttribute:(id) withValue:(id) toTabWithName:(id) {
	%orig;
	NSLog(@"+(void) addAttribute:(id) withValue:(id) toTabWithName:(id)");
}

+(void) leaveBreadcrumbWithMessage:(id) {
	%orig;
	NSLog(@"+(void) leaveBreadcrumbWithMessage:(id)");
}

+(void) notify:(id) withData:(id) atSeverity:(id) {
	%orig;
	NSLog(@"+(void) notify:(id) withData:(id) atSeverity:(id)");
}

+(void) setSuspendThreadsForUserReported:(bool) {
	%orig;
	NSLog(@"+(void) setSuspendThreadsForUserReported:(bool)");
}

+(void) setReportWhenDebuggerIsAttached:(bool) {
	%orig;
	NSLog(@"+(void) setReportWhenDebuggerIsAttached:(bool)");
}

+(void) setThreadTracingEnabled:(bool) {
	%orig;
	NSLog(@"+(void) setThreadTracingEnabled:(bool)");
}

+(void) setWriteBinaryImagesForUserReported:(bool) {
	%orig;
	NSLog(@"+(void) setWriteBinaryImagesForUserReported:(bool)");
}

+(bool) bugsnagStarted {
	%orig;
	NSLog(@"+(bool) bugsnagStarted");
}

+(void) notifyError:(id) block:(id) {
	%orig;
	NSLog(@"+(void) notifyError:(id) block:(id)");
}

+(void) internalClientNotify:(id) withData:(id) block:(id) {
	%orig;
	NSLog(@"+(void) internalClientNotify:(id) withData:(id) block:(id)");
}

+(void) leaveBreadcrumbWithBlock:(id) {
	%orig;
	NSLog(@"+(void) leaveBreadcrumbWithBlock:(id)");
}

+(void) clearBreadcrumbs {
	%orig;
	NSLog(@"+(void) clearBreadcrumbs");
}

+(void) startBugsnagWithApiKey:(id) {
	%orig;
	NSLog(@"+(void) startBugsnagWithApiKey:(id)");
}

+(void) notify:(id) block:(id) {
	%orig;
	NSLog(@"+(void) notify:(id) block:(id)");
}

+(void) notify:(id) withData:(id) {
	%orig;
	NSLog(@"+(void) notify:(id) withData:(id)");
}

+(void) leaveBreadcrumbForNotificationName:(id) {
	%orig;
	NSLog(@"+(void) leaveBreadcrumbForNotificationName:(id)");
}

+(void) setBreadcrumbCapacity:(unsigned long long) {
	%orig;
	NSLog(@"+(void) setBreadcrumbCapacity:(unsigned long long)");
}

+(id) payloadDateFormatter {
	%orig;
	NSLog(@"+(id) payloadDateFormatter");
}

+(void) notifyError:(id) {
	%orig;
	NSLog(@"+(void) notifyError:(id)");
}

+(id) notifier {
	%orig;
	NSLog(@"+(id) notifier");
}

+(void) startSession {
	%orig;
	NSLog(@"+(void) startSession");
}

+(void) notify:(id) {
	%orig;
	NSLog(@"+(void) notify:(id)");
}

+(id) instance {
	%orig;
	NSLog(@"+(id) instance");
}

+(id) configuration {
	%orig;
	NSLog(@"+(id) configuration");
}

%end

%hook BSGConnectivity

-(void) connectivityChanged:(unsigned int) {
	%orig;
	NSLog(@"-(void) connectivityChanged:(unsigned int)");
}

-(void) setCallbackBlock:(id) {
	%orig;
	NSLog(@"-(void) setCallbackBlock:(id)");
}

-(void) stopWatchingConnectivity {
	%orig;
	NSLog(@"-(void) stopWatchingConnectivity");
}

-(id) connectivityChangeBlock {
	%orig;
	NSLog(@"-(id) connectivityChangeBlock");
}

-(id) initWithURL:(id) changeBlock:(id) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) changeBlock:(id)");
}

-(void) startWatchingConnectivity {
	%orig;
	NSLog(@"-(void) startWatchingConnectivity");
}

-(void) setConnectivityChangeBlock:(id) {
	%orig;
	NSLog(@"-(void) setConnectivityChangeBlock:(id)");
}

-(id) serialQueue {
	%orig;
	NSLog(@"-(id) serialQueue");
}

-(void) setSerialQueue:(id) {
	%orig;
	NSLog(@"-(void) setSerialQueue:(id)");
}

-(id) callbackBlock {
	%orig;
	NSLog(@"-(id) callbackBlock");
}

-(__SCNetworkReachability*) reachabilityRef {
	%orig;
	NSLog(@"-(__SCNetworkReachability*) reachabilityRef");
}

-(void) setReachabilityRef:(__SCNetworkReachability*) {
	%orig;
	NSLog(@"-(void) setReachabilityRef:(__SCNetworkReachability*)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook BSG_RFC3339DateTool

+(id) stringFromUNIXTimestamp:(unsigned long long) {
	%orig;
	NSLog(@"+(id) stringFromUNIXTimestamp:(unsigned long long)");
}

+(unsigned long long) UNIXTimestampFromString:(id) {
	%orig;
	NSLog(@"+(unsigned long long) UNIXTimestampFromString:(id)");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

+(id) stringFromDate:(id) {
	%orig;
	NSLog(@"+(id) stringFromDate:(id)");
}

+(id) dateFromString:(id) {
	%orig;
	NSLog(@"+(id) dateFromString:(id)");
}

%end

%hook BSG_KSSystemInfo

+(id) uuidBytesToString:(const char*) {
	%orig;
	NSLog(@"+(id) uuidBytesToString:(const char*)");
}

+(id) stringSysctl:(id) {
	%orig;
	NSLog(@"+(id) stringSysctl:(id)");
}

+(id) currentCPUArch {
	%orig;
	NSLog(@"+(id) currentCPUArch");
}

+(id) CPUArchForCPUType:(int) subType:(int) {
	%orig;
	NSLog(@"+(id) CPUArchForCPUType:(int) subType:(int)");
}

+(id) receiptUrlPath {
	%orig;
	NSLog(@"+(id) receiptUrlPath");
}

+(bool) isSimulatorBuild {
	%orig;
	NSLog(@"+(bool) isSimulatorBuild");
}

+(bool) isTestBuild {
	%orig;
	NSLog(@"+(bool) isTestBuild");
}

+(bool) hasAppStoreReceipt {
	%orig;
	NSLog(@"+(bool) hasAppStoreReceipt");
}

+(bool) isJailbroken {
	%orig;
	NSLog(@"+(bool) isJailbroken");
}

+(id) dateSysctl:(id) {
	%orig;
	NSLog(@"+(id) dateSysctl:(id)");
}

+(id) appUUID {
	%orig;
	NSLog(@"+(id) appUUID");
}

+(id) int32Sysctl:(id) {
	%orig;
	NSLog(@"+(id) int32Sysctl:(id)");
}

+(id) deviceAndAppHash {
	%orig;
	NSLog(@"+(id) deviceAndAppHash");
}

+(id) buildType {
	%orig;
	NSLog(@"+(id) buildType");
}

+(id) int64Sysctl:(id) {
	%orig;
	NSLog(@"+(id) int64Sysctl:(id)");
}

+(bool) isDebugBuild {
	%orig;
	NSLog(@"+(bool) isDebugBuild");
}

+(id) systemInfo {
	%orig;
	NSLog(@"+(id) systemInfo");
}

+(id) executablePath {
	%orig;
	NSLog(@"+(id) executablePath");
}

%end

%hook BSG_KSJSONCodec

+(id) encode:(id) options:(int) error:(id*) {
	%orig;
	NSLog(@"+(id) encode:(id) options:(int) error:(id*)");
}

+(id) codecWithEncodeOptions:(int) decodeOptions:(int) {
	%orig;
	NSLog(@"+(id) codecWithEncodeOptions:(int) decodeOptions:(int)");
}

+(id) decode:(id) options:(int) error:(id*) {
	%orig;
	NSLog(@"+(id) decode:(id) options:(int) error:(id*)");
}

-(id) initWithEncodeOptions:(int) decodeOptions:(int) {
	%orig;
	NSLog(@"-(id) initWithEncodeOptions:(int) decodeOptions:(int)");
}

-(void) setPrettyPrint:(bool) {
	%orig;
	NSLog(@"-(void) setPrettyPrint:(bool)");
}

-(void) setIgnoreNullsInArrays:(bool) {
	%orig;
	NSLog(@"-(void) setIgnoreNullsInArrays:(bool)");
}

-(void) setIgnoreNullsInObjects:(bool) {
	%orig;
	NSLog(@"-(void) setIgnoreNullsInObjects:(bool)");
}

-(id) topLevelContainer {
	%orig;
	NSLog(@"-(id) topLevelContainer");
}

-(void) setTopLevelContainer:(id) {
	%orig;
	NSLog(@"-(void) setTopLevelContainer:(id)");
}

-(bool) ignoreNullsInArrays {
	%orig;
	NSLog(@"-(bool) ignoreNullsInArrays");
}

-(bool) ignoreNullsInObjects {
	%orig;
	NSLog(@"-(bool) ignoreNullsInObjects");
}

-(bool) prettyPrint {
	%orig;
	NSLog(@"-(bool) prettyPrint");
}

-(BSG_KSJSONDecodeCallbacks*) callbacks {
	%orig;
	NSLog(@"-(BSG_KSJSONDecodeCallbacks*) callbacks");
}

-(bool) sorted {
	%orig;
	NSLog(@"-(bool) sorted");
}

-(void) setSerializedData:(id) {
	%orig;
	NSLog(@"-(void) setSerializedData:(id)");
}

-(void) setSorted:(bool) {
	%orig;
	NSLog(@"-(void) setSorted:(bool)");
}

-(id) currentContainer {
	%orig;
	NSLog(@"-(id) currentContainer");
}

-(void) setCurrentContainer:(id) {
	%orig;
	NSLog(@"-(void) setCurrentContainer:(id)");
}

-(id) serializedData {
	%orig;
	NSLog(@"-(id) serializedData");
}

-(void) setCallbacks:(BSG_KSJSONDecodeCallbacks*) {
	%orig;
	NSLog(@"-(void) setCallbacks:(BSG_KSJSONDecodeCallbacks*)");
}

-(void) setContainerStack:(id) {
	%orig;
	NSLog(@"-(void) setContainerStack:(id)");
}

-(id) containerStack {
	%orig;
	NSLog(@"-(id) containerStack");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) setError:(id) {
	%orig;
	NSLog(@"-(void) setError:(id)");
}

%end

%hook BSG_KSCrashDeadlockMonitor

-(void) runMonitor {
	%orig;
	NSLog(@"-(void) runMonitor");
}

-(void) setMonitorThread:(id) {
	%orig;
	NSLog(@"-(void) setMonitorThread:(id)");
}

-(id) monitorThread {
	%orig;
	NSLog(@"-(id) monitorThread");
}

-(void) setAwaitingResponse:(bool) {
	%orig;
	NSLog(@"-(void) setAwaitingResponse:(bool)");
}

-(void) watchdogAnswer {
	%orig;
	NSLog(@"-(void) watchdogAnswer");
}

-(bool) awaitingResponse {
	%orig;
	NSLog(@"-(bool) awaitingResponse");
}

-(void) handleDeadlock {
	%orig;
	NSLog(@"-(void) handleDeadlock");
}

-(void) watchdogPulse {
	%orig;
	NSLog(@"-(void) watchdogPulse");
}

-(void) setMainThread:(unsigned int) {
	%orig;
	NSLog(@"-(void) setMainThread:(unsigned int)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(unsigned int) mainThread {
	%orig;
	NSLog(@"-(unsigned int) mainThread");
}

%end

%hook BugsnagFileStore

+(id) findReportStorePath:(id) bundleName:(id) {
	%orig;
	NSLog(@"+(id) findReportStorePath:(id) bundleName:(id)");
}

+(bool) ensureDirectoryExists:(id) {
	%orig;
	NSLog(@"+(bool) ensureDirectoryExists:(id)");
}

-(id) pathToFileWithId:(id) {
	%orig;
	NSLog(@"-(id) pathToFileWithId:(id)");
}

-(void) pruneFilesLeaving:(int) {
	%orig;
	NSLog(@"-(void) pruneFilesLeaving:(int)");
}

-(void) deleteAllFiles {
	%orig;
	NSLog(@"-(void) deleteAllFiles");
}

-(unsigned long long) fileCount {
	%orig;
	NSLog(@"-(unsigned long long) fileCount");
}

-(id) allFiles {
	%orig;
	NSLog(@"-(id) allFiles");
}

-(id) initWithPath:(id) filenameSuffix:(id) {
	%orig;
	NSLog(@"-(id) initWithPath:(id) filenameSuffix:(id)");
}

-(void) deleteFileWithId:(id) {
	%orig;
	NSLog(@"-(void) deleteFileWithId:(id)");
}

-(id) fileWithId:(id) {
	%orig;
	NSLog(@"-(id) fileWithId:(id)");
}

-(id) readFile:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) readFile:(id) error:(id*)");
}

-(id) fileIdFromFilename:(id) {
	%orig;
	NSLog(@"-(id) fileIdFromFilename:(id)");
}

-(void) performOnFields:(id) inFile:(id) operation:(id) okIfNotFound:(?) {
	%orig;
	NSLog(@"-(void) performOnFields:(id) inFile:(id) operation:(id) okIfNotFound:(?)");
}

-(id) filenameWithId:(id) {
	%orig;
	NSLog(@"-(id) filenameWithId:(id)");
}

-(id) filenameSuffix {
	%orig;
	NSLog(@"-(id) filenameSuffix");
}

-(id) fileIds {
	%orig;
	NSLog(@"-(id) fileIds");
}

-(void) setBundleName:(id) {
	%orig;
	NSLog(@"-(void) setBundleName:(id)");
}

-(id) bundleName {
	%orig;
	NSLog(@"-(id) bundleName");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) path {
	%orig;
	NSLog(@"-(id) path");
}

-(void) setPath:(id) {
	%orig;
	NSLog(@"-(void) setPath:(id)");
}

%end

%hook BugsnagSessionFileStore

+(id) storeWithPath:(id) {
	%orig;
	NSLog(@"+(id) storeWithPath:(id)");
}

-(void) write:(id) {
	%orig;
	NSLog(@"-(void) write:(id)");
}

%end

%hook BSG_KSCrashReportStore

+(id) storeWithPath:(id) {
	%orig;
	NSLog(@"+(id) storeWithPath:(id)");
}

-(void) setDemangleCPP:(bool) {
	%orig;
	NSLog(@"-(void) setDemangleCPP:(bool)");
}

-(void) setDemangleSwift:(bool) {
	%orig;
	NSLog(@"-(void) setDemangleSwift:(bool)");
}

-(bool) demangleCPP {
	%orig;
	NSLog(@"-(bool) demangleCPP");
}

-(bool) demangleSwift {
	%orig;
	NSLog(@"-(bool) demangleSwift");
}

-(id) pathToRecrashReportWithID:(id) {
	%orig;
	NSLog(@"-(id) pathToRecrashReportWithID:(id)");
}

-(id) initWithPath:(id) filenameSuffix:(id) {
	%orig;
	NSLog(@"-(id) initWithPath:(id) filenameSuffix:(id)");
}

-(id) recrashReportFilenameWithID:(id) {
	%orig;
	NSLog(@"-(id) recrashReportFilenameWithID:(id)");
}

-(void) deleteFileWithId:(id) {
	%orig;
	NSLog(@"-(void) deleteFileWithId:(id)");
}

-(id) fileWithId:(id) {
	%orig;
	NSLog(@"-(id) fileWithId:(id)");
}

-(id) readFile:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) readFile:(id) error:(id*)");
}

-(void) convertTimestamp:(id) inReport:(id) {
	%orig;
	NSLog(@"-(void) convertTimestamp:(id) inReport:(id)");
}

-(void) mergeDictWithKey:(id) intoDictWithKey:(id) inReport:(id) {
	%orig;
	NSLog(@"-(void) mergeDictWithKey:(id) intoDictWithKey:(id) inReport:(id)");
}

-(id) getReportType:(id) {
	%orig;
	NSLog(@"-(id) getReportType:(id)");
}

-(id) fixupCrashReport:(id) {
	%orig;
	NSLog(@"-(id) fixupCrashReport:(id)");
}

%end

%hook BSG_KSCrashDoctor

+(id) doctor {
	%orig;
	NSLog(@"+(id) doctor");
}

-(id) crashReport:(id) {
	%orig;
	NSLog(@"-(id) crashReport:(id)");
}

-(id) systemReport:(id) {
	%orig;
	NSLog(@"-(id) systemReport:(id)");
}

-(id) infoReport:(id) {
	%orig;
	NSLog(@"-(id) infoReport:(id)");
}

-(id) mainExecutableNameForReport:(id) {
	%orig;
	NSLog(@"-(id) mainExecutableNameForReport:(id)");
}

-(id) crashedThreadReport:(id) {
	%orig;
	NSLog(@"-(id) crashedThreadReport:(id)");
}

-(id) backtraceFromThreadReport:(id) {
	%orig;
	NSLog(@"-(id) backtraceFromThreadReport:(id)");
}

-(id) lastStackEntry:(id) {
	%orig;
	NSLog(@"-(id) lastStackEntry:(id)");
}

-(int) cpuFamily:(id) {
	%orig;
	NSLog(@"-(int) cpuFamily:(id)");
}

-(id) basicRegistersFromThreadReport:(id) {
	%orig;
	NSLog(@"-(id) basicRegistersFromThreadReport:(id)");
}

-(id) registerNameForFamily:(int) paramIndex:(int) {
	%orig;
	NSLog(@"-(id) registerNameForFamily:(int) paramIndex:(int)");
}

-(id) errorReport:(id) {
	%orig;
	NSLog(@"-(id) errorReport:(id)");
}

-(id) lastInAppStackEntry:(id) {
	%orig;
	NSLog(@"-(id) lastInAppStackEntry:(id)");
}

-(bool) isDeadlock:(id) {
	%orig;
	NSLog(@"-(bool) isDeadlock:(id)");
}

-(bool) isStackOverflow:(id) {
	%orig;
	NSLog(@"-(bool) isStackOverflow:(id)");
}

-(id) appendOriginatingCall:(id) callName:(id) {
	%orig;
	NSLog(@"-(id) appendOriginatingCall:(id) callName:(id)");
}

-(bool) isMemoryCorruption:(id) {
	%orig;
	NSLog(@"-(bool) isMemoryCorruption:(id)");
}

-(bool) isMathError:(id) {
	%orig;
	NSLog(@"-(bool) isMathError:(id)");
}

-(id) lastFunctionCall:(id) {
	%orig;
	NSLog(@"-(id) lastFunctionCall:(id)");
}

-(id) zombieCall:(id) {
	%orig;
	NSLog(@"-(id) zombieCall:(id)");
}

-(bool) isInvalidAddress:(id) {
	%orig;
	NSLog(@"-(bool) isInvalidAddress:(id)");
}

-(id) recrashReport:(id) {
	%orig;
	NSLog(@"-(id) recrashReport:(id)");
}

-(id) diagnoseCrash:(id) {
	%orig;
	NSLog(@"-(id) diagnoseCrash:(id)");
}

%end

%hook BSG_KSCrashDoctorFunctionCall

-(id) descriptionForObjCCall {
	%orig;
	NSLog(@"-(id) descriptionForObjCCall");
}

-(id) descriptionWithParamCount:(int) {
	%orig;
	NSLog(@"-(id) descriptionWithParamCount:(int)");
}

-(id) params {
	%orig;
	NSLog(@"-(id) params");
}

-(void) setParams:(id) {
	%orig;
	NSLog(@"-(void) setParams:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(void) setName:(id) {
	%orig;
	NSLog(@"-(void) setName:(id)");
}

%end

%hook BSG_KSCrashDoctorParam

-(id) previousClassName {
	%orig;
	NSLog(@"-(id) previousClassName");
}

-(void) setPreviousClassName:(id) {
	%orig;
	NSLog(@"-(void) setPreviousClassName:(id)");
}

-(bool) isInstance {
	%orig;
	NSLog(@"-(bool) isInstance");
}

-(void) setIsInstance:(bool) {
	%orig;
	NSLog(@"-(void) setIsInstance:(bool)");
}

-(void) setAddress:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setAddress:(unsigned long long)");
}

-(void) setClassName:(id) {
	%orig;
	NSLog(@"-(void) setClassName:(id)");
}

-(unsigned long long) address {
	%orig;
	NSLog(@"-(unsigned long long) address");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(id) value {
	%orig;
	NSLog(@"-(id) value");
}

-(void) setValue:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id)");
}

-(id) className {
	%orig;
	NSLog(@"-(id) className");
}

%end

%hook BSG_KSCrash

+(id) allocWithZone:(_NSZone*) {
	%orig;
	NSLog(@"+(id) allocWithZone:(_NSZone*)");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) crashReportStore {
	%orig;
	NSLog(@"-(id) crashReportStore");
}

-(id) initWithReportFilesDirectory:(id) {
	%orig;
	NSLog(@"-(id) initWithReportFilesDirectory:(id)");
}

-(void) setNextCrashID:(id) {
	%orig;
	NSLog(@"-(void) setNextCrashID:(id)");
}

-(void) setCrashReportStore:(id) {
	%orig;
	NSLog(@"-(void) setCrashReportStore:(id)");
}

-(void) setDeleteBehaviorAfterSendAll:(int) {
	%orig;
	NSLog(@"-(void) setDeleteBehaviorAfterSendAll:(int)");
}

-(void) setSearchThreadNames:(bool) {
	%orig;
	NSLog(@"-(void) setSearchThreadNames:(bool)");
}

-(void) setSearchQueueNames:(bool) {
	%orig;
	NSLog(@"-(void) setSearchQueueNames:(bool)");
}

-(void) setIntrospectMemory:(bool) {
	%orig;
	NSLog(@"-(void) setIntrospectMemory:(bool)");
}

-(void) setCatchZombies:(bool) {
	%orig;
	NSLog(@"-(void) setCatchZombies:(bool)");
}

-(void) setMaxStoredReports:(int) {
	%orig;
	NSLog(@"-(void) setMaxStoredReports:(int)");
}

-(void) setSuspendThreadsForUserReported:(bool) {
	%orig;
	NSLog(@"-(void) setSuspendThreadsForUserReported:(bool)");
}

-(void) setReportWhenDebuggerIsAttached:(bool) {
	%orig;
	NSLog(@"-(void) setReportWhenDebuggerIsAttached:(bool)");
}

-(void) setThreadTracingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setThreadTracingEnabled:(bool)");
}

-(void) setWriteBinaryImagesForUserReported:(bool) {
	%orig;
	NSLog(@"-(void) setWriteBinaryImagesForUserReported:(bool)");
}

-(id) nullTerminated:(id) {
	%orig;
	NSLog(@"-(id) nullTerminated:(id)");
}

-(id) nextCrashID {
	%orig;
	NSLog(@"-(id) nextCrashID");
}

-(id) crashReportPath {
	%orig;
	NSLog(@"-(id) crashReportPath");
}

-(id) recrashReportPath {
	%orig;
	NSLog(@"-(id) recrashReportPath");
}

-(id) stateFilePath {
	%orig;
	NSLog(@"-(id) stateFilePath");
}

-(int) handlingCrashTypes {
	%orig;
	NSLog(@"-(int) handlingCrashTypes");
}

-(int) maxStoredReports {
	%orig;
	NSLog(@"-(int) maxStoredReports");
}

-(id) allReports {
	%orig;
	NSLog(@"-(id) allReports");
}

-(int) deleteBehaviorAfterSendAll {
	%orig;
	NSLog(@"-(int) deleteBehaviorAfterSendAll");
}

-(void) deleteAllReports {
	%orig;
	NSLog(@"-(void) deleteAllReports");
}

-(void) sendReports:(id) onCompletion:(id) {
	%orig;
	NSLog(@"-(void) sendReports:(id) onCompletion:(id)");
}

-(bool) redirectConsoleLogsToFile:(id) overwrite:(bool) {
	%orig;
	NSLog(@"-(bool) redirectConsoleLogsToFile:(id) overwrite:(bool)");
}

-(void) setDemangleLanguages:(int) {
	%orig;
	NSLog(@"-(void) setDemangleLanguages:(int)");
}

-(int) demangleLanguages {
	%orig;
	NSLog(@"-(int) demangleLanguages");
}

-(void) setHandlingCrashTypes:(int) {
	%orig;
	NSLog(@"-(void) setHandlingCrashTypes:(int)");
}

-(void) setDeadlockWatchdogInterval:(double) {
	%orig;
	NSLog(@"-(void) setDeadlockWatchdogInterval:(double)");
}

-(void) setPrintTraceToStdout:(bool) {
	%orig;
	NSLog(@"-(void) setPrintTraceToStdout:(bool)");
}

-(void) setOnCrash:(?*) {
	%orig;
	NSLog(@"-(void) setOnCrash:(?*)");
}

-(void) setDoNotIntrospectClasses:(id) {
	%orig;
	NSLog(@"-(void) setDoNotIntrospectClasses:(id)");
}

-(void) sendAllReportsWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) sendAllReportsWithCompletion:(id)");
}

-(void) reportUserException:(id) reason:(id) language:(id) lineOfCode:(id) stackTrace:(id) terminateProgram:(bool) {
	%orig;
	NSLog(@"-(void) reportUserException:(id) reason:(id) language:(id) lineOfCode:(id) stackTrace:(id) terminateProgram:(bool)");
}

-(double) activeDurationSinceLastCrash {
	%orig;
	NSLog(@"-(double) activeDurationSinceLastCrash");
}

-(double) backgroundDurationSinceLastCrash {
	%orig;
	NSLog(@"-(double) backgroundDurationSinceLastCrash");
}

-(int) launchesSinceLastCrash {
	%orig;
	NSLog(@"-(int) launchesSinceLastCrash");
}

-(int) sessionsSinceLastCrash {
	%orig;
	NSLog(@"-(int) sessionsSinceLastCrash");
}

-(double) activeDurationSinceLaunch {
	%orig;
	NSLog(@"-(double) activeDurationSinceLaunch");
}

-(double) backgroundDurationSinceLaunch {
	%orig;
	NSLog(@"-(double) backgroundDurationSinceLaunch");
}

-(int) sessionsSinceLaunch {
	%orig;
	NSLog(@"-(int) sessionsSinceLaunch");
}

-(bool) crashedLastLaunch {
	%orig;
	NSLog(@"-(bool) crashedLastLaunch");
}

-(unsigned long long) reportCount {
	%orig;
	NSLog(@"-(unsigned long long) reportCount");
}

-(id) crashReportsPath {
	%orig;
	NSLog(@"-(id) crashReportsPath");
}

-(bool) redirectConsoleLogsToDefaultFile {
	%orig;
	NSLog(@"-(bool) redirectConsoleLogsToDefaultFile");
}

-(void) setSink:(id) {
	%orig;
	NSLog(@"-(void) setSink:(id)");
}

-(double) deadlockWatchdogInterval {
	%orig;
	NSLog(@"-(double) deadlockWatchdogInterval");
}

-(bool) printTraceToStdout {
	%orig;
	NSLog(@"-(bool) printTraceToStdout");
}

-(?*) onCrash {
	%orig;
	NSLog(@"-(?*) onCrash");
}

-(bool) searchThreadNames {
	%orig;
	NSLog(@"-(bool) searchThreadNames");
}

-(bool) searchQueueNames {
	%orig;
	NSLog(@"-(bool) searchQueueNames");
}

-(bool) introspectMemory {
	%orig;
	NSLog(@"-(bool) introspectMemory");
}

-(bool) catchZombies {
	%orig;
	NSLog(@"-(bool) catchZombies");
}

-(id) doNotIntrospectClasses {
	%orig;
	NSLog(@"-(id) doNotIntrospectClasses");
}

-(bool) suspendThreadsForUserReported {
	%orig;
	NSLog(@"-(bool) suspendThreadsForUserReported");
}

-(bool) reportWhenDebuggerIsAttached {
	%orig;
	NSLog(@"-(bool) reportWhenDebuggerIsAttached");
}

-(bool) threadTracingEnabled {
	%orig;
	NSLog(@"-(bool) threadTracingEnabled");
}

-(bool) writeBinaryImagesForUserReported {
	%orig;
	NSLog(@"-(bool) writeBinaryImagesForUserReported");
}

-(void) setBundleName:(id) {
	%orig;
	NSLog(@"-(void) setBundleName:(id)");
}

-(id) bundleName {
	%orig;
	NSLog(@"-(id) bundleName");
}

-(id) sink {
	%orig;
	NSLog(@"-(id) sink");
}

-(void) applicationDidEnterBackground {
	%orig;
	NSLog(@"-(void) applicationDidEnterBackground");
}

-(void) applicationWillEnterForeground {
	%orig;
	NSLog(@"-(void) applicationWillEnterForeground");
}

-(id) logFilePath {
	%orig;
	NSLog(@"-(id) logFilePath");
}

-(void) setLogFilePath:(id) {
	%orig;
	NSLog(@"-(void) setLogFilePath:(id)");
}

-(bool) install {
	%orig;
	NSLog(@"-(bool) install");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) userInfo {
	%orig;
	NSLog(@"-(id) userInfo");
}

-(void) setUserInfo:(id) {
	%orig;
	NSLog(@"-(void) setUserInfo:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) applicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive");
}

-(void) applicationWillResignActive {
	%orig;
	NSLog(@"-(void) applicationWillResignActive");
}

-(void) applicationWillTerminate {
	%orig;
	NSLog(@"-(void) applicationWillTerminate");
}

%end

%hook Bond.ProtocolProxyPropertyController

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook Bond.SelectorProtocolProxyPropertyController

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(long long) hash {
	%orig;
	NSLog(@"-(long long) hash");
}

%end

%hook BNDInvocation

-(id) signature {
	%orig;
	NSLog(@"-(id) signature");
}

-(void) setSignature:(id) {
	%orig;
	NSLog(@"-(void) setSignature:(id)");
}

-(bool) argumentsRetained {
	%orig;
	NSLog(@"-(bool) argumentsRetained");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(SEL) selector {
	%orig;
	NSLog(@"-(SEL) selector");
}

-(void) setArgument:(void*) atIndex:(long long) {
	%orig;
	NSLog(@"-(void) setArgument:(void*) atIndex:(long long)");
}

-(void) getReturnValue:(void*) {
	%orig;
	NSLog(@"-(void) getReturnValue:(void*)");
}

-(void) retainArguments {
	%orig;
	NSLog(@"-(void) retainArguments");
}

-(id) methodSignature {
	%orig;
	NSLog(@"-(id) methodSignature");
}

-(void) getArgument:(void*) atIndex:(long long) {
	%orig;
	NSLog(@"-(void) getArgument:(void*) atIndex:(long long)");
}

-(void) setReturnValue:(void*) {
	%orig;
	NSLog(@"-(void) setReturnValue:(void*)");
}

-(id) invocation {
	%orig;
	NSLog(@"-(id) invocation");
}

-(id) initWithInvocation:(id) {
	%orig;
	NSLog(@"-(id) initWithInvocation:(id)");
}

-(void) setInvocation:(id) {
	%orig;
	NSLog(@"-(void) setInvocation:(id)");
}

%end

%hook BNDMethodSignature

-(id) initWithMethodSignature:(id) {
	%orig;
	NSLog(@"-(id) initWithMethodSignature:(id)");
}

-(unsigned long long) getArgumentSizeAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) getArgumentSizeAtIndex:(unsigned long long)");
}

-(unsigned long long) getArgumentAlignmentAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) getArgumentAlignmentAtIndex:(unsigned long long)");
}

-(int) getReturnArgumentType {
	%orig;
	NSLog(@"-(int) getReturnArgumentType");
}

-(unsigned long long) getReturnArgumentSize {
	%orig;
	NSLog(@"-(unsigned long long) getReturnArgumentSize");
}

-(unsigned long long) getReturnArgumentAlignment {
	%orig;
	NSLog(@"-(unsigned long long) getReturnArgumentAlignment");
}

-(bool) isOneway {
	%orig;
	NSLog(@"-(bool) isOneway");
}

-(id) signature {
	%orig;
	NSLog(@"-(id) signature");
}

-(void) setSignature:(id) {
	%orig;
	NSLog(@"-(void) setSignature:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(int) getArgumentTypeAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(int) getArgumentTypeAtIndex:(unsigned long long)");
}

-(unsigned long long) numberOfArguments {
	%orig;
	NSLog(@"-(unsigned long long) numberOfArguments");
}

-(unsigned long long) methodReturnLength {
	%orig;
	NSLog(@"-(unsigned long long) methodReturnLength");
}

-(unsigned long long) frameLength {
	%orig;
	NSLog(@"-(unsigned long long) frameLength");
}

-(const char*) methodReturnType {
	%orig;
	NSLog(@"-(const char*) methodReturnType");
}

%end

%hook BNDProtocolProxyBase

-(bool) hasHandlerForSelector:(SEL) {
	%orig;
	NSLog(@"-(bool) hasHandlerForSelector:(SEL)");
}

-(id) forwardTo {
	%orig;
	NSLog(@"-(id) forwardTo");
}

-(void) setForwardTo:(id) {
	%orig;
	NSLog(@"-(void) setForwardTo:(id)");
}

-(void) handleInvocation:(id) {
	%orig;
	NSLog(@"-(void) handleInvocation:(id)");
}

-(void) setProtocol:(id) {
	%orig;
	NSLog(@"-(void) setProtocol:(id)");
}

-(id) initWithProtocol:(id) {
	%orig;
	NSLog(@"-(id) initWithProtocol:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) methodSignatureForSelector:(SEL) {
	%orig;
	NSLog(@"-(id) methodSignatureForSelector:(SEL)");
}

-(void) forwardInvocation:(id) {
	%orig;
	NSLog(@"-(void) forwardInvocation:(id)");
}

-(id) protocol {
	%orig;
	NSLog(@"-(id) protocol");
}

%end

%hook Bond.ProtocolProxy

-(bool) hasHandlerForSelector:(SEL) {
	%orig;
	NSLog(@"-(bool) hasHandlerForSelector:(SEL)");
}

-(id) forwardTo {
	%orig;
	NSLog(@"-(id) forwardTo");
}

-(void) setForwardTo:(id) {
	%orig;
	NSLog(@"-(void) setForwardTo:(id)");
}

-(void) handleInvocation:(id) {
	%orig;
	NSLog(@"-(void) handleInvocation:(id)");
}

-(id) initWithProtocol:(id) {
	%orig;
	NSLog(@"-(id) initWithProtocol:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(bool) respondsToSelector:(SEL) {
	%orig;
	NSLog(@"-(bool) respondsToSelector:(SEL)");
}

-(bool) conformsToProtocol:(id) {
	%orig;
	NSLog(@"-(bool) conformsToProtocol:(id)");
}

%end

%hook BFWebViewAppLinkResolver

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) appLinkFromURLInBackground:(id) {
	%orig;
	NSLog(@"-(id) appLinkFromURLInBackground:(id)");
}

-(id) followRedirects:(id) {
	%orig;
	NSLog(@"-(id) followRedirects:(id)");
}

-(id) getALDataFromLoadedPage:(id) {
	%orig;
	NSLog(@"-(id) getALDataFromLoadedPage:(id)");
}

-(id) appLinkFromALData:(id) destination:(id) {
	%orig;
	NSLog(@"-(id) appLinkFromALData:(id) destination:(id)");
}

-(id) parseALData:(id) {
	%orig;
	NSLog(@"-(id) parseALData:(id)");
}

%end

%hook BFWebViewAppLinkResolverWebViewDelegate

-(id) didFinishLoad {
	%orig;
	NSLog(@"-(id) didFinishLoad");
}

-(id) didFailLoadWithError {
	%orig;
	NSLog(@"-(id) didFailLoadWithError");
}

-(void) setDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) setDidFinishLoad:(id)");
}

-(void) setDidFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) setDidFailLoadWithError:(id)");
}

-(void) setHasLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setHasLoaded:(bool)");
}

-(bool) hasLoaded {
	%orig;
	NSLog(@"-(bool) hasLoaded");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) webView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailLoadWithError:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidStartLoad:(id)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

%end

%hook BFURL

+(id) URLForRenderBackToReferrerBarURL:(id) {
	%orig;
	NSLog(@"+(id) URLForRenderBackToReferrerBarURL:(id)");
}

+(id) decodeURLString:(id) {
	%orig;
	NSLog(@"+(id) decodeURLString:(id)");
}

+(id) URLWithURL:(id) {
	%orig;
	NSLog(@"+(id) URLWithURL:(id)");
}

+(id) URLWithInboundURL:(id) sourceApplication:(id) {
	%orig;
	NSLog(@"+(id) URLWithInboundURL:(id) sourceApplication:(id)");
}

+(id) queryParametersForURL:(id) {
	%orig;
	NSLog(@"+(id) queryParametersForURL:(id)");
}

-(id) appLinkReferer {
	%orig;
	NSLog(@"-(id) appLinkReferer");
}

-(id) initWithURL:(id) forOpenInboundURL:(bool) sourceApplication:(id) forRenderBackToReferrerBar:(bool) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) forOpenInboundURL:(bool) sourceApplication:(id) forRenderBackToReferrerBar:(bool)");
}

-(id) targetQueryParameters {
	%orig;
	NSLog(@"-(id) targetQueryParameters");
}

-(id) appLinkExtras {
	%orig;
	NSLog(@"-(id) appLinkExtras");
}

-(id) inputQueryParameters {
	%orig;
	NSLog(@"-(id) inputQueryParameters");
}

-(id) inputURL {
	%orig;
	NSLog(@"-(id) inputURL");
}

-(id) targetURL {
	%orig;
	NSLog(@"-(id) targetURL");
}

-(id) appLinkData {
	%orig;
	NSLog(@"-(id) appLinkData");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook BFTaskCompletionSource

+(id) taskCompletionSource {
	%orig;
	NSLog(@"+(id) taskCompletionSource");
}

-(bool) trySetResult:(id) {
	%orig;
	NSLog(@"-(bool) trySetResult:(id)");
}

-(bool) trySetError:(id) {
	%orig;
	NSLog(@"-(bool) trySetError:(id)");
}

-(bool) trySetCancelled {
	%orig;
	NSLog(@"-(bool) trySetCancelled");
}

-(void) setResult:(id) {
	%orig;
	NSLog(@"-(void) setResult:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) task {
	%orig;
	NSLog(@"-(id) task");
}

-(void) setError:(id) {
	%orig;
	NSLog(@"-(void) setError:(id)");
}

%end

%hook BFTask

+(id) taskForCompletionOfAllTasks:(id) {
	%orig;
	NSLog(@"+(id) taskForCompletionOfAllTasks:(id)");
}

+(id) cancelledTask {
	%orig;
	NSLog(@"+(id) cancelledTask");
}

+(id) taskForCompletionOfAllTasksWithResults:(id) {
	%orig;
	NSLog(@"+(id) taskForCompletionOfAllTasksWithResults:(id)");
}

+(id) taskForCompletionOfAnyTask:(id) {
	%orig;
	NSLog(@"+(id) taskForCompletionOfAnyTask:(id)");
}

+(id) taskWithDelay:(int) {
	%orig;
	NSLog(@"+(id) taskWithDelay:(int)");
}

+(id) taskWithDelay:(int) cancellationToken:(id) {
	%orig;
	NSLog(@"+(id) taskWithDelay:(int) cancellationToken:(id)");
}

+(id) taskFromExecutor:(id) withBlock:(id) {
	%orig;
	NSLog(@"+(id) taskFromExecutor:(id) withBlock:(id)");
}

+(id) taskWithResult:(id) {
	%orig;
	NSLog(@"+(id) taskWithResult:(id)");
}

+(id) taskWithError:(id) {
	%orig;
	NSLog(@"+(id) taskWithError:(id)");
}

-(id) continueWithExecutor:(id) withSuccessBlock:(id) {
	%orig;
	NSLog(@"-(id) continueWithExecutor:(id) withSuccessBlock:(id)");
}

-(id) initCancelled {
	%orig;
	NSLog(@"-(id) initCancelled");
}

-(id) continueWithBlock:(id) {
	%orig;
	NSLog(@"-(id) continueWithBlock:(id)");
}

-(id) continueWithExecutor:(id) withBlock:(id) {
	%orig;
	NSLog(@"-(id) continueWithExecutor:(id) withBlock:(id)");
}

-(void) runContinuations {
	%orig;
	NSLog(@"-(void) runContinuations");
}

-(void) setFaulted:(bool) {
	%orig;
	NSLog(@"-(void) setFaulted:(bool)");
}

-(id) continueWithExecutor:(id) block:(id) cancellationToken:(?) {
	%orig;
	NSLog(@"-(id) continueWithExecutor:(id) block:(id) cancellationToken:(?)");
}

-(id) continueWithExecutor:(id) successBlock:(id) cancellationToken:(?) {
	%orig;
	NSLog(@"-(id) continueWithExecutor:(id) successBlock:(id) cancellationToken:(?)");
}

-(bool) isFaulted {
	%orig;
	NSLog(@"-(bool) isFaulted");
}

-(void) warnOperationOnMainThread {
	%orig;
	NSLog(@"-(void) warnOperationOnMainThread");
}

-(id) continueWithBlock:(id) cancellationToken:(?) {
	%orig;
	NSLog(@"-(id) continueWithBlock:(id) cancellationToken:(?)");
}

-(id) continueWithSuccessBlock:(id) cancellationToken:(?) {
	%orig;
	NSLog(@"-(id) continueWithSuccessBlock:(id) cancellationToken:(?)");
}

-(bool) trySetResult:(id) {
	%orig;
	NSLog(@"-(bool) trySetResult:(id)");
}

-(bool) trySetError:(id) {
	%orig;
	NSLog(@"-(bool) trySetError:(id)");
}

-(bool) trySetCancelled {
	%orig;
	NSLog(@"-(bool) trySetCancelled");
}

-(id) continueWithSuccessBlock:(id) {
	%orig;
	NSLog(@"-(id) continueWithSuccessBlock:(id)");
}

-(id) callbacks {
	%orig;
	NSLog(@"-(id) callbacks");
}

-(void) setLock:(id) {
	%orig;
	NSLog(@"-(void) setLock:(id)");
}

-(id) initWithResult:(id) {
	%orig;
	NSLog(@"-(id) initWithResult:(id)");
}

-(id) initWithError:(id) {
	%orig;
	NSLog(@"-(id) initWithError:(id)");
}

-(void) setCallbacks:(id) {
	%orig;
	NSLog(@"-(void) setCallbacks:(id)");
}

-(void) waitUntilFinished {
	%orig;
	NSLog(@"-(void) waitUntilFinished");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(bool) isCancelled {
	%orig;
	NSLog(@"-(bool) isCancelled");
}

-(void) setCancelled:(bool) {
	%orig;
	NSLog(@"-(void) setCancelled:(bool)");
}

-(id) lock {
	%orig;
	NSLog(@"-(id) lock");
}

-(id) result {
	%orig;
	NSLog(@"-(id) result");
}

-(id) condition {
	%orig;
	NSLog(@"-(id) condition");
}

-(void) setCondition:(id) {
	%orig;
	NSLog(@"-(void) setCondition:(id)");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) setCompleted:(bool) {
	%orig;
	NSLog(@"-(void) setCompleted:(bool)");
}

-(bool) isCompleted {
	%orig;
	NSLog(@"-(bool) isCompleted");
}

%end

%hook BFMeasurementEvent

+(void) postNotificationForEventName:(id) args:(id) {
	%orig;
	NSLog(@"+(void) postNotificationForEventName:(id) args:(id)");
}

-(id) initEventWithName:(id) args:(id) {
	%orig;
	NSLog(@"-(id) initEventWithName:(id) args:(id)");
}

-(void) postNotification {
	%orig;
	NSLog(@"-(void) postNotification");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook BFExecutor

+(id) mainThreadExecutor {
	%orig;
	NSLog(@"+(id) mainThreadExecutor");
}

+(id) executorWithBlock:(id) {
	%orig;
	NSLog(@"+(id) executorWithBlock:(id)");
}

+(id) defaultExecutor {
	%orig;
	NSLog(@"+(id) defaultExecutor");
}

+(id) immediateExecutor {
	%orig;
	NSLog(@"+(id) immediateExecutor");
}

+(id) executorWithDispatchQueue:(id) {
	%orig;
	NSLog(@"+(id) executorWithDispatchQueue:(id)");
}

+(id) executorWithOperationQueue:(id) {
	%orig;
	NSLog(@"+(id) executorWithOperationQueue:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) block {
	%orig;
	NSLog(@"-(id) block");
}

-(void) execute:(id) {
	%orig;
	NSLog(@"-(void) execute:(id)");
}

-(void) setBlock:(id) {
	%orig;
	NSLog(@"-(void) setBlock:(id)");
}

-(id) initWithBlock:(id) {
	%orig;
	NSLog(@"-(id) initWithBlock:(id)");
}

%end

%hook BFCancellationTokenSource

+(id) cancellationTokenSource {
	%orig;
	NSLog(@"+(id) cancellationTokenSource");
}

-(bool) isCancellationRequested {
	%orig;
	NSLog(@"-(bool) isCancellationRequested");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(void) cancelAfterDelay:(int) {
	%orig;
	NSLog(@"-(void) cancelAfterDelay:(int)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) token {
	%orig;
	NSLog(@"-(id) token");
}

%end

%hook BFCancellationTokenRegistration

+(id) registrationWithToken:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) registrationWithToken:(id) delegate:(id)");
}

-(void) throwIfDisposed {
	%orig;
	NSLog(@"-(void) throwIfDisposed");
}

-(bool) disposed {
	%orig;
	NSLog(@"-(bool) disposed");
}

-(void) setDisposed:(bool) {
	%orig;
	NSLog(@"-(void) setDisposed:(bool)");
}

-(void) setCancellationObserverBlock:(id) {
	%orig;
	NSLog(@"-(void) setCancellationObserverBlock:(id)");
}

-(id) cancellationObserverBlock {
	%orig;
	NSLog(@"-(id) cancellationObserverBlock");
}

-(void) notifyDelegate {
	%orig;
	NSLog(@"-(void) notifyDelegate");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(void) setLock:(id) {
	%orig;
	NSLog(@"-(void) setLock:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) lock {
	%orig;
	NSLog(@"-(id) lock");
}

-(id) token {
	%orig;
	NSLog(@"-(id) token");
}

-(void) setToken:(id) {
	%orig;
	NSLog(@"-(void) setToken:(id)");
}

%end

%hook BFCancellationToken

-(void) throwIfDisposed {
	%orig;
	NSLog(@"-(void) throwIfDisposed");
}

-(void) cancelPrivate {
	%orig;
	NSLog(@"-(void) cancelPrivate");
}

-(void) notifyCancellation:(id) {
	%orig;
	NSLog(@"-(void) notifyCancellation:(id)");
}

-(bool) disposed {
	%orig;
	NSLog(@"-(bool) disposed");
}

-(void) setDisposed:(bool) {
	%orig;
	NSLog(@"-(void) setDisposed:(bool)");
}

-(id) registerCancellationObserverWithBlock:(id) {
	%orig;
	NSLog(@"-(id) registerCancellationObserverWithBlock:(id)");
}

-(void) unregisterRegistration:(id) {
	%orig;
	NSLog(@"-(void) unregisterRegistration:(id)");
}

-(bool) isCancellationRequested {
	%orig;
	NSLog(@"-(bool) isCancellationRequested");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(void) setLock:(id) {
	%orig;
	NSLog(@"-(void) setLock:(id)");
}

-(void) cancelAfterDelay:(int) {
	%orig;
	NSLog(@"-(void) cancelAfterDelay:(int)");
}

-(id) registrations {
	%orig;
	NSLog(@"-(id) registrations");
}

-(void) setRegistrations:(id) {
	%orig;
	NSLog(@"-(void) setRegistrations:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) lock {
	%orig;
	NSLog(@"-(id) lock");
}

%end

%hook BFAppLinkTarget

+(id) appLinkTargetWithURL:(id) appStoreId:(id) appName:(id) {
	%orig;
	NSLog(@"+(id) appLinkTargetWithURL:(id) appStoreId:(id) appName:(id)");
}

-(void) setAppStoreId:(id) {
	%orig;
	NSLog(@"-(void) setAppStoreId:(id)");
}

-(id) appStoreId {
	%orig;
	NSLog(@"-(id) appStoreId");
}

-(void) setAppName:(id) {
	%orig;
	NSLog(@"-(void) setAppName:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(void) setURL:(id) {
	%orig;
	NSLog(@"-(void) setURL:(id)");
}

-(id) appName {
	%orig;
	NSLog(@"-(id) appName");
}

%end

%hook BFAppLinkReturnToRefererController

-(id) initForDisplayAboveNavController:(id) {
	%orig;
	NSLog(@"-(id) initForDisplayAboveNavController:(id)");
}

-(void) statusBarFrameDidChange:(id) {
	%orig;
	NSLog(@"-(void) statusBarFrameDidChange:(id)");
}

-(void) moveNavigationBar {
	%orig;
	NSLog(@"-(void) moveNavigationBar");
}

-(void) showViewForRefererAppLink:(id) {
	%orig;
	NSLog(@"-(void) showViewForRefererAppLink:(id)");
}

-(void) closeViewAnimated:(bool) explicitlyClosed:(bool) {
	%orig;
	NSLog(@"-(void) closeViewAnimated:(bool) explicitlyClosed:(bool)");
}

-(void) openRefererAppLink:(id) {
	%orig;
	NSLog(@"-(void) openRefererAppLink:(id)");
}

-(void) updateNavigationBarY:(double) {
	%orig;
	NSLog(@"-(void) updateNavigationBarY:(double)");
}

-(void) returnToRefererViewDidTapInsideCloseButton:(id) {
	%orig;
	NSLog(@"-(void) returnToRefererViewDidTapInsideCloseButton:(id)");
}

-(void) returnToRefererViewDidTapInsideLink:(id) link:(id) {
	%orig;
	NSLog(@"-(void) returnToRefererViewDidTapInsideLink:(id) link:(id)");
}

-(void) showViewForRefererURL:(id) {
	%orig;
	NSLog(@"-(void) showViewForRefererURL:(id)");
}

-(void) removeFromNavController {
	%orig;
	NSLog(@"-(void) removeFromNavController");
}

-(void) closeViewAnimated:(bool) {
	%orig;
	NSLog(@"-(void) closeViewAnimated:(bool)");
}

-(void) orientationDidChange:(id) {
	%orig;
	NSLog(@"-(void) orientationDidChange:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(void) statusBarFrameWillChange:(id) {
	%orig;
	NSLog(@"-(void) statusBarFrameWillChange:(id)");
}

%end

%hook BFAppLinkNavigation

+(id) defaultResolver {
	%orig;
	NSLog(@"+(id) defaultResolver");
}

+(id) resolveAppLinkInBackground:(id) resolver:(id) {
	%orig;
	NSLog(@"+(id) resolveAppLinkInBackground:(id) resolver:(id)");
}

+(id) navigateToURLInBackground:(id) resolver:(id) {
	%orig;
	NSLog(@"+(id) navigateToURLInBackground:(id) resolver:(id)");
}

+(long long) navigateToAppLink:(id) error:(id*) {
	%orig;
	NSLog(@"+(long long) navigateToAppLink:(id) error:(id*)");
}

+(id) navigationWithAppLink:(id) extras:(id) appLinkData:(id) {
	%orig;
	NSLog(@"+(id) navigationWithAppLink:(id) extras:(id) appLinkData:(id)");
}

+(id) callbackAppLinkDataForAppWithName:(id) url:(id) {
	%orig;
	NSLog(@"+(id) callbackAppLinkDataForAppWithName:(id) url:(id)");
}

+(id) resolveAppLinkInBackground:(id) {
	%orig;
	NSLog(@"+(id) resolveAppLinkInBackground:(id)");
}

+(id) navigateToURLInBackground:(id) {
	%orig;
	NSLog(@"+(id) navigateToURLInBackground:(id)");
}

+(long long) navigationTypeForLink:(id) {
	%orig;
	NSLog(@"+(long long) navigationTypeForLink:(id)");
}

+(void) setDefaultResolver:(id) {
	%orig;
	NSLog(@"+(void) setDefaultResolver:(id)");
}

-(void) setExtras:(id) {
	%orig;
	NSLog(@"-(void) setExtras:(id)");
}

-(id) extras {
	%orig;
	NSLog(@"-(id) extras");
}

-(id) stringByEscapingQueryString:(id) {
	%orig;
	NSLog(@"-(id) stringByEscapingQueryString:(id)");
}

-(id) appLinkURLWithTargetURL:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) appLinkURLWithTargetURL:(id) error:(id*)");
}

-(void) postAppLinkNavigateEventNotificationWithTargetURL:(id) error:(id) type:(long long) {
	%orig;
	NSLog(@"-(void) postAppLinkNavigateEventNotificationWithTargetURL:(id) error:(id) type:(long long)");
}

-(long long) navigate:(id*) {
	%orig;
	NSLog(@"-(long long) navigate:(id*)");
}

-(id) appLinkData {
	%orig;
	NSLog(@"-(id) appLinkData");
}

-(void) setAppLinkData:(id) {
	%orig;
	NSLog(@"-(void) setAppLinkData:(id)");
}

-(long long) navigationType {
	%orig;
	NSLog(@"-(long long) navigationType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setAppLink:(id) {
	%orig;
	NSLog(@"-(void) setAppLink:(id)");
}

-(id) appLink {
	%orig;
	NSLog(@"-(id) appLink");
}

%end

%hook BFAppLink

+(id) appLinkWithSourceURL:(id) targets:(id) webURL:(id) isBackToReferrer:(bool) {
	%orig;
	NSLog(@"+(id) appLinkWithSourceURL:(id) targets:(id) webURL:(id) isBackToReferrer:(bool)");
}

+(id) appLinkWithSourceURL:(id) targets:(id) webURL:(id) {
	%orig;
	NSLog(@"+(id) appLinkWithSourceURL:(id) targets:(id) webURL:(id)");
}

-(id) initWithIsBackToReferrer:(bool) {
	%orig;
	NSLog(@"-(id) initWithIsBackToReferrer:(bool)");
}

-(bool) isBackToReferrer {
	%orig;
	NSLog(@"-(bool) isBackToReferrer");
}

-(void) setBackToReferrer:(bool) {
	%orig;
	NSLog(@"-(void) setBackToReferrer:(bool)");
}

-(id) webURL {
	%orig;
	NSLog(@"-(id) webURL");
}

-(void) setSourceURL:(id) {
	%orig;
	NSLog(@"-(void) setSourceURL:(id)");
}

-(id) sourceURL {
	%orig;
	NSLog(@"-(id) sourceURL");
}

-(void) setWebURL:(id) {
	%orig;
	NSLog(@"-(void) setWebURL:(id)");
}

-(void) setTargets:(id) {
	%orig;
	NSLog(@"-(void) setTargets:(id)");
}

-(id) targets {
	%orig;
	NSLog(@"-(id) targets");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook URLFileProvider

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMEditableArtistAudioMessage

-(id) initWithJson:(id) {
	%orig;
	NSLog(@"-(id) initWithJson:(id)");
}

-(id) toJSONWithIsDraft:(bool) {
	%orig;
	NSLog(@"-(id) toJSONWithIsDraft:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook PMLevel2FullscreenModalTransition

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingInfoCenterMusicObserver

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionBufferStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionBufferStateDidChangeTo:(bool)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) startUpdates {
	%orig;
	NSLog(@"-(void) startUpdates");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMClipboardHandler

+(id) readAndRemoveDeferredDeepLinkFromClipboard {
	%orig;
	NSLog(@"+(id) readAndRemoveDeferredDeepLinkFromClipboard");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMNowPlayingNonPremiumProgressBarViewModel

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) updateProgressBarBufferingState {
	%orig;
	NSLog(@"-(void) updateProgressBarBufferingState");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook VoiceWakeWordListener

+(id) shared {
	%orig;
	NSLog(@"+(id) shared");
}

-(void) headUnitConnectedWithNotification:(id) {
	%orig;
	NSLog(@"-(void) headUnitConnectedWithNotification:(id)");
}

-(void) headUnitDisconnectedWithNotification:(id) {
	%orig;
	NSLog(@"-(void) headUnitDisconnectedWithNotification:(id)");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(void) handleOfflineChangeWithNotification:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineChangeWithNotification:(id)");
}

-(void) appContextChangedWithNotification:(id) {
	%orig;
	NSLog(@"-(void) appContextChangedWithNotification:(id)");
}

-(void) startObservingAppContext {
	%orig;
	NSLog(@"-(void) startObservingAppContext");
}

-(id) defaultWakeWordCallback {
	%orig;
	NSLog(@"-(id) defaultWakeWordCallback");
}

-(bool) startListeningIfNeededWithWakeWordCallback:(id) {
	%orig;
	NSLog(@"-(bool) startListeningIfNeededWithWakeWordCallback:(id)");
}

-(void) stopListening {
	%orig;
	NSLog(@"-(void) stopListening");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMStyle

+(CGSize) nowPlayingGaussainBlurResizeSize {
	%orig;
	NSLog(@"+(CGSize) nowPlayingGaussainBlurResizeSize");
}

+(double) nowPlayingGaussainBlurRadius {
	%orig;
	NSLog(@"+(double) nowPlayingGaussainBlurRadius");
}

+(double) offlineHeaderHeightUnifiedNonPremium {
	%orig;
	NSLog(@"+(double) offlineHeaderHeightUnifiedNonPremium");
}

+(double) offlineHeaderHeightNonPremium {
	%orig;
	NSLog(@"+(double) offlineHeaderHeightNonPremium");
}

+(double) nowPlayingNonPremiumMiniPlayerHeight {
	%orig;
	NSLog(@"+(double) nowPlayingNonPremiumMiniPlayerHeight");
}

+(double) slapBraceletHeight {
	%orig;
	NSLog(@"+(double) slapBraceletHeight");
}

+(double) regularWidthSizeClassMargin {
	%orig;
	NSLog(@"+(double) regularWidthSizeClassMargin");
}

+(double) navigationButtonSize {
	%orig;
	NSLog(@"+(double) navigationButtonSize");
}

+(double) calloutHeight {
	%orig;
	NSLog(@"+(double) calloutHeight");
}

+(bool) settingsTableViewCellPreservesSuperviewLayoutMargins {
	%orig;
	NSLog(@"+(bool) settingsTableViewCellPreservesSuperviewLayoutMargins");
}

+(double) offlineHeaderHeightPremium {
	%orig;
	NSLog(@"+(double) offlineHeaderHeightPremium");
}

+(double) bottomNavMiniPlayerHeight {
	%orig;
	NSLog(@"+(double) bottomNavMiniPlayerHeight");
}

+(double) nowPlayingProgressBarDurationLabelTrackHistoryBottomMargin {
	%orig;
	NSLog(@"+(double) nowPlayingProgressBarDurationLabelTrackHistoryBottomMargin");
}

+(double) marginS {
	%orig;
	NSLog(@"+(double) marginS");
}

+(double) marginM {
	%orig;
	NSLog(@"+(double) marginM");
}

+(double) subtitleAlpha {
	%orig;
	NSLog(@"+(double) subtitleAlpha");
}

+(double) bottomNavMiniPlayerArtSize {
	%orig;
	NSLog(@"+(double) bottomNavMiniPlayerArtSize");
}

+(double) marginXS {
	%orig;
	NSLog(@"+(double) marginXS");
}

+(double) featuredTrackMargin {
	%orig;
	NSLog(@"+(double) featuredTrackMargin");
}

+(double) discoveryTunerButtonHeight {
	%orig;
	NSLog(@"+(double) discoveryTunerButtonHeight");
}

+(double) separatorHeight {
	%orig;
	NSLog(@"+(double) separatorHeight");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook SuperBrowseTableViewDelegate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMFPSTracker

+(void) captureFPS:(unsigned long long) completed:(id) {
	%orig;
	NSLog(@"+(void) captureFPS:(unsigned long long) completed:(id)");
}

-(void) screenRefreshed:(id) {
	%orig;
	NSLog(@"-(void) screenRefreshed:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSourceCardDataSource

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMSMCCoachMarkManager

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(void) handleProductUpgrade:(id) {
	%orig;
	NSLog(@"-(void) handleProductUpgrade:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook FirstIntroActionHandler

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMOnlineStationsCollectionViewDataSource

-(long long) countForNonQuickMix {
	%orig;
	NSLog(@"-(long long) countForNonQuickMix");
}

-(long long) numberOfSectionsForNonQuickMix {
	%orig;
	NSLog(@"-(long long) numberOfSectionsForNonQuickMix");
}

-(void) updateFetchForNonQuickMix:(long long) {
	%orig;
	NSLog(@"-(void) updateFetchForNonQuickMix:(long long)");
}

-(id) getNonQuickMixChangesetForSortType:(long long) {
	%orig;
	NSLog(@"-(id) getNonQuickMixChangesetForSortType:(long long)");
}

-(long long) nonQuickMixSectionWithSectionName:(id) {
	%orig;
	NSLog(@"-(long long) nonQuickMixSectionWithSectionName:(id)");
}

-(bool) isSectionForUserStationsNonQuickMix:(long long) {
	%orig;
	NSLog(@"-(bool) isSectionForUserStationsNonQuickMix:(long long)");
}

-(long long) countForNonQuickMixAtSection:(long long) {
	%orig;
	NSLog(@"-(long long) countForNonQuickMixAtSection:(long long)");
}

-(id) sectionNameForNonQuickMixAtSection:(long long) {
	%orig;
	NSLog(@"-(id) sectionNameForNonQuickMixAtSection:(long long)");
}

-(long long) countForQuickMix {
	%orig;
	NSLog(@"-(long long) countForQuickMix");
}

-(id) collectedStationBaseModelAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectedStationBaseModelAtIndexPath:(id)");
}

-(void) pauseUIUpdate {
	%orig;
	NSLog(@"-(void) pauseUIUpdate");
}

-(void) stopUpdating {
	%orig;
	NSLog(@"-(void) stopUpdating");
}

-(void) startUpdating {
	%orig;
	NSLog(@"-(void) startUpdating");
}

-(id) initWithDelegate:(id) fetchBatchSize:(long long) aCollectionMOCSyncCoordinator:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) fetchBatchSize:(long long) aCollectionMOCSyncCoordinator:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMServableValueExchangeAdapter

-(id) advertisingController {
	%orig;
	NSLog(@"-(id) advertisingController");
}

-(void) updateRewardPropertiesWithUpdatedProperties:(id) {
	%orig;
	NSLog(@"-(void) updateRewardPropertiesWithUpdatedProperties:(id)");
}

-(double) enforcementProgressThreshold {
	%orig;
	NSLog(@"-(double) enforcementProgressThreshold");
}

-(id) validAdIdentifiers {
	%orig;
	NSLog(@"-(id) validAdIdentifiers");
}

-(id) reward {
	%orig;
	NSLog(@"-(id) reward");
}

-(void) setReward:(id) {
	%orig;
	NSLog(@"-(void) setReward:(id)");
}

-(id) rewardProperties {
	%orig;
	NSLog(@"-(id) rewardProperties");
}

-(void) setRewardProperties:(id) {
	%orig;
	NSLog(@"-(void) setRewardProperties:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMBatteryTracker

+(id) prodCatastrophicSpikeBatteryTracker:(id) {
	%orig;
	NSLog(@"+(id) prodCatastrophicSpikeBatteryTracker:(id)");
}

+(id) prodMinorSpikeBatteryTracker:(id) {
	%orig;
	NSLog(@"+(id) prodMinorSpikeBatteryTracker:(id)");
}

+(id) debugCatastrophicSpikeBatteryTracker:(id) {
	%orig;
	NSLog(@"+(id) debugCatastrophicSpikeBatteryTracker:(id)");
}

+(id) debugMinorSpikeBatteryTracker:(id) {
	%orig;
	NSLog(@"+(id) debugMinorSpikeBatteryTracker:(id)");
}

-(id) spikeThresholdKey {
	%orig;
	NSLog(@"-(id) spikeThresholdKey");
}

-(void) checkBattery {
	%orig;
	NSLog(@"-(void) checkBattery");
}

-(void) startTracking {
	%orig;
	NSLog(@"-(void) startTracking");
}

-(void) stopTracking {
	%orig;
	NSLog(@"-(void) stopTracking");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMFadeInOutGenericTransition

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(void) animationEnded:(bool) {
	%orig;
	NSLog(@"-(void) animationEnded:(bool)");
}

%end

%hook PMNowPlayingMenuBarTrackViewModel

+(id) modelForTrack:(id) {
	%orig;
	NSLog(@"+(id) modelForTrack:(id)");
}

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(void) bookmarkTrack {
	%orig;
	NSLog(@"-(void) bookmarkTrack");
}

-(bool) isShareable {
	%orig;
	NSLog(@"-(bool) isShareable");
}

-(bool) isNativeShareable {
	%orig;
	NSLog(@"-(bool) isNativeShareable");
}

-(bool) isBookmarkable {
	%orig;
	NSLog(@"-(bool) isBookmarkable");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) shareableItem {
	%orig;
	NSLog(@"-(id) shareableItem");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingMenuBarArtistMessageTrackViewModel

-(bool) isShareable {
	%orig;
	NSLog(@"-(bool) isShareable");
}

-(bool) isNativeShareable {
	%orig;
	NSLog(@"-(bool) isNativeShareable");
}

-(id) shareableItem {
	%orig;
	NSLog(@"-(id) shareableItem");
}

%end

%hook PMHapticHandler

-(void) notify:(long long) shouldPrepareAfter:(bool) {
	%orig;
	NSLog(@"-(void) notify:(long long) shouldPrepareAfter:(bool)");
}

-(void) impact:(long long) shouldPrepareAfter:(bool) {
	%orig;
	NSLog(@"-(void) impact:(long long) shouldPrepareAfter:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook FirstIntroLTUXRouter

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingNonPremiumTunerBarViewModel

-(id) statsCallTextForView:(id) {
	%orig;
	NSLog(@"-(id) statsCallTextForView:(id)");
}

-(id) clickThroughBlockForSharingStation {
	%orig;
	NSLog(@"-(id) clickThroughBlockForSharingStation");
}

-(id) clickThroughBlockForAddVariety {
	%orig;
	NSLog(@"-(id) clickThroughBlockForAddVariety");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) updatePlayControls {
	%orig;
	NSLog(@"-(void) updatePlayControls");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMADDFPBannerRequest

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook EchoCancelingAudioRecorder

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMApplicationBackgroundFetch

+(void) fetchWhileAppIsDormantWithIsPlaying:(bool) isOffline:(bool) applicationState:(long long) service:(id) completion:(id) {
	%orig;
	NSLog(@"+(void) fetchWhileAppIsDormantWithIsPlaying:(bool) isOffline:(bool) applicationState:(long long) service:(id) completion:(id)");
}

-(id) initWith:(id) in:(?) {
	%orig;
	NSLog(@"-(id) initWith:(id) in:(?)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook FirstIntroFTUXWelcomeViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook VoiceModeMiniCalloutUtil

+(bool) shouldShowVoiceModeCalloutWithDefaultContext {
	%orig;
	NSLog(@"+(bool) shouldShowVoiceModeCalloutWithDefaultContext");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook BrowseNewPodcastViewModel

-(void) logBrowseImpressionAt:(id) isCellOnScreen:(bool) {
	%orig;
	NSLog(@"-(void) logBrowseImpressionAt:(id) isCellOnScreen:(bool)");
}

-(void) logBrowseSelectWith:(id) indexPath:(id) {
	%orig;
	NSLog(@"-(void) logBrowseSelectWith:(id) indexPath:(id)");
}

-(id) statsViewMode {
	%orig;
	NSLog(@"-(id) statsViewMode");
}

-(bool) nativeCollectedStationsEnabled {
	%orig;
	NSLog(@"-(bool) nativeCollectedStationsEnabled");
}

-(void) fetchNewData {
	%orig;
	NSLog(@"-(void) fetchNewData");
}

-(void) updateFetchedResultsControllers {
	%orig;
	NSLog(@"-(void) updateFetchedResultsControllers");
}

-(void) stopUpdatingFetchedResultsControllers {
	%orig;
	NSLog(@"-(void) stopUpdatingFetchedResultsControllers");
}

-(void) fetchNewReleasesFor:(long long) {
	%orig;
	NSLog(@"-(void) fetchNewReleasesFor:(long long)");
}

-(long long) numberOfSectionsForNewContent {
	%orig;
	NSLog(@"-(long long) numberOfSectionsForNewContent");
}

-(long long) countForNewSourcesIn:(long long) {
	%orig;
	NSLog(@"-(long long) countForNewSourcesIn:(long long)");
}

-(id) browseBannerData {
	%orig;
	NSLog(@"-(id) browseBannerData");
}

-(id) getBrowseSourceAt:(id) {
	%orig;
	NSLog(@"-(id) getBrowseSourceAt:(id)");
}

-(id) sectionTitleFor:(id) {
	%orig;
	NSLog(@"-(id) sectionTitleFor:(id)");
}

-(bool) canFetchNewPageFor:(long long) {
	%orig;
	NSLog(@"-(bool) canFetchNewPageFor:(long long)");
}

-(bool) hasFetchedNewPage {
	%orig;
	NSLog(@"-(bool) hasFetchedNewPage");
}

-(bool) isPremium {
	%orig;
	NSLog(@"-(bool) isPremium");
}

-(void) browseManagerDidRefreshNewPodcastModules:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshNewPodcastModules:(id)");
}

-(void) browseManagerDidFailToRefreshNewPodcastModules {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshNewPodcastModules");
}

-(void) setupObserver {
	%orig;
	NSLog(@"-(void) setupObserver");
}

-(id) init:(id) {
	%orig;
	NSLog(@"-(id) init:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PMBrowseNewPodcastViewModelBuilder

-(id) initWithBrowseManager:(id) collectionMOCSyncCoordinator:(id) statCollector:(?) batchSize:(id) {
	%orig;
	NSLog(@"-(id) initWithBrowseManager:(id) collectionMOCSyncCoordinator:(id) statCollector:(?) batchSize:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMStationCatalogEditChangeApplier

-(id) initWithStationModel:(id) editChangeModel:(id) mocForSaving:(id) {
	%orig;
	NSLog(@"-(id) initWithStationModel:(id) editChangeModel:(id) mocForSaving:(id)");
}

-(void) deleteStationWithCancelCompletion:(id) completion:(?) {
	%orig;
	NSLog(@"-(void) deleteStationWithCancelCompletion:(id) completion:(?)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAllYourArtistsViewModel

-(id) initWithArtistReps:(id) {
	%orig;
	NSLog(@"-(id) initWithArtistReps:(id)");
}

-(id) artistAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) artistAtIndexPath:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) numberOfRows {
	%orig;
	NSLog(@"-(long long) numberOfRows");
}

-(long long) numberOfSections {
	%orig;
	NSLog(@"-(long long) numberOfSections");
}

%end

%hook PMGoogleCastDiscovery

-(void) didUpdateDeviceList {
	%orig;
	NSLog(@"-(void) didUpdateDeviceList");
}

-(void) didInsertDevice:(id) atIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) didInsertDevice:(id) atIndex:(unsigned long long)");
}

-(void) didUpdateDevice:(id) atIndex:(unsigned long long) andMoveToIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) didUpdateDevice:(id) atIndex:(unsigned long long) andMoveToIndex:(unsigned long long)");
}

-(void) didRemoveDeviceAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) didRemoveDeviceAtIndex:(unsigned long long)");
}

-(void) clearDeviceList {
	%orig;
	NSLog(@"-(void) clearDeviceList");
}

-(void) startScan {
	%orig;
	NSLog(@"-(void) startScan");
}

-(id) devices {
	%orig;
	NSLog(@"-(id) devices");
}

-(void) stopScan {
	%orig;
	NSLog(@"-(void) stopScan");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook VASTTrackingResolver

-(id) updateWithUrls:(id) {
	%orig;
	NSLog(@"-(id) updateWithUrls:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PremiumNowPlayingNavigationBarViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNavigationManager

+(id) defaultNavigationManager {
	%orig;
	NSLog(@"+(id) defaultNavigationManager");
}

+(id) kPMNavigationManagerSourceTypeBrowse {
	%orig;
	NSLog(@"+(id) kPMNavigationManagerSourceTypeBrowse");
}

+(id) kPMNavigationManagerSourceTypeNowPlaying {
	%orig;
	NSLog(@"+(id) kPMNavigationManagerSourceTypeNowPlaying");
}

-(void) dismissVoiceModeUIWithAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissVoiceModeUIWithAnimated:(bool) completion:(id)");
}

-(void) showDebugMenuWithAdUnitId:(id) {
	%orig;
	NSLog(@"-(void) showDebugMenuWithAdUnitId:(id)");
}

-(void) sharer:(id) didCompleteWithResults:(id) {
	%orig;
	NSLog(@"-(void) sharer:(id) didCompleteWithResults:(id)");
}

-(void) sharer:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) sharer:(id) didFailWithError:(id)");
}

-(void) sharerDidCancel:(id) {
	%orig;
	NSLog(@"-(void) sharerDidCancel:(id)");
}

-(void) messageComposeViewController:(id) didFinishWithResult:(long long) {
	%orig;
	NSLog(@"-(void) messageComposeViewController:(id) didFinishWithResult:(long long)");
}

-(void) updateDrawerGesture:(id) navigationController:(id) {
	%orig;
	NSLog(@"-(void) updateDrawerGesture:(id) navigationController:(id)");
}

-(void) didSelectCancel {
	%orig;
	NSLog(@"-(void) didSelectCancel");
}

-(unsigned long long) navigationControllerSupportedInterfaceOrientations:(id) {
	%orig;
	NSLog(@"-(unsigned long long) navigationControllerSupportedInterfaceOrientations:(id)");
}

-(long long) navigationControllerPreferredInterfaceOrientationForPresentation:(id) {
	%orig;
	NSLog(@"-(long long) navigationControllerPreferredInterfaceOrientationForPresentation:(id)");
}

-(void) shortenUrlAndNavigateToNativeShareWithModel:(id) source:(id) presentingLayoutView:(id) sourceRect:(id) permittedArrowDirections:(unsigned long long) {
	%orig;
	NSLog(@"-(void) shortenUrlAndNavigateToNativeShareWithModel:(id) source:(id) presentingLayoutView:(id) sourceRect:(id) permittedArrowDirections:(unsigned long long)");
}

-(void) navigateToFeed {
	%orig;
	NSLog(@"-(void) navigateToFeed");
}

-(void) navigateToCurrentProfile {
	%orig;
	NSLog(@"-(void) navigateToCurrentProfile");
}

-(bool) shouldDisplayPremiumUI {
	%orig;
	NSLog(@"-(bool) shouldDisplayPremiumUI");
}

-(id) navigateToStationCatalog:(id) navigationController:(id) source:(id) {
	%orig;
	NSLog(@"-(id) navigateToStationCatalog:(id) navigationController:(id) source:(id)");
}

-(bool) isShowingVoiceModeUI {
	%orig;
	NSLog(@"-(bool) isShowingVoiceModeUI");
}

-(bool) isStationListTopViewControllerVisible {
	%orig;
	NSLog(@"-(bool) isStationListTopViewControllerVisible");
}

-(id) initWithOfflineManager:(id) onDemandManager:(id) subscriptionManager:(id) {
	%orig;
	NSLog(@"-(id) initWithOfflineManager:(id) onDemandManager:(id) subscriptionManager:(id)");
}

-(void) rebuildNavigationControllers {
	%orig;
	NSLog(@"-(void) rebuildNavigationControllers");
}

-(long long) indexForMenuItem:(long long) {
	%orig;
	NSLog(@"-(long long) indexForMenuItem:(long long)");
}

-(id) navigationControllerForMenuItem:(long long) {
	%orig;
	NSLog(@"-(id) navigationControllerForMenuItem:(long long)");
}

-(long long) getOfflineMenuItemType:(long long) {
	%orig;
	NSLog(@"-(long long) getOfflineMenuItemType:(long long)");
}

-(id) getNavigationControllers {
	%orig;
	NSLog(@"-(id) getNavigationControllers");
}

-(id) getOfflineNavigationControllers {
	%orig;
	NSLog(@"-(id) getOfflineNavigationControllers");
}

-(void) navigateToDefault {
	%orig;
	NSLog(@"-(void) navigateToDefault");
}

-(void) navigateToCollection {
	%orig;
	NSLog(@"-(void) navigateToCollection");
}

-(bool) shouldOpenPreviewCards {
	%orig;
	NSLog(@"-(bool) shouldOpenPreviewCards");
}

-(void) navigateToSearch {
	%orig;
	NSLog(@"-(void) navigateToSearch");
}

-(id) viewControllerForMenuItem:(long long) {
	%orig;
	NSLog(@"-(id) viewControllerForMenuItem:(long long)");
}

-(void) popSearchController:(bool) {
	%orig;
	NSLog(@"-(void) popSearchController:(bool)");
}

-(id) offlineNavigationControllerForMenuItem:(long long) {
	%orig;
	NSLog(@"-(id) offlineNavigationControllerForMenuItem:(long long)");
}

-(id) offlineViewControllerForMenuItem:(long long) {
	%orig;
	NSLog(@"-(id) offlineViewControllerForMenuItem:(long long)");
}

-(id) menuItemsFromNavigationControllers {
	%orig;
	NSLog(@"-(id) menuItemsFromNavigationControllers");
}

-(void) userSubscriptionStateDidChange {
	%orig;
	NSLog(@"-(void) userSubscriptionStateDidChange");
}

-(bool) isAdSupportedListener {
	%orig;
	NSLog(@"-(bool) isAdSupportedListener");
}

-(bool) shouldOpenNativePage:(id) {
	%orig;
	NSLog(@"-(bool) shouldOpenNativePage:(id)");
}

-(id) navigateToStationCatalogByStationId:(id) destination:(long long) navigationController:(id) source:(id) {
	%orig;
	NSLog(@"-(id) navigateToStationCatalogByStationId:(id) destination:(long long) navigationController:(id) source:(id)");
}

-(void) navigateToCatalogByPandoraTypeValue:(id) pandoraId:(id) destination:(long long) navigationController:(id) source:(id) collectStationsBeforeNavigation:(bool) {
	%orig;
	NSLog(@"-(void) navigateToCatalogByPandoraTypeValue:(id) pandoraId:(id) destination:(long long) navigationController:(id) source:(id) collectStationsBeforeNavigation:(bool)");
}

-(id) navigateToCatalogByPandoraTypeValue:(id) pandoraId:(id) navigationController:(id) source:(id) {
	%orig;
	NSLog(@"-(id) navigateToCatalogByPandoraTypeValue:(id) pandoraId:(id) navigationController:(id) source:(id)");
}

-(void) navigateToMyPodcasts {
	%orig;
	NSLog(@"-(void) navigateToMyPodcasts");
}

-(void) navigateToThumpbrintDetails:(id) {
	%orig;
	NSLog(@"-(void) navigateToThumpbrintDetails:(id)");
}

-(void) navigateToRecommendedPodcasts {
	%orig;
	NSLog(@"-(void) navigateToRecommendedPodcasts");
}

-(void) navigateToSearchWithTabMode:(long long) searchContextId:(id) animated:(bool) resultsDelegate:(id) {
	%orig;
	NSLog(@"-(void) navigateToSearchWithTabMode:(long long) searchContextId:(id) animated:(bool) resultsDelegate:(id)");
}

-(void) navigateToUserWithWebname:(id) {
	%orig;
	NSLog(@"-(void) navigateToUserWithWebname:(id)");
}

-(void) presentVoiceModeUIWithSource:(long long) {
	%orig;
	NSLog(@"-(void) presentVoiceModeUIWithSource:(long long)");
}

-(void) dismissSourceCardWithAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissSourceCardWithAnimated:(bool) completion:(id)");
}

-(void) updateBottomNavigationVisibility {
	%orig;
	NSLog(@"-(void) updateBottomNavigationVisibility");
}

-(void) presentViewController:(id) animated:(bool) priority:(unsigned long long) {
	%orig;
	NSLog(@"-(void) presentViewController:(id) animated:(bool) priority:(unsigned long long)");
}

-(void) navigateToDiscovery {
	%orig;
	NSLog(@"-(void) navigateToDiscovery");
}

-(void) presentFirstIntroductionLTUX {
	%orig;
	NSLog(@"-(void) presentFirstIntroductionLTUX");
}

-(void) navigateToTransientSearch {
	%orig;
	NSLog(@"-(void) navigateToTransientSearch");
}

-(void) navigateToSearchWithKeyword:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) navigateToSearchWithKeyword:(id) animated:(bool)");
}

-(void) navigateToBottomItemWithItem:(long long) {
	%orig;
	NSLog(@"-(void) navigateToBottomItemWithItem:(long long)");
}

-(void) resetNavigationStackWithItem:(long long) {
	%orig;
	NSLog(@"-(void) resetNavigationStackWithItem:(long long)");
}

-(void) resetScrollPositionWithItem:(long long) {
	%orig;
	NSLog(@"-(void) resetScrollPositionWithItem:(long long)");
}

-(void) legacyNavigateToBrowse {
	%orig;
	NSLog(@"-(void) legacyNavigateToBrowse");
}

-(void) navigateToMyRecentPodcasts {
	%orig;
	NSLog(@"-(void) navigateToMyRecentPodcasts");
}

-(void) navigateToSeeAllCollectedPodcasts {
	%orig;
	NSLog(@"-(void) navigateToSeeAllCollectedPodcasts");
}

-(void) legacyNavigateToDefault {
	%orig;
	NSLog(@"-(void) legacyNavigateToDefault");
}

-(void) handleNavigateToModelNotification:(id) {
	%orig;
	NSLog(@"-(void) handleNavigateToModelNotification:(id)");
}

-(void) handleNavigateToStationByStationId:(id) {
	%orig;
	NSLog(@"-(void) handleNavigateToStationByStationId:(id)");
}

-(void) resetSearchQuery:(id) {
	%orig;
	NSLog(@"-(void) resetSearchQuery:(id)");
}

-(bool) shouldHideUpgradeInNavMenu {
	%orig;
	NSLog(@"-(bool) shouldHideUpgradeInNavMenu");
}

-(void) prunePremiumSearchViewControllerFromNavStack {
	%orig;
	NSLog(@"-(void) prunePremiumSearchViewControllerFromNavStack");
}

-(void) navigateToShuffleEditor {
	%orig;
	NSLog(@"-(void) navigateToShuffleEditor");
}

-(void) subscriptionUpgradeDidCompleteWithNotification:(id) {
	%orig;
	NSLog(@"-(void) subscriptionUpgradeDidCompleteWithNotification:(id)");
}

-(void) audioOverRadioDidStartPlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidStartPlaying:(id)");
}

-(void) audioOverRadioDidPausePlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidPausePlaying:(id)");
}

-(void) audioOverRadioDidFinishPlaying:(id) success:(bool) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidFinishPlaying:(id) success:(bool)");
}

-(id) selectedNavigationController {
	%orig;
	NSLog(@"-(id) selectedNavigationController");
}

-(id) searchViewController {
	%orig;
	NSLog(@"-(id) searchViewController");
}

-(void) setSearchViewController:(id) {
	%orig;
	NSLog(@"-(void) setSearchViewController:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingInfoCenterDataSource

+(id) defaultDataSource {
	%orig;
	NSLog(@"+(id) defaultDataSource");
}

-(void) updateWithRadio:(id) {
	%orig;
	NSLog(@"-(void) updateWithRadio:(id)");
}

-(void) updateWithPlaylistTrack:(id) playing:(bool) buffering:(bool) {
	%orig;
	NSLog(@"-(void) updateWithPlaylistTrack:(id) playing:(bool) buffering:(bool)");
}

-(void) updateWithTrack:(id) {
	%orig;
	NSLog(@"-(void) updateWithTrack:(id)");
}

-(void) showMessage:(id) withTitle:(id) {
	%orig;
	NSLog(@"-(void) showMessage:(id) withTitle:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) clear {
	%orig;
	NSLog(@"-(void) clear");
}

%end

%hook GoogleCastSession

-(void) requestDidComplete:(id) {
	%orig;
	NSLog(@"-(void) requestDidComplete:(id)");
}

-(void) request:(id) didAbortWithReason:(long long) {
	%orig;
	NSLog(@"-(void) request:(id) didAbortWithReason:(long long)");
}

-(void) request:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) request:(id) didFailWithError:(id)");
}

-(void) castChannel:(id) didReceiveTextMessage:(id) withNamespace:(id) {
	%orig;
	NSLog(@"-(void) castChannel:(id) didReceiveTextMessage:(id) withNamespace:(id)");
}

-(void) remoteMediaClient:(id) didUpdateMediaStatus:(id) {
	%orig;
	NSLog(@"-(void) remoteMediaClient:(id) didUpdateMediaStatus:(id)");
}

-(void) remoteMediaClient:(id) didUpdateMediaMetadata:(id) {
	%orig;
	NSLog(@"-(void) remoteMediaClient:(id) didUpdateMediaMetadata:(id)");
}

-(void) sessionManager:(id) didStartSession:(id) {
	%orig;
	NSLog(@"-(void) sessionManager:(id) didStartSession:(id)");
}

-(void) sessionManager:(id) didStartCastSession:(id) {
	%orig;
	NSLog(@"-(void) sessionManager:(id) didStartCastSession:(id)");
}

-(void) sessionManager:(id) didEndSession:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) sessionManager:(id) didEndSession:(id) withError:(id)");
}

-(void) sessionManager:(id) didFailToStartSession:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) sessionManager:(id) didFailToStartSession:(id) withError:(id)");
}

-(void) sessionManager:(id) didFailToStartCastSession:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) sessionManager:(id) didFailToStartCastSession:(id) withError:(id)");
}

-(void) sessionManager:(id) didResumeCastSession:(id) {
	%orig;
	NSLog(@"-(void) sessionManager:(id) didResumeCastSession:(id)");
}

-(void) sessionManager:(id) castSession:(id) didReceiveDeviceVolume:(float) muted:(bool) {
	%orig;
	NSLog(@"-(void) sessionManager:(id) castSession:(id) didReceiveDeviceVolume:(float) muted:(bool)");
}

-(void) startPlaylist:(id) withContentInfo:(id) {
	%orig;
	NSLog(@"-(void) startPlaylist:(id) withContentInfo:(id)");
}

-(void) startStation:(id) withContentInfo:(id) forTrack:(id) {
	%orig;
	NSLog(@"-(void) startStation:(id) withContentInfo:(id) forTrack:(id)");
}

-(void) sendCommand:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) sendCommand:(id) withData:(id)");
}

-(void) closeSessionWithCloseApp:(bool) {
	%orig;
	NSLog(@"-(void) closeSessionWithCloseApp:(bool)");
}

-(bool) requestSessionStatus {
	%orig;
	NSLog(@"-(bool) requestSessionStatus");
}

-(void) requestMediaStatus {
	%orig;
	NSLog(@"-(void) requestMediaStatus");
}

-(void) notifyEnteringBackground {
	%orig;
	NSLog(@"-(void) notifyEnteringBackground");
}

-(void) startAlbum:(id) withContentInfo:(id) atTrack:(id) {
	%orig;
	NSLog(@"-(void) startAlbum:(id) withContentInfo:(id) atTrack:(id)");
}

-(void) seekWithElapsedTime:(double) {
	%orig;
	NSLog(@"-(void) seekWithElapsedTime:(double)");
}

-(void) sendCommand:(id) {
	%orig;
	NSLog(@"-(void) sendCommand:(id)");
}

-(void) skip {
	%orig;
	NSLog(@"-(void) skip");
}

-(bool) isActive {
	%orig;
	NSLog(@"-(bool) isActive");
}

-(void) open {
	%orig;
	NSLog(@"-(void) open");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

-(void) handleRequestSessionStatusTimer:(id) {
	%orig;
	NSLog(@"-(void) handleRequestSessionStatusTimer:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setVolume:(double) {
	%orig;
	NSLog(@"-(void) setVolume:(double)");
}

-(double) volume {
	%orig;
	NSLog(@"-(double) volume");
}

%end

%hook CastAlertHandler

-(bool) isDisplayingReconnectDialog {
	%orig;
	NSLog(@"-(bool) isDisplayingReconnectDialog");
}

-(void) displayMessageFor:(long long) device:(id) {
	%orig;
	NSLog(@"-(void) displayMessageFor:(long long) device:(id)");
}

-(void) displayReconnectDialog:(id) cancelAction:(id) {
	%orig;
	NSLog(@"-(void) displayReconnectDialog:(id) cancelAction:(id)");
}

-(void) dismissReconnectDialog:(id) {
	%orig;
	NSLog(@"-(void) dismissReconnectDialog:(id)");
}

-(void) displayReconnectFailedDialog:(id) {
	%orig;
	NSLog(@"-(void) displayReconnectFailedDialog:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook IOSAccountInfoProvider

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAutomationPrelaunch

+(void) setupWith:(id) fileManager:(id) {
	%orig;
	NSLog(@"+(void) setupWith:(id) fileManager:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdShareActivityItem

-(id) activityViewControllerPlaceholderItem:(id) {
	%orig;
	NSLog(@"-(id) activityViewControllerPlaceholderItem:(id)");
}

-(id) activityViewController:(id) itemForActivityType:(id) {
	%orig;
	NSLog(@"-(id) activityViewController:(id) itemForActivityType:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CoachmarkAdCommand

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMPersonalizedPlaylistManager

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSpotlightService

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(void) handleItemSelectedWithPandoraId:(id) {
	%orig;
	NSLog(@"-(void) handleItemSelectedWithPandoraId:(id)");
}

-(id) initWithIndexContext:(id) selectionContext:(id) musicSessionManager:(id) statsCollector:(?) imageCache:(id) {
	%orig;
	NSLog(@"-(id) initWithIndexContext:(id) selectionContext:(id) musicSessionManager:(id) statsCollector:(?) imageCache:(id)");
}

-(void) clearIndex {
	%orig;
	NSLog(@"-(void) clearIndex");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook PMPlaylistCatalogEditChangeModel

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(bool) tableView:(id) canEditRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) tableView:(id) canEditRowAtIndexPath:(id)");
}

-(bool) tableView:(id) canMoveRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) tableView:(id) canMoveRowAtIndexPath:(id)");
}

-(void) tableView:(id) commitEditingStyle:(long long) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) commitEditingStyle:(long long) forRowAtIndexPath:(id)");
}

-(void) tableView:(id) moveRowAtIndexPath:(id) toIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) moveRowAtIndexPath:(id) toIndexPath:(id)");
}

-(void) viewModelManagedObjectContextDidSave:(id) {
	%orig;
	NSLog(@"-(void) viewModelManagedObjectContextDidSave:(id)");
}

-(void) dataInterfaceBackgroundManagedObjectContextDidSave:(id) {
	%orig;
	NSLog(@"-(void) dataInterfaceBackgroundManagedObjectContextDidSave:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAppBackgroundTaskManager

+(id) sharedTaskManager {
	%orig;
	NSLog(@"+(id) sharedTaskManager");
}

-(void) endTaskWithName:(id) key:(long long) {
	%orig;
	NSLog(@"-(void) endTaskWithName:(id) key:(long long)");
}

-(void) endAllTasks {
	%orig;
	NSLog(@"-(void) endAllTasks");
}

-(double) backgroundRemainingTime {
	%orig;
	NSLog(@"-(double) backgroundRemainingTime");
}

-(long long) beginTaskWithName:(id) completion:(id) {
	%orig;
	NSLog(@"-(long long) beginTaskWithName:(id) completion:(id)");
}

-(void) endTaskWithName:(id) {
	%orig;
	NSLog(@"-(void) endTaskWithName:(id)");
}

-(void) checkBackgroundTaskCompletionTime {
	%orig;
	NSLog(@"-(void) checkBackgroundTaskCompletionTime");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMShareableArtistMessageItem

-(id) completionEventFragment {
	%orig;
	NSLog(@"-(id) completionEventFragment");
}

-(id) shortLinkInContext:(id) {
	%orig;
	NSLog(@"-(id) shortLinkInContext:(id)");
}

-(id) messageFor:(id) {
	%orig;
	NSLog(@"-(id) messageFor:(id)");
}

-(id) subjectFor:(id) {
	%orig;
	NSLog(@"-(id) subjectFor:(id)");
}

-(id) shareItemId {
	%orig;
	NSLog(@"-(id) shareItemId");
}

-(void) setCompletionEventFragment:(id) {
	%orig;
	NSLog(@"-(void) setCompletionEventFragment:(id)");
}

-(bool) isEqualTo:(id) {
	%orig;
	NSLog(@"-(bool) isEqualTo:(id)");
}

-(id) thumbnailImageUrl {
	%orig;
	NSLog(@"-(id) thumbnailImageUrl");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook AudioAdAppearance

+(id) shared {
	%orig;
	NSLog(@"+(id) shared");
}

-(bool) shouldUseBlackBackgroundForPlayingAudioAd {
	%orig;
	NSLog(@"-(bool) shouldUseBlackBackgroundForPlayingAudioAd");
}

-(bool) shouldUseBlackBackground {
	%orig;
	NSLog(@"-(bool) shouldUseBlackBackground");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMUserCatalogViewModel

-(void) authorizeWillStart:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeWillStart:(long long) context:(id)");
}

-(void) authorizeDidEnd:(long long) success:(bool) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeDidEnd:(long long) success:(bool) context:(id)");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(id) getCarouselModelAt:(id) {
	%orig;
	NSLog(@"-(id) getCarouselModelAt:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SiriShortcutToastModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook DismissCoachmarkCommandResponder

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook AcceptInvitationCommandResponder

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PresentValueExchangeCommandResponder

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMLevel2ContainerTransitionDelegate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) animationControllerForPresentedController:(id) presentingController:(id) sourceController:(id) {
	%orig;
	NSLog(@"-(id) animationControllerForPresentedController:(id) presentingController:(id) sourceController:(id)");
}

-(id) animationControllerForDismissedController:(id) {
	%orig;
	NSLog(@"-(id) animationControllerForDismissedController:(id)");
}

%end

%hook PMClearButtonViewModel

-(id) accessibilityModel {
	%orig;
	NSLog(@"-(id) accessibilityModel");
}

-(id) statsAction {
	%orig;
	NSLog(@"-(id) statsAction");
}

-(void) setAccessibilityModel:(id) {
	%orig;
	NSLog(@"-(void) setAccessibilityModel:(id)");
}

-(void) setStatsAction:(id) {
	%orig;
	NSLog(@"-(void) setStatsAction:(id)");
}

-(id) initWithAccessibilityModel:(id) statsAction:(id) {
	%orig;
	NSLog(@"-(id) initWithAccessibilityModel:(id) statsAction:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook BrowseSourceCardPresenter

-(void) presentSourceCardWithCellData:(id) reason:(long long) {
	%orig;
	NSLog(@"-(void) presentSourceCardWithCellData:(id) reason:(long long)");
}

-(void) presentSourceCardWithCellData:(id) syncCoordinator:(id) reason:(long long) {
	%orig;
	NSLog(@"-(void) presentSourceCardWithCellData:(id) syncCoordinator:(id) reason:(long long)");
}

-(id) initWithNavigationManager:(id) {
	%orig;
	NSLog(@"-(id) initWithNavigationManager:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMInAppPurchaseManager

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(id) getPlusProduct {
	%orig;
	NSLog(@"-(id) getPlusProduct");
}

-(void) offerUpgradeWithProduct:(id) source:(id) tracking:(id) {
	%orig;
	NSLog(@"-(void) offerUpgradeWithProduct:(id) source:(id) tracking:(id)");
}

-(void) requestUpgradeWithProductInfo:(id) {
	%orig;
	NSLog(@"-(void) requestUpgradeWithProductInfo:(id)");
}

-(void) restoreSubscription {
	%orig;
	NSLog(@"-(void) restoreSubscription");
}

-(void) setupManager {
	%orig;
	NSLog(@"-(void) setupManager");
}

-(id) currentPendingPurchase {
	%orig;
	NSLog(@"-(id) currentPendingPurchase");
}

-(bool) isPurchasingProducts {
	%orig;
	NSLog(@"-(bool) isPurchasingProducts");
}

-(void) setIsPurchasingProducts:(bool) {
	%orig;
	NSLog(@"-(void) setIsPurchasingProducts:(bool)");
}

-(void) setCurrentPendingPurchase:(id) {
	%orig;
	NSLog(@"-(void) setCurrentPendingPurchase:(id)");
}

-(void) setAvailableProducts:(id) {
	%orig;
	NSLog(@"-(void) setAvailableProducts:(id)");
}

-(void) authenticationWasSuccessful:(id) {
	%orig;
	NSLog(@"-(void) authenticationWasSuccessful:(id)");
}

-(id) getPremiumProduct {
	%orig;
	NSLog(@"-(id) getPremiumProduct");
}

-(id) availableProducts {
	%orig;
	NSLog(@"-(id) availableProducts");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SpotlightItemDataSource

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook EQImageViewModel

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook APVAdRequest

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SourceWarningViewModel

+(id) premiumAccessOfflineAndDownloadWarningWithCallToActionCompletion:(id) {
	%orig;
	NSLog(@"+(id) premiumAccessOfflineAndDownloadWarningWithCallToActionCompletion:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook VoiceRouter

+(bool) voiceEnabled {
	%orig;
	NSLog(@"+(bool) voiceEnabled");
}

+(bool) keepScreenOn {
	%orig;
	NSLog(@"+(bool) keepScreenOn");
}

+(bool) voiceEnabledWithExposureLogging {
	%orig;
	NSLog(@"+(bool) voiceEnabledWithExposureLogging");
}

+(void) setKeepScreenOn:(bool) {
	%orig;
	NSLog(@"+(void) setKeepScreenOn:(bool)");
}

-(void) exitVoiceMode {
	%orig;
	NSLog(@"-(void) exitVoiceMode");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CoachmarkLauncherAdCommand

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CoachmarkLauncher

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandShowUpgrade

-(id) product {
	%orig;
	NSLog(@"-(id) product");
}

-(void) setProduct:(id) {
	%orig;
	NSLog(@"-(void) setProduct:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandLandingPageTitle

-(id) landingPageTitle {
	%orig;
	NSLog(@"-(id) landingPageTitle");
}

-(id) landingPageSubtitle {
	%orig;
	NSLog(@"-(id) landingPageSubtitle");
}

-(void) setLandingPageTitle:(id) {
	%orig;
	NSLog(@"-(void) setLandingPageTitle:(id)");
}

-(void) setLandingPageSubtitle:(id) {
	%orig;
	NSLog(@"-(void) setLandingPageSubtitle:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandShareUrl

-(id) shareUrl {
	%orig;
	NSLog(@"-(id) shareUrl");
}

-(void) setShareUrl:(id) {
	%orig;
	NSLog(@"-(void) setShareUrl:(id)");
}

-(bool) pandoraDesigned {
	%orig;
	NSLog(@"-(bool) pandoraDesigned");
}

-(void) setPandoraDesigned:(bool) {
	%orig;
	NSLog(@"-(void) setPandoraDesigned:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandFBAdDidClick

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandOpenL2Video

-(id) initWithL2Ad:(id) {
	%orig;
	NSLog(@"-(id) initWithL2Ad:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandPresentValueExchange

-(id) initWithValueExchangeMediator:(id) {
	%orig;
	NSLog(@"-(id) initWithValueExchangeMediator:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandReportAdMetaData

-(id) initWithMetaData:(id) {
	%orig;
	NSLog(@"-(id) initWithMetaData:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandValueExchangeListenerAcceptedInvitation

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandValueExchangeRewardWillStart

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandDismissSLAPBracelet

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandPresentSLAPView

-(id) initWithSlapAds:(id) {
	%orig;
	NSLog(@"-(id) initWithSlapAds:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandRequestsCloseButtonVisibility

-(id) initWithVisible:(bool) {
	%orig;
	NSLog(@"-(id) initWithVisible:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandOfferUpgrade

-(id) initWithProduct:(id) trackingInfo:(id) source:(id) {
	%orig;
	NSLog(@"-(id) initWithProduct:(id) trackingInfo:(id) source:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandPingImpressionURLs

-(id) initWithImpressionURLs:(id) {
	%orig;
	NSLog(@"-(id) initWithImpressionURLs:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandSetViewportHeight

-(id) initWithHeight:(double) completion:(id) {
	%orig;
	NSLog(@"-(id) initWithHeight:(double) completion:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setCompletion:(id) {
	%orig;
	NSLog(@"-(void) setCompletion:(id)");
}

-(id) completion {
	%orig;
	NSLog(@"-(id) completion");
}

%end

%hook PMAdCommandDisableVideoAdsUntilNextStationChange

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandSetContainerFullSize

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setCompletion:(id) {
	%orig;
	NSLog(@"-(void) setCompletion:(id)");
}

-(id) completion {
	%orig;
	NSLog(@"-(id) completion");
}

%end

%hook PMAdCommandShowActionViewController

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandResumeVideoPlay

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandShareCurrentAd

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandAdjustVideoContainerSize

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandToggleVideoFullScreen

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandPushToLandingPage

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandShowL2BottomNotificationForPreVerticalVideo

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandShowL2BottomNotificationForVerticalVideo

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandShowLearnMoreNavigationItem

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandShowL2BottomNotification

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandConfigureL2BottomNotification

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandEventCorrelationId

-(id) eventCorrelationId {
	%orig;
	NSLog(@"-(id) eventCorrelationId");
}

-(void) setEventCorrelationId:(id) {
	%orig;
	NSLog(@"-(void) setEventCorrelationId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdCommandGoToNowplayingCard

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandDismiss

-(id) initWithDismissReason:(id) {
	%orig;
	NSLog(@"-(id) initWithDismissReason:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(bool) animated {
	%orig;
	NSLog(@"-(bool) animated");
}

-(void) setAnimated:(bool) {
	%orig;
	NSLog(@"-(void) setAnimated:(bool)");
}

%end

%hook PMAdCommandCloseAd

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) animated {
	%orig;
	NSLog(@"-(bool) animated");
}

-(void) setAnimated:(bool) {
	%orig;
	NSLog(@"-(void) setAnimated:(bool)");
}

%end

%hook PMAdCommandDismissL2Ad

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdCommandOpenL2AdLandingPage

-(id) initWithL2Ad:(id) {
	%orig;
	NSLog(@"-(id) initWithL2Ad:(id)");
}

-(void) setAllowsExternalPages:(bool) {
	%orig;
	NSLog(@"-(void) setAllowsExternalPages:(bool)");
}

-(bool) allowsExternalPages {
	%orig;
	NSLog(@"-(bool) allowsExternalPages");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook MiniPlayerViewContext

-(id) dominantColor {
	%orig;
	NSLog(@"-(id) dominantColor");
}

-(id) albumImageUrl {
	%orig;
	NSLog(@"-(id) albumImageUrl");
}

-(bool) shouldShowEQView {
	%orig;
	NSLog(@"-(bool) shouldShowEQView");
}

-(bool) shouldShowWhyAdsButton {
	%orig;
	NSLog(@"-(bool) shouldShowWhyAdsButton");
}

-(bool) shouldShowPlayPauseButton {
	%orig;
	NSLog(@"-(bool) shouldShowPlayPauseButton");
}

-(double) playingDuration {
	%orig;
	NSLog(@"-(double) playingDuration");
}

-(bool) isBuffering {
	%orig;
	NSLog(@"-(bool) isBuffering");
}

-(id) defaultImageName {
	%orig;
	NSLog(@"-(id) defaultImageName");
}

-(id) songTitle {
	%orig;
	NSLog(@"-(id) songTitle");
}

-(id) artistName {
	%orig;
	NSLog(@"-(id) artistName");
}

-(double) elapsedSeconds {
	%orig;
	NSLog(@"-(double) elapsedSeconds");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

%end

%hook MediaDownloadManager

-(void) URLSession:(id) task:(id) didCompleteWithError:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) task:(id) didCompleteWithError:(id)");
}

-(void) URLSession:(id) downloadTask:(id) didFinishDownloadingToURL:(id) {
	%orig;
	NSLog(@"-(void) URLSession:(id) downloadTask:(id) didFinishDownloadingToURL:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMStationThumbsDataSource

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(void) tableView:(id) commitEditingStyle:(long long) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) commitEditingStyle:(long long) forRowAtIndexPath:(id)");
}

%end

%hook AnonymousLoginUtility

+(id) getAnonymousWebLIDFrom:(id) {
	%orig;
	NSLog(@"+(id) getAnonymousWebLIDFrom:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook AdCommandReceiver

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CastBridge

-(id) getActiveTrackModelId {
	%orig;
	NSLog(@"-(id) getActiveTrackModelId");
}

-(void) getSourceModelAsDictionary:(id) {
	%orig;
	NSLog(@"-(void) getSourceModelAsDictionary:(id)");
}

-(void) getSourceModelWithStartItemId:(long long) trackId:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) getSourceModelWithStartItemId:(long long) trackId:(id) completion:(id)");
}

-(void) getSourceModelWithTrackId:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) getSourceModelWithTrackId:(id) completion:(id)");
}

-(void) getSourceModelWithStartItemId:(long long) completion:(id) {
	%orig;
	NSLog(@"-(void) getSourceModelWithStartItemId:(long long) completion:(id)");
}

-(id) getStationType {
	%orig;
	NSLog(@"-(id) getStationType");
}

-(bool) isPlayingAllTracks {
	%orig;
	NSLog(@"-(bool) isPlayingAllTracks");
}

-(bool) isPremiumContentWithInfo:(id) {
	%orig;
	NSLog(@"-(bool) isPremiumContentWithInfo:(id)");
}

-(bool) isNewSourceModel:(id) {
	%orig;
	NSLog(@"-(bool) isNewSourceModel:(id)");
}

-(void) updateSource:(id) trackResult:(id) info:(id) status:(id) shouldUpdateSource:(bool) {
	%orig;
	NSLog(@"-(void) updateSource:(id) trackResult:(id) info:(id) status:(id) shouldUpdateSource:(bool)");
}

-(id) getCurrentSourceId {
	%orig;
	NSLog(@"-(id) getCurrentSourceId");
}

-(bool) isPremiumContent {
	%orig;
	NSLog(@"-(bool) isPremiumContent");
}

-(void) disableCasting:(bool) {
	%orig;
	NSLog(@"-(void) disableCasting:(bool)");
}

-(bool) isAutoPlayContent {
	%orig;
	NSLog(@"-(bool) isAutoPlayContent");
}

-(void) enableCasting:(bool) {
	%orig;
	NSLog(@"-(void) enableCasting:(bool)");
}

-(void) setPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setPlaying:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook DeepLinkingHandlerAlertHandler

-(void) deepLinkingHandlerRequestDisplayUpSellWithTitle:(id) message:(id) comfirmClosure:(id) {
	%orig;
	NSLog(@"-(void) deepLinkingHandlerRequestDisplayUpSellWithTitle:(id) message:(id) comfirmClosure:(id)");
}

-(void) deepLinkingHandlerRequestDisplayAlert:(id) {
	%orig;
	NSLog(@"-(void) deepLinkingHandlerRequestDisplayAlert:(id)");
}

-(void) deepLinkingHandlerRequestOfferUpgradeWithIap:(bool) product:(id) source:(id) tracking:(id) {
	%orig;
	NSLog(@"-(void) deepLinkingHandlerRequestOfferUpgradeWithIap:(bool) product:(id) source:(id) tracking:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PremiumPhoneDeepLinkingHandlerPlaySourceHandler

-(void) playPodcastSourceAfterLegacyNPDismissal {
	%orig;
	NSLog(@"-(void) playPodcastSourceAfterLegacyNPDismissal");
}

-(void) playPodcastSource:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) playPodcastSource:(id) completion:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMPhoneOpenURLHandler

-(void) URLWasOpenedWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) URLWasOpenedWithPath:(id) andParameters:(id)");
}

-(id) initWithMusicSessionManager:(id) onDemandManager:(?) subscriptionManager:(id) navigationManager:(id) baseApplicationDelegate:(id) openURLNotifier:(id) firstIntroManager:(id) writeContextClosure:(id) readContextClosure:(id) {
	%orig;
	NSLog(@"-(id) initWithMusicSessionManager:(id) onDemandManager:(?) subscriptionManager:(id) navigationManager:(id) baseApplicationDelegate:(id) openURLNotifier:(id) firstIntroManager:(id) writeContextClosure:(id) readContextClosure:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMLaunchHistory

+(bool) shouldSuppressMusicPlaybackForFreshAppLaunch:(bool) applicationState:(long long) {
	%orig;
	NSLog(@"+(bool) shouldSuppressMusicPlaybackForFreshAppLaunch:(bool) applicationState:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMSelectedTargetMarketCollectionController

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMValueExchangeMediator

-(void) stopBackgroundValueExchangeTaskGuarding {
	%orig;
	NSLog(@"-(void) stopBackgroundValueExchangeTaskGuarding");
}

-(void) valueExchangeRewardDidStart:(id) {
	%orig;
	NSLog(@"-(void) valueExchangeRewardDidStart:(id)");
}

-(void) playAudio:(long long) completion:(id) interruptedClosure:(?) {
	%orig;
	NSLog(@"-(void) playAudio:(long long) completion:(id) interruptedClosure:(?)");
}

-(void) audioOverRadioDidStartPlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidStartPlaying:(id)");
}

-(void) audioOverRadioDidPausePlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidPausePlaying:(id)");
}

-(void) audioOverRadioDidFinishPlaying:(id) success:(bool) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidFinishPlaying:(id) success:(bool)");
}

-(bool) isSkippingAudioAds {
	%orig;
	NSLog(@"-(bool) isSkippingAudioAds");
}

-(bool) enforcementProgressCompleted {
	%orig;
	NSLog(@"-(bool) enforcementProgressCompleted");
}

-(void) increaseProgressEnforcement {
	%orig;
	NSLog(@"-(void) increaseProgressEnforcement");
}

-(bool) disableNativeTimer {
	%orig;
	NSLog(@"-(bool) disableNativeTimer");
}

-(id) initWithType:(long long) adapter:(id) {
	%orig;
	NSLog(@"-(id) initWithType:(long long) adapter:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook DFPAdCreativeQueue

-(void) addCreative:(id) {
	%orig;
	NSLog(@"-(void) addCreative:(id)");
}

-(id) headCreative {
	%orig;
	NSLog(@"-(id) headCreative");
}

-(bool) hasCreatives {
	%orig;
	NSLog(@"-(bool) hasCreatives");
}

-(long long) numCreatives {
	%orig;
	NSLog(@"-(long long) numCreatives");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingTrackCardViewModel

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(bool) canShareFromNavigationBar {
	%orig;
	NSLog(@"-(bool) canShareFromNavigationBar");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) shareableItem {
	%orig;
	NSLog(@"-(id) shareableItem");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMJSObjectUtilities

+(id) shareableArtistMessageFromProperties:(id) {
	%orig;
	NSLog(@"+(id) shareableArtistMessageFromProperties:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMFlexCoachmarkManager

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMPremiumTrackCellContentViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook FirstIntroUnlockFeaturesRouter

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMStationCatalogViewModel

-(void) didSelectResult:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectResult:(id) isRecommendation:(bool)");
}

-(void) didSelectCollect:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectCollect:(id) isRecommendation:(bool)");
}

-(bool) allowLongPress {
	%orig;
	NSLog(@"-(bool) allowLongPress");
}

-(void) didSelectCancel {
	%orig;
	NSLog(@"-(void) didSelectCancel");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMReplayMiniCoachmarkCoordinator

+(void) recordReplayUsedInContext:(long long) {
	%orig;
	NSLog(@"+(void) recordReplayUsedInContext:(long long)");
}

+(bool) canShowReplayMiniCoachmarkForTrack:(id) inContext:(long long) {
	%orig;
	NSLog(@"+(bool) canShowReplayMiniCoachmarkForTrack:(id) inContext:(long long)");
}

+(void) recordReplayMiniCoachmarkDisplayedInContext:(long long) {
	%orig;
	NSLog(@"+(void) recordReplayMiniCoachmarkDisplayedInContext:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMLevel2SLAPViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook FirstIntroFTUXRouter

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PodcastProgramCatalogViewModel

-(void) controller:(id) didChangeObject:(id) atIndexPath:(id) forChangeType:(unsigned long long) newIndexPath:(id) {
	%orig;
	NSLog(@"-(void) controller:(id) didChangeObject:(id) atIndexPath:(id) forChangeType:(unsigned long long) newIndexPath:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMItemsByArtistViewModel

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SiriVoiceShortcutDataProvider

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SonosGroupEditViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook RemnantProgrammaticAd

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSlopaCoachmarkDisplayContext

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook PMFromLevel2Transition

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook FlexCoachmark

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook InAppPurchaseBackstageUpsell

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMPremiumUpsellModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMMessageUploadProgressViewModel

-(id) initWithIsDraft:(bool) {
	%orig;
	NSLog(@"-(id) initWithIsDraft:(bool)");
}

-(id) finishedTitle {
	%orig;
	NSLog(@"-(id) finishedTitle");
}

-(id) finishedText {
	%orig;
	NSLog(@"-(id) finishedText");
}

-(id) progressTitle {
	%orig;
	NSLog(@"-(id) progressTitle");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook BluetoothStats

-(id) initWithStatsCollector:(id) musicSessionManager:(id) autoManager:(id) {
	%orig;
	NSLog(@"-(id) initWithStatsCollector:(id) musicSessionManager:(id) autoManager:(id)");
}

-(void) registerPandoraLinkSessionStartEvent:(id) {
	%orig;
	NSLog(@"-(void) registerPandoraLinkSessionStartEvent:(id)");
}

-(void) registerPandoraLinkSessionTerminateEvent:(id) {
	%orig;
	NSLog(@"-(void) registerPandoraLinkSessionTerminateEvent:(id)");
}

-(void) registerMediaButtonEvent:(id) {
	%orig;
	NSLog(@"-(void) registerMediaButtonEvent:(id)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSiriShortcutsViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook VideoPlayerState

-(long long) previousPlayerState {
	%orig;
	NSLog(@"-(long long) previousPlayerState");
}

-(void) setPreviousPlayerState:(long long) {
	%orig;
	NSLog(@"-(void) setPreviousPlayerState:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMFlexCoachmarkDisplayContext

-(id) initWithCoachmarkId:(long long) {
	%orig;
	NSLog(@"-(id) initWithCoachmarkId:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PodcastIsUnavailableToastModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMShareableItemImageSource

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) activityViewControllerPlaceholderItem:(id) {
	%orig;
	NSLog(@"-(id) activityViewControllerPlaceholderItem:(id)");
}

-(id) activityViewController:(id) itemForActivityType:(id) {
	%orig;
	NSLog(@"-(id) activityViewController:(id) itemForActivityType:(id)");
}

%end

%hook FadeInAnimator

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook Level2PushTransitionDelegate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) navigationController:(id) animationControllerForOperation:(long long) fromViewController:(id) toViewController:(id) {
	%orig;
	NSLog(@"-(id) navigationController:(id) animationControllerForOperation:(long long) fromViewController:(id) toViewController:(id)");
}

%end

%hook PMCustomContentTrackFollowOnViewModel

+(id) messageFromText {
	%orig;
	NSLog(@"+(id) messageFromText");
}

-(id) initWithContentProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithContentProvider:(id)");
}

-(id) followOnCoachMarkUrl {
	%orig;
	NSLog(@"-(id) followOnCoachMarkUrl");
}

-(void) removeBannerFromAdvertisingController {
	%orig;
	NSLog(@"-(void) removeBannerFromAdvertisingController");
}

-(void) logFollowOnImpression {
	%orig;
	NSLog(@"-(void) logFollowOnImpression");
}

-(void) updateAdvertistingControllerNextRefresh {
	%orig;
	NSLog(@"-(void) updateAdvertistingControllerNextRefresh");
}

-(void) followOnButtonClicked {
	%orig;
	NSLog(@"-(void) followOnButtonClicked");
}

-(id) ctaButtonText {
	%orig;
	NSLog(@"-(id) ctaButtonText");
}

-(id) authorName {
	%orig;
	NSLog(@"-(id) authorName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SlopaCoachmark

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingArtistMessageCardViewModel

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(bool) isVoiceTrack {
	%orig;
	NSLog(@"-(bool) isVoiceTrack");
}

-(bool) canShareFromNavigationBar {
	%orig;
	NSLog(@"-(bool) canShareFromNavigationBar");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) shareableItem {
	%orig;
	NSLog(@"-(id) shareableItem");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMHTMLStringFactory

-(id) makeHTMLStringFrom:(id) {
	%orig;
	NSLog(@"-(id) makeHTMLStringFrom:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMCoachmarkViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSmartLinkUtilities

+(bool) doesNotRequireUserAuthWithPath:(id) {
	%orig;
	NSLog(@"+(bool) doesNotRequireUserAuthWithPath:(id)");
}

+(bool) isArtistAudioMessagePath:(id) urlParameters:(id) {
	%orig;
	NSLog(@"+(bool) isArtistAudioMessagePath:(id) urlParameters:(id)");
}

+(bool) isStationCreationPath:(id) {
	%orig;
	NSLog(@"+(bool) isStationCreationPath:(id)");
}

+(id) onDemandArtistAudioMessageStationCreationTokenFromURLParameters:(id) {
	%orig;
	NSLog(@"+(id) onDemandArtistAudioMessageStationCreationTokenFromURLParameters:(id)");
}

+(id) onDemandArtistAudioMessageTokenFromURLParameters:(id) {
	%orig;
	NSLog(@"+(id) onDemandArtistAudioMessageTokenFromURLParameters:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMSonosCastDiscovery

-(void) clearDeviceList {
	%orig;
	NSLog(@"-(void) clearDeviceList");
}

-(void) startScan {
	%orig;
	NSLog(@"-(void) startScan");
}

-(id) devices {
	%orig;
	NSLog(@"-(id) devices");
}

-(void) stopScan {
	%orig;
	NSLog(@"-(void) stopScan");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PMNowPlayingPremiumTunerBarViewModel

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionBufferStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionBufferStateDidChangeTo:(bool)");
}

-(void) musicSessionRepeatModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionRepeatModeDidChangeTo:(long long)");
}

-(void) musicSessionShuffleModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionShuffleModeDidChangeTo:(long long)");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) activeTrackRatingDidChange:(long long) trackId:(id) stationId:(id) {
	%orig;
	NSLog(@"-(void) activeTrackRatingDidChange:(long long) trackId:(id) stationId:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMPlaylistCatalogViewModel

-(void) setPlaylistName:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) setPlaylistName:(id) completion:(id)");
}

-(void) refreshSearchRecsPodsAnnotations:(id) {
	%orig;
	NSLog(@"-(void) refreshSearchRecsPodsAnnotations:(id)");
}

-(void) refreshBulkAddPodsAnnotations:(id) {
	%orig;
	NSLog(@"-(void) refreshBulkAddPodsAnnotations:(id)");
}

-(void) backgroundQueueManagedObjectContextDidSave:(id) {
	%orig;
	NSLog(@"-(void) backgroundQueueManagedObjectContextDidSave:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMCastDevice

-(bool) isCasting {
	%orig;
	NSLog(@"-(bool) isCasting");
}

-(bool) closeAppOnDisconnect {
	%orig;
	NSLog(@"-(bool) closeAppOnDisconnect");
}

-(id) castIdentifier {
	%orig;
	NSLog(@"-(id) castIdentifier");
}

-(id) initWithFriendlyName:(id) proprietaryDevice:(id) uniqueIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithFriendlyName:(id) proprietaryDevice:(id) uniqueIdentifier:(id)");
}

-(id) createSession {
	%orig;
	NSLog(@"-(id) createSession");
}

-(void) setFriendlyName:(id) {
	%orig;
	NSLog(@"-(void) setFriendlyName:(id)");
}

-(id) friendlyName {
	%orig;
	NSLog(@"-(id) friendlyName");
}

-(id) modelName {
	%orig;
	NSLog(@"-(id) modelName");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) hash {
	%orig;
	NSLog(@"-(long long) hash");
}

-(id) uniqueIdentifier {
	%orig;
	NSLog(@"-(id) uniqueIdentifier");
}

%end

%hook GoogleCastDevice

-(bool) isCasting {
	%orig;
	NSLog(@"-(bool) isCasting");
}

-(bool) closeAppOnDisconnect {
	%orig;
	NSLog(@"-(bool) closeAppOnDisconnect");
}

-(id) initWithFriendlyName:(id) proprietaryDevice:(id) uniqueIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithFriendlyName:(id) proprietaryDevice:(id) uniqueIdentifier:(id)");
}

-(id) createSession {
	%orig;
	NSLog(@"-(id) createSession");
}

-(id) modelName {
	%orig;
	NSLog(@"-(id) modelName");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSonosCastDevice

-(bool) isCasting {
	%orig;
	NSLog(@"-(bool) isCasting");
}

-(bool) closeAppOnDisconnect {
	%orig;
	NSLog(@"-(bool) closeAppOnDisconnect");
}

-(id) castIdentifier {
	%orig;
	NSLog(@"-(id) castIdentifier");
}

-(id) initWithFriendlyName:(id) proprietaryDevice:(id) uniqueIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithFriendlyName:(id) proprietaryDevice:(id) uniqueIdentifier:(id)");
}

-(id) createSession {
	%orig;
	NSLog(@"-(id) createSession");
}

-(id) modelName {
	%orig;
	NSLog(@"-(id) modelName");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMLocalizedString

+(id) shareStation {
	%orig;
	NSLog(@"+(id) shareStation");
}

+(id) shareSong {
	%orig;
	NSLog(@"+(id) shareSong");
}

+(id) buyOnItunes {
	%orig;
	NSLog(@"+(id) buyOnItunes");
}

+(id) doubleTappingThisWillDismissTheOnScreenText {
	%orig;
	NSLog(@"+(id) doubleTappingThisWillDismissTheOnScreenText");
}

+(id) ok {
	%orig;
	NSLog(@"+(id) ok");
}

+(id) switchSubscriberState {
	%orig;
	NSLog(@"+(id) switchSubscriberState");
}

+(id) changesWillTakeEffect {
	%orig;
	NSLog(@"+(id) changesWillTakeEffect");
}

+(id) plus {
	%orig;
	NSLog(@"+(id) plus");
}

+(id) addingBookmark {
	%orig;
	NSLog(@"+(id) addingBookmark");
}

+(id) yourStationWillBeRightBack {
	%orig;
	NSLog(@"+(id) yourStationWillBeRightBack");
}

+(id) varietyAdded {
	%orig;
	NSLog(@"+(id) varietyAdded");
}

+(id) niceJobByAddingVarietyYouVeFineTunedThisStationToYourUniqueTastes {
	%orig;
	NSLog(@"+(id) niceJobByAddingVarietyYouVeFineTunedThisStationToYourUniqueTastes");
}

+(id) gladYouLikeIt {
	%orig;
	NSLog(@"+(id) gladYouLikeIt");
}

+(id) becauseYouGaveTrackThumbsUp {
	%orig;
	NSLog(@"+(id) becauseYouGaveTrackThumbsUp");
}

+(id) gotIt {
	%orig;
	NSLog(@"+(id) gotIt");
}

+(id) becauseYouGaveTrackThumbsDown {
	%orig;
	NSLog(@"+(id) becauseYouGaveTrackThumbsDown");
}

+(id) stationLimitReached {
	%orig;
	NSLog(@"+(id) stationLimitReached");
}

+(id) passwordMustBeAtLeast {
	%orig;
	NSLog(@"+(id) passwordMustBeAtLeast");
}

+(id) listenWithConnectedDevices {
	%orig;
	NSLog(@"+(id) listenWithConnectedDevices");
}

+(id) tapTheHighlightedIconToListenToPandoraOnTvOrConnectedSpeakers {
	%orig;
	NSLog(@"+(id) tapTheHighlightedIconToListenToPandoraOnTvOrConnectedSpeakers");
}

+(id) sorryTheRequestedInformationCouldNotBeLoadedAtThisTime {
	%orig;
	NSLog(@"+(id) sorryTheRequestedInformationCouldNotBeLoadedAtThisTime");
}

+(id) tryAgain {
	%orig;
	NSLog(@"+(id) tryAgain");
}

+(id) bySigningOutYourOfflineMusicWillBeRemovedFromThisDeviceAndWillNeedToBeReDownloadedWhenYouSignBackIn {
	%orig;
	NSLog(@"+(id) bySigningOutYourOfflineMusicWillBeRemovedFromThisDeviceAndWillNeedToBeReDownloadedWhenYouSignBackIn");
}

+(id) areYouSureYouWantToSignOut {
	%orig;
	NSLog(@"+(id) areYouSureYouWantToSignOut");
}

+(id) playingOn:(id) {
	%orig;
	NSLog(@"+(id) playingOn:(id)");
}

+(id) artistMessaging {
	%orig;
	NSLog(@"+(id) artistMessaging");
}

+(id) artistMessagingOff {
	%orig;
	NSLog(@"+(id) artistMessagingOff");
}

+(id) tapToSeeSettingsForAllStations {
	%orig;
	NSLog(@"+(id) tapToSeeSettingsForAllStations");
}

+(id) leaveThisAd {
	%orig;
	NSLog(@"+(id) leaveThisAd");
}

+(id) overNineThousand {
	%orig;
	NSLog(@"+(id) overNineThousand");
}

+(id) initializePlaybackQueueFailed {
	%orig;
	NSLog(@"+(id) initializePlaybackQueueFailed");
}

+(id) userIsLoggedOutOrHasNoActiveStation {
	%orig;
	NSLog(@"+(id) userIsLoggedOutOrHasNoActiveStation");
}

+(id) pandoraOfflineMode {
	%orig;
	NSLog(@"+(id) pandoraOfflineMode");
}

+(id) pandoraIsSetToOfflineModeOrDoesntHaveAnInternetConnection {
	%orig;
	NSLog(@"+(id) pandoraIsSetToOfflineModeOrDoesntHaveAnInternetConnection");
}

+(id) goOnline {
	%orig;
	NSLog(@"+(id) goOnline");
}

+(id) startListeningOffline {
	%orig;
	NSLog(@"+(id) startListeningOffline");
}

+(id) goToSettings {
	%orig;
	NSLog(@"+(id) goToSettings");
}

+(id) offlineStationsDisabled {
	%orig;
	NSLog(@"+(id) offlineStationsDisabled");
}

+(id) theresNotEnoughFreeSpaceOnYourDeviceOfflineStations {
	%orig;
	NSLog(@"+(id) theresNotEnoughFreeSpaceOnYourDeviceOfflineStations");
}

+(id) weveNoticedYouHaventConnectedToPandoraInAWhile {
	%orig;
	NSLog(@"+(id) weveNoticedYouHaventConnectedToPandoraInAWhile");
}

+(id) accountAuthenticationRequired {
	%orig;
	NSLog(@"+(id) accountAuthenticationRequired");
}

+(id) yourOfflineStationsHaveBeenRemovedFromThisDevice {
	%orig;
	NSLog(@"+(id) yourOfflineStationsHaveBeenRemovedFromThisDevice");
}

+(id) connectionLost {
	%orig;
	NSLog(@"+(id) connectionLost");
}

+(id) looksLikeYouLostInternetConnection {
	%orig;
	NSLog(@"+(id) looksLikeYouLostInternetConnection");
}

+(id) personalizeYourStationWithThumbs {
	%orig;
	NSLog(@"+(id) personalizeYourStationWithThumbs");
}

+(id) tapThumbsUpWhenYouHearATrackYouLikeTapThumbsDownIfItSNotRightForYou {
	%orig;
	NSLog(@"+(id) tapThumbsUpWhenYouHearATrackYouLikeTapThumbsDownIfItSNotRightForYou");
}

+(id) fineTuneYourStation {
	%orig;
	NSLog(@"+(id) fineTuneYourStation");
}

+(id) tapThisIconToViewYourThumbHistoryAddVarietyAndMore {
	%orig;
	NSLog(@"+(id) tapThisIconToViewYourThumbHistoryAddVarietyAndMore");
}

+(id) recentPlayedStations {
	%orig;
	NSLog(@"+(id) recentPlayedStations");
}

+(id) wantHelpFindingSomethingNew {
	%orig;
	NSLog(@"+(id) wantHelpFindingSomethingNew");
}

+(id) choosePlan {
	%orig;
	NSLog(@"+(id) choosePlan");
}

+(id) unlockFeatures {
	%orig;
	NSLog(@"+(id) unlockFeatures");
}

+(id) subscribeNow {
	%orig;
	NSLog(@"+(id) subscribeNow");
}

+(id) higherQualityAudio {
	%orig;
	NSLog(@"+(id) higherQualityAudio");
}

+(id) enableAutoLock {
	%orig;
	NSLog(@"+(id) enableAutoLock");
}

+(id) enableAutoPlay {
	%orig;
	NSLog(@"+(id) enableAutoPlay");
}

+(id) playingOnStations:(long long) {
	%orig;
	NSLog(@"+(id) playingOnStations:(long long)");
}

+(id) enableMessages {
	%orig;
	NSLog(@"+(id) enableMessages");
}

+(id) reminderFailed {
	%orig;
	NSLog(@"+(id) reminderFailed");
}

+(id) reminderFailedForSomeReason {
	%orig;
	NSLog(@"+(id) reminderFailedForSomeReason");
}

+(id) pleaseEnterYourCurrentAccountPassword {
	%orig;
	NSLog(@"+(id) pleaseEnterYourCurrentAccountPassword");
}

+(id) currentPassword {
	%orig;
	NSLog(@"+(id) currentPassword");
}

+(id) zipCode {
	%orig;
	NSLog(@"+(id) zipCode");
}

+(id) female {
	%orig;
	NSLog(@"+(id) female");
}

+(id) male {
	%orig;
	NSLog(@"+(id) male");
}

+(id) deleteAccount {
	%orig;
	NSLog(@"+(id) deleteAccount");
}

+(id) youWillNoLongerBeAbleToLogIn {
	%orig;
	NSLog(@"+(id) youWillNoLongerBeAbleToLogIn");
}

+(id) areYouSure {
	%orig;
	NSLog(@"+(id) areYouSure");
}

+(id) keepAccount {
	%orig;
	NSLog(@"+(id) keepAccount");
}

+(id) yourContactEmail {
	%orig;
	NSLog(@"+(id) yourContactEmail");
}

+(id) enterPassword {
	%orig;
	NSLog(@"+(id) enterPassword");
}

+(id) oneOfOurListenerAdvocatesWillSendAnEmail:(id) {
	%orig;
	NSLog(@"+(id) oneOfOurListenerAdvocatesWillSendAnEmail:(id)");
}

+(id) yourPandoraAccountHasBeenDeleted {
	%orig;
	NSLog(@"+(id) yourPandoraAccountHasBeenDeleted");
}

+(id) enterAContactEmail {
	%orig;
	NSLog(@"+(id) enterAContactEmail");
}

+(id) pleaseEnterYourPassword {
	%orig;
	NSLog(@"+(id) pleaseEnterYourPassword");
}

+(id) enterAContactEmailBelow {
	%orig;
	NSLog(@"+(id) enterAContactEmailBelow");
}

+(id) enterYourPasswordDeleteAccount {
	%orig;
	NSLog(@"+(id) enterYourPasswordDeleteAccount");
}

+(id) getLocalConcertDates {
	%orig;
	NSLog(@"+(id) getLocalConcertDates");
}

+(id) allowLocationAccess {
	%orig;
	NSLog(@"+(id) allowLocationAccess");
}

+(id) bySelectingNotNowWeWillInsteadUse {
	%orig;
	NSLog(@"+(id) bySelectingNotNowWeWillInsteadUse");
}

+(id) addVariety {
	%orig;
	NSLog(@"+(id) addVariety");
}

+(id) addArtistsOrTracksToThisStation {
	%orig;
	NSLog(@"+(id) addArtistsOrTracksToThisStation");
}

+(id) addArtistsOrTracks {
	%orig;
	NSLog(@"+(id) addArtistsOrTracks");
}

+(id) shuffleStations {
	%orig;
	NSLog(@"+(id) shuffleStations");
}

+(id) searchForArtistsAlbumsSongsStationsAndPlaylists {
	%orig;
	NSLog(@"+(id) searchForArtistsAlbumsSongsStationsAndPlaylists");
}

+(id) cancelEmail {
	%orig;
	NSLog(@"+(id) cancelEmail");
}

+(id) chooseTwitterAccount {
	%orig;
	NSLog(@"+(id) chooseTwitterAccount");
}

+(id) controlOtherDevice {
	%orig;
	NSLog(@"+(id) controlOtherDevice");
}

+(id) letThemListen {
	%orig;
	NSLog(@"+(id) letThemListen");
}

+(id) listenHere {
	%orig;
	NSLog(@"+(id) listenHere");
}

+(id) letMeListen {
	%orig;
	NSLog(@"+(id) letMeListen");
}

+(id) minutes15 {
	%orig;
	NSLog(@"+(id) minutes15");
}

+(id) minutes30 {
	%orig;
	NSLog(@"+(id) minutes30");
}

+(id) minutes45 {
	%orig;
	NSLog(@"+(id) minutes45");
}

+(id) minutes60 {
	%orig;
	NSLog(@"+(id) minutes60");
}

+(id) codeSubmittedSuccessfully {
	%orig;
	NSLog(@"+(id) codeSubmittedSuccessfully");
}

+(id) activationFailure {
	%orig;
	NSLog(@"+(id) activationFailure");
}

+(id) youHaveEnteredInvalidExpiredActivationCode {
	%orig;
	NSLog(@"+(id) youHaveEnteredInvalidExpiredActivationCode");
}

+(id) activating {
	%orig;
	NSLog(@"+(id) activating");
}

+(id) warningAlarmWillNotPlay {
	%orig;
	NSLog(@"+(id) warningAlarmWillNotPlay");
}

+(id) stillListening {
	%orig;
	NSLog(@"+(id) stillListening");
}

+(id) imStillListening {
	%orig;
	NSLog(@"+(id) imStillListening");
}

+(id) wantThumbprintRadio {
	%orig;
	NSLog(@"+(id) wantThumbprintRadio");
}

+(id) weNeedToKnowYouALittleBitBetter {
	%orig;
	NSLog(@"+(id) weNeedToKnowYouALittleBitBetter");
}

+(id) pleaseSelectSomethingToListenToFirst {
	%orig;
	NSLog(@"+(id) pleaseSelectSomethingToListenToFirst");
}

+(id) pleaseSelectAStationFirst {
	%orig;
	NSLog(@"+(id) pleaseSelectAStationFirst");
}

+(id) sleepTimer {
	%orig;
	NSLog(@"+(id) sleepTimer");
}

+(id) userManuallyDisabledNotificationOnIosSetttingsApp {
	%orig;
	NSLog(@"+(id) userManuallyDisabledNotificationOnIosSetttingsApp");
}

+(id) notificationDisabled {
	%orig;
	NSLog(@"+(id) notificationDisabled");
}

+(id) featuredTrack {
	%orig;
	NSLog(@"+(id) featuredTrack");
}

+(id) didntWakeUpToYourMusic {
	%orig;
	NSLog(@"+(id) didntWakeUpToYourMusic");
}

+(id) dontForget {
	%orig;
	NSLog(@"+(id) dontForget");
}

+(id) typeSearchCriteria {
	%orig;
	NSLog(@"+(id) typeSearchCriteria");
}

+(id) beforeTrack {
	%orig;
	NSLog(@"+(id) beforeTrack");
}

+(id) afterTrack {
	%orig;
	NSLog(@"+(id) afterTrack");
}

+(id) dotDotDot {
	%orig;
	NSLog(@"+(id) dotDotDot");
}

+(id) publishMessage {
	%orig;
	NSLog(@"+(id) publishMessage");
}

+(id) continueTitle {
	%orig;
	NSLog(@"+(id) continueTitle");
}

+(id) weCouldntFindAnyMatchesFor {
	%orig;
	NSLog(@"+(id) weCouldntFindAnyMatchesFor");
}

+(id) signUp {
	%orig;
	NSLog(@"+(id) signUp");
}

+(id) buffering {
	%orig;
	NSLog(@"+(id) buffering");
}

+(id) daysLeft:(long long) {
	%orig;
	NSLog(@"+(id) daysLeft:(long long)");
}

+(id) changeAppIconSelectionSettingsTitle {
	%orig;
	NSLog(@"+(id) changeAppIconSelectionSettingsTitle");
}

+(id) deviceActivation {
	%orig;
	NSLog(@"+(id) deviceActivation");
}

+(id) voiceAssistant {
	%orig;
	NSLog(@"+(id) voiceAssistant");
}

+(id) siriShortcuts {
	%orig;
	NSLog(@"+(id) siriShortcuts");
}

+(id) advanced {
	%orig;
	NSLog(@"+(id) advanced");
}

+(id) disabledWhileCasting {
	%orig;
	NSLog(@"+(id) disabledWhileCasting");
}

+(id) alarmClock {
	%orig;
	NSLog(@"+(id) alarmClock");
}

+(id) why {
	%orig;
	NSLog(@"+(id) why");
}

+(id) promoted {
	%orig;
	NSLog(@"+(id) promoted");
}

+(id) stationDetails {
	%orig;
	NSLog(@"+(id) stationDetails");
}

+(id) renameStation {
	%orig;
	NSLog(@"+(id) renameStation");
}

+(id) dismissStation {
	%orig;
	NSLog(@"+(id) dismissStation");
}

+(id) deleteStation {
	%orig;
	NSLog(@"+(id) deleteStation");
}

+(id) createStation {
	%orig;
	NSLog(@"+(id) createStation");
}

+(id) sampleTrack {
	%orig;
	NSLog(@"+(id) sampleTrack");
}

+(id) noSample {
	%orig;
	NSLog(@"+(id) noSample");
}

+(id) by:(id) {
	%orig;
	NSLog(@"+(id) by:(id)");
}

+(id) myCollection {
	%orig;
	NSLog(@"+(id) myCollection");
}

+(id) doubleTapToView:(id) {
	%orig;
	NSLog(@"+(id) doubleTapToView:(id)");
}

+(id) doubleTapToBrowse {
	%orig;
	NSLog(@"+(id) doubleTapToBrowse");
}

+(id) addSimilarSongs {
	%orig;
	NSLog(@"+(id) addSimilarSongs");
}

+(id) aToZ {
	%orig;
	NSLog(@"+(id) aToZ");
}

+(id) aPlaylistOfFavoritesFromThisStationHasBeenCreated:(id) {
	%orig;
	NSLog(@"+(id) aPlaylistOfFavoritesFromThisStationHasBeenCreated:(id)");
}

+(id) artists:(long long) {
	%orig;
	NSLog(@"+(id) artists:(long long)");
}

+(id) artistMessageBy:(id) {
	%orig;
	NSLog(@"+(id) artistMessageBy:(id)");
}

+(id) buttonDisabled:(id) {
	%orig;
	NSLog(@"+(id) buttonDisabled:(id)");
}

+(id) browseMorePodcasts {
	%orig;
	NSLog(@"+(id) browseMorePodcasts");
}

+(id) cannotBeShared:(id) {
	%orig;
	NSLog(@"+(id) cannotBeShared:(id)");
}

+(id) checkOutSongBy:(id) a1:(id) {
	%orig;
	NSLog(@"+(id) checkOutSongBy:(id) a1:(id)");
}

+(id) checkOut:(id) {
	%orig;
	NSLog(@"+(id) checkOut:(id)");
}

+(id) dateAndDurationLabel {
	%orig;
	NSLog(@"+(id) dateAndDurationLabel");
}

+(id) dueToOurMusicLicensesThisCantBeShared:(id) {
	%orig;
	NSLog(@"+(id) dueToOurMusicLicensesThisCantBeShared:(id)");
}

+(id) dueToOurMusicLicensesThisIsntAvailable:(id) {
	%orig;
	NSLog(@"+(id) dueToOurMusicLicensesThisIsntAvailable:(id)");
}

+(id) following:(long long) {
	%orig;
	NSLog(@"+(id) following:(long long)");
}

+(id) imListeningTo:(id) a1:(id) {
	%orig;
	NSLog(@"+(id) imListeningTo:(id) a1:(id)");
}

+(id) imListeningToPlaylist:(id) {
	%orig;
	NSLog(@"+(id) imListeningToPlaylist:(id)");
}

+(id) listenToWhatYouWantWithPandoraPremium:(id) a1:(id) {
	%orig;
	NSLog(@"+(id) listenToWhatYouWantWithPandoraPremium:(id) a1:(id)");
}

+(id) moreByArtist:(id) {
	%orig;
	NSLog(@"+(id) moreByArtist:(id)");
}

+(id) playlists:(long long) {
	%orig;
	NSLog(@"+(id) playlists:(long long)");
}

+(id) pleaseEditOrSelect:(id) {
	%orig;
	NSLog(@"+(id) pleaseEditOrSelect:(id)");
}

+(id) seeAll:(id) {
	%orig;
	NSLog(@"+(id) seeAll:(id)");
}

+(id) seeAllSimilarEpisodes {
	%orig;
	NSLog(@"+(id) seeAllSimilarEpisodes");
}

+(id) searchForArtistsAlbumsSongs:(id) {
	%orig;
	NSLog(@"+(id) searchForArtistsAlbumsSongs:(id)");
}

+(id) songBy:(id) {
	%orig;
	NSLog(@"+(id) songBy:(id)");
}

+(id) songAddedTo:(id) {
	%orig;
	NSLog(@"+(id) songAddedTo:(id)");
}

+(id) songsAddedTo:(id) {
	%orig;
	NSLog(@"+(id) songsAddedTo:(id)");
}

+(id) songFromAndBy:(id) a1:(id) {
	%orig;
	NSLog(@"+(id) songFromAndBy:(id) a1:(id)");
}

+(id) stations:(long long) {
	%orig;
	NSLog(@"+(id) stations:(long long)");
}

+(id) topArtists:(long long) {
	%orig;
	NSLog(@"+(id) topArtists:(long long)");
}

+(id) tryPandoraPlusForAMonthForFree:(id) {
	%orig;
	NSLog(@"+(id) tryPandoraPlusForAMonthForFree:(id)");
}

+(id) tryPandoraPlusNoAds:(id) {
	%orig;
	NSLog(@"+(id) tryPandoraPlusNoAds:(id)");
}

+(id) upgradePandoraPremiumToListen:(id) {
	%orig;
	NSLog(@"+(id) upgradePandoraPremiumToListen:(id)");
}

+(id) viewAllSimilar:(id) {
	%orig;
	NSLog(@"+(id) viewAllSimilar:(id)");
}

+(id) yourBioMustBeShorter:(long long) {
	%orig;
	NSLog(@"+(id) yourBioMustBeShorter:(long long)");
}

+(id) yourGiftHasEnded:(long long) {
	%orig;
	NSLog(@"+(id) yourGiftHasEnded:(long long)");
}

+(id) yourFreeGiftStartsNow:(long long) {
	%orig;
	NSLog(@"+(id) yourFreeGiftStartsNow:(long long)");
}

+(id) addADescription {
	%orig;
	NSLog(@"+(id) addADescription");
}

+(id) addADescriptionAboutYourselfHere {
	%orig;
	NSLog(@"+(id) addADescriptionAboutYourselfHere");
}

+(id) addedToMyMusic {
	%orig;
	NSLog(@"+(id) addedToMyMusic");
}

+(id) addedToPlaylistsInMyMusic {
	%orig;
	NSLog(@"+(id) addedToPlaylistsInMyMusic");
}

+(id) episodeAddedToYourCollection {
	%orig;
	NSLog(@"+(id) episodeAddedToYourCollection");
}

+(id) addSongsToYourPlaylistBySearchingForAnArtistAlbumOrSong {
	%orig;
	NSLog(@"+(id) addSongsToYourPlaylistBySearchingForAnArtistAlbumOrSong");
}

+(id) addToPlaylist {
	%orig;
	NSLog(@"+(id) addToPlaylist");
}

+(id) addToQueue {
	%orig;
	NSLog(@"+(id) addToQueue");
}

+(id) advertisementPremiumNowPlayingTitle {
	%orig;
	NSLog(@"+(id) advertisementPremiumNowPlayingTitle");
}

+(id) advertiseOnPandora {
	%orig;
	NSLog(@"+(id) advertiseOnPandora");
}

+(id) albumAddedToMyMusic {
	%orig;
	NSLog(@"+(id) albumAddedToMyMusic");
}

+(id) albumAddedToYourCollection {
	%orig;
	NSLog(@"+(id) albumAddedToYourCollection");
}

+(id) albumDescription {
	%orig;
	NSLog(@"+(id) albumDescription");
}

+(id) albumRemovedFromDownloads {
	%orig;
	NSLog(@"+(id) albumRemovedFromDownloads");
}

+(id) albumRemovedFromMyMusic {
	%orig;
	NSLog(@"+(id) albumRemovedFromMyMusic");
}

+(id) albumRemovedFromYourCollection {
	%orig;
	NSLog(@"+(id) albumRemovedFromYourCollection");
}

+(id) albumNotAvailableStartArtistStation {
	%orig;
	NSLog(@"+(id) albumNotAvailableStartArtistStation");
}

+(id) allTheStationsYouveCreatedAreStillHere {
	%orig;
	NSLog(@"+(id) allTheStationsYouveCreatedAreStillHere");
}

+(id) allYourStationsPlus {
	%orig;
	NSLog(@"+(id) allYourStationsPlus");
}

+(id) allYourThumbedUpSongsAreAdded {
	%orig;
	NSLog(@"+(id) allYourThumbedUpSongsAreAdded");
}

+(id) allowDownloadingOverCellular {
	%orig;
	NSLog(@"+(id) allowDownloadingOverCellular");
}

+(id) areYouSureYouWantToDeleteThisPlaylist {
	%orig;
	NSLog(@"+(id) areYouSureYouWantToDeleteThisPlaylist");
}

+(id) areYouSureYouWantToDeleteThisStation {
	%orig;
	NSLog(@"+(id) areYouSureYouWantToDeleteThisStation");
}

+(id) areYouSureYouWantToDelete:(id) {
	%orig;
	NSLog(@"+(id) areYouSureYouWantToDelete:(id)");
}

+(id) artistRadio {
	%orig;
	NSLog(@"+(id) artistRadio");
}

+(id) audioQuality {
	%orig;
	NSLog(@"+(id) audioQuality");
}

+(id) audioQualityAndDownloads {
	%orig;
	NSLog(@"+(id) audioQualityAndDownloads");
}

+(id) audioQualityOnCellular {
	%orig;
	NSLog(@"+(id) audioQualityOnCellular");
}

+(id) audioQualityOnWiFi {
	%orig;
	NSLog(@"+(id) audioQualityOnWiFi");
}

+(id) audioQualityWhileOffline {
	%orig;
	NSLog(@"+(id) audioQualityWhileOffline");
}

+(id) autoplayOff {
	%orig;
	NSLog(@"+(id) autoplayOff");
}

+(id) autoplayOn {
	%orig;
	NSLog(@"+(id) autoplayOn");
}

+(id) autoplaySettings {
	%orig;
	NSLog(@"+(id) autoplaySettings");
}

+(id) bannerAd {
	%orig;
	NSLog(@"+(id) bannerAd");
}

+(id) betterForDataEfficiency {
	%orig;
	NSLog(@"+(id) betterForDataEfficiency");
}

+(id) betterForSoundQuality {
	%orig;
	NSLog(@"+(id) betterForSoundQuality");
}

+(id) castingPandora {
	%orig;
	NSLog(@"+(id) castingPandora");
}

+(id) collect {
	%orig;
	NSLog(@"+(id) collect");
}

+(id) collected {
	%orig;
	NSLog(@"+(id) collected");
}

+(id) collectOption {
	%orig;
	NSLog(@"+(id) collectOption");
}

+(id) connectingToTheAppStore {
	%orig;
	NSLog(@"+(id) connectingToTheAppStore");
}

+(id) considerDataCostsBeforeEnabling {
	%orig;
	NSLog(@"+(id) considerDataCostsBeforeEnabling");
}

+(id) continueListening {
	%orig;
	NSLog(@"+(id) continueListening");
}

+(id) createAPlaylistFromTheMusicYouLove {
	%orig;
	NSLog(@"+(id) createAPlaylistFromTheMusicYouLove");
}

+(id) createUnlimitedPlaylists {
	%orig;
	NSLog(@"+(id) createUnlimitedPlaylists");
}

+(id) deletePlaylist {
	%orig;
	NSLog(@"+(id) deletePlaylist");
}

+(id) doubleTappingThisClosesTheCurrentScreen {
	%orig;
	NSLog(@"+(id) doubleTappingThisClosesTheCurrentScreen");
}

+(id) downloadingAlbum {
	%orig;
	NSLog(@"+(id) downloadingAlbum");
}

+(id) downloadingPlaylist {
	%orig;
	NSLog(@"+(id) downloadingPlaylist");
}

+(id) downloadingHostedPlaylistWithoutAM {
	%orig;
	NSLog(@"+(id) downloadingHostedPlaylistWithoutAM");
}

+(id) downloadingSong {
	%orig;
	NSLog(@"+(id) downloadingSong");
}

+(id) downloadingStation {
	%orig;
	NSLog(@"+(id) downloadingStation");
}

+(id) downloadYourMusic {
	%orig;
	NSLog(@"+(id) downloadYourMusic");
}

+(id) episodeDescriptionLabel {
	%orig;
	NSLog(@"+(id) episodeDescriptionLabel");
}

+(id) dueToOurMusicLicensesThisSongCantBeReplayed {
	%orig;
	NSLog(@"+(id) dueToOurMusicLicensesThisSongCantBeReplayed");
}

+(id) dueToOurMusicLicensesThisSongCantBeSkippedRightNow {
	%orig;
	NSLog(@"+(id) dueToOurMusicLicensesThisSongCantBeSkippedRightNow");
}

+(id) episodeDescription {
	%orig;
	NSLog(@"+(id) episodeDescription");
}

+(id) removedFromYourCollection {
	%orig;
	NSLog(@"+(id) removedFromYourCollection");
}

+(id) episodeRemovedFromYourCollection {
	%orig;
	NSLog(@"+(id) episodeRemovedFromYourCollection");
}

+(id) allEpisodes {
	%orig;
	NSLog(@"+(id) allEpisodes");
}

+(id) featuresOfThisSong {
	%orig;
	NSLog(@"+(id) featuresOfThisSong");
}

+(id) findFriends {
	%orig;
	NSLog(@"+(id) findFriends");
}

+(id) followOnTwitter {
	%orig;
	NSLog(@"+(id) followOnTwitter");
}

+(id) follower {
	%orig;
	NSLog(@"+(id) follower");
}

+(id) fullAlbum {
	%orig;
	NSLog(@"+(id) fullAlbum");
}

+(id) getStarted {
	%orig;
	NSLog(@"+(id) getStarted");
}

+(id) goAdFreeForAMonth {
	%orig;
	NSLog(@"+(id) goAdFreeForAMonth");
}

+(id) goToAlbum {
	%orig;
	NSLog(@"+(id) goToAlbum");
}

+(id) goToArtist {
	%orig;
	NSLog(@"+(id) goToArtist");
}

+(id) goToCategory {
	%orig;
	NSLog(@"+(id) goToCategory");
}

+(id) goToEpisode {
	%orig;
	NSLog(@"+(id) goToEpisode");
}

+(id) goToPlaylist {
	%orig;
	NSLog(@"+(id) goToPlaylist");
}

+(id) goToProfile {
	%orig;
	NSLog(@"+(id) goToProfile");
}

+(id) goToProgram {
	%orig;
	NSLog(@"+(id) goToProgram");
}

+(id) goToSong {
	%orig;
	NSLog(@"+(id) goToSong");
}

+(id) goToStation {
	%orig;
	NSLog(@"+(id) goToStation");
}

+(id) keepTheMusicPlayingWithSimilarSongs {
	%orig;
	NSLog(@"+(id) keepTheMusicPlayingWithSimilarSongs");
}

+(id) licenseAlbumCantAddToPlaylist {
	%orig;
	NSLog(@"+(id) licenseAlbumCantAddToPlaylist");
}

+(id) licenseAlbumCantBeAddedMyMusic {
	%orig;
	NSLog(@"+(id) licenseAlbumCantBeAddedMyMusic");
}

+(id) licenseAlbumCantBeCollected {
	%orig;
	NSLog(@"+(id) licenseAlbumCantBeCollected");
}

+(id) licenseAlbumCantAddToQueue {
	%orig;
	NSLog(@"+(id) licenseAlbumCantAddToQueue");
}

+(id) licenseAlbumIsntAvailableDownload {
	%orig;
	NSLog(@"+(id) licenseAlbumIsntAvailableDownload");
}

+(id) licenseAlbumIsntAvailablePlayback {
	%orig;
	NSLog(@"+(id) licenseAlbumIsntAvailablePlayback");
}

+(id) licenseArtistIsntAvailablePlayback {
	%orig;
	NSLog(@"+(id) licenseArtistIsntAvailablePlayback");
}

+(id) licenseCantAddToPlaylist {
	%orig;
	NSLog(@"+(id) licenseCantAddToPlaylist");
}

+(id) licenseCantBeAddedMyMusic {
	%orig;
	NSLog(@"+(id) licenseCantBeAddedMyMusic");
}

+(id) licenseCantBeCollected {
	%orig;
	NSLog(@"+(id) licenseCantBeCollected");
}

+(id) licenseCantAddToQueue {
	%orig;
	NSLog(@"+(id) licenseCantAddToQueue");
}

+(id) licenseIsntAvailableDownload {
	%orig;
	NSLog(@"+(id) licenseIsntAvailableDownload");
}

+(id) licenseIsntAvailablePlayback {
	%orig;
	NSLog(@"+(id) licenseIsntAvailablePlayback");
}

+(id) licenseOnlyAvailableForRadioPlayback {
	%orig;
	NSLog(@"+(id) licenseOnlyAvailableForRadioPlayback");
}

+(id) licensePlaylistCantAddToQueue {
	%orig;
	NSLog(@"+(id) licensePlaylistCantAddToQueue");
}

+(id) licensePlaylistIsntAvailableDownload {
	%orig;
	NSLog(@"+(id) licensePlaylistIsntAvailableDownload");
}

+(id) licensePlaylistIsntAvailablePlayback {
	%orig;
	NSLog(@"+(id) licensePlaylistIsntAvailablePlayback");
}

+(id) licenseSongsOnAlbumOnlyAvailableRadioPlayback {
	%orig;
	NSLog(@"+(id) licenseSongsOnAlbumOnlyAvailableRadioPlayback");
}

+(id) licenseSongsOnPlaylistOnlyAvailableRadioPlayback {
	%orig;
	NSLog(@"+(id) licenseSongsOnPlaylistOnlyAvailableRadioPlayback");
}

+(id) licenseSongCantAddToPlaylist {
	%orig;
	NSLog(@"+(id) licenseSongCantAddToPlaylist");
}

+(id) licenseSongCantBeAddedMyMusic {
	%orig;
	NSLog(@"+(id) licenseSongCantBeAddedMyMusic");
}

+(id) licenseSongCantBeCollected {
	%orig;
	NSLog(@"+(id) licenseSongCantBeCollected");
}

+(id) licenseSongCantAddToQueue {
	%orig;
	NSLog(@"+(id) licenseSongCantAddToQueue");
}

+(id) licenseSongOnlyAvailableRadioPlayback {
	%orig;
	NSLog(@"+(id) licenseSongOnlyAvailableRadioPlayback");
}

+(id) licenseSongIsntAvailableDownload {
	%orig;
	NSLog(@"+(id) licenseSongIsntAvailableDownload");
}

+(id) licenseSongIsntAvailablePlayback {
	%orig;
	NSLog(@"+(id) licenseSongIsntAvailablePlayback");
}

+(id) licensesSongIsntAvailableRadioPlayback {
	%orig;
	NSLog(@"+(id) licensesSongIsntAvailableRadioPlayback");
}

+(id) licenseStationCantAddToQueue {
	%orig;
	NSLog(@"+(id) licenseStationCantAddToQueue");
}

+(id) licenseStationIsntAvailableDownload {
	%orig;
	NSLog(@"+(id) licenseStationIsntAvailableDownload");
}

+(id) listenOnSonosWithoutEverLeaving {
	%orig;
	NSLog(@"+(id) listenOnSonosWithoutEverLeaving");
}

+(id) listeningToPandora {
	%orig;
	NSLog(@"+(id) listeningToPandora");
}

+(id) loveThisSongTapToAddItToMyMusic {
	%orig;
	NSLog(@"+(id) loveThisSongTapToAddItToMyMusic");
}

+(id) loveThisSongTapToAddItToYourCollection {
	%orig;
	NSLog(@"+(id) loveThisSongTapToAddItToYourCollection");
}

+(id) lyricsLicensedProvidedByLyricfind {
	%orig;
	NSLog(@"+(id) lyricsLicensedProvidedByLyricfind");
}

+(id) moreBy {
	%orig;
	NSLog(@"+(id) moreBy");
}

+(id) moreEpisodes {
	%orig;
	NSLog(@"+(id) moreEpisodes");
}

+(id) moreFromThisPodcast {
	%orig;
	NSLog(@"+(id) moreFromThisPodcast");
}

+(id) moreFromThisCategory {
	%orig;
	NSLog(@"+(id) moreFromThisCategory");
}

+(id) moreOption {
	%orig;
	NSLog(@"+(id) moreOption");
}

+(id) morePodcasts {
	%orig;
	NSLog(@"+(id) morePodcasts");
}

+(id) newPlaylist {
	%orig;
	NSLog(@"+(id) newPlaylist");
}

+(id) moreThumbs {
	%orig;
	NSLog(@"+(id) moreThumbs");
}

+(id) myCollectionSelectedFilter {
	%orig;
	NSLog(@"+(id) myCollectionSelectedFilter");
}

+(id) myMusic {
	%orig;
	NSLog(@"+(id) myMusic");
}

+(id) myMusicSelectedFilter {
	%orig;
	NSLog(@"+(id) myMusicSelectedFilter");
}

+(id) myStations {
	%orig;
	NSLog(@"+(id) myStations");
}

+(id) noFollowersYet {
	%orig;
	NSLog(@"+(id) noFollowersYet");
}

+(id) noPlaylistsYet {
	%orig;
	NSLog(@"+(id) noPlaylistsYet");
}

+(id) noThumbsYet {
	%orig;
	NSLog(@"+(id) noThumbsYet");
}

+(id) notFollowingAnyoneYet {
	%orig;
	NSLog(@"+(id) notFollowingAnyoneYet");
}

+(id) nowPlayingTrackDetailsSourceTitleDefault {
	%orig;
	NSLog(@"+(id) nowPlayingTrackDetailsSourceTitleDefault");
}

+(id) nowPlayingTrackDetailsSourceSubtitleDefault {
	%orig;
	NSLog(@"+(id) nowPlayingTrackDetailsSourceSubtitleDefault");
}

+(id) programFilteringTypeOldToNew {
	%orig;
	NSLog(@"+(id) programFilteringTypeOldToNew");
}

+(id) programFilteringTypeNewToOld {
	%orig;
	NSLog(@"+(id) programFilteringTypeNewToOld");
}

+(id) onCellular {
	%orig;
	NSLog(@"+(id) onCellular");
}

+(id) onTour {
	%orig;
	NSLog(@"+(id) onTour");
}

+(id) onWiFi {
	%orig;
	NSLog(@"+(id) onWiFi");
}

+(id) pandoraOnSonos {
	%orig;
	NSLog(@"+(id) pandoraOnSonos");
}

+(id) pauseOption {
	%orig;
	NSLog(@"+(id) pauseOption");
}

+(id) playOption {
	%orig;
	NSLog(@"+(id) playOption");
}

+(id) playlistAddedToMyMusic {
	%orig;
	NSLog(@"+(id) playlistAddedToMyMusic");
}

+(id) playlistAddedToYourCollection {
	%orig;
	NSLog(@"+(id) playlistAddedToYourCollection");
}

+(id) playlistCreated {
	%orig;
	NSLog(@"+(id) playlistCreated");
}

+(id) playlistRemovedFromDownloads {
	%orig;
	NSLog(@"+(id) playlistRemovedFromDownloads");
}

+(id) playlistRemovedFromMyMusic {
	%orig;
	NSLog(@"+(id) playlistRemovedFromMyMusic");
}

+(id) playlistRemovedFromYourCollection {
	%orig;
	NSLog(@"+(id) playlistRemovedFromYourCollection");
}

+(id) podcastRemovedFromYourCollection {
	%orig;
	NSLog(@"+(id) podcastRemovedFromYourCollection");
}

+(id) podcastAddedToYourCollection {
	%orig;
	NSLog(@"+(id) podcastAddedToYourCollection");
}

+(id) podcasts {
	%orig;
	NSLog(@"+(id) podcasts");
}

+(id) podcastFTUXTapToCollect {
	%orig;
	NSLog(@"+(id) podcastFTUXTapToCollect");
}

+(id) podcastFTUXTapToCollectAccessiblityLabel {
	%orig;
	NSLog(@"+(id) podcastFTUXTapToCollectAccessiblityLabel");
}

+(id) podcastAudioAdCaptionLabel {
	%orig;
	NSLog(@"+(id) podcastAudioAdCaptionLabel");
}

+(id) podcastAudioWhyAdsButtonTitle {
	%orig;
	NSLog(@"+(id) podcastAudioWhyAdsButtonTitle");
}

+(id) podcastBackstageFTUXTapToCollect {
	%orig;
	NSLog(@"+(id) podcastBackstageFTUXTapToCollect");
}

+(id) podcastBackstageFTUXTapToCollectAccessiblityLabel {
	%orig;
	NSLog(@"+(id) podcastBackstageFTUXTapToCollectAccessiblityLabel");
}

+(id) podcastBackstageFTUXTapToCollectAccessiblityIdentifier {
	%orig;
	NSLog(@"+(id) podcastBackstageFTUXTapToCollectAccessiblityIdentifier");
}

+(id) podcastCollectionFooterPrimaryText {
	%orig;
	NSLog(@"+(id) podcastCollectionFooterPrimaryText");
}

+(id) podcastThumbsDownToastCTAMessage {
	%orig;
	NSLog(@"+(id) podcastThumbsDownToastCTAMessage");
}

+(id) podcastThumbsDownToastMessage {
	%orig;
	NSLog(@"+(id) podcastThumbsDownToastMessage");
}

+(id) podcastThumbsUpToastMessage {
	%orig;
	NSLog(@"+(id) podcastThumbsUpToastMessage");
}

+(id) podcastIsUnavailableToastMessage {
	%orig;
	NSLog(@"+(id) podcastIsUnavailableToastMessage");
}

+(id) podcastUnavailableErrorAlertBodyMessage {
	%orig;
	NSLog(@"+(id) podcastUnavailableErrorAlertBodyMessage");
}

+(id) podcastRetiredEpisodesCellHeaderText {
	%orig;
	NSLog(@"+(id) podcastRetiredEpisodesCellHeaderText");
}

+(id) siriShortcutToastMessage {
	%orig;
	NSLog(@"+(id) siriShortcutToastMessage");
}

+(id) offerTerms {
	%orig;
	NSLog(@"+(id) offerTerms");
}

+(id) queueSwitch {
	%orig;
	NSLog(@"+(id) queueSwitch");
}

+(id) questionMark {
	%orig;
	NSLog(@"+(id) questionMark");
}

+(id) removedFromPodcasts {
	%orig;
	NSLog(@"+(id) removedFromPodcasts");
}

+(id) downloadedEpisodes {
	%orig;
	NSLog(@"+(id) downloadedEpisodes");
}

+(id) recentPodcasts {
	%orig;
	NSLog(@"+(id) recentPodcasts");
}

+(id) collectedPodcasts {
	%orig;
	NSLog(@"+(id) collectedPodcasts");
}

+(id) collectedEpisodes {
	%orig;
	NSLog(@"+(id) collectedEpisodes");
}

+(id) allCollectedPodcasts {
	%orig;
	NSLog(@"+(id) allCollectedPodcasts");
}

+(id) allRecentPodcasts {
	%orig;
	NSLog(@"+(id) allRecentPodcasts");
}

+(id) reSubscribe {
	%orig;
	NSLog(@"+(id) reSubscribe");
}

+(id) recent {
	%orig;
	NSLog(@"+(id) recent");
}

+(id) recentFavorites {
	%orig;
	NSLog(@"+(id) recentFavorites");
}

+(id) removesAllMusicDownloadedForOfflineListeningOnThisDevice {
	%orig;
	NSLog(@"+(id) removesAllMusicDownloadedForOfflineListeningOnThisDevice");
}

+(id) replayNotAvailable {
	%orig;
	NSLog(@"+(id) replayNotAvailable");
}

+(id) trackCantBeReplayedOffline {
	%orig;
	NSLog(@"+(id) trackCantBeReplayedOffline");
}

+(id) resetDownloads {
	%orig;
	NSLog(@"+(id) resetDownloads");
}

+(id) recommendedPodcasts {
	%orig;
	NSLog(@"+(id) recommendedPodcasts");
}

+(id) sampleArtists {
	%orig;
	NSLog(@"+(id) sampleArtists");
}

+(id) sampleSongs {
	%orig;
	NSLog(@"+(id) sampleSongs");
}

+(id) searchAndPlayAnything {
	%orig;
	NSLog(@"+(id) searchAndPlayAnything");
}

+(id) searchForAnArtistOrSongToAddVarietyToThisStation {
	%orig;
	NSLog(@"+(id) searchForAnArtistOrSongToAddVarietyToThisStation");
}

+(id) searchForAnArtistAlbumSongStationOrPlaylist {
	%orig;
	NSLog(@"+(id) searchForAnArtistAlbumSongStationOrPlaylist");
}

+(id) searchForAnArtistAlbumSongStationPlaylistOrPodcast {
	%orig;
	NSLog(@"+(id) searchForAnArtistAlbumSongStationPlaylistOrPodcast");
}

+(id) searchForArtistsAlbumsSongsRStationsAndPlaylists {
	%orig;
	NSLog(@"+(id) searchForArtistsAlbumsSongsRStationsAndPlaylists");
}

+(id) searchForArtistsAlbumsSongsRStationsPlaylistsAndPodcasts {
	%orig;
	NSLog(@"+(id) searchForArtistsAlbumsSongsRStationsPlaylistsAndPodcasts");
}

+(id) seeAll {
	%orig;
	NSLog(@"+(id) seeAll");
}

+(id) seeAllEpisodes {
	%orig;
	NSLog(@"+(id) seeAllEpisodes");
}

+(id) showMyCollection {
	%orig;
	NSLog(@"+(id) showMyCollection");
}

+(id) showAllOfMyCollection {
	%orig;
	NSLog(@"+(id) showAllOfMyCollection");
}

+(id) shuffleAllDownloadedSongs {
	%orig;
	NSLog(@"+(id) shuffleAllDownloadedSongs");
}

+(id) shuffleAllSongs {
	%orig;
	NSLog(@"+(id) shuffleAllSongs");
}

+(id) similarEpisodes {
	%orig;
	NSLog(@"+(id) similarEpisodes");
}

+(id) similarPodcasts {
	%orig;
	NSLog(@"+(id) similarPodcasts");
}

+(id) social {
	%orig;
	NSLog(@"+(id) social");
}

+(id) songAddedToMyMusic {
	%orig;
	NSLog(@"+(id) songAddedToMyMusic");
}

+(id) songAddedToYourCollection {
	%orig;
	NSLog(@"+(id) songAddedToYourCollection");
}

+(id) songRemovedFromDownloads {
	%orig;
	NSLog(@"+(id) songRemovedFromDownloads");
}

+(id) songRemovedFromMyMusic {
	%orig;
	NSLog(@"+(id) songRemovedFromMyMusic");
}

+(id) songRemovedFromYourCollection {
	%orig;
	NSLog(@"+(id) songRemovedFromYourCollection");
}

+(id) podcastCollectionOfflineEmptyStatePrimaryText {
	%orig;
	NSLog(@"+(id) podcastCollectionOfflineEmptyStatePrimaryText");
}

+(id) nowPlayingSong {
	%orig;
	NSLog(@"+(id) nowPlayingSong");
}

+(id) nowPlayingSongs {
	%orig;
	NSLog(@"+(id) nowPlayingSongs");
}

+(id) nowPlayingAddToCollectionMiniCoachmarkAccessibilityLabel {
	%orig;
	NSLog(@"+(id) nowPlayingAddToCollectionMiniCoachmarkAccessibilityLabel");
}

+(id) sorryWeAreNotAbleToProcessYourRequestPleaseMakeSureAirplaneModeIsTurnedOffAndTryAgain {
	%orig;
	NSLog(@"+(id) sorryWeAreNotAbleToProcessYourRequestPleaseMakeSureAirplaneModeIsTurnedOffAndTryAgain");
}

+(id) showAllMusic {
	%orig;
	NSLog(@"+(id) showAllMusic");
}

+(id) showAllDownloadedMusic {
	%orig;
	NSLog(@"+(id) showAllDownloadedMusic");
}

+(id) startArtistStation {
	%orig;
	NSLog(@"+(id) startArtistStation");
}

+(id) startFreeTrial {
	%orig;
	NSLog(@"+(id) startFreeTrial");
}

+(id) startFreeTrialupgradeNow {
	%orig;
	NSLog(@"+(id) startFreeTrialupgradeNow");
}

+(id) startStationOption {
	%orig;
	NSLog(@"+(id) startStationOption");
}

+(id) startTrialNow {
	%orig;
	NSLog(@"+(id) startTrialNow");
}

+(id) stationAddedToMyMusic {
	%orig;
	NSLog(@"+(id) stationAddedToMyMusic");
}

+(id) stationAddedToYourCollection {
	%orig;
	NSLog(@"+(id) stationAddedToYourCollection");
}

+(id) stationExpired {
	%orig;
	NSLog(@"+(id) stationExpired");
}

+(id) stationRemovedFromDownloads {
	%orig;
	NSLog(@"+(id) stationRemovedFromDownloads");
}

+(id) stationRemovedFromMyMusic {
	%orig;
	NSLog(@"+(id) stationRemovedFromMyMusic");
}

+(id) stationRemovedFromYourCollection {
	%orig;
	NSLog(@"+(id) stationRemovedFromYourCollection");
}

+(id) stationSettings {
	%orig;
	NSLog(@"+(id) stationSettings");
}

+(id) stationsYouMightLike {
	%orig;
	NSLog(@"+(id) stationsYouMightLike");
}

+(id) termsOfUse {
	%orig;
	NSLog(@"+(id) termsOfUse");
}

+(id) thePandoraYouLoveNowWithEffortlessOnDemandListening {
	%orig;
	NSLog(@"+(id) thePandoraYouLoveNowWithEffortlessOnDemandListening");
}

+(id) thisContentIsAvailableToPandoraPremiumSubscribersOnly {
	%orig;
	NSLog(@"+(id) thisContentIsAvailableToPandoraPremiumSubscribersOnly");
}

+(id) thisStationCanTBePersonalized {
	%orig;
	NSLog(@"+(id) thisStationCanTBePersonalized");
}

+(id) thumbs {
	%orig;
	NSLog(@"+(id) thumbs");
}

+(id) topAlbums {
	%orig;
	NSLog(@"+(id) topAlbums");
}

+(id) topSongs {
	%orig;
	NSLog(@"+(id) topSongs");
}

+(id) repeatTitle {
	%orig;
	NSLog(@"+(id) repeatTitle");
}

+(id) turnRepeatOff {
	%orig;
	NSLog(@"+(id) turnRepeatOff");
}

+(id) turnRepeatSourceOn {
	%orig;
	NSLog(@"+(id) turnRepeatSourceOn");
}

+(id) turnRepeatTrackOn {
	%orig;
	NSLog(@"+(id) turnRepeatTrackOn");
}

+(id) turnShuffleModeOff {
	%orig;
	NSLog(@"+(id) turnShuffleModeOff");
}

+(id) turnShuffleModeOn {
	%orig;
	NSLog(@"+(id) turnShuffleModeOn");
}

+(id) upgrade {
	%orig;
	NSLog(@"+(id) upgrade");
}

+(id) upgradeNow {
	%orig;
	NSLog(@"+(id) upgradeNow");
}

+(id) upgradeNowToContinueEnjoyingPandoraPremium {
	%orig;
	NSLog(@"+(id) upgradeNowToContinueEnjoyingPandoraPremium");
}

+(id) upgradeNowToContinueEnjoyingYourAlbumsSongsAndPlaylists {
	%orig;
	NSLog(@"+(id) upgradeNowToContinueEnjoyingYourAlbumsSongsAndPlaylists");
}

+(id) upgradeNowToEnjoyPandoraPremium {
	%orig;
	NSLog(@"+(id) upgradeNowToEnjoyPandoraPremium");
}

+(id) viewPlaylist {
	%orig;
	NSLog(@"+(id) viewPlaylist");
}

+(id) wantAdFreeMusic {
	%orig;
	NSLog(@"+(id) wantAdFreeMusic");
}

+(id) weAreInTheProcessOfMakingBrowseBetter {
	%orig;
	NSLog(@"+(id) weAreInTheProcessOfMakingBrowseBetter");
}

+(id) whileOffline {
	%orig;
	NSLog(@"+(id) whileOffline");
}

+(id) youHaveNotAddedTracksToThisPlaylistTapFindASongToAddAboveToAddTracks {
	%orig;
	NSLog(@"+(id) youHaveNotAddedTracksToThisPlaylistTapFindASongToAddAboveToAddTracks");
}

+(id) mustBePremiumSubscriberToListenOffline {
	%orig;
	NSLog(@"+(id) mustBePremiumSubscriberToListenOffline");
}

+(id) youreAlreadySubscribedToPandoraPremium {
	%orig;
	NSLog(@"+(id) youreAlreadySubscribedToPandoraPremium");
}

+(id) youreNotEligibleForThisGift {
	%orig;
	NSLog(@"+(id) youreNotEligibleForThisGift");
}

+(id) youveAlreadyRedeemedThisGift {
	%orig;
	NSLog(@"+(id) youveAlreadyRedeemedThisGift");
}

+(id) yourName {
	%orig;
	NSLog(@"+(id) yourName");
}

+(id) yourPandoraPremiumSubscriptionHasExpired {
	%orig;
	NSLog(@"+(id) yourPandoraPremiumSubscriptionHasExpired");
}

+(id) yourPodcastWillBeRightBack {
	%orig;
	NSLog(@"+(id) yourPodcastWillBeRightBack");
}

+(id) yourMusicWillBeBackShortly {
	%orig;
	NSLog(@"+(id) yourMusicWillBeBackShortly");
}

+(id) yourPodcastWillBeBackShortly {
	%orig;
	NSLog(@"+(id) yourPodcastWillBeBackShortly");
}

+(id) addedTo:(id) {
	%orig;
	NSLog(@"+(id) addedTo:(id)");
}

+(id) added:(id) {
	%orig;
	NSLog(@"+(id) added:(id)");
}

+(id) shortcutIsOutOfDate {
	%orig;
	NSLog(@"+(id) shortcutIsOutOfDate");
}

+(id) shortcutIsNotPartOfYourCurrentSubscription {
	%orig;
	NSLog(@"+(id) shortcutIsNotPartOfYourCurrentSubscription");
}

+(id) allAddedPodcasts {
	%orig;
	NSLog(@"+(id) allAddedPodcasts");
}

+(id) thumbedUpEpisodes {
	%orig;
	NSLog(@"+(id) thumbedUpEpisodes");
}

+(id) thumbedDownEpisodes {
	%orig;
	NSLog(@"+(id) thumbedDownEpisodes");
}

+(id) sayHeyPandora {
	%orig;
	NSLog(@"+(id) sayHeyPandora");
}

+(id) mustBeLoggedInToUseShortcut {
	%orig;
	NSLog(@"+(id) mustBeLoggedInToUseShortcut");
}

+(id) seeAllPodcasts {
	%orig;
	NSLog(@"+(id) seeAllPodcasts");
}

+(id) howCanIHelpYou {
	%orig;
	NSLog(@"+(id) howCanIHelpYou");
}

+(id) whatSongIsThis {
	%orig;
	NSLog(@"+(id) whatSongIsThis");
}

+(id) thumbUpThisSong {
	%orig;
	NSLog(@"+(id) thumbUpThisSong");
}

+(id) turnItUp {
	%orig;
	NSLog(@"+(id) turnItUp");
}

+(id) playMyThumbprintRadio {
	%orig;
	NSLog(@"+(id) playMyThumbprintRadio");
}

+(id) saveThisSong {
	%orig;
	NSLog(@"+(id) saveThisSong");
}

+(id) playMyThumbsUpPlaylist {
	%orig;
	NSLog(@"+(id) playMyThumbsUpPlaylist");
}

+(id) todaysHits {
	%orig;
	NSLog(@"+(id) todaysHits");
}

+(id) justSayHeyPandoraToGetStarted {
	%orig;
	NSLog(@"+(id) justSayHeyPandoraToGetStarted");
}

+(id) anyTimeYouWantToUseYourVoiceTapTheMicrophoneButtonOrSayHeyPandora {
	%orig;
	NSLog(@"+(id) anyTimeYouWantToUseYourVoiceTapTheMicrophoneButtonOrSayHeyPandora");
}

+(id) sayItNow {
	%orig;
	NSLog(@"+(id) sayItNow");
}

+(id) tellMeWhatToPlayNext {
	%orig;
	NSLog(@"+(id) tellMeWhatToPlayNext");
}

+(id) sayASongAlbumOrPodcastYoudWouldLikeToHear {
	%orig;
	NSLog(@"+(id) sayASongAlbumOrPodcastYoudWouldLikeToHear");
}

+(id) sorrySomethingWentWrong {
	%orig;
	NSLog(@"+(id) sorrySomethingWentWrong");
}

+(id) yourMichrophoneIsCurretlyUnavailable {
	%orig;
	NSLog(@"+(id) yourMichrophoneIsCurretlyUnavailable");
}

+(id) sorryICannotPerformThisActionRightNow {
	%orig;
	NSLog(@"+(id) sorryICannotPerformThisActionRightNow");
}

+(id) thumbsUpCalloutHeaderText {
	%orig;
	NSLog(@"+(id) thumbsUpCalloutHeaderText");
}

+(id) thumbsUpCalloutBodyText {
	%orig;
	NSLog(@"+(id) thumbsUpCalloutBodyText");
}

+(id) voiceModeCalloutHeaderText {
	%orig;
	NSLog(@"+(id) voiceModeCalloutHeaderText");
}

+(id) voiceModeCalloutBodyText {
	%orig;
	NSLog(@"+(id) voiceModeCalloutBodyText");
}

+(id) podcastFTUXCalloutOnSLHeaderText {
	%orig;
	NSLog(@"+(id) podcastFTUXCalloutOnSLHeaderText");
}

+(id) podcastFTUXCalloutOnSLBodyText {
	%orig;
	NSLog(@"+(id) podcastFTUXCalloutOnSLBodyText");
}

+(id) podcastFTUXCalloutOnMMHeaderText {
	%orig;
	NSLog(@"+(id) podcastFTUXCalloutOnMMHeaderText");
}

+(id) podcastFTUXCalloutOnMMBodyText {
	%orig;
	NSLog(@"+(id) podcastFTUXCalloutOnMMBodyText");
}

+(id) audioMessagesDisabledInShuffle {
	%orig;
	NSLog(@"+(id) audioMessagesDisabledInShuffle");
}

+(id) hostedPlaylistDisabledWhileCasting {
	%orig;
	NSLog(@"+(id) hostedPlaylistDisabledWhileCasting");
}

+(id) personalizedPlaylistDisabledCellWarning {
	%orig;
	NSLog(@"+(id) personalizedPlaylistDisabledCellWarning");
}

+(id) personalizedPlaylistDisabledCellWarningWithSwipeInfo {
	%orig;
	NSLog(@"+(id) personalizedPlaylistDisabledCellWarningWithSwipeInfo");
}

+(id) playingOn {
	%orig;
	NSLog(@"+(id) playingOn");
}

+(id) thumbDownToastPPT {
	%orig;
	NSLog(@"+(id) thumbDownToastPPT");
}

+(id) thumbUpToastPPT {
	%orig;
	NSLog(@"+(id) thumbUpToastPPT");
}

+(id) personalizedPlaylistCoachmark {
	%orig;
	NSLog(@"+(id) personalizedPlaylistCoachmark");
}

+(id) recommendedMusic {
	%orig;
	NSLog(@"+(id) recommendedMusic");
}

+(id) youHaventListenedToAnythingYetOnceYouDoYoullFindItHere {
	%orig;
	NSLog(@"+(id) youHaventListenedToAnythingYetOnceYouDoYoullFindItHere");
}

+(id) toViewAllOfYourSiriShortcutsGoToSiriSearchInTheSettingsApp {
	%orig;
	NSLog(@"+(id) toViewAllOfYourSiriShortcutsGoToSiriSearchInTheSettingsApp");
}

+(id) signUpForFree {
	%orig;
	NSLog(@"+(id) signUpForFree");
}

+(id) signUpSubscribe {
	%orig;
	NSLog(@"+(id) signUpSubscribe");
}

+(id) getPremiumWith30DaysFree {
	%orig;
	NSLog(@"+(id) getPremiumWith30DaysFree");
}

+(id) getPremium {
	%orig;
	NSLog(@"+(id) getPremium");
}

+(id) byContinuingYouAgreeToOurTermsOfUsePrivacyPolicyAndOfferTerms {
	%orig;
	NSLog(@"+(id) byContinuingYouAgreeToOurTermsOfUsePrivacyPolicyAndOfferTerms");
}

+(id) keepListening {
	%orig;
	NSLog(@"+(id) keepListening");
}

+(id) thanksForCheckingOutPandoraPremium {
	%orig;
	NSLog(@"+(id) thanksForCheckingOutPandoraPremium");
}

+(id) yourTrialHasEnded {
	%orig;
	NSLog(@"+(id) yourTrialHasEnded");
}

+(id) alreadyRegistered {
	%orig;
	NSLog(@"+(id) alreadyRegistered");
}

+(id) takePandoraPremiumEverywhere {
	%orig;
	NSLog(@"+(id) takePandoraPremiumEverywhere");
}

+(id) signupToUnlockFeatures {
	%orig;
	NSLog(@"+(id) signupToUnlockFeatures");
}

+(id) signUpNow {
	%orig;
	NSLog(@"+(id) signUpNow");
}

+(id) completeSignUp {
	%orig;
	NSLog(@"+(id) completeSignUp");
}

+(id) similarArtists {
	%orig;
	NSLog(@"+(id) similarArtists");
}

+(id) latestRelease {
	%orig;
	NSLog(@"+(id) latestRelease");
}

+(id) playlists {
	%orig;
	NSLog(@"+(id) playlists");
}

+(id) biography {
	%orig;
	NSLog(@"+(id) biography");
}

+(id) recentEpisodes {
	%orig;
	NSLog(@"+(id) recentEpisodes");
}

+(id) passwordRequired {
	%orig;
	NSLog(@"+(id) passwordRequired");
}

+(id) connected {
	%orig;
	NSLog(@"+(id) connected");
}

+(id) shareOption {
	%orig;
	NSLog(@"+(id) shareOption");
}

+(id) track {
	%orig;
	NSLog(@"+(id) track");
}

+(id) business {
	%orig;
	NSLog(@"+(id) business");
}

+(id) search {
	%orig;
	NSLog(@"+(id) search");
}

+(id) to {
	%orig;
	NSLog(@"+(id) to");
}

+(id) summary {
	%orig;
	NSLog(@"+(id) summary");
}

+(id) station {
	%orig;
	NSLog(@"+(id) station");
}

+(id) delete {
	%orig;
	NSLog(@"+(id) delete");
}

+(id) postalCode {
	%orig;
	NSLog(@"+(id) postalCode");
}

+(id) stations {
	%orig;
	NSLog(@"+(id) stations");
}

+(id) submit {
	%orig;
	NSLog(@"+(id) submit");
}

+(id) select {
	%orig;
	NSLog(@"+(id) select");
}

+(id) off {
	%orig;
	NSLog(@"+(id) off");
}

+(id) artists {
	%orig;
	NSLog(@"+(id) artists");
}

+(id) snooze {
	%orig;
	NSLog(@"+(id) snooze");
}

+(id) privacyPolicy {
	%orig;
	NSLog(@"+(id) privacyPolicy");
}

+(id) email {
	%orig;
	NSLog(@"+(id) email");
}

+(id) startListening {
	%orig;
	NSLog(@"+(id) startListening");
}

+(id) signOut {
	%orig;
	NSLog(@"+(id) signOut");
}

+(id) artist {
	%orig;
	NSLog(@"+(id) artist");
}

+(id) playlist {
	%orig;
	NSLog(@"+(id) playlist");
}

+(id) song {
	%orig;
	NSLog(@"+(id) song");
}

+(id) episode {
	%orig;
	NSLog(@"+(id) episode");
}

+(id) lyrics {
	%orig;
	NSLog(@"+(id) lyrics");
}

+(id) stationName {
	%orig;
	NSLog(@"+(id) stationName");
}

+(id) shuffle {
	%orig;
	NSLog(@"+(id) shuffle");
}

+(id) download {
	%orig;
	NSLog(@"+(id) download");
}

+(id) playlistName {
	%orig;
	NSLog(@"+(id) playlistName");
}

+(id) podcast {
	%orig;
	NSLog(@"+(id) podcast");
}

+(id) respond {
	%orig;
	NSLog(@"+(id) respond");
}

+(id) next {
	%orig;
	NSLog(@"+(id) next");
}

+(id) success {
	%orig;
	NSLog(@"+(id) success");
}

+(id) album {
	%orig;
	NSLog(@"+(id) album");
}

+(id) albums {
	%orig;
	NSLog(@"+(id) albums");
}

+(id) feed {
	%orig;
	NSLog(@"+(id) feed");
}

+(id) loading {
	%orig;
	NSLog(@"+(id) loading");
}

+(id) downloads {
	%orig;
	NSLog(@"+(id) downloads");
}

+(id) bio {
	%orig;
	NSLog(@"+(id) bio");
}

+(id) bookmark {
	%orig;
	NSLog(@"+(id) bookmark");
}

+(id) premium {
	%orig;
	NSLog(@"+(id) premium");
}

+(id) offlineMode {
	%orig;
	NSLog(@"+(id) offlineMode");
}

+(id) privacy {
	%orig;
	NSLog(@"+(id) privacy");
}

+(id) account {
	%orig;
	NSLog(@"+(id) account");
}

+(id) browse {
	%orig;
	NSLog(@"+(id) browse");
}

+(id) startStation {
	%orig;
	NSLog(@"+(id) startStation");
}

+(id) profile {
	%orig;
	NSLog(@"+(id) profile");
}

+(id) fullName {
	%orig;
	NSLog(@"+(id) fullName");
}

+(id) alarm {
	%orig;
	NSLog(@"+(id) alarm");
}

+(id) zeroTime {
	%orig;
	NSLog(@"+(id) zeroTime");
}

+(id) all {
	%orig;
	NSLog(@"+(id) all");
}

+(id) learnMore {
	%orig;
	NSLog(@"+(id) learnMore");
}

+(id) none {
	%orig;
	NSLog(@"+(id) none");
}

+(id) downloaded {
	%orig;
	NSLog(@"+(id) downloaded");
}

+(id) command {
	%orig;
	NSLog(@"+(id) command");
}

+(id) advertisement {
	%orig;
	NSLog(@"+(id) advertisement");
}

+(id) songs {
	%orig;
	NSLog(@"+(id) songs");
}

+(id) editOption {
	%orig;
	NSLog(@"+(id) editOption");
}

+(id) normal {
	%orig;
	NSLog(@"+(id) normal");
}

+(id) play:(id) {
	%orig;
	NSLog(@"+(id) play:(id)");
}

+(id) notNow {
	%orig;
	NSLog(@"+(id) notNow");
}

+(id) bytes {
	%orig;
	NSLog(@"+(id) bytes");
}

+(id) show {
	%orig;
	NSLog(@"+(id) show");
}

+(id) dismiss {
	%orig;
	NSLog(@"+(id) dismiss");
}

+(id) frame {
	%orig;
	NSLog(@"+(id) frame");
}

+(id) stop {
	%orig;
	NSLog(@"+(id) stop");
}

+(id) source {
	%orig;
	NSLog(@"+(id) source");
}

+(id) cancel {
	%orig;
	NSLog(@"+(id) cancel");
}

+(id) settings {
	%orig;
	NSLog(@"+(id) settings");
}

+(id) activate {
	%orig;
	NSLog(@"+(id) activate");
}

+(id) info {
	%orig;
	NSLog(@"+(id) info");
}

+(id) thumb {
	%orig;
	NSLog(@"+(id) thumb");
}

+(id) on {
	%orig;
	NSLog(@"+(id) on");
}

+(id) hide {
	%orig;
	NSLog(@"+(id) hide");
}

+(id) open {
	%orig;
	NSLog(@"+(id) open");
}

+(id) close {
	%orig;
	NSLog(@"+(id) close");
}

+(id) resume {
	%orig;
	NSLog(@"+(id) resume");
}

+(id) done {
	%orig;
	NSLog(@"+(id) done");
}

+(id) play {
	%orig;
	NSLog(@"+(id) play");
}

+(id) volume {
	%orig;
	NSLog(@"+(id) volume");
}

+(id) environment {
	%orig;
	NSLog(@"+(id) environment");
}

+(id) help {
	%orig;
	NSLog(@"+(id) help");
}

+(id) send {
	%orig;
	NSLog(@"+(id) send");
}

+(id) undo {
	%orig;
	NSLog(@"+(id) undo");
}

+(id) category {
	%orig;
	NSLog(@"+(id) category");
}

+(id) notifications {
	%orig;
	NSLog(@"+(id) notifications");
}

+(id) month {
	%orig;
	NSLog(@"+(id) month");
}

+(id) day {
	%orig;
	NSLog(@"+(id) day");
}

+(id) share {
	%orig;
	NSLog(@"+(id) share");
}

+(id) episodes {
	%orig;
	NSLog(@"+(id) episodes");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMNowPlayingNonPremiumViewModel

-(bool) shouldShowStationPersonalizationMeter {
	%orig;
	NSLog(@"-(bool) shouldShowStationPersonalizationMeter");
}

-(id) navBarShareableItem {
	%orig;
	NSLog(@"-(id) navBarShareableItem");
}

-(bool) shouldShowStationInfoButton {
	%orig;
	NSLog(@"-(bool) shouldShowStationInfoButton");
}

-(id) activeItem {
	%orig;
	NSLog(@"-(id) activeItem");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) setActiveItem:(id) {
	%orig;
	NSLog(@"-(void) setActiveItem:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CoachmarkController

-(void) displayFlexCoachmarkFrom:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) displayFlexCoachmarkFrom:(id) completion:(id)");
}

-(void) prefetchAllApplicableTriggers {
	%orig;
	NSLog(@"-(void) prefetchAllApplicableTriggers");
}

-(void) displaySlopaCoachmarkFrom:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) displaySlopaCoachmarkFrom:(id) completion:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAudioLevelConverter

-(double) averageAudioLevel {
	%orig;
	NSLog(@"-(double) averageAudioLevel");
}

-(void) setAudioLevelProvider:(id) {
	%orig;
	NSLog(@"-(void) setAudioLevelProvider:(id)");
}

-(id) audioLevelProvider {
	%orig;
	NSLog(@"-(id) audioLevelProvider");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingPremiumProgressBarViewModel

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionBufferStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionBufferStateDidChangeTo:(bool)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PremiumSearchViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook WazeAudioPlayer

+(id) sharedPlayer {
	%orig;
	NSLog(@"+(id) sharedPlayer");
}

+(id) kWazeBannerPriorityViewDismissing {
	%orig;
	NSLog(@"+(id) kWazeBannerPriorityViewDismissing");
}

+(double) kWazeBannerOffHeight {
	%orig;
	NSLog(@"+(double) kWazeBannerOffHeight");
}

+(double) wazeBannerHeight {
	%orig;
	NSLog(@"+(double) wazeBannerHeight");
}

+(id) kWazeBannerPriorityViewShowing {
	%orig;
	NSLog(@"+(id) kWazeBannerPriorityViewShowing");
}

-(bool) isIntegrationConnected {
	%orig;
	NSLog(@"-(bool) isIntegrationConnected");
}

-(bool) isExternalIntegrationAllowedToRun:(bool) withExposureLogging:(bool) {
	%orig;
	NSLog(@"-(bool) isExternalIntegrationAllowedToRun:(bool) withExposureLogging:(bool)");
}

-(void) initializeConfiguration {
	%orig;
	NSLog(@"-(void) initializeConfiguration");
}

-(bool) integrationWillHandleURLWithUrl:(id) options:(id) bypassCarCheck:(bool) {
	%orig;
	NSLog(@"-(bool) integrationWillHandleURLWithUrl:(id) options:(id) bypassCarCheck:(bool)");
}

-(bool) isExternalIntegrationAllowedToRun:(bool) {
	%orig;
	NSLog(@"-(bool) isExternalIntegrationAllowedToRun:(bool)");
}

-(bool) isWazeBannerShowing {
	%orig;
	NSLog(@"-(bool) isWazeBannerShowing");
}

-(void) logoutCompletedWithNotification:(id) {
	%orig;
	NSLog(@"-(void) logoutCompletedWithNotification:(id)");
}

-(void) wazeAudioPlayer:(id) didChangeConnectionStatus:(bool) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayer:(id) didChangeConnectionStatus:(bool)");
}

-(void) wazeAudioPlayerRequestedCloseBanner:(id) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayerRequestedCloseBanner:(id)");
}

-(void) wazeAudioPlayer:(id) didReceiveNavigationUpdate:(id) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayer:(id) didReceiveNavigationUpdate:(id)");
}

-(void) wazeAudioPlayer:(id) requestedSetIsPlaying:(bool) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayer:(id) requestedSetIsPlaying:(bool)");
}

-(void) wazeAudioPlayerRequestedPreviousTrack:(id) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayerRequestedPreviousTrack:(id)");
}

-(void) wazeAudioPlayerRequestedNextTrack:(id) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayerRequestedNextTrack:(id)");
}

-(void) wazeAudioPlayer:(id) requestedRewindWithDuration:(double) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayer:(id) requestedRewindWithDuration:(double)");
}

-(void) wazeAudioPlayer:(id) requestedFastForwardWithDuration:(double) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayer:(id) requestedFastForwardWithDuration:(double)");
}

-(void) wazeAudioPlayer:(id) requestedAction:(unsigned long long) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayer:(id) requestedAction:(unsigned long long)");
}

-(void) wazeAudioPlayer:(id) requestedChangePlaylist:(id) {
	%orig;
	NSLog(@"-(void) wazeAudioPlayer:(id) requestedChangePlaylist:(id)");
}

-(void) recommendations:(id) alreadySyncedAt:(id) {
	%orig;
	NSLog(@"-(void) recommendations:(id) alreadySyncedAt:(id)");
}

-(void) recommendationsDidRefresh {
	%orig;
	NSLog(@"-(void) recommendationsDidRefresh");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionBufferStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionBufferStateDidChangeTo:(bool)");
}

-(void) musicSessionShuffleModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionShuffleModeDidChangeTo:(long long)");
}

-(void) appWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) appWillResignActive:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) addObserver:(id) {
	%orig;
	NSLog(@"-(void) addObserver:(id)");
}

%end

%hook PMUncollectedStationCatalogViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMInstagramShareManager

+(id) defaultManager {
	%orig;
	NSLog(@"+(id) defaultManager");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMApplicationBackgroundFetchManager

-(void) startOn:(id) {
	%orig;
	NSLog(@"-(void) startOn:(id)");
}

-(void) updateAuth {
	%orig;
	NSLog(@"-(void) updateAuth");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFetcher:(id) {
	%orig;
	NSLog(@"-(id) initWithFetcher:(id)");
}

%end

%hook SonosCastSession

-(void) onDisconnectedWithError:(id) {
	%orig;
	NSLog(@"-(void) onDisconnectedWithError:(id)");
}

-(void) onConnected {
	%orig;
	NSLog(@"-(void) onConnected");
}

-(void) startPlaylist:(id) withContentInfo:(id) {
	%orig;
	NSLog(@"-(void) startPlaylist:(id) withContentInfo:(id)");
}

-(void) startStation:(id) withContentInfo:(id) forTrack:(id) {
	%orig;
	NSLog(@"-(void) startStation:(id) withContentInfo:(id) forTrack:(id)");
}

-(void) sendCommand:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) sendCommand:(id) withData:(id)");
}

-(void) closeSessionWithCloseApp:(bool) {
	%orig;
	NSLog(@"-(void) closeSessionWithCloseApp:(bool)");
}

-(bool) requestSessionStatus {
	%orig;
	NSLog(@"-(bool) requestSessionStatus");
}

-(void) requestMediaStatus {
	%orig;
	NSLog(@"-(void) requestMediaStatus");
}

-(void) notifyEnteringBackground {
	%orig;
	NSLog(@"-(void) notifyEnteringBackground");
}

-(void) startAlbum:(id) withContentInfo:(id) atTrack:(id) {
	%orig;
	NSLog(@"-(void) startAlbum:(id) withContentInfo:(id) atTrack:(id)");
}

-(void) sendCommand:(id) {
	%orig;
	NSLog(@"-(void) sendCommand:(id)");
}

-(void) skip {
	%orig;
	NSLog(@"-(void) skip");
}

-(bool) isActive {
	%orig;
	NSLog(@"-(bool) isActive");
}

-(void) open {
	%orig;
	NSLog(@"-(void) open");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(void) setVolume:(double) {
	%orig;
	NSLog(@"-(void) setVolume:(double)");
}

-(double) volume {
	%orig;
	NSLog(@"-(double) volume");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

-(id) castBridge {
	%orig;
	NSLog(@"-(id) castBridge");
}

-(void) progressTimerFired {
	%orig;
	NSLog(@"-(void) progressTimerFired");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PMUserInterventionOnStartTrigger

-(id) initWithNotificationCenter:(id) remoteCommandCenter:(id) {
	%orig;
	NSLog(@"-(id) initWithNotificationCenter:(id) remoteCommandCenter:(id)");
}

-(void) setOnStart:(id) {
	%orig;
	NSLog(@"-(void) setOnStart:(id)");
}

-(void) runGatedCall {
	%orig;
	NSLog(@"-(void) runGatedCall");
}

-(id) onStart {
	%orig;
	NSLog(@"-(id) onStart");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingTrackViewModel

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) activeTrackRatingDidChange:(long long) trackId:(id) stationId:(id) {
	%orig;
	NSLog(@"-(void) activeTrackRatingDidChange:(long long) trackId:(id) stationId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCC7Pandora34PremiumSearchResultsViewController33TemporaryCollectionViewDataSource

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

%end

%hook AccessoryLockScreenPresenter

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) offlineModeChangedWithNotification:(id) {
	%orig;
	NSLog(@"-(void) offlineModeChangedWithNotification:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SuperBrowseTableViewDataSource

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMOfflineStationsCollectionViewDataSource

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMHaymakerAdEventsObjcHelper

+(void) recordImpression:(id) {
	%orig;
	NSLog(@"+(void) recordImpression:(id)");
}

+(void) recordClick:(id) {
	%orig;
	NSLog(@"+(void) recordClick:(id)");
}

+(void) recordEngagement:(id) {
	%orig;
	NSLog(@"+(void) recordEngagement:(id)");
}

+(void) recordClose:(id) {
	%orig;
	NSLog(@"+(void) recordClose:(id)");
}

+(void) recordStart:(id) {
	%orig;
	NSLog(@"+(void) recordStart:(id)");
}

+(void) recordFirstQuartile:(id) {
	%orig;
	NSLog(@"+(void) recordFirstQuartile:(id)");
}

+(void) recordMidpoint:(id) {
	%orig;
	NSLog(@"+(void) recordMidpoint:(id)");
}

+(void) recordThirdQuartile:(id) {
	%orig;
	NSLog(@"+(void) recordThirdQuartile:(id)");
}

+(void) recordComplete:(id) {
	%orig;
	NSLog(@"+(void) recordComplete:(id)");
}

+(void) recordPause:(id) {
	%orig;
	NSLog(@"+(void) recordPause:(id)");
}

+(void) recordResume:(id) {
	%orig;
	NSLog(@"+(void) recordResume:(id)");
}

+(void) recordError:(id) {
	%orig;
	NSLog(@"+(void) recordError:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook RemoteKeys

+(id) dominantColor {
	%orig;
	NSLog(@"+(id) dominantColor");
}

+(id) receiverId {
	%orig;
	NSLog(@"+(id) receiverId");
}

+(id) castModel {
	%orig;
	NSLog(@"+(id) castModel");
}

+(id) deviceCategory_ios {
	%orig;
	NSLog(@"+(id) deviceCategory_ios");
}

+(id) deviceProperties {
	%orig;
	NSLog(@"+(id) deviceProperties");
}

+(id) iOS {
	%orig;
	NSLog(@"+(id) iOS");
}

+(id) artistExplorerUrl {
	%orig;
	NSLog(@"+(id) artistExplorerUrl");
}

+(id) stationToken {
	%orig;
	NSLog(@"+(id) stationToken");
}

+(id) content_info {
	%orig;
	NSLog(@"+(id) content_info");
}

+(id) content_id {
	%orig;
	NSLog(@"+(id) content_id");
}

+(id) skip_limit_triggered {
	%orig;
	NSLog(@"+(id) skip_limit_triggered");
}

+(id) non_interactive_skip_blocked {
	%orig;
	NSLog(@"+(id) non_interactive_skip_blocked");
}

+(id) listening_timeout_triggered {
	%orig;
	NSLog(@"+(id) listening_timeout_triggered");
}

+(id) close_stream_violation_dialog {
	%orig;
	NSLog(@"+(id) close_stream_violation_dialog");
}

+(id) stream_violation_triggered {
	%orig;
	NSLog(@"+(id) stream_violation_triggered");
}

+(id) cast_message {
	%orig;
	NSLog(@"+(id) cast_message");
}

+(id) cast_error_code {
	%orig;
	NSLog(@"+(id) cast_error_code");
}

+(id) trackResult {
	%orig;
	NSLog(@"+(id) trackResult");
}

+(id) PLAY_ALL {
	%orig;
	NSLog(@"+(id) PLAY_ALL");
}

+(id) REPLAY {
	%orig;
	NSLog(@"+(id) REPLAY");
}

+(id) replayTrackToken {
	%orig;
	NSLog(@"+(id) replayTrackToken");
}

+(id) THUMB_UP {
	%orig;
	NSLog(@"+(id) THUMB_UP");
}

+(id) THUMB_DOWN {
	%orig;
	NSLog(@"+(id) THUMB_DOWN");
}

+(id) DELETE_FEEDBACK {
	%orig;
	NSLog(@"+(id) DELETE_FEEDBACK");
}

+(id) SLEEP_TRACK {
	%orig;
	NSLog(@"+(id) SLEEP_TRACK");
}

+(id) REFRESH_STATION {
	%orig;
	NSLog(@"+(id) REFRESH_STATION");
}

+(id) PLAY_TRACK_AT_INDEX {
	%orig;
	NSLog(@"+(id) PLAY_TRACK_AT_INDEX");
}

+(id) EXPLICIT_FILTER {
	%orig;
	NSLog(@"+(id) EXPLICIT_FILTER");
}

+(id) REPEAT_MODE {
	%orig;
	NSLog(@"+(id) REPEAT_MODE");
}

+(id) SEEK {
	%orig;
	NSLog(@"+(id) SEEK");
}

+(id) SHUFFLE_MODE {
	%orig;
	NSLog(@"+(id) SHUFFLE_MODE");
}

+(id) SKIP_BACK {
	%orig;
	NSLog(@"+(id) SKIP_BACK");
}

+(id) SESSION_REQUEST_STATUS {
	%orig;
	NSLog(@"+(id) SESSION_REQUEST_STATUS");
}

+(id) ENTERING_BACKGROUND {
	%orig;
	NSLog(@"+(id) ENTERING_BACKGROUND");
}

+(id) LOAD {
	%orig;
	NSLog(@"+(id) LOAD");
}

+(id) MEDIA_STATUS {
	%orig;
	NSLog(@"+(id) MEDIA_STATUS");
}

+(id) albumDetails {
	%orig;
	NSLog(@"+(id) albumDetails");
}

+(id) artistDetails {
	%orig;
	NSLog(@"+(id) artistDetails");
}

+(id) deviceFriendlyName {
	%orig;
	NSLog(@"+(id) deviceFriendlyName");
}

+(id) playlistDetails {
	%orig;
	NSLog(@"+(id) playlistDetails");
}

+(id) shuffleSeed {
	%orig;
	NSLog(@"+(id) shuffleSeed");
}

+(id) startPandoraId {
	%orig;
	NSLog(@"+(id) startPandoraId");
}

+(id) topTracks {
	%orig;
	NSLog(@"+(id) topTracks");
}

+(id) trackDetails {
	%orig;
	NSLog(@"+(id) trackDetails");
}

+(id) contextTracks {
	%orig;
	NSLog(@"+(id) contextTracks");
}

+(id) isHostedPlaylist {
	%orig;
	NSLog(@"+(id) isHostedPlaylist");
}

+(id) reauthenticate {
	%orig;
	NSLog(@"+(id) reauthenticate");
}

+(id) REPLAY_CURRENT_TRACK {
	%orig;
	NSLog(@"+(id) REPLAY_CURRENT_TRACK");
}

+(id) SHUFFLE_ALL_TRACKS {
	%orig;
	NSLog(@"+(id) SHUFFLE_ALL_TRACKS");
}

+(id) SET_SHUFFLE_MODE {
	%orig;
	NSLog(@"+(id) SET_SHUFFLE_MODE");
}

+(id) UPDATE_EXPLICIT_FILTER {
	%orig;
	NSLog(@"+(id) UPDATE_EXPLICIT_FILTER");
}

+(id) SLEEP_CURRENT_TRACK {
	%orig;
	NSLog(@"+(id) SLEEP_CURRENT_TRACK");
}

+(id) SET_REPEAT_MODE {
	%orig;
	NSLog(@"+(id) SET_REPEAT_MODE");
}

+(id) SET_RATING {
	%orig;
	NSLog(@"+(id) SET_RATING");
}

+(id) POSITIVE {
	%orig;
	NSLog(@"+(id) POSITIVE");
}

+(id) NEGATIVE {
	%orig;
	NSLog(@"+(id) NEGATIVE");
}

+(id) NEUTRAL {
	%orig;
	NSLog(@"+(id) NEUTRAL");
}

+(id) GET_PANDORA_STATUS {
	%orig;
	NSLog(@"+(id) GET_PANDORA_STATUS");
}

+(id) PANDORA_STATUS {
	%orig;
	NSLog(@"+(id) PANDORA_STATUS");
}

+(id) DISCONNECT {
	%orig;
	NSLog(@"+(id) DISCONNECT");
}

+(id) BAD_REQUEST {
	%orig;
	NSLog(@"+(id) BAD_REQUEST");
}

+(id) RECEIVER_ERROR {
	%orig;
	NSLog(@"+(id) RECEIVER_ERROR");
}

+(id) TIME_TICK {
	%orig;
	NSLog(@"+(id) TIME_TICK");
}

+(id) SKIP_FORWARD {
	%orig;
	NSLog(@"+(id) SKIP_FORWARD");
}

+(id) artId {
	%orig;
	NSLog(@"+(id) artId");
}

+(id) trackGain {
	%orig;
	NSLog(@"+(id) trackGain");
}

+(id) trackIds {
	%orig;
	NSLog(@"+(id) trackIds");
}

+(id) ceSessionToken {
	%orig;
	NSLog(@"+(id) ceSessionToken");
}

+(id) albumArtUrl {
	%orig;
	NSLog(@"+(id) albumArtUrl");
}

+(id) songRating {
	%orig;
	NSLog(@"+(id) songRating");
}

+(id) allowFeedback {
	%orig;
	NSLog(@"+(id) allowFeedback");
}

+(id) trackToken {
	%orig;
	NSLog(@"+(id) trackToken");
}

+(id) allowReplay {
	%orig;
	NSLog(@"+(id) allowReplay");
}

+(id) albumArt {
	%orig;
	NSLog(@"+(id) albumArt");
}

+(id) deviceCategory {
	%orig;
	NSLog(@"+(id) deviceCategory");
}

+(id) facebookId {
	%orig;
	NSLog(@"+(id) facebookId");
}

+(id) facebookName {
	%orig;
	NSLog(@"+(id) facebookName");
}

+(id) replaysRemaining {
	%orig;
	NSLog(@"+(id) replaysRemaining");
}

+(id) skipsRemaining {
	%orig;
	NSLog(@"+(id) skipsRemaining");
}

+(id) trackId {
	%orig;
	NSLog(@"+(id) trackId");
}

+(id) audioUrl {
	%orig;
	NSLog(@"+(id) audioUrl");
}

+(id) songDetailUrl {
	%orig;
	NSLog(@"+(id) songDetailUrl");
}

+(id) pandoraId {
	%orig;
	NSLog(@"+(id) pandoraId");
}

+(id) musicId {
	%orig;
	NSLog(@"+(id) musicId");
}

+(id) autoplaySourceId {
	%orig;
	NSLog(@"+(id) autoplaySourceId");
}

+(id) pandoraType {
	%orig;
	NSLog(@"+(id) pandoraType");
}

+(id) track {
	%orig;
	NSLog(@"+(id) track");
}

+(id) sourceId {
	%orig;
	NSLog(@"+(id) sourceId");
}

+(id) startIndex {
	%orig;
	NSLog(@"+(id) startIndex");
}

+(id) rating {
	%orig;
	NSLog(@"+(id) rating");
}

+(id) timeElapsed {
	%orig;
	NSLog(@"+(id) timeElapsed");
}

+(id) requestId {
	%orig;
	NSLog(@"+(id) requestId");
}

+(id) current {
	%orig;
	NSLog(@"+(id) current");
}

+(id) timeRemaining {
	%orig;
	NSLog(@"+(id) timeRemaining");
}

+(id) annotations {
	%orig;
	NSLog(@"+(id) annotations");
}

+(id) playbackMode {
	%orig;
	NSLog(@"+(id) playbackMode");
}

+(id) releaseDate {
	%orig;
	NSLog(@"+(id) releaseDate");
}

+(id) shuffleMode {
	%orig;
	NSLog(@"+(id) shuffleMode");
}

+(id) appVersion {
	%orig;
	NSLog(@"+(id) appVersion");
}

+(id) tracks {
	%orig;
	NSLog(@"+(id) tracks");
}

+(id) albumName {
	%orig;
	NSLog(@"+(id) albumName");
}

+(id) albumTitle {
	%orig;
	NSLog(@"+(id) albumTitle");
}

+(id) senderId {
	%orig;
	NSLog(@"+(id) senderId");
}

+(id) src {
	%orig;
	NSLog(@"+(id) src");
}

+(id) artistName {
	%orig;
	NSLog(@"+(id) artistName");
}

+(id) userAgent {
	%orig;
	NSLog(@"+(id) userAgent");
}

+(id) userId {
	%orig;
	NSLog(@"+(id) userId");
}

+(id) increment {
	%orig;
	NSLog(@"+(id) increment");
}

+(id) stationId {
	%orig;
	NSLog(@"+(id) stationId");
}

+(id) trackLength {
	%orig;
	NSLog(@"+(id) trackLength");
}

+(id) autoPlayEnabled {
	%orig;
	NSLog(@"+(id) autoPlayEnabled");
}

+(id) autoplay {
	%orig;
	NSLog(@"+(id) autoplay");
}

+(id) repeatMode {
	%orig;
	NSLog(@"+(id) repeatMode");
}

+(id) itemId {
	%orig;
	NSLog(@"+(id) itemId");
}

+(id) songName {
	%orig;
	NSLog(@"+(id) songName");
}

+(id) bitrate {
	%orig;
	NSLog(@"+(id) bitrate");
}

+(id) size {
	%orig;
	NSLog(@"+(id) size");
}

+(id) name {
	%orig;
	NSLog(@"+(id) name");
}

+(id) message {
	%orig;
	NSLog(@"+(id) message");
}

+(id) type {
	%orig;
	NSLog(@"+(id) type");
}

+(id) reason {
	%orig;
	NSLog(@"+(id) reason");
}

+(id) value {
	%orig;
	NSLog(@"+(id) value");
}

+(id) duration {
	%orig;
	NSLog(@"+(id) duration");
}

+(id) icon {
	%orig;
	NSLog(@"+(id) icon");
}

+(id) source {
	%orig;
	NSLog(@"+(id) source");
}

+(id) position {
	%orig;
	NSLog(@"+(id) position");
}

+(id) contextId {
	%orig;
	NSLog(@"+(id) contextId");
}

+(id) index {
	%orig;
	NSLog(@"+(id) index");
}

+(id) sourceType {
	%orig;
	NSLog(@"+(id) sourceType");
}

+(id) level {
	%orig;
	NSLog(@"+(id) level");
}

+(id) url {
	%orig;
	NSLog(@"+(id) url");
}

+(id) interactions {
	%orig;
	NSLog(@"+(id) interactions");
}

+(id) elapsedTime {
	%orig;
	NSLog(@"+(id) elapsedTime");
}

+(id) volume {
	%orig;
	NSLog(@"+(id) volume");
}

+(id) status {
	%orig;
	NSLog(@"+(id) status");
}

+(id) data {
	%orig;
	NSLog(@"+(id) data");
}

+(id) token {
	%orig;
	NSLog(@"+(id) token");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook BrowseRankedViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSnapConnectManager

+(id) defaultManager {
	%orig;
	NSLog(@"+(id) defaultManager");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CellImpressionTracker

-(void) didReachTimeForImpression {
	%orig;
	NSLog(@"-(void) didReachTimeForImpression");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMShareBarButtonController

-(id) initWithShareableItem:(id) viewController:(id) {
	%orig;
	NSLog(@"-(id) initWithShareableItem:(id) viewController:(id)");
}

-(void) showTeachmarkFrom:(id) {
	%orig;
	NSLog(@"-(void) showTeachmarkFrom:(id)");
}

-(void) setShareableItem:(id) {
	%orig;
	NSLog(@"-(void) setShareableItem:(id)");
}

-(id) initWithShareableItem:(id) viewController:(id) device:(id) {
	%orig;
	NSLog(@"-(id) initWithShareableItem:(id) viewController:(id) device:(id)");
}

-(id) shareableItem {
	%orig;
	NSLog(@"-(id) shareableItem");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) pressed {
	%orig;
	NSLog(@"-(void) pressed");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

%end

%hook PMMyMediaInteractor

-(bool) shouldShowCalloutOfType:(long long) {
	%orig;
	NSLog(@"-(bool) shouldShowCalloutOfType:(long long)");
}

-(void) calloutDismissedOfType:(long long) withAction:(long long) {
	%orig;
	NSLog(@"-(void) calloutDismissedOfType:(long long) withAction:(long long)");
}

-(void) didTryToShowCallout {
	%orig;
	NSLog(@"-(void) didTryToShowCallout");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) recommendations:(id) alreadySyncedAt:(id) {
	%orig;
	NSLog(@"-(void) recommendations:(id) alreadySyncedAt:(id)");
}

-(void) recommendationsDidRefresh {
	%orig;
	NSLog(@"-(void) recommendationsDidRefresh");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook ArtistBasedStationModel

-(float) badgeDownloadProgress {
	%orig;
	NSLog(@"-(float) badgeDownloadProgress");
}

-(bool) shouldHide:(long long) in:(long long) {
	%orig;
	NSLog(@"-(bool) shouldHide:(long long) in:(long long)");
}

-(bool) useCircularImageFor:(long long) {
	%orig;
	NSLog(@"-(bool) useCircularImageFor:(long long)");
}

-(id) getPandoraId {
	%orig;
	NSLog(@"-(id) getPandoraId");
}

-(bool) hasAnnotation {
	%orig;
	NSLog(@"-(bool) hasAnnotation");
}

-(bool) getIsAvailableOffline {
	%orig;
	NSLog(@"-(bool) getIsAvailableOffline");
}

-(id) primaryTitleFor:(long long) {
	%orig;
	NSLog(@"-(id) primaryTitleFor:(long long)");
}

-(id) secondaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) {
	%orig;
	NSLog(@"-(id) secondaryTitleFor:(long long) shouldShowDownloadsOnly:(bool)");
}

-(id) tertiaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) shouldDisregardUserCollection:(bool) {
	%orig;
	NSLog(@"-(id) tertiaryTitleFor:(long long) shouldShowDownloadsOnly:(bool) shouldDisregardUserCollection:(bool)");
}

-(id) mediaImageURLStringFor:(long long) {
	%orig;
	NSLog(@"-(id) mediaImageURLStringFor:(long long)");
}

-(id) mediaImageFor:(long long) {
	%orig;
	NSLog(@"-(id) mediaImageFor:(long long)");
}

-(id) iconDominantColorFor:(long long) {
	%orig;
	NSLog(@"-(id) iconDominantColorFor:(long long)");
}

-(long long) badgeAvailability {
	%orig;
	NSLog(@"-(long long) badgeAvailability");
}

-(long long) badgeExplicitness {
	%orig;
	NSLog(@"-(long long) badgeExplicitness");
}

-(long long) badgeCollectionState {
	%orig;
	NSLog(@"-(long long) badgeCollectionState");
}

-(id) getDefaultImageFor:(long long) {
	%orig;
	NSLog(@"-(id) getDefaultImageFor:(long long)");
}

-(id) itemType {
	%orig;
	NSLog(@"-(id) itemType");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PremiumAdViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CastManagerImpl

-(void) disconnectActiveSession {
	%orig;
	NSLog(@"-(void) disconnectActiveSession");
}

-(void) localRemoteControlDisconnect {
	%orig;
	NSLog(@"-(void) localRemoteControlDisconnect");
}

-(void) switchEnvironment:(id) {
	%orig;
	NSLog(@"-(void) switchEnvironment:(id)");
}

-(bool) isShowingCastOptions {
	%orig;
	NSLog(@"-(bool) isShowingCastOptions");
}

-(bool) userIsCasting {
	%orig;
	NSLog(@"-(bool) userIsCasting");
}

-(double) castingVolume {
	%orig;
	NSLog(@"-(double) castingVolume");
}

-(void) presentCastOptionsFrom:(id) orViewController:(id) {
	%orig;
	NSLog(@"-(void) presentCastOptionsFrom:(id) orViewController:(id)");
}

-(id) selectedDevice {
	%orig;
	NSLog(@"-(id) selectedDevice");
}

-(void) popoverManager:(id) didDismissViewController:(id) {
	%orig;
	NSLog(@"-(void) popoverManager:(id) didDismissViewController:(id)");
}

-(void) showAlertWithTitle:(id) message:(id) {
	%orig;
	NSLog(@"-(void) showAlertWithTitle:(id) message:(id)");
}

-(id) findActiveCastingDevice:(id) {
	%orig;
	NSLog(@"-(id) findActiveCastingDevice:(id)");
}

-(void) connectTo:(id) {
	%orig;
	NSLog(@"-(void) connectTo:(id)");
}

-(bool) disconnectedByRemote {
	%orig;
	NSLog(@"-(bool) disconnectedByRemote");
}

-(bool) disconnectedOnBackground {
	%orig;
	NSLog(@"-(bool) disconnectedOnBackground");
}

-(id) castBridge {
	%orig;
	NSLog(@"-(id) castBridge");
}

-(void) showCastAlertWithError:(long long) {
	%orig;
	NSLog(@"-(void) showCastAlertWithError:(long long)");
}

-(void) disconnectActiveSessionAndCloseAppAtDestination:(bool) disableReconnect:(bool) disableResume:(bool) {
	%orig;
	NSLog(@"-(void) disconnectActiveSessionAndCloseAppAtDestination:(bool) disableReconnect:(bool) disableResume:(bool)");
}

-(void) showAlertMessage:(id) {
	%orig;
	NSLog(@"-(void) showAlertMessage:(id)");
}

-(void) handleRemoteRadioVolumeUpdate:(double) {
	%orig;
	NSLog(@"-(void) handleRemoteRadioVolumeUpdate:(double)");
}

-(void) setVolumeIncrement:(float) {
	%orig;
	NSLog(@"-(void) setVolumeIncrement:(float)");
}

-(bool) castDiscoveryShouldRunInBackground:(id) {
	%orig;
	NSLog(@"-(bool) castDiscoveryShouldRunInBackground:(id)");
}

-(void) castDiscoveryFoundDevice:(id) {
	%orig;
	NSLog(@"-(void) castDiscoveryFoundDevice:(id)");
}

-(void) castDiscoveryLostDevice:(id) {
	%orig;
	NSLog(@"-(void) castDiscoveryLostDevice:(id)");
}

-(void) refreshDevices {
	%orig;
	NSLog(@"-(void) refreshDevices");
}

-(void) searchForDevices {
	%orig;
	NSLog(@"-(void) searchForDevices");
}

-(id) volumeObservers {
	%orig;
	NSLog(@"-(id) volumeObservers");
}

-(void) setVolumeObservers:(id) {
	%orig;
	NSLog(@"-(void) setVolumeObservers:(id)");
}

-(id) discoveryAgents {
	%orig;
	NSLog(@"-(id) discoveryAgents");
}

-(void) setDiscoveryAgents:(id) {
	%orig;
	NSLog(@"-(void) setDiscoveryAgents:(id)");
}

-(void) setRequestInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setRequestInProgress:(bool)");
}

-(bool) shouldReconnectOnStartup {
	%orig;
	NSLog(@"-(bool) shouldReconnectOnStartup");
}

-(void) setShouldReconnectOnStartup:(bool) {
	%orig;
	NSLog(@"-(void) setShouldReconnectOnStartup:(bool)");
}

-(bool) didSendVolume {
	%orig;
	NSLog(@"-(bool) didSendVolume");
}

-(void) setDidSendVolume:(bool) {
	%orig;
	NSLog(@"-(void) setDidSendVolume:(bool)");
}

-(bool) didRestoreSystemVolume {
	%orig;
	NSLog(@"-(bool) didRestoreSystemVolume");
}

-(void) setDidRestoreSystemVolume:(bool) {
	%orig;
	NSLog(@"-(void) setDidRestoreSystemVolume:(bool)");
}

-(double) preCastVolume {
	%orig;
	NSLog(@"-(double) preCastVolume");
}

-(void) setPreCastVolume:(double) {
	%orig;
	NSLog(@"-(void) setPreCastVolume:(double)");
}

-(double) lastLocalVolume {
	%orig;
	NSLog(@"-(double) lastLocalVolume");
}

-(void) setLastLocalVolume:(double) {
	%orig;
	NSLog(@"-(void) setLastLocalVolume:(double)");
}

-(long long) statusesSinceVolumeChange {
	%orig;
	NSLog(@"-(long long) statusesSinceVolumeChange");
}

-(void) setStatusesSinceVolumeChange:(long long) {
	%orig;
	NSLog(@"-(void) setStatusesSinceVolumeChange:(long long)");
}

-(void) setCastingVolume:(double) {
	%orig;
	NSLog(@"-(void) setCastingVolume:(double)");
}

-(double) castVolumeIncrement {
	%orig;
	NSLog(@"-(double) castVolumeIncrement");
}

-(void) setCastVolumeIncrement:(double) {
	%orig;
	NSLog(@"-(void) setCastVolumeIncrement:(double)");
}

-(id) modalNavigationController {
	%orig;
	NSLog(@"-(id) modalNavigationController");
}

-(void) setModalNavigationController:(id) {
	%orig;
	NSLog(@"-(void) setModalNavigationController:(id)");
}

-(void) setConnectionTimeoutTimer:(id) {
	%orig;
	NSLog(@"-(void) setConnectionTimeoutTimer:(id)");
}

-(id) castAlertController {
	%orig;
	NSLog(@"-(id) castAlertController");
}

-(void) setCastAlertController:(id) {
	%orig;
	NSLog(@"-(void) setCastAlertController:(id)");
}

-(id) savedDevice {
	%orig;
	NSLog(@"-(id) savedDevice");
}

-(void) setSavedDevice:(id) {
	%orig;
	NSLog(@"-(void) setSavedDevice:(id)");
}

-(double) lastVolumeChangeTime {
	%orig;
	NSLog(@"-(double) lastVolumeChangeTime");
}

-(void) setLastVolumeChangeTime:(double) {
	%orig;
	NSLog(@"-(void) setLastVolumeChangeTime:(double)");
}

-(void) setVolumeView:(id) {
	%orig;
	NSLog(@"-(void) setVolumeView:(id)");
}

-(id) remoteRadio {
	%orig;
	NSLog(@"-(id) remoteRadio");
}

-(void) setRemoteRadio:(id) {
	%orig;
	NSLog(@"-(void) setRemoteRadio:(id)");
}

-(void) setDisconnectedOnBackground:(bool) {
	%orig;
	NSLog(@"-(void) setDisconnectedOnBackground:(bool)");
}

-(void) setSelectedDevice:(id) {
	%orig;
	NSLog(@"-(void) setSelectedDevice:(id)");
}

-(void) setDisconnectedByRemote:(bool) {
	%orig;
	NSLog(@"-(void) setDisconnectedByRemote:(bool)");
}

-(void) notifyObserversWithSelector:(SEL) withObject:(id) {
	%orig;
	NSLog(@"-(void) notifyObserversWithSelector:(SEL) withObject:(id)");
}

-(void) onLogout {
	%orig;
	NSLog(@"-(void) onLogout");
}

-(void) onLogin {
	%orig;
	NSLog(@"-(void) onLogin");
}

-(void) checkForReconnectOnStartup {
	%orig;
	NSLog(@"-(void) checkForReconnectOnStartup");
}

-(void) setupReconnectEvents {
	%orig;
	NSLog(@"-(void) setupReconnectEvents");
}

-(void) showReconnectingAlert {
	%orig;
	NSLog(@"-(void) showReconnectingAlert");
}

-(double) reconnectOnStartupDelayBeforeDisplayingAlert {
	%orig;
	NSLog(@"-(double) reconnectOnStartupDelayBeforeDisplayingAlert");
}

-(double) reconnectOnStartupTimeout {
	%orig;
	NSLog(@"-(double) reconnectOnStartupTimeout");
}

-(void) cancelReconnectOnStartup {
	%orig;
	NSLog(@"-(void) cancelReconnectOnStartup");
}

-(void) startConnectionAttempt {
	%orig;
	NSLog(@"-(void) startConnectionAttempt");
}

-(void) clearCastSessionPersistence {
	%orig;
	NSLog(@"-(void) clearCastSessionPersistence");
}

-(void) clearCastSessionPersistence:(bool) {
	%orig;
	NSLog(@"-(void) clearCastSessionPersistence:(bool)");
}

-(bool) isConnectedToDevice:(id) {
	%orig;
	NSLog(@"-(bool) isConnectedToDevice:(id)");
}

-(void) connectionTimeoutElapsed {
	%orig;
	NSLog(@"-(void) connectionTimeoutElapsed");
}

-(bool) presentAlertIfNecessary {
	%orig;
	NSLog(@"-(bool) presentAlertIfNecessary");
}

-(void) handleAlertWithTrack:(id) {
	%orig;
	NSLog(@"-(void) handleAlertWithTrack:(id)");
}

-(void) requestCESessionToken {
	%orig;
	NSLog(@"-(void) requestCESessionToken");
}

-(void) requestCESessionTokenWithRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) requestCESessionTokenWithRequest:(id) finishedWithResult:(id)");
}

-(void) requestCESessionTokenWithRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) requestCESessionTokenWithRequest:(id) failedWithErrorCode:(long long)");
}

-(void) disconnectActiveSessionAndCloseAppAtDestination:(bool) disableReconnect:(bool) {
	%orig;
	NSLog(@"-(void) disconnectActiveSessionAndCloseAppAtDestination:(bool) disableReconnect:(bool)");
}

-(float) localDeviceVolume {
	%orig;
	NSLog(@"-(float) localDeviceVolume");
}

-(void) reEnableVolumeView {
	%orig;
	NSLog(@"-(void) reEnableVolumeView");
}

-(void) disableVolumeView {
	%orig;
	NSLog(@"-(void) disableVolumeView");
}

-(void) setLocalDeviceVolume:(float) {
	%orig;
	NSLog(@"-(void) setLocalDeviceVolume:(float)");
}

-(long long) checkVolumeDirection:(double) {
	%orig;
	NSLog(@"-(long long) checkVolumeDirection:(double)");
}

-(void) sendCastingVolume:(double) {
	%orig;
	NSLog(@"-(void) sendCastingVolume:(double)");
}

-(void) stopDeviceSearch {
	%orig;
	NSLog(@"-(void) stopDeviceSearch");
}

-(void) disconnectFrom:(id) {
	%orig;
	NSLog(@"-(void) disconnectFrom:(id)");
}

-(void) switchFrom:(id) to:(id) {
	%orig;
	NSLog(@"-(void) switchFrom:(id) to:(id)");
}

-(void) castDeviceRemoved {
	%orig;
	NSLog(@"-(void) castDeviceRemoved");
}

-(void) dismissCastOptions {
	%orig;
	NSLog(@"-(void) dismissCastOptions");
}

-(void) notifyVolumeObserversWithSelector:(SEL) withObject:(id) {
	%orig;
	NSLog(@"-(void) notifyVolumeObserversWithSelector:(SEL) withObject:(id)");
}

-(void) session:(id) failedToStartWithError:(id) showError:(bool) {
	%orig;
	NSLog(@"-(void) session:(id) failedToStartWithError:(id) showError:(bool)");
}

-(void) session:(id) failedToConnectWithError:(id) {
	%orig;
	NSLog(@"-(void) session:(id) failedToConnectWithError:(id)");
}

-(void) session:(id) endedWithError:(id) {
	%orig;
	NSLog(@"-(void) session:(id) endedWithError:(id)");
}

-(void) session:(id) volumeDidUpdate:(float) {
	%orig;
	NSLog(@"-(void) session:(id) volumeDidUpdate:(float)");
}

-(void) session:(id) didReceiveSessionStatus:(id) {
	%orig;
	NSLog(@"-(void) session:(id) didReceiveSessionStatus:(id)");
}

-(void) session:(id) didReceiveDisconnectRequest:(id) {
	%orig;
	NSLog(@"-(void) session:(id) didReceiveDisconnectRequest:(id)");
}

-(void) setIsReconnecting:(bool) {
	%orig;
	NSLog(@"-(void) setIsReconnecting:(bool)");
}

-(void) audioOutputVolumeChanged:(id) dueToChangeReason:(id) {
	%orig;
	NSLog(@"-(void) audioOutputVolumeChanged:(id) dueToChangeReason:(id)");
}

-(id) radio {
	%orig;
	NSLog(@"-(id) radio");
}

-(void) radioNetworkDidUpdate {
	%orig;
	NSLog(@"-(void) radioNetworkDidUpdate");
}

-(void) radioNetworkTypeDidChange {
	%orig;
	NSLog(@"-(void) radioNetworkTypeDidChange");
}

-(bool) isAnObserver:(id) {
	%orig;
	NSLog(@"-(bool) isAnObserver:(id)");
}

-(bool) requestInProgress {
	%orig;
	NSLog(@"-(bool) requestInProgress");
}

-(id) deviceSet {
	%orig;
	NSLog(@"-(id) deviceSet");
}

-(void) setDeviceSet:(id) {
	%orig;
	NSLog(@"-(void) setDeviceSet:(id)");
}

-(bool) hasActiveSession {
	%orig;
	NSLog(@"-(bool) hasActiveSession");
}

-(bool) isReconnecting {
	%orig;
	NSLog(@"-(bool) isReconnecting");
}

-(id) volumeView {
	%orig;
	NSLog(@"-(id) volumeView");
}

-(bool) isConnecting {
	%orig;
	NSLog(@"-(bool) isConnecting");
}

-(void) setRadio:(id) {
	%orig;
	NSLog(@"-(void) setRadio:(id)");
}

-(id) connectionTimeoutTimer {
	%orig;
	NSLog(@"-(id) connectionTimeoutTimer");
}

-(id) deviceList {
	%orig;
	NSLog(@"-(id) deviceList");
}

-(void) setAlertHandler:(id) {
	%orig;
	NSLog(@"-(void) setAlertHandler:(id)");
}

-(id) alertHandler {
	%orig;
	NSLog(@"-(id) alertHandler");
}

-(void) setIsConnecting:(bool) {
	%orig;
	NSLog(@"-(void) setIsConnecting:(bool)");
}

-(void) remove:(id) {
	%orig;
	NSLog(@"-(void) remove:(id)");
}

-(void) sessionDidStart:(id) {
	%orig;
	NSLog(@"-(void) sessionDidStart:(id)");
}

-(void) add:(id) {
	%orig;
	NSLog(@"-(void) add:(id)");
}

-(void) addVolumeObserver:(id) {
	%orig;
	NSLog(@"-(void) addVolumeObserver:(id)");
}

-(void) removeVolumeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeVolumeObserver:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) parentViewController {
	%orig;
	NSLog(@"-(id) parentViewController");
}

-(void) setObservers:(id) {
	%orig;
	NSLog(@"-(void) setObservers:(id)");
}

-(id) observers {
	%orig;
	NSLog(@"-(id) observers");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(void) setParentViewController:(id) {
	%orig;
	NSLog(@"-(void) setParentViewController:(id)");
}

-(void) applicationWillEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) applicationWillEnterForeground:(id)");
}

-(void) applicationDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) applicationDidEnterBackground:(id)");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook PMLevel2ContainerFactory

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMToLevel2SLAPViewTransition

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook PMStationThumbsTableViewDelegate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

%end

%hook PMInteractiveModalTransition

-(id) animationControllerForPresentedController:(id) presentingController:(id) sourceController:(id) {
	%orig;
	NSLog(@"-(id) animationControllerForPresentedController:(id) presentingController:(id) sourceController:(id)");
}

-(id) animationControllerForDismissedController:(id) {
	%orig;
	NSLog(@"-(id) animationControllerForDismissedController:(id)");
}

-(id) interactionControllerForPresentation:(id) {
	%orig;
	NSLog(@"-(id) interactionControllerForPresentation:(id)");
}

-(id) interactionControllerForDismissal:(id) {
	%orig;
	NSLog(@"-(id) interactionControllerForDismissal:(id)");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(void) startInteractiveTransition:(id) {
	%orig;
	NSLog(@"-(void) startInteractiveTransition:(id)");
}

-(void) handlePan:(id) {
	%orig;
	NSLog(@"-(void) handlePan:(id)");
}

-(id) initWithDisplayDelegate:(id) inCollapseMode:(bool) {
	%orig;
	NSLog(@"-(id) initWithDisplayDelegate:(id) inCollapseMode:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMItunesStoreServiceFactory

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook URLFileProviderFactory

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMInAppPurchasingNetworkService

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMShareMethodManager

+(id) buildWithSource:(id) model:(id) navigationManager:(id) onDemandManager:(id) snapConnectManager:(id) instagramShareManager:(id) mediaItem:(id) moc:(id) {
	%orig;
	NSLog(@"+(id) buildWithSource:(id) model:(id) navigationManager:(id) onDemandManager:(id) snapConnectManager:(id) instagramShareManager:(id) mediaItem:(id) moc:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMPremiumAccessUtilities

-(void) playLTUXTone {
	%orig;
	NSLog(@"-(void) playLTUXTone");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMCastDiscovery

-(void) scanner:(id) foundDevice:(id) {
	%orig;
	NSLog(@"-(void) scanner:(id) foundDevice:(id)");
}

-(void) scanner:(id) lostDevice:(id) {
	%orig;
	NSLog(@"-(void) scanner:(id) lostDevice:(id)");
}

-(void) scannerDidRefreshDevices:(id) {
	%orig;
	NSLog(@"-(void) scannerDidRefreshDevices:(id)");
}

-(bool) scannerShouldRunInBackground:(id) {
	%orig;
	NSLog(@"-(bool) scannerShouldRunInBackground:(id)");
}

-(id) initWithDelegate:(id) scanner:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) scanner:(id)");
}

-(void) clearDeviceList {
	%orig;
	NSLog(@"-(void) clearDeviceList");
}

-(void) startScan {
	%orig;
	NSLog(@"-(void) startScan");
}

-(id) devices {
	%orig;
	NSLog(@"-(id) devices");
}

-(void) stopScan {
	%orig;
	NSLog(@"-(void) stopScan");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSpotlightManager

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) array:(id) didInsertWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didInsertWithUpdate:(id)");
}

-(void) array:(id) didRemoveWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didRemoveWithUpdate:(id)");
}

-(void) arrayDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) arrayDidRefresh:(id)");
}

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(void) handleOpenStationWithStationId:(id) {
	%orig;
	NSLog(@"-(void) handleOpenStationWithStationId:(id)");
}

-(void) clearStationListIndex {
	%orig;
	NSLog(@"-(void) clearStationListIndex");
}

-(void) startMonitoring {
	%orig;
	NSLog(@"-(void) startMonitoring");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMApplicationShortcutManager

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(id) initWithLaunchOptions:(id) application:(id) musicSessionManager:(id) notificationCenter:(?) offlineManager:(id) stationManager:(id) statsCollector:(id) subscriptionManager:(id) radio:(id) {
	%orig;
	NSLog(@"-(id) initWithLaunchOptions:(id) application:(id) musicSessionManager:(id) notificationCenter:(?) offlineManager:(id) stationManager:(id) statsCollector:(id) subscriptionManager:(id) radio:(id)");
}

-(bool) didShortcutLaunchApplication {
	%orig;
	NSLog(@"-(bool) didShortcutLaunchApplication");
}

-(void) handleLaunchedShortcutItem {
	%orig;
	NSLog(@"-(void) handleLaunchedShortcutItem");
}

-(void) handleWithShortcutItem:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) handleWithShortcutItem:(id) completion:(id)");
}

-(void) handleOfflineStateChanged {
	%orig;
	NSLog(@"-(void) handleOfflineStateChanged");
}

-(void) handleSubscriptionStateChanged {
	%orig;
	NSLog(@"-(void) handleSubscriptionStateChanged");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMLevel2WebContainerShareController

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMStationCatalogEditTableViewDataSource

-(void) artistMessagingValueChangedWithSender:(id) {
	%orig;
	NSLog(@"-(void) artistMessagingValueChangedWithSender:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) tableView:(id) commitEditingStyle:(long long) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) commitEditingStyle:(long long) forRowAtIndexPath:(id)");
}

%end

%hook UniversalLinkNavigationRouter

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMCastSession

-(void) session:(id) statusDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) session:(id) statusDidUpdate:(id)");
}

-(void) session:(id) timeTickDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) session:(id) timeTickDidUpdate:(id)");
}

-(void) session:(id) failedToStartWithError:(id) showError:(bool) {
	%orig;
	NSLog(@"-(void) session:(id) failedToStartWithError:(id) showError:(bool)");
}

-(void) session:(id) failedToConnectWithError:(id) {
	%orig;
	NSLog(@"-(void) session:(id) failedToConnectWithError:(id)");
}

-(void) session:(id) endedWithError:(id) {
	%orig;
	NSLog(@"-(void) session:(id) endedWithError:(id)");
}

-(void) session:(id) volumeDidUpdate:(float) {
	%orig;
	NSLog(@"-(void) session:(id) volumeDidUpdate:(float)");
}

-(void) session:(id) didReceiveSessionStatus:(id) {
	%orig;
	NSLog(@"-(void) session:(id) didReceiveSessionStatus:(id)");
}

-(void) session:(id) didReceiveDisconnectRequest:(id) {
	%orig;
	NSLog(@"-(void) session:(id) didReceiveDisconnectRequest:(id)");
}

-(void) sessionDidStart:(id) {
	%orig;
	NSLog(@"-(void) sessionDidStart:(id)");
}

-(void) startPlaylist:(id) withContentInfo:(id) {
	%orig;
	NSLog(@"-(void) startPlaylist:(id) withContentInfo:(id)");
}

-(bool) shouldSendTrackJson {
	%orig;
	NSLog(@"-(bool) shouldSendTrackJson");
}

-(void) startStation:(id) withContentInfo:(id) forTrack:(id) {
	%orig;
	NSLog(@"-(void) startStation:(id) withContentInfo:(id) forTrack:(id)");
}

-(void) sendCommand:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) sendCommand:(id) withData:(id)");
}

-(bool) willReplaceExistingContentOnSessionStart {
	%orig;
	NSLog(@"-(bool) willReplaceExistingContentOnSessionStart");
}

-(void) setWillReplaceExistingContentOnSessionStart:(bool) {
	%orig;
	NSLog(@"-(void) setWillReplaceExistingContentOnSessionStart:(bool)");
}

-(void) setShouldSendTrackJson:(bool) {
	%orig;
	NSLog(@"-(void) setShouldSendTrackJson:(bool)");
}

-(bool) reauthOnStartStation {
	%orig;
	NSLog(@"-(bool) reauthOnStartStation");
}

-(void) setReauthOnStartStation:(bool) {
	%orig;
	NSLog(@"-(void) setReauthOnStartStation:(bool)");
}

-(bool) isJoiningExistingSession {
	%orig;
	NSLog(@"-(bool) isJoiningExistingSession");
}

-(void) setIsJoiningExistingSession:(bool) {
	%orig;
	NSLog(@"-(void) setIsJoiningExistingSession:(bool)");
}

-(void) closeSessionWithCloseApp:(bool) {
	%orig;
	NSLog(@"-(void) closeSessionWithCloseApp:(bool)");
}

-(bool) requestSessionStatus {
	%orig;
	NSLog(@"-(bool) requestSessionStatus");
}

-(void) requestMediaStatus {
	%orig;
	NSLog(@"-(void) requestMediaStatus");
}

-(void) notifyEnteringBackground {
	%orig;
	NSLog(@"-(void) notifyEnteringBackground");
}

-(void) setIsReconnecting:(bool) {
	%orig;
	NSLog(@"-(void) setIsReconnecting:(bool)");
}

-(void) setDeviceId:(id) {
	%orig;
	NSLog(@"-(void) setDeviceId:(id)");
}

-(bool) isReconnecting {
	%orig;
	NSLog(@"-(bool) isReconnecting");
}

-(void) setConnectionDelegate:(id) {
	%orig;
	NSLog(@"-(void) setConnectionDelegate:(id)");
}

-(id) connectionDelegate {
	%orig;
	NSLog(@"-(id) connectionDelegate");
}

-(void) sendCommand:(id) {
	%orig;
	NSLog(@"-(void) sendCommand:(id)");
}

-(void) skip {
	%orig;
	NSLog(@"-(void) skip");
}

-(id) deviceId {
	%orig;
	NSLog(@"-(id) deviceId");
}

-(id) playbackDelegate {
	%orig;
	NSLog(@"-(id) playbackDelegate");
}

-(void) setPlaybackDelegate:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackDelegate:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(bool) isActive {
	%orig;
	NSLog(@"-(bool) isActive");
}

-(void) open {
	%orig;
	NSLog(@"-(void) open");
}

-(void) play {
	%orig;
	NSLog(@"-(void) play");
}

-(void) setVolume:(double) {
	%orig;
	NSLog(@"-(void) setVolume:(double)");
}

-(double) volume {
	%orig;
	NSLog(@"-(double) volume");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

-(id) sessionID {
	%orig;
	NSLog(@"-(id) sessionID");
}

-(void) setSessionID:(id) {
	%orig;
	NSLog(@"-(void) setSessionID:(id)");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook PodcastMyMusicCellData

-(bool) shouldShowCalloutOfType:(long long) {
	%orig;
	NSLog(@"-(bool) shouldShowCalloutOfType:(long long)");
}

-(void) calloutDismissedOfType:(long long) withAction:(long long) {
	%orig;
	NSLog(@"-(void) calloutDismissedOfType:(long long) withAction:(long long)");
}

-(void) didTryToShowCallout {
	%orig;
	NSLog(@"-(void) didTryToShowCallout");
}

-(void) updateCalloutStatusWithShow:(bool) {
	%orig;
	NSLog(@"-(void) updateCalloutStatusWithShow:(bool)");
}

-(bool) isCalloutShown {
	%orig;
	NSLog(@"-(bool) isCalloutShown");
}

-(void) updateImageViewWithAlbumArt:(id) {
	%orig;
	NSLog(@"-(void) updateImageViewWithAlbumArt:(id)");
}

-(bool) isValidMusicCellData {
	%orig;
	NSLog(@"-(bool) isValidMusicCellData");
}

-(bool) isPromotedMusicCellData {
	%orig;
	NSLog(@"-(bool) isPromotedMusicCellData");
}

-(bool) isRecommendedMusicCellData {
	%orig;
	NSLog(@"-(bool) isRecommendedMusicCellData");
}

-(id) musicCellTitle {
	%orig;
	NSLog(@"-(id) musicCellTitle");
}

-(id) musicCellSubtitleForSortType:(long long) {
	%orig;
	NSLog(@"-(id) musicCellSubtitleForSortType:(long long)");
}

-(id) musicCellTitleColor {
	%orig;
	NSLog(@"-(id) musicCellTitleColor");
}

-(id) musicCellSubtitleColor {
	%orig;
	NSLog(@"-(id) musicCellSubtitleColor");
}

-(id) musicCellBackgroundColor {
	%orig;
	NSLog(@"-(id) musicCellBackgroundColor");
}

-(id) musicCellSubtitleIcon {
	%orig;
	NSLog(@"-(id) musicCellSubtitleIcon");
}

-(id) musicCellAccessoryIcon {
	%orig;
	NSLog(@"-(id) musicCellAccessoryIcon");
}

-(long long) musicCellAccessoryButtonType {
	%orig;
	NSLog(@"-(long long) musicCellAccessoryButtonType");
}

-(bool) shouldShowPersonalizationButton {
	%orig;
	NSLog(@"-(bool) shouldShowPersonalizationButton");
}

-(bool) shouldShowInfoButton {
	%orig;
	NSLog(@"-(bool) shouldShowInfoButton");
}

-(bool) shouldDisableAccessoryButtons {
	%orig;
	NSLog(@"-(bool) shouldDisableAccessoryButtons");
}

-(bool) shouldOnlyShowSeparatorWhenOpeningDrawer {
	%orig;
	NSLog(@"-(bool) shouldOnlyShowSeparatorWhenOpeningDrawer");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) uniqueId {
	%orig;
	NSLog(@"-(id) uniqueId");
}

%end

%hook PMNowPlayingLevel2ContainerPresenter

-(id) initWithNowPlayingPhoneViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithNowPlayingPhoneViewController:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMEventBypassList

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSoundEffectController

-(void) loadSoundEffectFrom:(id) tag:(unsigned long long) {
	%orig;
	NSLog(@"-(void) loadSoundEffectFrom:(id) tag:(unsigned long long)");
}

-(void) playSoundEffectForTag:(unsigned long long) {
	%orig;
	NSLog(@"-(void) playSoundEffectForTag:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingPremiumWebViewHostDelegate

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(id) webViewHostRequestsTrack:(id) {
	%orig;
	NSLog(@"-(id) webViewHostRequestsTrack:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook BrowseNewMusicViewModel

-(void) logBrowseImpressionAt:(id) isCellOnScreen:(bool) {
	%orig;
	NSLog(@"-(void) logBrowseImpressionAt:(id) isCellOnScreen:(bool)");
}

-(void) logBrowseSelectWith:(id) indexPath:(id) {
	%orig;
	NSLog(@"-(void) logBrowseSelectWith:(id) indexPath:(id)");
}

-(void) browseManagerDidFailToRefreshModules {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshModules");
}

-(void) browseManagerDidRefreshNewMusicModules:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshNewMusicModules:(id)");
}

-(long long) numberOfSectionsForNewContent {
	%orig;
	NSLog(@"-(long long) numberOfSectionsForNewContent");
}

-(long long) countForNewSourcesIn:(long long) {
	%orig;
	NSLog(@"-(long long) countForNewSourcesIn:(long long)");
}

-(id) browseBannerData {
	%orig;
	NSLog(@"-(id) browseBannerData");
}

-(id) getBrowseSourceAt:(id) {
	%orig;
	NSLog(@"-(id) getBrowseSourceAt:(id)");
}

-(id) sectionTitleFor:(id) {
	%orig;
	NSLog(@"-(id) sectionTitleFor:(id)");
}

-(bool) canFetchNewPageFor:(long long) {
	%orig;
	NSLog(@"-(bool) canFetchNewPageFor:(long long)");
}

-(void) setupObserver {
	%orig;
	NSLog(@"-(void) setupObserver");
}

-(id) initWithManager:(id) fetchBatchSize:(long long) {
	%orig;
	NSLog(@"-(id) initWithManager:(id) fetchBatchSize:(long long)");
}

-(id) statsViewMode {
	%orig;
	NSLog(@"-(id) statsViewMode");
}

-(bool) nativeCollectedStationsEnabled {
	%orig;
	NSLog(@"-(bool) nativeCollectedStationsEnabled");
}

-(void) fetchNewData {
	%orig;
	NSLog(@"-(void) fetchNewData");
}

-(void) updateFetchedResultsControllers {
	%orig;
	NSLog(@"-(void) updateFetchedResultsControllers");
}

-(void) stopUpdatingFetchedResultsControllers {
	%orig;
	NSLog(@"-(void) stopUpdatingFetchedResultsControllers");
}

-(void) fetchNewReleasesFor:(long long) {
	%orig;
	NSLog(@"-(void) fetchNewReleasesFor:(long long)");
}

-(bool) hasFetchedNewPage {
	%orig;
	NSLog(@"-(bool) hasFetchedNewPage");
}

-(bool) isPremium {
	%orig;
	NSLog(@"-(bool) isPremium");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PMADDFPBannerNativeCustomTemplateAdResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMADDFPBannerWithCustomRenderedAdResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMADDFPBannerResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMPandoraProductInfo

-(id) initWithName:(id) subscriptionType:(long long) trackingInfo:(id) source:(long long) {
	%orig;
	NSLog(@"-(id) initWithName:(id) subscriptionType:(long long) trackingInfo:(id) source:(long long)");
}

-(id) upsellSource {
	%orig;
	NSLog(@"-(id) upsellSource");
}

-(void) setUpsellSource:(id) {
	%orig;
	NSLog(@"-(void) setUpsellSource:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setSource:(long long) {
	%orig;
	NSLog(@"-(void) setSource:(long long)");
}

-(long long) source {
	%orig;
	NSLog(@"-(long long) source");
}

%end

%hook PMJSValueExchangeAdapter

-(id) advertisingController {
	%orig;
	NSLog(@"-(id) advertisingController");
}

-(void) updateRewardPropertiesWithUpdatedProperties:(id) {
	%orig;
	NSLog(@"-(void) updateRewardPropertiesWithUpdatedProperties:(id)");
}

-(id) reward {
	%orig;
	NSLog(@"-(id) reward");
}

-(double) enforcementProgressThreshold {
	%orig;
	NSLog(@"-(double) enforcementProgressThreshold");
}

-(id) validAdIdentifiers {
	%orig;
	NSLog(@"-(id) validAdIdentifiers");
}

-(id) rewardProperties {
	%orig;
	NSLog(@"-(id) rewardProperties");
}

-(id) initWithWebpageCommand:(id) webviewHost:(id) {
	%orig;
	NSLog(@"-(id) initWithWebpageCommand:(id) webviewHost:(id)");
}

-(id) eventCorrelationId {
	%orig;
	NSLog(@"-(id) eventCorrelationId");
}

-(void) setEventCorrelationId:(id) {
	%orig;
	NSLog(@"-(void) setEventCorrelationId:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook BrowseSubscriptionModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

%end

%hook MusicPlayStateListenerProxy

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMToLevel2WebViewTransition

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook PMPushNotification

-(bool) hasCustomPayload {
	%orig;
	NSLog(@"-(bool) hasCustomPayload");
}

-(bool) hasPandoraCustomPayload {
	%orig;
	NSLog(@"-(bool) hasPandoraCustomPayload");
}

-(id) latestTimeStamp {
	%orig;
	NSLog(@"-(id) latestTimeStamp");
}

-(bool) hasAdobeCustomPayload {
	%orig;
	NSLog(@"-(bool) hasAdobeCustomPayload");
}

-(id) actionWebviewTitle {
	%orig;
	NSLog(@"-(id) actionWebviewTitle");
}

-(id) listenerId {
	%orig;
	NSLog(@"-(id) listenerId");
}

-(bool) hasEventId {
	%orig;
	NSLog(@"-(bool) hasEventId");
}

-(id) notificationId {
	%orig;
	NSLog(@"-(id) notificationId");
}

-(id) payloadAction {
	%orig;
	NSLog(@"-(id) payloadAction");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) source {
	%orig;
	NSLog(@"-(id) source");
}

-(id) initWithPayload:(id) {
	%orig;
	NSLog(@"-(id) initWithPayload:(id)");
}

%end

%hook PMFirstIntroManager

-(void) authenticationCompleted {
	%orig;
	NSLog(@"-(void) authenticationCompleted");
}

-(void) startObserving {
	%orig;
	NSLog(@"-(void) startObserving");
}

-(void) stopObserving {
	%orig;
	NSLog(@"-(void) stopObserving");
}

-(bool) handleFirstIntroLink:(id) {
	%orig;
	NSLog(@"-(bool) handleFirstIntroLink:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMItunesStoreService

-(void) request:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) request:(id) didFailWithError:(id)");
}

-(void) requestDidFinish:(id) {
	%orig;
	NSLog(@"-(void) requestDidFinish:(id)");
}

-(void) paymentQueue:(id) updatedTransactions:(id) {
	%orig;
	NSLog(@"-(void) paymentQueue:(id) updatedTransactions:(id)");
}

-(void) paymentQueue:(id) restoreCompletedTransactionsFailedWithError:(id) {
	%orig;
	NSLog(@"-(void) paymentQueue:(id) restoreCompletedTransactionsFailedWithError:(id)");
}

-(void) paymentQueueRestoreCompletedTransactionsFinished:(id) {
	%orig;
	NSLog(@"-(void) paymentQueueRestoreCompletedTransactionsFinished:(id)");
}

-(void) productsRequest:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) productsRequest:(id) didReceiveResponse:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMFilePurger

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMStationCatalogEditChangeModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAutomationSuite

-(void) setupWithProcessInfo:(id) {
	%orig;
	NSLog(@"-(void) setupWithProcessInfo:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMHostWatchService

-(void) activateWatchSession {
	%orig;
	NSLog(@"-(void) activateWatchSession");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAddToPlaylistDelegate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

%end

%hook PMSourceCardDelegate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(id) tableView:(id) willSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) willSelectRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

%end

%hook DowngradeLTUXAudioCoordinator

-(void) audioOverRadioDidStartPlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidStartPlaying:(id)");
}

-(void) audioOverRadioDidPausePlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidPausePlaying:(id)");
}

-(void) audioOverRadioDidFinishPlaying:(id) success:(bool) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidFinishPlaying:(id) success:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMUniversalLinkMapper

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMMyMediaRouter

+(id) buildModule {
	%orig;
	NSLog(@"+(id) buildModule");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMMyMediaDataSource

-(void) didInteractWithCalloutView:(id) action:(long long) {
	%orig;
	NSLog(@"-(void) didInteractWithCalloutView:(id) action:(long long)");
}

-(id) sectionIndexTitlesForTableView:(id) {
	%orig;
	NSLog(@"-(id) sectionIndexTitlesForTableView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(long long) tableView:(id) sectionForSectionIndexTitle:(id) atIndex:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) sectionForSectionIndexTitle:(id) atIndex:(long long)");
}

%end

%hook MiniPlayerFactory

-(id) createMiniPlayerViewControllerWithContext:(id) {
	%orig;
	NSLog(@"-(id) createMiniPlayerViewControllerWithContext:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMToLevel2APVTransition

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook PMEditableArtistAudioMessageViewModel

+(id) ctaMessageOptions {
	%orig;
	NSLog(@"+(id) ctaMessageOptions");
}

+(bool) isInDomainList:(id) domainList:(id) {
	%orig;
	NSLog(@"+(bool) isInDomainList:(id) domainList:(id)");
}

+(id) artistRepFromToken:(id) artistReps:(id) {
	%orig;
	NSLog(@"+(id) artistRepFromToken:(id) artistReps:(id)");
}

+(id) artistRepFromId:(id) artistReps:(id) {
	%orig;
	NSLog(@"+(id) artistRepFromId:(id) artistReps:(id)");
}

-(id) ctaMessage {
	%orig;
	NSLog(@"-(id) ctaMessage");
}

-(bool) hasTileImage {
	%orig;
	NSLog(@"-(bool) hasTileImage");
}

-(id) artistImageURL {
	%orig;
	NSLog(@"-(id) artistImageURL");
}

-(id) selectedMarketsViewModel {
	%orig;
	NSLog(@"-(id) selectedMarketsViewModel");
}

-(void) selectedButtonMessageAtIndexThatExcludesCancel:(long long) {
	%orig;
	NSLog(@"-(void) selectedButtonMessageAtIndexThatExcludesCancel:(long long)");
}

-(bool) showCTAButton {
	%orig;
	NSLog(@"-(bool) showCTAButton");
}

-(void) setCtaURL:(id) {
	%orig;
	NSLog(@"-(void) setCtaURL:(id)");
}

-(void) resetImage {
	%orig;
	NSLog(@"-(void) resetImage");
}

-(id) cannotSubmitAlertTitleWithIsDraft:(bool) {
	%orig;
	NSLog(@"-(id) cannotSubmitAlertTitleWithIsDraft:(bool)");
}

-(bool) cannotSubmitDueToBadEnteredPath {
	%orig;
	NSLog(@"-(bool) cannotSubmitDueToBadEnteredPath");
}

-(bool) cannotSubmitBecauseButtonHasNoLink {
	%orig;
	NSLog(@"-(bool) cannotSubmitBecauseButtonHasNoLink");
}

-(id) cannotSubmitWithoutLinkAlertTextWithIsDraft:(bool) {
	%orig;
	NSLog(@"-(id) cannotSubmitWithoutLinkAlertTextWithIsDraft:(bool)");
}

-(bool) cannotSubmitBecauseLinkHasNoButton {
	%orig;
	NSLog(@"-(bool) cannotSubmitBecauseLinkHasNoButton");
}

-(id) cannotSubmitWithoutLabelAlertTextWithIsDraft:(bool) {
	%orig;
	NSLog(@"-(id) cannotSubmitWithoutLabelAlertTextWithIsDraft:(bool)");
}

-(id) messageToSubmit {
	%orig;
	NSLog(@"-(id) messageToSubmit");
}

-(id) cannotSubmitAlertTextWithErrorCode:(id) isDraft:(bool) {
	%orig;
	NSLog(@"-(id) cannotSubmitAlertTextWithErrorCode:(id) isDraft:(bool)");
}

-(void) setShouldPlayBefore:(id) {
	%orig;
	NSLog(@"-(void) setShouldPlayBefore:(id)");
}

-(void) setShouldPlayAfter:(id) {
	%orig;
	NSLog(@"-(void) setShouldPlayAfter:(id)");
}

-(void) setIsCTAURLInvalid:(bool) {
	%orig;
	NSLog(@"-(void) setIsCTAURLInvalid:(bool)");
}

-(void) setCustomImage:(id) {
	%orig;
	NSLog(@"-(void) setCustomImage:(id)");
}

-(long long) numberOfRowsIn:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsIn:(long long)");
}

-(id) sectionTitleAt:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAt:(long long)");
}

-(id) cellModelFor:(id) {
	%orig;
	NSLog(@"-(id) cellModelFor:(id)");
}

-(void) clearedCellAtIndex:(id) {
	%orig;
	NSLog(@"-(void) clearedCellAtIndex:(id)");
}

-(id) statsActionAtIndex:(id) {
	%orig;
	NSLog(@"-(id) statsActionAtIndex:(id)");
}

-(bool) shouldLaunchCompanionTrackOptionsAtIndex:(id) {
	%orig;
	NSLog(@"-(bool) shouldLaunchCompanionTrackOptionsAtIndex:(id)");
}

-(bool) shouldLaunchCallToActionMessageOptionsAtIndex:(id) {
	%orig;
	NSLog(@"-(bool) shouldLaunchCallToActionMessageOptionsAtIndex:(id)");
}

-(bool) shouldLaunchMarketPickerOptionsAtIndex:(id) {
	%orig;
	NSLog(@"-(bool) shouldLaunchMarketPickerOptionsAtIndex:(id)");
}

-(id) initWithArtistRep:(id) draftMessage:(id) {
	%orig;
	NSLog(@"-(id) initWithArtistRep:(id) draftMessage:(id)");
}

-(bool) hasStreamingAudio {
	%orig;
	NSLog(@"-(bool) hasStreamingAudio");
}

-(id) streamAudioURL {
	%orig;
	NSLog(@"-(id) streamAudioURL");
}

-(void) setSelectedMarketsViewModel:(id) {
	%orig;
	NSLog(@"-(void) setSelectedMarketsViewModel:(id)");
}

-(bool) isCTAURLInvalid {
	%orig;
	NSLog(@"-(bool) isCTAURLInvalid");
}

-(id) ctaURL {
	%orig;
	NSLog(@"-(id) ctaURL");
}

-(bool) hasCTAURL {
	%orig;
	NSLog(@"-(bool) hasCTAURL");
}

-(id) artistId {
	%orig;
	NSLog(@"-(id) artistId");
}

-(bool) hasChanges {
	%orig;
	NSLog(@"-(bool) hasChanges");
}

-(id) imageURL {
	%orig;
	NSLog(@"-(id) imageURL");
}

-(id) artistName {
	%orig;
	NSLog(@"-(id) artistName");
}

-(void) setAudioURL:(id) {
	%orig;
	NSLog(@"-(void) setAudioURL:(id)");
}

-(id) customImage {
	%orig;
	NSLog(@"-(id) customImage");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) numberOfSections {
	%orig;
	NSLog(@"-(long long) numberOfSections");
}

%end

%hook AccessoryLockScreenEntryRouter

+(bool) enabledWithExposureLogging {
	%orig;
	NSLog(@"+(bool) enabledWithExposureLogging");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

+(bool) enabled {
	%orig;
	NSLog(@"+(bool) enabled");
}

+(void) setSharedInstance:(id) {
	%orig;
	NSLog(@"+(void) setSharedInstance:(id)");
}

-(void) presentPandoraLinkAccessoryLockScreen {
	%orig;
	NSLog(@"-(void) presentPandoraLinkAccessoryLockScreen");
}

-(void) dismissPandoraLinkAccessoryLockScreen {
	%orig;
	NSLog(@"-(void) dismissPandoraLinkAccessoryLockScreen");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMFirstIntroOnboardingRegistrationViewModel

-(void) secondaryButtonTapped {
	%orig;
	NSLog(@"-(void) secondaryButtonTapped");
}

-(void) signUpTappedWithEmail:(id) password:(id) birthYear:(id) zipCode:(id) gender:(id) {
	%orig;
	NSLog(@"-(void) signUpTappedWithEmail:(id) password:(id) birthYear:(id) zipCode:(id) gender:(id)");
}

-(void) backButtonTapped {
	%orig;
	NSLog(@"-(void) backButtonTapped");
}

-(id) signUpText {
	%orig;
	NSLog(@"-(id) signUpText");
}

-(bool) shouldShowSubscriptionInfo {
	%orig;
	NSLog(@"-(bool) shouldShowSubscriptionInfo");
}

-(id) termsFileName {
	%orig;
	NSLog(@"-(id) termsFileName");
}

-(bool) shouldHideUsernameAndPasswordFields {
	%orig;
	NSLog(@"-(bool) shouldHideUsernameAndPasswordFields");
}

-(id) titleText {
	%orig;
	NSLog(@"-(id) titleText");
}

-(id) secondaryButtonTitle {
	%orig;
	NSLog(@"-(id) secondaryButtonTitle");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook OfflinePodcastsComingSoonToastModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PodcastProgramCatalogTableViewDataSource

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook Base64AudioPlayer

-(void) audioPlayerDidFinishPlaying:(id) successfully:(bool) {
	%orig;
	NSLog(@"-(void) audioPlayerDidFinishPlaying:(id) successfully:(bool)");
}

-(void) audioPlayerDecodeErrorDidOccur:(id) error:(id) {
	%orig;
	NSLog(@"-(void) audioPlayerDecodeErrorDidOccur:(id) error:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdTouchEventHelper

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(void) setMonitoringUIEvent:(bool) {
	%orig;
	NSLog(@"-(void) setMonitoringUIEvent:(bool)");
}

-(bool) monitoringUIEvent {
	%orig;
	NSLog(@"-(bool) monitoringUIEvent");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMShareableItemActivitySource

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) activityViewControllerPlaceholderItem:(id) {
	%orig;
	NSLog(@"-(id) activityViewControllerPlaceholderItem:(id)");
}

-(id) activityViewController:(id) itemForActivityType:(id) {
	%orig;
	NSLog(@"-(id) activityViewController:(id) itemForActivityType:(id)");
}

-(id) activityViewController:(id) subjectForActivityType:(id) {
	%orig;
	NSLog(@"-(id) activityViewController:(id) subjectForActivityType:(id)");
}

%end

%hook PMOfflineSwitchPresenter

-(id) initWithDelegate:(id) offlineManager:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) offlineManager:(id)");
}

-(void) handleManuallyOfflineChanged:(bool) {
	%orig;
	NSLog(@"-(void) handleManuallyOfflineChanged:(bool)");
}

-(id) initWithDelegate:(id) offlineManager:(id) notificationCenter:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) offlineManager:(id) notificationCenter:(id)");
}

-(void) onOfflineParametersUpdated:(id) {
	%orig;
	NSLog(@"-(void) onOfflineParametersUpdated:(id)");
}

-(void) onOfflineStationsIsOfflineUpdated:(id) {
	%orig;
	NSLog(@"-(void) onOfflineStationsIsOfflineUpdated:(id)");
}

-(void) onOfflineStationsEnabledUpdated:(id) {
	%orig;
	NSLog(@"-(void) onOfflineStationsEnabledUpdated:(id)");
}

-(void) onEligibleForOfflineUpdated:(id) {
	%orig;
	NSLog(@"-(void) onEligibleForOfflineUpdated:(id)");
}

-(void) onOfflineStationsUpdated {
	%orig;
	NSLog(@"-(void) onOfflineStationsUpdated");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

%end

%hook ToastableAction

-(id) initWithWarningItem:(id) blockToWrapInWarning:(id) {
	%orig;
	NSLog(@"-(id) initWithWarningItem:(id) blockToWrapInWarning:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) execute:(id) {
	%orig;
	NSLog(@"-(void) execute:(id)");
}

%end

%hook PMWebViewHostHelper

-(void) fetchAccessTokenWithUrlPath:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) fetchAccessTokenWithUrlPath:(id) completion:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCC7Pandora20UniversalLinkHandler7Builder

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMUniversalLinkHandler

-(bool) urlFrom:(id) completion:(id) {
	%orig;
	NSLog(@"-(bool) urlFrom:(id) completion:(id)");
}

-(id) initWithUrlRequestTTL:(double) {
	%orig;
	NSLog(@"-(id) initWithUrlRequestTTL:(double)");
}

-(bool) executeStoredLinkIfNeeded {
	%orig;
	NSLog(@"-(bool) executeStoredLinkIfNeeded");
}

-(void) clearStoredLink {
	%orig;
	NSLog(@"-(void) clearStoredLink");
}

-(id) storedLink {
	%orig;
	NSLog(@"-(id) storedLink");
}

-(void) setStoredLink:(id) {
	%orig;
	NSLog(@"-(void) setStoredLink:(id)");
}

-(id) initWithUrlRequestTTL:(double) builder:(id) {
	%orig;
	NSLog(@"-(id) initWithUrlRequestTTL:(double) builder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSourceCardPresenter

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook L2Ad

-(id) shareUrl {
	%orig;
	NSLog(@"-(id) shareUrl");
}

-(void) setShareUrl:(id) {
	%orig;
	NSLog(@"-(void) setShareUrl:(id)");
}

-(bool) pandoraDesigned {
	%orig;
	NSLog(@"-(bool) pandoraDesigned");
}

-(void) setPandoraDesigned:(bool) {
	%orig;
	NSLog(@"-(void) setPandoraDesigned:(bool)");
}

-(void) setAdTitle:(id) {
	%orig;
	NSLog(@"-(void) setAdTitle:(id)");
}

-(void) setAdSubtitle:(id) {
	%orig;
	NSLog(@"-(void) setAdSubtitle:(id)");
}

-(id) adTitle {
	%orig;
	NSLog(@"-(id) adTitle");
}

-(id) adSubtitle {
	%orig;
	NSLog(@"-(id) adSubtitle");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

%end

%hook L2MutedAPVAd

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PML2VideoAd

-(id) initWithAdIdentifiers:(id) avAssetURL:(id) {
	%orig;
	NSLog(@"-(id) initWithAdIdentifiers:(id) avAssetURL:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PML2SponsoredListeningVideoAd

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PML2WebAd

-(id) initWithAdIdentifiers:(id) webPageURL:(id) {
	%orig;
	NSLog(@"-(id) initWithAdIdentifiers:(id) webPageURL:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PML2HTMLAd

-(id) initWithAdIdentifiers:(id) baseURL:(id) html:(id) {
	%orig;
	NSLog(@"-(id) initWithAdIdentifiers:(id) baseURL:(id) html:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdSlot

-(void) requestAdDismiss:(bool) {
	%orig;
	NSLog(@"-(void) requestAdDismiss:(bool)");
}

-(void) willRequestAdDisplay:(id) {
	%orig;
	NSLog(@"-(void) willRequestAdDisplay:(id)");
}

-(void) requestAdDisplay:(id) {
	%orig;
	NSLog(@"-(void) requestAdDisplay:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook ValueExchangeAdSlot

-(void) radioUsernameDidChange {
	%orig;
	NSLog(@"-(void) radioUsernameDidChange");
}

-(void) radioUserReceivesVisualAdsDidChange {
	%orig;
	NSLog(@"-(void) radioUserReceivesVisualAdsDidChange");
}

-(void) radioUserSettingsDidChange {
	%orig;
	NSLog(@"-(void) radioUserSettingsDidChange");
}

-(void) radioUserAccountMessageUrlDidChange {
	%orig;
	NSLog(@"-(void) radioUserAccountMessageUrlDidChange");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SMCAdSlot

-(void) requestAdDismiss:(bool) {
	%orig;
	NSLog(@"-(void) requestAdDismiss:(bool)");
}

-(void) willRequestAdDisplay:(id) {
	%orig;
	NSLog(@"-(void) willRequestAdDisplay:(id)");
}

-(void) requestAdDisplay:(id) {
	%orig;
	NSLog(@"-(void) requestAdDisplay:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook FlexAdSlot

-(void) radioActiveTrackMetadataDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackMetadataDidChange");
}

-(void) radioActiveTrackWillBeSkipped:(id) {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillBeSkipped:(id)");
}

-(void) radioUsernameDidChange {
	%orig;
	NSLog(@"-(void) radioUsernameDidChange");
}

-(void) radioUserReceivesVisualAdsDidChange {
	%orig;
	NSLog(@"-(void) radioUserReceivesVisualAdsDidChange");
}

-(void) radioUserSettingsDidChange {
	%orig;
	NSLog(@"-(void) radioUserSettingsDidChange");
}

-(void) radioUserAccountMessageUrlDidChange {
	%orig;
	NSLog(@"-(void) radioUserAccountMessageUrlDidChange");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(void) requestAdDismiss:(bool) {
	%orig;
	NSLog(@"-(void) requestAdDismiss:(bool)");
}

-(void) willRequestAdDisplay:(id) {
	%orig;
	NSLog(@"-(void) willRequestAdDisplay:(id)");
}

-(void) requestAdDisplay:(id) {
	%orig;
	NSLog(@"-(void) requestAdDisplay:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook APVAdSlot

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) radioStationWillChangeFrom:(id) to:(id) {
	%orig;
	NSLog(@"-(void) radioStationWillChangeFrom:(id) to:(id)");
}

-(void) fetchNextAPVAd {
	%orig;
	NSLog(@"-(void) fetchNextAPVAd");
}

-(bool) readyToPlayVideo {
	%orig;
	NSLog(@"-(bool) readyToPlayVideo");
}

-(id) currentApvVideoDescriptor {
	%orig;
	NSLog(@"-(id) currentApvVideoDescriptor");
}

-(void) hitTrackingUrlsWithUrls:(id) {
	%orig;
	NSLog(@"-(void) hitTrackingUrlsWithUrls:(id)");
}

-(id) initWithPlacement:(long long) fileManager:(id) sharedPersistence:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacement:(long long) fileManager:(id) sharedPersistence:(id)");
}

-(void) startOrStopCaching {
	%orig;
	NSLog(@"-(void) startOrStopCaching");
}

-(void) setVideoAdPresenterDelegate:(id) {
	%orig;
	NSLog(@"-(void) setVideoAdPresenterDelegate:(id)");
}

-(void) stopCaching {
	%orig;
	NSLog(@"-(void) stopCaching");
}

-(id) videoAdPresenterDelegate {
	%orig;
	NSLog(@"-(id) videoAdPresenterDelegate");
}

-(void) retrieveAdForStation {
	%orig;
	NSLog(@"-(void) retrieveAdForStation");
}

-(void) removeObservers {
	%orig;
	NSLog(@"-(void) removeObservers");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook NowPlayingAdSlot

-(void) radioActiveTrackMetadataDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackMetadataDidChange");
}

-(void) radioActiveTrackWillBeSkipped:(id) {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillBeSkipped:(id)");
}

-(void) radioActiveTrackWillNotBeSkipped:(id) {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillNotBeSkipped:(id)");
}

-(void) radioReplayRequestForTrack:(id) wasSuccessful:(id) {
	%orig;
	NSLog(@"-(void) radioReplayRequestForTrack:(id) wasSuccessful:(id)");
}

-(void) radioUsernameDidChange {
	%orig;
	NSLog(@"-(void) radioUsernameDidChange");
}

-(void) radioUserReceivesVisualAdsDidChange {
	%orig;
	NSLog(@"-(void) radioUserReceivesVisualAdsDidChange");
}

-(void) radioUserSettingsDidChange {
	%orig;
	NSLog(@"-(void) radioUserSettingsDidChange");
}

-(void) radioUserAccountMessageUrlDidChange {
	%orig;
	NSLog(@"-(void) radioUserAccountMessageUrlDidChange");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(void) radioInNowPlayingWillChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingWillChange");
}

-(void) radioInNowPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingDidChange");
}

-(void) willRequestAdDisplay:(id) {
	%orig;
	NSLog(@"-(void) willRequestAdDisplay:(id)");
}

-(void) requestAdDisplay:(id) {
	%orig;
	NSLog(@"-(void) requestAdDisplay:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSLAPAdSlot

-(void) debugLog:(id) includeRemnantDebugInfo:(bool) identifier:(id) expiration:(id) {
	%orig;
	NSLog(@"-(void) debugLog:(id) includeRemnantDebugInfo:(bool) identifier:(id) expiration:(id)");
}

-(bool) hasSLAPAds {
	%orig;
	NSLog(@"-(bool) hasSLAPAds");
}

-(id) slapAds {
	%orig;
	NSLog(@"-(id) slapAds");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMNowPlayingViewModel

-(void) radioReplayRequestForTrack:(id) wasSuccessful:(id) {
	%orig;
	NSLog(@"-(void) radioReplayRequestForTrack:(id) wasSuccessful:(id)");
}

-(long long) modelCount {
	%orig;
	NSLog(@"-(long long) modelCount");
}

-(void) replaceModelAtIndex:(long long) withObject:(id) {
	%orig;
	NSLog(@"-(void) replaceModelAtIndex:(long long) withObject:(id)");
}

-(void) addModel:(id) {
	%orig;
	NSLog(@"-(void) addModel:(id)");
}

-(void) removeLastModel {
	%orig;
	NSLog(@"-(void) removeLastModel");
}

-(id) modelAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) modelAtIndex:(long long)");
}

-(void) exchangeModelAtIndex:(long long) withModelAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) exchangeModelAtIndex:(long long) withModelAtIndex:(long long)");
}

-(void) removeModelsInRange:(_NSRange) {
	%orig;
	NSLog(@"-(void) removeModelsInRange:(_NSRange)");
}

-(void) removeAllModels {
	%orig;
	NSLog(@"-(void) removeAllModels");
}

-(void) setModel:(id) atIndex:(long long) {
	%orig;
	NSLog(@"-(void) setModel:(id) atIndex:(long long)");
}

-(bool) containsModel:(id) {
	%orig;
	NSLog(@"-(bool) containsModel:(id)");
}

-(void) removeModelAt:(long long) {
	%orig;
	NSLog(@"-(void) removeModelAt:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(void) notifyViewModelDidUpdate {
	%orig;
	NSLog(@"-(void) notifyViewModelDidUpdate");
}

-(void) addModels:(id) {
	%orig;
	NSLog(@"-(void) addModels:(id)");
}

-(void) setModel:(id) {
	%orig;
	NSLog(@"-(void) setModel:(id)");
}

-(id) lastObject {
	%orig;
	NSLog(@"-(id) lastObject");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionSourceWillSwitchToAutoplay {
	%orig;
	NSLog(@"-(void) musicSessionSourceWillSwitchToAutoplay");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionBufferStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionBufferStateDidChangeTo:(bool)");
}

-(void) musicSessionModelDidChange:(id) {
	%orig;
	NSLog(@"-(void) musicSessionModelDidChange:(id)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(bool) isDiscoveryTunerEnabledWithExposureLogging:(bool) {
	%orig;
	NSLog(@"-(bool) isDiscoveryTunerEnabledWithExposureLogging:(bool)");
}

-(void) selectStationModeAt:(long long) {
	%orig;
	NSLog(@"-(void) selectStationModeAt:(long long)");
}

-(id) initWithPandoraCore:(id) {
	%orig;
	NSLog(@"-(id) initWithPandoraCore:(id)");
}

-(void) startDeviceSearch {
	%orig;
	NSLog(@"-(void) startDeviceSearch");
}

-(id) adSlot {
	%orig;
	NSLog(@"-(id) adSlot");
}

-(void) startFetching {
	%orig;
	NSLog(@"-(void) startFetching");
}

-(id) availableStationModesModel {
	%orig;
	NSLog(@"-(id) availableStationModesModel");
}

-(void) setAvailableStationModesModel:(id) {
	%orig;
	NSLog(@"-(void) setAvailableStationModesModel:(id)");
}

-(bool) shouldShowDiscoveryTunerButton {
	%orig;
	NSLog(@"-(bool) shouldShowDiscoveryTunerButton");
}

-(bool) shouldShowDiscoveryTunerPrompt {
	%orig;
	NSLog(@"-(bool) shouldShowDiscoveryTunerPrompt");
}

-(void) setShouldShowDiscoveryTunerPrompt:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowDiscoveryTunerPrompt:(bool)");
}

-(void) stopFetching {
	%orig;
	NSLog(@"-(void) stopFetching");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) addObserver:(id) {
	%orig;
	NSLog(@"-(void) addObserver:(id)");
}

%end

%hook PMBluetoothTracker

-(id) statusStatsValue {
	%orig;
	NSLog(@"-(id) statusStatsValue");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMValueExchangeAudioHandler

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) audioOverRadioDidStartPlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidStartPlaying:(id)");
}

-(void) audioOverRadioDidPausePlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidPausePlaying:(id)");
}

-(void) audioOverRadioDidFinishPlaying:(id) success:(bool) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidFinishPlaying:(id) success:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAdFactory

-(id) makeAPVAdWithPayload:(id) identifier:(id) {
	%orig;
	NSLog(@"-(id) makeAPVAdWithPayload:(id) identifier:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMAdMetaData

-(id) initWithInfo:(id) {
	%orig;
	NSLog(@"-(id) initWithInfo:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PremiumSearchResultsViewModel

-(void) timerHit {
	%orig;
	NSLog(@"-(void) timerHit");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMQueuedReplay

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(id) initWithTrack:(id) minicoachmarkContext:(long long) {
	%orig;
	NSLog(@"-(id) initWithTrack:(id) minicoachmarkContext:(long long)");
}

-(long long) miniCoachmarkContext {
	%orig;
	NSLog(@"-(long long) miniCoachmarkContext");
}

-(void) setMiniCoachmarkContext:(long long) {
	%orig;
	NSLog(@"-(void) setMiniCoachmarkContext:(long long)");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook OpenPageModel

-(id) more {
	%orig;
	NSLog(@"-(id) more");
}

-(id) initWithParams:(id) sourceWebViewType:(id) {
	%orig;
	NSLog(@"-(id) initWithParams:(id) sourceWebViewType:(id)");
}

-(id) urlPath {
	%orig;
	NSLog(@"-(id) urlPath");
}

-(id) cat {
	%orig;
	NSLog(@"-(id) cat");
}

-(id) pandoraId {
	%orig;
	NSLog(@"-(id) pandoraId");
}

-(id) pandoraType {
	%orig;
	NSLog(@"-(id) pandoraType");
}

-(id) bgColor {
	%orig;
	NSLog(@"-(id) bgColor");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(id) source {
	%orig;
	NSLog(@"-(id) source");
}

-(id) tag {
	%orig;
	NSLog(@"-(id) tag");
}

-(bool) animated {
	%orig;
	NSLog(@"-(bool) animated");
}

%end

%hook VoiceConstants

+(double) voiceModeButtonViewWidth {
	%orig;
	NSLog(@"+(double) voiceModeButtonViewWidth");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PlayableContentDelegateServiceManager

+(void) enable {
	%orig;
	NSLog(@"+(void) enable");
}

-(void) playableContentManager:(id) initializePlaybackQueueWithContentItems:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) playableContentManager:(id) initializePlaybackQueueWithContentItems:(id) completionHandler:(id)");
}

-(void) playableContentManager:(id) initiatePlaybackOfContentItemAtIndexPath:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) playableContentManager:(id) initiatePlaybackOfContentItemAtIndexPath:(id) completionHandler:(id)");
}

-(void) playableContentManager:(id) didUpdateContext:(id) {
	%orig;
	NSLog(@"-(void) playableContentManager:(id) didUpdateContext:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMSelectedTargetMarketCollectionViewModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMImmediateQueue

-(id) initSuspended:(bool) {
	%orig;
	NSLog(@"-(id) initSuspended:(bool)");
}

-(bool) suspended {
	%orig;
	NSLog(@"-(bool) suspended");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) execute:(id) {
	%orig;
	NSLog(@"-(void) execute:(id)");
}

-(void) setSuspended:(bool) {
	%orig;
	NSLog(@"-(void) setSuspended:(bool)");
}

%end

%hook IOSAudioInteractionDataProvider

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook SiriShortcutIntentManager

+(bool) canHandleIntents {
	%orig;
	NSLog(@"+(bool) canHandleIntents");
}

-(void) musicSessionPlayIntentOccurredWithIntent:(id) {
	%orig;
	NSLog(@"-(void) musicSessionPlayIntentOccurredWithIntent:(id)");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(bool) continueUserActivity:(id) {
	%orig;
	NSLog(@"-(bool) continueUserActivity:(id)");
}

-(void) handleIntent:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) handleIntent:(id) completion:(id)");
}

-(void) startObserving {
	%orig;
	NSLog(@"-(void) startObserving");
}

-(void) stopObserving {
	%orig;
	NSLog(@"-(void) stopObserving");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAutomationModel

-(id) initWithArguments:(id) {
	%orig;
	NSLog(@"-(id) initWithArguments:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMCatalogTableViewDelegate

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(void) scrollViewDidScrollToTop:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScrollToTop:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

%end

%hook PMArtistCatalogTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(bool) tableView:(id) shouldHighlightRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) tableView:(id) shouldHighlightRowAtIndexPath:(id)");
}

%end

%hook PMStationCatalogTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

%end

%hook PodcastProgramCatalogTableViewDelegate

-(void) didTapOptionButtonInMediaHeaderView:(id) {
	%orig;
	NSLog(@"-(void) didTapOptionButtonInMediaHeaderView:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

%end

%hook PMPlaylistCatalogTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) trailingSwipeActionsConfigurationForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) trailingSwipeActionsConfigurationForRowAtIndexPath:(id)");
}

-(bool) tableView:(id) shouldIndentWhileEditingRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) tableView:(id) shouldIndentWhileEditingRowAtIndexPath:(id)");
}

-(id) tableView:(id) targetIndexPathForMoveFromRowAtIndexPath:(id) toProposedIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) targetIndexPathForMoveFromRowAtIndexPath:(id) toProposedIndexPath:(id)");
}

%end

%hook PMSiriShortcutsTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

%end

%hook PMUserCatalogTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

%end

%hook PodcastEpisodeTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

%end

%hook PMUncollectedStationCatalogTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

%end

%hook PMStationCatalogEditTableViewDelegate

-(void) didSelectResult:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectResult:(id) isRecommendation:(bool)");
}

-(void) didSelectCollect:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectCollect:(id) isRecommendation:(bool)");
}

-(bool) allowLongPress {
	%orig;
	NSLog(@"-(bool) allowLongPress");
}

-(void) didSelectCancel {
	%orig;
	NSLog(@"-(void) didSelectCancel");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) willSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) willSelectRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) editingStyleForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(long long) tableView:(id) editingStyleForRowAtIndexPath:(id)");
}

%end

%hook PMAlbumCatalogTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

%end

%hook PMTrackCatalogTableViewDelegate

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

%end

%hook PMPopoverModalController

+(void) present:(id) presentingViewController:(id) presentingLayoutView:(id) sourceRect:(id) permittedArrowDirections:(unsigned long long) {
	%orig;
	NSLog(@"+(void) present:(id) presentingViewController:(id) presentingLayoutView:(id) sourceRect:(id) permittedArrowDirections:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook NavigationActionRouter

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMShareActivityViewModel

-(id) completionEventFragment {
	%orig;
	NSLog(@"-(id) completionEventFragment");
}

-(id) initWithShareableItem:(id) mocClosure:(id) {
	%orig;
	NSLog(@"-(id) initWithShareableItem:(id) mocClosure:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) excludedActivityTypes {
	%orig;
	NSLog(@"-(id) excludedActivityTypes");
}

-(id) activityItems {
	%orig;
	NSLog(@"-(id) activityItems");
}

%end

%hook HaymakerAdResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook HaymakerAdRequest

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMStartupQueue

-(void) setSuspendUntil:(id) {
	%orig;
	NSLog(@"-(void) setSuspendUntil:(id)");
}

-(id) suspendUntil {
	%orig;
	NSLog(@"-(id) suspendUntil");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) execute:(id) {
	%orig;
	NSLog(@"-(void) execute:(id)");
}

%end

%hook PMEditableArtistAudioMessageDetailsCellViewModel

-(id) accessibilityModel {
	%orig;
	NSLog(@"-(id) accessibilityModel");
}

-(void) setAccessibilityModel:(id) {
	%orig;
	NSLog(@"-(void) setAccessibilityModel:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMEditableArtistAudioMessageTextDetailsCellViewModel

-(bool) isLinkURLCell {
	%orig;
	NSLog(@"-(bool) isLinkURLCell");
}

-(id) clearButtonModel {
	%orig;
	NSLog(@"-(id) clearButtonModel");
}

-(id) initWithPlaceholderText:(id) detailText:(id) accessibilityModel:(id) clearButtonModel:(id) textColor:(id) isLinkURLCell:(bool) {
	%orig;
	NSLog(@"-(id) initWithPlaceholderText:(id) detailText:(id) accessibilityModel:(id) clearButtonModel:(id) textColor:(id) isLinkURLCell:(bool)");
}

-(id) placeholderText {
	%orig;
	NSLog(@"-(id) placeholderText");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) textColor {
	%orig;
	NSLog(@"-(id) textColor");
}

-(id) detailText {
	%orig;
	NSLog(@"-(id) detailText");
}

%end

%hook PMEditableArtistAudioMessageMultiOptionDetailsCellViewModel

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMUpgradeURLConstructor

-(id) initWithUpgradeSource:(long long) upgradeType:(id) sourceType:(id) sourceId:(id) mWebParams:(id) showFreeTier:(bool) forcePlusFirst:(bool) {
	%orig;
	NSLog(@"-(id) initWithUpgradeSource:(long long) upgradeType:(id) sourceType:(id) sourceId:(id) mWebParams:(id) showFreeTier:(bool) forcePlusFirst:(bool)");
}

-(id) upgradeURL {
	%orig;
	NSLog(@"-(id) upgradeURL");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook _TtCE7PandoraCSo9UIControl20UIControlTargetProxy

-(void) performAction:(id) {
	%orig;
	NSLog(@"-(void) performAction:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CustomAd

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) loadAd:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id)");
}

-(void) prepareForDisplayInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) prepareForDisplayInRect:(CGRect)");
}

-(id) createL2WebAd:(id) {
	%orig;
	NSLog(@"-(id) createL2WebAd:(id)");
}

-(bool) shouldRecordClicksOnAdViewDidReceiveTouch {
	%orig;
	NSLog(@"-(bool) shouldRecordClicksOnAdViewDidReceiveTouch");
}

-(void) adView:(id) didRequestResizeToHeight:(double) completion:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didRequestResizeToHeight:(double) completion:(id)");
}

-(void) adViewDidFinishLoadingCreative:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoadingCreative:(id)");
}

-(void) adViewDidFinishRenderingCreative:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishRenderingCreative:(id)");
}

-(void) adViewDidReceiveTouch:(id) {
	%orig;
	NSLog(@"-(void) adViewDidReceiveTouch:(id)");
}

-(void) adViewDidFailLoadingCreative:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFailLoadingCreative:(id)");
}

-(bool) adView:(id) shouldOpenURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) adView:(id) shouldOpenURL:(id) clicked:(bool)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMRemnantDFPAd

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdView {
	%orig;
	NSLog(@"-(id) nextAdView");
}

-(void) adLoader:(id) didLoadAd:(id) withUserInfo:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didLoadAd:(id) withUserInfo:(id)");
}

-(void) adLoaderFailedToLoadAd:(id) withUserInfo:(id) {
	%orig;
	NSLog(@"-(void) adLoaderFailedToLoadAd:(id) withUserInfo:(id)");
}

-(void) adViewDidFinishLoadingCreative:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoadingCreative:(id)");
}

-(void) adViewDidFinishRenderingCreative:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishRenderingCreative:(id)");
}

-(void) loadAd:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id)");
}

-(void) prepareForDisplayInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) prepareForDisplayInRect:(CGRect)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook RemnantCompanionAd

-(void) loadAd:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMHaymakerAd

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) createL2WebAd:(id) {
	%orig;
	NSLog(@"-(id) createL2WebAd:(id)");
}

-(bool) shouldRecordClicksOnAdViewDidReceiveTouch {
	%orig;
	NSLog(@"-(bool) shouldRecordClicksOnAdViewDidReceiveTouch");
}

-(void) loadAd:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id)");
}

-(id) bannerWebView {
	%orig;
	NSLog(@"-(id) bannerWebView");
}

-(void) prepareForDisplayInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) prepareForDisplayInRect:(CGRect)");
}

-(void) renderServable:(id) {
	%orig;
	NSLog(@"-(void) renderServable:(id)");
}

-(void) adViewDidFinishRenderingCreative:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishRenderingCreative:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMAPVAd

-(void) removeVideoFromDirectory:(id) {
	%orig;
	NSLog(@"-(void) removeVideoFromDirectory:(id)");
}

-(id) adVideoDescriptor {
	%orig;
	NSLog(@"-(id) adVideoDescriptor");
}

-(void) setAdVideoDescriptor:(id) {
	%orig;
	NSLog(@"-(void) setAdVideoDescriptor:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook FacebookNativeAd

-(bool) remoteControlTogglePlayPause {
	%orig;
	NSLog(@"-(bool) remoteControlTogglePlayPause");
}

-(bool) remoteControlPause {
	%orig;
	NSLog(@"-(bool) remoteControlPause");
}

-(bool) remoteControlPlay {
	%orig;
	NSLog(@"-(bool) remoteControlPlay");
}

-(bool) remoteControlNextTrack {
	%orig;
	NSLog(@"-(bool) remoteControlNextTrack");
}

-(bool) remoteControlStop {
	%orig;
	NSLog(@"-(bool) remoteControlStop");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) nativeAdDidLoad:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidLoad:(id)");
}

-(void) nativeAd:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) nativeAd:(id) didFailWithError:(id)");
}

-(void) nativeAdWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) nativeAdWillLogImpression:(id)");
}

-(void) nativeAdDidClick:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidClick:(id)");
}

-(void) nativeAdDidFinishHandlingClick:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidFinishHandlingClick:(id)");
}

-(void) loadAd:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id)");
}

-(void) prepareForDisplayInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) prepareForDisplayInRect:(CGRect)");
}

-(void) fetchFBAd:(id) {
	%orig;
	NSLog(@"-(void) fetchFBAd:(id)");
}

-(id) fbAdView:(id) {
	%orig;
	NSLog(@"-(id) fbAdView:(id)");
}

-(void) mediaViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) mediaViewDidLoad:(id)");
}

-(void) mediaViewWillEnterFullscreen:(id) {
	%orig;
	NSLog(@"-(void) mediaViewWillEnterFullscreen:(id)");
}

-(void) mediaViewDidExitFullscreen:(id) {
	%orig;
	NSLog(@"-(void) mediaViewDidExitFullscreen:(id)");
}

-(void) mediaView:(id) videoVolumeDidChange:(float) {
	%orig;
	NSLog(@"-(void) mediaView:(id) videoVolumeDidChange:(float)");
}

-(void) mediaViewVideoDidPause:(id) {
	%orig;
	NSLog(@"-(void) mediaViewVideoDidPause:(id)");
}

-(void) mediaViewVideoDidPlay:(id) {
	%orig;
	NSLog(@"-(void) mediaViewVideoDidPlay:(id)");
}

-(void) mediaViewVideoDidComplete:(id) {
	%orig;
	NSLog(@"-(void) mediaViewVideoDidComplete:(id)");
}

-(void) appDidEnterBackground {
	%orig;
	NSLog(@"-(void) appDidEnterBackground");
}

-(void) appDidBecomeActive {
	%orig;
	NSLog(@"-(void) appDidBecomeActive");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook MutedAPVAd

-(id) bannerWebView {
	%orig;
	NSLog(@"-(id) bannerWebView");
}

-(void) loadAd:(id) {
	%orig;
	NSLog(@"-(void) loadAd:(id)");
}

-(void) prepareForDisplayInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) prepareForDisplayInRect:(CGRect)");
}

-(void) renderServable:(id) {
	%orig;
	NSLog(@"-(void) renderServable:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook AudioTileAdRequest

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CompanionBannerRequest

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CompanionURLResponse

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook CompanionURLRequest

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMBadgeManager

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMCastManagerFactory

+(id) shared {
	%orig;
	NSLog(@"+(id) shared");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook AudioTileAd

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook InAppPurchasePresenter

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PML1MutedAPVChildViewControllerModel

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook PMModalPresenterTransition

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(id) animationControllerForPresentedController:(id) presentingController:(id) sourceController:(id) {
	%orig;
	NSLog(@"-(id) animationControllerForPresentedController:(id) presentingController:(id) sourceController:(id)");
}

-(id) animationControllerForDismissedController:(id) {
	%orig;
	NSLog(@"-(id) animationControllerForDismissedController:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook AdSlotCache

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook APVAdSlotCache

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook HAPClient

+(id) sharedClient {
	%orig;
	NSLog(@"+(id) sharedClient");
}

-(void) writeTimerFired {
	%orig;
	NSLog(@"-(void) writeTimerFired");
}

-(void) setWriteTimer:(id) {
	%orig;
	NSLog(@"-(void) setWriteTimer:(id)");
}

-(void) onHapCommandReceivedWithSequenceNumber:(int) payload:(id) contentType:(id) {
	%orig;
	NSLog(@"-(void) onHapCommandReceivedWithSequenceNumber:(int) payload:(id) contentType:(id)");
}

-(void) onHapServiceNotEstablished {
	%orig;
	NSLog(@"-(void) onHapServiceNotEstablished");
}

-(void) onHapServiceEstablished {
	%orig;
	NSLog(@"-(void) onHapServiceEstablished");
}

-(void) onHapConnectionLost {
	%orig;
	NSLog(@"-(void) onHapConnectionLost");
}

-(void) onHapGeneralError {
	%orig;
	NSLog(@"-(void) onHapGeneralError");
}

-(void) debugLogType:(id) withMessage:(id) {
	%orig;
	NSLog(@"-(void) debugLogType:(id) withMessage:(id)");
}

-(id) writeTimer {
	%orig;
	NSLog(@"-(id) writeTimer");
}

-(void) handleURL:(id) {
	%orig;
	NSLog(@"-(void) handleURL:(id)");
}

-(void) setProxy:(id) {
	%orig;
	NSLog(@"-(void) setProxy:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) proxy {
	%orig;
	NSLog(@"-(id) proxy");
}

-(id) link {
	%orig;
	NSLog(@"-(id) link");
}

-(void) setLink:(id) {
	%orig;
	NSLog(@"-(void) setLink:(id)");
}

%end

%hook PMBrowseDeepLinkHandler

-(void) setDeferredPath:(id) {
	%orig;
	NSLog(@"-(void) setDeferredPath:(id)");
}

-(void) setDeferredParams:(id) {
	%orig;
	NSLog(@"-(void) setDeferredParams:(id)");
}

-(id) deferredPath {
	%orig;
	NSLog(@"-(id) deferredPath");
}

-(id) deferredParams {
	%orig;
	NSLog(@"-(id) deferredParams");
}

-(bool) handleURLPath:(id) parameters:(id) {
	%orig;
	NSLog(@"-(bool) handleURLPath:(id) parameters:(id)");
}

-(void) setMostRecentlyHandledURL:(id) {
	%orig;
	NSLog(@"-(void) setMostRecentlyHandledURL:(id)");
}

-(void) openPreviewCardForStationIdentity:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) openPreviewCardForStationIdentity:(id) parameters:(id)");
}

-(void) openDetailsForStationIdentity:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) openDetailsForStationIdentity:(id) parameters:(id)");
}

-(void) openCatalogForModuleId:(id) categoryId:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) openCatalogForModuleId:(id) categoryId:(id) parameters:(id)");
}

-(void) openCatalogForModuleId:(id) {
	%orig;
	NSLog(@"-(void) openCatalogForModuleId:(id)");
}

-(void) openBrowseHome {
	%orig;
	NSLog(@"-(void) openBrowseHome");
}

-(bool) stationIdentityIsValidMusicId:(id) {
	%orig;
	NSLog(@"-(bool) stationIdentityIsValidMusicId:(id)");
}

-(id) mostRecentlyHandledURL {
	%orig;
	NSLog(@"-(id) mostRecentlyHandledURL");
}

-(void) hideActivityIndicator {
	%orig;
	NSLog(@"-(void) hideActivityIndicator");
}

-(void) requestStationDetailWithIdentity:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) requestStationDetailWithIdentity:(id) completion:(id)");
}

-(void) showBrowseAndRequestStationDetailWithIdentity:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) showBrowseAndRequestStationDetailWithIdentity:(id) completion:(id)");
}

-(void) requestModuleCatalogWithModuleId:(long long) completion:(id) {
	%orig;
	NSLog(@"-(void) requestModuleCatalogWithModuleId:(long long) completion:(id)");
}

-(void) pushCatalogControllerForModule:(id) {
	%orig;
	NSLog(@"-(void) pushCatalogControllerForModule:(id)");
}

-(void) showBrowseAndRequestModuleCatalogWithId:(long long) completion:(id) {
	%orig;
	NSLog(@"-(void) showBrowseAndRequestModuleCatalogWithId:(long long) completion:(id)");
}

-(id) findCategoryInTree:(id) categoryId:(id) {
	%orig;
	NSLog(@"-(id) findCategoryInTree:(id) categoryId:(id)");
}

-(void) setStationCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setStationCompletionBlock:(id)");
}

-(id) browseStationWithIdentity:(id) musicToken:(id) {
	%orig;
	NSLog(@"-(id) browseStationWithIdentity:(id) musicToken:(id)");
}

-(void) callAndReleaseStationCompletionWithStation:(id) {
	%orig;
	NSLog(@"-(void) callAndReleaseStationCompletionWithStation:(id)");
}

-(id) stationCompletionBlock {
	%orig;
	NSLog(@"-(id) stationCompletionBlock");
}

-(void) requestModuleCatalogWithModule:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) requestModuleCatalogWithModule:(id) completion:(id)");
}

-(void) setRequestedModuleId:(long long) {
	%orig;
	NSLog(@"-(void) setRequestedModuleId:(long long)");
}

-(void) setCatalogCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setCatalogCompletionBlock:(id)");
}

-(long long) requestedModuleId {
	%orig;
	NSLog(@"-(long long) requestedModuleId");
}

-(id) catalogCompletionBlock {
	%orig;
	NSLog(@"-(id) catalogCompletionBlock");
}

-(void) callAndReleaseCatalogCompletionWithModule:(id) {
	%orig;
	NSLog(@"-(void) callAndReleaseCatalogCompletionWithModule:(id)");
}

-(void) setupActivityIndicatorView {
	%orig;
	NSLog(@"-(void) setupActivityIndicatorView");
}

-(id) initWithTopViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithTopViewController:(id)");
}

-(bool) stationIdentitySupportsLegacyBackstage:(id) {
	%orig;
	NSLog(@"-(bool) stationIdentitySupportsLegacyBackstage:(id)");
}

-(id) sharedRadio {
	%orig;
	NSLog(@"-(id) sharedRadio");
}

-(void) browseManagerDidRefreshModules:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshModules:(id)");
}

-(void) browseManagerDidFailToRefreshModules {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshModules");
}

-(void) browseManagerDidRefreshCatalogForModule:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshCatalogForModule:(id)");
}

-(void) browseManagerDidFailToRefreshCatalogForModule:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshCatalogForModule:(id)");
}

-(void) browseManagerDidRefreshDetailForStation:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshDetailForStation:(id)");
}

-(void) browseManagerDidFailToRefreshDetailForStation:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshDetailForStation:(id)");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(void) setActivityIndicatorView:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicatorView:(id)");
}

-(id) activityIndicatorView {
	%orig;
	NSLog(@"-(id) activityIndicatorView");
}

-(void) setTopViewController:(id) {
	%orig;
	NSLog(@"-(void) setTopViewController:(id)");
}

-(void) showActivityIndicator {
	%orig;
	NSLog(@"-(void) showActivityIndicator");
}

-(bool) isLoggedIn {
	%orig;
	NSLog(@"-(bool) isLoggedIn");
}

-(id) navigationManager {
	%orig;
	NSLog(@"-(id) navigationManager");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) topViewController {
	%orig;
	NSLog(@"-(id) topViewController");
}

%end

%hook PMOnboardingToBrowseAnimator

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook PMOptionalCellDescriptor

-(id) shouldShowBlock {
	%orig;
	NSLog(@"-(id) shouldShowBlock");
}

-(void) setShouldShowBlock:(id) {
	%orig;
	NSLog(@"-(void) setShouldShowBlock:(id)");
}

-(id) contentBlock {
	%orig;
	NSLog(@"-(id) contentBlock");
}

-(void) setContentBlock:(id) {
	%orig;
	NSLog(@"-(void) setContentBlock:(id)");
}

-(id) didSelectBlock {
	%orig;
	NSLog(@"-(id) didSelectBlock");
}

-(void) setDidSelectBlock:(id) {
	%orig;
	NSLog(@"-(void) setDidSelectBlock:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMPlaybackTracker

+(bool) shouldMeasureUnconditionally:(unsigned long long) {
	%orig;
	NSLog(@"+(bool) shouldMeasureUnconditionally:(unsigned long long)");
}

+(id) sharedTracker {
	%orig;
	NSLog(@"+(id) sharedTracker");
}

-(void) URLWasOpenedWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) URLWasOpenedWithPath:(id) andParameters:(id)");
}

-(void) discardAllTimeToMusic {
	%orig;
	NSLog(@"-(void) discardAllTimeToMusic");
}

-(void) initializeObservers {
	%orig;
	NSLog(@"-(void) initializeObservers");
}

-(void) discardTimeToMusicForContext:(unsigned long long) {
	%orig;
	NSLog(@"-(void) discardTimeToMusicForContext:(unsigned long long)");
}

-(void) removeTimeToMusicObservers {
	%orig;
	NSLog(@"-(void) removeTimeToMusicObservers");
}

-(void) removeBufferingObservers {
	%orig;
	NSLog(@"-(void) removeBufferingObservers");
}

-(void) initializeTimeToMusicObservers {
	%orig;
	NSLog(@"-(void) initializeTimeToMusicObservers");
}

-(void) initializeBufferingObservers {
	%orig;
	NSLog(@"-(void) initializeBufferingObservers");
}

-(void) addMusicSessionObserver {
	%orig;
	NSLog(@"-(void) addMusicSessionObserver");
}

-(void) videoAdDidFinishPlaying:(id) {
	%orig;
	NSLog(@"-(void) videoAdDidFinishPlaying:(id)");
}

-(void) removeMusicSessionObserver {
	%orig;
	NSLog(@"-(void) removeMusicSessionObserver");
}

-(bool) trackPlayback {
	%orig;
	NSLog(@"-(bool) trackPlayback");
}

-(id) timeToMusicContextStartTimes {
	%orig;
	NSLog(@"-(id) timeToMusicContextStartTimes");
}

-(id) timeToMusicActionStringFromContext:(unsigned long long) {
	%orig;
	NSLog(@"-(id) timeToMusicActionStringFromContext:(unsigned long long)");
}

-(void) setPendingPlaybackEvent:(id) {
	%orig;
	NSLog(@"-(void) setPendingPlaybackEvent:(id)");
}

-(id) bufferingEventLogger {
	%orig;
	NSLog(@"-(id) bufferingEventLogger");
}

-(id) pendingPlaybackEvent {
	%orig;
	NSLog(@"-(id) pendingPlaybackEvent");
}

-(void) audioAdDidFinishPlaying:(id) {
	%orig;
	NSLog(@"-(void) audioAdDidFinishPlaying:(id)");
}

-(void) messageDidFinishPlaying:(id) {
	%orig;
	NSLog(@"-(void) messageDidFinishPlaying:(id)");
}

-(void) retroactivelyStartTimeFor:(unsigned long long) usingStartTimeOf:(unsigned long long) {
	%orig;
	NSLog(@"-(void) retroactivelyStartTimeFor:(unsigned long long) usingStartTimeOf:(unsigned long long)");
}

-(void) markTimeToMusicCompletedForSourceType:(id) {
	%orig;
	NSLog(@"-(void) markTimeToMusicCompletedForSourceType:(id)");
}

-(void) markBufferingStateStarted {
	%orig;
	NSLog(@"-(void) markBufferingStateStarted");
}

-(void) markBufferingStateStopped {
	%orig;
	NSLog(@"-(void) markBufferingStateStopped");
}

-(id) bufferingStartTime {
	%orig;
	NSLog(@"-(id) bufferingStartTime");
}

-(void) markPendingPlaybackEventCompleted {
	%orig;
	NSLog(@"-(void) markPendingPlaybackEventCompleted");
}

-(bool) isStationCreationPending {
	%orig;
	NSLog(@"-(bool) isStationCreationPending");
}

-(void) setTimeToMusicContextStartTimes:(id) {
	%orig;
	NSLog(@"-(void) setTimeToMusicContextStartTimes:(id)");
}

-(void) setBufferingStartTime:(id) {
	%orig;
	NSLog(@"-(void) setBufferingStartTime:(id)");
}

-(void) setBufferingEventLogger:(id) {
	%orig;
	NSLog(@"-(void) setBufferingEventLogger:(id)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(void) radioActiveTrackWillBeSkipped:(id) {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillBeSkipped:(id)");
}

-(void) radioReplayRequestForTrack:(id) wasSuccessful:(id) {
	%orig;
	NSLog(@"-(void) radioReplayRequestForTrack:(id) wasSuccessful:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) activeTrackDidSkip {
	%orig;
	NSLog(@"-(void) activeTrackDidSkip");
}

-(void) activeTrackRatingDidChange:(long long) trackId:(id) stationId:(id) {
	%orig;
	NSLog(@"-(void) activeTrackRatingDidChange:(long long) trackId:(id) stationId:(id)");
}

-(void) bufferingStateDidChange:(id) {
	%orig;
	NSLog(@"-(void) bufferingStateDidChange:(id)");
}

-(void) markTimeToMusicStartedForContext:(unsigned long long) {
	%orig;
	NSLog(@"-(void) markTimeToMusicStartedForContext:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMTunerTeachMarkPresenter

-(bool) handleThumbDown {
	%orig;
	NSLog(@"-(bool) handleThumbDown");
}

-(bool) handleThumbUp {
	%orig;
	NSLog(@"-(bool) handleThumbUp");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(bool) isOffline {
	%orig;
	NSLog(@"-(bool) isOffline");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PMBrowseStatsLogger

+(void) logBrowseModuleImpressionForCell:(id) atIndexPath:(id) withModel:(id) andStatsCollector:(id) {
	%orig;
	NSLog(@"+(void) logBrowseModuleImpressionForCell:(id) atIndexPath:(id) withModel:(id) andStatsCollector:(id)");
}

+(void) logBrowseViewImpressionWithTileCell:(id) withStatsCollector:(id) {
	%orig;
	NSLog(@"+(void) logBrowseViewImpressionWithTileCell:(id) withStatsCollector:(id)");
}

+(void) logBrowseViewImpressionForTileModuleCell:(id) tileCardCell:(id) atIndexPath:(id) withStatsCollector:(id) {
	%orig;
	NSLog(@"+(void) logBrowseViewImpressionForTileModuleCell:(id) tileCardCell:(id) atIndexPath:(id) withStatsCollector:(id)");
}

+(void) logFeatureModuleImpressionForFeatureModuleCell:(id) atIndexPath:(id) withModel:(id) andStatsCollector:(id) {
	%orig;
	NSLog(@"+(void) logFeatureModuleImpressionForFeatureModuleCell:(id) atIndexPath:(id) withModel:(id) andStatsCollector:(id)");
}

+(void) logFACSImpressionUrl:(id) {
	%orig;
	NSLog(@"+(void) logFACSImpressionUrl:(id)");
}

+(void) logBrowseSelectEventForCollectionView:(id) featureModuleCell:(id) andModel:(id) withStatsCollector:(id) {
	%orig;
	NSLog(@"+(void) logBrowseSelectEventForCollectionView:(id) featureModuleCell:(id) andModel:(id) withStatsCollector:(id)");
}

+(void) logBrowseSelectEventForCollectionView:(id) model:(id) tileModuleCell:(id) withTileCardCell:(id) data:(id) withStatsCollector:(id) {
	%orig;
	NSLog(@"+(void) logBrowseSelectEventForCollectionView:(id) model:(id) tileModuleCell:(id) withTileCardCell:(id) data:(id) withStatsCollector:(id)");
}

+(void) logBrowseSwipeEventForFeatureModuleCellModel:(id) withFromIndex:(long long) toIndex:(long long) atIndexPath:(id) withStatsCollector:(id) {
	%orig;
	NSLog(@"+(void) logBrowseSwipeEventForFeatureModuleCellModel:(id) withFromIndex:(long long) toIndex:(long long) atIndexPath:(id) withStatsCollector:(id)");
}

+(void) logFACSClickUrl:(id) {
	%orig;
	NSLog(@"+(void) logFACSClickUrl:(id)");
}

%end

%hook PMDeveloperModeCommand

-(id) initWithName:(id) selectorName:(id) andAcceptsValue:(bool) {
	%orig;
	NSLog(@"-(id) initWithName:(id) selectorName:(id) andAcceptsValue:(bool)");
}

-(bool) acceptsValue {
	%orig;
	NSLog(@"-(bool) acceptsValue");
}

-(id) selectorName {
	%orig;
	NSLog(@"-(id) selectorName");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

%end

%hook PMDevModeManager

+(bool) enterDevMode:(id) {
	%orig;
	NSLog(@"+(bool) enterDevMode:(id)");
}

+(id) devModesHiddenOnProd {
	%orig;
	NSLog(@"+(id) devModesHiddenOnProd");
}

+(id) devModesVisibleOnProd {
	%orig;
	NSLog(@"+(id) devModesVisibleOnProd");
}

+(bool) enterDevModeNative:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeNative:(id)");
}

+(bool) enterDevModeWeb:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeWeb:(id)");
}

+(bool) enterDevModeWebLog:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeWebLog:(id)");
}

+(void) enterDevModeCarPlay:(id) {
	%orig;
	NSLog(@"+(void) enterDevModeCarPlay:(id)");
}

+(bool) enterDevModeBackStage:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeBackStage:(id)");
}

+(bool) enterDevModeAudio:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeAudio:(id)");
}

+(bool) enterDevModeAbout:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeAbout:(id)");
}

+(bool) enterDevModeDebugLink:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeDebugLink:(id)");
}

+(bool) enterDevModeDebugFord:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeDebugFord:(id)");
}

+(bool) enterDevModeTestDisplay:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestDisplay:(id)");
}

+(bool) enterDevModeTestAudio:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestAudio:(id)");
}

+(bool) enterDevModeTestVideo:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestVideo:(id)");
}

+(bool) enterL2VideoTestMode:(id) {
	%orig;
	NSLog(@"+(bool) enterL2VideoTestMode:(id)");
}

+(bool) enterDevModeTestInterstitial:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestInterstitial:(id)");
}

+(bool) enterDevModeTestFACS:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestFACS:(id)");
}

+(bool) enterDevModeTestAdminServer:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestAdminServer:(id)");
}

+(bool) enterDevModeTestFeatureTrack:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestFeatureTrack:(id)");
}

+(bool) enterDevModeTestArtist:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestArtist:(id)");
}

+(bool) enterDevModeTestVoiceTrack:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestVoiceTrack:(id)");
}

+(bool) enterDevModeTestfbdisplay {
	%orig;
	NSLog(@"+(bool) enterDevModeTestfbdisplay");
}

+(bool) enterFbDebugLogging {
	%orig;
	NSLog(@"+(bool) enterFbDebugLogging");
}

+(bool) enterDevModeCmdDemos:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdDemos:(id)");
}

+(bool) enterDevModeCmdSkipLimitModal:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdSkipLimitModal:(id)");
}

+(bool) enterDevModeCmdReauth:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdReauth:(id)");
}

+(bool) enterDevModeCmdListeningTimeOut:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdListeningTimeOut:(id)");
}

+(bool) enterDevModeCmdTimeOutModal:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdTimeOutModal:(id)");
}

+(bool) enterDevModeCmdTimeOutNotification:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdTimeOutNotification:(id)");
}

+(bool) enterDevModeCmdTriggerBatchStats:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdTriggerBatchStats:(id)");
}

+(bool) enterDevModeCmdCrash:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdCrash:(id)");
}

+(bool) enterDevModeCheckAssertions:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCheckAssertions:(id)");
}

+(bool) showGSDKDebugMenu:(id) {
	%orig;
	NSLog(@"+(bool) showGSDKDebugMenu:(id)");
}

+(bool) exitDevModeCommandTest {
	%orig;
	NSLog(@"+(bool) exitDevModeCommandTest");
}

+(id) supportedDevModes {
	%orig;
	NSLog(@"+(id) supportedDevModes");
}

+(bool) performCommandSwitcher:(SEL) withCommand:(id) {
	%orig;
	NSLog(@"+(bool) performCommandSwitcher:(SEL) withCommand:(id)");
}

+(bool) enterDevModeCustom:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCustom:(id)");
}

+(void) stopBatteryDrain {
	%orig;
	NSLog(@"+(void) stopBatteryDrain");
}

+(void) stopNetworkTypeSwitching {
	%orig;
	NSLog(@"+(void) stopNetworkTypeSwitching");
}

+(void) discardCustomEnvironmentSettings {
	%orig;
	NSLog(@"+(void) discardCustomEnvironmentSettings");
}

+(void) stopSimulatingState {
	%orig;
	NSLog(@"+(void) stopSimulatingState");
}

+(void) resetNowPlayingTimeoutOverrides {
	%orig;
	NSLog(@"+(void) resetNowPlayingTimeoutOverrides");
}

+(bool) enterDevModeTestCustom:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTestCustom:(id)");
}

+(bool) validateParameters:(id) adType:(id*) adID:(id*) creativeID:(id*) {
	%orig;
	NSLog(@"+(bool) validateParameters:(id) adType:(id*) adID:(id*) creativeID:(id*)");
}

+(void) performFollowOnAction {
	%orig;
	NSLog(@"+(void) performFollowOnAction");
}

+(void) handleReauthCommand {
	%orig;
	NSLog(@"+(void) handleReauthCommand");
}

+(void) resetAdDefaultTTL {
	%orig;
	NSLog(@"+(void) resetAdDefaultTTL");
}

+(void) startBatteryDrain {
	%orig;
	NSLog(@"+(void) startBatteryDrain");
}

+(id) networkOptionsFromString:(id) {
	%orig;
	NSLog(@"+(id) networkOptionsFromString:(id)");
}

+(void) startNetworkTypeSwitching {
	%orig;
	NSLog(@"+(void) startNetworkTypeSwitching");
}

+(bool) enterDevModeToggleTierWithChurnBlock:(id) devModeText:(?) {
	%orig;
	NSLog(@"+(bool) enterDevModeToggleTierWithChurnBlock:(id) devModeText:(?)");
}

+(id) toggleTierWithChurnBlock:(SEL) {
	%orig;
	NSLog(@"+(id) toggleTierWithChurnBlock:(SEL)");
}

+(void) switchNetworkType {
	%orig;
	NSLog(@"+(void) switchNetworkType");
}

+(void) invalidateBatteryTimers {
	%orig;
	NSLog(@"+(void) invalidateBatteryTimers");
}

+(bool) toggleTorch:(bool) {
	%orig;
	NSLog(@"+(bool) toggleTorch:(bool)");
}

+(void) pingBluetooth:(id) {
	%orig;
	NSLog(@"+(void) pingBluetooth:(id)");
}

+(bool) shouldDisplayDeveloperTools {
	%orig;
	NSLog(@"+(bool) shouldDisplayDeveloperTools");
}

+(bool) enterDevModeCmdSignout:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdSignout:(id)");
}

+(bool) enterDevModeCmdSyncOfflineStations:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdSyncOfflineStations:(id)");
}

+(bool) enterDevModeCmdSyncOfflinePlaylists:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdSyncOfflinePlaylists:(id)");
}

+(bool) enterDevModeCmdShowProductFeatureEditor:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdShowProductFeatureEditor:(id)");
}

+(bool) enterDevModeCmdNewUserDuration:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdNewUserDuration:(id)");
}

+(bool) enterDevModeCmdExistingUserDelay:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdExistingUserDelay:(id)");
}

+(bool) enterDevModeCmdCoachMarks:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdCoachMarks:(id)");
}

+(bool) enterDevModeCmdAllowAllCoachMarks:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdAllowAllCoachMarks:(id)");
}

+(bool) enterDevModeCmdWillShowCasting:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdWillShowCasting:(id)");
}

+(bool) enterDevModeCmdSK:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdSK:(id)");
}

+(bool) enterDevModeCmdAdExpire:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdAdExpire:(id)");
}

+(bool) enterDevModeCmdDailySkip:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdDailySkip:(id)");
}

+(bool) enterDevModeCmdStationSkips:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdStationSkips:(id)");
}

+(bool) enterDevModeCmdNoSkipLimit:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdNoSkipLimit:(id)");
}

+(bool) enterDevModeCmdDrainBattery:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdDrainBattery:(id)");
}

+(bool) enterDevModeCmdNetwork:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdNetwork:(id)");
}

+(bool) enterDevModeResetReplayState:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeResetReplayState:(id)");
}

+(bool) enterDevModeSetReplayCoverage:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeSetReplayCoverage:(id)");
}

+(bool) enterDevModeSetOnDemandMode:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeSetOnDemandMode:(id)");
}

+(bool) enterDevModeToggleTier:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeToggleTier:(id)");
}

+(bool) enterDevModeToggleTierPremiumAccess:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeToggleTierPremiumAccess:(id)");
}

+(bool) enterDevModeNpGlobalTimeout:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeNpGlobalTimeout:(id)");
}

+(bool) enterDevModeNpBackButtonControllerTimeout:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeNpBackButtonControllerTimeout:(id)");
}

+(bool) enterDevModeCmdImplicitOffline:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdImplicitOffline:(id)");
}

+(bool) openUniversalLink:(id) {
	%orig;
	NSLog(@"+(bool) openUniversalLink:(id)");
}

+(bool) resetDeviceCheckStatus:(id) {
	%orig;
	NSLog(@"+(bool) resetDeviceCheckStatus:(id)");
}

+(bool) fixResetListenerStatus:(id) {
	%orig;
	NSLog(@"+(bool) fixResetListenerStatus:(id)");
}

+(bool) enterDevModeCmdShowSlopaCoachmark:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdShowSlopaCoachmark:(id)");
}

+(bool) enterDevModeCmdLocationRequest:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeCmdLocationRequest:(id)");
}

+(void) podcastCellPreview {
	%orig;
	NSLog(@"+(void) podcastCellPreview");
}

+(void) podcastSearchPreview {
	%orig;
	NSLog(@"+(void) podcastSearchPreview");
}

+(void) podcastEpisodeBackstagePreview {
	%orig;
	NSLog(@"+(void) podcastEpisodeBackstagePreview");
}

+(void) podcastProgramBackstagePreview {
	%orig;
	NSLog(@"+(void) podcastProgramBackstagePreview");
}

+(void) mockOfflinePodcastEpisode {
	%orig;
	NSLog(@"+(void) mockOfflinePodcastEpisode");
}

+(bool) enterDevModeTritonPing:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTritonPing:(id)");
}

+(bool) enterDevModeTritonBurst:(id) {
	%orig;
	NSLog(@"+(bool) enterDevModeTritonBurst:(id)");
}

+(bool) exitDevModeTriton:(id) {
	%orig;
	NSLog(@"+(bool) exitDevModeTriton:(id)");
}

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(bool) enterDevMode:(id) {
	%orig;
	NSLog(@"-(bool) enterDevMode:(id)");
}

-(id) devTestModeDataSource {
	%orig;
	NSLog(@"-(id) devTestModeDataSource");
}

-(id) adUtility {
	%orig;
	NSLog(@"-(id) adUtility");
}

-(void) resetDCStatus {
	%orig;
	NSLog(@"-(void) resetDCStatus");
}

-(void) fixResetListenerStatus {
	%orig;
	NSLog(@"-(void) fixResetListenerStatus");
}

-(id) makeSlopaCoachmarkDisplayContextWithTargetId:(id) trackedAsNoAvails:(bool) {
	%orig;
	NSLog(@"-(id) makeSlopaCoachmarkDisplayContextWithTargetId:(id) trackedAsNoAvails:(bool)");
}

-(void) createMockOfflinePodcastEpisode {
	%orig;
	NSLog(@"-(void) createMockOfflinePodcastEpisode");
}

-(void) setDevTestModeDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDevTestModeDataSource:(id)");
}

-(void) setCustomTritonConfiguration:(id) {
	%orig;
	NSLog(@"-(void) setCustomTritonConfiguration:(id)");
}

-(void) setAdUtility:(id) {
	%orig;
	NSLog(@"-(void) setAdUtility:(id)");
}

-(void) toggleTestModeConfirmationOn:(bool) {
	%orig;
	NSLog(@"-(void) toggleTestModeConfirmationOn:(bool)");
}

-(void) disableConfirmationFor:(id) {
	%orig;
	NSLog(@"-(void) disableConfirmationFor:(id)");
}

-(void) playPodcastEpisodeWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) playPodcastEpisodeWithCompletion:(id)");
}

-(id) radio {
	%orig;
	NSLog(@"-(id) radio");
}

-(id) customTritonConfiguration {
	%orig;
	NSLog(@"-(id) customTritonConfiguration");
}

-(id) simulationCenter {
	%orig;
	NSLog(@"-(id) simulationCenter");
}

-(void) setRadio:(id) {
	%orig;
	NSLog(@"-(void) setRadio:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMShuffleListDataSource

-(void) rebuildShuffleList {
	%orig;
	NSLog(@"-(void) rebuildShuffleList");
}

-(bool) didShuffleListChange {
	%orig;
	NSLog(@"-(bool) didShuffleListChange");
}

-(id) originalShuffleStationIds {
	%orig;
	NSLog(@"-(id) originalShuffleStationIds");
}

-(void) revertToOriginalSelection {
	%orig;
	NSLog(@"-(void) revertToOriginalSelection");
}

-(id) internalOriginalShuffleStationIds {
	%orig;
	NSLog(@"-(id) internalOriginalShuffleStationIds");
}

-(void) rebuildAllStations {
	%orig;
	NSLog(@"-(void) rebuildAllStations");
}

-(void) rebuildGenres {
	%orig;
	NSLog(@"-(void) rebuildGenres");
}

-(id) newStationsDataSource {
	%orig;
	NSLog(@"-(id) newStationsDataSource");
}

-(void) setInternalOriginalShuffleStationIds:(id) {
	%orig;
	NSLog(@"-(void) setInternalOriginalShuffleStationIds:(id)");
}

-(void) setDataSourceType:(long long) {
	%orig;
	NSLog(@"-(void) setDataSourceType:(long long)");
}

-(long long) dataSourceType {
	%orig;
	NSLog(@"-(long long) dataSourceType");
}

-(id) selectedItems {
	%orig;
	NSLog(@"-(id) selectedItems");
}

-(id) itemAtIndex:(id) {
	%orig;
	NSLog(@"-(id) itemAtIndex:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRows {
	%orig;
	NSLog(@"-(long long) numberOfRows");
}

-(id) items {
	%orig;
	NSLog(@"-(id) items");
}

-(void) setItems:(id) {
	%orig;
	NSLog(@"-(void) setItems:(id)");
}

%end

%hook PMShuffleListItem

+(id) itemWithData:(id) {
	%orig;
	NSLog(@"+(id) itemWithData:(id)");
}

+(id) itemWithData:(id) children:(id) {
	%orig;
	NSLog(@"+(id) itemWithData:(id) children:(id)");
}

-(void) setChildren:(id) {
	%orig;
	NSLog(@"-(void) setChildren:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setSelected:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool)");
}

-(bool) selected {
	%orig;
	NSLog(@"-(bool) selected");
}

-(bool) isGroup {
	%orig;
	NSLog(@"-(bool) isGroup");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

-(id) children {
	%orig;
	NSLog(@"-(id) children");
}

%end

%hook PMStationDataSourceProvider

-(id) stationsDataSource {
	%orig;
	NSLog(@"-(id) stationsDataSource");
}

-(void) setStationsDataSource:(id) {
	%orig;
	NSLog(@"-(void) setStationsDataSource:(id)");
}

-(long long) numberOfSectionsInTableView {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(void) rebuildStationList {
	%orig;
	NSLog(@"-(void) rebuildStationList");
}

-(void) dismissedUserRecommendation:(id) {
	%orig;
	NSLog(@"-(void) dismissedUserRecommendation:(id)");
}

-(bool) removeMoreRecsButtonIfNoAdditionalRecsFound {
	%orig;
	NSLog(@"-(bool) removeMoreRecsButtonIfNoAdditionalRecsFound");
}

-(void) removeStationAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) removeStationAtIndexPath:(id)");
}

-(void) insertStation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) insertStation:(id) atIndexPath:(id)");
}

-(void) replaceStation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) replaceStation:(id) atIndexPath:(id)");
}

-(id) promotedStationIndexPath {
	%orig;
	NSLog(@"-(id) promotedStationIndexPath");
}

-(bool) isPromotedStationShowing {
	%orig;
	NSLog(@"-(bool) isPromotedStationShowing");
}

-(bool) promotedStationHasRegisteredImpression {
	%orig;
	NSLog(@"-(bool) promotedStationHasRegisteredImpression");
}

-(void) clearStationList {
	%orig;
	NSLog(@"-(void) clearStationList");
}

-(bool) isStationListEmpty {
	%orig;
	NSLog(@"-(bool) isStationListEmpty");
}

-(bool) isRecommendationPreviewSectionEmpty {
	%orig;
	NSLog(@"-(bool) isRecommendationPreviewSectionEmpty");
}

-(void) rebuildSearchResults:(id) request:(id) showArtistAndSongsResultsOnly:(bool) {
	%orig;
	NSLog(@"-(void) rebuildSearchResults:(id) request:(id) showArtistAndSongsResultsOnly:(bool)");
}

-(bool) isSearchResultsEmpty {
	%orig;
	NSLog(@"-(bool) isSearchResultsEmpty");
}

-(void) rebuildAutoCompleteResults:(id) showArtistAndSongsResultsOnly:(bool) {
	%orig;
	NSLog(@"-(void) rebuildAutoCompleteResults:(id) showArtistAndSongsResultsOnly:(bool)");
}

-(bool) isAutoCompleteResultsEmpty {
	%orig;
	NSLog(@"-(bool) isAutoCompleteResultsEmpty");
}

-(void) clearAutoCompleteResults {
	%orig;
	NSLog(@"-(void) clearAutoCompleteResults");
}

-(id) autoCompleteResultsDataSource {
	%orig;
	NSLog(@"-(id) autoCompleteResultsDataSource");
}

-(id) stationCreationDataSource {
	%orig;
	NSLog(@"-(id) stationCreationDataSource");
}

-(id) seedRecommendationDataSource {
	%orig;
	NSLog(@"-(id) seedRecommendationDataSource");
}

-(void) setStationsDataSourceMode:(long long) {
	%orig;
	NSLog(@"-(void) setStationsDataSourceMode:(long long)");
}

-(long long) stationsDataSourceMode {
	%orig;
	NSLog(@"-(long long) stationsDataSourceMode");
}

-(bool) isStationListOnRecommendationSection:(long long) {
	%orig;
	NSLog(@"-(bool) isStationListOnRecommendationSection:(long long)");
}

-(void) rebuildSeedRecommendation:(id) {
	%orig;
	NSLog(@"-(void) rebuildSeedRecommendation:(id)");
}

-(void) clearSeedRecommendationResults {
	%orig;
	NSLog(@"-(void) clearSeedRecommendationResults");
}

-(bool) isSeedRecommendationEmpty {
	%orig;
	NSLog(@"-(bool) isSeedRecommendationEmpty");
}

-(void) rebuildUserRecommendationForcePromotedStationLoad:(bool) {
	%orig;
	NSLog(@"-(void) rebuildUserRecommendationForcePromotedStationLoad:(bool)");
}

-(void) setStationCreationDataSourceMode:(long long) {
	%orig;
	NSLog(@"-(void) setStationCreationDataSourceMode:(long long)");
}

-(long long) stationCreationDataSourceMode {
	%orig;
	NSLog(@"-(long long) stationCreationDataSourceMode");
}

-(void) setAutoCompleteResultsDataSource:(id) {
	%orig;
	NSLog(@"-(void) setAutoCompleteResultsDataSource:(id)");
}

-(void) setSeedRecommendationDataSource:(id) {
	%orig;
	NSLog(@"-(void) setSeedRecommendationDataSource:(id)");
}

-(void) setStationCreationDataSource:(id) {
	%orig;
	NSLog(@"-(void) setStationCreationDataSource:(id)");
}

-(id) rowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) rowAtIndexPath:(id)");
}

-(id) indexPathForRow:(id) {
	%orig;
	NSLog(@"-(id) indexPathForRow:(id)");
}

-(void) setDataSourceType:(long long) {
	%orig;
	NSLog(@"-(void) setDataSourceType:(long long)");
}

-(long long) dataSourceType {
	%orig;
	NSLog(@"-(long long) dataSourceType");
}

-(void) clearSearchResults {
	%orig;
	NSLog(@"-(void) clearSearchResults");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsInSection:(long long)");
}

-(void) setSearchResultsDataSource:(id) {
	%orig;
	NSLog(@"-(void) setSearchResultsDataSource:(id)");
}

-(id) searchResultsDataSource {
	%orig;
	NSLog(@"-(id) searchResultsDataSource");
}

%end

%hook PMMenuItem

-(id) artistRep {
	%orig;
	NSLog(@"-(id) artistRep");
}

-(void) setArtistRep:(id) {
	%orig;
	NSLog(@"-(void) setArtistRep:(id)");
}

-(id) navigationIntercept {
	%orig;
	NSLog(@"-(id) navigationIntercept");
}

-(id) initWithTitle:(id) unselectedImage:(id) selectedImage:(id) itemType:(long long) {
	%orig;
	NSLog(@"-(id) initWithTitle:(id) unselectedImage:(id) selectedImage:(id) itemType:(long long)");
}

-(unsigned long long) offlineIndex {
	%orig;
	NSLog(@"-(unsigned long long) offlineIndex");
}

-(void) setMenuItemType:(long long) {
	%orig;
	NSLog(@"-(void) setMenuItemType:(long long)");
}

-(void) setOfflineIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setOfflineIndex:(unsigned long long)");
}

-(void) setNavigationIntercept:(id) {
	%orig;
	NSLog(@"-(void) setNavigationIntercept:(id)");
}

-(bool) isAvailableOffline {
	%orig;
	NSLog(@"-(bool) isAvailableOffline");
}

-(long long) menuItemType {
	%orig;
	NSLog(@"-(long long) menuItemType");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(void) setSelectedImage:(id) {
	%orig;
	NSLog(@"-(void) setSelectedImage:(id)");
}

-(id) unselectedImage {
	%orig;
	NSLog(@"-(id) unselectedImage");
}

-(id) selectedImage {
	%orig;
	NSLog(@"-(id) selectedImage");
}

-(void) setUnselectedImage:(id) {
	%orig;
	NSLog(@"-(void) setUnselectedImage:(id)");
}

-(bool) hasBadge {
	%orig;
	NSLog(@"-(bool) hasBadge");
}

-(void) setHasBadge:(bool) {
	%orig;
	NSLog(@"-(void) setHasBadge:(bool)");
}

%end

%hook PMAudioRecorder

+(id) defaultCachePath {
	%orig;
	NSLog(@"+(id) defaultCachePath");
}

-(void) setReadyToPlayQueue:(id) {
	%orig;
	NSLog(@"-(void) setReadyToPlayQueue:(id)");
}

-(void) setAudioLevelConverter:(id) {
	%orig;
	NSLog(@"-(void) setAudioLevelConverter:(id)");
}

-(id) initWithDelegate:(id) maxDuration:(long long) cachePath:(id) audioFileName:(id) readyToPlayQueue:(id) audioLevelConverter:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) maxDuration:(long long) cachePath:(id) audioFileName:(id) readyToPlayQueue:(id) audioLevelConverter:(id)");
}

-(id) initWithDelegate:(id) andMaxDuration:(long long) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id) andMaxDuration:(long long)");
}

-(bool) setAudioSessionCategoryToDefault:(id*) {
	%orig;
	NSLog(@"-(bool) setAudioSessionCategoryToDefault:(id*)");
}

-(void) removeRecording {
	%orig;
	NSLog(@"-(void) removeRecording");
}

-(bool) setupFilePath:(id*) {
	%orig;
	NSLog(@"-(bool) setupFilePath:(id*)");
}

-(bool) meteringEnabled {
	%orig;
	NSLog(@"-(bool) meteringEnabled");
}

-(id) audioLevelConverter {
	%orig;
	NSLog(@"-(id) audioLevelConverter");
}

-(bool) createAVAudioRecorder:(id*) {
	%orig;
	NSLog(@"-(bool) createAVAudioRecorder:(id*)");
}

-(id) loadDraftRecordingTask {
	%orig;
	NSLog(@"-(id) loadDraftRecordingTask");
}

-(id) readyToPlayQueue {
	%orig;
	NSLog(@"-(id) readyToPlayQueue");
}

-(bool) prepareForPlayback:(id*) {
	%orig;
	NSLog(@"-(bool) prepareForPlayback:(id*)");
}

-(void) setLoadDraftRecordingTask:(id) {
	%orig;
	NSLog(@"-(void) setLoadDraftRecordingTask:(id)");
}

-(bool) startEnqueuedPlayback:(id*) {
	%orig;
	NSLog(@"-(bool) startEnqueuedPlayback:(id*)");
}

-(void) setHasCustomRecording:(bool) {
	%orig;
	NSLog(@"-(void) setHasCustomRecording:(bool)");
}

-(void) audioRecorderEncodeErrorDidOccur:(id) error:(id) {
	%orig;
	NSLog(@"-(void) audioRecorderEncodeErrorDidOccur:(id) error:(id)");
}

-(void) enableMetering {
	%orig;
	NSLog(@"-(void) enableMetering");
}

-(double) recordingCurrentTime {
	%orig;
	NSLog(@"-(double) recordingCurrentTime");
}

-(void) loadDraftRecordingFromURL:(id) onError:(id) {
	%orig;
	NSLog(@"-(void) loadDraftRecordingFromURL:(id) onError:(id)");
}

-(void) startPlayback:(id) {
	%orig;
	NSLog(@"-(void) startPlayback:(id)");
}

-(double) playbackCurrentTime {
	%orig;
	NSLog(@"-(double) playbackCurrentTime");
}

-(bool) hasCustomRecording {
	%orig;
	NSLog(@"-(bool) hasCustomRecording");
}

-(id) meterTimer {
	%orig;
	NSLog(@"-(id) meterTimer");
}

-(void) setMeterTimer:(id) {
	%orig;
	NSLog(@"-(void) setMeterTimer:(id)");
}

-(bool) isCustomRecording {
	%orig;
	NSLog(@"-(bool) isCustomRecording");
}

-(void) setIsCustomRecording:(bool) {
	%orig;
	NSLog(@"-(void) setIsCustomRecording:(bool)");
}

-(void) audioRecorderDidFinishRecording:(id) successfully:(bool) {
	%orig;
	NSLog(@"-(void) audioRecorderDidFinishRecording:(id) successfully:(bool)");
}

-(void) pausePlayback {
	%orig;
	NSLog(@"-(void) pausePlayback");
}

-(double) playbackDuration {
	%orig;
	NSLog(@"-(double) playbackDuration");
}

-(void) stopPlayback {
	%orig;
	NSLog(@"-(void) stopPlayback");
}

-(id) cachePath {
	%orig;
	NSLog(@"-(id) cachePath");
}

-(void) setAudioFileName:(id) {
	%orig;
	NSLog(@"-(void) setAudioFileName:(id)");
}

-(id) audioFileName {
	%orig;
	NSLog(@"-(id) audioFileName");
}

-(bool) isRecording {
	%orig;
	NSLog(@"-(bool) isRecording");
}

-(void) stopRecording {
	%orig;
	NSLog(@"-(void) stopRecording");
}

-(void) setRecordSettings:(id) {
	%orig;
	NSLog(@"-(void) setRecordSettings:(id)");
}

-(void) setMeteringEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setMeteringEnabled:(bool)");
}

-(id) recordSettings {
	%orig;
	NSLog(@"-(id) recordSettings");
}

-(id) audioPlayer {
	%orig;
	NSLog(@"-(id) audioPlayer");
}

-(void) setAudioPlayer:(id) {
	%orig;
	NSLog(@"-(void) setAudioPlayer:(id)");
}

-(void) audioPlayerDidFinishPlaying:(id) successfully:(bool) {
	%orig;
	NSLog(@"-(void) audioPlayerDidFinishPlaying:(id) successfully:(bool)");
}

-(void) audioPlayerDecodeErrorDidOccur:(id) error:(id) {
	%orig;
	NSLog(@"-(void) audioPlayerDecodeErrorDidOccur:(id) error:(id)");
}

-(void) setCachePath:(id) {
	%orig;
	NSLog(@"-(void) setCachePath:(id)");
}

-(id) audioRecorder {
	%orig;
	NSLog(@"-(id) audioRecorder");
}

-(void) setAudioRecorder:(id) {
	%orig;
	NSLog(@"-(void) setAudioRecorder:(id)");
}

-(bool) startRecording:(id*) {
	%orig;
	NSLog(@"-(bool) startRecording:(id*)");
}

-(long long) maxDuration {
	%orig;
	NSLog(@"-(long long) maxDuration");
}

-(void) setMaxDuration:(long long) {
	%orig;
	NSLog(@"-(void) setMaxDuration:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

-(void) setFilePath:(id) {
	%orig;
	NSLog(@"-(void) setFilePath:(id)");
}

-(id) filePath {
	%orig;
	NSLog(@"-(id) filePath");
}

-(double) audioLevel {
	%orig;
	NSLog(@"-(double) audioLevel");
}

%end

%hook PMAnimatedTransition

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook PMAdSession

-(id) defaultAdTTL {
	%orig;
	NSLog(@"-(id) defaultAdTTL");
}

-(id) defaultSLAPTTL {
	%orig;
	NSLog(@"-(id) defaultSLAPTTL");
}

-(long long) resetAdIndex {
	%orig;
	NSLog(@"-(long long) resetAdIndex");
}

-(void) registerUserInteraction {
	%orig;
	NSLog(@"-(void) registerUserInteraction");
}

-(long long) adIndex {
	%orig;
	NSLog(@"-(long long) adIndex");
}

-(void) appDidLogout:(id) {
	%orig;
	NSLog(@"-(void) appDidLogout:(id)");
}

-(void) appDidReauth:(id) {
	%orig;
	NSLog(@"-(void) appDidReauth:(id)");
}

-(void) appDidEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) appDidEnterForeground:(id)");
}

-(void) appDidShowLegacyWelcomeInterstitial:(id) {
	%orig;
	NSLog(@"-(void) appDidShowLegacyWelcomeInterstitial:(id)");
}

-(id) initWithAdIndex:(long long) adIndexReset:(long long) notificationCenter:(id) {
	%orig;
	NSLog(@"-(id) initWithAdIndex:(long long) adIndexReset:(long long) notificationCenter:(id)");
}

-(long long) needsReset {
	%orig;
	NSLog(@"-(long long) needsReset");
}

-(void) setNeedsReset:(long long) {
	%orig;
	NSLog(@"-(void) setNeedsReset:(long long)");
}

-(void) incrementIndexes {
	%orig;
	NSLog(@"-(void) incrementIndexes");
}

-(void) indexesDidChange {
	%orig;
	NSLog(@"-(void) indexesDidChange");
}

-(long long) adIndexReset {
	%orig;
	NSLog(@"-(long long) adIndexReset");
}

-(void) setAdIndex:(long long) {
	%orig;
	NSLog(@"-(void) setAdIndex:(long long)");
}

-(long long) incrementAdIndex {
	%orig;
	NSLog(@"-(long long) incrementAdIndex");
}

-(void) changeAndNotifyIfNeeded:(id) {
	%orig;
	NSLog(@"-(void) changeAndNotifyIfNeeded:(id)");
}

-(void) setUserInteractionTimer:(id) {
	%orig;
	NSLog(@"-(void) setUserInteractionTimer:(id)");
}

-(void) setDefaultAdTTL:(id) {
	%orig;
	NSLog(@"-(void) setDefaultAdTTL:(id)");
}

-(void) setDefaultSLAPTTL:(id) {
	%orig;
	NSLog(@"-(void) setDefaultSLAPTTL:(id)");
}

-(void) setAdIndexReset:(long long) {
	%orig;
	NSLog(@"-(void) setAdIndexReset:(long long)");
}

-(id) userInteractionTimer {
	%orig;
	NSLog(@"-(id) userInteractionTimer");
}

-(void) setPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setPlaying:(bool)");
}

-(bool) playing {
	%orig;
	NSLog(@"-(bool) playing");
}

-(id) notificationCenter {
	%orig;
	NSLog(@"-(id) notificationCenter");
}

-(void) expire {
	%orig;
	NSLog(@"-(void) expire");
}

-(void) setNotificationCenter:(id) {
	%orig;
	NSLog(@"-(void) setNotificationCenter:(id)");
}

-(void) stopTimer {
	%orig;
	NSLog(@"-(void) stopTimer");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(void) startTimer {
	%orig;
	NSLog(@"-(void) startTimer");
}

%end

%hook PMBackstageWebViewHostPoolManager

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(void) webViewHost:(id) didReceiveEvent:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) didReceiveEvent:(id)");
}

-(void) webViewHostDidRequestCustomWebViewContainerClose:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidRequestCustomWebViewContainerClose:(id)");
}

-(bool) isRootView {
	%orig;
	NSLog(@"-(bool) isRootView");
}

-(id) backstageWebViewHostFromPool {
	%orig;
	NSLog(@"-(id) backstageWebViewHostFromPool");
}

-(void) backstageWebHostViewDidBecomeUnused:(id) {
	%orig;
	NSLog(@"-(void) backstageWebHostViewDidBecomeUnused:(id)");
}

-(id) webViewHostCache {
	%orig;
	NSLog(@"-(id) webViewHostCache");
}

-(id) navigationManager {
	%orig;
	NSLog(@"-(id) navigationManager");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMTunerManager

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(bool) rateNegative:(id) {
	%orig;
	NSLog(@"-(bool) rateNegative:(id)");
}

-(bool) ratePositive:(id) {
	%orig;
	NSLog(@"-(bool) ratePositive:(id)");
}

-(void) replayTrack:(id) {
	%orig;
	NSLog(@"-(void) replayTrack:(id)");
}

-(void) attemptSkipWithAlertFromRadioController:(id) {
	%orig;
	NSLog(@"-(void) attemptSkipWithAlertFromRadioController:(id)");
}

-(void) playCurrentTrack {
	%orig;
	NSLog(@"-(void) playCurrentTrack");
}

-(void) pauseCurrentTrack {
	%orig;
	NSLog(@"-(void) pauseCurrentTrack");
}

-(void) attemptSkipWithAlert {
	%orig;
	NSLog(@"-(void) attemptSkipWithAlert");
}

-(bool) shouldEnableSkipButton {
	%orig;
	NSLog(@"-(bool) shouldEnableSkipButton");
}

-(id) getProgressForTrack:(id) {
	%orig;
	NSLog(@"-(id) getProgressForTrack:(id)");
}

-(void) setTrackTired:(id) {
	%orig;
	NSLog(@"-(void) setTrackTired:(id)");
}

-(bool) ratePositive:(id) withSource:(long long) {
	%orig;
	NSLog(@"-(bool) ratePositive:(id) withSource:(long long)");
}

-(void) deleteRating:(id) {
	%orig;
	NSLog(@"-(void) deleteRating:(id)");
}

-(void) registerSignificantAppRaterEventWithWeight:(double) {
	%orig;
	NSLog(@"-(void) registerSignificantAppRaterEventWithWeight:(double)");
}

-(void) showAlertWithText:(id) {
	%orig;
	NSLog(@"-(void) showAlertWithText:(id)");
}

-(bool) rateNegative:(id) withSource:(long long) {
	%orig;
	NSLog(@"-(bool) rateNegative:(id) withSource:(long long)");
}

-(void) replayTrack:(id) useReward:(bool) {
	%orig;
	NSLog(@"-(void) replayTrack:(id) useReward:(bool)");
}

-(bool) shouldAutoPlayAfterTrack:(id) {
	%orig;
	NSLog(@"-(bool) shouldAutoPlayAfterTrack:(id)");
}

-(id) zeroVolumeAlertController {
	%orig;
	NSLog(@"-(id) zeroVolumeAlertController");
}

-(void) setZeroVolumeAlertController:(id) {
	%orig;
	NSLog(@"-(void) setZeroVolumeAlertController:(id)");
}

-(void) setTrackCounterAtZeroVolume:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setTrackCounterAtZeroVolume:(unsigned long long)");
}

-(bool) previousTrackAutoPaused {
	%orig;
	NSLog(@"-(bool) previousTrackAutoPaused");
}

-(void) setPreviousTrackAutoPaused:(bool) {
	%orig;
	NSLog(@"-(void) setPreviousTrackAutoPaused:(bool)");
}

-(unsigned long long) trackCounterAtZeroVolume {
	%orig;
	NSLog(@"-(unsigned long long) trackCounterAtZeroVolume");
}

-(void) audioOutputVolumeChanged:(id) dueToChangeReason:(id) {
	%orig;
	NSLog(@"-(void) audioOutputVolumeChanged:(id) dueToChangeReason:(id)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) keyControllerDidChange {
	%orig;
	NSLog(@"-(void) keyControllerDidChange");
}

-(void) replayCurrentTrack {
	%orig;
	NSLog(@"-(void) replayCurrentTrack");
}

-(void) dismissAlert {
	%orig;
	NSLog(@"-(void) dismissAlert");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

%end

%hook PMTrackProgress

-(id) playedLabel {
	%orig;
	NSLog(@"-(id) playedLabel");
}

-(id) remainingLabel {
	%orig;
	NSLog(@"-(id) remainingLabel");
}

-(void) setPlayedLabel:(id) {
	%orig;
	NSLog(@"-(void) setPlayedLabel:(id)");
}

-(void) setRemainingLabel:(id) {
	%orig;
	NSLog(@"-(void) setRemainingLabel:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setProgress:(float) {
	%orig;
	NSLog(@"-(void) setProgress:(float)");
}

-(float) progress {
	%orig;
	NSLog(@"-(float) progress");
}

%end

%hook CCColorCube

-(id) extractColorsFromImage:(id) flags:(unsigned long long) count:(unsigned long long) {
	%orig;
	NSLog(@"-(id) extractColorsFromImage:(id) flags:(unsigned long long) count:(unsigned long long)");
}

-(void) clearCells {
	%orig;
	NSLog(@"-(void) clearCells");
}

-(char*) rawPixelDataFromImage:(id) pixelCount:(unsigned int*) {
	%orig;
	NSLog(@"-(char*) rawPixelDataFromImage:(id) pixelCount:(unsigned int*)");
}

-(id) findLocalMaximaInImage:(id) flags:(unsigned long long) {
	%orig;
	NSLog(@"-(id) findLocalMaximaInImage:(id) flags:(unsigned long long)");
}

-(id) filterDistinctMaxima:(id) threshold:(double) {
	%orig;
	NSLog(@"-(id) filterDistinctMaxima:(id) threshold:(double)");
}

-(id) orderByBrightness:(id) {
	%orig;
	NSLog(@"-(id) orderByBrightness:(id)");
}

-(id) orderByDarkness:(id) {
	%orig;
	NSLog(@"-(id) orderByDarkness:(id)");
}

-(id) findAndSortMaximaInImage:(id) flags:(unsigned long long) {
	%orig;
	NSLog(@"-(id) findAndSortMaximaInImage:(id) flags:(unsigned long long)");
}

-(id) filterMaxima:(id) tooCloseToColor:(id) {
	%orig;
	NSLog(@"-(id) filterMaxima:(id) tooCloseToColor:(id)");
}

-(id) extractAndFilterMaximaFromImage:(id) flags:(unsigned long long) {
	%orig;
	NSLog(@"-(id) extractAndFilterMaximaFromImage:(id) flags:(unsigned long long)");
}

-(id) colorsFromMaxima:(id) {
	%orig;
	NSLog(@"-(id) colorsFromMaxima:(id)");
}

-(id) performAdaptiveDistinctFilteringForMaxima:(id) count:(unsigned long long) {
	%orig;
	NSLog(@"-(id) performAdaptiveDistinctFilteringForMaxima:(id) count:(unsigned long long)");
}

-(id) extractColorsFromImage:(id) flags:(unsigned long long) {
	%orig;
	NSLog(@"-(id) extractColorsFromImage:(id) flags:(unsigned long long)");
}

-(id) extractColorsFromImage:(id) flags:(unsigned long long) avoidColor:(id) {
	%orig;
	NSLog(@"-(id) extractColorsFromImage:(id) flags:(unsigned long long) avoidColor:(id)");
}

-(id) extractBrightColorsFromImage:(id) avoidColor:(id) count:(unsigned long long) {
	%orig;
	NSLog(@"-(id) extractBrightColorsFromImage:(id) avoidColor:(id) count:(unsigned long long)");
}

-(id) extractDarkColorsFromImage:(id) avoidColor:(id) count:(unsigned long long) {
	%orig;
	NSLog(@"-(id) extractDarkColorsFromImage:(id) avoidColor:(id) count:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

%end

%hook PMRemoteNotificationHandler

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) application:(id) didReceiveRemoteNotification:(id) inApplicationState:(long long) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveRemoteNotification:(id) inApplicationState:(long long)");
}

-(void) application:(id) handleActionWithIdentifier:(id) forRemoteNotification:(id) {
	%orig;
	NSLog(@"-(void) application:(id) handleActionWithIdentifier:(id) forRemoteNotification:(id)");
}

-(bool) didDisableNotification {
	%orig;
	NSLog(@"-(bool) didDisableNotification");
}

-(void) registerForPushNotification {
	%orig;
	NSLog(@"-(void) registerForPushNotification");
}

-(void) handleManualIosNotificationSettingsUpdate {
	%orig;
	NSLog(@"-(void) handleManualIosNotificationSettingsUpdate");
}

-(void) trackRemoteNotificationWithNotificationId:(id) action:(long long) from:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) trackRemoteNotificationWithNotificationId:(id) action:(long long) from:(long long) context:(id)");
}

-(void) openActionWithPushNotification:(id) {
	%orig;
	NSLog(@"-(void) openActionWithPushNotification:(id)");
}

-(id) webContentControllerPresenter {
	%orig;
	NSLog(@"-(id) webContentControllerPresenter");
}

-(id) openURLNotifier {
	%orig;
	NSLog(@"-(id) openURLNotifier");
}

-(void) setOpenURLNotifier:(id) {
	%orig;
	NSLog(@"-(void) setOpenURLNotifier:(id)");
}

-(void) setWebContentControllerPresenter:(id) {
	%orig;
	NSLog(@"-(void) setWebContentControllerPresenter:(id)");
}

-(void) setStatsCollector:(id) {
	%orig;
	NSLog(@"-(void) setStatsCollector:(id)");
}

-(id) rpcService {
	%orig;
	NSLog(@"-(id) rpcService");
}

-(void) setRpcService:(id) {
	%orig;
	NSLog(@"-(void) setRpcService:(id)");
}

-(id) statsCollector {
	%orig;
	NSLog(@"-(id) statsCollector");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) application:(id) didFailToRegisterForRemoteNotificationsWithError:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didFailToRegisterForRemoteNotificationsWithError:(id)");
}

-(void) application:(id) didRegisterForRemoteNotificationsWithDeviceToken:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didRegisterForRemoteNotificationsWithDeviceToken:(id)");
}

%end

%hook PMSleepTimer

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) setMusicSessionManager:(id) {
	%orig;
	NSLog(@"-(void) setMusicSessionManager:(id)");
}

-(bool) timerRunning {
	%orig;
	NSLog(@"-(bool) timerRunning");
}

-(void) userDidLogout:(id) {
	%orig;
	NSLog(@"-(void) userDidLogout:(id)");
}

-(double) secondsLeft {
	%orig;
	NSLog(@"-(double) secondsLeft");
}

-(double) timerStartTime {
	%orig;
	NSLog(@"-(double) timerStartTime");
}

-(id) timeForDisplayShowingOff:(bool) {
	%orig;
	NSLog(@"-(id) timeForDisplayShowingOff:(bool)");
}

-(void) restartTimerWithSeconds:(int) {
	%orig;
	NSLog(@"-(void) restartTimerWithSeconds:(int)");
}

-(void) applicationWillEnterForegroundActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillEnterForegroundActive:(id)");
}

-(void) setTimeAppBackgrounded:(double) {
	%orig;
	NSLog(@"-(void) setTimeAppBackgrounded:(double)");
}

-(double) timeAppBackgrounded {
	%orig;
	NSLog(@"-(double) timeAppBackgrounded");
}

-(void) setSecondsLeft:(double) {
	%orig;
	NSLog(@"-(void) setSecondsLeft:(double)");
}

-(bool) isTrackSelected {
	%orig;
	NSLog(@"-(bool) isTrackSelected");
}

-(void) setTimerStartTime:(double) {
	%orig;
	NSLog(@"-(void) setTimerStartTime:(double)");
}

-(void) handleSleepTimerCountDown:(id) {
	%orig;
	NSLog(@"-(void) handleSleepTimerCountDown:(id)");
}

-(void) setSleepTimer:(id) {
	%orig;
	NSLog(@"-(void) setSleepTimer:(id)");
}

-(id) sleepTimer {
	%orig;
	NSLog(@"-(id) sleepTimer");
}

-(void) setTimerRunning:(bool) {
	%orig;
	NSLog(@"-(void) setTimerRunning:(bool)");
}

-(id) initWithMusicSessionManager:(id) {
	%orig;
	NSLog(@"-(id) initWithMusicSessionManager:(id)");
}

-(id) musicSessionManager {
	%orig;
	NSLog(@"-(id) musicSessionManager");
}

-(void) keyControllerWillChange {
	%orig;
	NSLog(@"-(void) keyControllerWillChange");
}

-(void) stopTimer {
	%orig;
	NSLog(@"-(void) stopTimer");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillResignActive:(id)");
}

%end

%hook PMHmiProvider

-(id) viewForId:(long long) {
	%orig;
	NSLog(@"-(id) viewForId:(long long)");
}

-(id) modelForId:(long long) {
	%orig;
	NSLog(@"-(id) modelForId:(long long)");
}

-(id) allModels {
	%orig;
	NSLog(@"-(id) allModels");
}

-(id) multimediaInfo {
	%orig;
	NSLog(@"-(id) multimediaInfo");
}

-(id) hmiStatusBar {
	%orig;
	NSLog(@"-(id) hmiStatusBar");
}

-(id) allViews {
	%orig;
	NSLog(@"-(id) allViews");
}

-(void) setMultimediaInfo:(id) {
	%orig;
	NSLog(@"-(void) setMultimediaInfo:(id)");
}

-(void) setHmiStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setHmiStatusBar:(id)");
}

-(id) viewDict {
	%orig;
	NSLog(@"-(id) viewDict");
}

-(void) setViewDict:(id) {
	%orig;
	NSLog(@"-(void) setViewDict:(id)");
}

-(id) modelDict {
	%orig;
	NSLog(@"-(id) modelDict");
}

-(void) setModelDict:(id) {
	%orig;
	NSLog(@"-(void) setModelDict:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMLegalContentController

+(id) legalContentWithTermsOfUse {
	%orig;
	NSLog(@"+(id) legalContentWithTermsOfUse");
}

+(id) legalContentWithPrivacyPolicy {
	%orig;
	NSLog(@"+(id) legalContentWithPrivacyPolicy");
}

+(id) legalContentWithOfferTerms {
	%orig;
	NSLog(@"+(id) legalContentWithOfferTerms");
}

+(id) legalContentWithHelpPage {
	%orig;
	NSLog(@"+(id) legalContentWithHelpPage");
}

%end

%hook PMModalPresenter

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) carPlayDidDeactivate {
	%orig;
	NSLog(@"-(void) carPlayDidDeactivate");
}

-(bool) carPlayConnected {
	%orig;
	NSLog(@"-(bool) carPlayConnected");
}

-(void) setCarPlayConnected:(bool) {
	%orig;
	NSLog(@"-(void) setCarPlayConnected:(bool)");
}

-(bool) isCurrentlyShowingModalView {
	%orig;
	NSLog(@"-(bool) isCurrentlyShowingModalView");
}

-(id) presentedControllerOrView {
	%orig;
	NSLog(@"-(id) presentedControllerOrView");
}

-(void) presentModalController:(id) animated:(bool) style:(long long) priority:(unsigned long long) completion:(id) {
	%orig;
	NSLog(@"-(void) presentModalController:(id) animated:(bool) style:(long long) priority:(unsigned long long) completion:(id)");
}

-(void) presentModalController:(id) animated:(bool) priority:(unsigned long long) completion:(id) {
	%orig;
	NSLog(@"-(void) presentModalController:(id) animated:(bool) priority:(unsigned long long) completion:(id)");
}

-(void) dismissModalController:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissModalController:(id) animated:(bool) completion:(id)");
}

-(void) setEnablePresenter:(bool) {
	%orig;
	NSLog(@"-(void) setEnablePresenter:(bool)");
}

-(void) presentModalController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) presentModalController:(id) animated:(bool)");
}

-(bool) isCurrentlyShowingFullScreenModalView {
	%orig;
	NSLog(@"-(bool) isCurrentlyShowingFullScreenModalView");
}

-(void) dismissModalAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissModalAnimated:(bool) completion:(id)");
}

-(bool) isWebAlertViewWithSameURLShowingInModalMode:(id) {
	%orig;
	NSLog(@"-(bool) isWebAlertViewWithSameURLShowingInModalMode:(id)");
}

-(void) presentModalWebAlertView:(id) animated:(bool) priority:(unsigned long long) completion:(id) {
	%orig;
	NSLog(@"-(void) presentModalWebAlertView:(id) animated:(bool) priority:(unsigned long long) completion:(id)");
}

-(void) dismissModalWebAlertView:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissModalWebAlertView:(id) animated:(bool) completion:(id)");
}

-(void) presentTarget:(id) animated:(bool) priority:(unsigned long long) completion:(id) presentNowOrIgnore:(?) presentationStyle:(bool) transition:(long long) hidesDrawer:(id) {
	%orig;
	NSLog(@"-(void) presentTarget:(id) animated:(bool) priority:(unsigned long long) completion:(id) presentNowOrIgnore:(?) presentationStyle:(bool) transition:(long long) hidesDrawer:(id)");
}

-(void) dismissModalTarget:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissModalTarget:(id) animated:(bool) completion:(id)");
}

-(bool) enablePresenter {
	%orig;
	NSLog(@"-(bool) enablePresenter");
}

-(void) presentNextModalView {
	%orig;
	NSLog(@"-(void) presentNextModalView");
}

-(id) presentedItem {
	%orig;
	NSLog(@"-(id) presentedItem");
}

-(id) modalPriorityQueue {
	%orig;
	NSLog(@"-(id) modalPriorityQueue");
}

-(id) keyForTarget:(id) {
	%orig;
	NSLog(@"-(id) keyForTarget:(id)");
}

-(id) modalPriorityMap {
	%orig;
	NSLog(@"-(id) modalPriorityMap");
}

-(void) swapOutCurrentlyPresentedItemWithNewItem:(id) {
	%orig;
	NSLog(@"-(void) swapOutCurrentlyPresentedItemWithNewItem:(id)");
}

-(void) setItemPresentedDuringCarPlay:(id) {
	%orig;
	NSLog(@"-(void) setItemPresentedDuringCarPlay:(id)");
}

-(id) itemPresentedDuringCarPlay {
	%orig;
	NSLog(@"-(id) itemPresentedDuringCarPlay");
}

-(void) setPresentedItem:(id) {
	%orig;
	NSLog(@"-(void) setPresentedItem:(id)");
}

-(void) handlePhoneDismissal:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) handlePhoneDismissal:(id) animated:(bool) completion:(id)");
}

-(void) requeuePresentedItem {
	%orig;
	NSLog(@"-(void) requeuePresentedItem");
}

-(void) handlePhonePresentation:(id) {
	%orig;
	NSLog(@"-(void) handlePhonePresentation:(id)");
}

-(unsigned long long) priorityOfPresentedControllerIfPresent {
	%orig;
	NSLog(@"-(unsigned long long) priorityOfPresentedControllerIfPresent");
}

-(unsigned long long) modalQueueCount {
	%orig;
	NSLog(@"-(unsigned long long) modalQueueCount");
}

-(bool) isWebAlertViewShowingInModalMode:(id) {
	%orig;
	NSLog(@"-(bool) isWebAlertViewShowingInModalMode:(id)");
}

-(bool) isObjectInQueue:(id) {
	%orig;
	NSLog(@"-(bool) isObjectInQueue:(id)");
}

-(void) setModalPriorityQueue:(id) {
	%orig;
	NSLog(@"-(void) setModalPriorityQueue:(id)");
}

-(void) setModalPriorityMap:(id) {
	%orig;
	NSLog(@"-(void) setModalPriorityMap:(id)");
}

-(void) setLock:(id) {
	%orig;
	NSLog(@"-(void) setLock:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) lock {
	%orig;
	NSLog(@"-(id) lock");
}

%end

%hook PMPresentationItem

+(id) itemWithTarget:(id) animated:(bool) completionBlock:(id) style:(?) priority:(long long) hidesDrawer:(int) {
	%orig;
	NSLog(@"+(id) itemWithTarget:(id) animated:(bool) completionBlock:(id) style:(?) priority:(long long) hidesDrawer:(int)");
}

-(void) setHidesDrawer:(bool) {
	%orig;
	NSLog(@"-(void) setHidesDrawer:(bool)");
}

-(bool) isWebAlertView {
	%orig;
	NSLog(@"-(bool) isWebAlertView");
}

-(bool) isViewController {
	%orig;
	NSLog(@"-(bool) isViewController");
}

-(bool) isAlertController {
	%orig;
	NSLog(@"-(bool) isAlertController");
}

-(bool) hidesDrawer {
	%orig;
	NSLog(@"-(bool) hidesDrawer");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTarget:(id) {
	%orig;
	NSLog(@"-(void) setTarget:(id)");
}

-(id) target {
	%orig;
	NSLog(@"-(id) target");
}

-(void) setStyle:(long long) {
	%orig;
	NSLog(@"-(void) setStyle:(long long)");
}

-(long long) style {
	%orig;
	NSLog(@"-(long long) style");
}

-(void) setPriority:(int) {
	%orig;
	NSLog(@"-(void) setPriority:(int)");
}

-(int) priority {
	%orig;
	NSLog(@"-(int) priority");
}

-(id) transition {
	%orig;
	NSLog(@"-(id) transition");
}

-(void) setTransition:(id) {
	%orig;
	NSLog(@"-(void) setTransition:(id)");
}

-(bool) animated {
	%orig;
	NSLog(@"-(bool) animated");
}

-(void) setCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setCompletionBlock:(id)");
}

-(void) setAnimated:(bool) {
	%orig;
	NSLog(@"-(void) setAnimated:(bool)");
}

-(id) completionBlock {
	%orig;
	NSLog(@"-(id) completionBlock");
}

%end

%hook PMAlarmManager

+(id) loadFromArchive {
	%orig;
	NSLog(@"+(id) loadFromArchive");
}

+(id) filepath {
	%orig;
	NSLog(@"+(id) filepath");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) getStationPlaylistFailed:(id) {
	%orig;
	NSLog(@"-(void) getStationPlaylistFailed:(id)");
}

-(bool) isShowingClock {
	%orig;
	NSLog(@"-(bool) isShowingClock");
}

-(id) currentAlarm {
	%orig;
	NSLog(@"-(id) currentAlarm");
}

-(bool) hasMissedAlarm {
	%orig;
	NSLog(@"-(bool) hasMissedAlarm");
}

-(void) showClockAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showClockAnimated:(bool)");
}

-(void) disableAlarm {
	%orig;
	NSLog(@"-(void) disableAlarm");
}

-(void) fireAlarmViaLocalNotification:(id) wasMissed:(bool) {
	%orig;
	NSLog(@"-(void) fireAlarmViaLocalNotification:(id) wasMissed:(bool)");
}

-(void) saveAlarm:(id) {
	%orig;
	NSLog(@"-(void) saveAlarm:(id)");
}

-(bool) userHasSeenReminders {
	%orig;
	NSLog(@"-(bool) userHasSeenReminders");
}

-(void) setUserHasSeenReminders:(bool) {
	%orig;
	NSLog(@"-(void) setUserHasSeenReminders:(bool)");
}

-(void) setIsShowingReminders:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingReminders:(bool)");
}

-(void) setRemindersViewController:(id) {
	%orig;
	NSLog(@"-(void) setRemindersViewController:(id)");
}

-(id) remindersViewController {
	%orig;
	NSLog(@"-(id) remindersViewController");
}

-(void) hideReminders {
	%orig;
	NSLog(@"-(void) hideReminders");
}

-(void) alarmRemindersControllerDismissButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) alarmRemindersControllerDismissButtonPressed:(id)");
}

-(bool) isShowingReminders {
	%orig;
	NSLog(@"-(bool) isShowingReminders");
}

-(void) dismissAlarm:(id) snooze:(bool) keepPlaying:(bool) {
	%orig;
	NSLog(@"-(void) dismissAlarm:(id) snooze:(bool) keepPlaying:(bool)");
}

-(id) clockViewController {
	%orig;
	NSLog(@"-(id) clockViewController");
}

-(void) setExpectedVolume:(double) {
	%orig;
	NSLog(@"-(void) setExpectedVolume:(double)");
}

-(void) appWillEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) appWillEnterBackground:(id)");
}

-(bool) stationAvailableOffline:(id) {
	%orig;
	NSLog(@"-(bool) stationAvailableOffline:(id)");
}

-(void) scheduleNextFireNotificationForAlarmAndSaveWithNotification:(bool) {
	%orig;
	NSLog(@"-(void) scheduleNextFireNotificationForAlarmAndSaveWithNotification:(bool)");
}

-(void) setHasMissedAlarm:(bool) {
	%orig;
	NSLog(@"-(void) setHasMissedAlarm:(bool)");
}

-(void) showRemindersAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showRemindersAnimated:(bool)");
}

-(void) setCurrentAlarm:(id) {
	%orig;
	NSLog(@"-(void) setCurrentAlarm:(id)");
}

-(void) hideClockAnimated:(bool) {
	%orig;
	NSLog(@"-(void) hideClockAnimated:(bool)");
}

-(void) setIsShowingClock:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingClock:(bool)");
}

-(void) setClockViewController:(id) {
	%orig;
	NSLog(@"-(void) setClockViewController:(id)");
}

-(void) clearNextFireNotificationForAlarmAndSave:(bool) {
	%orig;
	NSLog(@"-(void) clearNextFireNotificationForAlarmAndSave:(bool)");
}

-(void) setPendingAlarm:(id) {
	%orig;
	NSLog(@"-(void) setPendingAlarm:(id)");
}

-(void) setPreAlarmVolume:(double) {
	%orig;
	NSLog(@"-(void) setPreAlarmVolume:(double)");
}

-(void) setShouldRestorePreAlarmVolume:(bool) {
	%orig;
	NSLog(@"-(void) setShouldRestorePreAlarmVolume:(bool)");
}

-(void) kickOffFadeInVolumeWithTargetVolume:(double) baseVolume:(double) duration:(double) {
	%orig;
	NSLog(@"-(void) kickOffFadeInVolumeWithTargetVolume:(double) baseVolume:(double) duration:(double)");
}

-(void) playDefaultSound {
	%orig;
	NSLog(@"-(void) playDefaultSound");
}

-(void) showClock {
	%orig;
	NSLog(@"-(void) showClock");
}

-(void) startAlarmResponseTimer {
	%orig;
	NSLog(@"-(void) startAlarmResponseTimer");
}

-(void) clearAlarmResponseTimer {
	%orig;
	NSLog(@"-(void) clearAlarmResponseTimer");
}

-(id) fadeVolumeTimer {
	%orig;
	NSLog(@"-(id) fadeVolumeTimer");
}

-(void) stopPlayingDefaultSound {
	%orig;
	NSLog(@"-(void) stopPlayingDefaultSound");
}

-(bool) shouldRestorePreAlarmVolume {
	%orig;
	NSLog(@"-(bool) shouldRestorePreAlarmVolume");
}

-(double) preAlarmVolume {
	%orig;
	NSLog(@"-(double) preAlarmVolume");
}

-(void) setIsAutoupdatingVolume:(bool) {
	%orig;
	NSLog(@"-(void) setIsAutoupdatingVolume:(bool)");
}

-(void) setCurrentAlarmVolume:(double) {
	%orig;
	NSLog(@"-(void) setCurrentAlarmVolume:(double)");
}

-(void) setFadeVolumeTimer:(id) {
	%orig;
	NSLog(@"-(void) setFadeVolumeTimer:(id)");
}

-(double) currentAlarmVolume {
	%orig;
	NSLog(@"-(double) currentAlarmVolume");
}

-(void) alarmResponseTimedOut {
	%orig;
	NSLog(@"-(void) alarmResponseTimedOut");
}

-(void) setAlarmResponseTimer:(id) {
	%orig;
	NSLog(@"-(void) setAlarmResponseTimer:(id)");
}

-(id) alarmResponseTimer {
	%orig;
	NSLog(@"-(id) alarmResponseTimer");
}

-(id) pendingAlarm {
	%orig;
	NSLog(@"-(id) pendingAlarm");
}

-(id) defaultSoundAudioPlayer {
	%orig;
	NSLog(@"-(id) defaultSoundAudioPlayer");
}

-(void) setDefaultSoundAudioPlayer:(id) {
	%orig;
	NSLog(@"-(void) setDefaultSoundAudioPlayer:(id)");
}

-(void) runVibration {
	%orig;
	NSLog(@"-(void) runVibration");
}

-(void) stopVibrating {
	%orig;
	NSLog(@"-(void) stopVibrating");
}

-(void) displayKeepRunningNag {
	%orig;
	NSLog(@"-(void) displayKeepRunningNag");
}

-(double) expectedVolume {
	%orig;
	NSLog(@"-(double) expectedVolume");
}

-(bool) isAutoupdatingVolume {
	%orig;
	NSLog(@"-(bool) isAutoupdatingVolume");
}

-(id) nextAlarmTime {
	%orig;
	NSLog(@"-(id) nextAlarmTime");
}

-(void) hideClock {
	%orig;
	NSLog(@"-(void) hideClock");
}

-(void) audioOutputVolumeChanged:(id) dueToChangeReason:(id) {
	%orig;
	NSLog(@"-(void) audioOutputVolumeChanged:(id) dueToChangeReason:(id)");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(id) offlineManager {
	%orig;
	NSLog(@"-(id) offlineManager");
}

-(void) increaseVolume:(id) {
	%orig;
	NSLog(@"-(void) increaseVolume:(id)");
}

-(void) save {
	%orig;
	NSLog(@"-(void) save");
}

-(double) audioVolume {
	%orig;
	NSLog(@"-(double) audioVolume");
}

-(void) setAudioVolume:(double) {
	%orig;
	NSLog(@"-(void) setAudioVolume:(double)");
}

-(void) saveWithNotification:(bool) {
	%orig;
	NSLog(@"-(void) saveWithNotification:(bool)");
}

-(void) addAlarm:(id) {
	%orig;
	NSLog(@"-(void) addAlarm:(id)");
}

-(void) appDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) appDidBecomeActive:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMTrackingDescriptor

-(id) baseUrlKey {
	%orig;
	NSLog(@"-(id) baseUrlKey");
}

-(id) remainingUrl {
	%orig;
	NSLog(@"-(id) remainingUrl");
}

-(id) limitAdTrackingReplacementString {
	%orig;
	NSLog(@"-(id) limitAdTrackingReplacementString");
}

-(id) trackingData {
	%orig;
	NSLog(@"-(id) trackingData");
}

-(void) setTrackingData:(id) {
	%orig;
	NSLog(@"-(void) setTrackingData:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

%end

%hook CCLocalMaximum

-(void) setCellIndex:(unsigned int) {
	%orig;
	NSLog(@"-(void) setCellIndex:(unsigned int)");
}

-(unsigned int) cellIndex {
	%orig;
	NSLog(@"-(unsigned int) cellIndex");
}

-(void) setRed:(double) {
	%orig;
	NSLog(@"-(void) setRed:(double)");
}

-(void) setGreen:(double) {
	%orig;
	NSLog(@"-(void) setGreen:(double)");
}

-(void) setBlue:(double) {
	%orig;
	NSLog(@"-(void) setBlue:(double)");
}

-(unsigned int) hitCount {
	%orig;
	NSLog(@"-(unsigned int) hitCount");
}

-(void) setHitCount:(unsigned int) {
	%orig;
	NSLog(@"-(void) setHitCount:(unsigned int)");
}

-(double) red {
	%orig;
	NSLog(@"-(double) red");
}

-(double) green {
	%orig;
	NSLog(@"-(double) green");
}

-(double) blue {
	%orig;
	NSLog(@"-(double) blue");
}

-(void) setBrightness:(double) {
	%orig;
	NSLog(@"-(void) setBrightness:(double)");
}

-(double) brightness {
	%orig;
	NSLog(@"-(double) brightness");
}

%end

%hook PMStationCreationDataSource

-(long long) numberOfSectionsInTableView {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(id) recommendationDataSource {
	%orig;
	NSLog(@"-(id) recommendationDataSource");
}

-(void) dismissedUserRecommendation:(id) {
	%orig;
	NSLog(@"-(void) dismissedUserRecommendation:(id)");
}

-(bool) removeMoreRecsButtonIfNoAdditionalRecsFound {
	%orig;
	NSLog(@"-(bool) removeMoreRecsButtonIfNoAdditionalRecsFound");
}

-(void) setRecommendationDataSource:(id) {
	%orig;
	NSLog(@"-(void) setRecommendationDataSource:(id)");
}

-(void) rebuildRecommendation {
	%orig;
	NSLog(@"-(void) rebuildRecommendation");
}

-(id) rowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) rowAtIndexPath:(id)");
}

-(id) indexPathForRow:(id) {
	%orig;
	NSLog(@"-(id) indexPathForRow:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsInSection:(long long)");
}

-(long long) mode {
	%orig;
	NSLog(@"-(long long) mode");
}

-(void) setMode:(long long) {
	%orig;
	NSLog(@"-(void) setMode:(long long)");
}

%end

%hook PMPreviewCardPresenter

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) didTapInfoButton:(id) {
	%orig;
	NSLog(@"-(void) didTapInfoButton:(id)");
}

-(void) didTapCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCreateStationButton:(id)");
}

-(void) dimMiniPlayer:(bool) {
	%orig;
	NSLog(@"-(void) dimMiniPlayer:(bool)");
}

-(void) didChangeOrientationWithSize:(CGSize) {
	%orig;
	NSLog(@"-(void) didChangeOrientationWithSize:(CGSize)");
}

-(void) openBackstageControllerWithURL:(id) title:(id) type:(id) pandoraType:(id) sender:(id) {
	%orig;
	NSLog(@"-(void) openBackstageControllerWithURL:(id) title:(id) type:(id) pandoraType:(id) sender:(id)");
}

-(id) previewCardController {
	%orig;
	NSLog(@"-(id) previewCardController");
}

-(bool) presentPreviousPreviewCardAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(bool) presentPreviousPreviewCardAnimated:(bool) completion:(id)");
}

-(bool) dismissPreviewCardAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(bool) dismissPreviewCardAnimated:(bool) completion:(id)");
}

-(id) screenshotPresentedPreviewCard {
	%orig;
	NSLog(@"-(id) screenshotPresentedPreviewCard");
}

-(bool) presentPreviewCardWithBrowseStationData:(id) animateFromRect:(CGRect) fromPresentingViewController:(id) context:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(bool) presentPreviewCardWithBrowseStationData:(id) animateFromRect:(CGRect) fromPresentingViewController:(id) context:(id) animated:(bool) completion:(id)");
}

-(bool) presentPreviewCard:(id) animateFromRect:(CGRect) fromPresentingViewController:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(bool) presentPreviewCard:(id) animateFromRect:(CGRect) fromPresentingViewController:(id) animated:(bool) completion:(id)");
}

-(bool) dismissPreviewCardAnimated:(bool) duration:(double) completion:(id) {
	%orig;
	NSLog(@"-(bool) dismissPreviewCardAnimated:(bool) duration:(double) completion:(id)");
}

-(bool) presentPreviewCardWithBrowseStationData:(id) animateFromRect:(CGRect) fromPresentingViewController:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(bool) presentPreviewCardWithBrowseStationData:(id) animateFromRect:(CGRect) fromPresentingViewController:(id) animated:(bool) completion:(id)");
}

-(void) didTapCloseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCloseButton:(id)");
}

-(bool) presentPreviewCardWithArtistAudioMessageData:(id) animateFromRect:(CGRect) fromPresentingViewController:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(bool) presentPreviewCardWithArtistAudioMessageData:(id) animateFromRect:(CGRect) fromPresentingViewController:(id) animated:(bool) completion:(id)");
}

-(bool) isBottomViewHidden {
	%orig;
	NSLog(@"-(bool) isBottomViewHidden");
}

-(void) dismissPreviewCard:(id) {
	%orig;
	NSLog(@"-(void) dismissPreviewCard:(id)");
}

-(void) setPreviewCardController:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardController:(id)");
}

-(void) layoutViewsForPresentation {
	%orig;
	NSLog(@"-(void) layoutViewsForPresentation");
}

-(id) panToDismissGestureRecognizer {
	%orig;
	NSLog(@"-(id) panToDismissGestureRecognizer");
}

-(id) dimBackgroundView {
	%orig;
	NSLog(@"-(id) dimBackgroundView");
}

-(void) setDismissedPreviewCardSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setDismissedPreviewCardSnapshot:(id)");
}

-(id) dismissedPreviewCardSnapshot {
	%orig;
	NSLog(@"-(id) dismissedPreviewCardSnapshot");
}

-(id) tapMiniPlayerGestureRecognizer {
	%orig;
	NSLog(@"-(id) tapMiniPlayerGestureRecognizer");
}

-(void) didTapBottomView {
	%orig;
	NSLog(@"-(void) didTapBottomView");
}

-(id) panAnimator {
	%orig;
	NSLog(@"-(id) panAnimator");
}

-(id) miniPlayerGestureView {
	%orig;
	NSLog(@"-(id) miniPlayerGestureView");
}

-(void) adjustLayoutBottomView {
	%orig;
	NSLog(@"-(void) adjustLayoutBottomView");
}

-(void) setIsBottomViewHidden:(bool) {
	%orig;
	NSLog(@"-(void) setIsBottomViewHidden:(bool)");
}

-(void) setMiniPlayerGestureView:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerGestureView:(id)");
}

-(void) setTapMiniPlayerGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setTapMiniPlayerGestureRecognizer:(id)");
}

-(void) setPanAnchorPoint:(CGPoint) {
	%orig;
	NSLog(@"-(void) setPanAnchorPoint:(CGPoint)");
}

-(CGPoint) panAnchorPoint {
	%orig;
	NSLog(@"-(CGPoint) panAnchorPoint");
}

-(void) setPanAttachmentBehavior:(id) {
	%orig;
	NSLog(@"-(void) setPanAttachmentBehavior:(id)");
}

-(id) panAttachmentBehavior {
	%orig;
	NSLog(@"-(id) panAttachmentBehavior");
}

-(void) setPreviewCardBehavior:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardBehavior:(id)");
}

-(id) previewCardBehavior {
	%orig;
	NSLog(@"-(id) previewCardBehavior");
}

-(void) dismissPreviewCardWithVelocity:(double) {
	%orig;
	NSLog(@"-(void) dismissPreviewCardWithVelocity:(double)");
}

-(void) setDimBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setDimBackgroundView:(id)");
}

-(void) setPanToDismissGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setPanToDismissGestureRecognizer:(id)");
}

-(void) setPanAnimator:(id) {
	%orig;
	NSLog(@"-(void) setPanAnimator:(id)");
}

-(void) setPresenterDelegate:(id) {
	%orig;
	NSLog(@"-(void) setPresenterDelegate:(id)");
}

-(id) presenterDelegate {
	%orig;
	NSLog(@"-(id) presenterDelegate");
}

-(void) setIsAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setIsAnimating:(bool)");
}

-(void) handlePanGesture:(id) {
	%orig;
	NSLog(@"-(void) handlePanGesture:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) presentingViewController {
	%orig;
	NSLog(@"-(id) presentingViewController");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(CGRect) sourceRect {
	%orig;
	NSLog(@"-(CGRect) sourceRect");
}

-(CGRect) frameOfPresentedViewInContainerView {
	%orig;
	NSLog(@"-(CGRect) frameOfPresentedViewInContainerView");
}

-(bool) isPresenting {
	%orig;
	NSLog(@"-(bool) isPresenting");
}

-(void) setSourceRect:(CGRect) {
	%orig;
	NSLog(@"-(void) setSourceRect:(CGRect)");
}

-(bool) isAnimating {
	%orig;
	NSLog(@"-(bool) isAnimating");
}

-(void) setPresentingViewController:(id) {
	%orig;
	NSLog(@"-(void) setPresentingViewController:(id)");
}

-(id) tapToDismissGestureRecognizer {
	%orig;
	NSLog(@"-(id) tapToDismissGestureRecognizer");
}

-(void) setTapToDismissGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setTapToDismissGestureRecognizer:(id)");
}

%end

%hook PMCustomContentManager

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) updateArtistMessagingEnabledForStations:(id) {
	%orig;
	NSLog(@"-(void) updateArtistMessagingEnabledForStations:(id)");
}

-(void) updateGlobalArtistMessagingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) updateGlobalArtistMessagingEnabled:(bool)");
}

-(void) presentWebContentControllerWithURLString:(id) title:(id) statsParams:(id) {
	%orig;
	NSLog(@"-(void) presentWebContentControllerWithURLString:(id) title:(id) statsParams:(id)");
}

-(void) log:(long long) forTrack:(id) {
	%orig;
	NSLog(@"-(void) log:(long long) forTrack:(id)");
}

-(void) removeFollowOnIfShowing {
	%orig;
	NSLog(@"-(void) removeFollowOnIfShowing");
}

-(bool) hasShownFollowOnThisForegroundSession {
	%orig;
	NSLog(@"-(bool) hasShownFollowOnThisForegroundSession");
}

-(bool) shouldShowArtistAudioMessagesSetting {
	%orig;
	NSLog(@"-(bool) shouldShowArtistAudioMessagesSetting");
}

-(void) videoAdDidStartPlaying:(id) {
	%orig;
	NSLog(@"-(void) videoAdDidStartPlaying:(id)");
}

-(void) setPMRPCService:(id) {
	%orig;
	NSLog(@"-(void) setPMRPCService:(id)");
}

-(id) pendingFollowOnCustomContentTrack {
	%orig;
	NSLog(@"-(id) pendingFollowOnCustomContentTrack");
}

-(id) PMRPCService {
	%orig;
	NSLog(@"-(id) PMRPCService");
}

-(id) currentFollowOnView {
	%orig;
	NSLog(@"-(id) currentFollowOnView");
}

-(void) setCurrentFollowOnView:(id) {
	%orig;
	NSLog(@"-(void) setCurrentFollowOnView:(id)");
}

-(void) setPendingFollowOnCustomContentTrack:(id) {
	%orig;
	NSLog(@"-(void) setPendingFollowOnCustomContentTrack:(id)");
}

-(void) showPendingArtistMessageFollowOnIfAny {
	%orig;
	NSLog(@"-(void) showPendingArtistMessageFollowOnIfAny");
}

-(id) radio {
	%orig;
	NSLog(@"-(id) radio");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(void) setRadio:(id) {
	%orig;
	NSLog(@"-(void) setRadio:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) willEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) willEnterForeground:(id)");
}

%end

%hook PMWebAlertViewPresenter

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) showArtistAudioMessagesDisabledSurvey {
	%orig;
	NSLog(@"-(void) showArtistAudioMessagesDisabledSurvey");
}

-(void) showPMWebAlertViewWithPath:(id) standardArguments:(bool) additionalArguments:(id) showDoneButton:(bool) {
	%orig;
	NSLog(@"-(void) showPMWebAlertViewWithPath:(id) standardArguments:(bool) additionalArguments:(id) showDoneButton:(bool)");
}

-(void) showCurrentAnnouncement {
	%orig;
	NSLog(@"-(void) showCurrentAnnouncement");
}

-(void) disableCurrentAnnouncement {
	%orig;
	NSLog(@"-(void) disableCurrentAnnouncement");
}

-(bool) canShowArtistAudioMessagesAnnouncement {
	%orig;
	NSLog(@"-(bool) canShowArtistAudioMessagesAnnouncement");
}

-(void) setupObserver {
	%orig;
	NSLog(@"-(void) setupObserver");
}

-(void) showPMWebAlertViewWithURL:(id) showDoneButton:(bool) {
	%orig;
	NSLog(@"-(void) showPMWebAlertViewWithURL:(id) showDoneButton:(bool)");
}

-(void) showPMWebAlertViewWithURL:(id) {
	%orig;
	NSLog(@"-(void) showPMWebAlertViewWithURL:(id)");
}

-(void) showPMWebAlertViewWithURL:(id) showDoneButton:(bool) priority:(unsigned long long) {
	%orig;
	NSLog(@"-(void) showPMWebAlertViewWithURL:(id) showDoneButton:(bool) priority:(unsigned long long)");
}

-(bool) canShowAnnouncementInAppVersion:(id) {
	%orig;
	NSLog(@"-(bool) canShowAnnouncementInAppVersion:(id)");
}

-(void) disableAnnouncementForVersion:(id) {
	%orig;
	NSLog(@"-(void) disableAnnouncementForVersion:(id)");
}

-(void) showAnnouncementWithURL:(id) inAppVersion:(id) priority:(unsigned long long) {
	%orig;
	NSLog(@"-(void) showAnnouncementWithURL:(id) inAppVersion:(id) priority:(unsigned long long)");
}

-(void) handleGetUserSettingsSuccess:(id) {
	%orig;
	NSLog(@"-(void) handleGetUserSettingsSuccess:(id)");
}

-(void) showPMWebAlertViewWithPath:(id) andArguments:(id) {
	%orig;
	NSLog(@"-(void) showPMWebAlertViewWithPath:(id) andArguments:(id)");
}

-(id) webAlertPriorityMap {
	%orig;
	NSLog(@"-(id) webAlertPriorityMap");
}

-(void) setWebAlertPriorityMap:(id) {
	%orig;
	NSLog(@"-(void) setWebAlertPriorityMap:(id)");
}

-(id) webAlertPriorityQueue {
	%orig;
	NSLog(@"-(id) webAlertPriorityQueue");
}

-(void) setWebAlertPriorityQueue:(id) {
	%orig;
	NSLog(@"-(void) setWebAlertPriorityQueue:(id)");
}

-(id) presentedWebAlert {
	%orig;
	NSLog(@"-(id) presentedWebAlert");
}

-(void) setPresentedWebAlert:(id) {
	%orig;
	NSLog(@"-(void) setPresentedWebAlert:(id)");
}

-(bool) canShowAlert {
	%orig;
	NSLog(@"-(bool) canShowAlert");
}

-(void) removeObserver {
	%orig;
	NSLog(@"-(void) removeObserver");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMWebAlertPresentationItem

+(id) itemWithController:(id) animated:(bool) completionBlock:(id) {
	%orig;
	NSLog(@"+(id) itemWithController:(id) animated:(bool) completionBlock:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) controller {
	%orig;
	NSLog(@"-(id) controller");
}

-(void) setController:(id) {
	%orig;
	NSLog(@"-(void) setController:(id)");
}

-(bool) animated {
	%orig;
	NSLog(@"-(bool) animated");
}

-(void) setCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setCompletionBlock:(id)");
}

-(void) setAnimated:(bool) {
	%orig;
	NSLog(@"-(void) setAnimated:(bool)");
}

-(id) completionBlock {
	%orig;
	NSLog(@"-(id) completionBlock");
}

%end

%hook PMAppRater

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(bool) registerSignificantEvent:(double) {
	%orig;
	NSLog(@"-(bool) registerSignificantEvent:(double)");
}

-(bool) handleAppEnterForeground {
	%orig;
	NSLog(@"-(bool) handleAppEnterForeground");
}

-(void) refreshAppRaterValuesIfNecessary {
	%orig;
	NSLog(@"-(void) refreshAppRaterValuesIfNecessary");
}

-(bool) newStationCreated {
	%orig;
	NSLog(@"-(bool) newStationCreated");
}

-(void) resetEventCounters {
	%orig;
	NSLog(@"-(void) resetEventCounters");
}

-(void) saveAppRaterValues {
	%orig;
	NSLog(@"-(void) saveAppRaterValues");
}

-(bool) askForReview {
	%orig;
	NSLog(@"-(bool) askForReview");
}

-(bool) canAskForReview {
	%orig;
	NSLog(@"-(bool) canAskForReview");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMLocalInterceptor

-(id) webViewHost {
	%orig;
	NSLog(@"-(id) webViewHost");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(void) setWebViewHost:(id) {
	%orig;
	NSLog(@"-(void) setWebViewHost:(id)");
}

-(void) killInRcv {
	%orig;
	NSLog(@"-(void) killInRcv");
}

-(void) killOutRcv {
	%orig;
	NSLog(@"-(void) killOutRcv");
}

-(void) killAll {
	%orig;
	NSLog(@"-(void) killAll");
}

-(id) inRcvPipe {
	%orig;
	NSLog(@"-(id) inRcvPipe");
}

-(id) outRcvPipe {
	%orig;
	NSLog(@"-(id) outRcvPipe");
}

-(void) webViewHost:(id) sendDataToAcc:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) sendDataToAcc:(id)");
}

-(void) webViewHost:(id) sendDataToApp:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) sendDataToApp:(id)");
}

-(void) webViewHost:(id) requestInfo:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) requestInfo:(id)");
}

-(void) setDataStreamFromApp:(id) {
	%orig;
	NSLog(@"-(void) setDataStreamFromApp:(id)");
}

-(void) setDataStreamFromAccessory:(id) {
	%orig;
	NSLog(@"-(void) setDataStreamFromAccessory:(id)");
}

-(void) setOutRcvPipe:(id) {
	%orig;
	NSLog(@"-(void) setOutRcvPipe:(id)");
}

-(void) setInRcvPipe:(id) {
	%orig;
	NSLog(@"-(void) setInRcvPipe:(id)");
}

-(id) arrayLiteralForData:(id) {
	%orig;
	NSLog(@"-(id) arrayLiteralForData:(id)");
}

-(void) pipeDidReceiveBytes:(id) {
	%orig;
	NSLog(@"-(void) pipeDidReceiveBytes:(id)");
}

-(id) dataStreamFromApp {
	%orig;
	NSLog(@"-(id) dataStreamFromApp");
}

-(id) dataStreamFromAccessory {
	%orig;
	NSLog(@"-(id) dataStreamFromAccessory");
}

-(void) pipe:(id) didReceiveError:(id) {
	%orig;
	NSLog(@"-(void) pipe:(id) didReceiveError:(id)");
}

-(void) pipeInputDidFlush:(id) {
	%orig;
	NSLog(@"-(void) pipeInputDidFlush:(id)");
}

-(void) pipeDidClose:(id) {
	%orig;
	NSLog(@"-(void) pipeDidClose:(id)");
}

-(void) sessionArtQueueIsNoLongerHeavy:(id) {
	%orig;
	NSLog(@"-(void) sessionArtQueueIsNoLongerHeavy:(id)");
}

-(void) session:(id) pipeDidReceiveError:(id) {
	%orig;
	NSLog(@"-(void) session:(id) pipeDidReceiveError:(id)");
}

-(bool) session:(id) shouldEnforceSequenceForPayload:(id) {
	%orig;
	NSLog(@"-(bool) session:(id) shouldEnforceSequenceForPayload:(id)");
}

-(void) session:(id) didReceivePayload:(id) {
	%orig;
	NSLog(@"-(void) session:(id) didReceivePayload:(id)");
}

-(void) sessionPipeDidClose:(id) {
	%orig;
	NSLog(@"-(void) sessionPipeDidClose:(id)");
}

-(void) applicationDidEnterBackground {
	%orig;
	NSLog(@"-(void) applicationDidEnterBackground");
}

-(void) applicationWillEnterForeground {
	%orig;
	NSLog(@"-(void) applicationWillEnterForeground");
}

-(id) sessionDelegate {
	%orig;
	NSLog(@"-(id) sessionDelegate");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(void) setSessionDelegate:(id) {
	%orig;
	NSLog(@"-(void) setSessionDelegate:(id)");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook IDWidget

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) setNeedsFlush {
	%orig;
	NSLog(@"-(void) setNeedsFlush");
}

-(long long) widgetId {
	%orig;
	NSLog(@"-(long long) widgetId");
}

-(id) initWithWidgetId:(long long) model:(id) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id)");
}

-(bool) visibleDirty {
	%orig;
	NSLog(@"-(bool) visibleDirty");
}

-(void) hmiDidStopForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStopForApplication:(id)");
}

-(id) initWithWidgetId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long)");
}

-(void) setVisibleDirty:(bool) {
	%orig;
	NSLog(@"-(void) setVisibleDirty:(bool)");
}

-(void) setEnabledDirty:(bool) {
	%orig;
	NSLog(@"-(void) setEnabledDirty:(bool)");
}

-(void) setSelectableDirty:(bool) {
	%orig;
	NSLog(@"-(void) setSelectableDirty:(bool)");
}

-(void) setFocusDirty:(bool) {
	%orig;
	NSLog(@"-(void) setFocusDirty:(bool)");
}

-(bool) enabledDirty {
	%orig;
	NSLog(@"-(bool) enabledDirty");
}

-(bool) selectableDirty {
	%orig;
	NSLog(@"-(bool) selectableDirty");
}

-(bool) focusDirty {
	%orig;
	NSLog(@"-(bool) focusDirty");
}

-(void) setWidgetId:(long long) {
	%orig;
	NSLog(@"-(void) setWidgetId:(long long)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(int) priority {
	%orig;
	NSLog(@"-(int) priority");
}

-(bool) enabled {
	%orig;
	NSLog(@"-(bool) enabled");
}

-(bool) visible {
	%orig;
	NSLog(@"-(bool) visible");
}

-(void) setVisible:(bool) {
	%orig;
	NSLog(@"-(void) setVisible:(bool)");
}

-(void) setSelectable:(bool) {
	%orig;
	NSLog(@"-(void) setSelectable:(bool)");
}

-(bool) selectable {
	%orig;
	NSLog(@"-(bool) selectable");
}

-(void) focus {
	%orig;
	NSLog(@"-(void) focus");
}

%end

%hook IDTable

-(id) initWithWidgetId:(long long) tableModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) tableModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(void) setRowCount:(long long) columnCount:(long long) {
	%orig;
	NSLog(@"-(void) setRowCount:(long long) columnCount:(long long)");
}

-(void) setCell:(id) atRow:(long long) column:(long long) {
	%orig;
	NSLog(@"-(void) setCell:(id) atRow:(long long) column:(long long)");
}

-(void) focusRow:(int) {
	%orig;
	NSLog(@"-(void) focusRow:(int)");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) setNeedsFlush {
	%orig;
	NSLog(@"-(void) setNeedsFlush");
}

-(void) hmiDidStopForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStopForApplication:(id)");
}

-(id) initWithWidgetId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long)");
}

-(long long) actionId {
	%orig;
	NSLog(@"-(long long) actionId");
}

-(void) setActionId:(long long) {
	%orig;
	NSLog(@"-(void) setActionId:(long long)");
}

-(void) rowSelected:(id) {
	%orig;
	NSLog(@"-(void) rowSelected:(id)");
}

-(id) targetModel {
	%orig;
	NSLog(@"-(id) targetModel");
}

-(long long) targetHmiStateId {
	%orig;
	NSLog(@"-(long long) targetHmiStateId");
}

-(void) setTargetHmiStateIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTargetHmiStateIdDirty:(bool)");
}

-(void) setTargetHmiStateId:(long long) {
	%orig;
	NSLog(@"-(void) setTargetHmiStateId:(long long)");
}

-(void) flushTarget {
	%orig;
	NSLog(@"-(void) flushTarget");
}

-(bool) targetHmiStateIdDirty {
	%orig;
	NSLog(@"-(bool) targetHmiStateIdDirty");
}

-(long long) focusActionId {
	%orig;
	NSLog(@"-(long long) focusActionId");
}

-(void) rowFocused:(id) {
	%orig;
	NSLog(@"-(void) rowFocused:(id)");
}

-(id) columnWidthsString {
	%orig;
	NSLog(@"-(id) columnWidthsString");
}

-(void) setColumnWidthsDirty:(bool) {
	%orig;
	NSLog(@"-(void) setColumnWidthsDirty:(bool)");
}

-(void) setTableDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTableDirty:(bool)");
}

-(void) setSelectedRowDirty:(bool) {
	%orig;
	NSLog(@"-(void) setSelectedRowDirty:(bool)");
}

-(void) sendEmptyTable {
	%orig;
	NSLog(@"-(void) sendEmptyTable");
}

-(void) setColumnWidthsString:(id) {
	%orig;
	NSLog(@"-(void) setColumnWidthsString:(id)");
}

-(void) setTableCutType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setTableCutType:(unsigned long long)");
}

-(void) setTableCutTypeDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTableCutTypeDirty:(bool)");
}

-(bool) tableCutTypeDirty {
	%orig;
	NSLog(@"-(bool) tableCutTypeDirty");
}

-(unsigned long long) tableCutType {
	%orig;
	NSLog(@"-(unsigned long long) tableCutType");
}

-(bool) columnWidthsDirty {
	%orig;
	NSLog(@"-(bool) columnWidthsDirty");
}

-(void) flushTableContent:(int) {
	%orig;
	NSLog(@"-(void) flushTableContent:(int)");
}

-(bool) selectedRowDirty {
	%orig;
	NSLog(@"-(bool) selectedRowDirty");
}

-(bool) tableDirty {
	%orig;
	NSLog(@"-(bool) tableDirty");
}

-(void) flushTableCells:(int) {
	%orig;
	NSLog(@"-(void) flushTableCells:(int)");
}

-(id) columnNumbersNeedsFlushForSpeed:(int) inRow:(long long) {
	%orig;
	NSLog(@"-(id) columnNumbersNeedsFlushForSpeed:(int) inRow:(long long)");
}

-(void) flushColumns:(id) fromRow:(long long) countOfRows:(long long) {
	%orig;
	NSLog(@"-(void) flushColumns:(id) fromRow:(long long) countOfRows:(long long)");
}

-(id) initWithWidgetId:(long long) model:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(void) setCutType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCutType:(unsigned long long)");
}

-(void) setFocusActionId:(long long) {
	%orig;
	NSLog(@"-(void) setFocusActionId:(long long)");
}

-(void) flushFromColumn:(long long) countOfColumns:(long long) fromRow:(long long) countOfRows:(long long) {
	%orig;
	NSLog(@"-(void) flushFromColumn:(long long) countOfColumns:(long long) fromRow:(long long) countOfRows:(long long)");
}

-(long long) cols {
	%orig;
	NSLog(@"-(long long) cols");
}

-(void) setCols:(long long) {
	%orig;
	NSLog(@"-(void) setCols:(long long)");
}

-(void) setCells:(id) {
	%orig;
	NSLog(@"-(void) setCells:(id)");
}

-(void) removeAllCells {
	%orig;
	NSLog(@"-(void) removeAllCells");
}

-(id) tableModel {
	%orig;
	NSLog(@"-(id) tableModel");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(int) selectedRow {
	%orig;
	NSLog(@"-(int) selectedRow");
}

-(void) setSelectedRow:(int) {
	%orig;
	NSLog(@"-(void) setSelectedRow:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(long long) rows {
	%orig;
	NSLog(@"-(long long) rows");
}

-(id) targetView {
	%orig;
	NSLog(@"-(id) targetView");
}

-(void) setTargetView:(id) {
	%orig;
	NSLog(@"-(void) setTargetView:(id)");
}

-(void) setColumnWidths:(id) {
	%orig;
	NSLog(@"-(void) setColumnWidths:(id)");
}

-(void) setVisible:(bool) {
	%orig;
	NSLog(@"-(void) setVisible:(bool)");
}

-(void) setTimer:(id) {
	%orig;
	NSLog(@"-(void) setTimer:(id)");
}

-(id) timer {
	%orig;
	NSLog(@"-(id) timer");
}

-(id) cells {
	%orig;
	NSLog(@"-(id) cells");
}

-(void) setRows:(long long) {
	%orig;
	NSLog(@"-(void) setRows:(long long)");
}

-(void) focus {
	%orig;
	NSLog(@"-(void) focus");
}

%end

%hook IDSpeller

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(id) initWithWidgetId:(long long) actionId:(long long) resultActionId:(long long) resultModel:(id) suggestActionId:(long long) suggestModel:(id) targetModel:(id) suggestTargetModel:(id) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) actionId:(long long) resultActionId:(long long) resultModel:(id) suggestActionId:(long long) suggestModel:(id) targetModel:(id) suggestTargetModel:(id)");
}

-(id) initWithWidgetId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long)");
}

-(long long) actionId {
	%orig;
	NSLog(@"-(long long) actionId");
}

-(void) setActionId:(long long) {
	%orig;
	NSLog(@"-(void) setActionId:(long long)");
}

-(void) anotherLetter:(id) {
	%orig;
	NSLog(@"-(void) anotherLetter:(id)");
}

-(long long) resultActionId {
	%orig;
	NSLog(@"-(long long) resultActionId");
}

-(void) okClicked:(id) {
	%orig;
	NSLog(@"-(void) okClicked:(id)");
}

-(long long) suggestActionId {
	%orig;
	NSLog(@"-(long long) suggestActionId");
}

-(void) rowSelected:(id) {
	%orig;
	NSLog(@"-(void) rowSelected:(id)");
}

-(id) targetModel {
	%orig;
	NSLog(@"-(id) targetModel");
}

-(long long) targetHmiStateId {
	%orig;
	NSLog(@"-(long long) targetHmiStateId");
}

-(void) setTargetHmiStateIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTargetHmiStateIdDirty:(bool)");
}

-(id) suggestTargetModel {
	%orig;
	NSLog(@"-(id) suggestTargetModel");
}

-(long long) suggestTargetHmiStateId {
	%orig;
	NSLog(@"-(long long) suggestTargetHmiStateId");
}

-(void) setSuggestTargetHmiStateIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setSuggestTargetHmiStateIdDirty:(bool)");
}

-(void) setResultsDirty:(bool) {
	%orig;
	NSLog(@"-(void) setResultsDirty:(bool)");
}

-(void) deleteLetter {
	%orig;
	NSLog(@"-(void) deleteLetter");
}

-(void) appendLetter:(id) {
	%orig;
	NSLog(@"-(void) appendLetter:(id)");
}

-(void) setSearchStringDirty:(bool) {
	%orig;
	NSLog(@"-(void) setSearchStringDirty:(bool)");
}

-(void) setSuggestTargetHmiStateId:(long long) {
	%orig;
	NSLog(@"-(void) setSuggestTargetHmiStateId:(long long)");
}

-(void) flushSuggestTarget {
	%orig;
	NSLog(@"-(void) flushSuggestTarget");
}

-(void) setTargetHmiStateId:(long long) {
	%orig;
	NSLog(@"-(void) setTargetHmiStateId:(long long)");
}

-(void) flushTarget {
	%orig;
	NSLog(@"-(void) flushTarget");
}

-(bool) targetHmiStateIdDirty {
	%orig;
	NSLog(@"-(bool) targetHmiStateIdDirty");
}

-(bool) suggestTargetHmiStateIdDirty {
	%orig;
	NSLog(@"-(bool) suggestTargetHmiStateIdDirty");
}

-(bool) searchStringDirty {
	%orig;
	NSLog(@"-(bool) searchStringDirty");
}

-(id) resultModel {
	%orig;
	NSLog(@"-(id) resultModel");
}

-(bool) resultsDirty {
	%orig;
	NSLog(@"-(bool) resultsDirty");
}

-(id) suggestModel {
	%orig;
	NSLog(@"-(id) suggestModel");
}

-(id) initWithActionId:(long long) resultActionId:(long long) resultModel:(id) suggestActionId:(long long) suggestModel:(id) targetModel:(id) {
	%orig;
	NSLog(@"-(id) initWithActionId:(long long) resultActionId:(long long) resultModel:(id) suggestActionId:(long long) suggestModel:(id) targetModel:(id)");
}

-(id) initWithWidgetId:(long long) actionId:(long long) resultActionId:(long long) resultModel:(id) suggestActionId:(long long) suggestModel:(id) targetModel:(id) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) actionId:(long long) resultActionId:(long long) resultModel:(id) suggestActionId:(long long) suggestModel:(id) targetModel:(id)");
}

-(void) setSuggestTargetView:(id) {
	%orig;
	NSLog(@"-(void) setSuggestTargetView:(id)");
}

-(id) suggestTargetView {
	%orig;
	NSLog(@"-(id) suggestTargetView");
}

-(void) setResultActionId:(long long) {
	%orig;
	NSLog(@"-(void) setResultActionId:(long long)");
}

-(void) setResultModel:(id) {
	%orig;
	NSLog(@"-(void) setResultModel:(id)");
}

-(void) setSuggestActionId:(long long) {
	%orig;
	NSLog(@"-(void) setSuggestActionId:(long long)");
}

-(void) setSuggestModel:(id) {
	%orig;
	NSLog(@"-(void) setSuggestModel:(id)");
}

-(void) setTargetModel:(id) {
	%orig;
	NSLog(@"-(void) setTargetModel:(id)");
}

-(void) setSuggestTargetModel:(id) {
	%orig;
	NSLog(@"-(void) setSuggestTargetModel:(id)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) deleteAll {
	%orig;
	NSLog(@"-(void) deleteAll");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(unsigned long long) type {
	%orig;
	NSLog(@"-(unsigned long long) type");
}

-(id) targetView {
	%orig;
	NSLog(@"-(id) targetView");
}

-(void) setTargetView:(id) {
	%orig;
	NSLog(@"-(void) setTargetView:(id)");
}

-(void) clear {
	%orig;
	NSLog(@"-(void) clear");
}

-(id) searchString {
	%orig;
	NSLog(@"-(id) searchString");
}

-(id) results {
	%orig;
	NSLog(@"-(id) results");
}

-(void) setSearchString:(id) {
	%orig;
	NSLog(@"-(void) setSearchString:(id)");
}

-(void) setResults:(id) {
	%orig;
	NSLog(@"-(void) setResults:(id)");
}

%end

%hook IDGauge

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(bool) textDirty {
	%orig;
	NSLog(@"-(bool) textDirty");
}

-(bool) positionDirty {
	%orig;
	NSLog(@"-(bool) positionDirty");
}

-(void) setTextDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextDirty:(bool)");
}

-(void) setPositionDirty:(bool) {
	%orig;
	NSLog(@"-(void) setPositionDirty:(bool)");
}

-(id) valueModel {
	%orig;
	NSLog(@"-(id) valueModel");
}

-(id) initWithWidgetId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long)");
}

-(id) initWithWidgetId:(long long) valueModel:(id) textModel:(id) actionId:(long long) changeActionId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) valueModel:(id) textModel:(id) actionId:(long long) changeActionId:(long long)");
}

-(id) textModel {
	%orig;
	NSLog(@"-(id) textModel");
}

-(long long) textId {
	%orig;
	NSLog(@"-(long long) textId");
}

-(void) setTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextIdDirty:(bool)");
}

-(long long) actionId {
	%orig;
	NSLog(@"-(long long) actionId");
}

-(long long) changeActionId {
	%orig;
	NSLog(@"-(long long) changeActionId");
}

-(bool) widthDirty {
	%orig;
	NSLog(@"-(bool) widthDirty");
}

-(void) setWidthDirty:(bool) {
	%orig;
	NSLog(@"-(void) setWidthDirty:(bool)");
}

-(bool) textIdDirty {
	%orig;
	NSLog(@"-(bool) textIdDirty");
}

-(id) initWithWidgetId:(long long) model:(id) textModel:(id) actionId:(long long) changeActionId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id) textModel:(id) actionId:(long long) changeActionId:(long long)");
}

-(void) setTextId:(long long) {
	%orig;
	NSLog(@"-(void) setTextId:(long long)");
}

-(void) setActionId:(long long) {
	%orig;
	NSLog(@"-(void) setActionId:(long long)");
}

-(void) setChangeActionId:(long long) {
	%orig;
	NSLog(@"-(void) setChangeActionId:(long long)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(long long) width {
	%orig;
	NSLog(@"-(long long) width");
}

-(void) setWidth:(long long) {
	%orig;
	NSLog(@"-(void) setWidth:(long long)");
}

-(void) setPosition:(CGPoint) {
	%orig;
	NSLog(@"-(void) setPosition:(CGPoint)");
}

-(CGPoint) position {
	%orig;
	NSLog(@"-(CGPoint) position");
}

%end

%hook IDTimeGauge

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) onGaugeAction:(id) {
	%orig;
	NSLog(@"-(void) onGaugeAction:(id)");
}

-(void) onGaugeChangeAction:(id) {
	%orig;
	NSLog(@"-(void) onGaugeChangeAction:(id)");
}

-(void) setTimeDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTimeDirty:(bool)");
}

-(bool) timeDirty {
	%orig;
	NSLog(@"-(bool) timeDirty");
}

-(id) time {
	%orig;
	NSLog(@"-(id) time");
}

-(void) setTime:(id) {
	%orig;
	NSLog(@"-(void) setTime:(id)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook IDIntegerGauge

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) onGaugeAction:(id) {
	%orig;
	NSLog(@"-(void) onGaugeAction:(id)");
}

-(void) onGaugeChangeAction:(id) {
	%orig;
	NSLog(@"-(void) onGaugeChangeAction:(id)");
}

-(void) setValueDirty:(bool) {
	%orig;
	NSLog(@"-(void) setValueDirty:(bool)");
}

-(bool) valueDirty {
	%orig;
	NSLog(@"-(bool) valueDirty");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(long long) value {
	%orig;
	NSLog(@"-(long long) value");
}

-(void) setValue:(long long) {
	%orig;
	NSLog(@"-(void) setValue:(long long)");
}

%end

%hook IDDateGauge

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) setDateDirty:(bool) {
	%orig;
	NSLog(@"-(void) setDateDirty:(bool)");
}

-(bool) dateDirty {
	%orig;
	NSLog(@"-(bool) dateDirty");
}

-(void) onGaugeAction:(id) {
	%orig;
	NSLog(@"-(void) onGaugeAction:(id)");
}

-(void) onGaugeChangeAction:(id) {
	%orig;
	NSLog(@"-(void) onGaugeChangeAction:(id)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) date {
	%orig;
	NSLog(@"-(id) date");
}

-(void) setDate:(id) {
	%orig;
	NSLog(@"-(void) setDate:(id)");
}

%end

%hook IDCheckbox

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(bool) textDirty {
	%orig;
	NSLog(@"-(bool) textDirty");
}

-(void) setTextDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextDirty:(bool)");
}

-(void) didToggle:(id) {
	%orig;
	NSLog(@"-(void) didToggle:(id)");
}

-(void) setCheckedDirty:(bool) {
	%orig;
	NSLog(@"-(void) setCheckedDirty:(bool)");
}

-(bool) checkedDirty {
	%orig;
	NSLog(@"-(bool) checkedDirty");
}

-(id) initWithWidgetId:(long long) model:(id) textModel:(id) actionId:(long long) style:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id) textModel:(id) actionId:(long long) style:(long long)");
}

-(id) valueModel {
	%orig;
	NSLog(@"-(id) valueModel");
}

-(id) initWithWidgetId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long)");
}

-(id) textModel {
	%orig;
	NSLog(@"-(id) textModel");
}

-(long long) textId {
	%orig;
	NSLog(@"-(long long) textId");
}

-(void) setTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextIdDirty:(bool)");
}

-(long long) actionId {
	%orig;
	NSLog(@"-(long long) actionId");
}

-(bool) textIdDirty {
	%orig;
	NSLog(@"-(bool) textIdDirty");
}

-(void) setTextId:(long long) {
	%orig;
	NSLog(@"-(void) setTextId:(long long)");
}

-(void) setActionId:(long long) {
	%orig;
	NSLog(@"-(void) setActionId:(long long)");
}

-(id) initWithWidgetId:(long long) valueModel:(id) textModel:(id) actionId:(long long) style:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) valueModel:(id) textModel:(id) actionId:(long long) style:(long long)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(long long) style {
	%orig;
	NSLog(@"-(long long) style");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setChecked:(bool) {
	%orig;
	NSLog(@"-(void) setChecked:(bool)");
}

-(bool) isChecked {
	%orig;
	NSLog(@"-(bool) isChecked");
}

%end

%hook IDBasicButton

-(void) setTarget:(id) selector:(SEL) forActionEvent:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setTarget:(id) selector:(SEL) forActionEvent:(unsigned long long)");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) setSelectTarget:(id) {
	%orig;
	NSLog(@"-(void) setSelectTarget:(id)");
}

-(void) setSelectSelector:(SEL) {
	%orig;
	NSLog(@"-(void) setSelectSelector:(SEL)");
}

-(void) setFocusTarget:(id) {
	%orig;
	NSLog(@"-(void) setFocusTarget:(id)");
}

-(void) setFocusSelector:(SEL) {
	%orig;
	NSLog(@"-(void) setFocusSelector:(SEL)");
}

-(long long) selectActionId {
	%orig;
	NSLog(@"-(long long) selectActionId");
}

-(void) buttonFocused:(id) {
	%orig;
	NSLog(@"-(void) buttonFocused:(id)");
}

-(void) setImageDirty:(bool) {
	%orig;
	NSLog(@"-(void) setImageDirty:(bool)");
}

-(id) selectTarget {
	%orig;
	NSLog(@"-(id) selectTarget");
}

-(SEL) selectSelector {
	%orig;
	NSLog(@"-(SEL) selectSelector");
}

-(id) focusTarget {
	%orig;
	NSLog(@"-(id) focusTarget");
}

-(SEL) focusSelector {
	%orig;
	NSLog(@"-(SEL) focusSelector");
}

-(bool) imageDirty {
	%orig;
	NSLog(@"-(bool) imageDirty");
}

-(void) setSelectActionId:(long long) {
	%orig;
	NSLog(@"-(void) setSelectActionId:(long long)");
}

-(id) initWithWidgetId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long)");
}

-(id) imageModel {
	%orig;
	NSLog(@"-(id) imageModel");
}

-(void) setImageIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setImageIdDirty:(bool)");
}

-(bool) imageIdDirty {
	%orig;
	NSLog(@"-(bool) imageIdDirty");
}

-(id) targetModel {
	%orig;
	NSLog(@"-(id) targetModel");
}

-(long long) targetHmiStateId {
	%orig;
	NSLog(@"-(long long) targetHmiStateId");
}

-(void) setTargetHmiStateIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTargetHmiStateIdDirty:(bool)");
}

-(void) setTargetHmiStateId:(long long) {
	%orig;
	NSLog(@"-(void) setTargetHmiStateId:(long long)");
}

-(void) flushTarget {
	%orig;
	NSLog(@"-(void) flushTarget");
}

-(bool) targetHmiStateIdDirty {
	%orig;
	NSLog(@"-(bool) targetHmiStateIdDirty");
}

-(long long) focusActionId {
	%orig;
	NSLog(@"-(long long) focusActionId");
}

-(void) setFocusActionId:(long long) {
	%orig;
	NSLog(@"-(void) setFocusActionId:(long long)");
}

-(id) initWithWidgetId:(long long) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(long long) imageId {
	%orig;
	NSLog(@"-(long long) imageId");
}

-(void) setImageId:(long long) {
	%orig;
	NSLog(@"-(void) setImageId:(long long)");
}

-(void) buttonSelected:(id) {
	%orig;
	NSLog(@"-(void) buttonSelected:(id)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) targetView {
	%orig;
	NSLog(@"-(id) targetView");
}

-(void) setTargetView:(id) {
	%orig;
	NSLog(@"-(void) setTargetView:(id)");
}

%end

%hook IDToolbarButton

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(id) initWithWidgetId:(long long) tooltipModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) tooltipModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(id) initWithWidgetId:(long long) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(id) tooltipTextModel {
	%orig;
	NSLog(@"-(id) tooltipTextModel");
}

-(void) setTooltipTextDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTooltipTextDirty:(bool)");
}

-(long long) tooltipTextId {
	%orig;
	NSLog(@"-(long long) tooltipTextId");
}

-(void) setTooltipTextId:(long long) {
	%orig;
	NSLog(@"-(void) setTooltipTextId:(long long)");
}

-(bool) tooltipTextDirty {
	%orig;
	NSLog(@"-(bool) tooltipTextDirty");
}

-(id) tooltipText {
	%orig;
	NSLog(@"-(id) tooltipText");
}

-(bool) tooltipTextIdDirty {
	%orig;
	NSLog(@"-(bool) tooltipTextIdDirty");
}

-(void) setTooltipTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTooltipTextIdDirty:(bool)");
}

-(id) initWithWidgetId:(long long) model:(id) tooltipModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id) tooltipModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(void) setTooltipText:(id) {
	%orig;
	NSLog(@"-(void) setTooltipText:(id)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDButton

-(id) initWithWidgetId:(long long) textModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) textModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(bool) textDirty {
	%orig;
	NSLog(@"-(bool) textDirty");
}

-(void) setTextDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextDirty:(bool)");
}

-(id) initWithWidgetId:(long long) model:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(id) textModel {
	%orig;
	NSLog(@"-(id) textModel");
}

-(long long) textId {
	%orig;
	NSLog(@"-(long long) textId");
}

-(void) setTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextIdDirty:(bool)");
}

-(bool) textIdDirty {
	%orig;
	NSLog(@"-(bool) textIdDirty");
}

-(void) setTextId:(long long) {
	%orig;
	NSLog(@"-(void) setTextId:(long long)");
}

-(id) initWithWidgetId:(long long) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

%end

%hook IDFilterButton

-(id) initWithWidgetId:(long long) textModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) textModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(id) initWithWidgetId:(long long) textModel:(id) tooltipModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) textModel:(id) tooltipModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(id) tooltipTextModel {
	%orig;
	NSLog(@"-(id) tooltipTextModel");
}

-(void) setTooltipTextDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTooltipTextDirty:(bool)");
}

-(long long) tooltipTextId {
	%orig;
	NSLog(@"-(long long) tooltipTextId");
}

-(void) setTooltipTextId:(long long) {
	%orig;
	NSLog(@"-(void) setTooltipTextId:(long long)");
}

-(bool) tooltipTextDirty {
	%orig;
	NSLog(@"-(bool) tooltipTextDirty");
}

-(id) tooltipText {
	%orig;
	NSLog(@"-(id) tooltipText");
}

-(bool) tooltipTextIdDirty {
	%orig;
	NSLog(@"-(bool) tooltipTextIdDirty");
}

-(void) setTooltipTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTooltipTextIdDirty:(bool)");
}

-(id) initWithWidgetId:(long long) model:(id) tooltipModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id) tooltipModel:(id) imageModel:(id) targetModel:(id) actionId:(long long) focusId:(long long)");
}

-(void) setTooltipText:(id) {
	%orig;
	NSLog(@"-(void) setTooltipText:(id)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDImage

-(void) setImageData:(id) clearWhileSending:(bool) {
	%orig;
	NSLog(@"-(void) setImageData:(id) clearWhileSending:(bool)");
}

-(void) setImageData:(id) clearWhileSending:(bool) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) setImageData:(id) clearWhileSending:(bool) completionHandler:(id)");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(bool) positionDirty {
	%orig;
	NSLog(@"-(bool) positionDirty");
}

-(bool) clearWhileSending {
	%orig;
	NSLog(@"-(bool) clearWhileSending");
}

-(void) setPositionDirty:(bool) {
	%orig;
	NSLog(@"-(void) setPositionDirty:(bool)");
}

-(id) initWithWidgetId:(long long) model:(id) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id)");
}

-(id) initWithWidgetId:(long long) imageModel:(id) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) imageModel:(id)");
}

-(id) initWithWidgetId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long)");
}

-(id) imageModel {
	%orig;
	NSLog(@"-(id) imageModel");
}

-(void) setImageData:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) setImageData:(id) completionHandler:(id)");
}

-(void) setImageDataDirty:(bool) {
	%orig;
	NSLog(@"-(void) setImageDataDirty:(bool)");
}

-(void) setImageIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setImageIdDirty:(bool)");
}

-(void) setSizeDirty:(bool) {
	%orig;
	NSLog(@"-(void) setSizeDirty:(bool)");
}

-(bool) imageIdDirty {
	%orig;
	NSLog(@"-(bool) imageIdDirty");
}

-(bool) sizeDirty {
	%orig;
	NSLog(@"-(bool) sizeDirty");
}

-(bool) imageDataDirty {
	%orig;
	NSLog(@"-(bool) imageDataDirty");
}

-(void) setClearWhileSending:(bool) {
	%orig;
	NSLog(@"-(void) setClearWhileSending:(bool)");
}

-(long long) imageId {
	%orig;
	NSLog(@"-(long long) imageId");
}

-(void) setImageId:(long long) {
	%orig;
	NSLog(@"-(void) setImageId:(long long)");
}

-(id) imageData {
	%orig;
	NSLog(@"-(id) imageData");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(CGSize) size {
	%orig;
	NSLog(@"-(CGSize) size");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setPosition:(CGPoint) {
	%orig;
	NSLog(@"-(void) setPosition:(CGPoint)");
}

-(CGPoint) position {
	%orig;
	NSLog(@"-(CGPoint) position");
}

-(void) setSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setSize:(CGSize)");
}

-(id) completionHandler {
	%orig;
	NSLog(@"-(id) completionHandler");
}

-(void) setCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setCompletionHandler:(id)");
}

-(void) setImageData:(id) {
	%orig;
	NSLog(@"-(void) setImageData:(id)");
}

%end

%hook IDReflectedImage

-(id) initWithWidgetID:(long long) model:(id) reflectionWidgetID:(long long) reflectionModelID:(long long) gloss:(float) {
	%orig;
	NSLog(@"-(id) initWithWidgetID:(long long) model:(id) reflectionWidgetID:(long long) reflectionModelID:(long long) gloss:(float)");
}

-(id) initWithWidgetID:(long long) modelID:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetID:(long long) modelID:(long long)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

%end

%hook IDLabel

-(id) initWithWidgetId:(long long) textModel:(id) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) textModel:(id)");
}

-(void) setWaitingAnimation:(bool) {
	%orig;
	NSLog(@"-(void) setWaitingAnimation:(bool)");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(bool) textDirty {
	%orig;
	NSLog(@"-(bool) textDirty");
}

-(bool) positionDirty {
	%orig;
	NSLog(@"-(bool) positionDirty");
}

-(bool) clearWhileSending {
	%orig;
	NSLog(@"-(bool) clearWhileSending");
}

-(void) setTextDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextDirty:(bool)");
}

-(void) setPositionDirty:(bool) {
	%orig;
	NSLog(@"-(void) setPositionDirty:(bool)");
}

-(id) initWithWidgetId:(long long) model:(id) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) model:(id)");
}

-(id) initWithWidgetId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long)");
}

-(id) textModel {
	%orig;
	NSLog(@"-(id) textModel");
}

-(long long) textId {
	%orig;
	NSLog(@"-(long long) textId");
}

-(void) setTextIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTextIdDirty:(bool)");
}

-(bool) textIdDirty {
	%orig;
	NSLog(@"-(bool) textIdDirty");
}

-(void) setTextId:(long long) {
	%orig;
	NSLog(@"-(void) setTextId:(long long)");
}

-(void) setText:(id) clearWhileSending:(bool) {
	%orig;
	NSLog(@"-(void) setText:(id) clearWhileSending:(bool)");
}

-(bool) waitingAnimation {
	%orig;
	NSLog(@"-(bool) waitingAnimation");
}

-(bool) waitingAnimationDirty {
	%orig;
	NSLog(@"-(bool) waitingAnimationDirty");
}

-(void) setWaitingAnimationDirty:(bool) {
	%orig;
	NSLog(@"-(void) setWaitingAnimationDirty:(bool)");
}

-(void) setClearWhileSending:(bool) {
	%orig;
	NSLog(@"-(void) setClearWhileSending:(bool)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(void) setPosition:(CGPoint) {
	%orig;
	NSLog(@"-(void) setPosition:(CGPoint)");
}

-(CGPoint) position {
	%orig;
	NSLog(@"-(CGPoint) position");
}

%end

%hook IDAlignedLabel

-(id) initWithWidgetId:(long long) modelId:(long long) {
	%orig;
	NSLog(@"-(id) initWithWidgetId:(long long) modelId:(long long)");
}

-(bool) alignment_dirty {
	%orig;
	NSLog(@"-(bool) alignment_dirty");
}

-(void) setAlignment_dirty:(bool) {
	%orig;
	NSLog(@"-(void) setAlignment_dirty:(bool)");
}

-(bool) usePosition {
	%orig;
	NSLog(@"-(bool) usePosition");
}

-(void) setUsePosition:(bool) {
	%orig;
	NSLog(@"-(void) setUsePosition:(bool)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(long long) alignment {
	%orig;
	NSLog(@"-(long long) alignment");
}

-(void) setAlignment:(long long) {
	%orig;
	NSLog(@"-(void) setAlignment:(long long)");
}

%end

%hook PMAudioSamplePlayer

-(void) flushBrowseSamples {
	%orig;
	NSLog(@"-(void) flushBrowseSamples");
}

-(void) resumeSample {
	%orig;
	NSLog(@"-(void) resumeSample");
}

-(void) pauseSample {
	%orig;
	NSLog(@"-(void) pauseSample");
}

-(void) playBrowseSamples:(id) {
	%orig;
	NSLog(@"-(void) playBrowseSamples:(id)");
}

-(bool) wasRadioPlaying {
	%orig;
	NSLog(@"-(bool) wasRadioPlaying");
}

-(bool) isCurrentPlaying {
	%orig;
	NSLog(@"-(bool) isCurrentPlaying");
}

-(void) playSamples:(id) withCommand:(id) {
	%orig;
	NSLog(@"-(void) playSamples:(id) withCommand:(id)");
}

-(id) resumeCommand {
	%orig;
	NSLog(@"-(id) resumeCommand");
}

-(void) stopSample {
	%orig;
	NSLog(@"-(void) stopSample");
}

-(void) cancelSample {
	%orig;
	NSLog(@"-(void) cancelSample");
}

-(void) stopSampleWithCommand:(id) {
	%orig;
	NSLog(@"-(void) stopSampleWithCommand:(id)");
}

-(void) pauseSampleWithCommand:(id) {
	%orig;
	NSLog(@"-(void) pauseSampleWithCommand:(id)");
}

-(void) resumeSampleWithCommand:(id) {
	%orig;
	NSLog(@"-(void) resumeSampleWithCommand:(id)");
}

-(void) sleepTimerEnded:(id) {
	%orig;
	NSLog(@"-(void) sleepTimerEnded:(id)");
}

-(void) playSample:(id) {
	%orig;
	NSLog(@"-(void) playSample:(id)");
}

-(void) setPlayCommand:(id) {
	%orig;
	NSLog(@"-(void) setPlayCommand:(id)");
}

-(void) playNextSample {
	%orig;
	NSLog(@"-(void) playNextSample");
}

-(void) playSampleInternal:(id) {
	%orig;
	NSLog(@"-(void) playSampleInternal:(id)");
}

-(void) setStopCommand:(id) {
	%orig;
	NSLog(@"-(void) setStopCommand:(id)");
}

-(void) setPauseCommand:(id) {
	%orig;
	NSLog(@"-(void) setPauseCommand:(id)");
}

-(void) setResumeCommand:(id) {
	%orig;
	NSLog(@"-(void) setResumeCommand:(id)");
}

-(id) currentPlayingUrl {
	%orig;
	NSLog(@"-(id) currentPlayingUrl");
}

-(void) playBrowseSample:(id) {
	%orig;
	NSLog(@"-(void) playBrowseSample:(id)");
}

-(void) audioUrlLoading:(id) {
	%orig;
	NSLog(@"-(void) audioUrlLoading:(id)");
}

-(id) currentlyPlayingUrl {
	%orig;
	NSLog(@"-(id) currentlyPlayingUrl");
}

-(void) audioUrlPaused:(id) {
	%orig;
	NSLog(@"-(void) audioUrlPaused:(id)");
}

-(void) audioUrlPlaying:(id) {
	%orig;
	NSLog(@"-(void) audioUrlPlaying:(id)");
}

-(void) audioUrlStopped:(id) atProgress:(float) {
	%orig;
	NSLog(@"-(void) audioUrlStopped:(id) atProgress:(float)");
}

-(id) pauseCommand {
	%orig;
	NSLog(@"-(id) pauseCommand");
}

-(id) playCommand {
	%orig;
	NSLog(@"-(id) playCommand");
}

-(id) stopCommand {
	%orig;
	NSLog(@"-(id) stopCommand");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PMAudioSample

-(id) initWithUrl:(id) musicId:(id) gain:(id) {
	%orig;
	NSLog(@"-(id) initWithUrl:(id) musicId:(id) gain:(id)");
}

-(void) setMusicId:(id) {
	%orig;
	NSLog(@"-(void) setMusicId:(id)");
}

-(id) musicId {
	%orig;
	NSLog(@"-(id) musicId");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

-(void) setGain:(id) {
	%orig;
	NSLog(@"-(void) setGain:(id)");
}

-(id) gain {
	%orig;
	NSLog(@"-(id) gain");
}

%end

%hook ConnectionRequestHandler

+(id) handlerWithDelegate:(id) context:(id) {
	%orig;
	NSLog(@"+(id) handlerWithDelegate:(id) context:(id)");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setContext:(id) {
	%orig;
	NSLog(@"-(void) setContext:(id)");
}

-(id) context {
	%orig;
	NSLog(@"-(id) context");
}

%end

%hook PMURLShortening

+(void) shortUrlForStation:(id) shareStationName:(id) withCorrelationId:(id) delegate:(id) context:(id) {
	%orig;
	NSLog(@"+(void) shortUrlForStation:(id) shareStationName:(id) withCorrelationId:(id) delegate:(id) context:(id)");
}

+(void) shortUrlForStation:(id) withCorrelationId:(id) delegate:(id) context:(id) {
	%orig;
	NSLog(@"+(void) shortUrlForStation:(id) withCorrelationId:(id) delegate:(id) context:(id)");
}

+(void) shortUrlForTrack:(id) onStation:(id) withCorrelationId:(id) delegate:(id) context:(id) {
	%orig;
	NSLog(@"+(void) shortUrlForTrack:(id) onStation:(id) withCorrelationId:(id) delegate:(id) context:(id)");
}

+(id) connectionHandlers {
	%orig;
	NSLog(@"+(id) connectionHandlers");
}

%end

%hook PMSocialConnect

+(id) sharedSocialConnect {
	%orig;
	NSLog(@"+(id) sharedSocialConnect");
}

+(id) nameOfPlatform:(long long) {
	%orig;
	NSLog(@"+(id) nameOfPlatform:(long long)");
}

-(bool) removeConnectionStateObserver:(id) {
	%orig;
	NSLog(@"-(bool) removeConnectionStateObserver:(id)");
}

-(bool) startQuery:(long long) withQuery:(long long) params:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(bool) startQuery:(long long) withQuery:(long long) params:(id) completionHandler:(id)");
}

-(bool) platformIsEnabled:(long long) {
	%orig;
	NSLog(@"-(bool) platformIsEnabled:(long long)");
}

-(bool) addConnectionStateObserver:(id) {
	%orig;
	NSLog(@"-(bool) addConnectionStateObserver:(id)");
}

-(void) authorize:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) authorize:(long long) context:(id)");
}

-(void) showPlatformDisabledDialog:(long long) {
	%orig;
	NSLog(@"-(void) showPlatformDisabledDialog:(long long)");
}

-(void) authorizeWillStart:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeWillStart:(long long) context:(id)");
}

-(void) authorizeDidEnd:(long long) success:(bool) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeDidEnd:(long long) success:(bool) context:(id)");
}

-(void) deauthorizeDidEnd:(long long) success:(bool) {
	%orig;
	NSLog(@"-(void) deauthorizeDidEnd:(long long) success:(bool)");
}

-(void) setShouldShowProfilePrivacyMessage:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowProfilePrivacyMessage:(bool)");
}

-(void) handleApplication:(id) didFinishLaunchingWithOptions:(id) {
	%orig;
	NSLog(@"-(void) handleApplication:(id) didFinishLaunchingWithOptions:(id)");
}

-(bool) handleApplication:(id) openURL:(id) options:(id) {
	%orig;
	NSLog(@"-(bool) handleApplication:(id) openURL:(id) options:(id)");
}

-(void) logout:(long long) notifyPandora:(bool) {
	%orig;
	NSLog(@"-(void) logout:(long long) notifyPandora:(bool)");
}

-(bool) isValidSocialURL:(id) {
	%orig;
	NSLog(@"-(bool) isValidSocialURL:(id)");
}

-(bool) isConnected:(long long) {
	%orig;
	NSLog(@"-(bool) isConnected:(long long)");
}

-(void) displayMessage:(id) {
	%orig;
	NSLog(@"-(void) displayMessage:(id)");
}

-(bool) post:(long long) params:(id) {
	%orig;
	NSLog(@"-(bool) post:(long long) params:(id)");
}

-(void) restoreFacebookConnectionOnLogin {
	%orig;
	NSLog(@"-(void) restoreFacebookConnectionOnLogin");
}

-(void) removeFacebookConnection {
	%orig;
	NSLog(@"-(void) removeFacebookConnection");
}

-(void) restoreFacebookConnection:(id) {
	%orig;
	NSLog(@"-(void) restoreFacebookConnection:(id)");
}

-(id) twitterAccounts {
	%orig;
	NSLog(@"-(id) twitterAccounts");
}

-(void) presentTwitterAccountPicker:(id) {
	%orig;
	NSLog(@"-(void) presentTwitterAccountPicker:(id)");
}

-(void) removeTwitterConnected {
	%orig;
	NSLog(@"-(void) removeTwitterConnected");
}

-(bool) facebookTokenRefreshInProgress {
	%orig;
	NSLog(@"-(bool) facebookTokenRefreshInProgress");
}

-(bool) checkFacebookPublishPermission {
	%orig;
	NSLog(@"-(bool) checkFacebookPublishPermission");
}

-(id) platformAuthorizeContextDictionary {
	%orig;
	NSLog(@"-(id) platformAuthorizeContextDictionary");
}

-(bool) shouldShowProfilePrivacyMessage {
	%orig;
	NSLog(@"-(bool) shouldShowProfilePrivacyMessage");
}

-(void) requestFacebookAccountPermissionWithContext:(id) {
	%orig;
	NSLog(@"-(void) requestFacebookAccountPermissionWithContext:(id)");
}

-(void) requestTwitterAccountPermissionWithContext:(id) {
	%orig;
	NSLog(@"-(void) requestTwitterAccountPermissionWithContext:(id)");
}

-(void) handleStartQueryCallbackWith:(id) result:(id) error:(id) platform:(long long) {
	%orig;
	NSLog(@"-(void) handleStartQueryCallbackWith:(id) result:(id) error:(id) platform:(long long)");
}

-(id) facebookGraphRequestWithPath:(id) parameters:(id) {
	%orig;
	NSLog(@"-(id) facebookGraphRequestWithPath:(id) parameters:(id)");
}

-(id) facebookGraphRequestWithPath:(id) parameters:(id) HTTPMethod:(id) {
	%orig;
	NSLog(@"-(id) facebookGraphRequestWithPath:(id) parameters:(id) HTTPMethod:(id)");
}

-(void) closeFacebookConnection {
	%orig;
	NSLog(@"-(void) closeFacebookConnection");
}

-(id) newFacebookLoginManager {
	%orig;
	NSLog(@"-(id) newFacebookLoginManager");
}

-(id) facebookReadPermissions {
	%orig;
	NSLog(@"-(id) facebookReadPermissions");
}

-(void) handleFacebookAuthResult:(id) error:(id) {
	%orig;
	NSLog(@"-(void) handleFacebookAuthResult:(id) error:(id)");
}

-(void) handleRequestAccessToAccountCallBack:(bool) accountStore:(id) accountType:(id) status:(id) completionHandler:(id) socialConnect:(?) error:(id) {
	%orig;
	NSLog(@"-(void) handleRequestAccessToAccountCallBack:(bool) accountStore:(id) accountType:(id) status:(id) completionHandler:(id) socialConnect:(?) error:(id)");
}

-(void) accountStoreRequestHandlerWithAccounts:(id) granted:(bool) error:(id) {
	%orig;
	NSLog(@"-(void) accountStoreRequestHandlerWithAccounts:(id) granted:(bool) error:(id)");
}

-(id) facebookRestoreBlocks {
	%orig;
	NSLog(@"-(id) facebookRestoreBlocks");
}

-(bool) facebookRestoreFailed {
	%orig;
	NSLog(@"-(bool) facebookRestoreFailed");
}

-(void) setFacebookTokenRefreshInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setFacebookTokenRefreshInProgress:(bool)");
}

-(void) handleFacebookAuthResult:(id) error:(id) shouldCheckPermissions:(bool) {
	%orig;
	NSLog(@"-(void) handleFacebookAuthResult:(id) error:(id) shouldCheckPermissions:(bool)");
}

-(void) setFacebookRestoreFailed:(bool) {
	%orig;
	NSLog(@"-(void) setFacebookRestoreFailed:(bool)");
}

-(void) setInitialFacebookRestoreInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setInitialFacebookRestoreInProgress:(bool)");
}

-(id) facebookPublishPermissions {
	%orig;
	NSLog(@"-(id) facebookPublishPermissions");
}

-(void) saveFacebookConnection {
	%orig;
	NSLog(@"-(void) saveFacebookConnection");
}

-(void) connectFacebook {
	%orig;
	NSLog(@"-(void) connectFacebook");
}

-(void) displayFacebookError:(id) {
	%orig;
	NSLog(@"-(void) displayFacebookError:(id)");
}

-(void) getFacebookInfo {
	%orig;
	NSLog(@"-(void) getFacebookInfo");
}

-(bool) initialFacebookRestoreInProgress {
	%orig;
	NSLog(@"-(bool) initialFacebookRestoreInProgress");
}

-(bool) isFacebookAccessTokenError:(id) {
	%orig;
	NSLog(@"-(bool) isFacebookAccessTokenError:(id)");
}

-(void) callDelegateWithTwitterResult:(id) {
	%orig;
	NSLog(@"-(void) callDelegateWithTwitterResult:(id)");
}

-(void) notifyDelegateAndOpenTwitterSetting:(id) {
	%orig;
	NSLog(@"-(void) notifyDelegateAndOpenTwitterSetting:(id)");
}

-(id) twitterAccountsAlertController {
	%orig;
	NSLog(@"-(id) twitterAccountsAlertController");
}

-(void) setTwitterAccounts:(id) {
	%orig;
	NSLog(@"-(void) setTwitterAccounts:(id)");
}

-(void) setTwitterAccountsAlertController:(id) {
	%orig;
	NSLog(@"-(void) setTwitterAccountsAlertController:(id)");
}

-(void) notifyConnectionStateObservers:(id) {
	%orig;
	NSLog(@"-(void) notifyConnectionStateObservers:(id)");
}

-(void) setPlatformAuthorizeContextDictionary:(id) {
	%orig;
	NSLog(@"-(void) setPlatformAuthorizeContextDictionary:(id)");
}

-(void) setFacebookRestoreBlocks:(id) {
	%orig;
	NSLog(@"-(void) setFacebookRestoreBlocks:(id)");
}

-(void) deviceOrientationDidChange:(id) {
	%orig;
	NSLog(@"-(void) deviceOrientationDidChange:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setObservers:(id) {
	%orig;
	NSLog(@"-(void) setObservers:(id)");
}

-(id) observers {
	%orig;
	NSLog(@"-(id) observers");
}

%end

%hook PMTeachMarkManager

+(bool) canShowCastingTeachMark {
	%orig;
	NSLog(@"+(bool) canShowCastingTeachMark");
}

+(bool) isShowingTeachmark {
	%orig;
	NSLog(@"+(bool) isShowingTeachmark");
}

+(bool) isShowingEnabledTeachmark {
	%orig;
	NSLog(@"+(bool) isShowingEnabledTeachmark");
}

+(bool) canShowSonosTeachMark {
	%orig;
	NSLog(@"+(bool) canShowSonosTeachMark");
}

+(bool) canShowNowPlayingPandoraOneUpsellOnAdDismissalReadOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowNowPlayingPandoraOneUpsellOnAdDismissalReadOnly:(bool)");
}

+(void) newUserCreated {
	%orig;
	NSLog(@"+(void) newUserCreated");
}

+(void) setSeenOfflineTransitionCoachmark {
	%orig;
	NSLog(@"+(void) setSeenOfflineTransitionCoachmark");
}

+(bool) canShowOfflineStationsReadyCoachmark {
	%orig;
	NSLog(@"+(bool) canShowOfflineStationsReadyCoachmark");
}

+(void) setSeenOfflineStationsReadyCoachmark {
	%orig;
	NSLog(@"+(void) setSeenOfflineStationsReadyCoachmark");
}

+(bool) canShowFirstTimeNowPlayingTeachMarkReadOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowFirstTimeNowPlayingTeachMarkReadOnly:(bool)");
}

+(bool) canShowExistingUserPersonalizationTeachMarkReadOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowExistingUserPersonalizationTeachMarkReadOnly:(bool)");
}

+(bool) canShowExistingUserAddVarietyTeachMarkReadOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowExistingUserAddVarietyTeachMarkReadOnly:(bool)");
}

+(void) setSeenConcertsTeachMark {
	%orig;
	NSLog(@"+(void) setSeenConcertsTeachMark");
}

+(bool) canShowConcertsTeachMark {
	%orig;
	NSLog(@"+(bool) canShowConcertsTeachMark");
}

+(bool) applicationIsShowingModalView {
	%orig;
	NSLog(@"+(bool) applicationIsShowingModalView");
}

+(bool) canShowFirstThumbUpTeachMarkOnNewThumbUpReadOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowFirstThumbUpTeachMarkOnNewThumbUpReadOnly:(bool)");
}

+(bool) canShowExistingUserFirstThumbUpTeachMarkForStationId:(id) readOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowExistingUserFirstThumbUpTeachMarkForStationId:(id) readOnly:(bool)");
}

+(bool) canShowFirstThumbDownTeachMarkOnNewThumbDownReadOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowFirstThumbDownTeachMarkOnNewThumbDownReadOnly:(bool)");
}

+(void) incrementNumberOfSkipsOnCurrentStation {
	%orig;
	NSLog(@"+(void) incrementNumberOfSkipsOnCurrentStation");
}

+(bool) canShowExistingUserFirstThumbDownTeachMarkForStationId:(id) readOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowExistingUserFirstThumbDownTeachMarkForStationId:(id) readOnly:(bool)");
}

+(bool) canShowNowPlayingInHouseProductOnAdDismissal:(long long) productType:(id) readOnly:(bool) {
	%orig;
	NSLog(@"+(bool) canShowNowPlayingInHouseProductOnAdDismissal:(long long) productType:(id) readOnly:(bool)");
}

+(id) nowPlayingUpsellTeachMarkStateForProduct:(long long) productType:(id) {
	%orig;
	NSLog(@"+(id) nowPlayingUpsellTeachMarkStateForProduct:(long long) productType:(id)");
}

+(void) updateNowPlayingUpsellTeachMarkState:(id) forProduct:(long long) productType:(id) {
	%orig;
	NSLog(@"+(void) updateNowPlayingUpsellTeachMarkState:(id) forProduct:(long long) productType:(id)");
}

+(bool) canShowNewUserTeachMarks {
	%orig;
	NSLog(@"+(bool) canShowNewUserTeachMarks");
}

+(bool) hasCastedWithinFrequencyCap:(double) {
	%orig;
	NSLog(@"+(bool) hasCastedWithinFrequencyCap:(double)");
}

+(void) setSeenCastingTeachMark {
	%orig;
	NSLog(@"+(void) setSeenCastingTeachMark");
}

+(void) setSeenSonosTeachMark {
	%orig;
	NSLog(@"+(void) setSeenSonosTeachMark");
}

+(bool) canShowOfflineTransitionCoachmark {
	%orig;
	NSLog(@"+(bool) canShowOfflineTransitionCoachmark");
}

+(bool) canShowExistingUserTeachMarks {
	%orig;
	NSLog(@"+(bool) canShowExistingUserTeachMarks");
}

+(bool) isNewUser {
	%orig;
	NSLog(@"+(bool) isNewUser");
}

+(void) reset {
	%orig;
	NSLog(@"+(void) reset");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(unsigned long long) teachMarkState {
	%orig;
	NSLog(@"-(unsigned long long) teachMarkState");
}

-(bool) suppressTeachMarkPresentation {
	%orig;
	NSLog(@"-(bool) suppressTeachMarkPresentation");
}

-(bool) attemptSetTeachMarkState:(unsigned long long) {
	%orig;
	NSLog(@"-(bool) attemptSetTeachMarkState:(unsigned long long)");
}

-(void) teachMarkWasDismissed {
	%orig;
	NSLog(@"-(void) teachMarkWasDismissed");
}

-(void) dismissAndSuppressTeachMarks {
	%orig;
	NSLog(@"-(void) dismissAndSuppressTeachMarks");
}

-(void) setTeachMarkState:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setTeachMarkState:(unsigned long long)");
}

-(void) resetTeachMarkState {
	%orig;
	NSLog(@"-(void) resetTeachMarkState");
}

-(void) setSuppressTeachMarkPresentation:(bool) {
	%orig;
	NSLog(@"-(void) setSuppressTeachMarkPresentation:(bool)");
}

-(void) setNumberOfSkipsOnCurrentStation:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setNumberOfSkipsOnCurrentStation:(unsigned long long)");
}

-(unsigned long long) numberOfSkipsOnCurrentStation {
	%orig;
	NSLog(@"-(unsigned long long) numberOfSkipsOnCurrentStation");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

%end

%hook PMTokenizedRecipientController

-(void) tokenizerView:(id) didRemoveTokenAtIndex:(long long) object:(id) {
	%orig;
	NSLog(@"-(void) tokenizerView:(id) didRemoveTokenAtIndex:(long long) object:(id)");
}

-(void) addTokenPressed:(id) {
	%orig;
	NSLog(@"-(void) addTokenPressed:(id)");
}

-(void) tokenizerView:(id) didAddTokenWithTitle:(id) object:(id) {
	%orig;
	NSLog(@"-(void) tokenizerView:(id) didAddTokenWithTitle:(id) object:(id)");
}

-(void) tokenizerView:(id) textDidChange:(id) {
	%orig;
	NSLog(@"-(void) tokenizerView:(id) textDidChange:(id)");
}

-(id) tokenizerView:(id) tokenForInput:(id) {
	%orig;
	NSLog(@"-(id) tokenizerView:(id) tokenForInput:(id)");
}

-(void) peoplePickerWillShow {
	%orig;
	NSLog(@"-(void) peoplePickerWillShow");
}

-(void) pickedContactWithName:(id) email:(id) {
	%orig;
	NSLog(@"-(void) pickedContactWithName:(id) email:(id)");
}

-(void) peoplePickerDidHide {
	%orig;
	NSLog(@"-(void) peoplePickerDidHide");
}

-(void) peoplePickerDidCancel {
	%orig;
	NSLog(@"-(void) peoplePickerDidCancel");
}

-(void) tokenizerViewFrameDidChange:(id) {
	%orig;
	NSLog(@"-(void) tokenizerViewFrameDidChange:(id)");
}

-(id) getRecipients {
	%orig;
	NSLog(@"-(id) getRecipients");
}

-(id) addressBookDataSource {
	%orig;
	NSLog(@"-(id) addressBookDataSource");
}

-(void) setAddressBookDataSource:(id) {
	%orig;
	NSLog(@"-(void) setAddressBookDataSource:(id)");
}

-(id) tokenizerView {
	%orig;
	NSLog(@"-(id) tokenizerView");
}

-(void) setTokenizerView:(id) {
	%orig;
	NSLog(@"-(void) setTokenizerView:(id)");
}

-(id) autocompleteTableView {
	%orig;
	NSLog(@"-(id) autocompleteTableView");
}

-(void) setAutocompleteTableView:(id) {
	%orig;
	NSLog(@"-(void) setAutocompleteTableView:(id)");
}

-(void) doInit {
	%orig;
	NSLog(@"-(void) doInit");
}

-(void) setAutocompleteResult:(id) {
	%orig;
	NSLog(@"-(void) setAutocompleteResult:(id)");
}

-(id) autocompleteResult {
	%orig;
	NSLog(@"-(id) autocompleteResult");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(bool) tableView:(id) canEditRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) tableView:(id) canEditRowAtIndexPath:(id)");
}

%end

%hook TokenData

+(id) tokenDataWithTitle:(id) description:(id) parsable:(id) email:(id) {
	%orig;
	NSLog(@"+(id) tokenDataWithTitle:(id) description:(id) parsable:(id) email:(id)");
}

-(void) setParsable:(id) {
	%orig;
	NSLog(@"-(void) setParsable:(id)");
}

-(id) parsable {
	%orig;
	NSLog(@"-(id) parsable");
}

-(id) email {
	%orig;
	NSLog(@"-(id) email");
}

-(void) setEmail:(id) {
	%orig;
	NSLog(@"-(void) setEmail:(id)");
}

-(id) objectDescription {
	%orig;
	NSLog(@"-(id) objectDescription");
}

-(void) setObjectDescription:(id) {
	%orig;
	NSLog(@"-(void) setObjectDescription:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

%end

%hook DFPAdUtilities

+(id) stringForLegacyDisplayAdType:(unsigned long long) {
	%orig;
	NSLog(@"+(id) stringForLegacyDisplayAdType:(unsigned long long)");
}

%end

%hook PMEnvironmentFastSwitcherDataSource

-(void) filterContentForSearchText:(id) withScope:(id) {
	%orig;
	NSLog(@"-(void) filterContentForSearchText:(id) withScope:(id)");
}

-(id) initWithDataSourceMode:(long long) {
	%orig;
	NSLog(@"-(id) initWithDataSourceMode:(long long)");
}

-(void) setSortedServerNames:(id) {
	%orig;
	NSLog(@"-(void) setSortedServerNames:(id)");
}

-(void) setFilteredSortedServerNames:(id) {
	%orig;
	NSLog(@"-(void) setFilteredSortedServerNames:(id)");
}

-(long long) dataSourceMode {
	%orig;
	NSLog(@"-(long long) dataSourceMode");
}

-(id) sortedServerNames {
	%orig;
	NSLog(@"-(id) sortedServerNames");
}

-(id) filteredSortedServerNames {
	%orig;
	NSLog(@"-(id) filteredSortedServerNames");
}

-(void) setDataSourceMode:(long long) {
	%orig;
	NSLog(@"-(void) setDataSourceMode:(long long)");
}

-(void) rebuild {
	%orig;
	NSLog(@"-(void) rebuild");
}

-(id) rowAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) rowAtIndex:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRows {
	%orig;
	NSLog(@"-(long long) numberOfRows");
}

%end

%hook PMAddressBookDataSource

-(void) dismissPeoplePicker {
	%orig;
	NSLog(@"-(void) dismissPeoplePicker");
}

-(void) presentPeoplePickerWithFilter:(long long) delegate:(id) sender:(id) {
	%orig;
	NSLog(@"-(void) presentPeoplePickerWithFilter:(long long) delegate:(id) sender:(id)");
}

-(id) contactsMatchingSearchTerm:(id) filter:(long long) {
	%orig;
	NSLog(@"-(id) contactsMatchingSearchTerm:(id) filter:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(void) contactPickerDidCancel:(id) {
	%orig;
	NSLog(@"-(void) contactPickerDidCancel:(id)");
}

-(void) contactPicker:(id) didSelectContactProperty:(id) {
	%orig;
	NSLog(@"-(void) contactPicker:(id) didSelectContactProperty:(id)");
}

%end

%hook PMBrowseStatsContext

+(id) statsContextWithModule:(id) {
	%orig;
	NSLog(@"+(id) statsContextWithModule:(id)");
}

+(id) statsContextWithStationIndex:(long long) stationMaxIndex:(long long) moduleLayoutType:(long long) {
	%orig;
	NSLog(@"+(id) statsContextWithStationIndex:(long long) stationMaxIndex:(long long) moduleLayoutType:(long long)");
}

+(id) statsContextWithModule:(id) index:(long long) {
	%orig;
	NSLog(@"+(id) statsContextWithModule:(id) index:(long long)");
}

-(id) moduleName {
	%orig;
	NSLog(@"-(id) moduleName");
}

-(long long) moduleIndex {
	%orig;
	NSLog(@"-(long long) moduleIndex");
}

-(long long) stationMaxIndex {
	%orig;
	NSLog(@"-(long long) stationMaxIndex");
}

-(void) setModuleIndex:(long long) {
	%orig;
	NSLog(@"-(void) setModuleIndex:(long long)");
}

-(void) setModuleName:(id) {
	%orig;
	NSLog(@"-(void) setModuleName:(id)");
}

-(void) setStationMaxIndex:(long long) {
	%orig;
	NSLog(@"-(void) setStationMaxIndex:(long long)");
}

-(void) setModuleLayoutType:(long long) {
	%orig;
	NSLog(@"-(void) setModuleLayoutType:(long long)");
}

-(long long) moduleLayoutType {
	%orig;
	NSLog(@"-(long long) moduleLayoutType");
}

-(void) setModuleId:(id) {
	%orig;
	NSLog(@"-(void) setModuleId:(id)");
}

-(id) moduleId {
	%orig;
	NSLog(@"-(id) moduleId");
}

-(void) setStationIndex:(long long) {
	%orig;
	NSLog(@"-(void) setStationIndex:(long long)");
}

-(long long) stationIndex {
	%orig;
	NSLog(@"-(long long) stationIndex");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook ModalViewPresenter

+(id) sharedPresenter {
	%orig;
	NSLog(@"+(id) sharedPresenter");
}

-(bool) modalViewIsVisible {
	%orig;
	NSLog(@"-(bool) modalViewIsVisible");
}

-(void) presentModalView:(id) transition:(id) showsStatusBar:(bool) sourceView:(id) replaceView:(id) {
	%orig;
	NSLog(@"-(void) presentModalView:(id) transition:(id) showsStatusBar:(bool) sourceView:(id) replaceView:(id)");
}

-(void) dismissModalView:(id) transition:(id) sourceView:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissModalView:(id) transition:(id) sourceView:(id) completion:(id)");
}

-(void) dismissModalView:(id) transition:(id) sourceView:(id) {
	%orig;
	NSLog(@"-(void) dismissModalView:(id) transition:(id) sourceView:(id)");
}

-(void) presentModalView:(id) transition:(id) showsStatusBar:(bool) sourceView:(id) replaceView:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) presentModalView:(id) transition:(id) showsStatusBar:(bool) sourceView:(id) replaceView:(id) completion:(id)");
}

-(void) presentModalView:(id) transition:(id) showsStatusBar:(bool) parentView:(id) sourceView:(id) replaceView:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) presentModalView:(id) transition:(id) showsStatusBar:(bool) parentView:(id) sourceView:(id) replaceView:(id) completion:(id)");
}

-(void) insertSubview:(id) aboveView:(id) parentView:(id) {
	%orig;
	NSLog(@"-(void) insertSubview:(id) aboveView:(id) parentView:(id)");
}

-(void) dismissView:(id) {
	%orig;
	NSLog(@"-(void) dismissView:(id)");
}

-(id) currentModalView {
	%orig;
	NSLog(@"-(id) currentModalView");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) views {
	%orig;
	NSLog(@"-(id) views");
}

-(id) stack {
	%orig;
	NSLog(@"-(id) stack");
}

%end

%hook ModalViewPresenterStackItem

-(void) setShowsStatusBar:(bool) {
	%orig;
	NSLog(@"-(void) setShowsStatusBar:(bool)");
}

-(bool) showsStatusBar {
	%orig;
	NSLog(@"-(bool) showsStatusBar");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

%end

%hook PMListenTimeoutUiDelegate

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) webAlertView:(id) wasDismissed:(id) command:(id) {
	%orig;
	NSLog(@"-(void) webAlertView:(id) wasDismissed:(id) command:(id)");
}

-(void) setHtmlConnection:(id) {
	%orig;
	NSLog(@"-(void) setHtmlConnection:(id)");
}

-(id) htmlConnection {
	%orig;
	NSLog(@"-(id) htmlConnection");
}

-(void) clearExistingListeningTimeoutNotification {
	%orig;
	NSLog(@"-(void) clearExistingListeningTimeoutNotification");
}

-(void) setRadioListenTimeout:(id) {
	%orig;
	NSLog(@"-(void) setRadioListenTimeout:(id)");
}

-(id) defaultWebAlertContent {
	%orig;
	NSLog(@"-(id) defaultWebAlertContent");
}

-(void) cleanUpAfterListeningTimeoutAlertDismissed {
	%orig;
	NSLog(@"-(void) cleanUpAfterListeningTimeoutAlertDismissed");
}

-(void) fetchAlertContent {
	%orig;
	NSLog(@"-(void) fetchAlertContent");
}

-(void) initializeFetchedValues {
	%orig;
	NSLog(@"-(void) initializeFetchedValues");
}

-(void) parseOutValidDataFromHtml {
	%orig;
	NSLog(@"-(void) parseOutValidDataFromHtml");
}

-(id) metadataContentForName:(id) inHtml:(id) {
	%orig;
	NSLog(@"-(id) metadataContentForName:(id) inHtml:(id)");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(bool) userPromptDismissRequestedByListenTimeout:(id) {
	%orig;
	NSLog(@"-(bool) userPromptDismissRequestedByListenTimeout:(id)");
}

-(void) userPromptContentPreloadRequestedByListenTimeout:(id) {
	%orig;
	NSLog(@"-(void) userPromptContentPreloadRequestedByListenTimeout:(id)");
}

-(void) userPromptDisplayRequestedByListenTimeout:(id) {
	%orig;
	NSLog(@"-(void) userPromptDisplayRequestedByListenTimeout:(id)");
}

-(bool) isUserPromptDisplayedForListenTimeout:(id) {
	%orig;
	NSLog(@"-(bool) isUserPromptDisplayedForListenTimeout:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMTrafficDrivingPartnerObject

-(id) searchrequest {
	%orig;
	NSLog(@"-(id) searchrequest");
}

-(void) setSearchrequest:(id) {
	%orig;
	NSLog(@"-(void) setSearchrequest:(id)");
}

-(void) setDelete:(bool) {
	%orig;
	NSLog(@"-(void) setDelete:(bool)");
}

-(bool) shouldShowCoachMark {
	%orig;
	NSLog(@"-(bool) shouldShowCoachMark");
}

-(void) setShouldShowCoachMark:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowCoachMark:(bool)");
}

-(void) setSearchResult:(id) {
	%orig;
	NSLog(@"-(void) setSearchResult:(id)");
}

-(bool) delete {
	%orig;
	NSLog(@"-(bool) delete");
}

-(id) searchResult {
	%orig;
	NSLog(@"-(id) searchResult");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMAlarm

+(double) minimumAlarmVolume {
	%orig;
	NSLog(@"+(double) minimumAlarmVolume");
}

-(void) updateWithSettingsFromOtherAlarm:(id) {
	%orig;
	NSLog(@"-(void) updateWithSettingsFromOtherAlarm:(id)");
}

-(void) logStatsCollectorAction:(id) {
	%orig;
	NSLog(@"-(void) logStatsCollectorAction:(id)");
}

-(bool) isSnoozeEnabled {
	%orig;
	NSLog(@"-(bool) isSnoozeEnabled");
}

-(long long) snoozeLength {
	%orig;
	NSLog(@"-(long long) snoozeLength");
}

-(void) setIsSnoozeEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setIsSnoozeEnabled:(bool)");
}

-(void) setSnoozeLength:(long long) {
	%orig;
	NSLog(@"-(void) setSnoozeLength:(long long)");
}

-(id) nextSnoozeFireTime {
	%orig;
	NSLog(@"-(id) nextSnoozeFireTime");
}

-(void) setNextSnoozeFireTime:(id) {
	%orig;
	NSLog(@"-(void) setNextSnoozeFireTime:(id)");
}

-(void) setNeedsScheduleNextFireNotification:(bool) {
	%orig;
	NSLog(@"-(void) setNeedsScheduleNextFireNotification:(bool)");
}

-(id) nextFireDateAfter:(id) {
	%orig;
	NSLog(@"-(id) nextFireDateAfter:(id)");
}

-(void) logStatsCollectorAction:(id) isOriginalFire:(bool) defaultFireDetail:(id) {
	%orig;
	NSLog(@"-(void) logStatsCollectorAction:(id) isOriginalFire:(bool) defaultFireDetail:(id)");
}

-(void) setNextFireNotification:(id) {
	%orig;
	NSLog(@"-(void) setNextFireNotification:(id)");
}

-(void) processFiring {
	%orig;
	NSLog(@"-(void) processFiring");
}

-(id) nextFireNotification {
	%orig;
	NSLog(@"-(id) nextFireNotification");
}

-(bool) isSnoozing {
	%orig;
	NSLog(@"-(bool) isSnoozing");
}

-(double) snoozeTimeRemaining {
	%orig;
	NSLog(@"-(double) snoozeTimeRemaining");
}

-(id) timeForDisplay {
	%orig;
	NSLog(@"-(id) timeForDisplay");
}

-(bool) wasFiredByLocalNotification:(id) {
	%orig;
	NSLog(@"-(bool) wasFiredByLocalNotification:(id)");
}

-(bool) needsScheduleNextFireNotification {
	%orig;
	NSLog(@"-(bool) needsScheduleNextFireNotification");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) snooze {
	%orig;
	NSLog(@"-(void) snooze");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) nextFireDate {
	%orig;
	NSLog(@"-(id) nextFireDate");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(bool) isEnabled {
	%orig;
	NSLog(@"-(bool) isEnabled");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(void) setTag:(long long) {
	%orig;
	NSLog(@"-(void) setTag:(long long)");
}

-(long long) tag {
	%orig;
	NSLog(@"-(long long) tag");
}

-(void) setVolume:(double) {
	%orig;
	NSLog(@"-(void) setVolume:(double)");
}

-(double) volume {
	%orig;
	NSLog(@"-(double) volume");
}

-(long long) hour {
	%orig;
	NSLog(@"-(long long) hour");
}

-(long long) minute {
	%orig;
	NSLog(@"-(long long) minute");
}

-(void) setHour:(long long) {
	%orig;
	NSLog(@"-(void) setHour:(long long)");
}

-(void) setMinute:(long long) {
	%orig;
	NSLog(@"-(void) setMinute:(long long)");
}

-(void) setIsEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setIsEnabled:(bool)");
}

%end

%hook PMStationPersonalizationTableViewDataProviderImp

+(id) removeObject:(id) fromArray:(id) {
	%orig;
	NSLog(@"+(id) removeObject:(id) fromArray:(id)");
}

-(bool) shouldShowAddVarietySection {
	%orig;
	NSLog(@"-(bool) shouldShowAddVarietySection");
}

-(unsigned long long) numberOfSeeds {
	%orig;
	NSLog(@"-(unsigned long long) numberOfSeeds");
}

-(bool) shouldShowArtistAudioMessagingSection {
	%orig;
	NSLog(@"-(bool) shouldShowArtistAudioMessagingSection");
}

-(id) seedForIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(id) seedForIndex:(unsigned long long)");
}

-(bool) artistAudioMessagingEnabled {
	%orig;
	NSLog(@"-(bool) artistAudioMessagingEnabled");
}

-(void) updateArtistAudioMessagingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) updateArtistAudioMessagingEnabled:(bool)");
}

-(void) rebuildSeedWithResults:(id) {
	%orig;
	NSLog(@"-(void) rebuildSeedWithResults:(id)");
}

-(unsigned long long) indexForSeed:(id) {
	%orig;
	NSLog(@"-(unsigned long long) indexForSeed:(id)");
}

-(void) deleteSeed:(id) {
	%orig;
	NSLog(@"-(void) deleteSeed:(id)");
}

-(void) setupObserver {
	%orig;
	NSLog(@"-(void) setupObserver");
}

-(void) loadStationDataFromServer {
	%orig;
	NSLog(@"-(void) loadStationDataFromServer");
}

-(unsigned long long) thumbDownCount {
	%orig;
	NSLog(@"-(unsigned long long) thumbDownCount");
}

-(unsigned long long) thumbUpCount {
	%orig;
	NSLog(@"-(unsigned long long) thumbUpCount");
}

-(id) thumbUpTracks {
	%orig;
	NSLog(@"-(id) thumbUpTracks");
}

-(id) thumbDownTracks {
	%orig;
	NSLog(@"-(id) thumbDownTracks");
}

-(void) collectionViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) collectionViewDidScroll:(id)");
}

-(void) setThumbUpTracks:(id) {
	%orig;
	NSLog(@"-(void) setThumbUpTracks:(id)");
}

-(void) setThumbDownTracks:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownTracks:(id)");
}

-(void) setThumbUpCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setThumbUpCount:(unsigned long long)");
}

-(void) setThumbDownCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setThumbDownCount:(unsigned long long)");
}

-(void) notifyRemovalAndRPCallWithIndex:(unsigned long long) feedbackId:(id) existingRating:(long long) {
	%orig;
	NSLog(@"-(void) notifyRemovalAndRPCallWithIndex:(unsigned long long) feedbackId:(id) existingRating:(long long)");
}

-(void) removeRatingInSessionHistory:(id) {
	%orig;
	NSLog(@"-(void) removeRatingInSessionHistory:(id)");
}

-(id) seedAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(id) seedAtIndex:(unsigned long long)");
}

-(void) removeTrackFromThumbHistory:(id) {
	%orig;
	NSLog(@"-(void) removeTrackFromThumbHistory:(id)");
}

-(float) personalizationPercentage {
	%orig;
	NSLog(@"-(float) personalizationPercentage");
}

-(void) setPersonalizationPercentage:(float) {
	%orig;
	NSLog(@"-(void) setPersonalizationPercentage:(float)");
}

-(long long) thumbCount {
	%orig;
	NSLog(@"-(long long) thumbCount");
}

-(void) setThumbCount:(long long) {
	%orig;
	NSLog(@"-(void) setThumbCount:(long long)");
}

-(void) array:(id) didInsertWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didInsertWithUpdate:(id)");
}

-(void) array:(id) didRemoveWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didRemoveWithUpdate:(id)");
}

-(void) arrayDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) arrayDidRefresh:(id)");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(id) seeds {
	%orig;
	NSLog(@"-(id) seeds");
}

-(void) setSeeds:(id) {
	%orig;
	NSLog(@"-(void) setSeeds:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStationName:(id) {
	%orig;
	NSLog(@"-(void) setStationName:(id)");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) stationName {
	%orig;
	NSLog(@"-(id) stationName");
}

-(void) setStationDescription:(id) {
	%orig;
	NSLog(@"-(void) setStationDescription:(id)");
}

-(id) initWithStation:(id) {
	%orig;
	NSLog(@"-(id) initWithStation:(id)");
}

-(id) stationDescription {
	%orig;
	NSLog(@"-(id) stationDescription");
}

-(void) removeObserver {
	%orig;
	NSLog(@"-(void) removeObserver");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook IDLogToNSLog

-(void) newIdLog:(id) {
	%orig;
	NSLog(@"-(void) newIdLog:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMBackstageRPCDelegate

-(id) initWithWebViewHost:(id) command:(id) {
	%orig;
	NSLog(@"-(id) initWithWebViewHost:(id) command:(id)");
}

-(void) createStationForStationId:(id) source:(long long) lineId:(id) creativeId:(id) adServerCorrelationId:(id) startingAtTrack:(id) {
	%orig;
	NSLog(@"-(void) createStationForStationId:(id) source:(long long) lineId:(id) creativeId:(id) adServerCorrelationId:(id) startingAtTrack:(id)");
}

-(void) createStationForMusicToken:(id) source:(long long) lineId:(id) creativeId:(id) adServerCorrelationId:(id) additionalParams:(id) {
	%orig;
	NSLog(@"-(void) createStationForMusicToken:(id) source:(long long) lineId:(id) creativeId:(id) adServerCorrelationId:(id) additionalParams:(id)");
}

-(void) createStationForStationId:(id) source:(long long) lineId:(id) creativeId:(id) adServerCorrelationId:(id) additionalParams:(id) startingAtTrack:(id) {
	%orig;
	NSLog(@"-(void) createStationForStationId:(id) source:(long long) lineId:(id) creativeId:(id) adServerCorrelationId:(id) additionalParams:(id) startingAtTrack:(id)");
}

-(void) createStationForMusicToken:(id) source:(long long) lineId:(id) creativeId:(id) adServerCorrelationId:(id) {
	%orig;
	NSLog(@"-(void) createStationForMusicToken:(id) source:(long long) lineId:(id) creativeId:(id) adServerCorrelationId:(id)");
}

-(void) shareStationRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) shareStationRequest:(id) finishedWithResult:(id)");
}

-(void) shareStationRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) shareStationRequest:(id) failedWithErrorCode:(long long)");
}

-(void) shareMusicRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) shareMusicRequest:(id) finishedWithResult:(id)");
}

-(void) shareMusicRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) shareMusicRequest:(id) failedWithErrorCode:(long long)");
}

-(void) createStationRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) createStationRequest:(id) finishedWithResult:(id)");
}

-(void) createStationRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) createStationRequest:(id) failedWithErrorCode:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMHaymaker

-(void) requestServableItem:(id) slot:(id) numberOfResponses:(long long) targeting:(id) assetType:(id) delegateQueue:(id) {
	%orig;
	NSLog(@"-(void) requestServableItem:(id) slot:(id) numberOfResponses:(long long) targeting:(id) assetType:(id) delegateQueue:(id)");
}

-(void) requestServableItem:(id) slot:(id) numberOfResponses:(long long) targeting:(id) assetType:(id) {
	%orig;
	NSLog(@"-(void) requestServableItem:(id) slot:(id) numberOfResponses:(long long) targeting:(id) assetType:(id)");
}

-(void) requestServableItem:(id) withDelegateQueue:(id) {
	%orig;
	NSLog(@"-(void) requestServableItem:(id) withDelegateQueue:(id)");
}

-(id) getCommonParametersString {
	%orig;
	NSLog(@"-(id) getCommonParametersString");
}

-(void) requestServableItem:(id) numberOfResponses:(long long) targeting:(id) assetType:(id) {
	%orig;
	NSLog(@"-(void) requestServableItem:(id) numberOfResponses:(long long) targeting:(id) assetType:(id)");
}

-(void) requestServableItem:(id) {
	%orig;
	NSLog(@"-(void) requestServableItem:(id)");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

-(id) connection {
	%orig;
	NSLog(@"-(id) connection");
}

-(void) setConnection:(id) {
	%orig;
	NSLog(@"-(void) setConnection:(id)");
}

%end

%hook PMOpenURLRequest

-(id) initWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(id) initWithPath:(id) andParameters:(id)");
}

-(id) initWithPath:(id) parameters:(id) andTimestamp:(double) {
	%orig;
	NSLog(@"-(id) initWithPath:(id) parameters:(id) andTimestamp:(double)");
}

-(id) params {
	%orig;
	NSLog(@"-(id) params");
}

-(void) setParams:(id) {
	%orig;
	NSLog(@"-(void) setParams:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(double) timestamp {
	%orig;
	NSLog(@"-(double) timestamp");
}

-(id) path {
	%orig;
	NSLog(@"-(id) path");
}

-(void) setPath:(id) {
	%orig;
	NSLog(@"-(void) setPath:(id)");
}

-(void) setTimestamp:(double) {
	%orig;
	NSLog(@"-(void) setTimestamp:(double)");
}

%end

%hook PMActivityItemProviderFactory

-(id) initWithStation:(id) shareStationName:(id) {
	%orig;
	NSLog(@"-(id) initWithStation:(id) shareStationName:(id)");
}

-(void) prepareProviderDataWithCompleteHandler:(id) onQueue:(?) {
	%orig;
	NSLog(@"-(void) prepareProviderDataWithCompleteHandler:(id) onQueue:(?)");
}

-(void) setSharingUrlString:(id) {
	%orig;
	NSLog(@"-(void) setSharingUrlString:(id)");
}

-(void) setUrlUpdateCompletionQueue:(id) {
	%orig;
	NSLog(@"-(void) setUrlUpdateCompletionQueue:(id)");
}

-(id) initWithTrack:(id) station:(id) {
	%orig;
	NSLog(@"-(id) initWithTrack:(id) station:(id)");
}

-(id) initWithCollectedStation:(id) {
	%orig;
	NSLog(@"-(id) initWithCollectedStation:(id)");
}

-(id) urlUpdateCompletionQueue {
	%orig;
	NSLog(@"-(id) urlUpdateCompletionQueue");
}

-(id) sharingUrlString {
	%orig;
	NSLog(@"-(id) sharingUrlString");
}

-(void) shortURL:(id) context:(id) {
	%orig;
	NSLog(@"-(void) shortURL:(id) context:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) urlProvider {
	%orig;
	NSLog(@"-(id) urlProvider");
}

-(id) stringProvider {
	%orig;
	NSLog(@"-(id) stringProvider");
}

-(id) imageProvider {
	%orig;
	NSLog(@"-(id) imageProvider");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMShareCollectedStationActivityItemProviderFactory

-(void) prepareProviderDataWithCompleteHandler:(id) onQueue:(?) {
	%orig;
	NSLog(@"-(void) prepareProviderDataWithCompleteHandler:(id) onQueue:(?)");
}

-(id) initWithCollectedStation:(id) {
	%orig;
	NSLog(@"-(id) initWithCollectedStation:(id)");
}

-(void) setCollectedStationModel:(id) {
	%orig;
	NSLog(@"-(void) setCollectedStationModel:(id)");
}

-(id) collectedStationModel {
	%orig;
	NSLog(@"-(id) collectedStationModel");
}

-(id) urlProvider {
	%orig;
	NSLog(@"-(id) urlProvider");
}

-(id) stringProvider {
	%orig;
	NSLog(@"-(id) stringProvider");
}

-(id) imageProvider {
	%orig;
	NSLog(@"-(id) imageProvider");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMShareTrackActivityItemProviderFactory

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(void) prepareProviderDataWithCompleteHandler:(id) onQueue:(?) {
	%orig;
	NSLog(@"-(void) prepareProviderDataWithCompleteHandler:(id) onQueue:(?)");
}

-(id) initWithTrack:(id) station:(id) {
	%orig;
	NSLog(@"-(id) initWithTrack:(id) station:(id)");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) urlProvider {
	%orig;
	NSLog(@"-(id) urlProvider");
}

-(id) stringProvider {
	%orig;
	NSLog(@"-(id) stringProvider");
}

-(id) imageProvider {
	%orig;
	NSLog(@"-(id) imageProvider");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMShareStationActivityItemProviderFactory

-(id) initWithStation:(id) shareStationName:(id) {
	%orig;
	NSLog(@"-(id) initWithStation:(id) shareStationName:(id)");
}

-(void) prepareProviderDataWithCompleteHandler:(id) onQueue:(?) {
	%orig;
	NSLog(@"-(void) prepareProviderDataWithCompleteHandler:(id) onQueue:(?)");
}

-(id) shareStationName {
	%orig;
	NSLog(@"-(id) shareStationName");
}

-(void) setShareStationName:(id) {
	%orig;
	NSLog(@"-(void) setShareStationName:(id)");
}

-(id) urlProvider {
	%orig;
	NSLog(@"-(id) urlProvider");
}

-(id) stringProvider {
	%orig;
	NSLog(@"-(id) stringProvider");
}

-(id) imageProvider {
	%orig;
	NSLog(@"-(id) imageProvider");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMSettingsSectionViewModel

-(id) initWithSection:(long long) title:(id) andSubtitle:(id) {
	%orig;
	NSLog(@"-(id) initWithSection:(long long) title:(id) andSubtitle:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(long long) section {
	%orig;
	NSLog(@"-(long long) section");
}

-(void) setSubtitle:(id) {
	%orig;
	NSLog(@"-(void) setSubtitle:(id)");
}

-(id) subtitle {
	%orig;
	NSLog(@"-(id) subtitle");
}

-(void) setSection:(long long) {
	%orig;
	NSLog(@"-(void) setSection:(long long)");
}

%end

%hook PMInboxNotificationsList

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) markMessageSeenWithMessageId:(long long) {
	%orig;
	NSLog(@"-(void) markMessageSeenWithMessageId:(long long)");
}

-(bool) hasUnseenMessages {
	%orig;
	NSLog(@"-(bool) hasUnseenMessages");
}

-(void) requestNotificationsFromServer {
	%orig;
	NSLog(@"-(void) requestNotificationsFromServer");
}

-(void) setSeenMessageIds:(id) {
	%orig;
	NSLog(@"-(void) setSeenMessageIds:(id)");
}

-(void) setCouldRequestInboxNotification:(bool) {
	%orig;
	NSLog(@"-(void) setCouldRequestInboxNotification:(bool)");
}

-(void) syncInbox:(id) {
	%orig;
	NSLog(@"-(void) syncInbox:(id)");
}

-(long long) unseenMessagesCount {
	%orig;
	NSLog(@"-(long long) unseenMessagesCount");
}

-(id) seenMessageIds {
	%orig;
	NSLog(@"-(id) seenMessageIds");
}

-(id) notificationWithId:(long long) {
	%orig;
	NSLog(@"-(id) notificationWithId:(long long)");
}

-(void) markMessageReceivedWithMessageId:(long long) {
	%orig;
	NSLog(@"-(void) markMessageReceivedWithMessageId:(long long)");
}

-(long long) indexForNotification:(id) {
	%orig;
	NSLog(@"-(long long) indexForNotification:(id)");
}

-(void) updateNotificationsCacheWithSeenMessageIds {
	%orig;
	NSLog(@"-(void) updateNotificationsCacheWithSeenMessageIds");
}

-(void) removeExpiredNotifications {
	%orig;
	NSLog(@"-(void) removeExpiredNotifications");
}

-(void) setRedDot:(bool) {
	%orig;
	NSLog(@"-(void) setRedDot:(bool)");
}

-(void) inboxNotificationSummaryRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) inboxNotificationSummaryRequest:(id) finishedWithResult:(id)");
}

-(void) inboxNotificationSummaryRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) inboxNotificationSummaryRequest:(id) failedWithErrorCode:(long long)");
}

-(bool) couldRequestInboxNotification {
	%orig;
	NSLog(@"-(bool) couldRequestInboxNotification");
}

-(double) latestUpdateTimestamp {
	%orig;
	NSLog(@"-(double) latestUpdateTimestamp");
}

-(void) loadNotificationsFromRPCResponse:(id) {
	%orig;
	NSLog(@"-(void) loadNotificationsFromRPCResponse:(id)");
}

-(void) setInboxMessageStatusForMessageIds:(id) status:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) setInboxMessageStatusForMessageIds:(id) status:(long long) context:(id)");
}

-(void) removeNotificationAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) removeNotificationAtIndex:(long long)");
}

-(bool) hasNeverSetSeenMessages {
	%orig;
	NSLog(@"-(bool) hasNeverSetSeenMessages");
}

-(void) requestInboxSummaryFromServer {
	%orig;
	NSLog(@"-(void) requestInboxSummaryFromServer");
}

-(void) markAllMessagesSeen {
	%orig;
	NSLog(@"-(void) markAllMessagesSeen");
}

-(long long) insertNotification:(id) {
	%orig;
	NSLog(@"-(long long) insertNotification:(id)");
}

-(id) notificationAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) notificationAtIndex:(long long)");
}

-(void) removeAllNotifications {
	%orig;
	NSLog(@"-(void) removeAllNotifications");
}

-(void) store {
	%orig;
	NSLog(@"-(void) store");
}

-(bool) syncInProgress {
	%orig;
	NSLog(@"-(bool) syncInProgress");
}

-(void) setSyncInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setSyncInProgress:(bool)");
}

-(Class) unarchiver:(id) cannotDecodeObjectOfClassName:(id) originalClasses:(id) {
	%orig;
	NSLog(@"-(Class) unarchiver:(id) cannotDecodeObjectOfClassName:(id) originalClasses:(id)");
}

-(void) removeNotification:(id) {
	%orig;
	NSLog(@"-(void) removeNotification:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(long long) count {
	%orig;
	NSLog(@"-(long long) count");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) notifications {
	%orig;
	NSLog(@"-(id) notifications");
}

-(void) setNotifications:(id) {
	%orig;
	NSLog(@"-(void) setNotifications:(id)");
}

%end

%hook PMAnimationBlockDelegate

-(void) setAnimationDidStopHandler:(id) {
	%orig;
	NSLog(@"-(void) setAnimationDidStopHandler:(id)");
}

-(id) animationDidStartHandler {
	%orig;
	NSLog(@"-(id) animationDidStartHandler");
}

-(id) animationDidStopHandler {
	%orig;
	NSLog(@"-(id) animationDidStopHandler");
}

-(void) setAnimationDidStartHandler:(id) {
	%orig;
	NSLog(@"-(void) setAnimationDidStartHandler:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) animationDidStop:(id) finished:(bool) {
	%orig;
	NSLog(@"-(void) animationDidStop:(id) finished:(bool)");
}

-(void) animationDidStart:(id) {
	%orig;
	NSLog(@"-(void) animationDidStart:(id)");
}

%end

%hook PMDartVideoPlayer

-(void) landingPageClosed {
	%orig;
	NSLog(@"-(void) landingPageClosed");
}

-(void) discardCurrentVideo {
	%orig;
	NSLog(@"-(void) discardCurrentVideo");
}

-(bool) isPresentingVideo {
	%orig;
	NSLog(@"-(bool) isPresentingVideo");
}

-(bool) isReadyToPlayVideo {
	%orig;
	NSLog(@"-(bool) isReadyToPlayVideo");
}

-(id) initWithDescriptor:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDescriptor:(id) delegate:(id)");
}

-(void) loadVideo {
	%orig;
	NSLog(@"-(void) loadVideo");
}

-(id) correllationId {
	%orig;
	NSLog(@"-(id) correllationId");
}

-(void) resumeVideo {
	%orig;
	NSLog(@"-(void) resumeVideo");
}

-(void) setCorrellationId:(id) {
	%orig;
	NSLog(@"-(void) setCorrellationId:(id)");
}

-(id) initWithDescriptor:(id) delegate:(id) statsCollector:(id) {
	%orig;
	NSLog(@"-(id) initWithDescriptor:(id) delegate:(id) statsCollector:(id)");
}

-(void) cancelVideoConnection {
	%orig;
	NSLog(@"-(void) cancelVideoConnection");
}

-(void) updatePlayerStateToMinimize {
	%orig;
	NSLog(@"-(void) updatePlayerStateToMinimize");
}

-(void) updatePlayerStateToNormal {
	%orig;
	NSLog(@"-(void) updatePlayerStateToNormal");
}

-(bool) launchingVideo {
	%orig;
	NSLog(@"-(bool) launchingVideo");
}

-(void) setStartedFromWillResign:(bool) {
	%orig;
	NSLog(@"-(void) setStartedFromWillResign:(bool)");
}

-(void) beginVideoPlay {
	%orig;
	NSLog(@"-(void) beginVideoPlay");
}

-(void) handleDidBecomeActive {
	%orig;
	NSLog(@"-(void) handleDidBecomeActive");
}

-(void) handleDidEnterBackground {
	%orig;
	NSLog(@"-(void) handleDidEnterBackground");
}

-(void) checkForAndHandleBadVideo {
	%orig;
	NSLog(@"-(void) checkForAndHandleBadVideo");
}

-(void) setCheckForBadVideoTimer:(id) {
	%orig;
	NSLog(@"-(void) setCheckForBadVideoTimer:(id)");
}

-(id) audioEventTypeMatchingVideoEventType:(id) {
	%orig;
	NSLog(@"-(id) audioEventTypeMatchingVideoEventType:(id)");
}

-(void) logVideoEventOfType:(id) {
	%orig;
	NSLog(@"-(void) logVideoEventOfType:(id)");
}

-(id) omsdkVideoTracker {
	%orig;
	NSLog(@"-(id) omsdkVideoTracker");
}

-(void) openVideoConnection {
	%orig;
	NSLog(@"-(void) openVideoConnection");
}

-(void) videoLoadError:(id) {
	%orig;
	NSLog(@"-(void) videoLoadError:(id)");
}

-(id) checkForBadVideoTimer {
	%orig;
	NSLog(@"-(id) checkForBadVideoTimer");
}

-(id) generateProgressErrorWithProgress:(double) {
	%orig;
	NSLog(@"-(id) generateProgressErrorWithProgress:(double)");
}

-(void) setLaunchingVideo:(bool) {
	%orig;
	NSLog(@"-(void) setLaunchingVideo:(bool)");
}

-(bool) startedFromWillResign {
	%orig;
	NSLog(@"-(bool) startedFromWillResign");
}

-(void) trackVideoURLs:(id) {
	%orig;
	NSLog(@"-(void) trackVideoURLs:(id)");
}

-(void) trackStatsEventType:(id) {
	%orig;
	NSLog(@"-(void) trackStatsEventType:(id)");
}

-(void) setLandingPageController:(id) {
	%orig;
	NSLog(@"-(void) setLandingPageController:(id)");
}

-(id) landingPageController {
	%orig;
	NSLog(@"-(id) landingPageController");
}

-(void) landingPageOpened {
	%orig;
	NSLog(@"-(void) landingPageOpened");
}

-(void) logVideoError:(id) {
	%orig;
	NSLog(@"-(void) logVideoError:(id)");
}

-(void) dismissVideo {
	%orig;
	NSLog(@"-(void) dismissVideo");
}

-(void) trackVideoURL:(id) {
	%orig;
	NSLog(@"-(void) trackVideoURL:(id)");
}

-(void) reportInsecureTrackingURLs:(id) {
	%orig;
	NSLog(@"-(void) reportInsecureTrackingURLs:(id)");
}

-(id) applicationStateProvider {
	%orig;
	NSLog(@"-(id) applicationStateProvider");
}

-(bool) shouldSupportVastMacros {
	%orig;
	NSLog(@"-(bool) shouldSupportVastMacros");
}

-(void) trackVideoEventOfType:(id) {
	%orig;
	NSLog(@"-(void) trackVideoEventOfType:(id)");
}

-(void) logAudioEventOfType:(id) {
	%orig;
	NSLog(@"-(void) logAudioEventOfType:(id)");
}

-(void) addOmsdkTracker {
	%orig;
	NSLog(@"-(void) addOmsdkTracker");
}

-(void) initializePlayerState {
	%orig;
	NSLog(@"-(void) initializePlayerState");
}

-(bool) alreadyReportedMissingOMSDKTracker {
	%orig;
	NSLog(@"-(bool) alreadyReportedMissingOMSDKTracker");
}

-(void) setAlreadyReportedMissingOMSDKTracker:(bool) {
	%orig;
	NSLog(@"-(void) setAlreadyReportedMissingOMSDKTracker:(bool)");
}

-(void) recordWithTrackingEvent:(id) {
	%orig;
	NSLog(@"-(void) recordWithTrackingEvent:(id)");
}

-(void) videoControllerMoreInfoRequested:(id) {
	%orig;
	NSLog(@"-(void) videoControllerMoreInfoRequested:(id)");
}

-(void) videoControllerPlayedToCompletion:(id) {
	%orig;
	NSLog(@"-(void) videoControllerPlayedToCompletion:(id)");
}

-(void) videoControllerWasDismissed:(id) {
	%orig;
	NSLog(@"-(void) videoControllerWasDismissed:(id)");
}

-(void) videoControllerWasPaused:(id) {
	%orig;
	NSLog(@"-(void) videoControllerWasPaused:(id)");
}

-(void) videoControllerWasUnpaused:(id) {
	%orig;
	NSLog(@"-(void) videoControllerWasUnpaused:(id)");
}

-(void) videoControllerWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) videoControllerWillResignActive:(id)");
}

-(void) videoController:(id) updateProgress:(float) {
	%orig;
	NSLog(@"-(void) videoController:(id) updateProgress:(float)");
}

-(void) videoControllerVideoFailed:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) videoControllerVideoFailed:(id) withError:(id)");
}

-(void) videoControllerVideoWillReload:(id) afterError:(id) {
	%orig;
	NSLog(@"-(void) videoControllerVideoWillReload:(id) afterError:(id)");
}

-(void) setOmsdkVideoTracker:(id) {
	%orig;
	NSLog(@"-(void) setOmsdkVideoTracker:(id)");
}

-(void) setApplicationStateProvider:(id) {
	%orig;
	NSLog(@"-(void) setApplicationStateProvider:(id)");
}

-(void) didUpdatePlayerStateTo:(long long) {
	%orig;
	NSLog(@"-(void) didUpdatePlayerStateTo:(long long)");
}

-(long long) l2PlayerState {
	%orig;
	NSLog(@"-(long long) l2PlayerState");
}

-(void) setStatsCollector:(id) {
	%orig;
	NSLog(@"-(void) setStatsCollector:(id)");
}

-(void) mediaConnectionDidReceiveHTTPError:(id) {
	%orig;
	NSLog(@"-(void) mediaConnectionDidReceiveHTTPError:(id)");
}

-(void) mediaConnection:(id) didReceiveContentLength:(long long) {
	%orig;
	NSLog(@"-(void) mediaConnection:(id) didReceiveContentLength:(long long)");
}

-(void) mediaConnection:(id) didReceiveNoncontiguousData:(id) {
	%orig;
	NSLog(@"-(void) mediaConnection:(id) didReceiveNoncontiguousData:(id)");
}

-(void) mediaConnectionDownloadWasInterrupted:(id) {
	%orig;
	NSLog(@"-(void) mediaConnectionDownloadWasInterrupted:(id)");
}

-(void) mediaConnectionDownloadWasRetried:(id) {
	%orig;
	NSLog(@"-(void) mediaConnectionDownloadWasRetried:(id)");
}

-(void) mediaConnectionDownloadTerminatedPrematurely:(id) {
	%orig;
	NSLog(@"-(void) mediaConnectionDownloadTerminatedPrematurely:(id)");
}

-(void) mediaConnectionDownloadSucceeded:(id) {
	%orig;
	NSLog(@"-(void) mediaConnectionDownloadSucceeded:(id)");
}

-(void) mediaConnectionEndOfBytes:(id) {
	%orig;
	NSLog(@"-(void) mediaConnectionEndOfBytes:(id)");
}

-(void) willResignActive:(id) {
	%orig;
	NSLog(@"-(void) willResignActive:(id)");
}

-(void) setPlayerState:(id) {
	%orig;
	NSLog(@"-(void) setPlayerState:(id)");
}

-(id) playerState {
	%orig;
	NSLog(@"-(id) playerState");
}

-(bool) errorOccurred {
	%orig;
	NSLog(@"-(bool) errorOccurred");
}

-(void) setErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) setErrorMessage:(id)");
}

-(id) errorMessage {
	%orig;
	NSLog(@"-(id) errorMessage");
}

-(bool) startVideo {
	%orig;
	NSLog(@"-(bool) startVideo");
}

-(void) stopVideo {
	%orig;
	NSLog(@"-(void) stopVideo");
}

-(void) pauseVideo {
	%orig;
	NSLog(@"-(void) pauseVideo");
}

-(id) statsCollector {
	%orig;
	NSLog(@"-(id) statsCollector");
}

-(void) didBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) didBecomeActive:(id)");
}

-(void) createViewController {
	%orig;
	NSLog(@"-(void) createViewController");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDescriptor:(id) {
	%orig;
	NSLog(@"-(void) setDescriptor:(id)");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(id) descriptor {
	%orig;
	NSLog(@"-(id) descriptor");
}

-(double) duration {
	%orig;
	NSLog(@"-(double) duration");
}

-(double) progress {
	%orig;
	NSLog(@"-(double) progress");
}

-(void) didEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) didEnterBackground:(id)");
}

-(bool) paused {
	%orig;
	NSLog(@"-(bool) paused");
}

%end

%hook PMXMLRPCResponse

+(id) responseWithXMLString:(id) {
	%orig;
	NSLog(@"+(id) responseWithXMLString:(id)");
}

+(id) responseWithXMLData:(id) {
	%orig;
	NSLog(@"+(id) responseWithXMLData:(id)");
}

+(void) testXMLRPCResponse {
	%orig;
	NSLog(@"+(void) testXMLRPCResponse");
}

-(id) initWithXMLString:(id) {
	%orig;
	NSLog(@"-(id) initWithXMLString:(id)");
}

-(id) initWithXMLData:(id) {
	%orig;
	NSLog(@"-(id) initWithXMLData:(id)");
}

-(void) setCurrentString:(id) {
	%orig;
	NSLog(@"-(void) setCurrentString:(id)");
}

-(long long) faultCode {
	%orig;
	NSLog(@"-(long long) faultCode");
}

-(id) faultString {
	%orig;
	NSLog(@"-(id) faultString");
}

-(void) parser:(id) didStartElement:(id) namespaceURI:(id) qualifiedName:(id) attributes:(id) {
	%orig;
	NSLog(@"-(void) parser:(id) didStartElement:(id) namespaceURI:(id) qualifiedName:(id) attributes:(id)");
}

-(void) parser:(id) didEndElement:(id) namespaceURI:(id) qualifiedName:(id) {
	%orig;
	NSLog(@"-(void) parser:(id) didEndElement:(id) namespaceURI:(id) qualifiedName:(id)");
}

-(void) parser:(id) foundCharacters:(id) {
	%orig;
	NSLog(@"-(void) parser:(id) foundCharacters:(id)");
}

-(void) parser:(id) foundCDATA:(id) {
	%orig;
	NSLog(@"-(void) parser:(id) foundCDATA:(id)");
}

-(void) parser:(id) parseErrorOccurred:(id) {
	%orig;
	NSLog(@"-(void) parser:(id) parseErrorOccurred:(id)");
}

-(id) params {
	%orig;
	NSLog(@"-(id) params");
}

-(bool) isFault {
	%orig;
	NSLog(@"-(bool) isFault");
}

-(id) currentString {
	%orig;
	NSLog(@"-(id) currentString");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMUserNotificationManager

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) addUserNotification:(id) {
	%orig;
	NSLog(@"-(void) addUserNotification:(id)");
}

-(void) clearAllUserNotificationsOfType:(long long) {
	%orig;
	NSLog(@"-(void) clearAllUserNotificationsOfType:(long long)");
}

-(void) setUserNotifications:(id) {
	%orig;
	NSLog(@"-(void) setUserNotifications:(id)");
}

-(void) handleUserNotificationAdded:(id) {
	%orig;
	NSLog(@"-(void) handleUserNotificationAdded:(id)");
}

-(void) handleUserNotificationRemoved:(id) {
	%orig;
	NSLog(@"-(void) handleUserNotificationRemoved:(id)");
}

-(void) applyBadges {
	%orig;
	NSLog(@"-(void) applyBadges");
}

-(void) removeUserNotification:(id) {
	%orig;
	NSLog(@"-(void) removeUserNotification:(id)");
}

-(void) clearAllUserNotifications {
	%orig;
	NSLog(@"-(void) clearAllUserNotifications");
}

-(id) userNotificationsDisplayedAt:(long long) {
	%orig;
	NSLog(@"-(id) userNotificationsDisplayedAt:(long long)");
}

-(id) notificationObservers {
	%orig;
	NSLog(@"-(id) notificationObservers");
}

-(void) setNotificationObservers:(id) {
	%orig;
	NSLog(@"-(void) setNotificationObservers:(id)");
}

-(id) userNotifications {
	%orig;
	NSLog(@"-(id) userNotifications");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMUserNotification

+(id) standardMessageForType:(long long) {
	%orig;
	NSLog(@"+(id) standardMessageForType:(long long)");
}

-(id) initWithType:(long long) message:(id) {
	%orig;
	NSLog(@"-(id) initWithType:(long long) message:(id)");
}

-(bool) badgesApplicationIcon {
	%orig;
	NSLog(@"-(bool) badgesApplicationIcon");
}

-(void) setBadgesApplicationIcon:(bool) {
	%orig;
	NSLog(@"-(void) setBadgesApplicationIcon:(bool)");
}

-(id) displayMessage {
	%orig;
	NSLog(@"-(id) displayMessage");
}

-(id) actionTarget {
	%orig;
	NSLog(@"-(id) actionTarget");
}

-(void) setActionSelector:(SEL) {
	%orig;
	NSLog(@"-(void) setActionSelector:(SEL)");
}

-(SEL) actionSelector {
	%orig;
	NSLog(@"-(SEL) actionSelector");
}

-(void) setActionTarget:(id) {
	%orig;
	NSLog(@"-(void) setActionTarget:(id)");
}

-(bool) isEqual:(id) {
	%orig;
	NSLog(@"-(bool) isEqual:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(id) initWithType:(long long) {
	%orig;
	NSLog(@"-(id) initWithType:(long long)");
}

-(unsigned long long) location {
	%orig;
	NSLog(@"-(unsigned long long) location");
}

-(void) setLocation:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLocation:(unsigned long long)");
}

%end

%hook PMAppVersionNotifier

+(bool) isVersionString:(id) greaterThanVersionString:(id) {
	%orig;
	NSLog(@"+(bool) isVersionString:(id) greaterThanVersionString:(id)");
}

-(void) appVersionNotificationAction:(id) {
	%orig;
	NSLog(@"-(void) appVersionNotificationAction:(id)");
}

-(void) latestAvailableAppVersionDetected:(id) {
	%orig;
	NSLog(@"-(void) latestAvailableAppVersionDetected:(id)");
}

-(void) latestAvailableAppVersionShouldBeCleared {
	%orig;
	NSLog(@"-(void) latestAvailableAppVersionShouldBeCleared");
}

%end

%hook PMMusicSearchContext

+(id) contextWithAnyText:(id) artistText:(id) songText:(id) forceDisambiguation:(bool) {
	%orig;
	NSLog(@"+(id) contextWithAnyText:(id) artistText:(id) songText:(id) forceDisambiguation:(bool)");
}

-(void) setAnyText:(id) {
	%orig;
	NSLog(@"-(void) setAnyText:(id)");
}

-(void) setArtistText:(id) {
	%orig;
	NSLog(@"-(void) setArtistText:(id)");
}

-(void) setSongText:(id) {
	%orig;
	NSLog(@"-(void) setSongText:(id)");
}

-(void) setForceDisambiguation:(bool) {
	%orig;
	NSLog(@"-(void) setForceDisambiguation:(bool)");
}

-(id) anyText {
	%orig;
	NSLog(@"-(id) anyText");
}

-(id) artistText {
	%orig;
	NSLog(@"-(id) artistText");
}

-(id) songText {
	%orig;
	NSLog(@"-(id) songText");
}

-(bool) forceDisambiguation {
	%orig;
	NSLog(@"-(bool) forceDisambiguation");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMPlayableContentCustomDataSource

+(id) sharedDataSource {
	%orig;
	NSLog(@"+(id) sharedDataSource");
}

-(void) updateNowPlayingInfo {
	%orig;
	NSLog(@"-(void) updateNowPlayingInfo");
}

-(void) populateLockScreenControlsWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) populateLockScreenControlsWithCompletionHandler:(id)");
}

-(void) setLockScreenPopulationCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setLockScreenPopulationCompletionHandler:(id)");
}

-(void) getMediaPlayerInfoCenterTrackOnMainQueue:(id) {
	%orig;
	NSLog(@"-(void) getMediaPlayerInfoCenterTrackOnMainQueue:(id)");
}

-(id) lockScreenPopulationCompletionHandler {
	%orig;
	NSLog(@"-(id) lockScreenPopulationCompletionHandler");
}

-(void) playableContentManager:(id) initializePlaybackQueueWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) playableContentManager:(id) initializePlaybackQueueWithCompletionHandler:(id)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) setEndpointAvailable:(bool) {
	%orig;
	NSLog(@"-(void) setEndpointAvailable:(bool)");
}

-(void) playableContentManager:(id) initiatePlaybackOfContentItemAtIndexPath:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) playableContentManager:(id) initiatePlaybackOfContentItemAtIndexPath:(id) completionHandler:(id)");
}

-(void) playableContentManager:(id) didUpdateContext:(id) {
	%orig;
	NSLog(@"-(void) playableContentManager:(id) didUpdateContext:(id)");
}

-(bool) endpointAvailable {
	%orig;
	NSLog(@"-(bool) endpointAvailable");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) mainContext {
	%orig;
	NSLog(@"-(id) mainContext");
}

%end

%hook BMWManager

-(void) setDidLaunchDueToURL:(bool) {
	%orig;
	NSLog(@"-(void) setDidLaunchDueToURL:(bool)");
}

-(void) didConnectToBMW:(id) {
	%orig;
	NSLog(@"-(void) didConnectToBMW:(id)");
}

-(void) didDisconnectFromBMW:(id) {
	%orig;
	NSLog(@"-(void) didDisconnectFromBMW:(id)");
}

-(void) openURLNotification:(id) {
	%orig;
	NSLog(@"-(void) openURLNotification:(id)");
}

-(void) setPlaybackVC:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackVC:(id)");
}

-(void) setStationsVC:(id) {
	%orig;
	NSLog(@"-(void) setStationsVC:(id)");
}

-(void) setCreateStationVC:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationVC:(id)");
}

-(void) setSeedSearchVC:(id) {
	%orig;
	NSLog(@"-(void) setSeedSearchVC:(id)");
}

-(void) setGenreVC:(id) {
	%orig;
	NSLog(@"-(void) setGenreVC:(id)");
}

-(void) setSubGenresVC:(id) {
	%orig;
	NSLog(@"-(void) setSubGenresVC:(id)");
}

-(id) subGenresVC {
	%orig;
	NSLog(@"-(id) subGenresVC");
}

-(id) genreVC {
	%orig;
	NSLog(@"-(id) genreVC");
}

-(id) stationsVC {
	%orig;
	NSLog(@"-(id) stationsVC");
}

-(id) playbackVC {
	%orig;
	NSLog(@"-(id) playbackVC");
}

-(id) seedSearchVC {
	%orig;
	NSLog(@"-(id) seedSearchVC");
}

-(bool) didLaunchDueToURL {
	%orig;
	NSLog(@"-(bool) didLaunchDueToURL");
}

-(void) applicationRestoreMainHmiState:(id) {
	%orig;
	NSLog(@"-(void) applicationRestoreMainHmiState:(id)");
}

-(void) displayMessage:(id) andAutoDismiss:(bool) {
	%orig;
	NSLog(@"-(void) displayMessage:(id) andAutoDismiss:(bool)");
}

-(id) manifestForApplication:(id) {
	%orig;
	NSLog(@"-(id) manifestForApplication:(id)");
}

-(id) hmiDescriptionForApplication:(id) {
	%orig;
	NSLog(@"-(id) hmiDescriptionForApplication:(id)");
}

-(id) textDatabasesForApplication:(id) {
	%orig;
	NSLog(@"-(id) textDatabasesForApplication:(id)");
}

-(id) imageDatabasesForApplication:(id) {
	%orig;
	NSLog(@"-(id) imageDatabasesForApplication:(id)");
}

-(void) appStateActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) appStateActiveTrackWillChange");
}

-(void) appStateActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) appStateActiveTrackDidChange");
}

-(void) appStateTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) appStateTrackRatingDidChange:(id)");
}

-(void) appStateBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) appStateBookmarkedSongDidChange:(id)");
}

-(void) appStateBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) appStateBookmarkedArtistDidChange:(id)");
}

-(id) getImageForCarType {
	%orig;
	NSLog(@"-(id) getImageForCarType");
}

-(void) displayMessage:(id) {
	%orig;
	NSLog(@"-(void) displayMessage:(id)");
}

-(id) accessoryMonitor {
	%orig;
	NSLog(@"-(id) accessoryMonitor");
}

-(void) setAccessoryMonitor:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryMonitor:(id)");
}

-(id) createStationVC {
	%orig;
	NSLog(@"-(id) createStationVC");
}

-(void) station:(id) addedAtIndex:(id) {
	%orig;
	NSLog(@"-(void) station:(id) addedAtIndex:(id)");
}

-(void) stationRemoved:(id) {
	%orig;
	NSLog(@"-(void) stationRemoved:(id)");
}

-(id) reportingInfo {
	%orig;
	NSLog(@"-(id) reportingInfo");
}

-(id) accessoryId {
	%orig;
	NSLog(@"-(id) accessoryId");
}

-(void) handlerDidChange:(id) {
	%orig;
	NSLog(@"-(void) handlerDidChange:(id)");
}

-(void) clearHandler {
	%orig;
	NSLog(@"-(void) clearHandler");
}

-(void) playStateDidChange:(bool) {
	%orig;
	NSLog(@"-(void) playStateDidChange:(bool)");
}

-(void) currentTrackDidEnd {
	%orig;
	NSLog(@"-(void) currentTrackDidEnd");
}

-(void) currentTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) currentTrackDidSuspendPlayback");
}

-(void) currentTrackWillChange {
	%orig;
	NSLog(@"-(void) currentTrackWillChange");
}

-(void) currentTrackDidChange {
	%orig;
	NSLog(@"-(void) currentTrackDidChange");
}

-(void) trackRatingDidChange {
	%orig;
	NSLog(@"-(void) trackRatingDidChange");
}

-(void) trackBookmarkDidChangeForTrack:(id) {
	%orig;
	NSLog(@"-(void) trackBookmarkDidChangeForTrack:(id)");
}

-(void) artistBookmarkDidChangeForTrack:(id) {
	%orig;
	NSLog(@"-(void) artistBookmarkDidChangeForTrack:(id)");
}

-(void) currentStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) currentStationWasDeleted:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(bool) isConnected {
	%orig;
	NSLog(@"-(bool) isConnected");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

-(void) connect {
	%orig;
	NSLog(@"-(void) connect");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

-(void) cleanUp {
	%orig;
	NSLog(@"-(void) cleanUp");
}

-(id) application {
	%orig;
	NSLog(@"-(id) application");
}

-(void) setApplication:(id) {
	%orig;
	NSLog(@"-(void) setApplication:(id)");
}

-(void) dataUpdated:(id) {
	%orig;
	NSLog(@"-(void) dataUpdated:(id)");
}

%end

%hook PMCrashReporter

+(void) updateWithInteractionInfo:(id) {
	%orig;
	NSLog(@"+(void) updateWithInteractionInfo:(id)");
}

+(void) updatePageView:(id) viewMode:(id) {
	%orig;
	NSLog(@"+(void) updatePageView:(id) viewMode:(id)");
}

+(void) updateDeviceMetadata {
	%orig;
	NSLog(@"+(void) updateDeviceMetadata");
}

+(void) updateEnvironmentMetadata {
	%orig;
	NSLog(@"+(void) updateEnvironmentMetadata");
}

+(void) updateUserMetadata {
	%orig;
	NSLog(@"+(void) updateUserMetadata");
}

+(id) releaseStage {
	%orig;
	NSLog(@"+(id) releaseStage");
}

+(void) updateApplicationMetadata {
	%orig;
	NSLog(@"+(void) updateApplicationMetadata");
}

+(id) contextFromPageView:(id) viewMode:(id) {
	%orig;
	NSLog(@"+(id) contextFromPageView:(id) viewMode:(id)");
}

+(void) logWarning:(id) withData:(id) {
	%orig;
	NSLog(@"+(void) logWarning:(id) withData:(id)");
}

+(void) startup {
	%orig;
	NSLog(@"+(void) startup");
}

+(bool) enabled {
	%orig;
	NSLog(@"+(bool) enabled");
}

%end

%hook PMUserRecommendationDataSource

-(long long) numberOfSectionsInTableView {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(bool) isPreviewSectionEmpty {
	%orig;
	NSLog(@"-(bool) isPreviewSectionEmpty");
}

-(void) dismissedUserRecommendation:(id) {
	%orig;
	NSLog(@"-(void) dismissedUserRecommendation:(id)");
}

-(bool) removeMoreRecsButtonIfNoAdditionalRecsFound {
	%orig;
	NSLog(@"-(bool) removeMoreRecsButtonIfNoAdditionalRecsFound");
}

-(void) removeStationAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) removeStationAtIndexPath:(id)");
}

-(void) insertStation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) insertStation:(id) atIndexPath:(id)");
}

-(void) replaceStation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) replaceStation:(id) atIndexPath:(id)");
}

-(void) rebuildRecommendationForcePromotedStationLoad:(bool) {
	%orig;
	NSLog(@"-(void) rebuildRecommendationForcePromotedStationLoad:(bool)");
}

-(id) promotedStationIndexPath {
	%orig;
	NSLog(@"-(id) promotedStationIndexPath");
}

-(bool) isPromotedStationShowing {
	%orig;
	NSLog(@"-(bool) isPromotedStationShowing");
}

-(bool) promotedStationHasRegisteredImpression {
	%orig;
	NSLog(@"-(bool) promotedStationHasRegisteredImpression");
}

-(long long) numOfArtistsOnPreview {
	%orig;
	NSLog(@"-(long long) numOfArtistsOnPreview");
}

-(void) setRecommendedArtists:(id) {
	%orig;
	NSLog(@"-(void) setRecommendedArtists:(id)");
}

-(void) setRecommendedGenres:(id) {
	%orig;
	NSLog(@"-(void) setRecommendedGenres:(id)");
}

-(void) setRecommendedExtraArtists:(id) {
	%orig;
	NSLog(@"-(void) setRecommendedExtraArtists:(id)");
}

-(void) setRecommendedExtraGenres:(id) {
	%orig;
	NSLog(@"-(void) setRecommendedExtraGenres:(id)");
}

-(void) setAllRecommendations:(id) {
	%orig;
	NSLog(@"-(void) setAllRecommendations:(id)");
}

-(void) setPreviewRecommendations:(id) {
	%orig;
	NSLog(@"-(void) setPreviewRecommendations:(id)");
}

-(id) allRecommendations {
	%orig;
	NSLog(@"-(id) allRecommendations");
}

-(id) previewRecommendations {
	%orig;
	NSLog(@"-(id) previewRecommendations");
}

-(id) recommendedGenres {
	%orig;
	NSLog(@"-(id) recommendedGenres");
}

-(long long) numOfGenresOnPreview {
	%orig;
	NSLog(@"-(long long) numOfGenresOnPreview");
}

-(void) buildSortedListWithExtraForPreviewModule {
	%orig;
	NSLog(@"-(void) buildSortedListWithExtraForPreviewModule");
}

-(bool) disablePromotedStation {
	%orig;
	NSLog(@"-(bool) disablePromotedStation");
}

-(id) recommendedArtists {
	%orig;
	NSLog(@"-(id) recommendedArtists");
}

-(id) recommendedExtraArtists {
	%orig;
	NSLog(@"-(id) recommendedExtraArtists");
}

-(id) recommendedExtraGenres {
	%orig;
	NSLog(@"-(id) recommendedExtraGenres");
}

-(void) setSortedListWithExtraForPreviewRecommendation:(id) {
	%orig;
	NSLog(@"-(void) setSortedListWithExtraForPreviewRecommendation:(id)");
}

-(id) sortedListWithExtraForPreviewRecommendation {
	%orig;
	NSLog(@"-(id) sortedListWithExtraForPreviewRecommendation");
}

-(bool) isArtistSection:(long long) {
	%orig;
	NSLog(@"-(bool) isArtistSection:(long long)");
}

-(bool) isGenreSection:(long long) {
	%orig;
	NSLog(@"-(bool) isGenreSection:(long long)");
}

-(void) removeStationAtIndexPath:(id) ignoreNotification:(bool) {
	%orig;
	NSLog(@"-(void) removeStationAtIndexPath:(id) ignoreNotification:(bool)");
}

-(void) insertStation:(id) atIndexPath:(id) ignoreNotification:(bool) {
	%orig;
	NSLog(@"-(void) insertStation:(id) atIndexPath:(id) ignoreNotification:(bool)");
}

-(void) replaceStation:(id) atIndexPath:(id) ignoreNotification:(bool) {
	%orig;
	NSLog(@"-(void) replaceStation:(id) atIndexPath:(id) ignoreNotification:(bool)");
}

-(void) rebuildRecommendation {
	%orig;
	NSLog(@"-(void) rebuildRecommendation");
}

-(bool) isPromotedSection:(long long) {
	%orig;
	NSLog(@"-(bool) isPromotedSection:(long long)");
}

-(void) insertPromotedStation:(id) {
	%orig;
	NSLog(@"-(void) insertPromotedStation:(id)");
}

-(void) setDisablePromotedStation:(bool) {
	%orig;
	NSLog(@"-(void) setDisablePromotedStation:(bool)");
}

-(bool) isPromotedStationRemoved {
	%orig;
	NSLog(@"-(bool) isPromotedStationRemoved");
}

-(void) setIsPromotedStationRemoved:(bool) {
	%orig;
	NSLog(@"-(void) setIsPromotedStationRemoved:(bool)");
}

-(id) currentPromotedStation {
	%orig;
	NSLog(@"-(id) currentPromotedStation");
}

-(void) setCurrentPromotedStation:(id) {
	%orig;
	NSLog(@"-(void) setCurrentPromotedStation:(id)");
}

-(id) rowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) rowAtIndexPath:(id)");
}

-(id) indexPathForRow:(id) {
	%orig;
	NSLog(@"-(id) indexPathForRow:(id)");
}

-(id) dataSourceForSection:(long long) {
	%orig;
	NSLog(@"-(id) dataSourceForSection:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsInSection:(long long)");
}

-(id) sections {
	%orig;
	NSLog(@"-(id) sections");
}

-(bool) isEmpty {
	%orig;
	NSLog(@"-(bool) isEmpty");
}

-(long long) mode {
	%orig;
	NSLog(@"-(long long) mode");
}

-(void) setMode:(long long) {
	%orig;
	NSLog(@"-(void) setMode:(long long)");
}

-(void) setSections:(id) {
	%orig;
	NSLog(@"-(void) setSections:(id)");
}

%end

%hook PMBrowseCollectionViewDataSource

-(id) collectionView:(id) cellIdentifierForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellIdentifierForItemAtIndexPath:(id)");
}

-(id) collectionView:(id) dataForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) dataForItemAtIndexPath:(id)");
}

-(id) browseFeatureCellDelegate {
	%orig;
	NSLog(@"-(id) browseFeatureCellDelegate");
}

-(id) createStationFooterView {
	%orig;
	NSLog(@"-(id) createStationFooterView");
}

-(id) emptyBrowseFooterView {
	%orig;
	NSLog(@"-(id) emptyBrowseFooterView");
}

-(void) logInvalidReuseIdentifierExceptionAtIndexPath:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) logInvalidReuseIdentifierExceptionAtIndexPath:(id) withData:(id)");
}

-(id) createStationFooterViewDelegate {
	%orig;
	NSLog(@"-(id) createStationFooterViewDelegate");
}

-(id) emptyBrowseFooterViewDelegate {
	%orig;
	NSLog(@"-(id) emptyBrowseFooterViewDelegate");
}

-(bool) collectionViewWillAppear {
	%orig;
	NSLog(@"-(bool) collectionViewWillAppear");
}

-(void) setCollectionViewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) setCollectionViewWillAppear:(bool)");
}

-(void) setBrowseFeatureCellDelegate:(id) {
	%orig;
	NSLog(@"-(void) setBrowseFeatureCellDelegate:(id)");
}

-(id) tileModuleCellDelegate {
	%orig;
	NSLog(@"-(id) tileModuleCellDelegate");
}

-(void) setTileModuleCellDelegate:(id) {
	%orig;
	NSLog(@"-(void) setTileModuleCellDelegate:(id)");
}

-(void) setEmptyBrowseFooterViewDelegate:(id) {
	%orig;
	NSLog(@"-(void) setEmptyBrowseFooterViewDelegate:(id)");
}

-(void) setCreateStationFooterViewDelegate:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationFooterViewDelegate:(id)");
}

-(void) setCreateStationFooterView:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationFooterView:(id)");
}

-(void) setEmptyBrowseFooterView:(id) {
	%orig;
	NSLog(@"-(void) setEmptyBrowseFooterView:(id)");
}

-(id) browseModules {
	%orig;
	NSLog(@"-(id) browseModules");
}

-(void) setBrowseModules:(id) {
	%orig;
	NSLog(@"-(void) setBrowseModules:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

%end

%hook BrowsePodcastCollectionViewDataSource

-(id) collectionView:(id) dataForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) dataForItemAtIndexPath:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

%end

%hook PMDeepLinkSearchObject

-(id) deepLinkingTimeOut {
	%orig;
	NSLog(@"-(id) deepLinkingTimeOut");
}

-(void) setDeepLinkingTimeOut:(id) {
	%orig;
	NSLog(@"-(void) setDeepLinkingTimeOut:(id)");
}

-(id) deepLinkContext {
	%orig;
	NSLog(@"-(id) deepLinkContext");
}

-(void) setDeepLinkContext:(id) {
	%orig;
	NSLog(@"-(void) setDeepLinkContext:(id)");
}

-(id) additionalParams {
	%orig;
	NSLog(@"-(id) additionalParams");
}

-(void) setAdditionalParams:(id) {
	%orig;
	NSLog(@"-(void) setAdditionalParams:(id)");
}

-(id) searchTerm {
	%orig;
	NSLog(@"-(id) searchTerm");
}

-(void) setSearchTerm:(id) {
	%orig;
	NSLog(@"-(void) setSearchTerm:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMStationsDataSource

-(long long) numberOfSectionsInTableView {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(void) onOfflineUpdated:(id) {
	%orig;
	NSLog(@"-(void) onOfflineUpdated:(id)");
}

-(void) rebuildStationList {
	%orig;
	NSLog(@"-(void) rebuildStationList");
}

-(id) stationSections {
	%orig;
	NSLog(@"-(id) stationSections");
}

-(id) recommendationDataSource {
	%orig;
	NSLog(@"-(id) recommendationDataSource");
}

-(bool) isRecommendationSection:(long long) {
	%orig;
	NSLog(@"-(bool) isRecommendationSection:(long long)");
}

-(long long) letterIndexForStation:(id) {
	%orig;
	NSLog(@"-(long long) letterIndexForStation:(id)");
}

-(void) setStationSections:(id) {
	%orig;
	NSLog(@"-(void) setStationSections:(id)");
}

-(void) insertRecommendedForYouIfPossibleForSection:(id) {
	%orig;
	NSLog(@"-(void) insertRecommendedForYouIfPossibleForSection:(id)");
}

-(void) dismissedUserRecommendation:(id) {
	%orig;
	NSLog(@"-(void) dismissedUserRecommendation:(id)");
}

-(bool) removeMoreRecsButtonIfNoAdditionalRecsFound {
	%orig;
	NSLog(@"-(bool) removeMoreRecsButtonIfNoAdditionalRecsFound");
}

-(void) removeStationAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) removeStationAtIndexPath:(id)");
}

-(void) insertStation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) insertStation:(id) atIndexPath:(id)");
}

-(void) replaceStation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) replaceStation:(id) atIndexPath:(id)");
}

-(void) rebuildRecommendationForcePromotedStationLoad:(bool) {
	%orig;
	NSLog(@"-(void) rebuildRecommendationForcePromotedStationLoad:(bool)");
}

-(id) promotedStationIndexPath {
	%orig;
	NSLog(@"-(id) promotedStationIndexPath");
}

-(bool) isPromotedStationShowing {
	%orig;
	NSLog(@"-(bool) isPromotedStationShowing");
}

-(bool) promotedStationHasRegisteredImpression {
	%orig;
	NSLog(@"-(bool) promotedStationHasRegisteredImpression");
}

-(void) clearStationList {
	%orig;
	NSLog(@"-(void) clearStationList");
}

-(bool) isStationListEmpty {
	%orig;
	NSLog(@"-(bool) isStationListEmpty");
}

-(bool) isRecommendationPreviewSectionEmpty {
	%orig;
	NSLog(@"-(bool) isRecommendationPreviewSectionEmpty");
}

-(void) setRecommendationDataSource:(id) {
	%orig;
	NSLog(@"-(void) setRecommendationDataSource:(id)");
}

-(id) rowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) rowAtIndexPath:(id)");
}

-(id) indexPathForRow:(id) {
	%orig;
	NSLog(@"-(id) indexPathForRow:(id)");
}

-(bool) isOffline {
	%orig;
	NSLog(@"-(bool) isOffline");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsInSection:(long long)");
}

-(long long) mode {
	%orig;
	NSLog(@"-(long long) mode");
}

-(void) setMode:(long long) {
	%orig;
	NSLog(@"-(void) setMode:(long long)");
}

%end

%hook PMOpenURLNotifier

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) notifyWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) notifyWithPath:(id) andParameters:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) removeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeObserver:(id)");
}

-(void) addObserver:(id) {
	%orig;
	NSLog(@"-(void) addObserver:(id)");
}

%end

%hook PMBaseSearchDataSource

-(id) keyForSeedDescriptorType:(long long) {
	%orig;
	NSLog(@"-(id) keyForSeedDescriptorType:(long long)");
}

%end

%hook PMSearchResultsDataSource

-(long long) numberOfSectionsInTableView {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(void) rebuildSearchResults:(id) request:(id) showArtistAndSongsResultsOnly:(bool) {
	%orig;
	NSLog(@"-(void) rebuildSearchResults:(id) request:(id) showArtistAndSongsResultsOnly:(bool)");
}

-(id) searchOrderedGroup {
	%orig;
	NSLog(@"-(id) searchOrderedGroup");
}

-(void) setSearchOrderedGroup:(id) {
	%orig;
	NSLog(@"-(void) setSearchOrderedGroup:(id)");
}

-(void) clearResults {
	%orig;
	NSLog(@"-(void) clearResults");
}

-(void) setSearchResult:(id) {
	%orig;
	NSLog(@"-(void) setSearchResult:(id)");
}

-(id) rowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) rowAtIndexPath:(id)");
}

-(id) indexPathForRow:(id) {
	%orig;
	NSLog(@"-(id) indexPathForRow:(id)");
}

-(id) searchResult {
	%orig;
	NSLog(@"-(id) searchResult");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsInSection:(long long)");
}

-(bool) isEmpty {
	%orig;
	NSLog(@"-(bool) isEmpty");
}

%end

%hook PMAutoCompleteResultsDataSource

-(long long) numberOfSectionsInTableView {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(id) autoCompleteOrderedGroup {
	%orig;
	NSLog(@"-(id) autoCompleteOrderedGroup");
}

-(void) setAutoCompleteResult:(id) {
	%orig;
	NSLog(@"-(void) setAutoCompleteResult:(id)");
}

-(void) setAutoCompleteOrderedGroup:(id) {
	%orig;
	NSLog(@"-(void) setAutoCompleteOrderedGroup:(id)");
}

-(void) rebuildResults:(id) showArtistAndSongsResultsOnly:(bool) {
	%orig;
	NSLog(@"-(void) rebuildResults:(id) showArtistAndSongsResultsOnly:(bool)");
}

-(void) clearResults {
	%orig;
	NSLog(@"-(void) clearResults");
}

-(id) rowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) rowAtIndexPath:(id)");
}

-(id) indexPathForRow:(id) {
	%orig;
	NSLog(@"-(id) indexPathForRow:(id)");
}

-(id) autoCompleteResult {
	%orig;
	NSLog(@"-(id) autoCompleteResult");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsInSection:(long long)");
}

-(bool) isEmpty {
	%orig;
	NSLog(@"-(bool) isEmpty");
}

%end

%hook PMAdVideoDescriptor

-(bool) isAdMarvelAd {
	%orig;
	NSLog(@"-(bool) isAdMarvelAd");
}

-(id) loadErrorURLs {
	%orig;
	NSLog(@"-(id) loadErrorURLs");
}

-(id) initiatedURLs {
	%orig;
	NSLog(@"-(id) initiatedURLs");
}

-(id) followOnBanner {
	%orig;
	NSLog(@"-(id) followOnBanner");
}

-(id) correllationId {
	%orig;
	NSLog(@"-(id) correllationId");
}

-(id) numberWithKey:(id) {
	%orig;
	NSLog(@"-(id) numberWithKey:(id)");
}

-(double) hoursUntilExpiration {
	%orig;
	NSLog(@"-(double) hoursUntilExpiration");
}

-(id) stringWithKey:(id) {
	%orig;
	NSLog(@"-(id) stringWithKey:(id)");
}

-(id) URLsWithKey:(id) {
	%orig;
	NSLog(@"-(id) URLsWithKey:(id)");
}

-(id) URLWithKey:(id) substituteIDFA:(bool) {
	%orig;
	NSLog(@"-(id) URLWithKey:(id) substituteIDFA:(bool)");
}

-(id) URLWithString:(id) substituteIDFA:(bool) {
	%orig;
	NSLog(@"-(id) URLWithString:(id) substituteIDFA:(bool)");
}

-(id) dictionaryWithKey:(id) {
	%orig;
	NSLog(@"-(id) dictionaryWithKey:(id)");
}

-(id) URLWithKey:(id) {
	%orig;
	NSLog(@"-(id) URLWithKey:(id)");
}

-(id) partnerURLWithKey:(id) {
	%orig;
	NSLog(@"-(id) partnerURLWithKey:(id)");
}

-(id) URLsWithKeys:(id) {
	%orig;
	NSLog(@"-(id) URLsWithKeys:(id)");
}

-(id) partnerInitiatedURL {
	%orig;
	NSLog(@"-(id) partnerInitiatedURL");
}

-(bool) isVastAd {
	%orig;
	NSLog(@"-(bool) isVastAd");
}

-(id) adMarvelPartnerId {
	%orig;
	NSLog(@"-(id) adMarvelPartnerId");
}

-(id) adMarvelSiteId {
	%orig;
	NSLog(@"-(id) adMarvelSiteId");
}

-(id) clickthroughURL {
	%orig;
	NSLog(@"-(id) clickthroughURL");
}

-(id) interactionMoreInfoURL {
	%orig;
	NSLog(@"-(id) interactionMoreInfoURL");
}

-(id) interactionLearnMoreURL {
	%orig;
	NSLog(@"-(id) interactionLearnMoreURL");
}

-(id) interactionInitiatedURL {
	%orig;
	NSLog(@"-(id) interactionInitiatedURL");
}

-(id) interactionClosedBeforeEndURL {
	%orig;
	NSLog(@"-(id) interactionClosedBeforeEndURL");
}

-(id) interactionPauseURL {
	%orig;
	NSLog(@"-(id) interactionPauseURL");
}

-(id) interactionUnpauseURL {
	%orig;
	NSLog(@"-(id) interactionUnpauseURL");
}

-(id) interactionLoadErrorURL {
	%orig;
	NSLog(@"-(id) interactionLoadErrorURL");
}

-(id) interactionPlaybackStartURL {
	%orig;
	NSLog(@"-(id) interactionPlaybackStartURL");
}

-(id) interactionPlayedTo1stQuartileURL {
	%orig;
	NSLog(@"-(id) interactionPlayedTo1stQuartileURL");
}

-(id) interactionPlayedTo2ndQuartileURL {
	%orig;
	NSLog(@"-(id) interactionPlayedTo2ndQuartileURL");
}

-(id) interactionPlayedTo3rdQuartileURL {
	%orig;
	NSLog(@"-(id) interactionPlayedTo3rdQuartileURL");
}

-(id) interactionPlayedToCompletionURL {
	%orig;
	NSLog(@"-(id) interactionPlayedToCompletionURL");
}

-(id) internalLearnMoreURL {
	%orig;
	NSLog(@"-(id) internalLearnMoreURL");
}

-(id) internalInitiatedURL {
	%orig;
	NSLog(@"-(id) internalInitiatedURL");
}

-(id) internalClosedBeforeEndURL {
	%orig;
	NSLog(@"-(id) internalClosedBeforeEndURL");
}

-(id) internalPauseURL {
	%orig;
	NSLog(@"-(id) internalPauseURL");
}

-(id) internalUnpauseURL {
	%orig;
	NSLog(@"-(id) internalUnpauseURL");
}

-(id) internalLoadErrorURL {
	%orig;
	NSLog(@"-(id) internalLoadErrorURL");
}

-(id) internalPlaybackStartURL {
	%orig;
	NSLog(@"-(id) internalPlaybackStartURL");
}

-(id) internalPlayedTo1stQuartileURL {
	%orig;
	NSLog(@"-(id) internalPlayedTo1stQuartileURL");
}

-(id) internalPlayedTo2ndQuartileURL {
	%orig;
	NSLog(@"-(id) internalPlayedTo2ndQuartileURL");
}

-(id) internalPlayedTo3rdQuartileURL {
	%orig;
	NSLog(@"-(id) internalPlayedTo3rdQuartileURL");
}

-(id) internalPlayedToCompletionURL {
	%orig;
	NSLog(@"-(id) internalPlayedToCompletionURL");
}

-(id) closedBeforeEndURLs {
	%orig;
	NSLog(@"-(id) closedBeforeEndURLs");
}

-(id) pauseURLs {
	%orig;
	NSLog(@"-(id) pauseURLs");
}

-(id) unpauseURLs {
	%orig;
	NSLog(@"-(id) unpauseURLs");
}

-(id) playbackStartURLs {
	%orig;
	NSLog(@"-(id) playbackStartURLs");
}

-(id) playedTo1stQuartileURLs {
	%orig;
	NSLog(@"-(id) playedTo1stQuartileURLs");
}

-(id) playedTo2ndQuartileURLs {
	%orig;
	NSLog(@"-(id) playedTo2ndQuartileURLs");
}

-(id) playedTo3rdQuartileURLs {
	%orig;
	NSLog(@"-(id) playedTo3rdQuartileURLs");
}

-(id) completionURLs {
	%orig;
	NSLog(@"-(id) completionURLs");
}

-(id) adVerifications {
	%orig;
	NSLog(@"-(id) adVerifications");
}

-(id) adTypeForStatsCollector {
	%orig;
	NSLog(@"-(id) adTypeForStatsCollector");
}

-(id) videoCachePath {
	%orig;
	NSLog(@"-(id) videoCachePath");
}

-(void) setVideoCachePath:(id) {
	%orig;
	NSLog(@"-(void) setVideoCachePath:(id)");
}

-(void) setCorrellationId:(id) {
	%orig;
	NSLog(@"-(void) setCorrellationId:(id)");
}

-(id) siteId {
	%orig;
	NSLog(@"-(id) siteId");
}

-(id) placementId {
	%orig;
	NSLog(@"-(id) placementId");
}

-(id) advertiserId {
	%orig;
	NSLog(@"-(id) advertiserId");
}

-(bool) allowResume {
	%orig;
	NSLog(@"-(bool) allowResume");
}

-(bool) mayBeLoadedWhenNetworkIsOfType:(long long) {
	%orig;
	NSLog(@"-(bool) mayBeLoadedWhenNetworkIsOfType:(long long)");
}

-(id) stringURL {
	%orig;
	NSLog(@"-(id) stringURL");
}

-(unsigned long long) downloadAttempts {
	%orig;
	NSLog(@"-(unsigned long long) downloadAttempts");
}

-(void) setDownloadAttempts:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDownloadAttempts:(unsigned long long)");
}

-(void) setAd:(id) {
	%orig;
	NSLog(@"-(void) setAd:(id)");
}

-(id) lineId {
	%orig;
	NSLog(@"-(id) lineId");
}

-(void) setBytesTotal:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBytesTotal:(unsigned long long)");
}

-(id) ad {
	%orig;
	NSLog(@"-(id) ad");
}

-(unsigned long long) bytesTotal {
	%orig;
	NSLog(@"-(unsigned long long) bytesTotal");
}

-(id) moreInfoURLs {
	%orig;
	NSLog(@"-(id) moreInfoURLs");
}

-(id) campaignId {
	%orig;
	NSLog(@"-(id) campaignId");
}

-(id) creativeId {
	%orig;
	NSLog(@"-(id) creativeId");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) initWithDictionary:(id) {
	%orig;
	NSLog(@"-(id) initWithDictionary:(id)");
}

-(bool) isEmpty {
	%orig;
	NSLog(@"-(bool) isEmpty");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook PMViewToggler

+(id) viewTogglerWithToggledViews:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) viewTogglerWithToggledViews:(id) delegate:(id)");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(id) initWithToggledViews:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithToggledViews:(id) delegate:(id)");
}

-(void) setAnimationOverlap:(double) {
	%orig;
	NSLog(@"-(void) setAnimationOverlap:(double)");
}

-(void) setDisplayDuration:(double) {
	%orig;
	NSLog(@"-(void) setDisplayDuration:(double)");
}

-(void) switchToNextView {
	%orig;
	NSLog(@"-(void) switchToNextView");
}

-(bool) isAutoswitching {
	%orig;
	NSLog(@"-(bool) isAutoswitching");
}

-(void) restartAutoSwitchTimer {
	%orig;
	NSLog(@"-(void) restartAutoSwitchTimer");
}

-(void) setIsAutoswitching:(bool) {
	%orig;
	NSLog(@"-(void) setIsAutoswitching:(bool)");
}

-(id) autoSwitchTimer {
	%orig;
	NSLog(@"-(id) autoSwitchTimer");
}

-(void) setAutoSwitchTimer:(id) {
	%orig;
	NSLog(@"-(void) setAutoSwitchTimer:(id)");
}

-(double) displayDuration {
	%orig;
	NSLog(@"-(double) displayDuration");
}

-(id) toggledViews {
	%orig;
	NSLog(@"-(id) toggledViews");
}

-(id) currentlyDisplayedView {
	%orig;
	NSLog(@"-(id) currentlyDisplayedView");
}

-(bool) shouldShowView:(id) {
	%orig;
	NSLog(@"-(bool) shouldShowView:(id)");
}

-(void) switchToViewImmediately:(id) {
	%orig;
	NSLog(@"-(void) switchToViewImmediately:(id)");
}

-(void) setCurrentlyDisplayedView:(id) {
	%orig;
	NSLog(@"-(void) setCurrentlyDisplayedView:(id)");
}

-(bool) shouldAnimateTransitions {
	%orig;
	NSLog(@"-(bool) shouldAnimateTransitions");
}

-(double) animationOverlap {
	%orig;
	NSLog(@"-(double) animationOverlap");
}

-(void) startAutoswitchingViews {
	%orig;
	NSLog(@"-(void) startAutoswitchingViews");
}

-(void) stopAutoswitchingViews {
	%orig;
	NSLog(@"-(void) stopAutoswitchingViews");
}

-(void) updateDisplayedViews {
	%orig;
	NSLog(@"-(void) updateDisplayedViews");
}

-(void) setToggledViews:(id) {
	%orig;
	NSLog(@"-(void) setToggledViews:(id)");
}

-(void) stopTimer {
	%orig;
	NSLog(@"-(void) stopTimer");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(double) animationDuration {
	%orig;
	NSLog(@"-(double) animationDuration");
}

-(void) setAnimationDuration:(double) {
	%orig;
	NSLog(@"-(void) setAnimationDuration:(double)");
}

-(void) applicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive");
}

-(void) applicationWillResignActive {
	%orig;
	NSLog(@"-(void) applicationWillResignActive");
}

%end

%hook PMTeachMarkPresenter

+(void) showStationPersonalizationTeachMarkWithClickThroughBlock:(id) {
	%orig;
	NSLog(@"+(void) showStationPersonalizationTeachMarkWithClickThroughBlock:(id)");
}

+(id) onDisplayBlockWithStatsId:(SEL) teachMarkValueType:(long long) {
	%orig;
	NSLog(@"+(id) onDisplayBlockWithStatsId:(SEL) teachMarkValueType:(long long)");
}

+(id) tunerOnTapBlockWithStatsId:(SEL) teachMarkValueType:(long long) delegate:(long long) {
	%orig;
	NSLog(@"+(id) tunerOnTapBlockWithStatsId:(SEL) teachMarkValueType:(long long) delegate:(long long)");
}

+(id) dismissBlockWithStatsId:(SEL) teachMarkValueType:(long long) {
	%orig;
	NSLog(@"+(id) dismissBlockWithStatsId:(SEL) teachMarkValueType:(long long)");
}

+(id) onTimeoutBlockWithStatsId:(SEL) teachMarkValueType:(long long) {
	%orig;
	NSLog(@"+(id) onTimeoutBlockWithStatsId:(SEL) teachMarkValueType:(long long)");
}

+(id) clickThroughBlockWithStatsId:(SEL) teachMarkValueType:(long long) {
	%orig;
	NSLog(@"+(id) clickThroughBlockWithStatsId:(SEL) teachMarkValueType:(long long)");
}

+(void) showNewUserFirstThumbUpWithDelegate:(id) {
	%orig;
	NSLog(@"+(void) showNewUserFirstThumbUpWithDelegate:(id)");
}

+(void) showNewUserThumbDownWithDelegate:(id) {
	%orig;
	NSLog(@"+(void) showNewUserThumbDownWithDelegate:(id)");
}

+(void) showExistingUser1stThumbUpWithDelegate:(id) {
	%orig;
	NSLog(@"+(void) showExistingUser1stThumbUpWithDelegate:(id)");
}

+(void) showExistingUserThumbDownWithDelegate:(id) {
	%orig;
	NSLog(@"+(void) showExistingUserThumbDownWithDelegate:(id)");
}

+(void) castingTeachMarkDismissedByUserInteraction {
	%orig;
	NSLog(@"+(void) castingTeachMarkDismissedByUserInteraction");
}

+(void) showCastingTeachMarkWithViews:(id) {
	%orig;
	NSLog(@"+(void) showCastingTeachMarkWithViews:(id)");
}

+(void) showThumbprintRadioNonEligibleCoachMark {
	%orig;
	NSLog(@"+(void) showThumbprintRadioNonEligibleCoachMark");
}

+(void) showPremiumChurnUpsellTeachmark {
	%orig;
	NSLog(@"+(void) showPremiumChurnUpsellTeachmark");
}

+(void) showGopaChurnUpsellTeachmarkWithDurationInDays:(long long) {
	%orig;
	NSLog(@"+(void) showGopaChurnUpsellTeachmarkWithDurationInDays:(long long)");
}

+(void) showIneligibleGopaUpsellTeachmark {
	%orig;
	NSLog(@"+(void) showIneligibleGopaUpsellTeachmark");
}

+(void) showIneligibleIsPremiumGopaTeachmark {
	%orig;
	NSLog(@"+(void) showIneligibleIsPremiumGopaTeachmark");
}

+(bool) canSuggestGoingOnlineGiven:(id) {
	%orig;
	NSLog(@"+(bool) canSuggestGoingOnlineGiven:(id)");
}

+(void) showOfflineTeachMark:(id) {
	%orig;
	NSLog(@"+(void) showOfflineTeachMark:(id)");
}

+(void) showOfflineStationsReadyTeachMark:(id) {
	%orig;
	NSLog(@"+(void) showOfflineStationsReadyTeachMark:(id)");
}

+(void) showOfflineDiskSpaceInsufficientTeachMark {
	%orig;
	NSLog(@"+(void) showOfflineDiskSpaceInsufficientTeachMark");
}

+(void) showOfflineStationsLimitedTeachMark:(id) {
	%orig;
	NSLog(@"+(void) showOfflineStationsLimitedTeachMark:(id)");
}

+(void) showOfflineStationsDaysToReauthTeachMark:(long long) clickThroughBlock:(id) {
	%orig;
	NSLog(@"+(void) showOfflineStationsDaysToReauthTeachMark:(long long) clickThroughBlock:(id)");
}

+(void) showOfflineStationsAuthenticationExpiredTeachMark:(id) {
	%orig;
	NSLog(@"+(void) showOfflineStationsAuthenticationExpiredTeachMark:(id)");
}

+(void) showOfflineConnectionLostTeachMark:(id) {
	%orig;
	NSLog(@"+(void) showOfflineConnectionLostTeachMark:(id)");
}

+(void) showSonosTeachMark:(id) {
	%orig;
	NSLog(@"+(void) showSonosTeachMark:(id)");
}

+(void) showPlusUpsellTeachmark {
	%orig;
	NSLog(@"+(void) showPlusUpsellTeachmark");
}

+(void) showFirstTimeNowPlayingTeachMarkWithDelay:(int) station:(id) delegate:(id) {
	%orig;
	NSLog(@"+(void) showFirstTimeNowPlayingTeachMarkWithDelay:(int) station:(id) delegate:(id)");
}

+(void) showNewUserFirstTimeNowPlayingTeachMarkWithDelegate:(id) {
	%orig;
	NSLog(@"+(void) showNewUserFirstTimeNowPlayingTeachMarkWithDelegate:(id)");
}

+(void) showExistingUserPersonalizationTeachMarkWithDelegate:(id) {
	%orig;
	NSLog(@"+(void) showExistingUserPersonalizationTeachMarkWithDelegate:(id)");
}

+(void) showConcertsTeachMarkIfAvailable {
	%orig;
	NSLog(@"+(void) showConcertsTeachMarkIfAvailable");
}

+(bool) showFirstTimeNowPlayingTeachMarkWithDelayForStation:(id) readOnly:(bool) delegate:(id) {
	%orig;
	NSLog(@"+(bool) showFirstTimeNowPlayingTeachMarkWithDelayForStation:(id) readOnly:(bool) delegate:(id)");
}

+(id) nowPlayingOnTapBlockWithStatsId:(SEL) valueType:(long long) delegate:(long long) {
	%orig;
	NSLog(@"+(id) nowPlayingOnTapBlockWithStatsId:(SEL) valueType:(long long) delegate:(long long)");
}

+(void) showConcertsTeachMark {
	%orig;
	NSLog(@"+(void) showConcertsTeachMark");
}

+(void) presentRemoteTeachMark:(id) withCommand:(id) {
	%orig;
	NSLog(@"+(void) presentRemoteTeachMark:(id) withCommand:(id)");
}

+(id) commandForRemoteTeachMark:(id) {
	%orig;
	NSLog(@"+(id) commandForRemoteTeachMark:(id)");
}

+(void) showArtistAudioMessageStartTutorialTeachmarkFor:(id) showArtistProfileOptions:(id) {
	%orig;
	NSLog(@"+(void) showArtistAudioMessageStartTutorialTeachmarkFor:(id) showArtistProfileOptions:(id)");
}

%end

%hook PMModalAnimationSerializer

-(void) presentModal:(id) onPresenter:(id) animated:(bool) completion:(id) transition:(?) {
	%orig;
	NSLog(@"-(void) presentModal:(id) onPresenter:(id) animated:(bool) completion:(id) transition:(?)");
}

-(void) dismissModalFromPresenter:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissModalFromPresenter:(id) animated:(bool) completion:(id)");
}

-(void) setModalIsAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setModalIsAnimating:(bool)");
}

-(void) setViewControllerBeingDismissed:(id) {
	%orig;
	NSLog(@"-(void) setViewControllerBeingDismissed:(id)");
}

-(void) doNextQueuedModal {
	%orig;
	NSLog(@"-(void) doNextQueuedModal");
}

-(bool) modalIsAnimating {
	%orig;
	NSLog(@"-(bool) modalIsAnimating");
}

-(id) modalQueue {
	%orig;
	NSLog(@"-(id) modalQueue");
}

-(void) internalDismissModalFromPresenter:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) internalDismissModalFromPresenter:(id) animated:(bool) completion:(id)");
}

-(id) viewControllerBeingDismissed {
	%orig;
	NSLog(@"-(id) viewControllerBeingDismissed");
}

-(void) setModalQueue:(id) {
	%orig;
	NSLog(@"-(void) setModalQueue:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMAdVideoPresenter

-(void) experimentStateDidChange:(id) {
	%orig;
	NSLog(@"-(void) experimentStateDidChange:(id)");
}

-(id) videoAdMonitor {
	%orig;
	NSLog(@"-(id) videoAdMonitor");
}

-(void) setVideoAdMonitor:(id) {
	%orig;
	NSLog(@"-(void) setVideoAdMonitor:(id)");
}

-(void) discardCurrentVideo {
	%orig;
	NSLog(@"-(void) discardCurrentVideo");
}

-(bool) isPresentingVideo {
	%orig;
	NSLog(@"-(bool) isPresentingVideo");
}

-(bool) isReadyToPlayVideo {
	%orig;
	NSLog(@"-(bool) isReadyToPlayVideo");
}

-(bool) videoIsEmpty {
	%orig;
	NSLog(@"-(bool) videoIsEmpty");
}

-(bool) isAPVOnCleanStationsEnabled:(bool) {
	%orig;
	NSLog(@"-(bool) isAPVOnCleanStationsEnabled:(bool)");
}

-(void) checkCache {
	%orig;
	NSLog(@"-(void) checkCache");
}

-(void) startChecks {
	%orig;
	NSLog(@"-(void) startChecks");
}

-(id) videoAdRequestWithUrl:(id) cachebust:(id) videoAdIndex:(long long) {
	%orig;
	NSLog(@"-(id) videoAdRequestWithUrl:(id) cachebust:(id) videoAdIndex:(long long)");
}

-(void) logVideoEventOfType:(id) withMessage:(id) {
	%orig;
	NSLog(@"-(void) logVideoEventOfType:(id) withMessage:(id)");
}

-(id) networkVideoPlayer {
	%orig;
	NSLog(@"-(id) networkVideoPlayer");
}

-(id) newNetworkVideoPlayerForDescriptor:(id) {
	%orig;
	NSLog(@"-(id) newNetworkVideoPlayerForDescriptor:(id)");
}

-(void) setNetworkVideoPlayer:(id) {
	%orig;
	NSLog(@"-(void) setNetworkVideoPlayer:(id)");
}

-(id) apvAdSlot {
	%orig;
	NSLog(@"-(id) apvAdSlot");
}

-(void) discardCurrentVideoAndDescriptor {
	%orig;
	NSLog(@"-(void) discardCurrentVideoAndDescriptor");
}

-(void) cancelAdConnection {
	%orig;
	NSLog(@"-(void) cancelAdConnection");
}

-(void) removeDescriptorFile {
	%orig;
	NSLog(@"-(void) removeDescriptorFile");
}

-(void) openAdConnection {
	%orig;
	NSLog(@"-(void) openAdConnection");
}

-(void) logChronosEventForDiscardingVideoAdWithEventDescription:(id) {
	%orig;
	NSLog(@"-(void) logChronosEventForDiscardingVideoAdWithEventDescription:(id)");
}

-(bool) videoIsLoaded {
	%orig;
	NSLog(@"-(bool) videoIsLoaded");
}

-(id) urlStringToURL:(id) {
	%orig;
	NSLog(@"-(id) urlStringToURL:(id)");
}

-(void) hitTrackingURLs:(id) {
	%orig;
	NSLog(@"-(void) hitTrackingURLs:(id)");
}

-(void) haltChecksForInterval:(double) {
	%orig;
	NSLog(@"-(void) haltChecksForInterval:(double)");
}

-(void) registerVideoAdImpression {
	%orig;
	NSLog(@"-(void) registerVideoAdImpression");
}

-(void) setupAdVideoPresenter {
	%orig;
	NSLog(@"-(void) setupAdVideoPresenter");
}

-(void) destroyCurrentNetworkVideoPlayer {
	%orig;
	NSLog(@"-(void) destroyCurrentNetworkVideoPlayer");
}

-(void) setApvAdSlot:(id) {
	%orig;
	NSLog(@"-(void) setApvAdSlot:(id)");
}

-(void) notifyDelegateOfMovieCompletion:(id) {
	%orig;
	NSLog(@"-(void) notifyDelegateOfMovieCompletion:(id)");
}

-(void) resumeVideo {
	%orig;
	NSLog(@"-(void) resumeVideo");
}

-(void) hitTrackingURL:(id) {
	%orig;
	NSLog(@"-(void) hitTrackingURL:(id)");
}

-(void) writeDescriptor {
	%orig;
	NSLog(@"-(void) writeDescriptor");
}

-(int) intervalForFailureCount:(int) {
	%orig;
	NSLog(@"-(int) intervalForFailureCount:(int)");
}

-(void) instantiateNetworkVideoPlayerWith:(id) {
	%orig;
	NSLog(@"-(void) instantiateNetworkVideoPlayerWith:(id)");
}

-(void) networkVideoPlayerVideoAdStarted:(id) {
	%orig;
	NSLog(@"-(void) networkVideoPlayerVideoAdStarted:(id)");
}

-(void) networkVideoPlayerVideoAdCompleted:(id) {
	%orig;
	NSLog(@"-(void) networkVideoPlayerVideoAdCompleted:(id)");
}

-(void) networkVideoPlayer:(id) videoLoadFailed:(id) discardImmediately:(bool) {
	%orig;
	NSLog(@"-(void) networkVideoPlayer:(id) videoLoadFailed:(id) discardImmediately:(bool)");
}

-(void) networkVideoPlayer:(id) videoLoadSucceeded:(id) {
	%orig;
	NSLog(@"-(void) networkVideoPlayer:(id) videoLoadSucceeded:(id)");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(bool) testMode {
	%orig;
	NSLog(@"-(bool) testMode");
}

-(void) setTestMode:(bool) {
	%orig;
	NSLog(@"-(void) setTestMode:(bool)");
}

-(bool) startVideo {
	%orig;
	NSLog(@"-(bool) startVideo");
}

-(void) stopVideo {
	%orig;
	NSLog(@"-(void) stopVideo");
}

-(void) pauseVideo {
	%orig;
	NSLog(@"-(void) pauseVideo");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setDescriptor:(id) {
	%orig;
	NSLog(@"-(void) setDescriptor:(id)");
}

-(id) descriptor {
	%orig;
	NSLog(@"-(id) descriptor");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

-(bool) paused {
	%orig;
	NSLog(@"-(bool) paused");
}

%end

%hook PMBaseNetworkVideoPlayer

-(id) initWithDescriptor:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDescriptor:(id) delegate:(id)");
}

-(bool) errorOccurred {
	%orig;
	NSLog(@"-(bool) errorOccurred");
}

-(void) setErrorOccurred:(bool) {
	%orig;
	NSLog(@"-(void) setErrorOccurred:(bool)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setDescriptor:(id) {
	%orig;
	NSLog(@"-(void) setDescriptor:(id)");
}

-(id) descriptor {
	%orig;
	NSLog(@"-(id) descriptor");
}

%end

%hook PMEmptyVideoPlayer

-(void) discardCurrentVideo {
	%orig;
	NSLog(@"-(void) discardCurrentVideo");
}

-(bool) isPresentingVideo {
	%orig;
	NSLog(@"-(bool) isPresentingVideo");
}

-(bool) isReadyToPlayVideo {
	%orig;
	NSLog(@"-(bool) isReadyToPlayVideo");
}

-(void) loadVideo {
	%orig;
	NSLog(@"-(void) loadVideo");
}

-(void) resumeVideo {
	%orig;
	NSLog(@"-(void) resumeVideo");
}

-(bool) videoIsReady {
	%orig;
	NSLog(@"-(bool) videoIsReady");
}

-(bool) startVideo {
	%orig;
	NSLog(@"-(bool) startVideo");
}

-(void) stopVideo {
	%orig;
	NSLog(@"-(void) stopVideo");
}

-(void) pauseVideo {
	%orig;
	NSLog(@"-(void) pauseVideo");
}

-(double) duration {
	%orig;
	NSLog(@"-(double) duration");
}

-(double) progress {
	%orig;
	NSLog(@"-(double) progress");
}

-(bool) paused {
	%orig;
	NSLog(@"-(bool) paused");
}

%end

%hook PMViewControllerTransitionContext

-(void) setPrivateAppearingToRect:(CGRect) {
	%orig;
	NSLog(@"-(void) setPrivateAppearingToRect:(CGRect)");
}

-(CGRect) privateDisappearingFromRect {
	%orig;
	NSLog(@"-(CGRect) privateDisappearingFromRect");
}

-(CGRect) privateAppearingFromRect {
	%orig;
	NSLog(@"-(CGRect) privateAppearingFromRect");
}

-(CGRect) privateDisappearingToRect {
	%orig;
	NSLog(@"-(CGRect) privateDisappearingToRect");
}

-(CGRect) privateAppearingToRect {
	%orig;
	NSLog(@"-(CGRect) privateAppearingToRect");
}

-(id) privateViewControllers {
	%orig;
	NSLog(@"-(id) privateViewControllers");
}

-(id) initWithFromViewController:(id) toViewController:(id) slidingRight:(bool) {
	%orig;
	NSLog(@"-(id) initWithFromViewController:(id) toViewController:(id) slidingRight:(bool)");
}

-(void) setPrivateViewControllers:(id) {
	%orig;
	NSLog(@"-(void) setPrivateViewControllers:(id)");
}

-(void) setPrivateDisappearingFromRect:(CGRect) {
	%orig;
	NSLog(@"-(void) setPrivateDisappearingFromRect:(CGRect)");
}

-(void) setPrivateAppearingFromRect:(CGRect) {
	%orig;
	NSLog(@"-(void) setPrivateAppearingFromRect:(CGRect)");
}

-(void) setPrivateDisappearingToRect:(CGRect) {
	%orig;
	NSLog(@"-(void) setPrivateDisappearingToRect:(CGRect)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setPresentationStyle:(long long) {
	%orig;
	NSLog(@"-(void) setPresentationStyle:(long long)");
}

-(long long) presentationStyle {
	%orig;
	NSLog(@"-(long long) presentationStyle");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(bool) isInteractive {
	%orig;
	NSLog(@"-(bool) isInteractive");
}

-(id) viewControllerForKey:(id) {
	%orig;
	NSLog(@"-(id) viewControllerForKey:(id)");
}

-(bool) transitionWasCancelled {
	%orig;
	NSLog(@"-(bool) transitionWasCancelled");
}

-(void) completeTransition:(bool) {
	%orig;
	NSLog(@"-(void) completeTransition:(bool)");
}

-(void) cancelInteractiveTransition {
	%orig;
	NSLog(@"-(void) cancelInteractiveTransition");
}

-(void) finishInteractiveTransition {
	%orig;
	NSLog(@"-(void) finishInteractiveTransition");
}

-(void) updateInteractiveTransition:(double) {
	%orig;
	NSLog(@"-(void) updateInteractiveTransition:(double)");
}

-(id) viewForKey:(id) {
	%orig;
	NSLog(@"-(id) viewForKey:(id)");
}

-(bool) isAnimated {
	%orig;
	NSLog(@"-(bool) isAnimated");
}

-(CGRect) finalFrameForViewController:(id) {
	%orig;
	NSLog(@"-(CGRect) finalFrameForViewController:(id)");
}

-(CGAffineTransform) targetTransform {
	%orig;
	NSLog(@"-(CGAffineTransform) targetTransform");
}

-(void) pauseInteractiveTransition {
	%orig;
	NSLog(@"-(void) pauseInteractiveTransition");
}

-(CGRect) initialFrameForViewController:(id) {
	%orig;
	NSLog(@"-(CGRect) initialFrameForViewController:(id)");
}

-(void) setAnimated:(bool) {
	%orig;
	NSLog(@"-(void) setAnimated:(bool)");
}

-(void) setInteractive:(bool) {
	%orig;
	NSLog(@"-(void) setInteractive:(bool)");
}

-(id) animationCompletionBlock {
	%orig;
	NSLog(@"-(id) animationCompletionBlock");
}

-(void) setAnimationCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setAnimationCompletionBlock:(id)");
}

%end

%hook DFPAdCreative

-(void) setAdIdentifiers:(id) {
	%orig;
	NSLog(@"-(void) setAdIdentifiers:(id)");
}

-(bool) supportsCurrentOS {
	%orig;
	NSLog(@"-(bool) supportsCurrentOS");
}

-(bool) supportsCurrentApplication {
	%orig;
	NSLog(@"-(bool) supportsCurrentApplication");
}

-(bool) version:(id) supportsVersion:(id) {
	%orig;
	NSLog(@"-(bool) version:(id) supportsVersion:(id)");
}

-(id) adIdentifiers {
	%orig;
	NSLog(@"-(id) adIdentifiers");
}

-(id) initWithJSON:(id) {
	%orig;
	NSLog(@"-(id) initWithJSON:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook DFPHTMLCreative

-(id) initWithHTML:(id) height:(double) {
	%orig;
	NSLog(@"-(id) initWithHTML:(id) height:(double)");
}

-(id) initWithJSON:(id) {
	%orig;
	NSLog(@"-(id) initWithJSON:(id)");
}

-(id) HTML {
	%orig;
	NSLog(@"-(id) HTML");
}

-(void) setHTML:(id) {
	%orig;
	NSLog(@"-(void) setHTML:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setHeight:(double) {
	%orig;
	NSLog(@"-(void) setHeight:(double)");
}

-(double) height {
	%orig;
	NSLog(@"-(double) height");
}

%end

%hook DFPBannerAd

+(double) creativeDefaultHeight {
	%orig;
	NSLog(@"+(double) creativeDefaultHeight");
}

+(id) adWithDictionary:(id) {
	%orig;
	NSLog(@"+(id) adWithDictionary:(id)");
}

-(id) initWithHTML:(id) withDefaultHeight:(double) {
	%orig;
	NSLog(@"-(id) initWithHTML:(id) withDefaultHeight:(double)");
}

-(void) setIsCompanion:(bool) {
	%orig;
	NSLog(@"-(void) setIsCompanion:(bool)");
}

-(bool) isCompanion {
	%orig;
	NSLog(@"-(bool) isCompanion");
}

-(id) displayTypeString {
	%orig;
	NSLog(@"-(id) displayTypeString");
}

-(id) creatives {
	%orig;
	NSLog(@"-(id) creatives");
}

-(void) setBannerRenderTracker:(id) {
	%orig;
	NSLog(@"-(void) setBannerRenderTracker:(id)");
}

-(void) setBannerRenderDarkTracker:(id) {
	%orig;
	NSLog(@"-(void) setBannerRenderDarkTracker:(id)");
}

-(void) setBannerDisplayAfterDarkTracker:(id) {
	%orig;
	NSLog(@"-(void) setBannerDisplayAfterDarkTracker:(id)");
}

-(void) setParentAdVideoDescriptor:(id) {
	%orig;
	NSLog(@"-(void) setParentAdVideoDescriptor:(id)");
}

-(id) bannerRenderTracker {
	%orig;
	NSLog(@"-(id) bannerRenderTracker");
}

-(id) bannerRenderDarkTracker {
	%orig;
	NSLog(@"-(id) bannerRenderDarkTracker");
}

-(id) bannerDisplayAfterDarkTracker {
	%orig;
	NSLog(@"-(id) bannerDisplayAfterDarkTracker");
}

-(id) parentAdVideoDescriptor {
	%orig;
	NSLog(@"-(id) parentAdVideoDescriptor");
}

-(id) originalHaymakerAd {
	%orig;
	NSLog(@"-(id) originalHaymakerAd");
}

-(void) setOriginalHaymakerAd:(id) {
	%orig;
	NSLog(@"-(void) setOriginalHaymakerAd:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDisplayType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDisplayType:(unsigned long long)");
}

-(unsigned long long) displayType {
	%orig;
	NSLog(@"-(unsigned long long) displayType");
}

%end

%hook DFPJSONAd

-(id) initWithJSON:(id) sourceURL:(id) {
	%orig;
	NSLog(@"-(id) initWithJSON:(id) sourceURL:(id)");
}

-(bool) isCompanion {
	%orig;
	NSLog(@"-(bool) isCompanion");
}

-(id) adId {
	%orig;
	NSLog(@"-(id) adId");
}

-(id) displayTypeString {
	%orig;
	NSLog(@"-(id) displayTypeString");
}

-(id) creatives {
	%orig;
	NSLog(@"-(id) creatives");
}

-(int) requestedAdHeight {
	%orig;
	NSLog(@"-(int) requestedAdHeight");
}

-(id) siteId {
	%orig;
	NSLog(@"-(id) siteId");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDisplayType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDisplayType:(unsigned long long)");
}

-(unsigned long long) displayType {
	%orig;
	NSLog(@"-(unsigned long long) displayType");
}

%end

%hook DFPInterstitialAd

+(id) interstitialAdFrom:(id) {
	%orig;
	NSLog(@"+(id) interstitialAdFrom:(id)");
}

-(id) html {
	%orig;
	NSLog(@"-(id) html");
}

-(void) setHtml:(id) {
	%orig;
	NSLog(@"-(void) setHtml:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMAdvertisingController

+(bool) canRequestInterstitialAd:(id) {
	%orig;
	NSLog(@"+(bool) canRequestInterstitialAd:(id)");
}

+(id) valueForGADAdSize:(GADAdSize) {
	%orig;
	NSLog(@"+(id) valueForGADAdSize:(GADAdSize)");
}

+(id) defaultAdTTL {
	%orig;
	NSLog(@"+(id) defaultAdTTL");
}

+(double) defaultAdRefreshInterval {
	%orig;
	NSLog(@"+(double) defaultAdRefreshInterval");
}

+(id) supportedGADAdSizes {
	%orig;
	NSLog(@"+(id) supportedGADAdSizes");
}

+(double) VAEAudioAdCompanionRefreshInterval {
	%orig;
	NSLog(@"+(double) VAEAudioAdCompanionRefreshInterval");
}

+(id) defaultSLAPAdTTL {
	%orig;
	NSLog(@"+(id) defaultSLAPAdTTL");
}

+(double) vaeAudioAdFollowOnExpirationInterval {
	%orig;
	NSLog(@"+(double) vaeAudioAdFollowOnExpirationInterval");
}

+(double) followOnAdRefreshInterval {
	%orig;
	NSLog(@"+(double) followOnAdRefreshInterval");
}

+(id) customDFPDisplayTemplateIDs {
	%orig;
	NSLog(@"+(id) customDFPDisplayTemplateIDs");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) setQueuedReplay:(id) {
	%orig;
	NSLog(@"-(void) setQueuedReplay:(id)");
}

-(id) coachmarkController {
	%orig;
	NSLog(@"-(id) coachmarkController");
}

-(void) cancelCurrentInteraction {
	%orig;
	NSLog(@"-(void) cancelCurrentInteraction");
}

-(id) partnerTrackingBaseUrlForKey:(id) {
	%orig;
	NSLog(@"-(id) partnerTrackingBaseUrlForKey:(id)");
}

-(void) audioSamplePlayer:(id) sampleHasStarted:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayer:(id) sampleHasStarted:(id)");
}

-(void) audioSamplePlayerAudioWasCompleted:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasCompleted:(id)");
}

-(void) audioSamplePlayerAudioWasStopped:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasStopped:(id)");
}

-(void) audioSamplePlayerAudioWasPaused:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasPaused:(id)");
}

-(void) audioSamplePlayerAudioWasResumed:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasResumed:(id)");
}

-(void) audioSamplePlayerAudio:(id) willPlayNextSample:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudio:(id) willPlayNextSample:(id)");
}

-(id) queuedReplay {
	%orig;
	NSLog(@"-(id) queuedReplay");
}

-(void) delayAdRefreshByInterval:(double) {
	%orig;
	NSLog(@"-(void) delayAdRefreshByInterval:(double)");
}

-(void) setSamplePlayer:(id) {
	%orig;
	NSLog(@"-(void) setSamplePlayer:(id)");
}

-(id) samplePlayer {
	%orig;
	NSLog(@"-(id) samplePlayer");
}

-(void) refreshBannerAdIfReadyWithInteractionName:(id) {
	%orig;
	NSLog(@"-(void) refreshBannerAdIfReadyWithInteractionName:(id)");
}

-(bool) isSMCEnabled {
	%orig;
	NSLog(@"-(bool) isSMCEnabled");
}

-(void) refreshBannerAdImmediatelyWithInteractionName:(id) {
	%orig;
	NSLog(@"-(void) refreshBannerAdImmediatelyWithInteractionName:(id)");
}

-(void) discardCurrentVideoAd {
	%orig;
	NSLog(@"-(void) discardCurrentVideoAd");
}

-(id) slapAdSlot {
	%orig;
	NSLog(@"-(id) slapAdSlot");
}

-(void) logStatForReward:(id) withAction:(id) {
	%orig;
	NSLog(@"-(void) logStatForReward:(id) withAction:(id)");
}

-(void) URLWasOpenedWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) URLWasOpenedWithPath:(id) andParameters:(id)");
}

-(void) removeViewClassNameFromBypassList:(id) {
	%orig;
	NSLog(@"-(void) removeViewClassNameFromBypassList:(id)");
}

-(void) removeViewFromBypassList:(id) {
	%orig;
	NSLog(@"-(void) removeViewFromBypassList:(id)");
}

-(void) addViewClassNameToBypassList:(id) {
	%orig;
	NSLog(@"-(void) addViewClassNameToBypassList:(id)");
}

-(void) addViewToBypassList:(id) {
	%orig;
	NSLog(@"-(void) addViewToBypassList:(id)");
}

-(double) displayAdGutterWidth {
	%orig;
	NSLog(@"-(double) displayAdGutterWidth");
}

-(double) displayAdWidth {
	%orig;
	NSLog(@"-(double) displayAdWidth");
}

-(void) setDisplayAdFullWidth:(bool) {
	%orig;
	NSLog(@"-(void) setDisplayAdFullWidth:(bool)");
}

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(void) attemptPromotedStationPrefetchOnLaunch {
	%orig;
	NSLog(@"-(void) attemptPromotedStationPrefetchOnLaunch");
}

-(void) setShowFlexSkipOfferOnForeground:(bool) {
	%orig;
	NSLog(@"-(void) setShowFlexSkipOfferOnForeground:(bool)");
}

-(void) setShowFlexThumbsDownOfferOnForeground:(bool) {
	%orig;
	NSLog(@"-(void) setShowFlexThumbsDownOfferOnForeground:(bool)");
}

-(void) resetStateOnAdRefresh {
	%orig;
	NSLog(@"-(void) resetStateOnAdRefresh");
}

-(bool) canLoadInterstitialAd {
	%orig;
	NSLog(@"-(bool) canLoadInterstitialAd");
}

-(void) userSubscriptionStateDidChange {
	%orig;
	NSLog(@"-(void) userSubscriptionStateDidChange");
}

-(id) adSession {
	%orig;
	NSLog(@"-(id) adSession");
}

-(void) attemptWasMadeToCreateExistingStation:(id) {
	%orig;
	NSLog(@"-(void) attemptWasMadeToCreateExistingStation:(id)");
}

-(void) updateNextRefresh {
	%orig;
	NSLog(@"-(void) updateNextRefresh");
}

-(void) sleepTimerEnded:(id) {
	%orig;
	NSLog(@"-(void) sleepTimerEnded:(id)");
}

-(void) valueExchangeRewardDidEnd:(id) {
	%orig;
	NSLog(@"-(void) valueExchangeRewardDidEnd:(id)");
}

-(void) valueExchangeRewardDidStart:(id) {
	%orig;
	NSLog(@"-(void) valueExchangeRewardDidStart:(id)");
}

-(void) webHostAddSeedToStation:(id) {
	%orig;
	NSLog(@"-(void) webHostAddSeedToStation:(id)");
}

-(void) experimentStateDidChange:(id) {
	%orig;
	NSLog(@"-(void) experimentStateDidChange:(id)");
}

-(void) handleNewVideoFollowOnBanner:(id) {
	%orig;
	NSLog(@"-(void) handleNewVideoFollowOnBanner:(id)");
}

-(void) monitorVideoAdFromNotification:(id) {
	%orig;
	NSLog(@"-(void) monitorVideoAdFromNotification:(id)");
}

-(bool) registerVideoInteractionForStation:(id) interaction:(id) chronosTriggered:(bool) {
	%orig;
	NSLog(@"-(bool) registerVideoInteractionForStation:(id) interaction:(id) chronosTriggered:(bool)");
}

-(void) setBlockForRegisteringVideoInteractionUponTrackChange:(id) {
	%orig;
	NSLog(@"-(void) setBlockForRegisteringVideoInteractionUponTrackChange:(id)");
}

-(bool) showFlexSkipOfferOnForeground {
	%orig;
	NSLog(@"-(bool) showFlexSkipOfferOnForeground");
}

-(bool) showFlexThumbsDownOfferOnForeground {
	%orig;
	NSLog(@"-(bool) showFlexThumbsDownOfferOnForeground");
}

-(void) removeBannerAdAndUpdateNextRefreshTime:(bool) {
	%orig;
	NSLog(@"-(void) removeBannerAdAndUpdateNextRefreshTime:(bool)");
}

-(id) videoAdMonitor {
	%orig;
	NSLog(@"-(id) videoAdMonitor");
}

-(id) videoPresenter {
	%orig;
	NSLog(@"-(id) videoPresenter");
}

-(void) setVideoPresenter:(id) {
	%orig;
	NSLog(@"-(void) setVideoPresenter:(id)");
}

-(void) setVideoAdMonitor:(id) {
	%orig;
	NSLog(@"-(void) setVideoAdMonitor:(id)");
}

-(void) setupVideoPresenter {
	%orig;
	NSLog(@"-(void) setupVideoPresenter");
}

-(void) setUserJustLoggedIn:(bool) {
	%orig;
	NSLog(@"-(void) setUserJustLoggedIn:(bool)");
}

-(id) leadInAudioCache {
	%orig;
	NSLog(@"-(id) leadInAudioCache");
}

-(void) setLeadInAudioCache:(id) {
	%orig;
	NSLog(@"-(void) setLeadInAudioCache:(id)");
}

-(void) setAdvertisingPersistence:(id) {
	%orig;
	NSLog(@"-(void) setAdvertisingPersistence:(id)");
}

-(id) createSLAPAdSlot {
	%orig;
	NSLog(@"-(id) createSLAPAdSlot");
}

-(bool) delayAdRefreshCalled {
	%orig;
	NSLog(@"-(bool) delayAdRefreshCalled");
}

-(void) setDelayAdRefreshCalled:(bool) {
	%orig;
	NSLog(@"-(void) setDelayAdRefreshCalled:(bool)");
}

-(void) disableInteractionsForInterval:(double) {
	%orig;
	NSLog(@"-(void) disableInteractionsForInterval:(double)");
}

-(void) setLastAdInteractionTimeInterval:(double) {
	%orig;
	NSLog(@"-(void) setLastAdInteractionTimeInterval:(double)");
}

-(double) lastAdInteractionTimeInterval {
	%orig;
	NSLog(@"-(double) lastAdInteractionTimeInterval");
}

-(bool) isUsingFullScreen {
	%orig;
	NSLog(@"-(bool) isUsingFullScreen");
}

-(bool) modalViewInProgress {
	%orig;
	NSLog(@"-(bool) modalViewInProgress");
}

-(id) valueExchangeLeadInBannerAdData {
	%orig;
	NSLog(@"-(id) valueExchangeLeadInBannerAdData");
}

-(id) uninterruptedListeningCompanionAd {
	%orig;
	NSLog(@"-(id) uninterruptedListeningCompanionAd");
}

-(bool) refreshTimeHasPassed {
	%orig;
	NSLog(@"-(bool) refreshTimeHasPassed");
}

-(bool) allowAdDisplayForInteraction:(id) adType:(long long) {
	%orig;
	NSLog(@"-(bool) allowAdDisplayForInteraction:(id) adType:(long long)");
}

-(bool) videoAdsEnabled {
	%orig;
	NSLog(@"-(bool) videoAdsEnabled");
}

-(bool) readyForVideoAdDisplay:(id) interaction:(id) {
	%orig;
	NSLog(@"-(bool) readyForVideoAdDisplay:(id) interaction:(id)");
}

-(void) resetAdIndex {
	%orig;
	NSLog(@"-(void) resetAdIndex");
}

-(bool) bannerAdMayDisplayForInteraction:(id) requested:(bool) {
	%orig;
	NSLog(@"-(bool) bannerAdMayDisplayForInteraction:(id) requested:(bool)");
}

-(void) performBannerAdRefreshWithInteractionName:(id) {
	%orig;
	NSLog(@"-(void) performBannerAdRefreshWithInteractionName:(id)");
}

-(bool) readyForBannerAdDisplayForInteraction:(id) {
	%orig;
	NSLog(@"-(bool) readyForBannerAdDisplayForInteraction:(id)");
}

-(void) setDisableNextRadioAutoResume:(bool) {
	%orig;
	NSLog(@"-(void) setDisableNextRadioAutoResume:(bool)");
}

-(void) disableInterstitialTillNextDay {
	%orig;
	NSLog(@"-(void) disableInterstitialTillNextDay");
}

-(bool) registerVideoInteractionForStation:(id) interaction:(id) {
	%orig;
	NSLog(@"-(bool) registerVideoInteractionForStation:(id) interaction:(id)");
}

-(bool) disallowsAdRotationBasedOnBypassProtocol:(id) {
	%orig;
	NSLog(@"-(bool) disallowsAdRotationBasedOnBypassProtocol:(id)");
}

-(bool) disallowsAdRotation:(id) forEvent:(id) {
	%orig;
	NSLog(@"-(bool) disallowsAdRotation:(id) forEvent:(id)");
}

-(bool) impressionUrlsHit {
	%orig;
	NSLog(@"-(bool) impressionUrlsHit");
}

-(void) setImpressionUrlsHit:(bool) {
	%orig;
	NSLog(@"-(void) setImpressionUrlsHit:(bool)");
}

-(id) browseManager {
	%orig;
	NSLog(@"-(id) browseManager");
}

-(id) valueExchangeMediator {
	%orig;
	NSLog(@"-(id) valueExchangeMediator");
}

-(void) cleanupStoredAdsAndArtistMessages {
	%orig;
	NSLog(@"-(void) cleanupStoredAdsAndArtistMessages");
}

-(bool) isLessThanLeadInAudioMaxListenCount {
	%orig;
	NSLog(@"-(bool) isLessThanLeadInAudioMaxListenCount");
}

-(void) playLeadInAudioWithReward:(id) {
	%orig;
	NSLog(@"-(void) playLeadInAudioWithReward:(id)");
}

-(id) advertisingPersistence {
	%orig;
	NSLog(@"-(id) advertisingPersistence");
}

-(id) leadInAudioPlayer {
	%orig;
	NSLog(@"-(id) leadInAudioPlayer");
}

-(void) setLeadInAudioPlayer:(id) {
	%orig;
	NSLog(@"-(void) setLeadInAudioPlayer:(id)");
}

-(void) logStatForReward:(id) withAction:(id) slapViewCorrelationId:(id) slapViewPosition:(long long) numSlapAds:(long long) {
	%orig;
	NSLog(@"-(void) logStatForReward:(id) withAction:(id) slapViewCorrelationId:(id) slapViewPosition:(long long) numSlapAds:(long long)");
}

-(id) blockForRegisteringVideoInteractionUponTrackChange {
	%orig;
	NSLog(@"-(id) blockForRegisteringVideoInteractionUponTrackChange");
}

-(void) setNowPlayingAdParams:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingAdParams:(id)");
}

-(void) setUpFlexCoachmarkManager {
	%orig;
	NSLog(@"-(void) setUpFlexCoachmarkManager");
}

-(bool) refreshAdOnValidTrackSkip {
	%orig;
	NSLog(@"-(bool) refreshAdOnValidTrackSkip");
}

-(void) setRefreshAdOnValidTrackSkip:(bool) {
	%orig;
	NSLog(@"-(void) setRefreshAdOnValidTrackSkip:(bool)");
}

-(id) flexCoachmarkManager {
	%orig;
	NSLog(@"-(id) flexCoachmarkManager");
}

-(void) setFlexCoachmarkManager:(id) {
	%orig;
	NSLog(@"-(void) setFlexCoachmarkManager:(id)");
}

-(void) getPromotedStations {
	%orig;
	NSLog(@"-(void) getPromotedStations");
}

-(void) setAdIsLoading:(bool) {
	%orig;
	NSLog(@"-(void) setAdIsLoading:(bool)");
}

-(void) notifyPlaylistOnVideoAdDidEnd:(id) {
	%orig;
	NSLog(@"-(void) notifyPlaylistOnVideoAdDidEnd:(id)");
}

-(bool) disableNextRadioAutoResume {
	%orig;
	NSLog(@"-(bool) disableNextRadioAutoResume");
}

-(void) setPendingVideoFollowOnUponModalDismissal:(id) {
	%orig;
	NSLog(@"-(void) setPendingVideoFollowOnUponModalDismissal:(id)");
}

-(void) displayVideoFollowOnBannerAdUponModalViewDismissal {
	%orig;
	NSLog(@"-(void) displayVideoFollowOnBannerAdUponModalViewDismissal");
}

-(void) displayVideoFollowOn {
	%orig;
	NSLog(@"-(void) displayVideoFollowOn");
}

-(void) removeObserverForModalViewDismissal {
	%orig;
	NSLog(@"-(void) removeObserverForModalViewDismissal");
}

-(id) pendingVideoFollowOnUponModalDismissal {
	%orig;
	NSLog(@"-(id) pendingVideoFollowOnUponModalDismissal");
}

-(id) nowPlayingAdParams {
	%orig;
	NSLog(@"-(id) nowPlayingAdParams");
}

-(id) promotedStationPreFetchExpirationTimer {
	%orig;
	NSLog(@"-(id) promotedStationPreFetchExpirationTimer");
}

-(void) setPromotedStationPreFetchExpirationTimer:(id) {
	%orig;
	NSLog(@"-(void) setPromotedStationPreFetchExpirationTimer:(id)");
}

-(bool) displayAdFullWidth {
	%orig;
	NSLog(@"-(bool) displayAdFullWidth");
}

-(void) addMusic:(id) toStation:(id) {
	%orig;
	NSLog(@"-(void) addMusic:(id) toStation:(id)");
}

-(void) bannerAdRefreshedSuccessfully {
	%orig;
	NSLog(@"-(void) bannerAdRefreshedSuccessfully");
}

-(void) bannerAdWebViewRefreshedSuccessfully {
	%orig;
	NSLog(@"-(void) bannerAdWebViewRefreshedSuccessfully");
}

-(void) bannerAdFailedToRefresh {
	%orig;
	NSLog(@"-(void) bannerAdFailedToRefresh");
}

-(void) videoPresenterDidStartLoadingVideo:(id) {
	%orig;
	NSLog(@"-(void) videoPresenterDidStartLoadingVideo:(id)");
}

-(void) videoPresenterDidStartPresentingVideo:(id) {
	%orig;
	NSLog(@"-(void) videoPresenterDidStartPresentingVideo:(id)");
}

-(void) videoPresenterDidFinishPresentingVideo:(id) withFollowOnBanner:(id) {
	%orig;
	NSLog(@"-(void) videoPresenterDidFinishPresentingVideo:(id) withFollowOnBanner:(id)");
}

-(bool) displayLeadInBanner {
	%orig;
	NSLog(@"-(bool) displayLeadInBanner");
}

-(void) disableVideoAdsUntilNextStationChange {
	%orig;
	NSLog(@"-(void) disableVideoAdsUntilNextStationChange");
}

-(void) refreshBannerForStationInteraction {
	%orig;
	NSLog(@"-(void) refreshBannerForStationInteraction");
}

-(void) configureForNewlyRegisteredUser {
	%orig;
	NSLog(@"-(void) configureForNewlyRegisteredUser");
}

-(void) performInteraction:(id) {
	%orig;
	NSLog(@"-(void) performInteraction:(id)");
}

-(void) forceInteraction:(id) {
	%orig;
	NSLog(@"-(void) forceInteraction:(id)");
}

-(long long) adRotationDirectiveFromEvent:(id) {
	%orig;
	NSLog(@"-(long long) adRotationDirectiveFromEvent:(id)");
}

-(void) hitImpressionUrls:(id) {
	%orig;
	NSLog(@"-(void) hitImpressionUrls:(id)");
}

-(void) radioUserUpgradeFinished {
	%orig;
	NSLog(@"-(void) radioUserUpgradeFinished");
}

-(void) radioUserUpgradeFailedWithError:(id) {
	%orig;
	NSLog(@"-(void) radioUserUpgradeFailedWithError:(id)");
}

-(void) enableVideoTesting {
	%orig;
	NSLog(@"-(void) enableVideoTesting");
}

-(void) disableVideoTesting {
	%orig;
	NSLog(@"-(void) disableVideoTesting");
}

-(void) enableAdmFailoverTesting {
	%orig;
	NSLog(@"-(void) enableAdmFailoverTesting");
}

-(void) disableAdmFailoverTesting {
	%orig;
	NSLog(@"-(void) disableAdmFailoverTesting");
}

-(bool) isAdmFailoverTestingEnabled {
	%orig;
	NSLog(@"-(bool) isAdmFailoverTestingEnabled");
}

-(void) enableInterstitialAdTesting {
	%orig;
	NSLog(@"-(void) enableInterstitialAdTesting");
}

-(void) disableInterstitialAdTesting {
	%orig;
	NSLog(@"-(void) disableInterstitialAdTesting");
}

-(void) dismissPromotedStation:(id) {
	%orig;
	NSLog(@"-(void) dismissPromotedStation:(id)");
}

-(void) logPromotedStationImpression:(id) {
	%orig;
	NSLog(@"-(void) logPromotedStationImpression:(id)");
}

-(double) displayAdManagerWidth {
	%orig;
	NSLog(@"-(double) displayAdManagerWidth");
}

-(void) skipInitiatedByUser {
	%orig;
	NSLog(@"-(void) skipInitiatedByUser");
}

-(void) setValueExchangeMediator:(id) {
	%orig;
	NSLog(@"-(void) setValueExchangeMediator:(id)");
}

-(id) valueExchangeAudioHandler {
	%orig;
	NSLog(@"-(id) valueExchangeAudioHandler");
}

-(void) setValueExchangeAudioHandler:(id) {
	%orig;
	NSLog(@"-(void) setValueExchangeAudioHandler:(id)");
}

-(void) setVideoAdsEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setVideoAdsEnabled:(bool)");
}

-(void) setValueExchangeLeadInBannerAdData:(id) {
	%orig;
	NSLog(@"-(void) setValueExchangeLeadInBannerAdData:(id)");
}

-(void) setSlapAdSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlapAdSlot:(id)");
}

-(void) setAdSession:(id) {
	%orig;
	NSLog(@"-(void) setAdSession:(id)");
}

-(id) testAdVerificationData {
	%orig;
	NSLog(@"-(id) testAdVerificationData");
}

-(void) setTestAdVerificationData:(id) {
	%orig;
	NSLog(@"-(void) setTestAdVerificationData:(id)");
}

-(id) vaeVideoAdStatusDelegate {
	%orig;
	NSLog(@"-(id) vaeVideoAdStatusDelegate");
}

-(void) setVaeVideoAdStatusDelegate:(id) {
	%orig;
	NSLog(@"-(void) setVaeVideoAdStatusDelegate:(id)");
}

-(id) smcCoachMarkManager {
	%orig;
	NSLog(@"-(id) smcCoachMarkManager");
}

-(void) setSmcCoachMarkManager:(id) {
	%orig;
	NSLog(@"-(void) setSmcCoachMarkManager:(id)");
}

-(void) setCoachmarkController:(id) {
	%orig;
	NSLog(@"-(void) setCoachmarkController:(id)");
}

-(bool) userJustLoggedIn {
	%orig;
	NSLog(@"-(bool) userJustLoggedIn");
}

-(bool) adIsLoading {
	%orig;
	NSLog(@"-(bool) adIsLoading");
}

-(bool) renderedValueExchangeLeadInBanner {
	%orig;
	NSLog(@"-(bool) renderedValueExchangeLeadInBanner");
}

-(void) setRenderedValueExchangeLeadInBanner:(bool) {
	%orig;
	NSLog(@"-(void) setRenderedValueExchangeLeadInBanner:(bool)");
}

-(void) coachMarkShouldRegisterSMCAction:(long long) {
	%orig;
	NSLog(@"-(void) coachMarkShouldRegisterSMCAction:(long long)");
}

-(bool) videoAdIsMuted {
	%orig;
	NSLog(@"-(bool) videoAdIsMuted");
}

-(void) enableTestAdVideoVerificationScriptWithVerificationScriptURL:(id) verificationParameter:(id) {
	%orig;
	NSLog(@"-(void) enableTestAdVideoVerificationScriptWithVerificationScriptURL:(id) verificationParameter:(id)");
}

-(void) disableTestAdVideoVerificationScript {
	%orig;
	NSLog(@"-(void) disableTestAdVideoVerificationScript");
}

-(void) startRewardCountDownWithResults:(id) correlationId:(id) {
	%orig;
	NSLog(@"-(void) startRewardCountDownWithResults:(id) correlationId:(id)");
}

-(bool) isPlayingVideoAd {
	%orig;
	NSLog(@"-(bool) isPlayingVideoAd");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(unsigned long long) videoAdStatus {
	%orig;
	NSLog(@"-(unsigned long long) videoAdStatus");
}

-(double) secondsSinceDisplayAdRefresh {
	%orig;
	NSLog(@"-(double) secondsSinceDisplayAdRefresh");
}

-(bool) readyForVideoAdDisplay {
	%orig;
	NSLog(@"-(bool) readyForVideoAdDisplay");
}

-(void) urlAssetCache:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) urlAssetCache:(id) didFailWithError:(id)");
}

-(void) urlAssetCacheDidFinishCaching:(id) {
	%orig;
	NSLog(@"-(void) urlAssetCacheDidFinishCaching:(id)");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) radioStationWillChangeFrom:(id) to:(id) {
	%orig;
	NSLog(@"-(void) radioStationWillChangeFrom:(id) to:(id)");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(void) radioShowingAccessoryConnectionDidChange {
	%orig;
	NSLog(@"-(void) radioShowingAccessoryConnectionDidChange");
}

-(void) audioOverRadioDidStartPlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidStartPlaying:(id)");
}

-(void) audioOverRadioDidPausePlaying:(id) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidPausePlaying:(id)");
}

-(void) audioOverRadioDidFinishPlaying:(id) success:(bool) {
	%orig;
	NSLog(@"-(void) audioOverRadioDidFinishPlaying:(id) success:(bool)");
}

-(void) radioUsernameDidChange {
	%orig;
	NSLog(@"-(void) radioUsernameDidChange");
}

-(void) radioUserReceivesVisualAdsDidChange {
	%orig;
	NSLog(@"-(void) radioUserReceivesVisualAdsDidChange");
}

-(void) radioUserSettingsDidChange {
	%orig;
	NSLog(@"-(void) radioUserSettingsDidChange");
}

-(void) radioUserAccountMessageUrlDidChange {
	%orig;
	NSLog(@"-(void) radioUserAccountMessageUrlDidChange");
}

-(void) radioInNowPlayingWillChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingWillChange");
}

-(void) radioInNowPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingDidChange");
}

-(void) loginDidComplete:(id) {
	%orig;
	NSLog(@"-(void) loginDidComplete:(id)");
}

-(void) logoutDidComplete:(id) {
	%orig;
	NSLog(@"-(void) logoutDidComplete:(id)");
}

-(id) stringForEventType:(long long) {
	%orig;
	NSLog(@"-(id) stringForEventType:(long long)");
}

-(void) appWillEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) appWillEnterForeground:(id)");
}

-(double) screenWidth {
	%orig;
	NSLog(@"-(double) screenWidth");
}

-(id) appDelegate {
	%orig;
	NSLog(@"-(id) appDelegate");
}

-(void) setAppDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAppDelegate:(id)");
}

-(void) didBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) didBecomeActive:(id)");
}

-(id) zones {
	%orig;
	NSLog(@"-(id) zones");
}

-(void) setZones:(id) {
	%orig;
	NSLog(@"-(void) setZones:(id)");
}

-(void) appDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) appDidEnterBackground:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setAlertController:(id) {
	%orig;
	NSLog(@"-(void) setAlertController:(id)");
}

-(id) alertController {
	%orig;
	NSLog(@"-(id) alertController");
}

-(void) finishInit {
	%orig;
	NSLog(@"-(void) finishInit");
}

%end

%hook AdRotationBypass

-(id) initWithViewClassName:(id) {
	%orig;
	NSLog(@"-(id) initWithViewClassName:(id)");
}

-(bool) specificType {
	%orig;
	NSLog(@"-(bool) specificType");
}

-(void) setSpecificType:(bool) {
	%orig;
	NSLog(@"-(void) setSpecificType:(bool)");
}

-(bool) specificSubType {
	%orig;
	NSLog(@"-(bool) specificSubType");
}

-(void) setSpecificSubType:(bool) {
	%orig;
	NSLog(@"-(void) setSpecificSubType:(bool)");
}

-(id) viewClassName {
	%orig;
	NSLog(@"-(id) viewClassName");
}

-(void) setViewClassName:(id) {
	%orig;
	NSLog(@"-(void) setViewClassName:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(id) initWithView:(id) {
	%orig;
	NSLog(@"-(id) initWithView:(id)");
}

-(long long) subtype {
	%orig;
	NSLog(@"-(long long) subtype");
}

-(void) setSubtype:(long long) {
	%orig;
	NSLog(@"-(void) setSubtype:(long long)");
}

%end

%hook PMBonjourServer

-(id) initWithProtocol:(id) port:(unsigned short) serverDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithProtocol:(id) port:(unsigned short) serverDelegate:(id)");
}

-(void) startIPv4 {
	%orig;
	NSLog(@"-(void) startIPv4");
}

-(void) startIPv6 {
	%orig;
	NSLog(@"-(void) startIPv6");
}

-(void) handleSocketAccept:(int*) {
	%orig;
	NSLog(@"-(void) handleSocketAccept:(int*)");
}

-(void) netServiceDidPublish:(id) {
	%orig;
	NSLog(@"-(void) netServiceDidPublish:(id)");
}

-(void) netService:(id) didNotPublish:(id) {
	%orig;
	NSLog(@"-(void) netService:(id) didNotPublish:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook PMArtistDeepLinkHandler

-(void) setDeferredPath:(id) {
	%orig;
	NSLog(@"-(void) setDeferredPath:(id)");
}

-(void) setDeferredParams:(id) {
	%orig;
	NSLog(@"-(void) setDeferredParams:(id)");
}

-(id) deferredPath {
	%orig;
	NSLog(@"-(id) deferredPath");
}

-(id) deferredParams {
	%orig;
	NSLog(@"-(id) deferredParams");
}

-(bool) handleURLPath:(id) parameters:(id) {
	%orig;
	NSLog(@"-(bool) handleURLPath:(id) parameters:(id)");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMBonjourInterceptor

-(void) bonjourServer:(id) didAcceptConnectionWithPipe:(id) {
	%orig;
	NSLog(@"-(void) bonjourServer:(id) didAcceptConnectionWithPipe:(id)");
}

-(void) configureInRcv {
	%orig;
	NSLog(@"-(void) configureInRcv");
}

-(void) configureInSnd {
	%orig;
	NSLog(@"-(void) configureInSnd");
}

-(void) configureOutRcv {
	%orig;
	NSLog(@"-(void) configureOutRcv");
}

-(void) configureOutSnd {
	%orig;
	NSLog(@"-(void) configureOutSnd");
}

-(void) killInRcv {
	%orig;
	NSLog(@"-(void) killInRcv");
}

-(void) killInSnd {
	%orig;
	NSLog(@"-(void) killInSnd");
}

-(void) killOutRcv {
	%orig;
	NSLog(@"-(void) killOutRcv");
}

-(void) killOutSnd {
	%orig;
	NSLog(@"-(void) killOutSnd");
}

-(void) killAll {
	%orig;
	NSLog(@"-(void) killAll");
}

-(void) pipe:(id) didReceiveError:(id) {
	%orig;
	NSLog(@"-(void) pipe:(id) didReceiveError:(id)");
}

-(void) pipeInputDidFlush:(id) {
	%orig;
	NSLog(@"-(void) pipeInputDidFlush:(id)");
}

-(void) pipeDidClose:(id) {
	%orig;
	NSLog(@"-(void) pipeDidClose:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook PMAccessoryManager

+(id) supportedProtocols {
	%orig;
	NSLog(@"+(id) supportedProtocols");
}

+(bool) debugEnabled {
	%orig;
	NSLog(@"+(bool) debugEnabled");
}

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(id) roadblockViewController {
	%orig;
	NSLog(@"-(id) roadblockViewController");
}

-(id) brandingImageView {
	%orig;
	NSLog(@"-(id) brandingImageView");
}

-(id) defaultBrandingView {
	%orig;
	NSLog(@"-(id) defaultBrandingView");
}

-(void) listen {
	%orig;
	NSLog(@"-(void) listen");
}

-(void) displayLogText:(id) {
	%orig;
	NSLog(@"-(void) displayLogText:(id)");
}

-(void) debugRequested {
	%orig;
	NSLog(@"-(void) debugRequested");
}

-(void) setRoadblockViewController:(id) {
	%orig;
	NSLog(@"-(void) setRoadblockViewController:(id)");
}

-(id) shimmerContainer {
	%orig;
	NSLog(@"-(id) shimmerContainer");
}

-(void) setShimmerContainer:(id) {
	%orig;
	NSLog(@"-(void) setShimmerContainer:(id)");
}

-(void) setDefaultBrandingView:(id) {
	%orig;
	NSLog(@"-(void) setDefaultBrandingView:(id)");
}

-(void) setBrandingImageView:(id) {
	%orig;
	NSLog(@"-(void) setBrandingImageView:(id)");
}

-(void) acceptLinks {
	%orig;
	NSLog(@"-(void) acceptLinks");
}

-(bool) isBonjourStarted {
	%orig;
	NSLog(@"-(bool) isBonjourStarted");
}

-(void) startBonjour {
	%orig;
	NSLog(@"-(void) startBonjour");
}

-(void) setWillConnectAvailableAccessories:(bool) {
	%orig;
	NSLog(@"-(void) setWillConnectAvailableAccessories:(bool)");
}

-(id) bonjourServer {
	%orig;
	NSLog(@"-(id) bonjourServer");
}

-(id) interceptor {
	%orig;
	NSLog(@"-(id) interceptor");
}

-(id) buildInterfaceDescription {
	%orig;
	NSLog(@"-(id) buildInterfaceDescription");
}

-(void) setBonjourServer:(id) {
	%orig;
	NSLog(@"-(void) setBonjourServer:(id)");
}

-(void) setInterceptor:(id) {
	%orig;
	NSLog(@"-(void) setInterceptor:(id)");
}

-(void) bonjourListen {
	%orig;
	NSLog(@"-(void) bonjourListen");
}

-(void) setIsBonjourStarted:(bool) {
	%orig;
	NSLog(@"-(void) setIsBonjourStarted:(bool)");
}

-(id) eaManager {
	%orig;
	NSLog(@"-(id) eaManager");
}

-(void) connectToAvailableAccessories {
	%orig;
	NSLog(@"-(void) connectToAvailableAccessories");
}

-(void) accessoryDidConnect:(id) {
	%orig;
	NSLog(@"-(void) accessoryDidConnect:(id)");
}

-(id) currentLink {
	%orig;
	NSLog(@"-(id) currentLink");
}

-(void) inspectEAAccessory:(id) {
	%orig;
	NSLog(@"-(void) inspectEAAccessory:(id)");
}

-(void) setAcceptingLinks:(bool) {
	%orig;
	NSLog(@"-(void) setAcceptingLinks:(bool)");
}

-(void) hideRoadblock {
	%orig;
	NSLog(@"-(void) hideRoadblock");
}

-(void) dismissLockScreen {
	%orig;
	NSLog(@"-(void) dismissLockScreen");
}

-(void) setCurrentLink:(id) {
	%orig;
	NSLog(@"-(void) setCurrentLink:(id)");
}

-(bool) shouldDisableMPNowPlayingInfoCenter {
	%orig;
	NSLog(@"-(bool) shouldDisableMPNowPlayingInfoCenter");
}

-(bool) shouldDisableRemoteEventListener {
	%orig;
	NSLog(@"-(bool) shouldDisableRemoteEventListener");
}

-(void) startAccessoryAPISessionWithPipe:(id) {
	%orig;
	NSLog(@"-(void) startAccessoryAPISessionWithPipe:(id)");
}

-(id) reportingInfoForAccessory:(id) {
	%orig;
	NSLog(@"-(id) reportingInfoForAccessory:(id)");
}

-(void) startAccessoryWithLink:(id) {
	%orig;
	NSLog(@"-(void) startAccessoryWithLink:(id)");
}

-(id) localInterceptor {
	%orig;
	NSLog(@"-(id) localInterceptor");
}

-(bool) acceptingLinks {
	%orig;
	NSLog(@"-(bool) acceptingLinks");
}

-(void) prepareLogEntries {
	%orig;
	NSLog(@"-(void) prepareLogEntries");
}

-(bool) willConnectAvailableAccessories {
	%orig;
	NSLog(@"-(bool) willConnectAvailableAccessories");
}

-(id) filterPresets {
	%orig;
	NSLog(@"-(id) filterPresets");
}

-(id) debugButton {
	%orig;
	NSLog(@"-(id) debugButton");
}

-(id) interceptorButton {
	%orig;
	NSLog(@"-(id) interceptorButton");
}

-(id) logNavLabel {
	%orig;
	NSLog(@"-(id) logNavLabel");
}

-(id) logTextView {
	%orig;
	NSLog(@"-(id) logTextView");
}

-(id) skipToFirstButton {
	%orig;
	NSLog(@"-(id) skipToFirstButton");
}

-(void) setLogEntryIndex:(long long) {
	%orig;
	NSLog(@"-(void) setLogEntryIndex:(long long)");
}

-(id) communicationErrorAlert {
	%orig;
	NSLog(@"-(id) communicationErrorAlert");
}

-(void) setCommunicationErrorAlert:(id) {
	%orig;
	NSLog(@"-(void) setCommunicationErrorAlert:(id)");
}

-(id) reconnectPrompt {
	%orig;
	NSLog(@"-(id) reconnectPrompt");
}

-(void) setReconnectPrompt:(id) {
	%orig;
	NSLog(@"-(void) setReconnectPrompt:(id)");
}

-(void) prepareAccessoryUI {
	%orig;
	NSLog(@"-(void) prepareAccessoryUI");
}

-(void) applyAccessoryProperties {
	%orig;
	NSLog(@"-(void) applyAccessoryProperties");
}

-(void) stopReceivingRemoteEventsIfNecessary {
	%orig;
	NSLog(@"-(void) stopReceivingRemoteEventsIfNecessary");
}

-(void) setInterceptorWebView:(id) {
	%orig;
	NSLog(@"-(void) setInterceptorWebView:(id)");
}

-(id) webviewContainer {
	%orig;
	NSLog(@"-(id) webviewContainer");
}

-(id) interceptorWebView {
	%orig;
	NSLog(@"-(id) interceptorWebView");
}

-(void) setInterceptorHost:(id) {
	%orig;
	NSLog(@"-(void) setInterceptorHost:(id)");
}

-(void) setLocalInterceptor:(id) {
	%orig;
	NSLog(@"-(void) setLocalInterceptor:(id)");
}

-(id) interceptorHost {
	%orig;
	NSLog(@"-(id) interceptorHost");
}

-(void) initializeInterceptorWebview {
	%orig;
	NSLog(@"-(void) initializeInterceptorWebview");
}

-(void) resetInterceptor {
	%orig;
	NSLog(@"-(void) resetInterceptor");
}

-(id) interceptorNavigationController {
	%orig;
	NSLog(@"-(id) interceptorNavigationController");
}

-(void) setRestartPrompt:(id) {
	%orig;
	NSLog(@"-(void) setRestartPrompt:(id)");
}

-(id) allLogEntries {
	%orig;
	NSLog(@"-(id) allLogEntries");
}

-(void) setAllLogEntries:(id) {
	%orig;
	NSLog(@"-(void) setAllLogEntries:(id)");
}

-(void) setDisplayedLogEntries:(id) {
	%orig;
	NSLog(@"-(void) setDisplayedLogEntries:(id)");
}

-(id) debugNavigationController {
	%orig;
	NSLog(@"-(id) debugNavigationController");
}

-(id) displayedLogEntries {
	%orig;
	NSLog(@"-(id) displayedLogEntries");
}

-(long long) currentLogIndex {
	%orig;
	NSLog(@"-(long long) currentLogIndex");
}

-(void) setCurrentLogIndex:(long long) {
	%orig;
	NSLog(@"-(void) setCurrentLogIndex:(long long)");
}

-(void) updateLogNavLabel {
	%orig;
	NSLog(@"-(void) updateLogNavLabel");
}

-(id) stringDate {
	%orig;
	NSLog(@"-(id) stringDate");
}

-(bool) logEntry:(id) passesFilter:(id) {
	%orig;
	NSLog(@"-(bool) logEntry:(id) passesFilter:(id)");
}

-(void) filterResultsWithSearchText:(id) {
	%orig;
	NSLog(@"-(void) filterResultsWithSearchText:(id)");
}

-(void) bonjourServer:(id) didAcceptConnectionWithPipe:(id) {
	%orig;
	NSLog(@"-(void) bonjourServer:(id) didAcceptConnectionWithPipe:(id)");
}

-(void) stopBonjour {
	%orig;
	NSLog(@"-(void) stopBonjour");
}

-(void) interceptorRequested {
	%orig;
	NSLog(@"-(void) interceptorRequested");
}

-(void) interceptorDone {
	%orig;
	NSLog(@"-(void) interceptorDone");
}

-(void) interceptorRestartPressed {
	%orig;
	NSLog(@"-(void) interceptorRestartPressed");
}

-(void) debugDone {
	%orig;
	NSLog(@"-(void) debugDone");
}

-(void) emailDebugLog {
	%orig;
	NSLog(@"-(void) emailDebugLog");
}

-(void) previousLog {
	%orig;
	NSLog(@"-(void) previousLog");
}

-(void) nextLog {
	%orig;
	NSLog(@"-(void) nextLog");
}

-(void) skipToFirstLog {
	%orig;
	NSLog(@"-(void) skipToFirstLog");
}

-(void) skipToLastLog {
	%orig;
	NSLog(@"-(void) skipToLastLog");
}

-(void) filterInfo {
	%orig;
	NSLog(@"-(void) filterInfo");
}

-(void) filterCommand {
	%orig;
	NSLog(@"-(void) filterCommand");
}

-(void) filterFrame {
	%orig;
	NSLog(@"-(void) filterFrame");
}

-(void) filterBytes {
	%orig;
	NSLog(@"-(void) filterBytes");
}

-(id) restartPrompt {
	%orig;
	NSLog(@"-(id) restartPrompt");
}

-(void) setDebugNavigationController:(id) {
	%orig;
	NSLog(@"-(void) setDebugNavigationController:(id)");
}

-(void) setInterceptorNavigationController:(id) {
	%orig;
	NSLog(@"-(void) setInterceptorNavigationController:(id)");
}

-(void) setDebugButton:(id) {
	%orig;
	NSLog(@"-(void) setDebugButton:(id)");
}

-(void) setInterceptorButton:(id) {
	%orig;
	NSLog(@"-(void) setInterceptorButton:(id)");
}

-(void) setLogNavLabel:(id) {
	%orig;
	NSLog(@"-(void) setLogNavLabel:(id)");
}

-(void) setLogTextView:(id) {
	%orig;
	NSLog(@"-(void) setLogTextView:(id)");
}

-(void) setSkipToFirstButton:(id) {
	%orig;
	NSLog(@"-(void) setSkipToFirstButton:(id)");
}

-(void) setFilterPresets:(id) {
	%orig;
	NSLog(@"-(void) setFilterPresets:(id)");
}

-(void) setWebviewContainer:(id) {
	%orig;
	NSLog(@"-(void) setWebviewContainer:(id)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) session:(id) didLogError:(id) {
	%orig;
	NSLog(@"-(void) session:(id) didLogError:(id)");
}

-(void) session:(id) didLogDebug:(id) {
	%orig;
	NSLog(@"-(void) session:(id) didLogDebug:(id)");
}

-(void) linkDidEndSession:(id) {
	%orig;
	NSLog(@"-(void) linkDidEndSession:(id)");
}

-(void) linkDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) linkDidDisconnect:(id)");
}

-(void) linkDidActivate:(id) {
	%orig;
	NSLog(@"-(void) linkDidActivate:(id)");
}

-(void) linkRequiresUserIntervention:(id) {
	%orig;
	NSLog(@"-(void) linkRequiresUserIntervention:(id)");
}

-(void) linkDidStartSession:(id) {
	%orig;
	NSLog(@"-(void) linkDidStartSession:(id)");
}

-(void) linkDidUpdateAccessoryProperties:(id) {
	%orig;
	NSLog(@"-(void) linkDidUpdateAccessoryProperties:(id)");
}

-(void) link:(id) didReceiveBrandingImage:(id) {
	%orig;
	NSLog(@"-(void) link:(id) didReceiveBrandingImage:(id)");
}

-(void) linkDidFailAndWillDisconnect:(id) {
	%orig;
	NSLog(@"-(void) linkDidFailAndWillDisconnect:(id)");
}

-(bool) link:(id) isCompatibleWithApiVersion:(unsigned short) {
	%orig;
	NSLog(@"-(bool) link:(id) isCompatibleWithApiVersion:(unsigned short)");
}

-(id) dateFormatter {
	%orig;
	NSLog(@"-(id) dateFormatter");
}

-(void) setDateFormatter:(id) {
	%orig;
	NSLog(@"-(void) setDateFormatter:(id)");
}

-(void) accessoryDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) accessoryDidDisconnect:(id)");
}

-(id) currentAccessory {
	%orig;
	NSLog(@"-(id) currentAccessory");
}

-(void) setCurrentAccessory:(id) {
	%orig;
	NSLog(@"-(void) setCurrentAccessory:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) searchBar:(id) textDidChange:(id) {
	%orig;
	NSLog(@"-(void) searchBar:(id) textDidChange:(id)");
}

-(void) searchBarTextDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) searchBarTextDidBeginEditing:(id)");
}

-(void) searchBarTextDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) searchBarTextDidEndEditing:(id)");
}

-(void) searchBarSearchButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) searchBarSearchButtonClicked:(id)");
}

-(id) searchBar {
	%orig;
	NSLog(@"-(id) searchBar");
}

-(void) setSearchBar:(id) {
	%orig;
	NSLog(@"-(void) setSearchBar:(id)");
}

-(bool) isDebugEnabled {
	%orig;
	NSLog(@"-(bool) isDebugEnabled");
}

-(void) disconnect {
	%orig;
	NSLog(@"-(void) disconnect");
}

-(void) applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillResignActive:(id)");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(void) mailComposeController:(id) didFinishWithResult:(long long) error:(id) {
	%orig;
	NSLog(@"-(void) mailComposeController:(id) didFinishWithResult:(long long) error:(id)");
}

%end

%hook PMViewControllerAnimatedTransitioningCoordinator

-(void) setNumberOfAnimationSequences:(long long) {
	%orig;
	NSLog(@"-(void) setNumberOfAnimationSequences:(long long)");
}

-(void) animationSequenceDidFinishInTransitionContext:(id) {
	%orig;
	NSLog(@"-(void) animationSequenceDidFinishInTransitionContext:(id)");
}

-(void) setCompletedAnimationSequences:(long long) {
	%orig;
	NSLog(@"-(void) setCompletedAnimationSequences:(long long)");
}

-(void) setTransitionCompletionSent:(bool) {
	%orig;
	NSLog(@"-(void) setTransitionCompletionSent:(bool)");
}

-(long long) numberOfAnimationSequences {
	%orig;
	NSLog(@"-(long long) numberOfAnimationSequences");
}

-(long long) completedAnimationSequences {
	%orig;
	NSLog(@"-(long long) completedAnimationSequences");
}

-(bool) transitionCompletionSent {
	%orig;
	NSLog(@"-(bool) transitionCompletionSent");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(void) finalizeTransition {
	%orig;
	NSLog(@"-(void) finalizeTransition");
}

%end

%hook PMWebContentControllerToPreviewCardTransition

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook PMPreviewCardToWebContentControllerTransition

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

%end

%hook PMFromPhoneNowPlayingTransition

-(id) miniPlayerViewController {
	%orig;
	NSLog(@"-(id) miniPlayerViewController");
}

-(void) setMiniPlayerViewController:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerViewController:(id)");
}

-(void) setIsActiveTrackAudioAd:(bool) {
	%orig;
	NSLog(@"-(void) setIsActiveTrackAudioAd:(bool)");
}

-(bool) isActiveTrackAudioAd {
	%orig;
	NSLog(@"-(bool) isActiveTrackAudioAd");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(void) finalizeTransition {
	%orig;
	NSLog(@"-(void) finalizeTransition");
}

%end

%hook PMStationPersonalizationToStationListTransitionSX

-(id) miniPlayerViewController {
	%orig;
	NSLog(@"-(id) miniPlayerViewController");
}

-(void) setMiniPlayerViewController:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerViewController:(id)");
}

-(id) imageOfView:(id) {
	%orig;
	NSLog(@"-(id) imageOfView:(id)");
}

-(id) thumbUpPillView {
	%orig;
	NSLog(@"-(id) thumbUpPillView");
}

-(id) thumbDownPillView {
	%orig;
	NSLog(@"-(id) thumbDownPillView");
}

-(void) setFromViewController:(id) {
	%orig;
	NSLog(@"-(void) setFromViewController:(id)");
}

-(void) setToViewController:(id) {
	%orig;
	NSLog(@"-(void) setToViewController:(id)");
}

-(void) setFinalToViewFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFinalToViewFrame:(CGRect)");
}

-(void) setKeywindow:(id) {
	%orig;
	NSLog(@"-(void) setKeywindow:(id)");
}

-(id) keywindow {
	%orig;
	NSLog(@"-(id) keywindow");
}

-(CGRect) selectedCellFrame {
	%orig;
	NSLog(@"-(CGRect) selectedCellFrame");
}

-(void) setFromViewSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setFromViewSnapshot:(id)");
}

-(id) fromViewSnapshot {
	%orig;
	NSLog(@"-(id) fromViewSnapshot");
}

-(void) setToViewSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setToViewSnapshot:(id)");
}

-(id) toViewSnapshot {
	%orig;
	NSLog(@"-(id) toViewSnapshot");
}

-(void) setViewToHideMeter:(id) {
	%orig;
	NSLog(@"-(void) setViewToHideMeter:(id)");
}

-(void) setMiniPlayerSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerSnapshot:(id)");
}

-(id) miniPlayerSnapshot {
	%orig;
	NSLog(@"-(id) miniPlayerSnapshot");
}

-(id) selectedCell {
	%orig;
	NSLog(@"-(id) selectedCell");
}

-(id) viewToHideMeter {
	%orig;
	NSLog(@"-(id) viewToHideMeter");
}

-(void) setSelectedCell:(id) {
	%orig;
	NSLog(@"-(void) setSelectedCell:(id)");
}

-(void) setSelectedCellFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setSelectedCellFrame:(CGRect)");
}

-(CGRect) statusBarFrameViewRect:(id) {
	%orig;
	NSLog(@"-(CGRect) statusBarFrameViewRect:(id)");
}

-(CGPoint) centerOfFrame:(CGRect) {
	%orig;
	NSLog(@"-(CGPoint) centerOfFrame:(CGRect)");
}

-(void) setThumbUpPillView:(id) {
	%orig;
	NSLog(@"-(void) setThumbUpPillView:(id)");
}

-(void) setThumbDownPillView:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownPillView:(id)");
}

-(id) viewToHideMeterArea {
	%orig;
	NSLog(@"-(id) viewToHideMeterArea");
}

-(id) navigationBarSnapshot {
	%orig;
	NSLog(@"-(id) navigationBarSnapshot");
}

-(id) fromViewTitleSnapshot {
	%orig;
	NSLog(@"-(id) fromViewTitleSnapshot");
}

-(id) fromViewMeterSnapshot {
	%orig;
	NSLog(@"-(id) fromViewMeterSnapshot");
}

-(void) setupPillView {
	%orig;
	NSLog(@"-(void) setupPillView");
}

-(void) getselectedCellInfo {
	%orig;
	NSLog(@"-(void) getselectedCellInfo");
}

-(id) tabBarSnapshot {
	%orig;
	NSLog(@"-(id) tabBarSnapshot");
}

-(id) toViewTitleSnapshot {
	%orig;
	NSLog(@"-(id) toViewTitleSnapshot");
}

-(id) addButtonSnapshot {
	%orig;
	NSLog(@"-(id) addButtonSnapshot");
}

-(void) setupFromViewComponents {
	%orig;
	NSLog(@"-(void) setupFromViewComponents");
}

-(void) setupToViewComponents {
	%orig;
	NSLog(@"-(void) setupToViewComponents");
}

-(void) animationTransitionInContext:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) animationTransitionInContext:(id) completion:(id)");
}

-(void) animateToOpenMeterCellWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) animateToOpenMeterCellWithCompletion:(id)");
}

-(void) animateToNowPlayingCellWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) animateToNowPlayingCellWithCompletion:(id)");
}

-(CGRect) navigationBarSnapshotFrame {
	%orig;
	NSLog(@"-(CGRect) navigationBarSnapshotFrame");
}

-(CGRect) meterAreaFrame {
	%orig;
	NSLog(@"-(CGRect) meterAreaFrame");
}

-(void) setFromViewMeterSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setFromViewMeterSnapshot:(id)");
}

-(void) setTabBarSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setTabBarSnapshot:(id)");
}

-(void) setNavigationBarSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setNavigationBarSnapshot:(id)");
}

-(void) setFromViewTitleSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setFromViewTitleSnapshot:(id)");
}

-(void) setToViewTitleSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setToViewTitleSnapshot:(id)");
}

-(void) setAddButtonSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setAddButtonSnapshot:(id)");
}

-(void) setViewToHideMeterArea:(id) {
	%orig;
	NSLog(@"-(void) setViewToHideMeterArea:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(CGRect) finalToViewFrame {
	%orig;
	NSLog(@"-(CGRect) finalToViewFrame");
}

-(void) setCellBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setCellBackgroundView:(id)");
}

-(id) cellBackgroundView {
	%orig;
	NSLog(@"-(id) cellBackgroundView");
}

-(double) top {
	%orig;
	NSLog(@"-(double) top");
}

-(double) bottom {
	%orig;
	NSLog(@"-(double) bottom");
}

-(void) setTop:(double) {
	%orig;
	NSLog(@"-(void) setTop:(double)");
}

-(void) setBottom:(double) {
	%orig;
	NSLog(@"-(void) setBottom:(double)");
}

-(double) statusBarOffset {
	%orig;
	NSLog(@"-(double) statusBarOffset");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(id) transitionContext {
	%orig;
	NSLog(@"-(id) transitionContext");
}

-(id) canvas {
	%orig;
	NSLog(@"-(id) canvas");
}

-(void) setCanvas:(id) {
	%orig;
	NSLog(@"-(void) setCanvas:(id)");
}

-(void) setTransitionContext:(id) {
	%orig;
	NSLog(@"-(void) setTransitionContext:(id)");
}

-(id) fromViewController {
	%orig;
	NSLog(@"-(id) fromViewController");
}

-(id) toViewController {
	%orig;
	NSLog(@"-(id) toViewController");
}

-(void) cleanUp {
	%orig;
	NSLog(@"-(void) cleanUp");
}

-(void) finalizeTransition {
	%orig;
	NSLog(@"-(void) finalizeTransition");
}

%end

%hook PMToPhoneNowPlayingTransition

-(bool) shouldShowUnifiedPlayControl {
	%orig;
	NSLog(@"-(bool) shouldShowUnifiedPlayControl");
}

-(id) trackNameLabel {
	%orig;
	NSLog(@"-(id) trackNameLabel");
}

-(id) artistNameLabel {
	%orig;
	NSLog(@"-(id) artistNameLabel");
}

-(void) setArtistNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistNameLabel:(id)");
}

-(void) setTrackNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setTrackNameLabel:(id)");
}

-(id) miniPlayerViewController {
	%orig;
	NSLog(@"-(id) miniPlayerViewController");
}

-(void) setMiniPlayerViewController:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerViewController:(id)");
}

-(void) setIsActiveTrackAudioAd:(bool) {
	%orig;
	NSLog(@"-(void) setIsActiveTrackAudioAd:(bool)");
}

-(id) audioAdAppearance {
	%orig;
	NSLog(@"-(id) audioAdAppearance");
}

-(void) setAudioAdAppearance:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdAppearance:(id)");
}

-(void) setFromViewController:(id) {
	%orig;
	NSLog(@"-(void) setFromViewController:(id)");
}

-(void) setToViewController:(id) {
	%orig;
	NSLog(@"-(void) setToViewController:(id)");
}

-(void) setFinalToViewFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFinalToViewFrame:(CGRect)");
}

-(void) setFromViewSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setFromViewSnapshot:(id)");
}

-(id) fromViewSnapshot {
	%orig;
	NSLog(@"-(id) fromViewSnapshot");
}

-(void) setToViewSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setToViewSnapshot:(id)");
}

-(id) toViewSnapshot {
	%orig;
	NSLog(@"-(id) toViewSnapshot");
}

-(void) setMiniPlayerSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerSnapshot:(id)");
}

-(id) miniPlayerSnapshot {
	%orig;
	NSLog(@"-(id) miniPlayerSnapshot");
}

-(void) initBaseTransitionContextPropertiesForContext:(id) {
	%orig;
	NSLog(@"-(void) initBaseTransitionContextPropertiesForContext:(id)");
}

-(void) setupOriginalViewHierarchy {
	%orig;
	NSLog(@"-(void) setupOriginalViewHierarchy");
}

-(void) setupTemporaryViews {
	%orig;
	NSLog(@"-(void) setupTemporaryViews");
}

-(bool) isActiveTrackAudioAd {
	%orig;
	NSLog(@"-(bool) isActiveTrackAudioAd");
}

-(void) adMiniPlayerAnimationBlur {
	%orig;
	NSLog(@"-(void) adMiniPlayerAnimationBlur");
}

-(void) removeTransitionViews {
	%orig;
	NSLog(@"-(void) removeTransitionViews");
}

-(void) albumArtAnimationStep2Completion:(id) {
	%orig;
	NSLog(@"-(void) albumArtAnimationStep2Completion:(id)");
}

-(void) albumArtAnimationStep1Completion:(id) {
	%orig;
	NSLog(@"-(void) albumArtAnimationStep1Completion:(id)");
}

-(void) trackInfoAnimationCompletion:(id) {
	%orig;
	NSLog(@"-(void) trackInfoAnimationCompletion:(id)");
}

-(void) controlViewAnimationCompletion:(id) {
	%orig;
	NSLog(@"-(void) controlViewAnimationCompletion:(id)");
}

-(void) expandMiniPlayerAnimationCompletion:(id) {
	%orig;
	NSLog(@"-(void) expandMiniPlayerAnimationCompletion:(id)");
}

-(void) trackProgressAnimationCompletion:(id) {
	%orig;
	NSLog(@"-(void) trackProgressAnimationCompletion:(id)");
}

-(void) fadeMiniPlayerContentAnimationCompletion:(id) {
	%orig;
	NSLog(@"-(void) fadeMiniPlayerContentAnimationCompletion:(id)");
}

-(id) fakeNavigationAndStatusBar {
	%orig;
	NSLog(@"-(id) fakeNavigationAndStatusBar");
}

-(id) controlViewSnapshot {
	%orig;
	NSLog(@"-(id) controlViewSnapshot");
}

-(id) miniPlayerBackgroundView {
	%orig;
	NSLog(@"-(id) miniPlayerBackgroundView");
}

-(id) progressBarSnapshot {
	%orig;
	NSLog(@"-(id) progressBarSnapshot");
}

-(void) setMiniPlayerBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerBackgroundView:(id)");
}

-(void) setNowPlayingBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingBackgroundView:(id)");
}

-(void) createAlbumArtImageView {
	%orig;
	NSLog(@"-(void) createAlbumArtImageView");
}

-(void) createTrackSongLabel {
	%orig;
	NSLog(@"-(void) createTrackSongLabel");
}

-(void) createArtistLabel {
	%orig;
	NSLog(@"-(void) createArtistLabel");
}

-(void) createProgressBarSnapshot {
	%orig;
	NSLog(@"-(void) createProgressBarSnapshot");
}

-(void) createControlSnapshot {
	%orig;
	NSLog(@"-(void) createControlSnapshot");
}

-(void) adjustMiniPlayerPosition {
	%orig;
	NSLog(@"-(void) adjustMiniPlayerPosition");
}

-(void) setupFakeNavigationBar {
	%orig;
	NSLog(@"-(void) setupFakeNavigationBar");
}

-(void) setFakeNavigationAndStatusBar:(id) {
	%orig;
	NSLog(@"-(void) setFakeNavigationAndStatusBar:(id)");
}

-(void) setProgressBarSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setProgressBarSnapshot:(id)");
}

-(void) setControlViewSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setControlViewSnapshot:(id)");
}

-(void) setTitleSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setTitleSnapshot:(id)");
}

-(id) titleSnapshot {
	%orig;
	NSLog(@"-(id) titleSnapshot");
}

-(void) setLeftButtonSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setLeftButtonSnapshot:(id)");
}

-(id) leftButtonSnapshot {
	%orig;
	NSLog(@"-(id) leftButtonSnapshot");
}

-(void) setRightButtonSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setRightButtonSnapshot:(id)");
}

-(id) rightButtonSnapshot {
	%orig;
	NSLog(@"-(id) rightButtonSnapshot");
}

-(void) setMiniPlayerOriginalFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setMiniPlayerOriginalFrame:(CGRect)");
}

-(id) nowPlayingBackgroundView {
	%orig;
	NSLog(@"-(id) nowPlayingBackgroundView");
}

-(void) setAlbumFinalFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setAlbumFinalFrame:(CGRect)");
}

-(CGRect) albumFinalFrame {
	%orig;
	NSLog(@"-(CGRect) albumFinalFrame");
}

-(void) albumArtAnimationStep1:(CGRect) center:(CGPoint) completion:(id) {
	%orig;
	NSLog(@"-(void) albumArtAnimationStep1:(CGRect) center:(CGPoint) completion:(id)");
}

-(void) albumArtAnimationStep2:(CGRect) center:(CGPoint) completion:(id) {
	%orig;
	NSLog(@"-(void) albumArtAnimationStep2:(CGRect) center:(CGPoint) completion:(id)");
}

-(void) createStationNameLabels {
	%orig;
	NSLog(@"-(void) createStationNameLabels");
}

-(void) createLeftButtonSnapshot {
	%orig;
	NSLog(@"-(void) createLeftButtonSnapshot");
}

-(void) createRightButtonSnapshot {
	%orig;
	NSLog(@"-(void) createRightButtonSnapshot");
}

-(bool) viewControllerShowingBottomView:(id) {
	%orig;
	NSLog(@"-(bool) viewControllerShowingBottomView:(id)");
}

-(id) innerBlueView {
	%orig;
	NSLog(@"-(id) innerBlueView");
}

-(void) setInnerBlueView:(id) {
	%orig;
	NSLog(@"-(void) setInnerBlueView:(id)");
}

-(CGRect) miniPlayerOriginalFrame {
	%orig;
	NSLog(@"-(CGRect) miniPlayerOriginalFrame");
}

-(id) radio {
	%orig;
	NSLog(@"-(id) radio");
}

-(CGRect) finalToViewFrame {
	%orig;
	NSLog(@"-(CGRect) finalToViewFrame");
}

-(id) albumImageView {
	%orig;
	NSLog(@"-(id) albumImageView");
}

-(void) setAlbumImageView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumImageView:(id)");
}

-(void) setRadio:(id) {
	%orig;
	NSLog(@"-(void) setRadio:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(id) canvas {
	%orig;
	NSLog(@"-(id) canvas");
}

-(void) setCanvas:(id) {
	%orig;
	NSLog(@"-(void) setCanvas:(id)");
}

-(long long) operation {
	%orig;
	NSLog(@"-(long long) operation");
}

-(void) setOperation:(long long) {
	%orig;
	NSLog(@"-(void) setOperation:(long long)");
}

-(id) fromViewController {
	%orig;
	NSLog(@"-(id) fromViewController");
}

-(id) toViewController {
	%orig;
	NSLog(@"-(id) toViewController");
}

-(void) finalizeTransition {
	%orig;
	NSLog(@"-(void) finalizeTransition");
}

%end

%hook PMStationPersonalizationToThumbHistoryTransition

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(void) animationEnded:(bool) {
	%orig;
	NSLog(@"-(void) animationEnded:(bool)");
}

%end

%hook PMStationListToStationPersonalizationTransitionSX

-(id) miniPlayerViewController {
	%orig;
	NSLog(@"-(id) miniPlayerViewController");
}

-(void) setMiniPlayerViewController:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerViewController:(id)");
}

-(id) imageOfView:(id) {
	%orig;
	NSLog(@"-(id) imageOfView:(id)");
}

-(void) setFromViewController:(id) {
	%orig;
	NSLog(@"-(void) setFromViewController:(id)");
}

-(void) setToViewController:(id) {
	%orig;
	NSLog(@"-(void) setToViewController:(id)");
}

-(void) setFinalToViewFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFinalToViewFrame:(CGRect)");
}

-(void) setKeywindow:(id) {
	%orig;
	NSLog(@"-(void) setKeywindow:(id)");
}

-(id) keywindow {
	%orig;
	NSLog(@"-(id) keywindow");
}

-(void) getSelectedCellInfo {
	%orig;
	NSLog(@"-(void) getSelectedCellInfo");
}

-(void) setStretchableHeight:(double) {
	%orig;
	NSLog(@"-(void) setStretchableHeight:(double)");
}

-(CGRect) selectedCellFrame {
	%orig;
	NSLog(@"-(CGRect) selectedCellFrame");
}

-(double) stretchableHeight {
	%orig;
	NSLog(@"-(double) stretchableHeight");
}

-(id) createCellBackgroundView {
	%orig;
	NSLog(@"-(id) createCellBackgroundView");
}

-(void) setFromViewSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setFromViewSnapshot:(id)");
}

-(id) fromViewSnapshot {
	%orig;
	NSLog(@"-(id) fromViewSnapshot");
}

-(void) setToViewSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setToViewSnapshot:(id)");
}

-(id) toViewSnapshot {
	%orig;
	NSLog(@"-(id) toViewSnapshot");
}

-(id) createMeterSnapshot:(double) {
	%orig;
	NSLog(@"-(id) createMeterSnapshot:(double)");
}

-(void) setMeterSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setMeterSnapshot:(id)");
}

-(id) meterSnapshot {
	%orig;
	NSLog(@"-(id) meterSnapshot");
}

-(void) setViewToHideMeter:(id) {
	%orig;
	NSLog(@"-(void) setViewToHideMeter:(id)");
}

-(void) setToViewBackButtonSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setToViewBackButtonSnapshot:(id)");
}

-(void) setFromAddButtonSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setFromAddButtonSnapshot:(id)");
}

-(void) setMiniPlayerSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerSnapshot:(id)");
}

-(id) miniPlayerSnapshot {
	%orig;
	NSLog(@"-(id) miniPlayerSnapshot");
}

-(id) selectedCell {
	%orig;
	NSLog(@"-(id) selectedCell");
}

-(id) fakeNavigationBar {
	%orig;
	NSLog(@"-(id) fakeNavigationBar");
}

-(id) toViewTitleSanpShot {
	%orig;
	NSLog(@"-(id) toViewTitleSanpShot");
}

-(id) fromAddButtonSnapshot {
	%orig;
	NSLog(@"-(id) fromAddButtonSnapshot");
}

-(id) viewToHideMeter {
	%orig;
	NSLog(@"-(id) viewToHideMeter");
}

-(CGRect) meterButtonDestinationFrame {
	%orig;
	NSLog(@"-(CGRect) meterButtonDestinationFrame");
}

-(id) toViewBackButtonSnapshot {
	%orig;
	NSLog(@"-(id) toViewBackButtonSnapshot");
}

-(void) startPostTransitionAnimationInContext:(id) {
	%orig;
	NSLog(@"-(void) startPostTransitionAnimationInContext:(id)");
}

-(id) fromNavigationBarSnapshot {
	%orig;
	NSLog(@"-(id) fromNavigationBarSnapshot");
}

-(void) setupThumbUpPillView:(id) thumbDownPillView:(id) {
	%orig;
	NSLog(@"-(void) setupThumbUpPillView:(id) thumbDownPillView:(id)");
}

-(void) setSelectedCell:(id) {
	%orig;
	NSLog(@"-(void) setSelectedCell:(id)");
}

-(void) setSelectedCellFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setSelectedCellFrame:(CGRect)");
}

-(CGRect) statusBarFrameViewRect:(id) {
	%orig;
	NSLog(@"-(CGRect) statusBarFrameViewRect:(id)");
}

-(CGRect) fakeNavigationBarFrame {
	%orig;
	NSLog(@"-(CGRect) fakeNavigationBarFrame");
}

-(CGPoint) centerOfFrame:(CGRect) {
	%orig;
	NSLog(@"-(CGPoint) centerOfFrame:(CGRect)");
}

-(CGRect) toViewBackButtonFrame {
	%orig;
	NSLog(@"-(CGRect) toViewBackButtonFrame");
}

-(void) setFromNavigationBarSnapshot:(id) {
	%orig;
	NSLog(@"-(void) setFromNavigationBarSnapshot:(id)");
}

-(void) setFakeNavigationBar:(id) {
	%orig;
	NSLog(@"-(void) setFakeNavigationBar:(id)");
}

-(void) setToViewTitleSanpShot:(id) {
	%orig;
	NSLog(@"-(void) setToViewTitleSanpShot:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(CGRect) finalToViewFrame {
	%orig;
	NSLog(@"-(CGRect) finalToViewFrame");
}

-(void) setCellBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setCellBackgroundView:(id)");
}

-(id) cellBackgroundView {
	%orig;
	NSLog(@"-(id) cellBackgroundView");
}

-(double) top {
	%orig;
	NSLog(@"-(double) top");
}

-(double) bottom {
	%orig;
	NSLog(@"-(double) bottom");
}

-(void) setTop:(double) {
	%orig;
	NSLog(@"-(void) setTop:(double)");
}

-(void) setBottom:(double) {
	%orig;
	NSLog(@"-(void) setBottom:(double)");
}

-(void) setStatusBarOffset:(double) {
	%orig;
	NSLog(@"-(void) setStatusBarOffset:(double)");
}

-(double) statusBarOffset {
	%orig;
	NSLog(@"-(double) statusBarOffset");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(id) transitionContext {
	%orig;
	NSLog(@"-(id) transitionContext");
}

-(id) canvas {
	%orig;
	NSLog(@"-(id) canvas");
}

-(void) setCanvas:(id) {
	%orig;
	NSLog(@"-(void) setCanvas:(id)");
}

-(void) setTransitionContext:(id) {
	%orig;
	NSLog(@"-(void) setTransitionContext:(id)");
}

-(id) fromViewController {
	%orig;
	NSLog(@"-(id) fromViewController");
}

-(id) toViewController {
	%orig;
	NSLog(@"-(id) toViewController");
}

-(id) topView {
	%orig;
	NSLog(@"-(id) topView");
}

-(void) finalizeTransition {
	%orig;
	NSLog(@"-(void) finalizeTransition");
}

%end

%hook PMThumbHistoryToStationPersonalizationTransition

-(double) transitionDuration:(id) {
	%orig;
	NSLog(@"-(double) transitionDuration:(id)");
}

-(void) animateTransition:(id) {
	%orig;
	NSLog(@"-(void) animateTransition:(id)");
}

-(void) animationEnded:(bool) {
	%orig;
	NSLog(@"-(void) animationEnded:(bool)");
}

%end

%hook DFPAdLandingPageController

+(id) loadURL:(id) onWebViewHostFinish:(id) onWebViewHostFail:(?) {
	%orig;
	NSLog(@"+(id) loadURL:(id) onWebViewHostFinish:(id) onWebViewHostFail:(?)");
}

+(id) showURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id) adCorrelationId:(id) {
	%orig;
	NSLog(@"+(id) showURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id) adCorrelationId:(id)");
}

+(id) showHTML:(id) baseURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id) {
	%orig;
	NSLog(@"+(id) showHTML:(id) baseURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id)");
}

+(void) dismissVisibleLanding {
	%orig;
	NSLog(@"+(void) dismissVisibleLanding");
}

+(void) dismissInterstitialLanding {
	%orig;
	NSLog(@"+(void) dismissInterstitialLanding");
}

+(id) visibleLandingPage {
	%orig;
	NSLog(@"+(id) visibleLandingPage");
}

+(id) showURL:(id) {
	%orig;
	NSLog(@"+(id) showURL:(id)");
}

+(id) showURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id) deliveryMethod:(id) interactionCorrelationId:(id) adCorrelationId:(id) isCompanion:(bool) {
	%orig;
	NSLog(@"+(id) showURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id) deliveryMethod:(id) interactionCorrelationId:(id) adCorrelationId:(id) isCompanion:(bool)");
}

+(void) showInterstitialWithHtml:(id) {
	%orig;
	NSLog(@"+(void) showInterstitialWithHtml:(id)");
}

+(void) dismissVisibleLandingPageWithTransitionType:(id) {
	%orig;
	NSLog(@"+(void) dismissVisibleLandingPageWithTransitionType:(id)");
}

-(id) webViewHost {
	%orig;
	NSLog(@"-(id) webViewHost");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHostDidFinishRendering:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishRendering:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(id) webViewHostRequestsAdIdentifiers:(id) {
	%orig;
	NSLog(@"-(id) webViewHostRequestsAdIdentifiers:(id)");
}

-(void) webViewHost:(id) didReceiveEvent:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) didReceiveEvent:(id)");
}

-(void) webViewHostDidRequestCustomWebViewContainerClose:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidRequestCustomWebViewContainerClose:(id)");
}

-(id) webViewHostRequestsAdView:(id) {
	%orig;
	NSLog(@"-(id) webViewHostRequestsAdView:(id)");
}

-(void) webViewHostDisableVideoAdsUntilNextStationChange:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDisableVideoAdsUntilNextStationChange:(id)");
}

-(void) webViewHost:(id) requestsCloseButtonVisibility:(bool) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) requestsCloseButtonVisibility:(bool)");
}

-(void) webViewHost:(id) requestsViewportHeight:(double) completion:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) requestsViewportHeight:(double) completion:(id)");
}

-(void) prepForLoadingInInterstitialPage {
	%orig;
	NSLog(@"-(void) prepForLoadingInInterstitialPage");
}

-(void) showHTML:(id) baseURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id) {
	%orig;
	NSLog(@"-(void) showHTML:(id) baseURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id)");
}

-(void) setWebViewHost:(id) {
	%orig;
	NSLog(@"-(void) setWebViewHost:(id)");
}

-(void) setHasLoadingViewBeenShown:(bool) {
	%orig;
	NSLog(@"-(void) setHasLoadingViewBeenShown:(bool)");
}

-(void) setHasRecordedStats:(bool) {
	%orig;
	NSLog(@"-(void) setHasRecordedStats:(bool)");
}

-(void) setHasPersistedLastTimeShown:(bool) {
	%orig;
	NSLog(@"-(void) setHasPersistedLastTimeShown:(bool)");
}

-(void) setInterstitialLastShownTimestamp:(double) {
	%orig;
	NSLog(@"-(void) setInterstitialLastShownTimestamp:(double)");
}

-(void) setIsLandingPage:(bool) {
	%orig;
	NSLog(@"-(void) setIsLandingPage:(bool)");
}

-(id) rewardViewController {
	%orig;
	NSLog(@"-(id) rewardViewController");
}

-(id) forwardButton {
	%orig;
	NSLog(@"-(id) forwardButton");
}

-(void) setupInterstitial {
	%orig;
	NSLog(@"-(void) setupInterstitial");
}

-(bool) hasLoadingViewBeenShown {
	%orig;
	NSLog(@"-(bool) hasLoadingViewBeenShown");
}

-(bool) onInterstitialOpeningPage {
	%orig;
	NSLog(@"-(bool) onInterstitialOpeningPage");
}

-(void) showRewardControllerAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showRewardControllerAnimated:(bool)");
}

-(void) setStandardModalViewController:(id) {
	%orig;
	NSLog(@"-(void) setStandardModalViewController:(id)");
}

-(void) setupDoneButton {
	%orig;
	NSLog(@"-(void) setupDoneButton");
}

-(void) setupLeftNavigationButtons {
	%orig;
	NSLog(@"-(void) setupLeftNavigationButtons");
}

-(void) hideRewardAfterDelay {
	%orig;
	NSLog(@"-(void) hideRewardAfterDelay");
}

-(void) showReward:(id) {
	%orig;
	NSLog(@"-(void) showReward:(id)");
}

-(void) addIdleTimeOutObserver {
	%orig;
	NSLog(@"-(void) addIdleTimeOutObserver");
}

-(void) publishAdAction:(id) {
	%orig;
	NSLog(@"-(void) publishAdAction:(id)");
}

-(void) setForwardButton:(id) {
	%orig;
	NSLog(@"-(void) setForwardButton:(id)");
}

-(void) showWithBackground:(id) transition:(id) sourceView:(id) chrome:(id) {
	%orig;
	NSLog(@"-(void) showWithBackground:(id) transition:(id) sourceView:(id) chrome:(id)");
}

-(void) setAdHtmlString:(id) {
	%orig;
	NSLog(@"-(void) setAdHtmlString:(id)");
}

-(void) publishAdLifecycleEvent:(long long) {
	%orig;
	NSLog(@"-(void) publishAdLifecycleEvent:(long long)");
}

-(id) standardModalViewController {
	%orig;
	NSLog(@"-(id) standardModalViewController");
}

-(void) dismissWithTransitionType:(id) {
	%orig;
	NSLog(@"-(void) dismissWithTransitionType:(id)");
}

-(id) closeDelegate {
	%orig;
	NSLog(@"-(id) closeDelegate");
}

-(void) logInterstitialSkip {
	%orig;
	NSLog(@"-(void) logInterstitialSkip");
}

-(id) replaceLocationMacro:(id) inString:(id) withValue:(id) {
	%orig;
	NSLog(@"-(id) replaceLocationMacro:(id) inString:(id) withValue:(id)");
}

-(void) setErrorViewHidden:(bool) withError:(id) {
	%orig;
	NSLog(@"-(void) setErrorViewHidden:(bool) withError:(id)");
}

-(void) setShouldHideLoadingView:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideLoadingView:(bool)");
}

-(void) showLoadingViewWithDelay {
	%orig;
	NSLog(@"-(void) showLoadingViewWithDelay");
}

-(void) setChromeForInterstitialHidden:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setChromeForInterstitialHidden:(bool) animated:(bool)");
}

-(id) adHtmlString {
	%orig;
	NSLog(@"-(id) adHtmlString");
}

-(bool) hasPublishedRequestEvent {
	%orig;
	NSLog(@"-(bool) hasPublishedRequestEvent");
}

-(void) setInitialAdRequestDate:(id) {
	%orig;
	NSLog(@"-(void) setInitialAdRequestDate:(id)");
}

-(void) setHasPublishedRequestEvent:(bool) {
	%orig;
	NSLog(@"-(void) setHasPublishedRequestEvent:(bool)");
}

-(void) setLoadingViewHidden:(bool) {
	%orig;
	NSLog(@"-(void) setLoadingViewHidden:(bool)");
}

-(bool) hasRecordedStats {
	%orig;
	NSLog(@"-(bool) hasRecordedStats");
}

-(void) logInterstitialTimes {
	%orig;
	NSLog(@"-(void) logInterstitialTimes");
}

-(bool) isLandingPage {
	%orig;
	NSLog(@"-(bool) isLandingPage");
}

-(bool) hasPublishedAdLoadEvent {
	%orig;
	NSLog(@"-(bool) hasPublishedAdLoadEvent");
}

-(void) setHasPublishedAdLoadEvent:(bool) {
	%orig;
	NSLog(@"-(void) setHasPublishedAdLoadEvent:(bool)");
}

-(id) webViewHostDidFinishCompletionBlock {
	%orig;
	NSLog(@"-(id) webViewHostDidFinishCompletionBlock");
}

-(id) webViewHostDidFailCompletionBlock {
	%orig;
	NSLog(@"-(id) webViewHostDidFailCompletionBlock");
}

-(void) setAdIdentifiers:(id) {
	%orig;
	NSLog(@"-(void) setAdIdentifiers:(id)");
}

-(void) setWebViewHostDidFinishCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setWebViewHostDidFinishCompletionBlock:(id)");
}

-(void) setWebViewHostDidFailCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setWebViewHostDidFailCompletionBlock:(id)");
}

-(void) setDeliveryMethod:(id) {
	%orig;
	NSLog(@"-(void) setDeliveryMethod:(id)");
}

-(void) setInteractionCorrelationId:(id) {
	%orig;
	NSLog(@"-(void) setInteractionCorrelationId:(id)");
}

-(void) setIsCompanion:(bool) {
	%orig;
	NSLog(@"-(void) setIsCompanion:(bool)");
}

-(void) setAdCorrelationId:(id) {
	%orig;
	NSLog(@"-(void) setAdCorrelationId:(id)");
}

-(void) showURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id) {
	%orig;
	NSLog(@"-(void) showURL:(id) background:(id) transition:(id) sourceView:(id) chrome:(id)");
}

-(void) setIsInterstitial:(bool) {
	%orig;
	NSLog(@"-(void) setIsInterstitial:(bool)");
}

-(void) setRewardViewController:(id) {
	%orig;
	NSLog(@"-(void) setRewardViewController:(id)");
}

-(void) hideRewardForced:(bool) {
	%orig;
	NSLog(@"-(void) hideRewardForced:(bool)");
}

-(void) hideReward {
	%orig;
	NSLog(@"-(void) hideReward");
}

-(id) skipToPandoraButton {
	%orig;
	NSLog(@"-(id) skipToPandoraButton");
}

-(void) setAutodismissTimer:(id) {
	%orig;
	NSLog(@"-(void) setAutodismissTimer:(id)");
}

-(bool) isCompanion {
	%orig;
	NSLog(@"-(bool) isCompanion");
}

-(id) initialAdRequestDate {
	%orig;
	NSLog(@"-(id) initialAdRequestDate");
}

-(id) deliveryMethod {
	%orig;
	NSLog(@"-(id) deliveryMethod");
}

-(id) interactionCorrelationId {
	%orig;
	NSLog(@"-(id) interactionCorrelationId");
}

-(id) adCorrelationId {
	%orig;
	NSLog(@"-(id) adCorrelationId");
}

-(double) interstitialLastShownTimestamp {
	%orig;
	NSLog(@"-(double) interstitialLastShownTimestamp");
}

-(bool) shouldHideLoadingView {
	%orig;
	NSLog(@"-(bool) shouldHideLoadingView");
}

-(void) didReachIdleTimeOut:(id) {
	%orig;
	NSLog(@"-(void) didReachIdleTimeOut:(id)");
}

-(void) albumCoverTappedInTunerBar:(id) {
	%orig;
	NSLog(@"-(void) albumCoverTappedInTunerBar:(id)");
}

-(void) skipToPandoraButtonTapped {
	%orig;
	NSLog(@"-(void) skipToPandoraButtonTapped");
}

-(void) forwardLocationData:(id) toStringURL:(id) {
	%orig;
	NSLog(@"-(void) forwardLocationData:(id) toStringURL:(id)");
}

-(CGSize) sizeForFullScreenBackgroundImageBehindTunerBar:(id) {
	%orig;
	NSLog(@"-(CGSize) sizeForFullScreenBackgroundImageBehindTunerBar:(id)");
}

-(id) autodismissTimer {
	%orig;
	NSLog(@"-(id) autodismissTimer");
}

-(bool) hasPersistedLastTimeShown {
	%orig;
	NSLog(@"-(bool) hasPersistedLastTimeShown");
}

-(void) setCloseDelegate:(id) {
	%orig;
	NSLog(@"-(void) setCloseDelegate:(id)");
}

-(void) setSkipToPandoraButton:(id) {
	%orig;
	NSLog(@"-(void) setSkipToPandoraButton:(id)");
}

-(id) trackProgressTimer {
	%orig;
	NSLog(@"-(id) trackProgressTimer");
}

-(void) setTrackProgressTimer:(id) {
	%orig;
	NSLog(@"-(void) setTrackProgressTimer:(id)");
}

-(id) tunerBarController {
	%orig;
	NSLog(@"-(id) tunerBarController");
}

-(void) setTunerBarController:(id) {
	%orig;
	NSLog(@"-(void) setTunerBarController:(id)");
}

-(void) logoutDidComplete {
	%orig;
	NSLog(@"-(void) logoutDidComplete");
}

-(id) adIdentifiers {
	%orig;
	NSLog(@"-(id) adIdentifiers");
}

-(bool) isInterstitial {
	%orig;
	NSLog(@"-(bool) isInterstitial");
}

-(void) setBottomView:(id) {
	%orig;
	NSLog(@"-(void) setBottomView:(id)");
}

-(id) webContainerView {
	%orig;
	NSLog(@"-(id) webContainerView");
}

-(void) setWebContainerView:(id) {
	%orig;
	NSLog(@"-(void) setWebContainerView:(id)");
}

-(id) loadingIndicator {
	%orig;
	NSLog(@"-(id) loadingIndicator");
}

-(void) setLoadingView:(id) {
	%orig;
	NSLog(@"-(void) setLoadingView:(id)");
}

-(id) loadingView {
	%orig;
	NSLog(@"-(id) loadingView");
}

-(id) transitionType {
	%orig;
	NSLog(@"-(id) transitionType");
}

-(void) loadURL:(id) {
	%orig;
	NSLog(@"-(void) loadURL:(id)");
}

-(void) setLoadingIndicator:(id) {
	%orig;
	NSLog(@"-(void) setLoadingIndicator:(id)");
}

-(id) errorView {
	%orig;
	NSLog(@"-(id) errorView");
}

-(void) setErrorView:(id) {
	%orig;
	NSLog(@"-(void) setErrorView:(id)");
}

-(void) setTransitionType:(id) {
	%orig;
	NSLog(@"-(void) setTransitionType:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) sourceView {
	%orig;
	NSLog(@"-(id) sourceView");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(id) navigationController {
	%orig;
	NSLog(@"-(id) navigationController");
}

-(void) setSourceView:(id) {
	%orig;
	NSLog(@"-(void) setSourceView:(id)");
}

-(id) bottomView {
	%orig;
	NSLog(@"-(id) bottomView");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) setDoneButton:(id) {
	%orig;
	NSLog(@"-(void) setDoneButton:(id)");
}

-(id) doneButton {
	%orig;
	NSLog(@"-(id) doneButton");
}

-(void) applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillResignActive:(id)");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(void) setNavigationController:(id) {
	%orig;
	NSLog(@"-(void) setNavigationController:(id)");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

-(void) goBack {
	%orig;
	NSLog(@"-(void) goBack");
}

-(void) goForward {
	%orig;
	NSLog(@"-(void) goForward");
}

%end

%hook PMNowPlayingManager

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(id) currentPlayerViewController {
	%orig;
	NSLog(@"-(id) currentPlayerViewController");
}

-(void) onOfflineUpdated:(id) {
	%orig;
	NSLog(@"-(void) onOfflineUpdated:(id)");
}

-(void) displayNonPremiumVC {
	%orig;
	NSLog(@"-(void) displayNonPremiumVC");
}

-(id) radioTarget {
	%orig;
	NSLog(@"-(id) radioTarget");
}

-(bool) shouldDisplayPremium {
	%orig;
	NSLog(@"-(bool) shouldDisplayPremium");
}

-(void) setupNonPremiumViewController {
	%orig;
	NSLog(@"-(void) setupNonPremiumViewController");
}

-(id) nonPremiumViewController {
	%orig;
	NSLog(@"-(id) nonPremiumViewController");
}

-(void) displayNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) displayNowPlaying:(bool)");
}

-(void) displayMiniPlayer:(bool) {
	%orig;
	NSLog(@"-(void) displayMiniPlayer:(bool)");
}

-(id) premiumViewController {
	%orig;
	NSLog(@"-(id) premiumViewController");
}

-(void) collapseWazeNavigationContainerSpace {
	%orig;
	NSLog(@"-(void) collapseWazeNavigationContainerSpace");
}

-(void) displayPremiumVC:(id) {
	%orig;
	NSLog(@"-(void) displayPremiumVC:(id)");
}

-(void) displayPremiumNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) displayPremiumNowPlaying:(bool)");
}

-(void) displayNonPremiumNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) displayNonPremiumNowPlaying:(bool)");
}

-(bool) readyForNowPlayingUpdate {
	%orig;
	NSLog(@"-(bool) readyForNowPlayingUpdate");
}

-(void) dismissPremiumVC:(id) {
	%orig;
	NSLog(@"-(void) dismissPremiumVC:(id)");
}

-(void) showNonPremiumVCAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showNonPremiumVCAnimated:(bool)");
}

-(void) dismissPremiumVCAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissPremiumVCAnimated:(bool) completion:(id)");
}

-(void) prepareCoverImageForPremiumNowPlayingBlurredAlbumArt {
	%orig;
	NSLog(@"-(void) prepareCoverImageForPremiumNowPlayingBlurredAlbumArt");
}

-(id) pendingBlurredAlbumArt {
	%orig;
	NSLog(@"-(id) pendingBlurredAlbumArt");
}

-(void) setPendingBlurredAlbumArt:(id) {
	%orig;
	NSLog(@"-(void) setPendingBlurredAlbumArt:(id)");
}

-(void) setCurrentTrackImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setCurrentTrackImageUrl:(id)");
}

-(id) currentTrackImageUrl {
	%orig;
	NSLog(@"-(id) currentTrackImageUrl");
}

-(void) processPremiumNowPlayingBlurredAlbumArt:(id) {
	%orig;
	NSLog(@"-(void) processPremiumNowPlayingBlurredAlbumArt:(id)");
}

-(void) setModalDisplayConnection:(id) {
	%orig;
	NSLog(@"-(void) setModalDisplayConnection:(id)");
}

-(void) interactiveTransitionWillDisplay:(bool) {
	%orig;
	NSLog(@"-(void) interactiveTransitionWillDisplay:(bool)");
}

-(void) URLWasOpenedWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) URLWasOpenedWithPath:(id) andParameters:(id)");
}

-(void) showMiniPlayer {
	%orig;
	NSLog(@"-(void) showMiniPlayer");
}

-(void) hideMiniPlayer {
	%orig;
	NSLog(@"-(void) hideMiniPlayer");
}

-(void) showNowPlaying {
	%orig;
	NSLog(@"-(void) showNowPlaying");
}

-(void) showNowPlayingQueueWithActionSource:(long long) {
	%orig;
	NSLog(@"-(void) showNowPlayingQueueWithActionSource:(long long)");
}

-(void) hideNowPlaying {
	%orig;
	NSLog(@"-(void) hideNowPlaying");
}

-(void) dismissPremiumVC {
	%orig;
	NSLog(@"-(void) dismissPremiumVC");
}

-(void) downgradeNowPlaying {
	%orig;
	NSLog(@"-(void) downgradeNowPlaying");
}

-(void) radioInNowPlayingMayNeedChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingMayNeedChange");
}

-(void) setReadyForNowPlayingUpdate:(bool) {
	%orig;
	NSLog(@"-(void) setReadyForNowPlayingUpdate:(bool)");
}

-(void) setTransitionManager:(id) {
	%orig;
	NSLog(@"-(void) setTransitionManager:(id)");
}

-(void) setPremiumViewController:(id) {
	%orig;
	NSLog(@"-(void) setPremiumViewController:(id)");
}

-(void) setNonPremiumViewController:(id) {
	%orig;
	NSLog(@"-(void) setNonPremiumViewController:(id)");
}

-(void) setMusicSessionManager:(id) {
	%orig;
	NSLog(@"-(void) setMusicSessionManager:(id)");
}

-(id) modalDisplayConnection {
	%orig;
	NSLog(@"-(id) modalDisplayConnection");
}

-(id) musicSessionManager {
	%orig;
	NSLog(@"-(id) musicSessionManager");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) radioStationWillChangeFrom:(id) to:(id) {
	%orig;
	NSLog(@"-(void) radioStationWillChangeFrom:(id) to:(id)");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioActiveTrackMetadataDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackMetadataDidChange");
}

-(void) radioInNowPlayingWillChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingWillChange");
}

-(void) radioInNowPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingDidChange");
}

-(void) loginDidComplete:(id) {
	%orig;
	NSLog(@"-(void) loginDidComplete:(id)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) persistence {
	%orig;
	NSLog(@"-(id) persistence");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) setViewModel:(id) {
	%orig;
	NSLog(@"-(void) setViewModel:(id)");
}

-(id) transitionManager {
	%orig;
	NSLog(@"-(id) transitionManager");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMWebPageCommand

-(void) startedPrecacheWithAssetCache:(id) lineId:(id) creativeId:(id) {
	%orig;
	NSLog(@"-(void) startedPrecacheWithAssetCache:(id) lineId:(id) creativeId:(id)");
}

-(void) failedPrecacheWithAssetCache:(id) lineId:(id) creativeId:(id) errorMessage:(id) {
	%orig;
	NSLog(@"-(void) failedPrecacheWithAssetCache:(id) lineId:(id) creativeId:(id) errorMessage:(id)");
}

-(void) finishedPrecacheWithAssetCache:(id) lineId:(id) creativeId:(id) {
	%orig;
	NSLog(@"-(void) finishedPrecacheWithAssetCache:(id) lineId:(id) creativeId:(id)");
}

-(id) callbackID {
	%orig;
	NSLog(@"-(id) callbackID");
}

-(id) initWithHost:(id) commandName:(id) parameters:(id) callbackID:(id) javascriptObject:(id) {
	%orig;
	NSLog(@"-(id) initWithHost:(id) commandName:(id) parameters:(id) callbackID:(id) javascriptObject:(id)");
}

-(id) javascriptObject {
	%orig;
	NSLog(@"-(id) javascriptObject");
}

-(id) rewardFromCommand {
	%orig;
	NSLog(@"-(id) rewardFromCommand");
}

-(id) adServerCorrelationID {
	%orig;
	NSLog(@"-(id) adServerCorrelationID");
}

-(id) avAssetURLForWebViewURL:(id) {
	%orig;
	NSLog(@"-(id) avAssetURLForWebViewURL:(id)");
}

-(void) confirmWithMessage:(id) ok:(id) cancel:(id) {
	%orig;
	NSLog(@"-(void) confirmWithMessage:(id) ok:(id) cancel:(id)");
}

-(void) loadStringFromURL:(id) postBody:(id) {
	%orig;
	NSLog(@"-(void) loadStringFromURL:(id) postBody:(id)");
}

-(id) commandWithName:(id) parameters:(id) callbackID:(id) javascriptObject:(id) {
	%orig;
	NSLog(@"-(id) commandWithName:(id) parameters:(id) callbackID:(id) javascriptObject:(id)");
}

-(id) dismissalReason {
	%orig;
	NSLog(@"-(id) dismissalReason");
}

-(void) whyAdsPressed {
	%orig;
	NSLog(@"-(void) whyAdsPressed");
}

-(id) productCode {
	%orig;
	NSLog(@"-(id) productCode");
}

-(id) pageHTML {
	%orig;
	NSLog(@"-(id) pageHTML");
}

-(id) pageBackgroundColor {
	%orig;
	NSLog(@"-(id) pageBackgroundColor");
}

-(id) pageTransitionType {
	%orig;
	NSLog(@"-(id) pageTransitionType");
}

-(id) pageChromeType {
	%orig;
	NSLog(@"-(id) pageChromeType");
}

-(void) logTapToVideoEventWithAction:(id) creativeId:(id) lineId:(id) errorMessage:(id) {
	%orig;
	NSLog(@"-(void) logTapToVideoEventWithAction:(id) creativeId:(id) lineId:(id) errorMessage:(id)");
}

-(void) logTapToVideoEventWithAction:(id) errorMessage:(id) {
	%orig;
	NSLog(@"-(void) logTapToVideoEventWithAction:(id) errorMessage:(id)");
}

-(id) parameterNamed:(id) {
	%orig;
	NSLog(@"-(id) parameterNamed:(id)");
}

-(void) logTapToVideoEventWithAction:(id) {
	%orig;
	NSLog(@"-(void) logTapToVideoEventWithAction:(id)");
}

-(void) hitTapToVideoTrackingUrlNamed:(id) {
	%orig;
	NSLog(@"-(void) hitTapToVideoTrackingUrlNamed:(id)");
}

-(id) fixupJavascriptURLParam:(id) webViewURL:(id) {
	%orig;
	NSLog(@"-(id) fixupJavascriptURLParam:(id) webViewURL:(id)");
}

-(double) rewardThresholdSeconds {
	%orig;
	NSLog(@"-(double) rewardThresholdSeconds");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(id) rewardProperties {
	%orig;
	NSLog(@"-(id) rewardProperties");
}

-(id) sourceId {
	%orig;
	NSLog(@"-(id) sourceId");
}

-(void) setHost:(id) {
	%orig;
	NSLog(@"-(void) setHost:(id)");
}

-(void) cancelConnection {
	%orig;
	NSLog(@"-(void) cancelConnection");
}

-(id) offerName {
	%orig;
	NSLog(@"-(id) offerName");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) name {
	%orig;
	NSLog(@"-(id) name");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) context {
	%orig;
	NSLog(@"-(id) context");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) sourceType {
	%orig;
	NSLog(@"-(id) sourceType");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(id) host {
	%orig;
	NSLog(@"-(id) host");
}

-(id) connection {
	%orig;
	NSLog(@"-(id) connection");
}

-(void) setConnection:(id) {
	%orig;
	NSLog(@"-(void) setConnection:(id)");
}

-(void) setParameters:(id) {
	%orig;
	NSLog(@"-(void) setParameters:(id)");
}

-(id) pageURL {
	%orig;
	NSLog(@"-(id) pageURL");
}

-(id) pageTitle {
	%orig;
	NSLog(@"-(id) pageTitle");
}

%end

%hook PMSeedRecommendationDataSource

-(id) recommendationForSeedResult {
	%orig;
	NSLog(@"-(id) recommendationForSeedResult");
}

-(id) kPMStationListRecommendationForSeedGroupTitle {
	%orig;
	NSLog(@"-(id) kPMStationListRecommendationForSeedGroupTitle");
}

-(id) recommendationForSeedOrderedGroup {
	%orig;
	NSLog(@"-(id) recommendationForSeedOrderedGroup");
}

-(void) setRecommendationForSeedOrderedGroup:(id) {
	%orig;
	NSLog(@"-(void) setRecommendationForSeedOrderedGroup:(id)");
}

-(void) setRecommendationForSeedResult:(id) {
	%orig;
	NSLog(@"-(void) setRecommendationForSeedResult:(id)");
}

-(long long) numberOfSectionsInTableView {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(void) rebuildResults:(id) {
	%orig;
	NSLog(@"-(void) rebuildResults:(id)");
}

-(void) clearResults {
	%orig;
	NSLog(@"-(void) clearResults");
}

-(id) rowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) rowAtIndexPath:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsInSection:(long long)");
}

-(bool) isEmpty {
	%orig;
	NSLog(@"-(bool) isEmpty");
}

%end

%hook PMEnvironmentOption

-(void) setDataType:(long long) {
	%orig;
	NSLog(@"-(void) setDataType:(long long)");
}

-(long long) dataType {
	%orig;
	NSLog(@"-(long long) dataType");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) value {
	%orig;
	NSLog(@"-(id) value");
}

-(void) setValue:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id)");
}

-(id) key {
	%orig;
	NSLog(@"-(id) key");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setKey:(id) {
	%orig;
	NSLog(@"-(void) setKey:(id)");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

%end

%hook PMEnvironmentOptionDataSource

+(id) dataSourceWithDictionary:(id) {
	%orig;
	NSLog(@"+(id) dataSourceWithDictionary:(id)");
}

-(void) buildSectionNames {
	%orig;
	NSLog(@"-(void) buildSectionNames");
}

-(void) setSectionNames:(id) {
	%orig;
	NSLog(@"-(void) setSectionNames:(id)");
}

-(void) makeRules {
	%orig;
	NSLog(@"-(void) makeRules");
}

-(id) buildItems {
	%orig;
	NSLog(@"-(id) buildItems");
}

-(id) sectionNames {
	%orig;
	NSLog(@"-(id) sectionNames");
}

-(long long) dataTypeforObject:(id) andDictionary:(id) {
	%orig;
	NSLog(@"-(long long) dataTypeforObject:(id) andDictionary:(id)");
}

-(id) dataForIndexPath:(id) {
	%orig;
	NSLog(@"-(id) dataForIndexPath:(id)");
}

-(id) updatedData {
	%orig;
	NSLog(@"-(id) updatedData");
}

-(id) sectionNameforSection:(long long) {
	%orig;
	NSLog(@"-(id) sectionNameforSection:(long long)");
}

-(long long) dataTypeForIndexPath:(id) {
	%orig;
	NSLog(@"-(long long) dataTypeForIndexPath:(id)");
}

-(void) setEnvironmentObject:(id) forIndexPath:(id) {
	%orig;
	NSLog(@"-(void) setEnvironmentObject:(id) forIndexPath:(id)");
}

-(void) setEnvironmentObject:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setEnvironmentObject:(id) forKey:(id)");
}

-(id) filteredSearchArrayWithPredicate:(id) scope:(id) {
	%orig;
	NSLog(@"-(id) filteredSearchArrayWithPredicate:(id) scope:(id)");
}

-(id) constructDataForKey:(id) {
	%orig;
	NSLog(@"-(id) constructDataForKey:(id)");
}

-(void) setRules:(id) {
	%orig;
	NSLog(@"-(void) setRules:(id)");
}

-(long long) numberOfRowsForSection:(long long) {
	%orig;
	NSLog(@"-(long long) numberOfRowsForSection:(long long)");
}

-(id) rules {
	%orig;
	NSLog(@"-(id) rules");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) items {
	%orig;
	NSLog(@"-(id) items");
}

-(void) setItems:(id) {
	%orig;
	NSLog(@"-(void) setItems:(id)");
}

-(long long) numberOfSections {
	%orig;
	NSLog(@"-(long long) numberOfSections");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

%end

%hook PMPopoverManager

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) presentPopoverWithContentViewController:(id) withStyle:(long long) fromView:(id) withOverlapping:(bool) directions:(unsigned long long) delegate:(id) {
	%orig;
	NSLog(@"-(void) presentPopoverWithContentViewController:(id) withStyle:(long long) fromView:(id) withOverlapping:(bool) directions:(unsigned long long) delegate:(id)");
}

-(void) presentPopoverWithContentViewController:(id) withStyle:(long long) fromView:(id) withOverlapping:(bool) directions:(unsigned long long) {
	%orig;
	NSLog(@"-(void) presentPopoverWithContentViewController:(id) withStyle:(long long) fromView:(id) withOverlapping:(bool) directions:(unsigned long long)");
}

-(id) popoverAttachmentView {
	%orig;
	NSLog(@"-(id) popoverAttachmentView");
}

-(void) setPopoverAttachmentView:(id) {
	%orig;
	NSLog(@"-(void) setPopoverAttachmentView:(id)");
}

-(bool) shouldOverlap {
	%orig;
	NSLog(@"-(bool) shouldOverlap");
}

-(void) setShouldOverlap:(bool) {
	%orig;
	NSLog(@"-(void) setShouldOverlap:(bool)");
}

-(bool) shouldDismissPopover {
	%orig;
	NSLog(@"-(bool) shouldDismissPopover");
}

-(void) didDismissPopover {
	%orig;
	NSLog(@"-(void) didDismissPopover");
}

-(void) setDefaults {
	%orig;
	NSLog(@"-(void) setDefaults");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) isVisible {
	%orig;
	NSLog(@"-(bool) isVisible");
}

-(void) dismissPopoverAnimated:(bool) {
	%orig;
	NSLog(@"-(void) dismissPopoverAnimated:(bool)");
}

-(unsigned long long) popoverArrowDirection {
	%orig;
	NSLog(@"-(unsigned long long) popoverArrowDirection");
}

-(void) setPopoverArrowDirection:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setPopoverArrowDirection:(unsigned long long)");
}

-(id) popoverViewController {
	%orig;
	NSLog(@"-(id) popoverViewController");
}

-(void) setPopoverViewController:(id) {
	%orig;
	NSLog(@"-(void) setPopoverViewController:(id)");
}

%end

%hook PMModernPopoverManager

-(void) presentPopoverWithContentViewController:(id) withStyle:(long long) fromView:(id) withOverlapping:(bool) directions:(unsigned long long) delegate:(id) {
	%orig;
	NSLog(@"-(void) presentPopoverWithContentViewController:(id) withStyle:(long long) fromView:(id) withOverlapping:(bool) directions:(unsigned long long) delegate:(id)");
}

-(void) setDefaults {
	%orig;
	NSLog(@"-(void) setDefaults");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isVisible {
	%orig;
	NSLog(@"-(bool) isVisible");
}

-(id) presentingViewController {
	%orig;
	NSLog(@"-(id) presentingViewController");
}

-(void) dismissPopoverAnimated:(bool) {
	%orig;
	NSLog(@"-(void) dismissPopoverAnimated:(bool)");
}

-(void) popoverPresentationControllerDidDismissPopover:(id) {
	%orig;
	NSLog(@"-(void) popoverPresentationControllerDidDismissPopover:(id)");
}

-(bool) popoverPresentationControllerShouldDismissPopover:(id) {
	%orig;
	NSLog(@"-(bool) popoverPresentationControllerShouldDismissPopover:(id)");
}

-(void) setPresentingViewController:(id) {
	%orig;
	NSLog(@"-(void) setPresentingViewController:(id)");
}

%end

%hook DFPAdLoader

-(void) loadAdWithStringURL:(id) withUserInfo:(id) {
	%orig;
	NSLog(@"-(void) loadAdWithStringURL:(id) withUserInfo:(id)");
}

-(void) handleTaskCompletionWithData:(id) response:(id) error:(id) userInfo:(id) {
	%orig;
	NSLog(@"-(void) handleTaskCompletionWithData:(id) response:(id) error:(id) userInfo:(id)");
}

-(void) notifyFailure:(id) {
	%orig;
	NSLog(@"-(void) notifyFailure:(id)");
}

-(bool) isXplatformHtml:(id) {
	%orig;
	NSLog(@"-(bool) isXplatformHtml:(id)");
}

-(id) processHTMLAd:(id) {
	%orig;
	NSLog(@"-(id) processHTMLAd:(id)");
}

-(bool) isJSON:(id) {
	%orig;
	NSLog(@"-(bool) isJSON:(id)");
}

-(id) buildJSONAd:(id) withUserInfo:(id) {
	%orig;
	NSLog(@"-(id) buildJSONAd:(id) withUserInfo:(id)");
}

-(id) buildHTMLAd:(id) withDefaultHeight:(double) {
	%orig;
	NSLog(@"-(id) buildHTMLAd:(id) withDefaultHeight:(double)");
}

-(void) notifySuccessWithAd:(id) userInfo:(id) {
	%orig;
	NSLog(@"-(void) notifySuccessWithAd:(id) userInfo:(id)");
}

-(bool) shouldWrapInBorders:(id) {
	%orig;
	NSLog(@"-(bool) shouldWrapInBorders:(id)");
}

-(id) valueForHtmlSpecifier:(id) withHtml:(id) {
	%orig;
	NSLog(@"-(id) valueForHtmlSpecifier:(id) withHtml:(id)");
}

-(void) loadAdWithAdResponse:(id) userInfo:(id) {
	%orig;
	NSLog(@"-(void) loadAdWithAdResponse:(id) userInfo:(id)");
}

-(void) handleTaskError:(id) response:(id) userInfo:(id) {
	%orig;
	NSLog(@"-(void) handleTaskError:(id) response:(id) userInfo:(id)");
}

-(id) callBackQueue {
	%orig;
	NSLog(@"-(id) callBackQueue");
}

-(void) loadAdWithStringURL:(id) {
	%orig;
	NSLog(@"-(void) loadAdWithStringURL:(id)");
}

-(double) defaultAdHeight {
	%orig;
	NSLog(@"-(double) defaultAdHeight");
}

-(void) setDefaultAdHeight:(double) {
	%orig;
	NSLog(@"-(void) setDefaultAdHeight:(double)");
}

-(void) setCallBackQueue:(id) {
	%orig;
	NSLog(@"-(void) setCallBackQueue:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(void) setURL:(id) {
	%orig;
	NSLog(@"-(void) setURL:(id)");
}

%end

%hook PMWebContentControllerPresenterProxy

-(void) presentWebContentControllerWithURLString:(id) title:(id) statsParams:(id) {
	%orig;
	NSLog(@"-(void) presentWebContentControllerWithURLString:(id) title:(id) statsParams:(id)");
}

%end

%hook PMMediaPlayerInfoCenterTrack

+(id) processSongName:(id) isAudioAd:(bool) carPlayConnected:(bool) {
	%orig;
	NSLog(@"+(id) processSongName:(id) isAudioAd:(bool) carPlayConnected:(bool)");
}

+(id) mediaPlayerInfoCenterArtistNameForArtistName:(id) carPlayConnected:(bool) {
	%orig;
	NSLog(@"+(id) mediaPlayerInfoCenterArtistNameForArtistName:(id) carPlayConnected:(bool)");
}

+(id) processSongName:(id) isAudioAd:(bool) {
	%orig;
	NSLog(@"+(id) processSongName:(id) isAudioAd:(bool)");
}

+(id) mediaPlayerInfoCenterArtistNameForArtistName:(id) {
	%orig;
	NSLog(@"+(id) mediaPlayerInfoCenterArtistNameForArtistName:(id)");
}

+(void) trackForSongName:(id) artistTitle:(id) albumName:(id) albumArt:(id) isAudioAd:(bool) isPremiumAd:(bool) playing:(bool) buffering:(bool) duration:(double) elapsedPlayTime:(double) carPlayConnected:(bool) completion:(id) {
	%orig;
	NSLog(@"+(void) trackForSongName:(id) artistTitle:(id) albumName:(id) albumArt:(id) isAudioAd:(bool) isPremiumAd:(bool) playing:(bool) buffering:(bool) duration:(double) elapsedPlayTime:(double) carPlayConnected:(bool) completion:(id)");
}

+(id) trackWithTitle:(id) artist:(id) album:(id) artwork:(id) duration:(double) trackType:(long long) {
	%orig;
	NSLog(@"+(id) trackWithTitle:(id) artist:(id) album:(id) artwork:(id) duration:(double) trackType:(long long)");
}

+(id) trackWithTitle:(id) artist:(id) album:(id) artwork:(id) playbackRate:(double) duration:(double) elapsed:(double) trackType:(long long) {
	%orig;
	NSLog(@"+(id) trackWithTitle:(id) artist:(id) album:(id) artwork:(id) playbackRate:(double) duration:(double) elapsed:(double) trackType:(long long)");
}

+(void) nowPlayingInfoForTrack:(id) playing:(bool) buffering:(bool) carPlayConnected:(bool) completion:(id) {
	%orig;
	NSLog(@"+(void) nowPlayingInfoForTrack:(id) playing:(bool) buffering:(bool) carPlayConnected:(bool) completion:(id)");
}

-(id) initWithTitle:(id) artist:(id) album:(id) artwork:(id) playbackRate:(double) duration:(double) elapsed:(double) trackType:(long long) {
	%orig;
	NSLog(@"-(id) initWithTitle:(id) artist:(id) album:(id) artwork:(id) playbackRate:(double) duration:(double) elapsed:(double) trackType:(long long)");
}

-(double) elapsedPlaybackTime {
	%orig;
	NSLog(@"-(double) elapsedPlaybackTime");
}

-(bool) isCarPlayConnected {
	%orig;
	NSLog(@"-(bool) isCarPlayConnected");
}

-(id) initWithTitle:(id) artist:(id) album:(id) artwork:(id) duration:(double) trackType:(long long) {
	%orig;
	NSLog(@"-(id) initWithTitle:(id) artist:(id) album:(id) artwork:(id) duration:(double) trackType:(long long)");
}

-(id) artwork {
	%orig;
	NSLog(@"-(id) artwork");
}

-(bool) isAdvertisement {
	%orig;
	NSLog(@"-(bool) isAdvertisement");
}

-(id) artist {
	%orig;
	NSLog(@"-(id) artist");
}

-(double) playbackRate {
	%orig;
	NSLog(@"-(double) playbackRate");
}

-(id) nowPlayingInfo {
	%orig;
	NSLog(@"-(id) nowPlayingInfo");
}

-(double) playbackDuration {
	%orig;
	NSLog(@"-(double) playbackDuration");
}

-(id) albumTitle {
	%orig;
	NSLog(@"-(id) albumTitle");
}

-(long long) trackType {
	%orig;
	NSLog(@"-(long long) trackType");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

%end

%hook PMBuildConfigurationWrapper

+(void) runIfPandoraDebugModeIsOn:(id) elseRun:(?) {
	%orig;
	NSLog(@"+(void) runIfPandoraDebugModeIsOn:(id) elseRun:(?)");
}

+(bool) isHockeyAppEnabled {
	%orig;
	NSLog(@"+(bool) isHockeyAppEnabled");
}

%end

%hook PMiTunes

+(void) launchForSongUsingTrack:(id) source:(id) click:(id) {
	%orig;
	NSLog(@"+(void) launchForSongUsingTrack:(id) source:(id) click:(id)");
}

%end

%hook IDView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(void) addWidget:(id) {
	%orig;
	NSLog(@"-(void) addWidget:(id)");
}

-(void) removeWidget:(id) {
	%orig;
	NSLog(@"-(void) removeWidget:(id)");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) setNeedsFlush {
	%orig;
	NSLog(@"-(void) setNeedsFlush");
}

-(void) performLastUserMode {
	%orig;
	NSLog(@"-(void) performLastUserMode");
}

-(void) hmiDidStopForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStopForApplication:(id)");
}

-(long long) hmiState {
	%orig;
	NSLog(@"-(long long) hmiState");
}

-(long long) focusEvent {
	%orig;
	NSLog(@"-(long long) focusEvent");
}

-(void) focusCallback:(id) {
	%orig;
	NSLog(@"-(void) focusCallback:(id)");
}

-(void) visibleCallback:(id) {
	%orig;
	NSLog(@"-(void) visibleCallback:(id)");
}

-(id) widgetsLock {
	%orig;
	NSLog(@"-(id) widgetsLock");
}

-(id) titleModel {
	%orig;
	NSLog(@"-(id) titleModel");
}

-(void) setTitleDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTitleDirty:(bool)");
}

-(long long) titleId {
	%orig;
	NSLog(@"-(long long) titleId");
}

-(void) setTitleIdDirty:(bool) {
	%orig;
	NSLog(@"-(void) setTitleIdDirty:(bool)");
}

-(void) setPerformLumDirty:(bool) {
	%orig;
	NSLog(@"-(void) setPerformLumDirty:(bool)");
}

-(bool) performLumDirty {
	%orig;
	NSLog(@"-(bool) performLumDirty");
}

-(bool) titleDirty {
	%orig;
	NSLog(@"-(bool) titleDirty");
}

-(bool) titleIdDirty {
	%orig;
	NSLog(@"-(bool) titleIdDirty");
}

-(void) setTitleId:(long long) {
	%orig;
	NSLog(@"-(void) setTitleId:(long long)");
}

-(void) setHmiState:(long long) {
	%orig;
	NSLog(@"-(void) setHmiState:(long long)");
}

-(bool) focusedDirty {
	%orig;
	NSLog(@"-(bool) focusedDirty");
}

-(void) setFocusedDirty:(bool) {
	%orig;
	NSLog(@"-(void) setFocusedDirty:(bool)");
}

-(void) setFocused:(bool) {
	%orig;
	NSLog(@"-(void) setFocused:(bool)");
}

-(id) widgets {
	%orig;
	NSLog(@"-(id) widgets");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) isVisible {
	%orig;
	NSLog(@"-(bool) isVisible");
}

-(bool) isFocused {
	%orig;
	NSLog(@"-(bool) isFocused");
}

-(int) priority {
	%orig;
	NSLog(@"-(int) priority");
}

-(void) setVisible:(bool) {
	%orig;
	NSLog(@"-(void) setVisible:(bool)");
}

-(id) application {
	%orig;
	NSLog(@"-(id) application");
}

-(void) setApplication:(id) {
	%orig;
	NSLog(@"-(void) setApplication:(id)");
}

%end

%hook IDRhmiFeatureListSettingsMainView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) moreAppsLabel {
	%orig;
	NSLog(@"-(id) moreAppsLabel");
}

-(void) setMoreAppsLabel:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsLabel:(id)");
}

-(id) notAvailableLabel {
	%orig;
	NSLog(@"-(id) notAvailableLabel");
}

-(void) setNotAvailableLabel:(id) {
	%orig;
	NSLog(@"-(void) setNotAvailableLabel:(id)");
}

-(id) moreAppsList {
	%orig;
	NSLog(@"-(id) moreAppsList");
}

-(void) setMoreAppsList:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsList:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListSettingsInfoView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) appswitchFailedLabel {
	%orig;
	NSLog(@"-(id) appswitchFailedLabel");
}

-(void) setAppswitchFailedLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchFailedLabel:(id)");
}

-(id) confirmAppswitchLabel {
	%orig;
	NSLog(@"-(id) confirmAppswitchLabel");
}

-(void) setConfirmAppswitchLabel:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchLabel:(id)");
}

-(id) appNotInstalledLabel {
	%orig;
	NSLog(@"-(id) appNotInstalledLabel");
}

-(void) setAppNotInstalledLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppNotInstalledLabel:(id)");
}

-(id) confirmAppswitchButton {
	%orig;
	NSLog(@"-(id) confirmAppswitchButton");
}

-(void) setConfirmAppswitchButton:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchButton:(id)");
}

-(id) appswitchConfirmationCheckBox {
	%orig;
	NSLog(@"-(id) appswitchConfirmationCheckBox");
}

-(void) setAppswitchConfirmationCheckBox:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchConfirmationCheckBox:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListRadioMainView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) moreAppsLabel {
	%orig;
	NSLog(@"-(id) moreAppsLabel");
}

-(void) setMoreAppsLabel:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsLabel:(id)");
}

-(id) notAvailableLabel {
	%orig;
	NSLog(@"-(id) notAvailableLabel");
}

-(void) setNotAvailableLabel:(id) {
	%orig;
	NSLog(@"-(void) setNotAvailableLabel:(id)");
}

-(id) moreAppsList {
	%orig;
	NSLog(@"-(id) moreAppsList");
}

-(void) setMoreAppsList:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsList:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListRadioInfoView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) appswitchFailedLabel {
	%orig;
	NSLog(@"-(id) appswitchFailedLabel");
}

-(void) setAppswitchFailedLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchFailedLabel:(id)");
}

-(id) confirmAppswitchLabel {
	%orig;
	NSLog(@"-(id) confirmAppswitchLabel");
}

-(void) setConfirmAppswitchLabel:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchLabel:(id)");
}

-(id) appNotInstalledLabel {
	%orig;
	NSLog(@"-(id) appNotInstalledLabel");
}

-(void) setAppNotInstalledLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppNotInstalledLabel:(id)");
}

-(id) confirmAppswitchButton {
	%orig;
	NSLog(@"-(id) confirmAppswitchButton");
}

-(void) setConfirmAppswitchButton:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchButton:(id)");
}

-(id) appswitchConfirmationCheckBox {
	%orig;
	NSLog(@"-(id) appswitchConfirmationCheckBox");
}

-(void) setAppswitchConfirmationCheckBox:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchConfirmationCheckBox:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListOnlineServicesMainView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) moreAppsLabel {
	%orig;
	NSLog(@"-(id) moreAppsLabel");
}

-(void) setMoreAppsLabel:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsLabel:(id)");
}

-(id) notAvailableLabel {
	%orig;
	NSLog(@"-(id) notAvailableLabel");
}

-(void) setNotAvailableLabel:(id) {
	%orig;
	NSLog(@"-(void) setNotAvailableLabel:(id)");
}

-(id) moreAppsList {
	%orig;
	NSLog(@"-(id) moreAppsList");
}

-(void) setMoreAppsList:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsList:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListOnlineServicesInfoView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) appswitchFailedLabel {
	%orig;
	NSLog(@"-(id) appswitchFailedLabel");
}

-(void) setAppswitchFailedLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchFailedLabel:(id)");
}

-(id) confirmAppswitchLabel {
	%orig;
	NSLog(@"-(id) confirmAppswitchLabel");
}

-(void) setConfirmAppswitchLabel:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchLabel:(id)");
}

-(id) appNotInstalledLabel {
	%orig;
	NSLog(@"-(id) appNotInstalledLabel");
}

-(void) setAppNotInstalledLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppNotInstalledLabel:(id)");
}

-(id) confirmAppswitchButton {
	%orig;
	NSLog(@"-(id) confirmAppswitchButton");
}

-(void) setConfirmAppswitchButton:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchButton:(id)");
}

-(id) appswitchConfirmationCheckBox {
	%orig;
	NSLog(@"-(id) appswitchConfirmationCheckBox");
}

-(void) setAppswitchConfirmationCheckBox:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchConfirmationCheckBox:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListNavigationMainView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) moreAppsLabel {
	%orig;
	NSLog(@"-(id) moreAppsLabel");
}

-(void) setMoreAppsLabel:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsLabel:(id)");
}

-(id) notAvailableLabel {
	%orig;
	NSLog(@"-(id) notAvailableLabel");
}

-(void) setNotAvailableLabel:(id) {
	%orig;
	NSLog(@"-(void) setNotAvailableLabel:(id)");
}

-(id) moreAppsList {
	%orig;
	NSLog(@"-(id) moreAppsList");
}

-(void) setMoreAppsList:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsList:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListNavigationInfoView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) appswitchFailedLabel {
	%orig;
	NSLog(@"-(id) appswitchFailedLabel");
}

-(void) setAppswitchFailedLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchFailedLabel:(id)");
}

-(id) confirmAppswitchLabel {
	%orig;
	NSLog(@"-(id) confirmAppswitchLabel");
}

-(void) setConfirmAppswitchLabel:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchLabel:(id)");
}

-(id) appNotInstalledLabel {
	%orig;
	NSLog(@"-(id) appNotInstalledLabel");
}

-(void) setAppNotInstalledLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppNotInstalledLabel:(id)");
}

-(id) confirmAppswitchButton {
	%orig;
	NSLog(@"-(id) confirmAppswitchButton");
}

-(void) setConfirmAppswitchButton:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchButton:(id)");
}

-(id) appswitchConfirmationCheckBox {
	%orig;
	NSLog(@"-(id) appswitchConfirmationCheckBox");
}

-(void) setAppswitchConfirmationCheckBox:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchConfirmationCheckBox:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListMultimediaMainView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) moreAppsLabel {
	%orig;
	NSLog(@"-(id) moreAppsLabel");
}

-(void) setMoreAppsLabel:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsLabel:(id)");
}

-(id) notAvailableLabel {
	%orig;
	NSLog(@"-(id) notAvailableLabel");
}

-(void) setNotAvailableLabel:(id) {
	%orig;
	NSLog(@"-(void) setNotAvailableLabel:(id)");
}

-(id) moreAppsList {
	%orig;
	NSLog(@"-(id) moreAppsList");
}

-(void) setMoreAppsList:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsList:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListMultimediaInfoView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) appswitchFailedLabel {
	%orig;
	NSLog(@"-(id) appswitchFailedLabel");
}

-(void) setAppswitchFailedLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchFailedLabel:(id)");
}

-(id) confirmAppswitchLabel {
	%orig;
	NSLog(@"-(id) confirmAppswitchLabel");
}

-(void) setConfirmAppswitchLabel:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchLabel:(id)");
}

-(id) appNotInstalledLabel {
	%orig;
	NSLog(@"-(id) appNotInstalledLabel");
}

-(void) setAppNotInstalledLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppNotInstalledLabel:(id)");
}

-(id) confirmAppswitchButton {
	%orig;
	NSLog(@"-(id) confirmAppswitchButton");
}

-(void) setConfirmAppswitchButton:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchButton:(id)");
}

-(id) appswitchConfirmationCheckBox {
	%orig;
	NSLog(@"-(id) appswitchConfirmationCheckBox");
}

-(void) setAppswitchConfirmationCheckBox:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchConfirmationCheckBox:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListMediaRadioMainView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) moreAppsLabel {
	%orig;
	NSLog(@"-(id) moreAppsLabel");
}

-(void) setMoreAppsLabel:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsLabel:(id)");
}

-(id) notAvailableLabel {
	%orig;
	NSLog(@"-(id) notAvailableLabel");
}

-(void) setNotAvailableLabel:(id) {
	%orig;
	NSLog(@"-(void) setNotAvailableLabel:(id)");
}

-(id) moreAppsList {
	%orig;
	NSLog(@"-(id) moreAppsList");
}

-(void) setMoreAppsList:(id) {
	%orig;
	NSLog(@"-(void) setMoreAppsList:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDRhmiFeatureListMediaRadioInfoView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) appswitchFailedLabel {
	%orig;
	NSLog(@"-(id) appswitchFailedLabel");
}

-(void) setAppswitchFailedLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchFailedLabel:(id)");
}

-(id) confirmAppswitchLabel {
	%orig;
	NSLog(@"-(id) confirmAppswitchLabel");
}

-(void) setConfirmAppswitchLabel:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchLabel:(id)");
}

-(id) appNotInstalledLabel {
	%orig;
	NSLog(@"-(id) appNotInstalledLabel");
}

-(void) setAppNotInstalledLabel:(id) {
	%orig;
	NSLog(@"-(void) setAppNotInstalledLabel:(id)");
}

-(id) confirmAppswitchButton {
	%orig;
	NSLog(@"-(id) confirmAppswitchButton");
}

-(void) setConfirmAppswitchButton:(id) {
	%orig;
	NSLog(@"-(void) setConfirmAppswitchButton:(id)");
}

-(id) appswitchConfirmationCheckBox {
	%orig;
	NSLog(@"-(id) appswitchConfirmationCheckBox");
}

-(void) setAppswitchConfirmationCheckBox:(id) {
	%orig;
	NSLog(@"-(void) setAppswitchConfirmationCheckBox:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDPopupView

-(void) setShowPopup:(long long) {
	%orig;
	NSLog(@"-(void) setShowPopup:(long long)");
}

-(void) setShowPopupDirty:(long long) {
	%orig;
	NSLog(@"-(void) setShowPopupDirty:(long long)");
}

-(long long) showPopupDirty {
	%orig;
	NSLog(@"-(long long) showPopupDirty");
}

-(long long) popupEvent {
	%orig;
	NSLog(@"-(long long) popupEvent");
}

-(long long) showPopup {
	%orig;
	NSLog(@"-(long long) showPopup");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) popupEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) popupEvent:(long long)");
}

-(void) setPopupEvent:(long long) {
	%orig;
	NSLog(@"-(void) setPopupEvent:(long long)");
}

-(void) flush:(int) {
	%orig;
	NSLog(@"-(void) flush:(int)");
}

-(void) show {
	%orig;
	NSLog(@"-(void) show");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

%end

%hook IDRhmiConnectedAppsView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) popupEvent:(long long) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) popupEvent:(long long)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) popupEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) popupEvent:(long long) hmiProvider:(id)");
}

-(id) disconnectAppLabel {
	%orig;
	NSLog(@"-(id) disconnectAppLabel");
}

-(void) setDisconnectAppLabel:(id) {
	%orig;
	NSLog(@"-(void) setDisconnectAppLabel:(id)");
}

-(void) setConnectedAppsList:(id) {
	%orig;
	NSLog(@"-(void) setConnectedAppsList:(id)");
}

-(id) connectedAppsList {
	%orig;
	NSLog(@"-(id) connectedAppsList");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMPlaybackView

-(id) songTitleLabel {
	%orig;
	NSLog(@"-(id) songTitleLabel");
}

-(void) setSongTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSongTitleLabel:(id)");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) thumbsUpButton {
	%orig;
	NSLog(@"-(id) thumbsUpButton");
}

-(id) thumbsDownButton {
	%orig;
	NSLog(@"-(id) thumbsDownButton");
}

-(void) setThumbsUpButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbsUpButton:(id)");
}

-(void) setThumbsDownButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbsDownButton:(id)");
}

-(id) bookmarkButton {
	%orig;
	NSLog(@"-(id) bookmarkButton");
}

-(id) stationsButton {
	%orig;
	NSLog(@"-(id) stationsButton");
}

-(id) pandoraBackgroundImage {
	%orig;
	NSLog(@"-(id) pandoraBackgroundImage");
}

-(id) albumArtworkReflection {
	%orig;
	NSLog(@"-(id) albumArtworkReflection");
}

-(id) albumArtworkBackground {
	%orig;
	NSLog(@"-(id) albumArtworkBackground");
}

-(id) artistLabel {
	%orig;
	NSLog(@"-(id) artistLabel");
}

-(id) albumArtworkShadow {
	%orig;
	NSLog(@"-(id) albumArtworkShadow");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) setArtistLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistLabel:(id)");
}

-(void) setBookmarkButton:(id) {
	%orig;
	NSLog(@"-(void) setBookmarkButton:(id)");
}

-(void) setPandoraBackgroundImage:(id) {
	%orig;
	NSLog(@"-(void) setPandoraBackgroundImage:(id)");
}

-(id) pandoraLogo {
	%orig;
	NSLog(@"-(id) pandoraLogo");
}

-(void) setPandoraLogo:(id) {
	%orig;
	NSLog(@"-(void) setPandoraLogo:(id)");
}

-(void) setAlbumArtworkShadow:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtworkShadow:(id)");
}

-(void) setAlbumArtworkBackground:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtworkBackground:(id)");
}

-(void) setAlbumArtworkReflection:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtworkReflection:(id)");
}

-(id) versionLabel {
	%orig;
	NSLog(@"-(id) versionLabel");
}

-(void) setVersionLabel:(id) {
	%orig;
	NSLog(@"-(void) setVersionLabel:(id)");
}

-(void) setStationsButton:(id) {
	%orig;
	NSLog(@"-(void) setStationsButton:(id)");
}

-(id) messageLabel {
	%orig;
	NSLog(@"-(id) messageLabel");
}

-(void) setMessageLabel:(id) {
	%orig;
	NSLog(@"-(void) setMessageLabel:(id)");
}

-(id) loadingLabel {
	%orig;
	NSLog(@"-(id) loadingLabel");
}

-(void) setLoadingLabel:(id) {
	%orig;
	NSLog(@"-(void) setLoadingLabel:(id)");
}

-(id) skipButton {
	%orig;
	NSLog(@"-(id) skipButton");
}

-(void) setSkipButton:(id) {
	%orig;
	NSLog(@"-(void) setSkipButton:(id)");
}

-(void) setAlbumArtwork:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtwork:(id)");
}

-(id) albumArtwork {
	%orig;
	NSLog(@"-(id) albumArtwork");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMStationsView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) stationsTable {
	%orig;
	NSLog(@"-(id) stationsTable");
}

-(id) createStationButton {
	%orig;
	NSLog(@"-(id) createStationButton");
}

-(void) setCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationButton:(id)");
}

-(void) setStationsTable:(id) {
	%orig;
	NSLog(@"-(void) setStationsTable:(id)");
}

-(id) pandoraTitleLabel {
	%orig;
	NSLog(@"-(id) pandoraTitleLabel");
}

-(void) setPandoraTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setPandoraTitleLabel:(id)");
}

-(void) setSortButton:(id) {
	%orig;
	NSLog(@"-(void) setSortButton:(id)");
}

-(id) sortButton {
	%orig;
	NSLog(@"-(id) sortButton");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMSubGenresView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) subGenresTable {
	%orig;
	NSLog(@"-(id) subGenresTable");
}

-(void) setSubGenresTable:(id) {
	%orig;
	NSLog(@"-(void) setSubGenresTable:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMSeedSearchView

-(id) searchSpeller {
	%orig;
	NSLog(@"-(id) searchSpeller");
}

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(void) setSearchSpeller:(id) {
	%orig;
	NSLog(@"-(void) setSearchSpeller:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMGenresView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) genresTable {
	%orig;
	NSLog(@"-(id) genresTable");
}

-(void) setGenresTable:(id) {
	%orig;
	NSLog(@"-(void) setGenresTable:(id)");
}

-(id) loadingLabel {
	%orig;
	NSLog(@"-(id) loadingLabel");
}

-(void) setLoadingLabel:(id) {
	%orig;
	NSLog(@"-(void) setLoadingLabel:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMNewStationView

-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithHmiState:(long long) titleModel:(id) focusEvent:(long long) hmiProvider:(id)");
}

-(id) bySongButton {
	%orig;
	NSLog(@"-(id) bySongButton");
}

-(void) setBySongButton:(id) {
	%orig;
	NSLog(@"-(void) setBySongButton:(id)");
}

-(id) byGenreButton {
	%orig;
	NSLog(@"-(id) byGenreButton");
}

-(void) setByGenreButton:(id) {
	%orig;
	NSLog(@"-(void) setByGenreButton:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMWebViewHost

-(void) setupKVOController {
	%orig;
	NSLog(@"-(void) setupKVOController");
}

-(id) kvoController {
	%orig;
	NSLog(@"-(id) kvoController");
}

-(void) setKvoController:(id) {
	%orig;
	NSLog(@"-(void) setKvoController:(id)");
}

-(void) injectUserScripts {
	%orig;
	NSLog(@"-(void) injectUserScripts");
}

-(bool) isWebURL:(id) {
	%orig;
	NSLog(@"-(bool) isWebURL:(id)");
}

-(id) customScheme {
	%orig;
	NSLog(@"-(id) customScheme");
}

-(id) customScheme_Legacy {
	%orig;
	NSLog(@"-(id) customScheme_Legacy");
}

-(void) logIfDeprecatedJavascriptMethod:(id) {
	%orig;
	NSLog(@"-(void) logIfDeprecatedJavascriptMethod:(id)");
}

-(void) invokeJavascriptCallback:(id) withJSON:(id) {
	%orig;
	NSLog(@"-(void) invokeJavascriptCallback:(id) withJSON:(id)");
}

-(id) executingCommands {
	%orig;
	NSLog(@"-(id) executingCommands");
}

-(void) returnCommand:(id) withValue:(id) {
	%orig;
	NSLog(@"-(void) returnCommand:(id) withValue:(id)");
}

-(SEL) selectorForCommandName:(id) {
	%orig;
	NSLog(@"-(SEL) selectorForCommandName:(id)");
}

-(void) returnCommand:(id) {
	%orig;
	NSLog(@"-(void) returnCommand:(id)");
}

-(void) executeCommand:(id) {
	%orig;
	NSLog(@"-(void) executeCommand:(id)");
}

-(id) nameOfJavascriptObject {
	%orig;
	NSLog(@"-(id) nameOfJavascriptObject");
}

-(void) webViewContainsJavascriptObject:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) webViewContainsJavascriptObject:(id) completion:(id)");
}

-(id) nameOfLegacyJavascriptObject {
	%orig;
	NSLog(@"-(id) nameOfLegacyJavascriptObject");
}

-(bool) isCompatibleJSBridgeScheme:(id) {
	%orig;
	NSLog(@"-(bool) isCompatibleJSBridgeScheme:(id)");
}

-(id) commandNameFromURL:(id) {
	%orig;
	NSLog(@"-(id) commandNameFromURL:(id)");
}

-(bool) javascriptCommandCanBeExecuted:(id) {
	%orig;
	NSLog(@"-(bool) javascriptCommandCanBeExecuted:(id)");
}

-(id) callbackIDFromURL:(id) {
	%orig;
	NSLog(@"-(id) callbackIDFromURL:(id)");
}

-(id) javascriptObjectForScheme:(id) {
	%orig;
	NSLog(@"-(id) javascriptObjectForScheme:(id)");
}

-(void) setIsWKUserScriptInjectionVerified:(bool) {
	%orig;
	NSLog(@"-(void) setIsWKUserScriptInjectionVerified:(bool)");
}

-(void) setupJavascriptBridge {
	%orig;
	NSLog(@"-(void) setupJavascriptBridge");
}

-(bool) isWKUserScriptInjectionVerified {
	%orig;
	NSLog(@"-(bool) isWKUserScriptInjectionVerified");
}

-(void) handleScriptInjectionFailedWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) handleScriptInjectionFailedWithCompletionHandler:(id)");
}

-(void) connectTrackEvents {
	%orig;
	NSLog(@"-(void) connectTrackEvents");
}

-(void) bridgeHasLoaded:(id) {
	%orig;
	NSLog(@"-(void) bridgeHasLoaded:(id)");
}

-(void) handleScriptMessageBody:(id) {
	%orig;
	NSLog(@"-(void) handleScriptMessageBody:(id)");
}

-(void) handlePandoraJS:(id) {
	%orig;
	NSLog(@"-(void) handlePandoraJS:(id)");
}

-(id) scriptForPandoraAPI {
	%orig;
	NSLog(@"-(id) scriptForPandoraAPI");
}

-(id) scriptForExecutingAtDocumentEnd {
	%orig;
	NSLog(@"-(id) scriptForExecutingAtDocumentEnd");
}

-(id) scriptForSettingViewPort {
	%orig;
	NSLog(@"-(id) scriptForSettingViewPort");
}

-(id) scriptForVerifyingWKUserScriptInjection {
	%orig;
	NSLog(@"-(id) scriptForVerifyingWKUserScriptInjection");
}

-(id) specialCases {
	%orig;
	NSLog(@"-(id) specialCases");
}

-(id) userScriptsInjectedAtDocumentEnd {
	%orig;
	NSLog(@"-(id) userScriptsInjectedAtDocumentEnd");
}

-(id) scriptForPandoraLegacyJs {
	%orig;
	NSLog(@"-(id) scriptForPandoraLegacyJs");
}

-(id) userScriptsDependableOnPandoraLegacyJs {
	%orig;
	NSLog(@"-(id) userScriptsDependableOnPandoraLegacyJs");
}

-(id) scriptForPandoraJs {
	%orig;
	NSLog(@"-(id) scriptForPandoraJs");
}

-(id) userScriptsDependableOnPandoraJs {
	%orig;
	NSLog(@"-(id) userScriptsDependableOnPandoraJs");
}

-(id) scriptForOnPandoraReadyJs {
	%orig;
	NSLog(@"-(id) scriptForOnPandoraReadyJs");
}

-(void) callMobileComplete {
	%orig;
	NSLog(@"-(void) callMobileComplete");
}

-(id) methodNames {
	%orig;
	NSLog(@"-(id) methodNames");
}

-(id) deprecatedJSAPIMethods {
	%orig;
	NSLog(@"-(id) deprecatedJSAPIMethods");
}

-(id) methodNamesForClass:(Class) intoArray:(id) {
	%orig;
	NSLog(@"-(id) methodNamesForClass:(Class) intoArray:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) startValueExchangeRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) startValueExchangeRequest:(id) finishedWithResult:(id)");
}

-(void) startValueExchangeRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) startValueExchangeRequest:(id) failedWithErrorCode:(long long)");
}

-(void) dismissLandingPage {
	%orig;
	NSLog(@"-(void) dismissLandingPage");
}

-(void) executeWebPageCommand_dismiss:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_dismiss:(id)");
}

-(id) webViewHostHelper {
	%orig;
	NSLog(@"-(id) webViewHostHelper");
}

-(bool) startRewardWithCommand:(id) engagementCompleted:(bool) {
	%orig;
	NSLog(@"-(bool) startRewardWithCommand:(id) engagementCompleted:(bool)");
}

-(void) hitMultipleUrls:(id) {
	%orig;
	NSLog(@"-(void) hitMultipleUrls:(id)");
}

-(void) setPendingOfferUpgradeCommand:(id) {
	%orig;
	NSLog(@"-(void) setPendingOfferUpgradeCommand:(id)");
}

-(void) productUpgradeFinished {
	%orig;
	NSLog(@"-(void) productUpgradeFinished");
}

-(void) productUpgradeFailed {
	%orig;
	NSLog(@"-(void) productUpgradeFailed");
}

-(void) showShareControllerForTrack:(id) station:(id) requester:(id) {
	%orig;
	NSLog(@"-(void) showShareControllerForTrack:(id) station:(id) requester:(id)");
}

-(void) setShareController:(id) {
	%orig;
	NSLog(@"-(void) setShareController:(id)");
}

-(id) shareController {
	%orig;
	NSLog(@"-(id) shareController");
}

-(id) launchAddSeedForStation:(id) withCommand:(id) {
	%orig;
	NSLog(@"-(id) launchAddSeedForStation:(id) withCommand:(id)");
}

-(void) pushCurrentTrack {
	%orig;
	NSLog(@"-(void) pushCurrentTrack");
}

-(void) notifySongEvent:(id) {
	%orig;
	NSLog(@"-(void) notifySongEvent:(id)");
}

-(id) pendingOfferUpgradeCommand {
	%orig;
	NSLog(@"-(id) pendingOfferUpgradeCommand");
}

-(void) webPageCommand:(id) isConfirmed:(bool) {
	%orig;
	NSLog(@"-(void) webPageCommand:(id) isConfirmed:(bool)");
}

-(void) webPageCommand:(id) loadedString:(id) {
	%orig;
	NSLog(@"-(void) webPageCommand:(id) loadedString:(id)");
}

-(id) webPageCommandRequestsAdIdentifiers:(id) {
	%orig;
	NSLog(@"-(id) webPageCommandRequestsAdIdentifiers:(id)");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(void) authorizeWillStart:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeWillStart:(long long) context:(id)");
}

-(void) authorizeDidEnd:(long long) success:(bool) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeDidEnd:(long long) success:(bool) context:(id)");
}

-(void) executeCommand:(id) withValue:(id) {
	%orig;
	NSLog(@"-(void) executeCommand:(id) withValue:(id)");
}

-(void) returnCommandWithNoCallback:(id) {
	%orig;
	NSLog(@"-(void) returnCommandWithNoCallback:(id)");
}

-(void) returnCommandWithNull:(id) {
	%orig;
	NSLog(@"-(void) returnCommandWithNull:(id)");
}

-(void) executeCommand:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) executeCommand:(id) parameters:(id)");
}

-(void) executeMethodOnJavascriptBridge:(id) withCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) executeMethodOnJavascriptBridge:(id) withCompletionHandler:(id)");
}

-(id) availableWebCommandsPerClass {
	%orig;
	NSLog(@"-(id) availableWebCommandsPerClass");
}

-(id) rewardPropertiesFromCommand:(id) {
	%orig;
	NSLog(@"-(id) rewardPropertiesFromCommand:(id)");
}

-(void) executeWebPageCommand_didFinishRendering:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_didFinishRendering:(id)");
}

-(void) executeWebPageCommand_echo:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_echo:(id)");
}

-(void) executeWebPageCommand_telephone:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_telephone:(id)");
}

-(void) executeWebPageCommand_delayAdRefresh:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_delayAdRefresh:(id)");
}

-(void) executeWebPageCommand_preloadMovie:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_preloadMovie:(id)");
}

-(void) executeWebPageCommand_sendEmail:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_sendEmail:(id)");
}

-(void) webPageCommand_sendEmailConfirmed:(id) {
	%orig;
	NSLog(@"-(void) webPageCommand_sendEmailConfirmed:(id)");
}

-(void) executeWebPageCommand_fetchURL:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_fetchURL:(id)");
}

-(void) executeWebPageCommand_eval:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_eval:(id)");
}

-(void) executeWebPageCommand_createStationFromStationId:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_createStationFromStationId:(id)");
}

-(void) executeWebPageCommand_openSafari:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_openSafari:(id)");
}

-(void) executeWebPageCommand_openExternalPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_openExternalPage:(id)");
}

-(void) executeWebPageCommand_startValueExchange:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_startValueExchange:(id)");
}

-(void) executeWebPageCommand_canOpenURL:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_canOpenURL:(id)");
}

-(void) executeWebPageCommand_offerUpgrade:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_offerUpgrade:(id)");
}

-(void) executeWebPageCommand_restoreSubscription:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_restoreSubscription:(id)");
}

-(void) executeWebPageCommand_alert:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_alert:(id)");
}

-(void) executeWebPageCommand_goToScreen:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_goToScreen:(id)");
}

-(void) executeWebPageCommand_getP1SubscriberState:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_getP1SubscriberState:(id)");
}

-(void) executeWebPageCommand_closeCustomWebViewContainer:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_closeCustomWebViewContainer:(id)");
}

-(void) executeWebPageCommand_launchAddSeed:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_launchAddSeed:(id)");
}

-(void) executeWebPageCommand_confirm:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_confirm:(id)");
}

-(void) executeWebPageCommand_launchStationPersonalization:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_launchStationPersonalization:(id)");
}

-(void) executeWebPageCommand_share:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_share:(id)");
}

-(void) executeWebPageCommand_cancelInProductGiftPremiumAccess:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_cancelInProductGiftPremiumAccess:(id)");
}

-(id) getExecutingCommands {
	%orig;
	NSLog(@"-(id) getExecutingCommands");
}

-(void) setCustomScheme:(id) {
	%orig;
	NSLog(@"-(void) setCustomScheme:(id)");
}

-(void) setCustomScheme_Legacy:(id) {
	%orig;
	NSLog(@"-(void) setCustomScheme_Legacy:(id)");
}

-(void) setWebViewHostHelper:(id) {
	%orig;
	NSLog(@"-(void) setWebViewHostHelper:(id)");
}

-(void) setMethodNames:(id) {
	%orig;
	NSLog(@"-(void) setMethodNames:(id)");
}

-(id) addVarietyContext {
	%orig;
	NSLog(@"-(id) addVarietyContext");
}

-(void) setAddVarietyContext:(id) {
	%orig;
	NSLog(@"-(void) setAddVarietyContext:(id)");
}

-(void) setDeprecatedJSAPIMethods:(id) {
	%orig;
	NSLog(@"-(void) setDeprecatedJSAPIMethods:(id)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(id) adIdentifiers {
	%orig;
	NSLog(@"-(id) adIdentifiers");
}

-(id) getStationForStationId:(id) {
	%orig;
	NSLog(@"-(id) getStationForStationId:(id)");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) supportedCommands {
	%orig;
	NSLog(@"-(id) supportedCommands");
}

-(id) userScripts {
	%orig;
	NSLog(@"-(id) userScripts");
}

-(id) initWithWebView:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithWebView:(id) delegate:(id)");
}

-(unsigned long long) loadURL:(id) {
	%orig;
	NSLog(@"-(unsigned long long) loadURL:(id)");
}

-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id)");
}

-(void) webView:(id) didStartProvisionalNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didStartProvisionalNavigation:(id)");
}

-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id)");
}

-(void) webView:(id) didFinishNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFinishNavigation:(id)");
}

-(void) webView:(id) didFailNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailNavigation:(id) withError:(id)");
}

-(id) webView:(id) createWebViewWithConfiguration:(id) forNavigationAction:(id) windowFeatures:(id) {
	%orig;
	NSLog(@"-(id) webView:(id) createWebViewWithConfiguration:(id) forNavigationAction:(id) windowFeatures:(id)");
}

-(void) userContentController:(id) didReceiveScriptMessage:(id) {
	%orig;
	NSLog(@"-(void) userContentController:(id) didReceiveScriptMessage:(id)");
}

-(void) setVisibleViewController:(id) {
	%orig;
	NSLog(@"-(void) setVisibleViewController:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) userInfo {
	%orig;
	NSLog(@"-(id) userInfo");
}

-(void) setUserInfo:(id) {
	%orig;
	NSLog(@"-(void) setUserInfo:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) visibleViewController {
	%orig;
	NSLog(@"-(id) visibleViewController");
}

-(void) loadHTMLString:(id) baseURL:(id) {
	%orig;
	NSLog(@"-(void) loadHTMLString:(id) baseURL:(id)");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) openURL:(id) {
	%orig;
	NSLog(@"-(void) openURL:(id)");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

%end

%hook PMInterceptorWebViewHost

-(id) nameOfJavascriptObject {
	%orig;
	NSLog(@"-(id) nameOfJavascriptObject");
}

-(id) interceptorDelegate {
	%orig;
	NSLog(@"-(id) interceptorDelegate");
}

-(void) executeWebPageCommand_sendDataToApp:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_sendDataToApp:(id)");
}

-(void) executeWebPageCommand_sendDataToAcc:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_sendDataToAcc:(id)");
}

-(void) executeWebPageCommand_requestInfo:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_requestInfo:(id)");
}

-(id) initWithWebView:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithWebView:(id) delegate:(id)");
}

%end

%hook PMAdWebViewHost

+(bool) useSecureBaseUrl {
	%orig;
	NSLog(@"+(bool) useSecureBaseUrl");
}

+(id) baseUrl {
	%orig;
	NSLog(@"+(id) baseUrl");
}

-(void) audioSamplePlayer:(id) sampleHasStarted:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayer:(id) sampleHasStarted:(id)");
}

-(void) audioSamplePlayerAudioWasCompleted:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasCompleted:(id)");
}

-(void) audioSamplePlayerAudioWasStopped:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasStopped:(id)");
}

-(void) audioSamplePlayerAudioWasPaused:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasPaused:(id)");
}

-(void) audioSamplePlayerAudioWasResumed:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasResumed:(id)");
}

-(void) audioSamplePlayerTrack:(id) stoppedWithProgress:(float) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerTrack:(id) stoppedWithProgress:(float)");
}

-(void) audioSamplePlayerAudio:(id) willPlayNextSample:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudio:(id) willPlayNextSample:(id)");
}

-(id) nameOfLegacyJavascriptObject {
	%orig;
	NSLog(@"-(id) nameOfLegacyJavascriptObject");
}

-(void) handleScriptMessageBody:(id) {
	%orig;
	NSLog(@"-(void) handleScriptMessageBody:(id)");
}

-(id) userScriptsDependableOnPandoraLegacyJs {
	%orig;
	NSLog(@"-(id) userScriptsDependableOnPandoraLegacyJs");
}

-(id) userScriptsDependableOnPandoraJs {
	%orig;
	NSLog(@"-(id) userScriptsDependableOnPandoraJs");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) webPageCommandWillDismissVideoController:(id) awardReward:(bool) {
	%orig;
	NSLog(@"-(void) webPageCommandWillDismissVideoController:(id) awardReward:(bool)");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(void) executeWebPageCommand_openExternalPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_openExternalPage:(id)");
}

-(void) executeWebPageCommand_offerUpgrade:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_offerUpgrade:(id)");
}

-(void) executeWebPageCommand_closeCustomWebViewContainer:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_closeCustomWebViewContainer:(id)");
}

-(void) setAccessibilityObserver:(id) {
	%orig;
	NSLog(@"-(void) setAccessibilityObserver:(id)");
}

-(void) setNullUrlCache:(id) {
	%orig;
	NSLog(@"-(void) setNullUrlCache:(id)");
}

-(id) accessibilityObserver {
	%orig;
	NSLog(@"-(id) accessibilityObserver");
}

-(id) adDelegate {
	%orig;
	NSLog(@"-(id) adDelegate");
}

-(void) setSamplePlayer:(id) {
	%orig;
	NSLog(@"-(void) setSamplePlayer:(id)");
}

-(id) samplePlayer {
	%orig;
	NSLog(@"-(id) samplePlayer");
}

-(id) scriptForAddingMouseDownListener {
	%orig;
	NSLog(@"-(id) scriptForAddingMouseDownListener");
}

-(id) adLegacyBridging {
	%orig;
	NSLog(@"-(id) adLegacyBridging");
}

-(void) setOldUrlCache:(id) {
	%orig;
	NSLog(@"-(void) setOldUrlCache:(id)");
}

-(id) nullUrlCache {
	%orig;
	NSLog(@"-(id) nullUrlCache");
}

-(id) oldUrlCache {
	%orig;
	NSLog(@"-(id) oldUrlCache");
}

-(void) parseAudioSamplePlayerCommand:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) parseAudioSamplePlayerCommand:(id) completion:(id)");
}

-(void) setTrackProgress:(double) {
	%orig;
	NSLog(@"-(void) setTrackProgress:(double)");
}

-(void) initializeSamplePlayer:(id) command:(id) {
	%orig;
	NSLog(@"-(void) initializeSamplePlayer:(id) command:(id)");
}

-(void) forceAdRefreshWithInteraction:(id) {
	%orig;
	NSLog(@"-(void) forceAdRefreshWithInteraction:(id)");
}

-(void) requestAdRefreshWithInteraction:(id) {
	%orig;
	NSLog(@"-(void) requestAdRefreshWithInteraction:(id)");
}

-(void) removeBookmarkWithSongIdentity:(id) {
	%orig;
	NSLog(@"-(void) removeBookmarkWithSongIdentity:(id)");
}

-(bool) loadMediaLandingPageForCommand:(id) {
	%orig;
	NSLog(@"-(bool) loadMediaLandingPageForCommand:(id)");
}

-(bool) loadInterstitialLandingPageForCommand:(id) {
	%orig;
	NSLog(@"-(bool) loadInterstitialLandingPageForCommand:(id)");
}

-(bool) loadPremiumNPLandingPageForCommand:(id) {
	%orig;
	NSLog(@"-(bool) loadPremiumNPLandingPageForCommand:(id)");
}

-(void) loadAdLandingPageForCommand:(id) {
	%orig;
	NSLog(@"-(void) loadAdLandingPageForCommand:(id)");
}

-(void) openLandingPage:(id) {
	%orig;
	NSLog(@"-(void) openLandingPage:(id)");
}

-(void) buildCalendarItem:(id) {
	%orig;
	NSLog(@"-(void) buildCalendarItem:(id)");
}

-(bool) shouldRequestEntityAccess {
	%orig;
	NSLog(@"-(bool) shouldRequestEntityAccess");
}

-(id) adCreativeView {
	%orig;
	NSLog(@"-(id) adCreativeView");
}

-(id) shouldNavigateFromCreateStationCommand:(id) {
	%orig;
	NSLog(@"-(id) shouldNavigateFromCreateStationCommand:(id)");
}

-(void) stopHTML5Player {
	%orig;
	NSLog(@"-(void) stopHTML5Player");
}

-(void) addSLAPAdfromJSONResponseString:(id) {
	%orig;
	NSLog(@"-(void) addSLAPAdfromJSONResponseString:(id)");
}

-(void) setLoadURLSuppressPMLandingPageDFPController:(id) {
	%orig;
	NSLog(@"-(void) setLoadURLSuppressPMLandingPageDFPController:(id)");
}

-(bool) forceLegacyLandingPage {
	%orig;
	NSLog(@"-(bool) forceLegacyLandingPage");
}

-(bool) loadVAEAdLandingPageForCommand:(id) {
	%orig;
	NSLog(@"-(bool) loadVAEAdLandingPageForCommand:(id)");
}

-(void) handleScriptInjectionFailed {
	%orig;
	NSLog(@"-(void) handleScriptInjectionFailed");
}

-(void) executeWebPageCommand_playSample:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_playSample:(id)");
}

-(void) executeWebPageCommand_stopSample:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_stopSample:(id)");
}

-(void) executeWebPageCommand_pauseSample:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_pauseSample:(id)");
}

-(void) executeWebPageCommand_resumeSample:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_resumeSample:(id)");
}

-(void) executeWebPageCommand_refreshAd:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_refreshAd:(id)");
}

-(void) executeWebPageCommand_pingImpressionUrls:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_pingImpressionUrls:(id)");
}

-(void) executeWebPageCommand_recordAdClick:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_recordAdClick:(id)");
}

-(void) executeWebPageCommand_disableVideoAdsUntilNextStationChange:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_disableVideoAdsUntilNextStationChange:(id)");
}

-(void) executeWebPageCommand_openLandingPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_openLandingPage:(id)");
}

-(void) executeWebPageCommand_startRicherActivity:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_startRicherActivity:(id)");
}

-(void) executeWebPageCommand_closeLandingPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_closeLandingPage:(id)");
}

-(void) executeWebPageCommand_whyAdsPressed:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_whyAdsPressed:(id)");
}

-(void) executeWebPageCommand_addCalendarItem:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_addCalendarItem:(id)");
}

-(void) webPageCommand_addCalendarItemConfirmed:(id) {
	%orig;
	NSLog(@"-(void) webPageCommand_addCalendarItemConfirmed:(id)");
}

-(void) executeWebPageCommand_getPersonalInfo:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_getPersonalInfo:(id)");
}

-(void) webPageCommand_getPersonalInfoConfirmed:(id) {
	%orig;
	NSLog(@"-(void) webPageCommand_getPersonalInfoConfirmed:(id)");
}

-(void) executeWebPageCommand_setCloseButtonVisibility:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_setCloseButtonVisibility:(id)");
}

-(void) executeWebPageCommand_setViewportHeight:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_setViewportHeight:(id)");
}

-(void) executeWebPageCommand_createStation:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_createStation:(id)");
}

-(void) executeWebPageCommand_createStationFromMusicId:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_createStationFromMusicId:(id)");
}

-(void) executeWebPageCommand_playTrack:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_playTrack:(id)");
}

-(void) executeWebPageCommand_pauseTrack:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_pauseTrack:(id)");
}

-(void) executeWebPageCommand_showP1Offer:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_showP1Offer:(id)");
}

-(void) executeWebPageCommand_sendEvent:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_sendEvent:(id)");
}

-(void) executeWebPageCommand_authorizeFacebook:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_authorizeFacebook:(id)");
}

-(void) executeWebPageCommand_loadURLSupressPMLandingPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_loadURLSupressPMLandingPage:(id)");
}

-(void) executeWebPageCommand_closeAd:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_closeAd:(id)");
}

-(void) executeWebPageCommand_getNowPlayingTrackDetails:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_getNowPlayingTrackDetails:(id)");
}

-(void) executeWebPageCommand_setNowPlayingFullSize:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_setNowPlayingFullSize:(id)");
}

-(void) executeWebPageCommand_playMovie:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_playMovie:(id)");
}

-(void) executeWebPageCommand_launchAdSelector:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_launchAdSelector:(id)");
}

-(void) setForceLegacyLandingPage:(bool) {
	%orig;
	NSLog(@"-(void) setForceLegacyLandingPage:(bool)");
}

-(id) loadURLSuppressPMLandingPageDFPController {
	%orig;
	NSLog(@"-(id) loadURLSuppressPMLandingPageDFPController");
}

-(void) executeWebPageCommand_confirmWithCommand:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_confirmWithCommand:(id)");
}

-(void) executeWebPageCommand_alertWithCommand:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_alertWithCommand:(id)");
}

-(double) trackProgress {
	%orig;
	NSLog(@"-(double) trackProgress");
}

-(id) userScripts {
	%orig;
	NSLog(@"-(id) userScripts");
}

-(id) initWithWebView:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithWebView:(id) delegate:(id)");
}

-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id)");
}

-(void) webView:(id) didStartProvisionalNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didStartProvisionalNavigation:(id)");
}

-(void) webView:(id) didFinishNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFinishNavigation:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) sourceView {
	%orig;
	NSLog(@"-(id) sourceView");
}

-(void) loadHTMLString:(id) baseURL:(id) {
	%orig;
	NSLog(@"-(void) loadHTMLString:(id) baseURL:(id)");
}

%end

%hook PMBackstageWebViewHost

-(void) setIsInUse:(bool) {
	%orig;
	NSLog(@"-(void) setIsInUse:(bool)");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(id) nameOfLegacyJavascriptObject {
	%orig;
	NSLog(@"-(id) nameOfLegacyJavascriptObject");
}

-(id) userScriptsInjectedAtDocumentEnd {
	%orig;
	NSLog(@"-(id) userScriptsInjectedAtDocumentEnd");
}

-(id) userScriptsDependableOnPandoraJs {
	%orig;
	NSLog(@"-(id) userScriptsDependableOnPandoraJs");
}

-(void) executeWebPageCommand_dismiss:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_dismiss:(id)");
}

-(void) setShareController:(id) {
	%orig;
	NSLog(@"-(void) setShareController:(id)");
}

-(id) shareController {
	%orig;
	NSLog(@"-(id) shareController");
}

-(id) launchAddSeedForStation:(id) withCommand:(id) {
	%orig;
	NSLog(@"-(id) launchAddSeedForStation:(id) withCommand:(id)");
}

-(void) executeWebPageCommand_openExternalPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_openExternalPage:(id)");
}

-(void) executeWebPageCommand_closeCustomWebViewContainer:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_closeCustomWebViewContainer:(id)");
}

-(void) executeWebPageCommand_share:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_share:(id)");
}

-(id) adDelegate {
	%orig;
	NSLog(@"-(id) adDelegate");
}

-(void) executeWebPageCommand_setViewportHeight:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_setViewportHeight:(id)");
}

-(id) browseManager {
	%orig;
	NSLog(@"-(id) browseManager");
}

-(id) initWithWebView:(id) navigationManager:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithWebView:(id) navigationManager:(id) delegate:(id)");
}

-(id) advertisingController {
	%orig;
	NSLog(@"-(id) advertisingController");
}

-(void) clearPendingController:(id) {
	%orig;
	NSLog(@"-(void) clearPendingController:(id)");
}

-(void) setAdvertisingController:(id) {
	%orig;
	NSLog(@"-(void) setAdvertisingController:(id)");
}

-(id) initWithWebView:(id) navigationManager:(id) advertisingController:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithWebView:(id) navigationManager:(id) advertisingController:(id) delegate:(id)");
}

-(void) setIapPresenter:(id) {
	%orig;
	NSLog(@"-(void) setIapPresenter:(id)");
}

-(id) commentForm {
	%orig;
	NSLog(@"-(id) commentForm");
}

-(void) adjustWebViewHeight {
	%orig;
	NSLog(@"-(void) adjustWebViewHeight");
}

-(id) pendingController {
	%orig;
	NSLog(@"-(id) pendingController");
}

-(void) setPendingController:(id) {
	%orig;
	NSLog(@"-(void) setPendingController:(id)");
}

-(void) adviseVisibleViewControllerHtml:(bool) {
	%orig;
	NSLog(@"-(void) adviseVisibleViewControllerHtml:(bool)");
}

-(void) openNewArtistMessageForArtist:(id) {
	%orig;
	NSLog(@"-(void) openNewArtistMessageForArtist:(id)");
}

-(void) openDraftArtistMessage:(id) forArtist:(id) {
	%orig;
	NSLog(@"-(void) openDraftArtistMessage:(id) forArtist:(id)");
}

-(void) updateShareableItemFromDictionary:(id) {
	%orig;
	NSLog(@"-(void) updateShareableItemFromDictionary:(id)");
}

-(long long) nativePageDestination:(id) {
	%orig;
	NSLog(@"-(long long) nativePageDestination:(id)");
}

-(void) legacyDismissForViewController {
	%orig;
	NSLog(@"-(void) legacyDismissForViewController");
}

-(void) setCommentForm:(id) {
	%orig;
	NSLog(@"-(void) setCommentForm:(id)");
}

-(void) handlePremiumShareCommand:(id) {
	%orig;
	NSLog(@"-(void) handlePremiumShareCommand:(id)");
}

-(id) backstageLegacyBridging {
	%orig;
	NSLog(@"-(id) backstageLegacyBridging");
}

-(id) backstageSpecialCases {
	%orig;
	NSLog(@"-(id) backstageSpecialCases");
}

-(void) commentFormWasRemovedFromView:(id) {
	%orig;
	NSLog(@"-(void) commentFormWasRemovedFromView:(id)");
}

-(void) commentFormDidMoveToPoint:(CGPoint) {
	%orig;
	NSLog(@"-(void) commentFormDidMoveToPoint:(CGPoint)");
}

-(void) dehydrate {
	%orig;
	NSLog(@"-(void) dehydrate");
}

-(void) hydrate {
	%orig;
	NSLog(@"-(void) hydrate");
}

-(void) executeWebPageCommand_createArtistMessage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_createArtistMessage:(id)");
}

-(void) executeWebPageCommand_openMessageDetailsView:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_openMessageDetailsView:(id)");
}

-(void) executeWebPageCommand_fetchArtistMessageMetrics:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_fetchArtistMessageMetrics:(id)");
}

-(void) executeWebPageCommand_audioMessageDetails:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_audioMessageDetails:(id)");
}

-(void) executeWebPageCommand_previewArtistMessage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_previewArtistMessage:(id)");
}

-(void) executeWebPageCommand_openPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_openPage:(id)");
}

-(void) executeWebPageCommand_showTextInput:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_showTextInput:(id)");
}

-(void) executeWebPageCommand_openModalPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_openModalPage:(id)");
}

-(void) executeWebPageCommand_closeModalPage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_closeModalPage:(id)");
}

-(void) executeWebPageCommand_refreshStationList:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_refreshStationList:(id)");
}

-(void) executeWebPageCommand_analytics:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_analytics:(id)");
}

-(void) executeWebPageCommand_playlistUpdated:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_playlistUpdated:(id)");
}

-(void) executeWebPageCommand_triggerReauth:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_triggerReauth:(id)");
}

-(id) iapPresenter {
	%orig;
	NSLog(@"-(id) iapPresenter");
}

-(void) executeWebPageCommand_playItems:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_playItems:(id)");
}

-(void) executeWebPageCommand_collectStation:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_collectStation:(id)");
}

-(void) executeWebPageCommand_playAlbum:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_playAlbum:(id)");
}

-(void) executeWebPageCommand_showMessage:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_showMessage:(id)");
}

-(void) executeWebPageCommand_t3Upsell:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_t3Upsell:(id)");
}

-(void) executeWebPageCommand_premiumAccessReward:(id) {
	%orig;
	NSLog(@"-(void) executeWebPageCommand_premiumAccessReward:(id)");
}

-(id) musicSessionManager {
	%orig;
	NSLog(@"-(id) musicSessionManager");
}

-(id) collectionMOCSyncCoordinator {
	%orig;
	NSLog(@"-(id) collectionMOCSyncCoordinator");
}

-(id) radio {
	%orig;
	NSLog(@"-(id) radio");
}

-(id) rpcService {
	%orig;
	NSLog(@"-(id) rpcService");
}

-(id) initWithWebView:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithWebView:(id) delegate:(id)");
}

-(bool) isInUse {
	%orig;
	NSLog(@"-(bool) isInUse");
}

-(void) setCurrentCommand:(id) {
	%orig;
	NSLog(@"-(void) setCurrentCommand:(id)");
}

-(id) currentCommand {
	%orig;
	NSLog(@"-(id) currentCommand");
}

-(id) navigationManager {
	%orig;
	NSLog(@"-(id) navigationManager");
}

-(void) setNavigationManager:(id) {
	%orig;
	NSLog(@"-(void) setNavigationManager:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) didRotate:(id) {
	%orig;
	NSLog(@"-(void) didRotate:(id)");
}

%end

%hook PMTeachMarkPresenterCommand

-(long long) teachMarkId {
	%orig;
	NSLog(@"-(long long) teachMarkId");
}

-(void) setTeachMarkId:(long long) {
	%orig;
	NSLog(@"-(void) setTeachMarkId:(long long)");
}

-(id) clickThroughText {
	%orig;
	NSLog(@"-(id) clickThroughText");
}

-(void) setClickThroughText:(id) {
	%orig;
	NSLog(@"-(void) setClickThroughText:(id)");
}

-(id) closeLabelText {
	%orig;
	NSLog(@"-(id) closeLabelText");
}

-(void) setCloseLabelText:(id) {
	%orig;
	NSLog(@"-(void) setCloseLabelText:(id)");
}

-(id) buttonBorderRadius {
	%orig;
	NSLog(@"-(id) buttonBorderRadius");
}

-(void) setButtonBorderRadius:(id) {
	%orig;
	NSLog(@"-(void) setButtonBorderRadius:(id)");
}

-(bool) shouldHideButtonBorder {
	%orig;
	NSLog(@"-(bool) shouldHideButtonBorder");
}

-(void) setShouldHideButtonBorder:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideButtonBorder:(bool)");
}

-(id) clickThroughBlock {
	%orig;
	NSLog(@"-(id) clickThroughBlock");
}

-(void) setClickThroughBlock:(id) {
	%orig;
	NSLog(@"-(void) setClickThroughBlock:(id)");
}

-(id) onDisplayBlock {
	%orig;
	NSLog(@"-(id) onDisplayBlock");
}

-(void) setOnDisplayBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnDisplayBlock:(id)");
}

-(id) onTimeoutBlock {
	%orig;
	NSLog(@"-(id) onTimeoutBlock");
}

-(void) setOnTimeoutBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnTimeoutBlock:(id)");
}

-(id) onTapBlock {
	%orig;
	NSLog(@"-(id) onTapBlock");
}

-(void) setOnTapBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnTapBlock:(id)");
}

-(id) onDismissBlock {
	%orig;
	NSLog(@"-(id) onDismissBlock");
}

-(void) setOnDismissBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnDismissBlock:(id)");
}

-(id) onBackgroundBlock {
	%orig;
	NSLog(@"-(id) onBackgroundBlock");
}

-(void) setOnBackgroundBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnBackgroundBlock:(id)");
}

-(id) spotlightAroundViews {
	%orig;
	NSLog(@"-(id) spotlightAroundViews");
}

-(void) setSpotlightAroundViews:(id) {
	%orig;
	NSLog(@"-(void) setSpotlightAroundViews:(id)");
}

-(double) spotlightRadius {
	%orig;
	NSLog(@"-(double) spotlightRadius");
}

-(void) setSpotlightRadius:(double) {
	%orig;
	NSLog(@"-(void) setSpotlightRadius:(double)");
}

-(CGPoint) spotlightCenter {
	%orig;
	NSLog(@"-(CGPoint) spotlightCenter");
}

-(void) setSpotlightCenter:(CGPoint) {
	%orig;
	NSLog(@"-(void) setSpotlightCenter:(CGPoint)");
}

-(bool) presentOverModalView {
	%orig;
	NSLog(@"-(bool) presentOverModalView");
}

-(void) setPresentOverModalView:(bool) {
	%orig;
	NSLog(@"-(void) setPresentOverModalView:(bool)");
}

-(bool) shouldTimeOut {
	%orig;
	NSLog(@"-(bool) shouldTimeOut");
}

-(void) setShouldTimeOut:(bool) {
	%orig;
	NSLog(@"-(void) setShouldTimeOut:(bool)");
}

-(bool) tapAnywhereToClose {
	%orig;
	NSLog(@"-(bool) tapAnywhereToClose");
}

-(void) setTapAnywhereToClose:(bool) {
	%orig;
	NSLog(@"-(void) setTapAnywhereToClose:(bool)");
}

-(void) setImageUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageUrl:(id)");
}

-(id) imageUrl {
	%orig;
	NSLog(@"-(id) imageUrl");
}

-(void) setButtonColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonColor:(id)");
}

-(void) setAttributedMessage:(id) {
	%orig;
	NSLog(@"-(void) setAttributedMessage:(id)");
}

-(id) attributedMessage {
	%orig;
	NSLog(@"-(id) attributedMessage");
}

-(id) buttonColor {
	%orig;
	NSLog(@"-(id) buttonColor");
}

-(void) setButtonBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonBackgroundColor:(id)");
}

-(id) buttonBackgroundColor {
	%orig;
	NSLog(@"-(id) buttonBackgroundColor");
}

-(id) footerText {
	%orig;
	NSLog(@"-(id) footerText");
}

-(void) setFooterText:(id) {
	%orig;
	NSLog(@"-(void) setFooterText:(id)");
}

-(id) customOverlayView {
	%orig;
	NSLog(@"-(id) customOverlayView");
}

-(void) setCustomOverlayView:(id) {
	%orig;
	NSLog(@"-(void) setCustomOverlayView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) setHeader:(id) {
	%orig;
	NSLog(@"-(void) setHeader:(id)");
}

-(id) header {
	%orig;
	NSLog(@"-(id) header");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(id) dismissBlock {
	%orig;
	NSLog(@"-(id) dismissBlock");
}

-(void) setDismissBlock:(id) {
	%orig;
	NSLog(@"-(void) setDismissBlock:(id)");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

%end

%hook PMRemoteControlManager

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(void) oneTimeSetup {
	%orig;
	NSLog(@"-(void) oneTimeSetup");
}

-(void) setIsRemoteCommandCenterAvailable:(bool) {
	%orig;
	NSLog(@"-(void) setIsRemoteCommandCenterAvailable:(bool)");
}

-(bool) isRemoteCommandCenterAvailable {
	%orig;
	NSLog(@"-(bool) isRemoteCommandCenterAvailable");
}

-(void) setSeekDuration:(id) {
	%orig;
	NSLog(@"-(void) setSeekDuration:(id)");
}

-(void) remoteControlTogglePlayPause {
	%orig;
	NSLog(@"-(void) remoteControlTogglePlayPause");
}

-(void) remoteControlPause {
	%orig;
	NSLog(@"-(void) remoteControlPause");
}

-(void) remoteControlPlay {
	%orig;
	NSLog(@"-(void) remoteControlPlay");
}

-(void) carPlayDidActivate {
	%orig;
	NSLog(@"-(void) carPlayDidActivate");
}

-(void) carPlayDidDeactivate {
	%orig;
	NSLog(@"-(void) carPlayDidDeactivate");
}

-(void) updateControlsForCurrentTrack {
	%orig;
	NSLog(@"-(void) updateControlsForCurrentTrack");
}

-(void) disableHamburger {
	%orig;
	NSLog(@"-(void) disableHamburger");
}

-(void) notifyStateChange {
	%orig;
	NSLog(@"-(void) notifyStateChange");
}

-(id) currentPlayableSource {
	%orig;
	NSLog(@"-(id) currentPlayableSource");
}

-(bool) shouldShowThumbsButton {
	%orig;
	NSLog(@"-(bool) shouldShowThumbsButton");
}

-(void) updateControlsForTrack:(id) withHamburger:(bool) {
	%orig;
	NSLog(@"-(void) updateControlsForTrack:(id) withHamburger:(bool)");
}

-(void) setUpPlayPauseButtonToEnable:(bool) {
	%orig;
	NSLog(@"-(void) setUpPlayPauseButtonToEnable:(bool)");
}

-(void) showAdControls {
	%orig;
	NSLog(@"-(void) showAdControls");
}

-(bool) activeSourceIsPodcast {
	%orig;
	NSLog(@"-(bool) activeSourceIsPodcast");
}

-(void) showSongControlsForPodcast:(id) withHamburger:(bool) {
	%orig;
	NSLog(@"-(void) showSongControlsForPodcast:(id) withHamburger:(bool)");
}

-(void) showSongControlsForTrack:(id) withHamburger:(bool) {
	%orig;
	NSLog(@"-(void) showSongControlsForTrack:(id) withHamburger:(bool)");
}

-(void) setUpSkipForwardButtonToShow:(bool) andEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setUpSkipForwardButtonToShow:(bool) andEnabled:(bool)");
}

-(void) setUpSkipBackwardButtonToShow:(bool) andEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setUpSkipBackwardButtonToShow:(bool) andEnabled:(bool)");
}

-(void) setUpPreviousTrackButtonToShow:(bool) andEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setUpPreviousTrackButtonToShow:(bool) andEnabled:(bool)");
}

-(void) setUpNextTrackButtonToShow:(bool) andEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setUpNextTrackButtonToShow:(bool) andEnabled:(bool)");
}

-(void) setUpShuffleButtonToShow:(bool) andEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setUpShuffleButtonToShow:(bool) andEnabled:(bool)");
}

-(void) setUpRepeatButtonToShow:(bool) andEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setUpRepeatButtonToShow:(bool) andEnabled:(bool)");
}

-(void) remoteControlSkipForward {
	%orig;
	NSLog(@"-(void) remoteControlSkipForward");
}

-(void) remoteControlSkipBackward {
	%orig;
	NSLog(@"-(void) remoteControlSkipBackward");
}

-(bool) activeSourceIsPremium {
	%orig;
	NSLog(@"-(bool) activeSourceIsPremium");
}

-(bool) hasCarPlayConnection {
	%orig;
	NSLog(@"-(bool) hasCarPlayConnection");
}

-(void) enableHamburgerForTrack:(id) {
	%orig;
	NSLog(@"-(void) enableHamburgerForTrack:(id)");
}

-(void) updateAvailabilityOfProgressScrubbingWithBasedOn:(id) {
	%orig;
	NSLog(@"-(void) updateAvailabilityOfProgressScrubbingWithBasedOn:(id)");
}

-(void) setUpLikeButtonForTrack:(id) {
	%orig;
	NSLog(@"-(void) setUpLikeButtonForTrack:(id)");
}

-(void) setUpDislikeButtonForTrack:(id) {
	%orig;
	NSLog(@"-(void) setUpDislikeButtonForTrack:(id)");
}

-(void) remoteControlDeleteRating {
	%orig;
	NSLog(@"-(void) remoteControlDeleteRating");
}

-(void) remoteControlLike {
	%orig;
	NSLog(@"-(void) remoteControlLike");
}

-(void) remoteControlDislike {
	%orig;
	NSLog(@"-(void) remoteControlDislike");
}

-(void) remoteControlToggleBookmark {
	%orig;
	NSLog(@"-(void) remoteControlToggleBookmark");
}

-(void) remoteControlPreviousTrack {
	%orig;
	NSLog(@"-(void) remoteControlPreviousTrack");
}

-(void) remoteControlNextTrack {
	%orig;
	NSLog(@"-(void) remoteControlNextTrack");
}

-(void) remoteControlChangeShuffleMode {
	%orig;
	NSLog(@"-(void) remoteControlChangeShuffleMode");
}

-(void) remoteControlChangeRepeatMode {
	%orig;
	NSLog(@"-(void) remoteControlChangeRepeatMode");
}

-(id) seekDuration {
	%orig;
	NSLog(@"-(id) seekDuration");
}

-(void) logRemoteControlPlaybackInteractionWithAction:(long long) {
	%orig;
	NSLog(@"-(void) logRemoteControlPlaybackInteractionWithAction:(long long)");
}

-(id) remoteControlDelegate {
	%orig;
	NSLog(@"-(id) remoteControlDelegate");
}

-(void) userInteractedWithCarPlay {
	%orig;
	NSLog(@"-(void) userInteractedWithCarPlay");
}

-(void) reportRemoteControlCommand:(id) {
	%orig;
	NSLog(@"-(void) reportRemoteControlCommand:(id)");
}

-(void) remoteControlStop {
	%orig;
	NSLog(@"-(void) remoteControlStop");
}

-(bool) carPlayConnected {
	%orig;
	NSLog(@"-(bool) carPlayConnected");
}

-(void) setUpPlusButtonForTrack:(id) {
	%orig;
	NSLog(@"-(void) setUpPlusButtonForTrack:(id)");
}

-(bool) ratedTrackIsPlaying:(id) {
	%orig;
	NSLog(@"-(bool) ratedTrackIsPlaying:(id)");
}

-(void) setCarPlayConnected:(bool) {
	%orig;
	NSLog(@"-(void) setCarPlayConnected:(bool)");
}

-(void) remoteControlReplayTrack {
	%orig;
	NSLog(@"-(void) remoteControlReplayTrack");
}

-(void) remoteControlReceivedOnMainThreadWithEvent:(id) {
	%orig;
	NSLog(@"-(void) remoteControlReceivedOnMainThreadWithEvent:(id)");
}

-(void) setSkipButtonEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setSkipButtonEnabled:(bool)");
}

-(void) setRemoteControlDelegate:(id) {
	%orig;
	NSLog(@"-(void) setRemoteControlDelegate:(id)");
}

-(bool) shouldShowThumbsButtonWithShouldLogExposure:(bool) {
	%orig;
	NSLog(@"-(bool) shouldShowThumbsButtonWithShouldLogExposure:(bool)");
}

-(bool) canThumb {
	%orig;
	NSLog(@"-(bool) canThumb");
}

-(bool) canSkipForward15Seconds {
	%orig;
	NSLog(@"-(bool) canSkipForward15Seconds");
}

-(bool) canSkipBack15Seconds {
	%orig;
	NSLog(@"-(bool) canSkipBack15Seconds");
}

-(void) handleChangePlaybackPositionCommandEventWithEvent:(id) {
	%orig;
	NSLog(@"-(void) handleChangePlaybackPositionCommandEventWithEvent:(id)");
}

-(id) activeTrackModel {
	%orig;
	NSLog(@"-(id) activeTrackModel");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) activeTrackRatingDidChange:(long long) trackId:(id) stationId:(id) {
	%orig;
	NSLog(@"-(void) activeTrackRatingDidChange:(long long) trackId:(id) stationId:(id)");
}

-(void) musicSessionRepeatModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionRepeatModeDidChangeTo:(long long)");
}

-(void) musicSessionShuffleModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionShuffleModeDidChangeTo:(long long)");
}

-(long long) playAction {
	%orig;
	NSLog(@"-(long long) playAction");
}

-(void) setIsStarted:(bool) {
	%orig;
	NSLog(@"-(void) setIsStarted:(bool)");
}

-(bool) isStarted {
	%orig;
	NSLog(@"-(bool) isStarted");
}

-(bool) canSeek {
	%orig;
	NSLog(@"-(bool) canSeek");
}

-(bool) canSkip {
	%orig;
	NSLog(@"-(bool) canSkip");
}

-(void) disableAllButtons {
	%orig;
	NSLog(@"-(void) disableAllButtons");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook HMIContainerViewController

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) initWithView:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithView:(id) delegate:(id)");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

%end

%hook PMSubGenresViewController

-(void) handlerDidClear {
	%orig;
	NSLog(@"-(void) handlerDidClear");
}

-(void) table:(id) didSelectItemAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) table:(id) didSelectItemAtIndex:(long long)");
}

-(void) setGenreCategory:(id) {
	%orig;
	NSLog(@"-(void) setGenreCategory:(id)");
}

-(void) refreshTitle {
	%orig;
	NSLog(@"-(void) refreshTitle");
}

-(void) refreshSubGenres {
	%orig;
	NSLog(@"-(void) refreshSubGenres");
}

-(id) genreCategory {
	%orig;
	NSLog(@"-(id) genreCategory");
}

-(void) handlerDidChange:(id) {
	%orig;
	NSLog(@"-(void) handlerDidChange:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(void) viewDidAppear:(id) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(id)");
}

-(void) setTable:(id) {
	%orig;
	NSLog(@"-(void) setTable:(id)");
}

-(id) table {
	%orig;
	NSLog(@"-(id) table");
}

%end

%hook PMHMIGenreViewController

-(void) handlerDidClear {
	%orig;
	NSLog(@"-(void) handlerDidClear");
}

-(void) viewDidBecomeFocused:(id) {
	%orig;
	NSLog(@"-(void) viewDidBecomeFocused:(id)");
}

-(void) setSubGenreVC:(id) {
	%orig;
	NSLog(@"-(void) setSubGenreVC:(id)");
}

-(void) table:(id) didSelectItemAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) table:(id) didSelectItemAtIndex:(long long)");
}

-(void) refreshGenres {
	%orig;
	NSLog(@"-(void) refreshGenres");
}

-(id) subGenreVC {
	%orig;
	NSLog(@"-(id) subGenreVC");
}

-(void) handlerDidChange:(id) {
	%orig;
	NSLog(@"-(void) handlerDidChange:(id)");
}

-(id) loadingLabel {
	%orig;
	NSLog(@"-(id) loadingLabel");
}

-(void) setLoadingLabel:(id) {
	%orig;
	NSLog(@"-(void) setLoadingLabel:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(void) viewDidAppear:(id) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(id)");
}

-(void) setTable:(id) {
	%orig;
	NSLog(@"-(void) setTable:(id)");
}

-(id) table {
	%orig;
	NSLog(@"-(id) table");
}

%end

%hook PMPlaybackViewController

-(void) handlerDidClear {
	%orig;
	NSLog(@"-(void) handlerDidClear");
}

-(void) viewDidBecomeFocused:(id) {
	%orig;
	NSLog(@"-(void) viewDidBecomeFocused:(id)");
}

-(void) viewDidLoseFocus:(id) {
	%orig;
	NSLog(@"-(void) viewDidLoseFocus:(id)");
}

-(void) didDisconnectFromBMW:(id) {
	%orig;
	NSLog(@"-(void) didDisconnectFromBMW:(id)");
}

-(void) displayMessage:(id) andAutoDismiss:(bool) {
	%orig;
	NSLog(@"-(void) displayMessage:(id) andAutoDismiss:(bool)");
}

-(void) displayMessage:(id) {
	%orig;
	NSLog(@"-(void) displayMessage:(id)");
}

-(void) setDisplayedTrack:(id) {
	%orig;
	NSLog(@"-(void) setDisplayedTrack:(id)");
}

-(void) setMessageTimer:(id) {
	%orig;
	NSLog(@"-(void) setMessageTimer:(id)");
}

-(void) setOnFocusBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnFocusBlock:(id)");
}

-(void) pandoraPlaybackSongWillChange {
	%orig;
	NSLog(@"-(void) pandoraPlaybackSongWillChange");
}

-(void) pandoraPlaybackSongDidChange {
	%orig;
	NSLog(@"-(void) pandoraPlaybackSongDidChange");
}

-(void) pandoraPlaybackStateDidChange {
	%orig;
	NSLog(@"-(void) pandoraPlaybackStateDidChange");
}

-(void) pandoraPlaybackThumbsDidChange {
	%orig;
	NSLog(@"-(void) pandoraPlaybackThumbsDidChange");
}

-(void) pandoraPlaybackStationDidChange {
	%orig;
	NSLog(@"-(void) pandoraPlaybackStationDidChange");
}

-(void) pandoraPlaybackAlbumArtDidArrive {
	%orig;
	NSLog(@"-(void) pandoraPlaybackAlbumArtDidArrive");
}

-(void) pandoraBookmarkDidChange {
	%orig;
	NSLog(@"-(void) pandoraBookmarkDidChange");
}

-(void) pandoraStatusDeadEndChanged {
	%orig;
	NSLog(@"-(void) pandoraStatusDeadEndChanged");
}

-(void) actSkip:(id) {
	%orig;
	NSLog(@"-(void) actSkip:(id)");
}

-(void) actThumbsUp:(id) {
	%orig;
	NSLog(@"-(void) actThumbsUp:(id)");
}

-(void) actThumbsDown:(id) {
	%orig;
	NSLog(@"-(void) actThumbsDown:(id)");
}

-(void) actBookmarkSong:(id) {
	%orig;
	NSLog(@"-(void) actBookmarkSong:(id)");
}

-(void) actStationsClicked:(id) {
	%orig;
	NSLog(@"-(void) actStationsClicked:(id)");
}

-(void) refreshCurrentSongInfo {
	%orig;
	NSLog(@"-(void) refreshCurrentSongInfo");
}

-(void) refreshDeadEndState {
	%orig;
	NSLog(@"-(void) refreshDeadEndState");
}

-(void) deadEndMessageIfNeeded {
	%orig;
	NSLog(@"-(void) deadEndMessageIfNeeded");
}

-(void) setupAlbumArtworkPositions {
	%orig;
	NSLog(@"-(void) setupAlbumArtworkPositions");
}

-(void) setupLabelPositions {
	%orig;
	NSLog(@"-(void) setupLabelPositions");
}

-(id) messageTimer {
	%orig;
	NSLog(@"-(id) messageTimer");
}

-(id) onFocusBlock {
	%orig;
	NSLog(@"-(id) onFocusBlock");
}

-(void) setPlaybackButtonEnabledState:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackButtonEnabledState:(id)");
}

-(void) refreshPlaybackState {
	%orig;
	NSLog(@"-(void) refreshPlaybackState");
}

-(void) refreshThumbs {
	%orig;
	NSLog(@"-(void) refreshThumbs");
}

-(void) clearArt {
	%orig;
	NSLog(@"-(void) clearArt");
}

-(void) disableMessage {
	%orig;
	NSLog(@"-(void) disableMessage");
}

-(void) refreshAlbumArt {
	%orig;
	NSLog(@"-(void) refreshAlbumArt");
}

-(void) refreshBookmarked {
	%orig;
	NSLog(@"-(void) refreshBookmarked");
}

-(id) displayedTrack {
	%orig;
	NSLog(@"-(id) displayedTrack");
}

-(void) setScreenText {
	%orig;
	NSLog(@"-(void) setScreenText");
}

-(void) createReflectedImage:(id) {
	%orig;
	NSLog(@"-(void) createReflectedImage:(id)");
}

-(void) setStatusBar {
	%orig;
	NSLog(@"-(void) setStatusBar");
}

-(void) setEntertainmentInfo {
	%orig;
	NSLog(@"-(void) setEntertainmentInfo");
}

-(CGPoint) loadingLabelPosition {
	%orig;
	NSLog(@"-(CGPoint) loadingLabelPosition");
}

-(void) setAlignmentForLabel:(id) withAlignment:(long long) {
	%orig;
	NSLog(@"-(void) setAlignmentForLabel:(id) withAlignment:(long long)");
}

-(void) setLoadingLabelPosition:(CGPoint) {
	%orig;
	NSLog(@"-(void) setLoadingLabelPosition:(CGPoint)");
}

-(void) audioService:(id) entertainmentStateChanged:(int) {
	%orig;
	NSLog(@"-(void) audioService:(id) entertainmentStateChanged:(int)");
}

-(void) audioService:(id) interruptStateChanged:(int) {
	%orig;
	NSLog(@"-(void) audioService:(id) interruptStateChanged:(int)");
}

-(void) audioService:(id) multimediaButtonEvent:(int) {
	%orig;
	NSLog(@"-(void) audioService:(id) multimediaButtonEvent:(int)");
}

-(void) hmiDidStartForApplication:(id) {
	%orig;
	NSLog(@"-(void) hmiDidStartForApplication:(id)");
}

-(void) didConnectFromBMW:(id) {
	%orig;
	NSLog(@"-(void) didConnectFromBMW:(id)");
}

-(void) handlerDidChange:(id) {
	%orig;
	NSLog(@"-(void) handlerDidChange:(id)");
}

-(void) clearContent {
	%orig;
	NSLog(@"-(void) clearContent");
}

-(void) setPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setPlaying:(bool)");
}

-(void) setBookmarked:(bool) {
	%orig;
	NSLog(@"-(void) setBookmarked:(bool)");
}

-(id) loadingLabel {
	%orig;
	NSLog(@"-(id) loadingLabel");
}

-(void) setLoadingLabel:(id) {
	%orig;
	NSLog(@"-(void) setLoadingLabel:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(void) viewDidAppear:(id) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(id)");
}

-(void) viewDidDisappear:(id) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(id)");
}

%end

%hook PMNewStationViewController

-(void) newStationSearchButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) newStationSearchButtonClicked:(id)");
}

-(void) newStationGenreButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) newStationGenreButtonClicked:(id)");
}

-(void) viewDidAppear:(id) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(id)");
}

%end

%hook PMStationsViewController

-(void) handlerDidClear {
	%orig;
	NSLog(@"-(void) handlerDidClear");
}

-(void) viewDidBecomeFocused:(id) {
	%orig;
	NSLog(@"-(void) viewDidBecomeFocused:(id)");
}

-(void) setTheNewStationButton:(id) {
	%orig;
	NSLog(@"-(void) setTheNewStationButton:(id)");
}

-(void) setStationSortButton:(id) {
	%orig;
	NSLog(@"-(void) setStationSortButton:(id)");
}

-(void) setLastMarkedStation:(id) {
	%orig;
	NSLog(@"-(void) setLastMarkedStation:(id)");
}

-(void) pandoraStationsDidChange {
	%orig;
	NSLog(@"-(void) pandoraStationsDidChange");
}

-(void) pandoraStationDidChange {
	%orig;
	NSLog(@"-(void) pandoraStationDidChange");
}

-(void) pandoraStationArtDidArrive:(id) {
	%orig;
	NSLog(@"-(void) pandoraStationArtDidArrive:(id)");
}

-(void) refreshStationSortOrder {
	%orig;
	NSLog(@"-(void) refreshStationSortOrder");
}

-(id) stationSortButton {
	%orig;
	NSLog(@"-(id) stationSortButton");
}

-(void) stationSortOrderChanged:(id) {
	%orig;
	NSLog(@"-(void) stationSortOrderChanged:(id)");
}

-(void) newStationButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) newStationButtonClicked:(id)");
}

-(void) refreshStationsList {
	%orig;
	NSLog(@"-(void) refreshStationsList");
}

-(id) stationListFromHandler {
	%orig;
	NSLog(@"-(id) stationListFromHandler");
}

-(id) theNewStationButton {
	%orig;
	NSLog(@"-(id) theNewStationButton");
}

-(void) populateStationArt:(id) atIndex:(int) {
	%orig;
	NSLog(@"-(void) populateStationArt:(id) atIndex:(int)");
}

-(id) lastMarkedStation {
	%orig;
	NSLog(@"-(id) lastMarkedStation");
}

-(int) indexOfStation:(id) {
	%orig;
	NSLog(@"-(int) indexOfStation:(id)");
}

-(void) markActiveStation:(id) {
	%orig;
	NSLog(@"-(void) markActiveStation:(id)");
}

-(void) refreshActiveStationIcon {
	%orig;
	NSLog(@"-(void) refreshActiveStationIcon");
}

-(void) refreshSelector {
	%orig;
	NSLog(@"-(void) refreshSelector");
}

-(void) table:(id) didSelectItemAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) table:(id) didSelectItemAtIndex:(long long)");
}

-(void) handlerDidChange:(id) {
	%orig;
	NSLog(@"-(void) handlerDidChange:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(void) viewDidAppear:(id) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(id)");
}

-(void) setTable:(id) {
	%orig;
	NSLog(@"-(void) setTable:(id)");
}

-(id) table {
	%orig;
	NSLog(@"-(id) table");
}

%end

%hook PMSeedSearchViewController

-(void) setPendingSearchString:(id) {
	%orig;
	NSLog(@"-(void) setPendingSearchString:(id)");
}

-(void) setSpeller:(id) {
	%orig;
	NSLog(@"-(void) setSpeller:(id)");
}

-(id) speller {
	%orig;
	NSLog(@"-(id) speller");
}

-(void) drawTableString:(id) {
	%orig;
	NSLog(@"-(void) drawTableString:(id)");
}

-(id) pendingSearchString {
	%orig;
	NSLog(@"-(id) pendingSearchString");
}

-(void) refreshSearch {
	%orig;
	NSLog(@"-(void) refreshSearch");
}

-(void) speller:(id) didChangeText:(id) {
	%orig;
	NSLog(@"-(void) speller:(id) didChangeText:(id)");
}

-(void) speller:(id) didSelectResultAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) speller:(id) didSelectResultAtIndex:(long long)");
}

-(void) spellerDidSelectOK:(id) {
	%orig;
	NSLog(@"-(void) spellerDidSelectOK:(id)");
}

-(void) handlerDidClear {
	%orig;
	NSLog(@"-(void) handlerDidClear");
}

-(void) autoCompleteSearchDidLoad:(id) {
	%orig;
	NSLog(@"-(void) autoCompleteSearchDidLoad:(id)");
}

-(void) handlerDidChange:(id) {
	%orig;
	NSLog(@"-(void) handlerDidChange:(id)");
}

-(void) setSearchResults:(id) {
	%orig;
	NSLog(@"-(void) setSearchResults:(id)");
}

-(id) searchResults {
	%orig;
	NSLog(@"-(id) searchResults");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(void) viewDidAppear:(id) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(id)");
}

-(void) viewDidDisappear:(id) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(id)");
}

-(void) clear {
	%orig;
	NSLog(@"-(void) clear");
}

%end

%hook PMAVAssetCache

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) setAssetKeys:(id) {
	%orig;
	NSLog(@"-(void) setAssetKeys:(id)");
}

-(void) setMaxAssetsCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaxAssetsCount:(unsigned long long)");
}

-(unsigned long long) maxAssetsCount {
	%orig;
	NSLog(@"-(unsigned long long) maxAssetsCount");
}

-(id) popAssetWithURL:(id) {
	%orig;
	NSLog(@"-(id) popAssetWithURL:(id)");
}

-(void) pushAssetWithURL:(id) delegate:(id) lineId:(id) creativeId:(id) {
	%orig;
	NSLog(@"-(void) pushAssetWithURL:(id) delegate:(id) lineId:(id) creativeId:(id)");
}

-(bool) hasAssetWithURL:(id) {
	%orig;
	NSLog(@"-(bool) hasAssetWithURL:(id)");
}

-(void) pushAssetWithPMAVAssetURL:(id) delegate:(id) lineId:(id) creativeId:(id) {
	%orig;
	NSLog(@"-(void) pushAssetWithPMAVAssetURL:(id) delegate:(id) lineId:(id) creativeId:(id)");
}

-(id) popAssetWithPMAVAssetURL:(id) {
	%orig;
	NSLog(@"-(id) popAssetWithPMAVAssetURL:(id)");
}

-(bool) hasAssetWithPMAVAssetURL:(id) {
	%orig;
	NSLog(@"-(bool) hasAssetWithPMAVAssetURL:(id)");
}

-(id) assetsInElement {
	%orig;
	NSLog(@"-(id) assetsInElement");
}

-(void) setAssets:(id) {
	%orig;
	NSLog(@"-(void) setAssets:(id)");
}

-(id) assets {
	%orig;
	NSLog(@"-(id) assets");
}

-(void) removeAllAssets {
	%orig;
	NSLog(@"-(void) removeAllAssets");
}

-(id) assetKeys {
	%orig;
	NSLog(@"-(id) assetKeys");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMInboxNotificationModel

+(id) kNotificationCount {
	%orig;
	NSLog(@"+(id) kNotificationCount");
}

+(id) kNotificationJSONResultEmpty {
	%orig;
	NSLog(@"+(id) kNotificationJSONResultEmpty");
}

+(long long) MIN_DELAY_INBOX_RPC_CALL {
	%orig;
	NSLog(@"+(long long) MIN_DELAY_INBOX_RPC_CALL");
}

+(id) getNotificationsWithMessageList:(id) {
	%orig;
	NSLog(@"+(id) getNotificationsWithMessageList:(id)");
}

-(id) infoActionTitle {
	%orig;
	NSLog(@"-(id) infoActionTitle");
}

-(id) infoActionColor {
	%orig;
	NSLog(@"-(id) infoActionColor");
}

-(void) markMessageSeen {
	%orig;
	NSLog(@"-(void) markMessageSeen");
}

-(long long) compareUsingSortKey:(id) {
	%orig;
	NSLog(@"-(long long) compareUsingSortKey:(id)");
}

-(id) initWithResponseDictionary:(id) validationFormatParameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) initWithResponseDictionary:(id) validationFormatParameters:(id) error:(id*)");
}

-(void) setSeen:(bool) {
	%orig;
	NSLog(@"-(void) setSeen:(bool)");
}

-(bool) seen {
	%orig;
	NSLog(@"-(bool) seen");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

%end

%hook RemoteStationModel

-(id) initWithContentInfo:(id) stationId:(id) {
	%orig;
	NSLog(@"-(id) initWithContentInfo:(id) stationId:(id)");
}

-(id) initWithStationModel:(id) {
	%orig;
	NSLog(@"-(id) initWithStationModel:(id)");
}

-(id) initWithResponseDictionary:(id) validationFormatParameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) initWithResponseDictionary:(id) validationFormatParameters:(id) error:(id*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

%end

%hook RecommendedForYouStationModel

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(id) initWithResponseDictionary:(id) validationFormatParameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) initWithResponseDictionary:(id) validationFormatParameters:(id) error:(id*)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

%end

%hook RemoteTrackModel

-(id) initWithResponseDictionary:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) initWithResponseDictionary:(id) error:(id*)");
}

-(void) setAsTired {
	%orig;
	NSLog(@"-(void) setAsTired");
}

-(void) songRatingUpdatedTo:(long long) {
	%orig;
	NSLog(@"-(void) songRatingUpdatedTo:(long long)");
}

-(id) initWithResponseDictionary:(id) validationFormatParameters:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) initWithResponseDictionary:(id) validationFormatParameters:(id) error:(id*)");
}

-(id) albumArtUrl {
	%orig;
	NSLog(@"-(id) albumArtUrl");
}

-(double) elapsedPlayTime {
	%orig;
	NSLog(@"-(double) elapsedPlayTime");
}

-(void) ratePositiveFromRadioController:(id) {
	%orig;
	NSLog(@"-(void) ratePositiveFromRadioController:(id)");
}

-(void) rateNegativeFromRadioController:(id) {
	%orig;
	NSLog(@"-(void) rateNegativeFromRadioController:(id)");
}

-(void) deleteRatingFromRadioController:(id) {
	%orig;
	NSLog(@"-(void) deleteRatingFromRadioController:(id)");
}

-(void) setElapsedPlayTime:(double) {
	%orig;
	NSLog(@"-(void) setElapsedPlayTime:(double)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) setDuration:(double) {
	%orig;
	NSLog(@"-(void) setDuration:(double)");
}

-(double) duration {
	%orig;
	NSLog(@"-(double) duration");
}

%end

%hook PMCastRemoteRadio

-(void) attemptSkipWithoutAlert {
	%orig;
	NSLog(@"-(void) attemptSkipWithoutAlert");
}

-(void) refreshStation {
	%orig;
	NSLog(@"-(void) refreshStation");
}

-(void) attemptWasMadeToCreateExistingStation:(id) {
	%orig;
	NSLog(@"-(void) attemptWasMadeToCreateExistingStation:(id)");
}

-(void) setIsPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setIsPlaying:(bool)");
}

-(void) notifyExplicitFilterChanged:(bool) {
	%orig;
	NSLog(@"-(void) notifyExplicitFilterChanged:(bool)");
}

-(void) handleAudioForViolation:(id) andPlayWarning:(bool) {
	%orig;
	NSLog(@"-(void) handleAudioForViolation:(id) andPlayWarning:(bool)");
}

-(void) handleStreamViolationCancel {
	%orig;
	NSLog(@"-(void) handleStreamViolationCancel");
}

-(void) handleStreamViolationListenHere {
	%orig;
	NSLog(@"-(void) handleStreamViolationListenHere");
}

-(void) attemptSkipFromRadioController:(id) {
	%orig;
	NSLog(@"-(void) attemptSkipFromRadioController:(id)");
}

-(void) setStartingStation:(bool) {
	%orig;
	NSLog(@"-(void) setStartingStation:(bool)");
}

-(void) setStationChanged:(bool) {
	%orig;
	NSLog(@"-(void) setStationChanged:(bool)");
}

-(void) setStatusMismatchCounter:(int) {
	%orig;
	NSLog(@"-(void) setStatusMismatchCounter:(int)");
}

-(void) setCurrentTrackId:(id) {
	%orig;
	NSLog(@"-(void) setCurrentTrackId:(id)");
}

-(void) setCurrentSourceId:(id) {
	%orig;
	NSLog(@"-(void) setCurrentSourceId:(id)");
}

-(void) setStartingItemId:(id) {
	%orig;
	NSLog(@"-(void) setStartingItemId:(id)");
}

-(void) setStartingTrackId:(id) {
	%orig;
	NSLog(@"-(void) setStartingTrackId:(id)");
}

-(void) handleStationRenameSuccess:(id) {
	%orig;
	NSLog(@"-(void) handleStationRenameSuccess:(id)");
}

-(void) setRemoteActiveStation:(id) {
	%orig;
	NSLog(@"-(void) setRemoteActiveStation:(id)");
}

-(void) setupActiveStation:(id) {
	%orig;
	NSLog(@"-(void) setupActiveStation:(id)");
}

-(void) flingStation:(id) withTrack:(id) {
	%orig;
	NSLog(@"-(void) flingStation:(id) withTrack:(id)");
}

-(void) startRetryFlingingCountdown {
	%orig;
	NSLog(@"-(void) startRetryFlingingCountdown");
}

-(id) castBridge {
	%orig;
	NSLog(@"-(id) castBridge");
}

-(void) flingPlaylist:(id) {
	%orig;
	NSLog(@"-(void) flingPlaylist:(id)");
}

-(void) setIsFlingAttemptCurrentlyPending:(bool) {
	%orig;
	NSLog(@"-(void) setIsFlingAttemptCurrentlyPending:(bool)");
}

-(bool) isFlingAttemptCurrentlyPending {
	%orig;
	NSLog(@"-(bool) isFlingAttemptCurrentlyPending");
}

-(id) startingTrackId {
	%orig;
	NSLog(@"-(id) startingTrackId");
}

-(id) startingItemId {
	%orig;
	NSLog(@"-(id) startingItemId");
}

-(void) flingSourceModel:(id) {
	%orig;
	NSLog(@"-(void) flingSourceModel:(id)");
}

-(void) flingCurrentStationAndTrack {
	%orig;
	NSLog(@"-(void) flingCurrentStationAndTrack");
}

-(id) currentSourceId {
	%orig;
	NSLog(@"-(id) currentSourceId");
}

-(id) buildContentInfo {
	%orig;
	NSLog(@"-(id) buildContentInfo");
}

-(id) getDominantColorOfTrack:(id) {
	%orig;
	NSLog(@"-(id) getDominantColorOfTrack:(id)");
}

-(id) oldStationId {
	%orig;
	NSLog(@"-(id) oldStationId");
}

-(void) setOldStationId:(id) {
	%orig;
	NSLog(@"-(void) setOldStationId:(id)");
}

-(void) startDisconnectTimer {
	%orig;
	NSLog(@"-(void) startDisconnectTimer");
}

-(id) changingSourceId {
	%orig;
	NSLog(@"-(id) changingSourceId");
}

-(void) setChangingSourceId:(id) {
	%orig;
	NSLog(@"-(void) setChangingSourceId:(id)");
}

-(id) remoteActiveStation {
	%orig;
	NSLog(@"-(id) remoteActiveStation");
}

-(void) updateStation:(id) {
	%orig;
	NSLog(@"-(void) updateStation:(id)");
}

-(void) updateVolumeFromStatus:(id) {
	%orig;
	NSLog(@"-(void) updateVolumeFromStatus:(id)");
}

-(void) updateTrack:(id) sourceChanged:(bool) {
	%orig;
	NSLog(@"-(void) updateTrack:(id) sourceChanged:(bool)");
}

-(void) updateSongProgress:(double) withDuration:(double) {
	%orig;
	NSLog(@"-(void) updateSongProgress:(double) withDuration:(double)");
}

-(void) updatePlayingState:(bool) {
	%orig;
	NSLog(@"-(void) updatePlayingState:(bool)");
}

-(void) handleDisconnectTimer:(id) {
	%orig;
	NSLog(@"-(void) handleDisconnectTimer:(id)");
}

-(bool) startingStation {
	%orig;
	NSLog(@"-(bool) startingStation");
}

-(bool) stationChanged {
	%orig;
	NSLog(@"-(bool) stationChanged");
}

-(id) oldTrackToken {
	%orig;
	NSLog(@"-(id) oldTrackToken");
}

-(int) statusMismatchCounter {
	%orig;
	NSLog(@"-(int) statusMismatchCounter");
}

-(void) setOldTrackToken:(id) {
	%orig;
	NSLog(@"-(void) setOldTrackToken:(id)");
}

-(void) sendCommand:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) sendCommand:(id) withData:(id)");
}

-(void) session:(id) statusDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) session:(id) statusDidUpdate:(id)");
}

-(void) session:(id) timeTickDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) session:(id) timeTickDidUpdate:(id)");
}

-(id) initWithSession:(id) andCastBridge:(id) {
	%orig;
	NSLog(@"-(id) initWithSession:(id) andCastBridge:(id)");
}

-(void) flingCurrentPlaylist {
	%orig;
	NSLog(@"-(void) flingCurrentPlaylist");
}

-(void) flingCurrentSourceModel {
	%orig;
	NSLog(@"-(void) flingCurrentSourceModel");
}

-(void) sleepTrack {
	%orig;
	NSLog(@"-(void) sleepTrack");
}

-(void) playTrackWithPandoraId:(id) itemId:(id) {
	%orig;
	NSLog(@"-(void) playTrackWithPandoraId:(id) itemId:(id)");
}

-(id) currentTrackId {
	%orig;
	NSLog(@"-(id) currentTrackId");
}

-(id) firstUnkownPlayerState {
	%orig;
	NSLog(@"-(id) firstUnkownPlayerState");
}

-(void) setFirstUnkownPlayerState:(id) {
	%orig;
	NSLog(@"-(void) setFirstUnkownPlayerState:(id)");
}

-(id) activeStation {
	%orig;
	NSLog(@"-(id) activeStation");
}

-(id) activeTrack {
	%orig;
	NSLog(@"-(id) activeTrack");
}

-(void) setActiveTrack:(id) {
	%orig;
	NSLog(@"-(void) setActiveTrack:(id)");
}

-(void) setActiveStation:(id) {
	%orig;
	NSLog(@"-(void) setActiveStation:(id)");
}

-(void) deleteRating {
	%orig;
	NSLog(@"-(void) deleteRating");
}

-(void) ratePositive {
	%orig;
	NSLog(@"-(void) ratePositive");
}

-(void) rateNegative {
	%orig;
	NSLog(@"-(void) rateNegative");
}

-(void) requestReplayForTrack:(id) useReward:(bool) {
	%orig;
	NSLog(@"-(void) requestReplayForTrack:(id) useReward:(bool)");
}

-(void) array:(id) didRemoveWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didRemoveWithUpdate:(id)");
}

-(void) attemptSkip {
	%orig;
	NSLog(@"-(void) attemptSkip");
}

-(void) setActiveStation:(id) startingAtTrack:(id) {
	%orig;
	NSLog(@"-(void) setActiveStation:(id) startingAtTrack:(id)");
}

-(void) setActiveStation:(id) startingAtTrack:(id) metadata:(id) {
	%orig;
	NSLog(@"-(void) setActiveStation:(id) startingAtTrack:(id) metadata:(id)");
}

-(long long) skipStatus {
	%orig;
	NSLog(@"-(long long) skipStatus");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionRepeatModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionRepeatModeDidChangeTo:(long long)");
}

-(void) musicSessionShuffleModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionShuffleModeDidChangeTo:(long long)");
}

-(void) musicSessionSeekPositionDidChange:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionSeekPositionDidChange:(long long)");
}

-(void) musicSessionAttemptedSkip {
	%orig;
	NSLog(@"-(void) musicSessionAttemptedSkip");
}

-(void) musicSessionAttemptedSkipBack {
	%orig;
	NSLog(@"-(void) musicSessionAttemptedSkipBack");
}

-(void) musicSessionAttemptedToPlayTrackWithPandoraId:(id) itemId:(id) {
	%orig;
	NSLog(@"-(void) musicSessionAttemptedToPlayTrackWithPandoraId:(id) itemId:(id)");
}

-(void) musicSessionWillAttemptToStartNextSourceWithTrackId:(id) itemId:(id) {
	%orig;
	NSLog(@"-(void) musicSessionWillAttemptToStartNextSourceWithTrackId:(id) itemId:(id)");
}

-(void) musicSessionAttemptedToShuffleAllSongs {
	%orig;
	NSLog(@"-(void) musicSessionAttemptedToShuffleAllSongs");
}

-(void) musicSessionReplayAutoPlayTrackWithSourceId:(id) pandoraId:(id) {
	%orig;
	NSLog(@"-(void) musicSessionReplayAutoPlayTrackWithSourceId:(id) pandoraId:(id)");
}

-(void) musicSessionRateAutoPlayTrackWithPandoraId:(id) rating:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionRateAutoPlayTrackWithPandoraId:(id) rating:(long long)");
}

-(void) setPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setPlaying:(bool)");
}

-(void) deleteStation:(id) {
	%orig;
	NSLog(@"-(void) deleteStation:(id)");
}

-(bool) playing {
	%orig;
	NSLog(@"-(bool) playing");
}

-(void) sendCommand:(id) {
	%orig;
	NSLog(@"-(void) sendCommand:(id)");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(void) refreshState {
	%orig;
	NSLog(@"-(void) refreshState");
}

-(id) disconnectTimer {
	%orig;
	NSLog(@"-(id) disconnectTimer");
}

-(void) setDisconnectTimer:(id) {
	%orig;
	NSLog(@"-(void) setDisconnectTimer:(id)");
}

-(void) skip {
	%orig;
	NSLog(@"-(void) skip");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook PMCarPlayIntegration

+(id) sharedIntegration {
	%orig;
	NSLog(@"+(id) sharedIntegration");
}

-(bool) carPlayConnected {
	%orig;
	NSLog(@"-(bool) carPlayConnected");
}

-(bool) alertUncollectFail {
	%orig;
	NSLog(@"-(bool) alertUncollectFail");
}

-(bool) alertCollectFail {
	%orig;
	NSLog(@"-(bool) alertCollectFail");
}

-(void) setCarPlayConnected:(bool) {
	%orig;
	NSLog(@"-(void) setCarPlayConnected:(bool)");
}

-(void) connectWithRadio:(id) {
	%orig;
	NSLog(@"-(void) connectWithRadio:(id)");
}

-(void) playableContentManager:(id) initializePlaybackQueueWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) playableContentManager:(id) initializePlaybackQueueWithCompletionHandler:(id)");
}

-(void) radioOfflineStatusUpdated {
	%orig;
	NSLog(@"-(void) radioOfflineStatusUpdated");
}

-(bool) showingAlert {
	%orig;
	NSLog(@"-(bool) showingAlert");
}

-(void) setShowingAlert:(bool) {
	%orig;
	NSLog(@"-(void) setShowingAlert:(bool)");
}

-(id) rowItemForIndexPath:(id) {
	%orig;
	NSLog(@"-(id) rowItemForIndexPath:(id)");
}

-(id) subtitleForItem:(id) shouldAddForPremium:(bool) {
	%orig;
	NSLog(@"-(id) subtitleForItem:(id) shouldAddForPremium:(bool)");
}

-(CGSize) sizeForCarPlayContentItemArtwork {
	%orig;
	NSLog(@"-(CGSize) sizeForCarPlayContentItemArtwork");
}

-(id) nonPlayableItemWithTitle:(id) andSubtitle:(id) {
	%orig;
	NSLog(@"-(id) nonPlayableItemWithTitle:(id) andSubtitle:(id)");
}

-(void) showStickyAlertWithTitle:(id) andMessage:(id) {
	%orig;
	NSLog(@"-(void) showStickyAlertWithTitle:(id) andMessage:(id)");
}

-(void) showAlertWithTitle:(id) andMessage:(id) forDuration:(int) {
	%orig;
	NSLog(@"-(void) showAlertWithTitle:(id) andMessage:(id) forDuration:(int)");
}

-(void) reactToRadioAuthStatusChanges {
	%orig;
	NSLog(@"-(void) reactToRadioAuthStatusChanges");
}

-(void) didDisconnect {
	%orig;
	NSLog(@"-(void) didDisconnect");
}

-(void) didReceiveAudioRouteChangeNotification:(id) {
	%orig;
	NSLog(@"-(void) didReceiveAudioRouteChangeNotification:(id)");
}

-(id) licensingRestrictionMessageItem {
	%orig;
	NSLog(@"-(id) licensingRestrictionMessageItem");
}

-(id) loggedOutMessageItem {
	%orig;
	NSLog(@"-(id) loggedOutMessageItem");
}

-(id) loadingMessageItem {
	%orig;
	NSLog(@"-(id) loadingMessageItem");
}

-(id) noStationsMessageItem {
	%orig;
	NSLog(@"-(id) noStationsMessageItem");
}

-(void) station:(id) addedAtIndex:(id) {
	%orig;
	NSLog(@"-(void) station:(id) addedAtIndex:(id)");
}

-(void) stationRemoved:(id) {
	%orig;
	NSLog(@"-(void) stationRemoved:(id)");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(void) radioAuthStatusDidUpdateForCarPlay {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidUpdateForCarPlay");
}

-(void) offlineModeDidChange:(id) {
	%orig;
	NSLog(@"-(void) offlineModeDidChange:(id)");
}

-(void) stationListDidRefresh {
	%orig;
	NSLog(@"-(void) stationListDidRefresh");
}

-(void) albumArtDidLoadWithTrack:(id) {
	%orig;
	NSLog(@"-(void) albumArtDidLoadWithTrack:(id)");
}

-(void) albumArtLoadedforAutoplayTrack:(id) {
	%orig;
	NSLog(@"-(void) albumArtLoadedforAutoplayTrack:(id)");
}

-(void) artDidLoadWithStation:(id) {
	%orig;
	NSLog(@"-(void) artDidLoadWithStation:(id)");
}

-(void) activeStationDidChange:(id) {
	%orig;
	NSLog(@"-(void) activeStationDidChange:(id)");
}

-(void) alertError:(id) forRequest:(id) {
	%orig;
	NSLog(@"-(void) alertError:(id) forRequest:(id)");
}

-(bool) shouldAlertOutOfSkips {
	%orig;
	NSLog(@"-(bool) shouldAlertOutOfSkips");
}

-(bool) shouldAlertOutOfSkipsOnThumbDown {
	%orig;
	NSLog(@"-(bool) shouldAlertOutOfSkipsOnThumbDown");
}

-(bool) shouldAlertRetryWithRequest:(long long) service:(id) {
	%orig;
	NSLog(@"-(bool) shouldAlertRetryWithRequest:(long long) service:(id)");
}

-(id) accessoryId {
	%orig;
	NSLog(@"-(id) accessoryId");
}

-(void) radioRuntimeDidStart {
	%orig;
	NSLog(@"-(void) radioRuntimeDidStart");
}

-(void) radioStationListSynced {
	%orig;
	NSLog(@"-(void) radioStationListSynced");
}

-(void) handlerDidChange:(id) {
	%orig;
	NSLog(@"-(void) handlerDidChange:(id)");
}

-(void) clearHandler {
	%orig;
	NSLog(@"-(void) clearHandler");
}

-(void) playStateDidChange:(bool) {
	%orig;
	NSLog(@"-(void) playStateDidChange:(bool)");
}

-(void) currentTrackDidEnd {
	%orig;
	NSLog(@"-(void) currentTrackDidEnd");
}

-(void) currentTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) currentTrackDidSuspendPlayback");
}

-(void) currentTrackWillChange {
	%orig;
	NSLog(@"-(void) currentTrackWillChange");
}

-(void) currentTrackDidChange {
	%orig;
	NSLog(@"-(void) currentTrackDidChange");
}

-(void) trackRatingDidChange {
	%orig;
	NSLog(@"-(void) trackRatingDidChange");
}

-(void) trackBookmarkDidChangeForTrack:(id) {
	%orig;
	NSLog(@"-(void) trackBookmarkDidChangeForTrack:(id)");
}

-(void) artistBookmarkDidChangeForTrack:(id) {
	%orig;
	NSLog(@"-(void) artistBookmarkDidChangeForTrack:(id)");
}

-(void) currentStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) currentStationWasDeleted:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(bool) isConnected {
	%orig;
	NSLog(@"-(bool) isConnected");
}

-(void) playableContentManager:(id) initiatePlaybackOfContentItemAtIndexPath:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) playableContentManager:(id) initiatePlaybackOfContentItemAtIndexPath:(id) completionHandler:(id)");
}

-(id) contentItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) contentItemAtIndexPath:(id)");
}

-(long long) numberOfChildItemsAtIndexPath:(id) {
	%orig;
	NSLog(@"-(long long) numberOfChildItemsAtIndexPath:(id)");
}

-(void) statusDidChange:(long long) {
	%orig;
	NSLog(@"-(void) statusDidChange:(long long)");
}

-(void) didConnect {
	%orig;
	NSLog(@"-(void) didConnect");
}

-(void) dismissAlert {
	%orig;
	NSLog(@"-(void) dismissAlert");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(void) reloadData {
	%orig;
	NSLog(@"-(void) reloadData");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(void) dataUpdated:(id) {
	%orig;
	NSLog(@"-(void) dataUpdated:(id)");
}

%end

%hook iDriveAccessoryManager

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(void) listen {
	%orig;
	NSLog(@"-(void) listen");
}

-(bool) shouldAlertStationReplay {
	%orig;
	NSLog(@"-(bool) shouldAlertStationReplay");
}

-(void) acceptCommands {
	%orig;
	NSLog(@"-(void) acceptCommands");
}

-(void) setDidLaunchDueToURL:(bool) {
	%orig;
	NSLog(@"-(void) setDidLaunchDueToURL:(bool)");
}

-(void) dismissLockScreen {
	%orig;
	NSLog(@"-(void) dismissLockScreen");
}

-(void) willConnect {
	%orig;
	NSLog(@"-(void) willConnect");
}

-(void) didDisconnect:(long long) {
	%orig;
	NSLog(@"-(void) didDisconnect:(long long)");
}

-(bool) didLaunchDueToURL {
	%orig;
	NSLog(@"-(bool) didLaunchDueToURL");
}

-(bool) isAtDeadEnd {
	%orig;
	NSLog(@"-(bool) isAtDeadEnd");
}

-(id) deadEndMessage {
	%orig;
	NSLog(@"-(id) deadEndMessage");
}

-(void) bookmarkSong {
	%orig;
	NSLog(@"-(void) bookmarkSong");
}

-(void) setBmwAppController:(id) {
	%orig;
	NSLog(@"-(void) setBmwAppController:(id)");
}

-(void) hideRoadblockController {
	%orig;
	NSLog(@"-(void) hideRoadblockController");
}

-(void) showRoadblockController {
	%orig;
	NSLog(@"-(void) showRoadblockController");
}

-(id) bmwAppController {
	%orig;
	NSLog(@"-(id) bmwAppController");
}

-(void) debugTest {
	%orig;
	NSLog(@"-(void) debugTest");
}

-(id) deadEndTitle {
	%orig;
	NSLog(@"-(id) deadEndTitle");
}

-(id) albumArtForStation:(id) {
	%orig;
	NSLog(@"-(id) albumArtForStation:(id)");
}

-(void) createGenreStationForStationId:(id) {
	%orig;
	NSLog(@"-(void) createGenreStationForStationId:(id)");
}

-(bool) shouldAlertSubscriptionRenewalRequestWithURL:(id) {
	%orig;
	NSLog(@"-(bool) shouldAlertSubscriptionRenewalRequestWithURL:(id)");
}

-(void) ratePositive {
	%orig;
	NSLog(@"-(void) ratePositive");
}

-(void) rateNegative {
	%orig;
	NSLog(@"-(void) rateNegative");
}

-(bool) shouldAlertMaintenanceMode {
	%orig;
	NSLog(@"-(bool) shouldAlertMaintenanceMode");
}

-(void) genresDidChange {
	%orig;
	NSLog(@"-(void) genresDidChange");
}

-(bool) shouldDisableInsufficientConnectivity {
	%orig;
	NSLog(@"-(bool) shouldDisableInsufficientConnectivity");
}

-(void) stationListDidRefresh {
	%orig;
	NSLog(@"-(void) stationListDidRefresh");
}

-(void) albumArtDidLoadWithTrack:(id) {
	%orig;
	NSLog(@"-(void) albumArtDidLoadWithTrack:(id)");
}

-(void) albumArtLoadedforAutoplayTrack:(id) {
	%orig;
	NSLog(@"-(void) albumArtLoadedforAutoplayTrack:(id)");
}

-(void) artDidLoadWithStation:(id) {
	%orig;
	NSLog(@"-(void) artDidLoadWithStation:(id)");
}

-(void) activeStationDidEnd:(bool) {
	%orig;
	NSLog(@"-(void) activeStationDidEnd:(bool)");
}

-(void) stationListSortOrderDidChange:(long long) {
	%orig;
	NSLog(@"-(void) stationListSortOrderDidChange:(long long)");
}

-(void) activeTrackDidEnd {
	%orig;
	NSLog(@"-(void) activeTrackDidEnd");
}

-(id) reportingInfo {
	%orig;
	NSLog(@"-(id) reportingInfo");
}

-(bool) shouldAlertOutOfSkips {
	%orig;
	NSLog(@"-(bool) shouldAlertOutOfSkips");
}

-(bool) shouldAlertOutOfSkipsOnThumbDown {
	%orig;
	NSLog(@"-(bool) shouldAlertOutOfSkipsOnThumbDown");
}

-(bool) shouldAlertAccountSuspended {
	%orig;
	NSLog(@"-(bool) shouldAlertAccountSuspended");
}

-(bool) shouldAlertRetryWithRequest:(long long) service:(id) {
	%orig;
	NSLog(@"-(bool) shouldAlertRetryWithRequest:(long long) service:(id)");
}

-(bool) shouldAlertStationLimitReached {
	%orig;
	NSLog(@"-(bool) shouldAlertStationLimitReached");
}

-(bool) shouldAlertBadLogin {
	%orig;
	NSLog(@"-(bool) shouldAlertBadLogin");
}

-(bool) shouldAlertPasswordSent {
	%orig;
	NSLog(@"-(bool) shouldAlertPasswordSent");
}

-(bool) shouldAlertEmailAddressNotFound {
	%orig;
	NSLog(@"-(bool) shouldAlertEmailAddressNotFound");
}

-(bool) shouldAlertEditingSharedStation {
	%orig;
	NSLog(@"-(bool) shouldAlertEditingSharedStation");
}

-(bool) shouldAlertDeleteLastSeed {
	%orig;
	NSLog(@"-(bool) shouldAlertDeleteLastSeed");
}

-(bool) shouldAlertSelectAtLeastOneStationForQuickMix {
	%orig;
	NSLog(@"-(bool) shouldAlertSelectAtLeastOneStationForQuickMix");
}

-(bool) shouldAlertSwitchAudioType:(id) {
	%orig;
	NSLog(@"-(bool) shouldAlertSwitchAudioType:(id)");
}

-(bool) shouldAlertVideoTestMode {
	%orig;
	NSLog(@"-(bool) shouldAlertVideoTestMode");
}

-(bool) shouldAlertStationExpired {
	%orig;
	NSLog(@"-(bool) shouldAlertStationExpired");
}

-(bool) shouldAlertStationHasNoTracks {
	%orig;
	NSLog(@"-(bool) shouldAlertStationHasNoTracks");
}

-(void) statusDidChange:(long long) {
	%orig;
	NSLog(@"-(void) statusDidChange:(long long)");
}

-(void) didConnect {
	%orig;
	NSLog(@"-(void) didConnect");
}

-(void) skip {
	%orig;
	NSLog(@"-(void) skip");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

%end

%hook PMSyncProxyAccessoryManager

+(void) logDebugMessage:(id) {
	%orig;
	NSLog(@"+(void) logDebugMessage:(id)");
}

+(bool) debugEnabled {
	%orig;
	NSLog(@"+(bool) debugEnabled");
}

+(id) sharedManager {
	%orig;
	NSLog(@"+(id) sharedManager");
}

-(bool) remoteControlTogglePlayPause {
	%orig;
	NSLog(@"-(bool) remoteControlTogglePlayPause");
}

-(bool) remoteControlPause {
	%orig;
	NSLog(@"-(bool) remoteControlPause");
}

-(bool) remoteControlPlay {
	%orig;
	NSLog(@"-(bool) remoteControlPlay");
}

-(bool) remoteControlNextTrack {
	%orig;
	NSLog(@"-(bool) remoteControlNextTrack");
}

-(bool) remoteControlStop {
	%orig;
	NSLog(@"-(bool) remoteControlStop");
}

-(void) setAutoIncCorrID:(int) {
	%orig;
	NSLog(@"-(void) setAutoIncCorrID:(int)");
}

-(void) setAutoPosition:(int) {
	%orig;
	NSLog(@"-(void) setAutoPosition:(int)");
}

-(void) setAutoIncNumericId:(int) {
	%orig;
	NSLog(@"-(void) setAutoIncNumericId:(int)");
}

-(void) setAutoIncItemListId:(int) {
	%orig;
	NSLog(@"-(void) setAutoIncItemListId:(int)");
}

-(void) setContentMapsBuilt:(bool) {
	%orig;
	NSLog(@"-(void) setContentMapsBuilt:(bool)");
}

-(void) setNumericIdToItemMap:(id) {
	%orig;
	NSLog(@"-(void) setNumericIdToItemMap:(id)");
}

-(void) setNumericIdToListIdMap:(id) {
	%orig;
	NSLog(@"-(void) setNumericIdToListIdMap:(id)");
}

-(void) setListIdToChildrenIdListMap:(id) {
	%orig;
	NSLog(@"-(void) setListIdToChildrenIdListMap:(id)");
}

-(void) setVoiceCommandsRegistered:(bool) {
	%orig;
	NSLog(@"-(void) setVoiceCommandsRegistered:(bool)");
}

-(void) setSyncCustomPresets:(bool) {
	%orig;
	NSLog(@"-(void) setSyncCustomPresets:(bool)");
}

-(void) setHasRegisteredSyncCommands:(bool) {
	%orig;
	NSLog(@"-(void) setHasRegisteredSyncCommands:(bool)");
}

-(void) setChoiceSetsRegistered:(bool) {
	%orig;
	NSLog(@"-(void) setChoiceSetsRegistered:(bool)");
}

-(void) setChoiceSetsLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setChoiceSetsLoaded:(bool)");
}

-(void) setCurrentSyncVersion:(int) {
	%orig;
	NSLog(@"-(void) setCurrentSyncVersion:(int)");
}

-(void) setHmiLevel:(id) {
	%orig;
	NSLog(@"-(void) setHmiLevel:(id)");
}

-(void) setAudioStreamingState:(id) {
	%orig;
	NSLog(@"-(void) setAudioStreamingState:(id)");
}

-(void) setQueuedSpeech:(id) {
	%orig;
	NSLog(@"-(void) setQueuedSpeech:(id)");
}

-(void) setQueuedCommands:(id) {
	%orig;
	NSLog(@"-(void) setQueuedCommands:(id)");
}

-(void) setShowingError:(bool) {
	%orig;
	NSLog(@"-(void) setShowingError:(bool)");
}

-(void) setSentAlbumArtKeys:(id) {
	%orig;
	NSLog(@"-(void) setSentAlbumArtKeys:(id)");
}

-(id) queuedSpeech {
	%orig;
	NSLog(@"-(id) queuedSpeech");
}

-(id) hmiLevel {
	%orig;
	NSLog(@"-(id) hmiLevel");
}

-(void) showAccessoryLockScreen {
	%orig;
	NSLog(@"-(void) showAccessoryLockScreen");
}

-(id) roadblockViewController {
	%orig;
	NSLog(@"-(id) roadblockViewController");
}

-(id) brandingImageView {
	%orig;
	NSLog(@"-(id) brandingImageView");
}

-(id) defaultBrandingView {
	%orig;
	NSLog(@"-(id) defaultBrandingView");
}

-(bool) isHmiLevelFullOrLimited {
	%orig;
	NSLog(@"-(bool) isHmiLevelFullOrLimited");
}

-(int) autoIncCorrID {
	%orig;
	NSLog(@"-(int) autoIncCorrID");
}

-(void) sendRPCRequest:(id) {
	%orig;
	NSLog(@"-(void) sendRPCRequest:(id)");
}

-(void) showTextOnField1:(id) andField2:(id) andField3:(id) withAlignment:(id) {
	%orig;
	NSLog(@"-(void) showTextOnField1:(id) andField2:(id) andField3:(id) withAlignment:(id)");
}

-(id) createSoftButtonFor:(id) {
	%orig;
	NSLog(@"-(id) createSoftButtonFor:(id)");
}

-(id) syncDisplayType {
	%orig;
	NSLog(@"-(id) syncDisplayType");
}

-(id) cachedActiveTrack {
	%orig;
	NSLog(@"-(id) cachedActiveTrack");
}

-(id) getActiveStationName {
	%orig;
	NSLog(@"-(id) getActiveStationName");
}

-(int) getSyncVersion {
	%orig;
	NSLog(@"-(int) getSyncVersion");
}

-(bool) syncCustomPresets {
	%orig;
	NSLog(@"-(bool) syncCustomPresets");
}

-(id) generateCustomPresets {
	%orig;
	NSLog(@"-(id) generateCustomPresets");
}

-(void) showCenteredTextOnField1:(id) andField2:(id) {
	%orig;
	NSLog(@"-(void) showCenteredTextOnField1:(id) andField2:(id)");
}

-(bool) supportsIcons {
	%orig;
	NSLog(@"-(bool) supportsIcons");
}

-(int) currentSyncVersion {
	%orig;
	NSLog(@"-(int) currentSyncVersion");
}

-(id) syncMsgVersion {
	%orig;
	NSLog(@"-(id) syncMsgVersion");
}

-(id) elapsedPollingTimer {
	%orig;
	NSLog(@"-(id) elapsedPollingTimer");
}

-(void) setElapsedPollingTimer:(id) {
	%orig;
	NSLog(@"-(void) setElapsedPollingTimer:(id)");
}

-(double) lastElapsedPlaytime {
	%orig;
	NSLog(@"-(double) lastElapsedPlaytime");
}

-(void) setCachedActiveTrack:(id) {
	%orig;
	NSLog(@"-(void) setCachedActiveTrack:(id)");
}

-(void) updateSyncProxyStatus {
	%orig;
	NSLog(@"-(void) updateSyncProxyStatus");
}

-(void) setLastElapsedPlaytime:(double) {
	%orig;
	NSLog(@"-(void) setLastElapsedPlaytime:(double)");
}

-(bool) isLoggedOut {
	%orig;
	NSLog(@"-(bool) isLoggedOut");
}

-(void) updateShowingSyncProxyConnection {
	%orig;
	NSLog(@"-(void) updateShowingSyncProxyConnection");
}

-(void) registerSyncCommands {
	%orig;
	NSLog(@"-(void) registerSyncCommands");
}

-(void) handlePausingMusicWhileSyncIsSpeaking {
	%orig;
	NSLog(@"-(void) handlePausingMusicWhileSyncIsSpeaking");
}

-(bool) handleMessagingFor:(id) {
	%orig;
	NSLog(@"-(bool) handleMessagingFor:(id)");
}

-(void) handleDisplayingMetadata {
	%orig;
	NSLog(@"-(void) handleDisplayingMetadata");
}

-(bool) canShowMessageToUser {
	%orig;
	NSLog(@"-(bool) canShowMessageToUser");
}

-(void) showMessage:(id) {
	%orig;
	NSLog(@"-(void) showMessage:(id)");
}

-(void) showAlertField1:(id) andField2:(id) andSpeak:(id) {
	%orig;
	NSLog(@"-(void) showAlertField1:(id) andField2:(id) andSpeak:(id)");
}

-(void) showLoginRequiredError {
	%orig;
	NSLog(@"-(void) showLoginRequiredError");
}

-(bool) phoneDialogIsBeingDisplayed {
	%orig;
	NSLog(@"-(bool) phoneDialogIsBeingDisplayed");
}

-(bool) presentUserWithMessage:(id) andAlert:(id) andSpeak:(id) {
	%orig;
	NSLog(@"-(bool) presentUserWithMessage:(id) andAlert:(id) andSpeak:(id)");
}

-(bool) insufficientConnectivityOrOffline {
	%orig;
	NSLog(@"-(bool) insufficientConnectivityOrOffline");
}

-(void) showNoInternetError {
	%orig;
	NSLog(@"-(void) showNoInternetError");
}

-(bool) interventionRequredLicensingRestrictions {
	%orig;
	NSLog(@"-(bool) interventionRequredLicensingRestrictions");
}

-(bool) noActiveStation {
	%orig;
	NSLog(@"-(bool) noActiveStation");
}

-(bool) isPausedByUser {
	%orig;
	NSLog(@"-(bool) isPausedByUser");
}

-(void) setMediaTimerIsPaused:(bool) {
	%orig;
	NSLog(@"-(void) setMediaTimerIsPaused:(bool)");
}

-(id) sentAlbumArtKeys {
	%orig;
	NSLog(@"-(id) sentAlbumArtKeys");
}

-(void) sendAlbumArtForTrack:(id) {
	%orig;
	NSLog(@"-(void) sendAlbumArtForTrack:(id)");
}

-(void) showTextOnField1:(id) {
	%orig;
	NSLog(@"-(void) showTextOnField1:(id)");
}

-(void) showCenteredTextOnField1:(id) {
	%orig;
	NSLog(@"-(void) showCenteredTextOnField1:(id)");
}

-(void) showEmptyAlbumArt {
	%orig;
	NSLog(@"-(void) showEmptyAlbumArt");
}

-(id) audioStreamingState {
	%orig;
	NSLog(@"-(id) audioStreamingState");
}

-(void) resetQueuedSpeech {
	%orig;
	NSLog(@"-(void) resetQueuedSpeech");
}

-(void) getStationPlaylistFailed:(id) {
	%orig;
	NSLog(@"-(void) getStationPlaylistFailed:(id)");
}

-(void) thumbSuccessForTrack:(id) {
	%orig;
	NSLog(@"-(void) thumbSuccessForTrack:(id)");
}

-(void) setIsPausedByUser:(bool) {
	%orig;
	NSLog(@"-(void) setIsPausedByUser:(bool)");
}

-(id) vehicleProperties {
	%orig;
	NSLog(@"-(id) vehicleProperties");
}

-(void) initializeElapsedPollingTimer {
	%orig;
	NSLog(@"-(void) initializeElapsedPollingTimer");
}

-(void) setStaticPresets:(id) {
	%orig;
	NSLog(@"-(void) setStaticPresets:(id)");
}

-(void) listen {
	%orig;
	NSLog(@"-(void) listen");
}

-(int) addCommandsPending {
	%orig;
	NSLog(@"-(int) addCommandsPending");
}

-(void) setAddCommandsPending:(int) {
	%orig;
	NSLog(@"-(void) setAddCommandsPending:(int)");
}

-(id) queuedCommands {
	%orig;
	NSLog(@"-(id) queuedCommands");
}

-(id) sentCommandIds {
	%orig;
	NSLog(@"-(id) sentCommandIds");
}

-(void) setSentCommandIds:(id) {
	%orig;
	NSLog(@"-(void) setSentCommandIds:(id)");
}

-(bool) hasRegisteredSyncCommands {
	%orig;
	NSLog(@"-(bool) hasRegisteredSyncCommands");
}

-(void) setVrHelpTexts:(id) {
	%orig;
	NSLog(@"-(void) setVrHelpTexts:(id)");
}

-(id) createVrHelpItems:(id) {
	%orig;
	NSLog(@"-(id) createVrHelpItems:(id)");
}

-(int) autoPosition {
	%orig;
	NSLog(@"-(int) autoPosition");
}

-(void) sendQueuedCommandBatch {
	%orig;
	NSLog(@"-(void) sendQueuedCommandBatch");
}

-(id) buildVoiceCommandForContainerContentItem:(id) {
	%orig;
	NSLog(@"-(id) buildVoiceCommandForContainerContentItem:(id)");
}

-(id) buildVoiceCommandForStationContentItem:(id) {
	%orig;
	NSLog(@"-(id) buildVoiceCommandForStationContentItem:(id)");
}

-(id) numericIdToItemMap {
	%orig;
	NSLog(@"-(id) numericIdToItemMap");
}

-(bool) supportsOneLineAlert {
	%orig;
	NSLog(@"-(bool) supportsOneLineAlert");
}

-(void) showAlertField1:(id) andField2:(id) {
	%orig;
	NSLog(@"-(void) showAlertField1:(id) andField2:(id)");
}

-(id) currentTrackToken {
	%orig;
	NSLog(@"-(id) currentTrackToken");
}

-(void) deletePreviousAlbumArt {
	%orig;
	NSLog(@"-(void) deletePreviousAlbumArt");
}

-(void) setCurrentTrackToken:(id) {
	%orig;
	NSLog(@"-(void) setCurrentTrackToken:(id)");
}

-(bool) choiceSetsRegistered {
	%orig;
	NSLog(@"-(bool) choiceSetsRegistered");
}

-(void) showContentListForId:(id) item:(id) {
	%orig;
	NSLog(@"-(void) showContentListForId:(id) item:(id)");
}

-(void) speakContentForListId:(id) {
	%orig;
	NSLog(@"-(void) speakContentForListId:(id)");
}

-(id) listIdToChildrenIdListMap {
	%orig;
	NSLog(@"-(id) listIdToChildrenIdListMap");
}

-(void) appendText:(id) toSpeak:(id) {
	%orig;
	NSLog(@"-(void) appendText:(id) toSpeak:(id)");
}

-(void) speakNextQueuedItem {
	%orig;
	NSLog(@"-(void) speakNextQueuedItem");
}

-(void) setUserControlledPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setUserControlledPlaying:(bool)");
}

-(id) staticPresets {
	%orig;
	NSLog(@"-(id) staticPresets");
}

-(void) listMyMusicWithVoice:(bool) forListId:(id) {
	%orig;
	NSLog(@"-(void) listMyMusicWithVoice:(bool) forListId:(id)");
}

-(void) doThumbDown {
	%orig;
	NSLog(@"-(void) doThumbDown");
}

-(void) doThumbUp {
	%orig;
	NSLog(@"-(void) doThumbUp");
}

-(void) doShuffle {
	%orig;
	NSLog(@"-(void) doShuffle");
}

-(void) doRepeat:(long long) {
	%orig;
	NSLog(@"-(void) doRepeat:(long long)");
}

-(void) doCreateStationPrompt {
	%orig;
	NSLog(@"-(void) doCreateStationPrompt");
}

-(void) createStationFromArtist {
	%orig;
	NSLog(@"-(void) createStationFromArtist");
}

-(void) createStationFromSong {
	%orig;
	NSLog(@"-(void) createStationFromSong");
}

-(void) doSkip {
	%orig;
	NSLog(@"-(void) doSkip");
}

-(void) doReplay {
	%orig;
	NSLog(@"-(void) doReplay");
}

-(void) speakSongInfo {
	%orig;
	NSLog(@"-(void) speakSongInfo");
}

-(id) numericIdToListIdMap {
	%orig;
	NSLog(@"-(id) numericIdToListIdMap");
}

-(bool) choiceSetsLoaded {
	%orig;
	NSLog(@"-(bool) choiceSetsLoaded");
}

-(bool) shouldRefreshContentMaps {
	%orig;
	NSLog(@"-(bool) shouldRefreshContentMaps");
}

-(void) setShouldRefreshContentMaps:(bool) {
	%orig;
	NSLog(@"-(void) setShouldRefreshContentMaps:(bool)");
}

-(void) refreshAllContentMaps {
	%orig;
	NSLog(@"-(void) refreshAllContentMaps");
}

-(void) setSyncMsgVersion:(id) {
	%orig;
	NSLog(@"-(void) setSyncMsgVersion:(id)");
}

-(void) setSyncDisplayType:(id) {
	%orig;
	NSLog(@"-(void) setSyncDisplayType:(id)");
}

-(void) saveVehicleProperties:(id) {
	%orig;
	NSLog(@"-(void) saveVehicleProperties:(id)");
}

-(void) setSupportsOneLineAlert:(bool) {
	%orig;
	NSLog(@"-(void) setSupportsOneLineAlert:(bool)");
}

-(void) setAppIconPutFileID:(id) {
	%orig;
	NSLog(@"-(void) setAppIconPutFileID:(id)");
}

-(id) appIconPutFileID {
	%orig;
	NSLog(@"-(id) appIconPutFileID");
}

-(void) setVehicleProperties:(id) {
	%orig;
	NSLog(@"-(void) setVehicleProperties:(id)");
}

-(bool) stationLimitReached {
	%orig;
	NSLog(@"-(bool) stationLimitReached");
}

-(void) setStationLimitReached:(bool) {
	%orig;
	NSLog(@"-(void) setStationLimitReached:(bool)");
}

-(bool) speakText:(id) {
	%orig;
	NSLog(@"-(bool) speakText:(id)");
}

-(bool) isBluetoothAudio {
	%orig;
	NSLog(@"-(bool) isBluetoothAudio");
}

-(bool) isUsbAudio {
	%orig;
	NSLog(@"-(bool) isUsbAudio");
}

-(void) showCurrentSongAlert:(id) {
	%orig;
	NSLog(@"-(void) showCurrentSongAlert:(id)");
}

-(id) reportingIdentifier {
	%orig;
	NSLog(@"-(id) reportingIdentifier");
}

-(void) removeAllContentMaps {
	%orig;
	NSLog(@"-(void) removeAllContentMaps");
}

-(void) refreshContentMapsForItem:(id) {
	%orig;
	NSLog(@"-(void) refreshContentMapsForItem:(id)");
}

-(void) addItemToPresets:(id) {
	%orig;
	NSLog(@"-(void) addItemToPresets:(id)");
}

-(void) removeVoiceCommandForItem:(id) {
	%orig;
	NSLog(@"-(void) removeVoiceCommandForItem:(id)");
}

-(id) removeContentMapsForItem:(id) {
	%orig;
	NSLog(@"-(id) removeContentMapsForItem:(id)");
}

-(void) buildContentMapForItems:(id) withParentId:(id) listId:(id) inMixedList:(bool) forceSend:(bool) {
	%orig;
	NSLog(@"-(void) buildContentMapForItems:(id) withParentId:(id) listId:(id) inMixedList:(bool) forceSend:(bool)");
}

-(int) autoIncNumericId {
	%orig;
	NSLog(@"-(int) autoIncNumericId");
}

-(id) createChoiceForItem:(id) withId:(id) inMixedList:(bool) {
	%orig;
	NSLog(@"-(id) createChoiceForItem:(id) withId:(id) inMixedList:(bool)");
}

-(void) addVoiceCommandForItem:(id) itemIsNew:(bool) {
	%orig;
	NSLog(@"-(void) addVoiceCommandForItem:(id) itemIsNew:(bool)");
}

-(int) autoIncItemListId {
	%orig;
	NSLog(@"-(int) autoIncItemListId");
}

-(void) registerChoiceSetForChoiceList:(id) withId:(id) isFinalList:(bool) {
	%orig;
	NSLog(@"-(void) registerChoiceSetForChoiceList:(id) withId:(id) isFinalList:(bool)");
}

-(bool) voiceCommandsRegistered {
	%orig;
	NSLog(@"-(bool) voiceCommandsRegistered");
}

-(id) buildVoiceCommandForContentItem:(id) {
	%orig;
	NSLog(@"-(id) buildVoiceCommandForContentItem:(id)");
}

-(void) buildAllContentMaps {
	%orig;
	NSLog(@"-(void) buildAllContentMaps");
}

-(void) onOnDriverDistraction:(id) {
	%orig;
	NSLog(@"-(void) onOnDriverDistraction:(id)");
}

-(void) onOnHMIStatus:(id) {
	%orig;
	NSLog(@"-(void) onOnHMIStatus:(id)");
}

-(void) onProxyClosed {
	%orig;
	NSLog(@"-(void) onProxyClosed");
}

-(void) onProxyOpened {
	%orig;
	NSLog(@"-(void) onProxyOpened");
}

-(void) onAddCommandResponse:(id) {
	%orig;
	NSLog(@"-(void) onAddCommandResponse:(id)");
}

-(void) onAddSubMenuResponse:(id) {
	%orig;
	NSLog(@"-(void) onAddSubMenuResponse:(id)");
}

-(void) onAlertResponse:(id) {
	%orig;
	NSLog(@"-(void) onAlertResponse:(id)");
}

-(void) onCreateInteractionChoiceSetResponse:(id) {
	%orig;
	NSLog(@"-(void) onCreateInteractionChoiceSetResponse:(id)");
}

-(void) onDeleteCommandResponse:(id) {
	%orig;
	NSLog(@"-(void) onDeleteCommandResponse:(id)");
}

-(void) onDeleteFileResponse:(id) {
	%orig;
	NSLog(@"-(void) onDeleteFileResponse:(id)");
}

-(void) onDeleteInteractionChoiceSetResponse:(id) {
	%orig;
	NSLog(@"-(void) onDeleteInteractionChoiceSetResponse:(id)");
}

-(void) onDeleteSubMenuResponse:(id) {
	%orig;
	NSLog(@"-(void) onDeleteSubMenuResponse:(id)");
}

-(void) onGenericResponse:(id) {
	%orig;
	NSLog(@"-(void) onGenericResponse:(id)");
}

-(void) onOnAppInterfaceUnregistered:(id) {
	%orig;
	NSLog(@"-(void) onOnAppInterfaceUnregistered:(id)");
}

-(void) onOnButtonEvent:(id) {
	%orig;
	NSLog(@"-(void) onOnButtonEvent:(id)");
}

-(void) onOnButtonPress:(id) {
	%orig;
	NSLog(@"-(void) onOnButtonPress:(id)");
}

-(void) onOnCommand:(id) {
	%orig;
	NSLog(@"-(void) onOnCommand:(id)");
}

-(void) onOnTBTClientState:(id) {
	%orig;
	NSLog(@"-(void) onOnTBTClientState:(id)");
}

-(void) onPerformInteractionResponse:(id) {
	%orig;
	NSLog(@"-(void) onPerformInteractionResponse:(id)");
}

-(void) onPutFileResponse:(id) {
	%orig;
	NSLog(@"-(void) onPutFileResponse:(id)");
}

-(void) onRegisterAppInterfaceResponse:(id) {
	%orig;
	NSLog(@"-(void) onRegisterAppInterfaceResponse:(id)");
}

-(void) onResetGlobalPropertiesResponse:(id) {
	%orig;
	NSLog(@"-(void) onResetGlobalPropertiesResponse:(id)");
}

-(void) onSetAppIconResponse:(id) {
	%orig;
	NSLog(@"-(void) onSetAppIconResponse:(id)");
}

-(void) onSetGlobalPropertiesResponse:(id) {
	%orig;
	NSLog(@"-(void) onSetGlobalPropertiesResponse:(id)");
}

-(void) onSetMediaClockTimerResponse:(id) {
	%orig;
	NSLog(@"-(void) onSetMediaClockTimerResponse:(id)");
}

-(void) onShowResponse:(id) {
	%orig;
	NSLog(@"-(void) onShowResponse:(id)");
}

-(void) onSpeakResponse:(id) {
	%orig;
	NSLog(@"-(void) onSpeakResponse:(id)");
}

-(void) onSubscribeButtonResponse:(id) {
	%orig;
	NSLog(@"-(void) onSubscribeButtonResponse:(id)");
}

-(void) onUnregisterAppInterfaceResponse:(id) {
	%orig;
	NSLog(@"-(void) onUnregisterAppInterfaceResponse:(id)");
}

-(void) onUnsubscribeButtonResponse:(id) {
	%orig;
	NSLog(@"-(void) onUnsubscribeButtonResponse:(id)");
}

-(void) showTextOnField1:(id) andField2:(id) withAlignment:(id) {
	%orig;
	NSLog(@"-(void) showTextOnField1:(id) andField2:(id) withAlignment:(id)");
}

-(void) showCenteredTextOnField1:(id) andField2:(id) andField3:(id) {
	%orig;
	NSLog(@"-(void) showCenteredTextOnField1:(id) andField2:(id) andField3:(id)");
}

-(id) buildVoiceCommandForAlbumContentItem:(id) {
	%orig;
	NSLog(@"-(id) buildVoiceCommandForAlbumContentItem:(id)");
}

-(id) buildVoiceCommandForPlaylistContentItem:(id) {
	%orig;
	NSLog(@"-(id) buildVoiceCommandForPlaylistContentItem:(id)");
}

-(bool) shouldAlertStationReplay {
	%orig;
	NSLog(@"-(bool) shouldAlertStationReplay");
}

-(void) debugRequested:(id) {
	%orig;
	NSLog(@"-(void) debugRequested:(id)");
}

-(void) buildContentMapsWithItems:(id) andListId:(id) {
	%orig;
	NSLog(@"-(void) buildContentMapsWithItems:(id) andListId:(id)");
}

-(void) setRoadblockViewController:(id) {
	%orig;
	NSLog(@"-(void) setRoadblockViewController:(id)");
}

-(id) shimmerContainer {
	%orig;
	NSLog(@"-(id) shimmerContainer");
}

-(void) setShimmerContainer:(id) {
	%orig;
	NSLog(@"-(void) setShimmerContainer:(id)");
}

-(void) setDefaultBrandingView:(id) {
	%orig;
	NSLog(@"-(void) setDefaultBrandingView:(id)");
}

-(void) setBrandingImageView:(id) {
	%orig;
	NSLog(@"-(void) setBrandingImageView:(id)");
}

-(int) stationCounter {
	%orig;
	NSLog(@"-(int) stationCounter");
}

-(void) setStationCounter:(int) {
	%orig;
	NSLog(@"-(void) setStationCounter:(int)");
}

-(id) presetCorrelationIds {
	%orig;
	NSLog(@"-(id) presetCorrelationIds");
}

-(void) setPresetCorrelationIds:(id) {
	%orig;
	NSLog(@"-(void) setPresetCorrelationIds:(id)");
}

-(bool) contentMapsBuilt {
	%orig;
	NSLog(@"-(bool) contentMapsBuilt");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) createStationFromType:(id) {
	%orig;
	NSLog(@"-(void) createStationFromType:(id)");
}

-(void) station:(id) addedAtIndex:(id) {
	%orig;
	NSLog(@"-(void) station:(id) addedAtIndex:(id)");
}

-(void) stationRemoved:(id) {
	%orig;
	NSLog(@"-(void) stationRemoved:(id)");
}

-(bool) shouldAlertMaintenanceMode {
	%orig;
	NSLog(@"-(bool) shouldAlertMaintenanceMode");
}

-(void) offlineModeDidChange:(id) {
	%orig;
	NSLog(@"-(void) offlineModeDidChange:(id)");
}

-(bool) shouldDisableInsufficientConnectivity {
	%orig;
	NSLog(@"-(bool) shouldDisableInsufficientConnectivity");
}

-(void) stationListDidRefresh {
	%orig;
	NSLog(@"-(void) stationListDidRefresh");
}

-(void) albumArtDidLoadWithTrack:(id) {
	%orig;
	NSLog(@"-(void) albumArtDidLoadWithTrack:(id)");
}

-(void) albumArtLoadedforAutoplayTrack:(id) {
	%orig;
	NSLog(@"-(void) albumArtLoadedforAutoplayTrack:(id)");
}

-(void) createStationDidFail {
	%orig;
	NSLog(@"-(void) createStationDidFail");
}

-(id) reportingInfo {
	%orig;
	NSLog(@"-(id) reportingInfo");
}

-(void) didBecomeKeyController {
	%orig;
	NSLog(@"-(void) didBecomeKeyController");
}

-(void) willResignKeyController {
	%orig;
	NSLog(@"-(void) willResignKeyController");
}

-(bool) shouldAlertOutOfSkips {
	%orig;
	NSLog(@"-(bool) shouldAlertOutOfSkips");
}

-(bool) shouldAlertOutOfSkipsOnThumbDown {
	%orig;
	NSLog(@"-(bool) shouldAlertOutOfSkipsOnThumbDown");
}

-(bool) shouldAlertAccountSuspended {
	%orig;
	NSLog(@"-(bool) shouldAlertAccountSuspended");
}

-(bool) shouldAlertRetryWithRequest:(long long) service:(id) {
	%orig;
	NSLog(@"-(bool) shouldAlertRetryWithRequest:(long long) service:(id)");
}

-(bool) shouldAlertSubscriptionRenewalRequest {
	%orig;
	NSLog(@"-(bool) shouldAlertSubscriptionRenewalRequest");
}

-(bool) shouldAlertTrialExpiration {
	%orig;
	NSLog(@"-(bool) shouldAlertTrialExpiration");
}

-(bool) shouldAlertStationLimitReached {
	%orig;
	NSLog(@"-(bool) shouldAlertStationLimitReached");
}

-(bool) shouldAlertBadLogin {
	%orig;
	NSLog(@"-(bool) shouldAlertBadLogin");
}

-(bool) shouldAlertPasswordSent {
	%orig;
	NSLog(@"-(bool) shouldAlertPasswordSent");
}

-(bool) shouldAlertEmailAddressNotFound {
	%orig;
	NSLog(@"-(bool) shouldAlertEmailAddressNotFound");
}

-(bool) shouldAlertEditingSharedStation {
	%orig;
	NSLog(@"-(bool) shouldAlertEditingSharedStation");
}

-(bool) shouldAlertDeleteLastSeed {
	%orig;
	NSLog(@"-(bool) shouldAlertDeleteLastSeed");
}

-(bool) shouldAlertSelectAtLeastOneStationForQuickMix {
	%orig;
	NSLog(@"-(bool) shouldAlertSelectAtLeastOneStationForQuickMix");
}

-(bool) shouldAlertSwitchAudioType:(id) {
	%orig;
	NSLog(@"-(bool) shouldAlertSwitchAudioType:(id)");
}

-(bool) shouldAlertVideoTestMode {
	%orig;
	NSLog(@"-(bool) shouldAlertVideoTestMode");
}

-(bool) shouldAlertStationExpired {
	%orig;
	NSLog(@"-(bool) shouldAlertStationExpired");
}

-(bool) shouldAlertStationHasNoTracks {
	%orig;
	NSLog(@"-(bool) shouldAlertStationHasNoTracks");
}

-(id) accessoryId {
	%orig;
	NSLog(@"-(id) accessoryId");
}

-(void) invalidateElapsedPollingTimer {
	%orig;
	NSLog(@"-(void) invalidateElapsedPollingTimer");
}

-(void) elapsedPoll {
	%orig;
	NSLog(@"-(void) elapsedPoll");
}

-(void) handlerDidChange:(id) {
	%orig;
	NSLog(@"-(void) handlerDidChange:(id)");
}

-(void) clearHandler {
	%orig;
	NSLog(@"-(void) clearHandler");
}

-(void) playStateDidChange:(bool) {
	%orig;
	NSLog(@"-(void) playStateDidChange:(bool)");
}

-(void) currentTrackDidEnd {
	%orig;
	NSLog(@"-(void) currentTrackDidEnd");
}

-(void) currentTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) currentTrackDidSuspendPlayback");
}

-(void) currentTrackWillChange {
	%orig;
	NSLog(@"-(void) currentTrackWillChange");
}

-(void) currentTrackDidChange {
	%orig;
	NSLog(@"-(void) currentTrackDidChange");
}

-(void) trackRatingDidChange {
	%orig;
	NSLog(@"-(void) trackRatingDidChange");
}

-(void) trackBookmarkDidChangeForTrack:(id) {
	%orig;
	NSLog(@"-(void) trackBookmarkDidChangeForTrack:(id)");
}

-(void) artistBookmarkDidChangeForTrack:(id) {
	%orig;
	NSLog(@"-(void) artistBookmarkDidChangeForTrack:(id)");
}

-(void) currentStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) currentStationWasDeleted:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) setMake:(id) {
	%orig;
	NSLog(@"-(void) setMake:(id)");
}

-(id) make {
	%orig;
	NSLog(@"-(id) make");
}

-(void) closeConnection {
	%orig;
	NSLog(@"-(void) closeConnection");
}

-(bool) isConnected {
	%orig;
	NSLog(@"-(bool) isConnected");
}

-(id) clientTimestamp {
	%orig;
	NSLog(@"-(id) clientTimestamp");
}

-(void) statusDidChange:(long long) {
	%orig;
	NSLog(@"-(void) statusDidChange:(long long)");
}

-(void) handleResponse:(id) {
	%orig;
	NSLog(@"-(void) handleResponse:(id)");
}

-(bool) showingError {
	%orig;
	NSLog(@"-(bool) showingError");
}

-(id) whitelist {
	%orig;
	NSLog(@"-(id) whitelist");
}

-(void) setWhitelist:(id) {
	%orig;
	NSLog(@"-(void) setWhitelist:(id)");
}

-(void) setProxy:(id) {
	%orig;
	NSLog(@"-(void) setProxy:(id)");
}

-(void) onError:(id) {
	%orig;
	NSLog(@"-(void) onError:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) handler {
	%orig;
	NSLog(@"-(id) handler");
}

-(void) setHandler:(id) {
	%orig;
	NSLog(@"-(void) setHandler:(id)");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(id) proxy {
	%orig;
	NSLog(@"-(id) proxy");
}

-(id) infoButton {
	%orig;
	NSLog(@"-(id) infoButton");
}

-(void) setInfoButton:(id) {
	%orig;
	NSLog(@"-(void) setInfoButton:(id)");
}

-(void) dataUpdated:(id) {
	%orig;
	NSLog(@"-(void) dataUpdated:(id)");
}

%end

%hook PMLevel2SLAPCardViewCellLayoutAttributes

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) copyWithZone:(void*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(void*)");
}

%end

%hook IconImageAttachment

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithData:(id) ofType:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id) ofType:(id)");
}

-(CGRect) attachmentBoundsForTextContainer:(id) proposedLineFragment:(CGRect) glyphPosition:(CGPoint) characterIndex:(long long) {
	%orig;
	NSLog(@"-(CGRect) attachmentBoundsForTextContainer:(id) proposedLineFragment:(CGRect) glyphPosition:(CGPoint) characterIndex:(long long)");
}

%end

%hook VoiceAssistantIntentResponse

-(id) initWithCode:(long long) userActivity:(id) {
	%orig;
	NSLog(@"-(id) initWithCode:(long long) userActivity:(id)");
}

-(void) setCode:(long long) {
	%orig;
	NSLog(@"-(void) setCode:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(long long) code {
	%orig;
	NSLog(@"-(long long) code");
}

%end

%hook VoiceAssistantIntent

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

%end

%hook PMMenuBarButton

-(id) initWithTarget:(id) action:(SEL) panGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(id) initWithTarget:(id) action:(SEL) panGestureRecognizer:(id)");
}

-(id) menuImageWithBadge {
	%orig;
	NSLog(@"-(id) menuImageWithBadge");
}

-(void) setMenuImageWithBadge:(id) {
	%orig;
	NSLog(@"-(void) setMenuImageWithBadge:(id)");
}

-(void) updateControlsForThemeColor:(id) {
	%orig;
	NSLog(@"-(void) updateControlsForThemeColor:(id)");
}

-(id) menuImage {
	%orig;
	NSLog(@"-(id) menuImage");
}

-(void) setMenuImage:(id) {
	%orig;
	NSLog(@"-(void) setMenuImage:(id)");
}

-(void) setButtonTintColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonTintColor:(id)");
}

-(id) buttonTintColor {
	%orig;
	NSLog(@"-(id) buttonTintColor");
}

-(id) menuButton {
	%orig;
	NSLog(@"-(id) menuButton");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(bool) hasBadge {
	%orig;
	NSLog(@"-(bool) hasBadge");
}

-(void) setHasBadge:(bool) {
	%orig;
	NSLog(@"-(void) setHasBadge:(bool)");
}

%end

%hook FNFPlayerLayer

-(bool) allowRenderingWhileApplicationInactive {
	%orig;
	NSLog(@"-(bool) allowRenderingWhileApplicationInactive");
}

-(id) initWithConfigs:(?) {
	%orig;
	NSLog(@"-(id) initWithConfigs:(?)");
}

-(bool) _preventPlayback {
	%orig;
	NSLog(@"-(bool) _preventPlayback");
}

-(void) _requestResizeDecompressionSession {
	%orig;
	NSLog(@"-(void) _requestResizeDecompressionSession");
}

-(void) _tryToMoveToNextFrameWithDrawingOn:(bool) {
	%orig;
	NSLog(@"-(void) _tryToMoveToNextFrameWithDrawingOn:(bool)");
}

-(void) _setupBuffers {
	%orig;
	NSLog(@"-(void) _setupBuffers");
}

-(void) displayPixelBuffer:(__CVBuffer*) {
	%orig;
	NSLog(@"-(void) displayPixelBuffer:(__CVBuffer*)");
}

-(void) _drawFrame:(bool) {
	%orig;
	NSLog(@"-(void) _drawFrame:(bool)");
}

-(void) _requestData {
	%orig;
	NSLog(@"-(void) _requestData");
}

-(void) _cleanUpTextures {
	%orig;
	NSLog(@"-(void) _cleanUpTextures");
}

-(void) _invalidateRenderer:(id) {
	%orig;
	NSLog(@"-(void) _invalidateRenderer:(id)");
}

-(void) _releaseTimeBase {
	%orig;
	NSLog(@"-(void) _releaseTimeBase");
}

-(void) _clearBuffers {
	%orig;
	NSLog(@"-(void) _clearBuffers");
}

-(void) _updateReadyForDisplay:(bool) {
	%orig;
	NSLog(@"-(void) _updateReadyForDisplay:(bool)");
}

-(void) _resetGLContext {
	%orig;
	NSLog(@"-(void) _resetGLContext");
}

-(void) dispatchSyncOnRenderingThread:(id) {
	%orig;
	NSLog(@"-(void) dispatchSyncOnRenderingThread:(id)");
}

-(void) _flushBuffers:(unsigned long long) framesEnqueued:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _flushBuffers:(unsigned long long) framesEnqueued:(unsigned long long)");
}

-(void) _addBuffer:(__CVBuffer*) presentationTimeStamp:(?) iFrameEnqueued:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _addBuffer:(__CVBuffer*) presentationTimeStamp:(?) iFrameEnqueued:(unsigned long long)");
}

-(void) display:(__CVBuffer*) presentationTimeStamp:(?) presentationDuration:(?) iFrameEnqueued:(unsigned long long) {
	%orig;
	NSLog(@"-(void) display:(__CVBuffer*) presentationTimeStamp:(?) presentationDuration:(?) iFrameEnqueued:(unsigned long long)");
}

-(void) _handleError:(id) ifIFrameStillValid:(unsigned long long) {
	%orig;
	NSLog(@"-(void) _handleError:(id) ifIFrameStillValid:(unsigned long long)");
}

-(id) playerLayerDelegate {
	%orig;
	NSLog(@"-(id) playerLayerDelegate");
}

-(void) handleDecompressionSessionError:(id) {
	%orig;
	NSLog(@"-(void) handleDecompressionSessionError:(id)");
}

-(void) handleDecompressionSessionError:(id) ifIFrameStillValid:(unsigned long long) {
	%orig;
	NSLog(@"-(void) handleDecompressionSessionError:(id) ifIFrameStillValid:(unsigned long long)");
}

-(bool) flushDisplayReadySampleBuffers {
	%orig;
	NSLog(@"-(bool) flushDisplayReadySampleBuffers");
}

-(bool) flushIfError {
	%orig;
	NSLog(@"-(bool) flushIfError");
}

-(void) enqueueSampleBuffer:(opaqueCMSampleBuffer*) attributes:(unsigned int) {
	%orig;
	NSLog(@"-(void) enqueueSampleBuffer:(opaqueCMSampleBuffer*) attributes:(unsigned int)");
}

-(void) yieldDecompressedBuffer:(__CVBuffer*) presentationTimeStamp:(?) presentationDuration:(?) {
	%orig;
	NSLog(@"-(void) yieldDecompressedBuffer:(__CVBuffer*) presentationTimeStamp:(?) presentationDuration:(?)");
}

-(void) setPlayerLayerDelegate:(id) {
	%orig;
	NSLog(@"-(void) setPlayerLayerDelegate:(id)");
}

-(void) setRenderingThreadPriority:(double) {
	%orig;
	NSLog(@"-(void) setRenderingThreadPriority:(double)");
}

-(void) dispatchAsyncOnRenderingThread:(id) {
	%orig;
	NSLog(@"-(void) dispatchAsyncOnRenderingThread:(id)");
}

-(void) requestLastDisplayedSampleBuffer:(id) onQueue:(?) {
	%orig;
	NSLog(@"-(void) requestLastDisplayedSampleBuffer:(id) onQueue:(?)");
}

-(void) invalidateRenderer:(id) {
	%orig;
	NSLog(@"-(void) invalidateRenderer:(id)");
}

-(void) yieldDecompressedBuffer:(__CVBuffer*) presentationTimeStamp:(?) presentationDuration:(?) iFrame:(unsigned long long) {
	%orig;
	NSLog(@"-(void) yieldDecompressedBuffer:(__CVBuffer*) presentationTimeStamp:(?) presentationDuration:(?) iFrame:(unsigned long long)");
}

-(void) setPreferredTransform:(CGAffineTransform) {
	%orig;
	NSLog(@"-(void) setPreferredTransform:(CGAffineTransform)");
}

-(void) stopRequestingMediaData {
	%orig;
	NSLog(@"-(void) stopRequestingMediaData");
}

-(void) setControlTimebase:(OpaqueCMTimebase*) {
	%orig;
	NSLog(@"-(void) setControlTimebase:(OpaqueCMTimebase*)");
}

-(OpaqueCMTimebase*) controlTimebase {
	%orig;
	NSLog(@"-(OpaqueCMTimebase*) controlTimebase");
}

-(void) flushAndRemoveImage {
	%orig;
	NSLog(@"-(void) flushAndRemoveImage");
}

-(void) _handleError:(id) {
	%orig;
	NSLog(@"-(void) _handleError:(id)");
}

-(id) videoGravity {
	%orig;
	NSLog(@"-(id) videoGravity");
}

-(CGAffineTransform) preferredTransform {
	%orig;
	NSLog(@"-(CGAffineTransform) preferredTransform");
}

-(id) player {
	%orig;
	NSLog(@"-(id) player");
}

-(void) setPlayer:(id) {
	%orig;
	NSLog(@"-(void) setPlayer:(id)");
}

-(bool) isReadyForDisplay {
	%orig;
	NSLog(@"-(bool) isReadyForDisplay");
}

-(void) setVideoGravity:(id) {
	%orig;
	NSLog(@"-(void) setVideoGravity:(id)");
}

-(void) pauseDisplayLink {
	%orig;
	NSLog(@"-(void) pauseDisplayLink");
}

-(void) _setPreferredTransform:(id) {
	%orig;
	NSLog(@"-(void) _setPreferredTransform:(id)");
}

-(void) _displayLinkCallback:(id) {
	%orig;
	NSLog(@"-(void) _displayLinkCallback:(id)");
}

-(void) _destroyBuffers {
	%orig;
	NSLog(@"-(void) _destroyBuffers");
}

-(void) _setupGL {
	%orig;
	NSLog(@"-(void) _setupGL");
}

-(void) _setRenderer:(id) {
	%orig;
	NSLog(@"-(void) _setRenderer:(id)");
}

-(void) pause:(int) {
	%orig;
	NSLog(@"-(void) pause:(int)");
}

-(bool) isReadyForMoreMediaData {
	%orig;
	NSLog(@"-(bool) isReadyForMoreMediaData");
}

-(void) requestMediaDataWhenReadyOnQueue:(id) usingBlock:(id) {
	%orig;
	NSLog(@"-(void) requestMediaDataWhenReadyOnQueue:(id) usingBlock:(id)");
}

-(void) setRenderer:(id) {
	%orig;
	NSLog(@"-(void) setRenderer:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) invalidate {
	%orig;
	NSLog(@"-(void) invalidate");
}

-(void) _applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) _applicationDidBecomeActive:(id)");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(long long) status {
	%orig;
	NSLog(@"-(long long) status");
}

-(void) flush {
	%orig;
	NSLog(@"-(void) flush");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) layoutSublayers {
	%orig;
	NSLog(@"-(void) layoutSublayers");
}

%end

%hook GADGestureRecognizer

-(?*) gestureInfo {
	%orig;
	NSLog(@"-(?*) gestureInfo");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesMoved:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesMoved:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

%end

%hook GADWiggleGestureRecognizer

-(bool) isMovementInYAxisWithCurrentPoint:(CGPoint) previousPoint:(CGPoint) {
	%orig;
	NSLog(@"-(bool) isMovementInYAxisWithCurrentPoint:(CGPoint) previousPoint:(CGPoint)");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesMoved:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesMoved:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

%end

%hook PMForceTouchGestureRecognizer

-(double) minimumForceRequired {
	%orig;
	NSLog(@"-(double) minimumForceRequired");
}

-(void) setMinimumForceRequired:(double) {
	%orig;
	NSLog(@"-(void) setMinimumForceRequired:(double)");
}

-(id) initWithTarget:(id) action:(SEL) {
	%orig;
	NSLog(@"-(id) initWithTarget:(id) action:(SEL)");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesMoved:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesMoved:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

%end

%hook FBAdTouchGestureRecognizer

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesMoved:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesMoved:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

%end

%hook GADNativeAdTapGestureRecognizer

-(id) nativeAdViewPolicy {
	%orig;
	NSLog(@"-(id) nativeAdViewPolicy");
}

-(void) setNativeAdViewPolicy:(id) {
	%orig;
	NSLog(@"-(void) setNativeAdViewPolicy:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMCollectionViewLayout

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setSectionHeadersPinToVisibleBounds:(bool) {
	%orig;
	NSLog(@"-(void) setSectionHeadersPinToVisibleBounds:(bool)");
}

-(bool) sectionHeadersPinToVisibleBounds {
	%orig;
	NSLog(@"-(bool) sectionHeadersPinToVisibleBounds");
}

%end

%hook PMRecentlyPlayedCollectionViewLayout

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) prepareLayout {
	%orig;
	NSLog(@"-(void) prepareLayout");
}

-(bool) shouldInvalidateLayoutForBoundsChange:(CGRect) {
	%orig;
	NSLog(@"-(bool) shouldInvalidateLayoutForBoundsChange:(CGRect)");
}

-(id) layoutAttributesForElementsInRect:(CGRect) {
	%orig;
	NSLog(@"-(id) layoutAttributesForElementsInRect:(CGRect)");
}

-(id) layoutAttributesForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) layoutAttributesForItemAtIndexPath:(id)");
}

-(CGSize) collectionViewContentSize {
	%orig;
	NSLog(@"-(CGSize) collectionViewContentSize");
}

%end

%hook PMMediaCarouselFlowLayout

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

%end

%hook PMLevel2SLAPAnimatingFlowLayout

+(Class) layoutAttributesClass {
	%orig;
	NSLog(@"+(Class) layoutAttributesClass");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initialLayoutAttributesForAppearingItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) initialLayoutAttributesForAppearingItemAtIndexPath:(id)");
}

%end

%hook PremiumAudioAdFlowLayout

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(CGSize) collectionViewContentSize {
	%orig;
	NSLog(@"-(CGSize) collectionViewContentSize");
}

%end

%hook PMLeftAlignedFlowLayout

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) layoutAttributesForElementsInRect:(CGRect) {
	%orig;
	NSLog(@"-(id) layoutAttributesForElementsInRect:(CGRect)");
}

%end

%hook PMPremiumNowPlayingViewFlowLayout

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(CGSize) collectionViewContentSize {
	%orig;
	NSLog(@"-(CGSize) collectionViewContentSize");
}

-(CGPoint) targetContentOffsetForProposedContentOffset:(CGPoint) withScrollingVelocity:(CGPoint) {
	%orig;
	NSLog(@"-(CGPoint) targetContentOffsetForProposedContentOffset:(CGPoint) withScrollingVelocity:(CGPoint)");
}

%end

%hook PMNowPlayingPhoneCardsFlowLayout

+(double) cardTopInset {
	%orig;
	NSLog(@"+(double) cardTopInset");
}

+(double) cardBottomInset {
	%orig;
	NSLog(@"+(double) cardBottomInset");
}

-(double) edgeInsetSide {
	%orig;
	NSLog(@"-(double) edgeInsetSide");
}

-(CGSize) cardSize {
	%orig;
	NSLog(@"-(CGSize) cardSize");
}

-(id) cleanAttributesBasedOnNumberOfItems:(id) attributesList:(id) {
	%orig;
	NSLog(@"-(id) cleanAttributesBasedOnNumberOfItems:(id) attributesList:(id)");
}

-(double) itemHeight {
	%orig;
	NSLog(@"-(double) itemHeight");
}

-(double) itemWidth {
	%orig;
	NSLog(@"-(double) itemWidth");
}

-(double) itemSpacing {
	%orig;
	NSLog(@"-(double) itemSpacing");
}

-(void) prepareLayout {
	%orig;
	NSLog(@"-(void) prepareLayout");
}

-(bool) shouldInvalidateLayoutForBoundsChange:(CGRect) {
	%orig;
	NSLog(@"-(bool) shouldInvalidateLayoutForBoundsChange:(CGRect)");
}

-(id) layoutAttributesForElementsInRect:(CGRect) {
	%orig;
	NSLog(@"-(id) layoutAttributesForElementsInRect:(CGRect)");
}

-(id) layoutAttributesForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) layoutAttributesForItemAtIndexPath:(id)");
}

-(CGPoint) targetContentOffsetForProposedContentOffset:(CGPoint) withScrollingVelocity:(CGPoint) {
	%orig;
	NSLog(@"-(CGPoint) targetContentOffsetForProposedContentOffset:(CGPoint) withScrollingVelocity:(CGPoint)");
}

%end

%hook PMBrowseCollectionViewFlowLayout

-(bool) collectionViewWillAppear {
	%orig;
	NSLog(@"-(bool) collectionViewWillAppear");
}

-(void) setCollectionViewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) setCollectionViewWillAppear:(bool)");
}

-(id) collectionViewDataSource {
	%orig;
	NSLog(@"-(id) collectionViewDataSource");
}

-(id) ownerView {
	%orig;
	NSLog(@"-(id) ownerView");
}

-(void) setOwnerView:(id) {
	%orig;
	NSLog(@"-(void) setOwnerView:(id)");
}

-(void) setCollectionViewDataSource:(id) {
	%orig;
	NSLog(@"-(void) setCollectionViewDataSource:(id)");
}

-(id) browseModules {
	%orig;
	NSLog(@"-(id) browseModules");
}

-(void) setBrowseModules:(id) {
	%orig;
	NSLog(@"-(void) setBrowseModules:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

%end

%hook BrowsePodcastCollectionFlowLayout

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

%end

%hook PMMyStationsCollectionViewLayout

-(void) setInsertedSectionIndices:(id) {
	%orig;
	NSLog(@"-(void) setInsertedSectionIndices:(id)");
}

-(void) setRemovedSectionIndices:(id) {
	%orig;
	NSLog(@"-(void) setRemovedSectionIndices:(id)");
}

-(id) insertedSectionIndices {
	%orig;
	NSLog(@"-(id) insertedSectionIndices");
}

-(id) removedSectionIndices {
	%orig;
	NSLog(@"-(id) removedSectionIndices");
}

-(void) updateLayoutAttributes:(id) {
	%orig;
	NSLog(@"-(void) updateLayoutAttributes:(id)");
}

-(double) adjustedCellHeight {
	%orig;
	NSLog(@"-(double) adjustedCellHeight");
}

-(void) setAdjustedCellHeight:(double) {
	%orig;
	NSLog(@"-(void) setAdjustedCellHeight:(double)");
}

-(id) lastPinnedLayoutAttributes {
	%orig;
	NSLog(@"-(id) lastPinnedLayoutAttributes");
}

-(void) setLastPinnedLayoutAttributes:(id) {
	%orig;
	NSLog(@"-(void) setLastPinnedLayoutAttributes:(id)");
}

-(id) insertedIndexPaths {
	%orig;
	NSLog(@"-(id) insertedIndexPaths");
}

-(void) setInsertedIndexPaths:(id) {
	%orig;
	NSLog(@"-(void) setInsertedIndexPaths:(id)");
}

-(void) setRemovedIndexPaths:(id) {
	%orig;
	NSLog(@"-(void) setRemovedIndexPaths:(id)");
}

-(id) removedIndexPaths {
	%orig;
	NSLog(@"-(id) removedIndexPaths");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) prepareForCollectionViewUpdates:(id) {
	%orig;
	NSLog(@"-(void) prepareForCollectionViewUpdates:(id)");
}

-(void) finalizeCollectionViewUpdates {
	%orig;
	NSLog(@"-(void) finalizeCollectionViewUpdates");
}

-(id) finalLayoutAttributesForDisappearingItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) finalLayoutAttributesForDisappearingItemAtIndexPath:(id)");
}

-(bool) shouldInvalidateLayoutForBoundsChange:(CGRect) {
	%orig;
	NSLog(@"-(bool) shouldInvalidateLayoutForBoundsChange:(CGRect)");
}

-(id) layoutAttributesForElementsInRect:(CGRect) {
	%orig;
	NSLog(@"-(id) layoutAttributesForElementsInRect:(CGRect)");
}

-(id) layoutAttributesForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) layoutAttributesForItemAtIndexPath:(id)");
}

-(id) initialLayoutAttributesForAppearingItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) initialLayoutAttributesForAppearingItemAtIndexPath:(id)");
}

%end

%hook ABQJSONSerialization

+(id) JSONObjectWithData:(id) options:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"+(id) JSONObjectWithData:(id) options:(unsigned long long) error:(id*)");
}

+(id) dataWithJSONObject:(id) options:(unsigned long long) error:(id*) {
	%orig;
	NSLog(@"+(id) dataWithJSONObject:(id) options:(unsigned long long) error:(id*)");
}

%end

%hook ABQAFURLConnectionOperation

+(void) networkRequestThreadEntryPoint:(id) {
	%orig;
	NSLog(@"+(void) networkRequestThreadEntryPoint:(id)");
}

+(id) networkRequestThread {
	%orig;
	NSLog(@"+(id) networkRequestThread");
}

+(id) batchOfRequestOperations:(id) progressBlock:(id) completionBlock:(?) {
	%orig;
	NSLog(@"+(id) batchOfRequestOperations:(id) progressBlock:(id) completionBlock:(?)");
}

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(void) setShouldUseCredentialStorage:(bool) {
	%orig;
	NSLog(@"-(void) setShouldUseCredentialStorage:(bool)");
}

-(bool) shouldUseCredentialStorage {
	%orig;
	NSLog(@"-(bool) shouldUseCredentialStorage");
}

-(unsigned long long) responseStringEncoding {
	%orig;
	NSLog(@"-(unsigned long long) responseStringEncoding");
}

-(void) setResponseStringEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setResponseStringEncoding:(unsigned long long)");
}

-(void) operationDidPause {
	%orig;
	NSLog(@"-(void) operationDidPause");
}

-(void) setAuthenticationChallenge:(id) {
	%orig;
	NSLog(@"-(void) setAuthenticationChallenge:(id)");
}

-(void) setCacheResponse:(id) {
	%orig;
	NSLog(@"-(void) setCacheResponse:(id)");
}

-(void) operationDidStart {
	%orig;
	NSLog(@"-(void) operationDidStart");
}

-(id) cacheResponse {
	%orig;
	NSLog(@"-(id) cacheResponse");
}

-(void) setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id) {
	%orig;
	NSLog(@"-(void) setShouldExecuteAsBackgroundTaskWithExpirationHandler:(id)");
}

-(void) setWillSendRequestForAuthenticationChallengeBlock:(id) {
	%orig;
	NSLog(@"-(void) setWillSendRequestForAuthenticationChallengeBlock:(id)");
}

-(void) setCacheResponseBlock:(id) {
	%orig;
	NSLog(@"-(void) setCacheResponseBlock:(id)");
}

-(void) setRedirectResponseBlock:(id) {
	%orig;
	NSLog(@"-(void) setRedirectResponseBlock:(id)");
}

-(id) runLoopModes {
	%orig;
	NSLog(@"-(id) runLoopModes");
}

-(void) setRunLoopModes:(id) {
	%orig;
	NSLog(@"-(void) setRunLoopModes:(id)");
}

-(void) setTotalBytesRead:(long long) {
	%orig;
	NSLog(@"-(void) setTotalBytesRead:(long long)");
}

-(long long) totalBytesRead {
	%orig;
	NSLog(@"-(long long) totalBytesRead");
}

-(id) credential {
	%orig;
	NSLog(@"-(id) credential");
}

-(void) setRequest:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id)");
}

-(void) setResponse:(id) {
	%orig;
	NSLog(@"-(void) setResponse:(id)");
}

-(bool) connectionShouldUseCredentialStorage:(id) {
	%orig;
	NSLog(@"-(bool) connectionShouldUseCredentialStorage:(id)");
}

-(void) connection:(id) willSendRequestForAuthenticationChallenge:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) willSendRequestForAuthenticationChallenge:(id)");
}

-(id) authenticationChallenge {
	%orig;
	NSLog(@"-(id) authenticationChallenge");
}

-(id) responseData {
	%orig;
	NSLog(@"-(id) responseData");
}

-(void) setResponseData:(id) {
	%orig;
	NSLog(@"-(void) setResponseData:(id)");
}

-(id) outputStream {
	%orig;
	NSLog(@"-(id) outputStream");
}

-(void) cancelConnection {
	%orig;
	NSLog(@"-(void) cancelConnection");
}

-(void) setInputStream:(id) {
	%orig;
	NSLog(@"-(void) setInputStream:(id)");
}

-(void) setOutputStream:(id) {
	%orig;
	NSLog(@"-(void) setOutputStream:(id)");
}

-(id) connection:(id) willSendRequest:(id) redirectResponse:(id) {
	%orig;
	NSLog(@"-(id) connection:(id) willSendRequest:(id) redirectResponse:(id)");
}

-(void) connection:(id) didSendBodyData:(long long) totalBytesWritten:(long long) totalBytesExpectedToWrite:(long long) {
	%orig;
	NSLog(@"-(void) connection:(id) didSendBodyData:(long long) totalBytesWritten:(long long) totalBytesExpectedToWrite:(long long)");
}

-(id) connection:(id) willCacheResponse:(id) {
	%orig;
	NSLog(@"-(id) connection:(id) willCacheResponse:(id)");
}

-(bool) isReady {
	%orig;
	NSLog(@"-(bool) isReady");
}

-(id) completionGroup {
	%orig;
	NSLog(@"-(id) completionGroup");
}

-(void) setCompletionGroup:(id) {
	%orig;
	NSLog(@"-(void) setCompletionGroup:(id)");
}

-(bool) isConcurrent {
	%orig;
	NSLog(@"-(bool) isConcurrent");
}

-(id) downloadProgress {
	%orig;
	NSLog(@"-(id) downloadProgress");
}

-(void) setDownloadProgress:(id) {
	%orig;
	NSLog(@"-(void) setDownloadProgress:(id)");
}

-(void) setRedirectResponse:(id) {
	%orig;
	NSLog(@"-(void) setRedirectResponse:(id)");
}

-(id) redirectResponse {
	%orig;
	NSLog(@"-(id) redirectResponse");
}

-(void) setLock:(id) {
	%orig;
	NSLog(@"-(void) setLock:(id)");
}

-(id) completionQueue {
	%orig;
	NSLog(@"-(id) completionQueue");
}

-(void) setCompletionQueue:(id) {
	%orig;
	NSLog(@"-(void) setCompletionQueue:(id)");
}

-(id) inputStream {
	%orig;
	NSLog(@"-(id) inputStream");
}

-(void) setDownloadProgressBlock:(id) {
	%orig;
	NSLog(@"-(void) setDownloadProgressBlock:(id)");
}

-(void) setUploadProgressBlock:(id) {
	%orig;
	NSLog(@"-(void) setUploadProgressBlock:(id)");
}

-(void) setCredential:(id) {
	%orig;
	NSLog(@"-(void) setCredential:(id)");
}

-(void) setResponseString:(id) {
	%orig;
	NSLog(@"-(void) setResponseString:(id)");
}

-(id) responseString {
	%orig;
	NSLog(@"-(id) responseString");
}

-(void) setUploadProgress:(id) {
	%orig;
	NSLog(@"-(void) setUploadProgress:(id)");
}

-(id) uploadProgress {
	%orig;
	NSLog(@"-(id) uploadProgress");
}

-(id) securityPolicy {
	%orig;
	NSLog(@"-(id) securityPolicy");
}

-(void) setSecurityPolicy:(id) {
	%orig;
	NSLog(@"-(void) setSecurityPolicy:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) userInfo {
	%orig;
	NSLog(@"-(id) userInfo");
}

-(void) setUserInfo:(id) {
	%orig;
	NSLog(@"-(void) setUserInfo:(id)");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(long long) state {
	%orig;
	NSLog(@"-(long long) state");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(void) setState:(long long) {
	%orig;
	NSLog(@"-(void) setState:(long long)");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(void) setCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setCompletionBlock:(id)");
}

-(id) lock {
	%orig;
	NSLog(@"-(id) lock");
}

-(bool) isFinished {
	%orig;
	NSLog(@"-(bool) isFinished");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(id) initWithRequest:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id)");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

-(id) connection {
	%orig;
	NSLog(@"-(id) connection");
}

-(void) setConnection:(id) {
	%orig;
	NSLog(@"-(void) setConnection:(id)");
}

-(void) finish {
	%orig;
	NSLog(@"-(void) finish");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) setError:(id) {
	%orig;
	NSLog(@"-(void) setError:(id)");
}

-(void) setBackgroundTaskIdentifier:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBackgroundTaskIdentifier:(unsigned long long)");
}

-(bool) isExecuting {
	%orig;
	NSLog(@"-(bool) isExecuting");
}

-(unsigned long long) backgroundTaskIdentifier {
	%orig;
	NSLog(@"-(unsigned long long) backgroundTaskIdentifier");
}

-(bool) isPaused {
	%orig;
	NSLog(@"-(bool) isPaused");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

-(void) connection:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didFailWithError:(id)");
}

-(void) connection:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveData:(id)");
}

-(void) connectionDidFinishLoading:(id) {
	%orig;
	NSLog(@"-(void) connectionDidFinishLoading:(id)");
}

-(void) connection:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveResponse:(id)");
}

%end

%hook ABQAFHTTPRequestOperation

+(bool) supportsSecureCoding {
	%orig;
	NSLog(@"+(bool) supportsSecureCoding");
}

-(void) setCompletionBlockWithSuccess:(id) failure:(?) {
	%orig;
	NSLog(@"-(void) setCompletionBlockWithSuccess:(id) failure:(?)");
}

-(id) responseObject {
	%orig;
	NSLog(@"-(id) responseObject");
}

-(void) setResponseObject:(id) {
	%orig;
	NSLog(@"-(void) setResponseObject:(id)");
}

-(void) setResponseSerializationError:(id) {
	%orig;
	NSLog(@"-(void) setResponseSerializationError:(id)");
}

-(id) responseSerializationError {
	%orig;
	NSLog(@"-(id) responseSerializationError");
}

-(void) setResponseSerializer:(id) {
	%orig;
	NSLog(@"-(void) setResponseSerializer:(id)");
}

-(id) responseSerializer {
	%orig;
	NSLog(@"-(id) responseSerializer");
}

-(void) encodeWithCoder:(id) {
	%orig;
	NSLog(@"-(void) encodeWithCoder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(id) initWithRequest:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id)");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook ABQDownloadRequestOperation

+(id) acceptableStatusCodes {
	%orig;
	NSLog(@"+(id) acceptableStatusCodes");
}

+(id) cacheFolder {
	%orig;
	NSLog(@"+(id) cacheFolder");
}

-(id) targetPath {
	%orig;
	NSLog(@"-(id) targetPath");
}

-(void) setTempPath:(id) {
	%orig;
	NSLog(@"-(void) setTempPath:(id)");
}

-(bool) updateByteStartRangeForRequest {
	%orig;
	NSLog(@"-(bool) updateByteStartRangeForRequest");
}

-(id) tempPath {
	%orig;
	NSLog(@"-(id) tempPath");
}

-(unsigned long long) fileSizeForPath:(id) {
	%orig;
	NSLog(@"-(unsigned long long) fileSizeForPath:(id)");
}

-(bool) shouldOverwrite {
	%orig;
	NSLog(@"-(bool) shouldOverwrite");
}

-(void) setProgressiveDownloadProgress:(id) {
	%orig;
	NSLog(@"-(void) setProgressiveDownloadProgress:(id)");
}

-(long long) totalBytesReadPerDownload {
	%orig;
	NSLog(@"-(long long) totalBytesReadPerDownload");
}

-(void) setTotalBytesReadPerDownload:(long long) {
	%orig;
	NSLog(@"-(void) setTotalBytesReadPerDownload:(long long)");
}

-(id) progressiveDownloadProgress {
	%orig;
	NSLog(@"-(id) progressiveDownloadProgress");
}

-(id) progressiveDownloadCallbackQueue {
	%orig;
	NSLog(@"-(id) progressiveDownloadCallbackQueue");
}

-(long long) offsetContentLength {
	%orig;
	NSLog(@"-(long long) offsetContentLength");
}

-(long long) totalContentLength {
	%orig;
	NSLog(@"-(long long) totalContentLength");
}

-(bool) deleteTempFileWithError:(id*) {
	%orig;
	NSLog(@"-(bool) deleteTempFileWithError:(id*)");
}

-(void) setProgressiveDownloadProgressBlock:(id) {
	%orig;
	NSLog(@"-(void) setProgressiveDownloadProgressBlock:(id)");
}

-(void) setProgressiveDownloadCallbackQueue:(id) {
	%orig;
	NSLog(@"-(void) setProgressiveDownloadCallbackQueue:(id)");
}

-(void) setTargetPath:(id) {
	%orig;
	NSLog(@"-(void) setTargetPath:(id)");
}

-(bool) isDeletingTempFileOnCancel {
	%orig;
	NSLog(@"-(bool) isDeletingTempFileOnCancel");
}

-(void) setDeleteTempFileOnCancel:(bool) {
	%orig;
	NSLog(@"-(void) setDeleteTempFileOnCancel:(bool)");
}

-(void) setTotalContentLength:(long long) {
	%orig;
	NSLog(@"-(void) setTotalContentLength:(long long)");
}

-(void) setOffsetContentLength:(long long) {
	%orig;
	NSLog(@"-(void) setOffsetContentLength:(long long)");
}

-(id) initWithRequest:(id) targetPath:(id) shouldResume:(bool) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) targetPath:(id) shouldResume:(bool)");
}

-(void) setShouldOverwrite:(bool) {
	%orig;
	NSLog(@"-(void) setShouldOverwrite:(bool)");
}

-(bool) moveTempFileToTargetPath {
	%orig;
	NSLog(@"-(bool) moveTempFileToTargetPath");
}

-(bool) shouldResume {
	%orig;
	NSLog(@"-(bool) shouldResume");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

-(void) connection:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didFailWithError:(id)");
}

-(void) connection:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveData:(id)");
}

-(void) connectionDidFinishLoading:(id) {
	%orig;
	NSLog(@"-(void) connectionDidFinishLoading:(id)");
}

-(void) connection:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveResponse:(id)");
}

%end

%hook SyncOperation

-(id) vin {
	%orig;
	NSLog(@"-(id) vin");
}

-(void) setProfileSyncConfig:(id) {
	%orig;
	NSLog(@"-(void) setProfileSyncConfig:(id)");
}

-(id) profileSyncConfig {
	%orig;
	NSLog(@"-(id) profileSyncConfig");
}

-(void) setHap:(id) {
	%orig;
	NSLog(@"-(void) setHap:(id)");
}

-(void) setWebViewManager:(id) {
	%orig;
	NSLog(@"-(void) setWebViewManager:(id)");
}

-(id) hap {
	%orig;
	NSLog(@"-(id) hap");
}

-(id) webViewManager {
	%orig;
	NSLog(@"-(id) webViewManager");
}

-(id) initWithHAP:(id) webViewManager:(id) profileSyncConfig:(id) syncType:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithHAP:(id) webViewManager:(id) profileSyncConfig:(id) syncType:(unsigned long long)");
}

-(id) headUnitManagerDelegate {
	%orig;
	NSLog(@"-(id) headUnitManagerDelegate");
}

-(void) setHeadUnitManagerDelegate:(id) {
	%orig;
	NSLog(@"-(void) setHeadUnitManagerDelegate:(id)");
}

-(void) setAppNameToBeDeleted:(id) {
	%orig;
	NSLog(@"-(void) setAppNameToBeDeleted:(id)");
}

-(void) makeProfileCallAndQueueFilesIfNecessary {
	%orig;
	NSLog(@"-(void) makeProfileCallAndQueueFilesIfNecessary");
}

-(id) huSerialNumber {
	%orig;
	NSLog(@"-(id) huSerialNumber");
}

-(id) checksumForDictionary:(id) {
	%orig;
	NSLog(@"-(id) checksumForDictionary:(id)");
}

-(void) sendProfileCompleteMessageToHMI {
	%orig;
	NSLog(@"-(void) sendProfileCompleteMessageToHMI");
}

-(void) makePolicyCallAndDownloadPolicies {
	%orig;
	NSLog(@"-(void) makePolicyCallAndDownloadPolicies");
}

-(void) updatePolicyListFromAppsList {
	%orig;
	NSLog(@"-(void) updatePolicyListFromAppsList");
}

-(id) policyMessageBody {
	%orig;
	NSLog(@"-(id) policyMessageBody");
}

-(void) downloadPoliciesForPolicyResponseArray:(id) {
	%orig;
	NSLog(@"-(void) downloadPoliciesForPolicyResponseArray:(id)");
}

-(void) policyDownloadsComplete {
	%orig;
	NSLog(@"-(void) policyDownloadsComplete");
}

-(void) setPendingPolicyDownloads:(id) {
	%orig;
	NSLog(@"-(void) setPendingPolicyDownloads:(id)");
}

-(id) pendingPolicyDownloads {
	%orig;
	NSLog(@"-(id) pendingPolicyDownloads");
}

-(void) signalIfAllPolicyDownloadsComplete {
	%orig;
	NSLog(@"-(void) signalIfAllPolicyDownloadsComplete");
}

-(id) hmiNotificationDictionaryForInProgressFromAppList:(id) {
	%orig;
	NSLog(@"-(id) hmiNotificationDictionaryForInProgressFromAppList:(id)");
}

-(id) hmiNotificationDictionaryForProfileComplete {
	%orig;
	NSLog(@"-(id) hmiNotificationDictionaryForProfileComplete");
}

-(id) profileEnhancedMessageBody {
	%orig;
	NSLog(@"-(id) profileEnhancedMessageBody");
}

-(void) sendProfileSyncStartToHMI {
	%orig;
	NSLog(@"-(void) sendProfileSyncStartToHMI");
}

-(void) sendInProgressMessageToHMIUsingAppList:(id) {
	%orig;
	NSLog(@"-(void) sendInProgressMessageToHMIUsingAppList:(id)");
}

-(void) setSyncOperationType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSyncOperationType:(unsigned long long)");
}

-(void) setWorkFlowState:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setWorkFlowState:(unsigned long long)");
}

-(unsigned long long) syncOperationType {
	%orig;
	NSLog(@"-(unsigned long long) syncOperationType");
}

-(void) startAppsOnlySync {
	%orig;
	NSLog(@"-(void) startAppsOnlySync");
}

-(void) startAppDelete {
	%orig;
	NSLog(@"-(void) startAppDelete");
}

-(void) startFullProfileSync {
	%orig;
	NSLog(@"-(void) startFullProfileSync");
}

-(id) appNameToBeDeleted {
	%orig;
	NSLog(@"-(id) appNameToBeDeleted");
}

-(bool) shouldPerformProfileSync {
	%orig;
	NSLog(@"-(bool) shouldPerformProfileSync");
}

-(void) sendSyncBypassedSequence {
	%orig;
	NSLog(@"-(void) sendSyncBypassedSequence");
}

-(void) setIsAppsSyncNeeded:(bool) {
	%orig;
	NSLog(@"-(void) setIsAppsSyncNeeded:(bool)");
}

-(void) setIsHupUpdateNeeded:(bool) {
	%orig;
	NSLog(@"-(void) setIsHupUpdateNeeded:(bool)");
}

-(void) setIsPolicySyncNeeded:(bool) {
	%orig;
	NSLog(@"-(void) setIsPolicySyncNeeded:(bool)");
}

-(id) urlStringForServicePath:(id) {
	%orig;
	NSLog(@"-(id) urlStringForServicePath:(id)");
}

-(id) syncMessageBody {
	%orig;
	NSLog(@"-(id) syncMessageBody");
}

-(bool) isAppsSyncNeeded {
	%orig;
	NSLog(@"-(bool) isAppsSyncNeeded");
}

-(void) proceedToPolicySyncIfNeeded {
	%orig;
	NSLog(@"-(void) proceedToPolicySyncIfNeeded");
}

-(void) handleUnrecoverableErrorWithType:(id) code:(long long) {
	%orig;
	NSLog(@"-(void) handleUnrecoverableErrorWithType:(id) code:(long long)");
}

-(id) hupUpdateMessageBody {
	%orig;
	NSLog(@"-(id) hupUpdateMessageBody");
}

-(void) downloadHUPUpdateUsingHUPInfo:(id) {
	%orig;
	NSLog(@"-(void) downloadHUPUpdateUsingHUPInfo:(id)");
}

-(void) sendHupUpdateNotification:(id) {
	%orig;
	NSLog(@"-(void) sendHupUpdateNotification:(id)");
}

-(void) successfulCompletionSequence {
	%orig;
	NSLog(@"-(void) successfulCompletionSequence");
}

-(void) persistProfileResponse:(id) {
	%orig;
	NSLog(@"-(void) persistProfileResponse:(id)");
}

-(void) setAppListFromChoreo:(id) {
	%orig;
	NSLog(@"-(void) setAppListFromChoreo:(id)");
}

-(id) appListFromChoreo {
	%orig;
	NSLog(@"-(id) appListFromChoreo");
}

-(void) queueAppsForDownload {
	%orig;
	NSLog(@"-(void) queueAppsForDownload");
}

-(void) unzipAllDownloads {
	%orig;
	NSLog(@"-(void) unzipAllDownloads");
}

-(id) localZipFilePathForApp:(id) withURI:(id) {
	%orig;
	NSLog(@"-(id) localZipFilePathForApp:(id) withURI:(id)");
}

-(void) anAppDownloadCompleted {
	%orig;
	NSLog(@"-(void) anAppDownloadCompleted");
}

-(void) unzipHMIAppFile:(id) forAppName:(id) toDestination:(id) {
	%orig;
	NSLog(@"-(void) unzipHMIAppFile:(id) forAppName:(id) toDestination:(id)");
}

-(bool) isPolicySyncNeeded {
	%orig;
	NSLog(@"-(bool) isPolicySyncNeeded");
}

-(void) persistSyncTime {
	%orig;
	NSLog(@"-(void) persistSyncTime");
}

-(void) sendCompletionMessages {
	%orig;
	NSLog(@"-(void) sendCompletionMessages");
}

-(unsigned long long) workFlowState {
	%orig;
	NSLog(@"-(unsigned long long) workFlowState");
}

-(void) sendErrorNotificationToHMIWithType:(id) code:(long long) {
	%orig;
	NSLog(@"-(void) sendErrorNotificationToHMIWithType:(id) code:(long long)");
}

-(id) composeProfileDataForHMI:(id) {
	%orig;
	NSLog(@"-(id) composeProfileDataForHMI:(id)");
}

-(id) composeProfileState:(id) {
	%orig;
	NSLog(@"-(id) composeProfileState:(id)");
}

-(void) headUnitUpdateHasCompleted {
	%orig;
	NSLog(@"-(void) headUnitUpdateHasCompleted");
}

-(id) sanitizedHeadUnitInfoDictionary {
	%orig;
	NSLog(@"-(id) sanitizedHeadUnitInfoDictionary");
}

-(id) hupInfoDictionary {
	%orig;
	NSLog(@"-(id) hupInfoDictionary");
}

-(bool) isHupUpdateNeeded {
	%orig;
	NSLog(@"-(bool) isHupUpdateNeeded");
}

-(void) makeHUPUpdateCallAndQueueFilesIfNecessary {
	%orig;
	NSLog(@"-(void) makeHUPUpdateCallAndQueueFilesIfNecessary");
}

-(void) downloadFailedWithError:(id) {
	%orig;
	NSLog(@"-(void) downloadFailedWithError:(id)");
}

-(void) downloadCompleted:(id) {
	%orig;
	NSLog(@"-(void) downloadCompleted:(id)");
}

-(void) allDownloadsCompleted {
	%orig;
	NSLog(@"-(void) allDownloadsCompleted");
}

-(void) timeoutExceeded {
	%orig;
	NSLog(@"-(void) timeoutExceeded");
}

-(bool) isInstalled:(id) {
	%orig;
	NSLog(@"-(bool) isInstalled:(id)");
}

-(id) fileManager {
	%orig;
	NSLog(@"-(id) fileManager");
}

-(void) setFileManager:(id) {
	%orig;
	NSLog(@"-(void) setFileManager:(id)");
}

-(bool) isConcurrent {
	%orig;
	NSLog(@"-(bool) isConcurrent");
}

-(id) downloader {
	%orig;
	NSLog(@"-(id) downloader");
}

-(void) setDownloader:(id) {
	%orig;
	NSLog(@"-(void) setDownloader:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) completeOperation {
	%orig;
	NSLog(@"-(void) completeOperation");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(bool) isFinished {
	%orig;
	NSLog(@"-(bool) isFinished");
}

-(bool) isExecuting {
	%orig;
	NSLog(@"-(bool) isExecuting");
}

%end

%hook IDRhmiShortFeatureInfosDownloadOperation

+(id) new {
	%orig;
	NSLog(@"+(id) new");
}

-(id) vehicleInfo {
	%orig;
	NSLog(@"-(id) vehicleInfo");
}

-(void) completeOperationWithError:(id) {
	%orig;
	NSLog(@"-(void) completeOperationWithError:(id)");
}

-(id) URLQueryComponentWithParameters:(id) {
	%orig;
	NSLog(@"-(id) URLQueryComponentWithParameters:(id)");
}

-(void) setShortFeatureInfosJSONData:(id) {
	%orig;
	NSLog(@"-(void) setShortFeatureInfosJSONData:(id)");
}

-(id) shortFeatureInfosJSONData {
	%orig;
	NSLog(@"-(id) shortFeatureInfosJSONData");
}

-(id) shortFeatureInfosWithJSONData:(id) error:(id*) {
	%orig;
	NSLog(@"-(id) shortFeatureInfosWithJSONData:(id) error:(id*)");
}

-(id) initWithParameters:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) initWithParameters:(id) completionHandler:(id)");
}

-(bool) isConcurrent {
	%orig;
	NSLog(@"-(bool) isConcurrent");
}

-(void) finishOperation {
	%orig;
	NSLog(@"-(void) finishOperation");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) completeOperation {
	%orig;
	NSLog(@"-(void) completeOperation");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) completionHandler {
	%orig;
	NSLog(@"-(id) completionHandler");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(bool) isFinished {
	%orig;
	NSLog(@"-(bool) isFinished");
}

-(bool) isExecuting {
	%orig;
	NSLog(@"-(bool) isExecuting");
}

%end

%hook IDRhmiFeatureInfoDownloadOperation

-(void) downloadFeatureInfoJSON {
	%orig;
	NSLog(@"-(void) downloadFeatureInfoJSON");
}

-(id) featureInfoJSONObject {
	%orig;
	NSLog(@"-(id) featureInfoJSONObject");
}

-(id) featureInfoWithJSONObject:(id) iconData:(id) {
	%orig;
	NSLog(@"-(id) featureInfoWithJSONObject:(id) iconData:(id)");
}

-(void) completeOperationWithError:(id) {
	%orig;
	NSLog(@"-(void) completeOperationWithError:(id)");
}

-(void) setFeatureInfoJSONObject:(id) {
	%orig;
	NSLog(@"-(void) setFeatureInfoJSONObject:(id)");
}

-(void) downloadAppIcon {
	%orig;
	NSLog(@"-(void) downloadAppIcon");
}

-(id) appswitcherCompatibleIconDataWithImageData:(id) {
	%orig;
	NSLog(@"-(id) appswitcherCompatibleIconDataWithImageData:(id)");
}

-(id) initWithIdentifier:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) initWithIdentifier:(id) completionHandler:(id)");
}

-(bool) isConcurrent {
	%orig;
	NSLog(@"-(bool) isConcurrent");
}

-(id) iconData {
	%orig;
	NSLog(@"-(id) iconData");
}

-(void) setIconData:(id) {
	%orig;
	NSLog(@"-(void) setIconData:(id)");
}

-(void) finishOperation {
	%orig;
	NSLog(@"-(void) finishOperation");
}

-(id) identifier {
	%orig;
	NSLog(@"-(id) identifier");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) completeOperation {
	%orig;
	NSLog(@"-(void) completeOperation");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) completionHandler {
	%orig;
	NSLog(@"-(id) completionHandler");
}

-(bool) isFinished {
	%orig;
	NSLog(@"-(bool) isFinished");
}

-(bool) isExecuting {
	%orig;
	NSLog(@"-(bool) isExecuting");
}

%end

%hook IDRhmiDownloadOperation

-(id) initWithURL:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(id) initWithURL:(id) completionHandler:(id)");
}

-(bool) isConcurrent {
	%orig;
	NSLog(@"-(bool) isConcurrent");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) completeOperation {
	%orig;
	NSLog(@"-(void) completeOperation");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(id) completionHandler {
	%orig;
	NSLog(@"-(id) completionHandler");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(void) setURL:(id) {
	%orig;
	NSLog(@"-(void) setURL:(id)");
}

-(void) setCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setCompletionHandler:(id)");
}

-(bool) isFinished {
	%orig;
	NSLog(@"-(bool) isFinished");
}

-(bool) isExecuting {
	%orig;
	NSLog(@"-(bool) isExecuting");
}

%end

%hook BSGDeliveryOperation

-(void) main {
	%orig;
	NSLog(@"-(void) main");
}

%end

%hook BSGDelayOperation

-(void) main {
	%orig;
	NSLog(@"-(void) main");
}

%end

%hook PMCompletableBlockOperation

-(bool) isReady {
	%orig;
	NSLog(@"-(bool) isReady");
}

-(bool) isAsynchronous {
	%orig;
	NSLog(@"-(bool) isAsynchronous");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(bool) isFinished {
	%orig;
	NSLog(@"-(bool) isFinished");
}

-(bool) isExecuting {
	%orig;
	NSLog(@"-(bool) isExecuting");
}

%end

%hook FetchHaymakerAdAsyncOperation

-(void) haymaker:(id) didFinishLoadingResponse:(id) {
	%orig;
	NSLog(@"-(void) haymaker:(id) didFinishLoadingResponse:(id)");
}

-(void) haymakerDidFail:(id) {
	%orig;
	NSLog(@"-(void) haymakerDidFail:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook ProcessAPVAdAsyncOperation

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook PMADDFPFetchBannerAsyncOperation

-(id) validBannerSizesForAdLoader:(id) {
	%orig;
	NSLog(@"-(id) validBannerSizesForAdLoader:(id)");
}

-(void) adLoader:(id) didReceiveDFPBannerView:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didReceiveDFPBannerView:(id)");
}

-(id) nativeCustomTemplateIDsForAdLoader:(id) {
	%orig;
	NSLog(@"-(id) nativeCustomTemplateIDsForAdLoader:(id)");
}

-(void) adLoader:(id) didReceiveNativeCustomTemplateAd:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didReceiveNativeCustomTemplateAd:(id)");
}

-(void) adLoader:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didFailToReceiveAdWithError:(id)");
}

-(void) bannerView:(id) didReceiveCustomRenderedAd:(id) {
	%orig;
	NSLog(@"-(void) bannerView:(id) didReceiveCustomRenderedAd:(id)");
}

-(void) adViewDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adViewDidReceiveAd:(id)");
}

-(void) adView:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailToReceiveAdWithError:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook ProcessAudioTileAsyncOperation

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook PMProcessCompanionBannerAsyncOperation

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook PMProcessCompanionURLAsyncOperation

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook PMFetchCompanionURLAsyncOperation

-(void) adLoader:(id) didReceiveServableResponse:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didReceiveServableResponse:(id)");
}

-(void) adLoader:(id) didLoadAd:(id) withUserInfo:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didLoadAd:(id) withUserInfo:(id)");
}

-(void) adLoaderFailedToLoadAd:(id) withUserInfo:(id) {
	%orig;
	NSLog(@"-(void) adLoaderFailedToLoadAd:(id) withUserInfo:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook PMProcessDFPAsyncOperation

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook FetchAPVAdAsyncOperation

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

%end

%hook UIActivityCollectedStationItemProvider

-(id) initWithCollectedStation:(id) {
	%orig;
	NSLog(@"-(id) initWithCollectedStation:(id)");
}

-(void) setCollectedStationModel:(id) {
	%orig;
	NSLog(@"-(void) setCollectedStationModel:(id)");
}

-(id) collectedStationModel {
	%orig;
	NSLog(@"-(id) collectedStationModel");
}

-(id) initWithPlaceholderItem:(id) station:(id) {
	%orig;
	NSLog(@"-(id) initWithPlaceholderItem:(id) station:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook UIActivityCollectedStationURLItemProvider

-(void) setShortenURLString:(id) {
	%orig;
	NSLog(@"-(void) setShortenURLString:(id)");
}

-(id) shortenURLString {
	%orig;
	NSLog(@"-(id) shortenURLString");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) item {
	%orig;
	NSLog(@"-(id) item");
}

%end

%hook UIActivityCollectedStationImageItemProvider

-(id) item {
	%orig;
	NSLog(@"-(id) item");
}

%end

%hook UIActivityTrackItemProvider

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(id) initWithTrack:(id) station:(id) {
	%orig;
	NSLog(@"-(id) initWithTrack:(id) station:(id)");
}

-(id) initWithPlaceholderItem:(id) track:(id) station:(id) {
	%orig;
	NSLog(@"-(id) initWithPlaceholderItem:(id) track:(id) station:(id)");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook UIActivityTrackURLProvider

-(void) setShortenURLString:(id) {
	%orig;
	NSLog(@"-(void) setShortenURLString:(id)");
}

-(id) shortenURLString {
	%orig;
	NSLog(@"-(id) shortenURLString");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) item {
	%orig;
	NSLog(@"-(id) item");
}

%end

%hook UIActivityTrackImageItemProvider

-(id) item {
	%orig;
	NSLog(@"-(id) item");
}

%end

%hook UIActivityTrackStringItemProvider

-(id) item {
	%orig;
	NSLog(@"-(id) item");
}

%end

%hook UIActivityStationItemProvider

-(id) initWithStation:(id) shareStationName:(id) {
	%orig;
	NSLog(@"-(id) initWithStation:(id) shareStationName:(id)");
}

-(id) initWithCollectedStation:(id) {
	%orig;
	NSLog(@"-(id) initWithCollectedStation:(id)");
}

-(id) shareStationName {
	%orig;
	NSLog(@"-(id) shareStationName");
}

-(id) initWithPlaceholderItem:(id) station:(id) shareStationName:(id) {
	%orig;
	NSLog(@"-(id) initWithPlaceholderItem:(id) station:(id) shareStationName:(id)");
}

-(void) setShareStationName:(id) {
	%orig;
	NSLog(@"-(void) setShareStationName:(id)");
}

-(void) setCollectedStationModel:(id) {
	%orig;
	NSLog(@"-(void) setCollectedStationModel:(id)");
}

-(id) collectedStationModel {
	%orig;
	NSLog(@"-(id) collectedStationModel");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook UIActivityStationURLItemProvider

-(void) setShortenURLString:(id) {
	%orig;
	NSLog(@"-(void) setShortenURLString:(id)");
}

-(id) shortenURLString {
	%orig;
	NSLog(@"-(id) shortenURLString");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) item {
	%orig;
	NSLog(@"-(id) item");
}

%end

%hook UIActivityStationImageItemProvider

-(id) item {
	%orig;
	NSLog(@"-(id) item");
}

%end

%hook UIActivityStationStringItemProvider

-(id) initWithStationName:(id) isThumbprint:(bool) shareStationName:(id) {
	%orig;
	NSLog(@"-(id) initWithStationName:(id) isThumbprint:(bool) shareStationName:(id)");
}

-(id) getShareTextForFeed {
	%orig;
	NSLog(@"-(id) getShareTextForFeed");
}

-(void) setIsThumbprint:(bool) {
	%orig;
	NSLog(@"-(void) setIsThumbprint:(bool)");
}

-(bool) isThumbprint {
	%orig;
	NSLog(@"-(bool) isThumbprint");
}

-(void) setStationName:(id) {
	%orig;
	NSLog(@"-(void) setStationName:(id)");
}

-(id) stationName {
	%orig;
	NSLog(@"-(id) stationName");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) item {
	%orig;
	NSLog(@"-(id) item");
}

%end

%hook GADURLProtocol

+(bool) canInitWithRequest:(id) {
	%orig;
	NSLog(@"+(bool) canInitWithRequest:(id)");
}

+(id) canonicalRequestForRequest:(id) {
	%orig;
	NSLog(@"+(id) canonicalRequestForRequest:(id)");
}

-(void) configureMRAIDLocationWithRequest:(id) {
	%orig;
	NSLog(@"-(void) configureMRAIDLocationWithRequest:(id)");
}

-(id) connection:(id) willSendRequest:(id) redirectResponse:(id) {
	%orig;
	NSLog(@"-(id) connection:(id) willSendRequest:(id) redirectResponse:(id)");
}

-(void) startLoading {
	%orig;
	NSLog(@"-(void) startLoading");
}

-(id) initWithRequest:(id) cachedResponse:(id) client:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) cachedResponse:(id) client:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) connection:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didFailWithError:(id)");
}

-(void) connection:(id) didReceiveData:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveData:(id)");
}

-(void) connectionDidFinishLoading:(id) {
	%orig;
	NSLog(@"-(void) connectionDidFinishLoading:(id)");
}

-(void) connection:(id) didReceiveResponse:(id) {
	%orig;
	NSLog(@"-(void) connection:(id) didReceiveResponse:(id)");
}

-(void) stopLoading {
	%orig;
	NSLog(@"-(void) stopLoading");
}

%end

%hook _TtC7PandoraP33_1F0FB29ABF0929288BD65A64FB087F5711URLCapturer

+(bool) canInitWithTask:(id) {
	%orig;
	NSLog(@"+(bool) canInitWithTask:(id)");
}

+(bool) canInitWithRequest:(id) {
	%orig;
	NSLog(@"+(bool) canInitWithRequest:(id)");
}

+(id) canonicalRequestForRequest:(id) {
	%orig;
	NSLog(@"+(id) canonicalRequestForRequest:(id)");
}

-(void) startLoading {
	%orig;
	NSLog(@"-(void) startLoading");
}

-(id) initWithRequest:(id) cachedResponse:(id) client:(id) {
	%orig;
	NSLog(@"-(id) initWithRequest:(id) cachedResponse:(id) client:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) stopLoading {
	%orig;
	NSLog(@"-(void) stopLoading");
}

%end

%hook _TtCC7Pandora24AutomationMediaSimulator28MediaProxyURLSessionDataTask

-(id) earliestBeginDate {
	%orig;
	NSLog(@"-(id) earliestBeginDate");
}

-(void) setEarliestBeginDate:(id) {
	%orig;
	NSLog(@"-(void) setEarliestBeginDate:(id)");
}

-(long long) countOfBytesClientExpectsToSend {
	%orig;
	NSLog(@"-(long long) countOfBytesClientExpectsToSend");
}

-(void) setCountOfBytesClientExpectsToSend:(long long) {
	%orig;
	NSLog(@"-(void) setCountOfBytesClientExpectsToSend:(long long)");
}

-(long long) countOfBytesClientExpectsToReceive {
	%orig;
	NSLog(@"-(long long) countOfBytesClientExpectsToReceive");
}

-(void) setCountOfBytesClientExpectsToReceive:(long long) {
	%orig;
	NSLog(@"-(void) setCountOfBytesClientExpectsToReceive:(long long)");
}

-(long long) taskIdentifier {
	%orig;
	NSLog(@"-(long long) taskIdentifier");
}

-(id) originalRequest {
	%orig;
	NSLog(@"-(id) originalRequest");
}

-(id) currentRequest {
	%orig;
	NSLog(@"-(id) currentRequest");
}

-(long long) countOfBytesReceived {
	%orig;
	NSLog(@"-(long long) countOfBytesReceived");
}

-(long long) countOfBytesSent {
	%orig;
	NSLog(@"-(long long) countOfBytesSent");
}

-(long long) countOfBytesExpectedToSend {
	%orig;
	NSLog(@"-(long long) countOfBytesExpectedToSend");
}

-(long long) countOfBytesExpectedToReceive {
	%orig;
	NSLog(@"-(long long) countOfBytesExpectedToReceive");
}

-(id) taskDescription {
	%orig;
	NSLog(@"-(id) taskDescription");
}

-(void) setTaskDescription:(id) {
	%orig;
	NSLog(@"-(void) setTaskDescription:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) state {
	%orig;
	NSLog(@"-(long long) state");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) progress {
	%orig;
	NSLog(@"-(id) progress");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

-(void) suspend {
	%orig;
	NSLog(@"-(void) suspend");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

%end

%hook _TtCC7Pandora30NetworkRequestManagerSimulator25SimulatedResponseDataTask

-(id) earliestBeginDate {
	%orig;
	NSLog(@"-(id) earliestBeginDate");
}

-(void) setEarliestBeginDate:(id) {
	%orig;
	NSLog(@"-(void) setEarliestBeginDate:(id)");
}

-(long long) countOfBytesClientExpectsToSend {
	%orig;
	NSLog(@"-(long long) countOfBytesClientExpectsToSend");
}

-(void) setCountOfBytesClientExpectsToSend:(long long) {
	%orig;
	NSLog(@"-(void) setCountOfBytesClientExpectsToSend:(long long)");
}

-(long long) countOfBytesClientExpectsToReceive {
	%orig;
	NSLog(@"-(long long) countOfBytesClientExpectsToReceive");
}

-(void) setCountOfBytesClientExpectsToReceive:(long long) {
	%orig;
	NSLog(@"-(void) setCountOfBytesClientExpectsToReceive:(long long)");
}

-(long long) taskIdentifier {
	%orig;
	NSLog(@"-(long long) taskIdentifier");
}

-(id) originalRequest {
	%orig;
	NSLog(@"-(id) originalRequest");
}

-(id) currentRequest {
	%orig;
	NSLog(@"-(id) currentRequest");
}

-(long long) countOfBytesReceived {
	%orig;
	NSLog(@"-(long long) countOfBytesReceived");
}

-(long long) countOfBytesSent {
	%orig;
	NSLog(@"-(long long) countOfBytesSent");
}

-(long long) countOfBytesExpectedToSend {
	%orig;
	NSLog(@"-(long long) countOfBytesExpectedToSend");
}

-(long long) countOfBytesExpectedToReceive {
	%orig;
	NSLog(@"-(long long) countOfBytesExpectedToReceive");
}

-(id) taskDescription {
	%orig;
	NSLog(@"-(id) taskDescription");
}

-(void) setTaskDescription:(id) {
	%orig;
	NSLog(@"-(void) setTaskDescription:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) state {
	%orig;
	NSLog(@"-(long long) state");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(id) progress {
	%orig;
	NSLog(@"-(id) progress");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(id) response {
	%orig;
	NSLog(@"-(id) response");
}

-(void) suspend {
	%orig;
	NSLog(@"-(void) suspend");
}

-(id) error {
	%orig;
	NSLog(@"-(id) error");
}

%end

%hook FBAdCache

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(id) sharedCache {
	%orig;
	NSLog(@"+(id) sharedCache");
}

-(void) objectForKey:(id) withURL:(id) withFetchType:(long long) withBlock:(id) withCallback:(?) {
	%orig;
	NSLog(@"-(void) objectForKey:(id) withURL:(id) withFetchType:(long long) withBlock:(id) withCallback:(?)");
}

-(bool) wipeDiskCacheIfNeeded {
	%orig;
	NSLog(@"-(bool) wipeDiskCacheIfNeeded");
}

-(void) setImage:(id) forURL:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id) forURL:(id)");
}

-(void) setAVAsset:(id) forURL:(id) {
	%orig;
	NSLog(@"-(void) setAVAsset:(id) forURL:(id)");
}

-(id) initWithExpirationInterval:(double) {
	%orig;
	NSLog(@"-(id) initWithExpirationInterval:(double)");
}

-(void) setPendingVideoRequests:(id) {
	%orig;
	NSLog(@"-(void) setPendingVideoRequests:(id)");
}

-(void) setExpirationQueue:(id) {
	%orig;
	NSLog(@"-(void) setExpirationQueue:(id)");
}

-(void) setObjectsToBeExpired:(id) {
	%orig;
	NSLog(@"-(void) setObjectsToBeExpired:(id)");
}

-(id) expirationQueue {
	%orig;
	NSLog(@"-(id) expirationQueue");
}

-(id) objectsToBeExpired {
	%orig;
	NSLog(@"-(id) objectsToBeExpired");
}

-(void) setRemovalTimer:(id) {
	%orig;
	NSLog(@"-(void) setRemovalTimer:(id)");
}

-(id) objectForKey:(id) filterPlaceholder:(bool) {
	%orig;
	NSLog(@"-(id) objectForKey:(id) filterPlaceholder:(bool)");
}

-(void) setObject:(id) forKey:(id) cost:(unsigned long long) withExpiration:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKey:(id) cost:(unsigned long long) withExpiration:(id)");
}

-(void) objectForKey:(id) withURL:(id) withFetchType:(long long) withBlock:(id) {
	%orig;
	NSLog(@"-(void) objectForKey:(id) withURL:(id) withFetchType:(long long) withBlock:(id)");
}

-(id) defaultImageContextKey {
	%orig;
	NSLog(@"-(id) defaultImageContextKey");
}

-(id) openGLImageContextKey {
	%orig;
	NSLog(@"-(id) openGLImageContextKey");
}

-(id) eaglContextKey {
	%orig;
	NSLog(@"-(id) eaglContextKey");
}

-(unsigned long long) diskCacheSize {
	%orig;
	NSLog(@"-(unsigned long long) diskCacheSize");
}

-(void) wipeDiskCache {
	%orig;
	NSLog(@"-(void) wipeDiskCache");
}

-(void) wipeInMemoryCache {
	%orig;
	NSLog(@"-(void) wipeInMemoryCache");
}

-(id) removalTimer {
	%orig;
	NSLog(@"-(id) removalTimer");
}

-(void) setObject:(id) forKey:(id) withExpiration:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKey:(id) withExpiration:(id)");
}

-(void) objectForKey:(id) withBlock:(id) {
	%orig;
	NSLog(@"-(void) objectForKey:(id) withBlock:(id)");
}

-(void) imageForURL:(id) withBlock:(id) {
	%orig;
	NSLog(@"-(void) imageForURL:(id) withBlock:(id)");
}

-(void) AVAssetForURL:(id) withBlock:(id) {
	%orig;
	NSLog(@"-(void) AVAssetForURL:(id) withBlock:(id)");
}

-(id) blurredImageForURL:(id) {
	%orig;
	NSLog(@"-(id) blurredImageForURL:(id)");
}

-(void) setBlurredImage:(id) forURL:(id) {
	%orig;
	NSLog(@"-(void) setBlurredImage:(id) forURL:(id)");
}

-(id) nativeAdsForScrollView:(id) forManager:(id) {
	%orig;
	NSLog(@"-(id) nativeAdsForScrollView:(id) forManager:(id)");
}

-(void) setNativeAds:(id) forScrollView:(id) forManager:(id) {
	%orig;
	NSLog(@"-(void) setNativeAds:(id) forScrollView:(id) forManager:(id)");
}

-(id) defaultImageContext {
	%orig;
	NSLog(@"-(id) defaultImageContext");
}

-(id) openGLImageContext {
	%orig;
	NSLog(@"-(id) openGLImageContext");
}

-(void) wipeCache {
	%orig;
	NSLog(@"-(void) wipeCache");
}

-(id) pendingVideoRequests {
	%orig;
	NSLog(@"-(id) pendingVideoRequests");
}

-(id) imageForURL:(id) {
	%orig;
	NSLog(@"-(id) imageForURL:(id)");
}

-(void) setObject:(id) forKey:(id) cost:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setObject:(id) forKey:(id) cost:(unsigned long long)");
}

-(id) eaglContext {
	%orig;
	NSLog(@"-(id) eaglContext");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) objectForKey:(id) {
	%orig;
	NSLog(@"-(id) objectForKey:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADAdViewController

-(void) adViewDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adViewDidReceiveAd:(id)");
}

-(GADAdSize) adSize {
	%orig;
	NSLog(@"-(GADAdSize) adSize");
}

-(void) setAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) setAdSize:(GADAdSize)");
}

-(void) setUpBannerViewIfNeededWithOldBannerView:(id) {
	%orig;
	NSLog(@"-(void) setUpBannerViewIfNeededWithOldBannerView:(id)");
}

-(void) bannerPositionUpdated {
	%orig;
	NSLog(@"-(void) bannerPositionUpdated");
}

-(void) resetContentViewConstraints {
	%orig;
	NSLog(@"-(void) resetContentViewConstraints");
}

-(void) setUpPositionConstraints {
	%orig;
	NSLog(@"-(void) setUpPositionConstraints");
}

-(void) updateAdViewHidden:(bool) {
	%orig;
	NSLog(@"-(void) updateAdViewHidden:(bool)");
}

-(void) bannerSwiped {
	%orig;
	NSLog(@"-(void) bannerSwiped");
}

-(void) setAdViewAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdViewAdUnitID:(id)");
}

-(void) setAdViewPositionHorizontal:(long long) {
	%orig;
	NSLog(@"-(void) setAdViewPositionHorizontal:(long long)");
}

-(void) setAdViewPositionVertical:(long long) {
	%orig;
	NSLog(@"-(void) setAdViewPositionVertical:(long long)");
}

-(void) setAdViewHidden:(bool) {
	%orig;
	NSLog(@"-(void) setAdViewHidden:(bool)");
}

-(void) setAllowsHidingAds:(bool) {
	%orig;
	NSLog(@"-(void) setAllowsHidingAds:(bool)");
}

-(id) adViewAdUnitID {
	%orig;
	NSLog(@"-(id) adViewAdUnitID");
}

-(long long) adViewPositionVertical {
	%orig;
	NSLog(@"-(long long) adViewPositionVertical");
}

-(long long) adViewPositionHorizontal {
	%orig;
	NSLog(@"-(long long) adViewPositionHorizontal");
}

-(bool) animatesVisibility {
	%orig;
	NSLog(@"-(bool) animatesVisibility");
}

-(void) setAnimatesVisibility:(bool) {
	%orig;
	NSLog(@"-(void) setAnimatesVisibility:(bool)");
}

-(bool) adViewHidden {
	%orig;
	NSLog(@"-(bool) adViewHidden");
}

-(bool) allowsHidingAds {
	%orig;
	NSLog(@"-(bool) allowsHidingAds");
}

-(void) setRequest:(id) {
	%orig;
	NSLog(@"-(void) setRequest:(id)");
}

-(id) originalContentView {
	%orig;
	NSLog(@"-(id) originalContentView");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) willRotateToInterfaceOrientation:(long long) duration:(double) {
	%orig;
	NSLog(@"-(void) willRotateToInterfaceOrientation:(long long) duration:(double)");
}

-(void) didRotateFromInterfaceOrientation:(long long) {
	%orig;
	NSLog(@"-(void) didRotateFromInterfaceOrientation:(long long)");
}

-(id) request {
	%orig;
	NSLog(@"-(id) request");
}

-(void) updateLayout {
	%orig;
	NSLog(@"-(void) updateLayout");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook GADDebugOptionsViewController

+(id) debugOptionsViewControllerWithAdUnitID:(id) {
	%orig;
	NSLog(@"+(id) debugOptionsViewControllerWithAdUnitID:(id)");
}

-(void) showCreativeInformationAlertView {
	%orig;
	NSLog(@"-(void) showCreativeInformationAlertView");
}

-(void) showDebugOptionsAlertView {
	%orig;
	NSLog(@"-(void) showDebugOptionsAlertView");
}

-(void) debugOptionsAlertViewClickedButtonAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) debugOptionsAlertViewClickedButtonAtIndex:(long long)");
}

-(void) creativeInfoAlertViewClickedButtonAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) creativeInfoAlertViewClickedButtonAtIndex:(long long)");
}

-(void) finishedDebugFlow {
	%orig;
	NSLog(@"-(void) finishedDebugFlow");
}

-(void) startInAppPreviewLinking {
	%orig;
	NSLog(@"-(void) startInAppPreviewLinking");
}

-(void) startDebugSignalLinking {
	%orig;
	NSLog(@"-(void) startDebugSignalLinking");
}

-(void) showAlertViewWithTitle:(id) {
	%orig;
	NSLog(@"-(void) showAlertViewWithTitle:(id)");
}

-(id) debugDeviceQueryParameters {
	%orig;
	NSLog(@"-(id) debugDeviceQueryParameters");
}

-(void) startDeviceLinking {
	%orig;
	NSLog(@"-(void) startDeviceLinking");
}

-(void) showFeatureNotEnabledAlertView {
	%orig;
	NSLog(@"-(void) showFeatureNotEnabledAlertView");
}

-(void) createDeviceIdentifierAndStartDeviceLinking {
	%orig;
	NSLog(@"-(void) createDeviceIdentifierAndStartDeviceLinking");
}

-(id) debugURLRequestForString:(id) {
	%orig;
	NSLog(@"-(id) debugURLRequestForString:(id)");
}

-(void) showSystemErrorAlertView {
	%orig;
	NSLog(@"-(void) showSystemErrorAlertView");
}

-(void) debugSignalStatusReceivedResponse:(id) data:(id) {
	%orig;
	NSLog(@"-(void) debugSignalStatusReceivedResponse:(id) data:(id)");
}

-(void) inAppPreviewSignalStatusReceivedResponse:(id) data:(id) {
	%orig;
	NSLog(@"-(void) inAppPreviewSignalStatusReceivedResponse:(id) data:(id)");
}

-(id) adDebugDialogString {
	%orig;
	NSLog(@"-(id) adDebugDialogString");
}

-(void) setAdDebugDialogString:(id) {
	%orig;
	NSLog(@"-(void) setAdDebugDialogString:(id)");
}

-(id) initWithAdUnitID:(id) {
	%orig;
	NSLog(@"-(id) initWithAdUnitID:(id)");
}

-(void) safariViewControllerDidFinish:(id) {
	%orig;
	NSLog(@"-(void) safariViewControllerDidFinish:(id)");
}

-(void) closeButtonPressed {
	%orig;
	NSLog(@"-(void) closeButtonPressed");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) alertView:(id) clickedButtonAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) alertView:(id) clickedButtonAtIndex:(long long)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook GADViewController

-(void) relinquishScreenWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) relinquishScreenWithCompletion:(id)");
}

-(id) intermission {
	%orig;
	NSLog(@"-(id) intermission");
}

-(void) recordDismissal {
	%orig;
	NSLog(@"-(void) recordDismissal");
}

-(void) addToCurrentIntermission {
	%orig;
	NSLog(@"-(void) addToCurrentIntermission");
}

-(void) finishDismissal {
	%orig;
	NSLog(@"-(void) finishDismissal");
}

-(void) setRetainCycle:(id) {
	%orig;
	NSLog(@"-(void) setRetainCycle:(id)");
}

-(void) finishAppearing {
	%orig;
	NSLog(@"-(void) finishAppearing");
}

-(id) retainCycle {
	%orig;
	NSLog(@"-(id) retainCycle");
}

-(id) dismissalCompletion {
	%orig;
	NSLog(@"-(id) dismissalCompletion");
}

-(void) setDismissalCompletion:(id) {
	%orig;
	NSLog(@"-(void) setDismissalCompletion:(id)");
}

-(bool) shouldDismissOnApplicationEnteringForeground {
	%orig;
	NSLog(@"-(bool) shouldDismissOnApplicationEnteringForeground");
}

-(void) viewChangedToOrientation:(long long) {
	%orig;
	NSLog(@"-(void) viewChangedToOrientation:(long long)");
}

-(void) presentFromViewController:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) presentFromViewController:(id) completion:(id)");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(bool) viewDidAppear {
	%orig;
	NSLog(@"-(bool) viewDidAppear");
}

-(void) setViewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) setViewDidAppear:(bool)");
}

-(id) presenter {
	%orig;
	NSLog(@"-(id) presenter");
}

-(void) setPresenter:(id) {
	%orig;
	NSLog(@"-(void) setPresenter:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) presentViewController:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) presentViewController:(id) animated:(bool) completion:(id)");
}

-(void) dismissViewControllerAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissViewControllerAnimated:(bool) completion:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(void) setSupportedInterfaceOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSupportedInterfaceOrientations:(unsigned long long)");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

-(void) setSupportedOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSupportedOrientations:(unsigned long long)");
}

%end

%hook GADAdAppViewController

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(long long) forcedAdOrientation {
	%orig;
	NSLog(@"-(long long) forcedAdOrientation");
}

-(void) positionCloseButton {
	%orig;
	NSLog(@"-(void) positionCloseButton");
}

-(unsigned long long) adOrientations {
	%orig;
	NSLog(@"-(unsigned long long) adOrientations");
}

-(bool) adOrientationsOverridesLockedOrientation {
	%orig;
	NSLog(@"-(bool) adOrientationsOverridesLockedOrientation");
}

-(void) setAdOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setAdOrientations:(unsigned long long)");
}

-(id) initWithAdView:(id) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id)");
}

-(void) updateCloseButtonVisibilityAndImage {
	%orig;
	NSLog(@"-(void) updateCloseButtonVisibilityAndImage");
}

-(id) adViewDelegate {
	%orig;
	NSLog(@"-(id) adViewDelegate");
}

-(void) positionMRAIDCloseButton {
	%orig;
	NSLog(@"-(void) positionMRAIDCloseButton");
}

-(bool) shouldDismissOnApplicationEnteringForeground {
	%orig;
	NSLog(@"-(bool) shouldDismissOnApplicationEnteringForeground");
}

-(void) viewChangedToOrientation:(long long) {
	%orig;
	NSLog(@"-(void) viewChangedToOrientation:(long long)");
}

-(void) setUseCustomClose:(bool) {
	%orig;
	NSLog(@"-(void) setUseCustomClose:(bool)");
}

-(void) setCustomClosePosition:(long long) {
	%orig;
	NSLog(@"-(void) setCustomClosePosition:(long long)");
}

-(void) loadHTML:(id) baseURL:(id) {
	%orig;
	NSLog(@"-(void) loadHTML:(id) baseURL:(id)");
}

-(bool) useCustomClose {
	%orig;
	NSLog(@"-(bool) useCustomClose");
}

-(long long) customClosePosition {
	%orig;
	NSLog(@"-(long long) customClosePosition");
}

-(void) setForcedAdOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setForcedAdOrientation:(long long)");
}

-(double) orientationUpdateAnimationDuration {
	%orig;
	NSLog(@"-(double) orientationUpdateAnimationDuration");
}

-(void) setOrientationUpdateAnimationDuration:(double) {
	%orig;
	NSLog(@"-(void) setOrientationUpdateAnimationDuration:(double)");
}

-(void) setAdOrientationsOverridesLockedOrientation:(bool) {
	%orig;
	NSLog(@"-(void) setAdOrientationsOverridesLockedOrientation:(bool)");
}

-(void) setAdViewDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdViewDelegate:(id)");
}

-(void) load:(id) {
	%orig;
	NSLog(@"-(void) load:(id)");
}

-(id) hostViewController {
	%orig;
	NSLog(@"-(id) hostViewController");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(void) closeButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) closeButtonPressed:(id)");
}

-(void) configureView {
	%orig;
	NSLog(@"-(void) configureView");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) didRotateFromInterfaceOrientation:(long long) {
	%orig;
	NSLog(@"-(void) didRotateFromInterfaceOrientation:(long long)");
}

%end

%hook GADSupplementalAdAppViewController

-(void) finishDismissal {
	%orig;
	NSLog(@"-(void) finishDismissal");
}

-(void) finishAppearing {
	%orig;
	NSLog(@"-(void) finishAppearing");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook GADInterstitialViewController

-(void) relinquishScreenWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) relinquishScreenWithCompletion:(id)");
}

-(id) initWithAdView:(id) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id)");
}

-(void) finishDismissal {
	%orig;
	NSLog(@"-(void) finishDismissal");
}

-(void) finishAppearing {
	%orig;
	NSLog(@"-(void) finishAppearing");
}

-(bool) shouldDismissOnApplicationEnteringForeground {
	%orig;
	NSLog(@"-(bool) shouldDismissOnApplicationEnteringForeground");
}

-(void) presentFromViewController:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) presentFromViewController:(id) completion:(id)");
}

-(id) initWithSlot:(id) {
	%orig;
	NSLog(@"-(id) initWithSlot:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

%end

%hook GADExpandedAdAppViewController

-(void) relinquishScreenWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) relinquishScreenWithCompletion:(id)");
}

-(id) initWithAdView:(id) {
	%orig;
	NSLog(@"-(id) initWithAdView:(id)");
}

-(void) configureView {
	%orig;
	NSLog(@"-(void) configureView");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

%end

%hook GADBrowserViewController

-(id) forwardButton {
	%orig;
	NSLog(@"-(id) forwardButton");
}

-(void) setForwardButton:(id) {
	%orig;
	NSLog(@"-(void) setForwardButton:(id)");
}

-(void) openInSafari {
	%orig;
	NSLog(@"-(void) openInSafari");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(void) refreshToolbar {
	%orig;
	NSLog(@"-(void) refreshToolbar");
}

-(id) URLToLoad {
	%orig;
	NSLog(@"-(id) URLToLoad");
}

-(id) referringURLToLoad {
	%orig;
	NSLog(@"-(id) referringURLToLoad");
}

-(void) load:(id) referringURL:(id) {
	%orig;
	NSLog(@"-(void) load:(id) referringURL:(id)");
}

-(void) setURLToLoad:(id) {
	%orig;
	NSLog(@"-(void) setURLToLoad:(id)");
}

-(void) setReferringURLToLoad:(id) {
	%orig;
	NSLog(@"-(void) setReferringURLToLoad:(id)");
}

-(void) createToolbarButtons {
	%orig;
	NSLog(@"-(void) createToolbarButtons");
}

-(void) setFlexibleSpaceButton:(id) {
	%orig;
	NSLog(@"-(void) setFlexibleSpaceButton:(id)");
}

-(void) back {
	%orig;
	NSLog(@"-(void) back");
}

-(id) buttonWithImage:(id) name:(id) width:(long long) enabled:(bool) action:(SEL) {
	%orig;
	NSLog(@"-(id) buttonWithImage:(id) name:(id) width:(long long) enabled:(bool) action:(SEL)");
}

-(void) setSpinnerContainingButton:(id) {
	%orig;
	NSLog(@"-(void) setSpinnerContainingButton:(id)");
}

-(id) spinnerContainingButton {
	%orig;
	NSLog(@"-(id) spinnerContainingButton");
}

-(void) setReloadButton:(id) {
	%orig;
	NSLog(@"-(void) setReloadButton:(id)");
}

-(id) reloadButton {
	%orig;
	NSLog(@"-(id) reloadButton");
}

-(void) setSafariButton:(id) {
	%orig;
	NSLog(@"-(void) setSafariButton:(id)");
}

-(id) safariButton {
	%orig;
	NSLog(@"-(id) safariButton");
}

-(id) flexibleSpaceButton {
	%orig;
	NSLog(@"-(id) flexibleSpaceButton");
}

-(id) adViewDelegate {
	%orig;
	NSLog(@"-(id) adViewDelegate");
}

-(void) setAdViewDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdViewDelegate:(id)");
}

-(void) doneButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) doneButtonPressed:(id)");
}

-(void) forward {
	%orig;
	NSLog(@"-(void) forward");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(id) toolbar {
	%orig;
	NSLog(@"-(id) toolbar");
}

-(void) didRotateFromInterfaceOrientation:(long long) {
	%orig;
	NSLog(@"-(void) didRotateFromInterfaceOrientation:(long long)");
}

-(void) setToolbar:(id) {
	%orig;
	NSLog(@"-(void) setToolbar:(id)");
}

-(id) spinner {
	%orig;
	NSLog(@"-(id) spinner");
}

-(void) setDoneButton:(id) {
	%orig;
	NSLog(@"-(void) setDoneButton:(id)");
}

-(id) doneButton {
	%orig;
	NSLog(@"-(id) doneButton");
}

-(void) reload {
	%orig;
	NSLog(@"-(void) reload");
}

-(void) setSpinner:(id) {
	%orig;
	NSLog(@"-(void) setSpinner:(id)");
}

%end

%hook FBSDKContainerViewController

-(void) displayChildController:(id) {
	%orig;
	NSLog(@"-(void) displayChildController:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook FBRewardedVideoAdVideoInternal

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(bool) showAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id) animated:(bool)");
}

-(void) setIsStatusBarHidden:(bool) {
	%orig;
	NSLog(@"-(void) setIsStatusBarHidden:(bool)");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(bool) isAutoRotateEnabled {
	%orig;
	NSLog(@"-(bool) isAutoRotateEnabled");
}

-(id) rewardedVideoDataModel {
	%orig;
	NSLog(@"-(id) rewardedVideoDataModel");
}

-(long long) minViewabilityPercentage {
	%orig;
	NSLog(@"-(long long) minViewabilityPercentage");
}

-(void) setMinViewabilityPercentage:(long long) {
	%orig;
	NSLog(@"-(void) setMinViewabilityPercentage:(long long)");
}

-(void) setIsAutoRotateEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setIsAutoRotateEnabled:(bool)");
}

-(void) setRewardData:(id) {
	%orig;
	NSLog(@"-(void) setRewardData:(id)");
}

-(id) rewardData {
	%orig;
	NSLog(@"-(id) rewardData");
}

-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) rootViewController:(id) rewardData:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) rootViewController:(id) rewardData:(id)");
}

-(void) rewardedVideoView:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoView:(id) didFailWithError:(id)");
}

-(void) rewardedVideoViewProgress:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoViewProgress:(id)");
}

-(void) rewardedVideoViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoViewDidLoad:(id)");
}

-(void) rewardedVideoViewDidResume:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoViewDidResume:(id)");
}

-(void) rewardedVideoViewDidPause:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoViewDidPause:(id)");
}

-(void) rewardedVideoViewDidSkip:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoViewDidSkip:(id)");
}

-(void) rewardedVideoViewContextSwitch:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoViewContextSwitch:(id)");
}

-(void) rewardedVideoViewCached:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoViewCached:(id)");
}

-(void) rewardedVideoViewEnded:(id) withSuccess:(bool) withTime:(?) {
	%orig;
	NSLog(@"-(void) rewardedVideoViewEnded:(id) withSuccess:(bool) withTime:(?)");
}

-(id) videoLogger {
	%orig;
	NSLog(@"-(id) videoLogger");
}

-(void) setVideoLogger:(id) {
	%orig;
	NSLog(@"-(void) setVideoLogger:(id)");
}

-(id) videoView {
	%orig;
	NSLog(@"-(id) videoView");
}

-(void) setVideoView:(id) {
	%orig;
	NSLog(@"-(void) setVideoView:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(bool) isStatusBarHidden {
	%orig;
	NSLog(@"-(bool) isStatusBarHidden");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(void) didReceiveMemoryWarning {
	%orig;
	NSLog(@"-(void) didReceiveMemoryWarning");
}

-(long long) orientation {
	%orig;
	NSLog(@"-(long long) orientation");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(void) setOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setOrientation:(long long)");
}

%end

%hook FBAdWKWebViewBrowserController

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) forwardButton {
	%orig;
	NSLog(@"-(id) forwardButton");
}

-(void) setForwardButton:(id) {
	%orig;
	NSLog(@"-(void) setForwardButton:(id)");
}

-(id) inlineClientToken {
	%orig;
	NSLog(@"-(id) inlineClientToken");
}

-(long long) handlerTimeMs {
	%orig;
	NSLog(@"-(long long) handlerTimeMs");
}

-(long long) loadStartMs {
	%orig;
	NSLog(@"-(long long) loadStartMs");
}

-(long long) responseEndMs {
	%orig;
	NSLog(@"-(long long) responseEndMs");
}

-(long long) domContentLoadedMs {
	%orig;
	NSLog(@"-(long long) domContentLoadedMs");
}

-(long long) scrollReadyMs {
	%orig;
	NSLog(@"-(long long) scrollReadyMs");
}

-(long long) loadFinishMs {
	%orig;
	NSLog(@"-(long long) loadFinishMs");
}

-(void) setHandlerTimeMs:(long long) {
	%orig;
	NSLog(@"-(void) setHandlerTimeMs:(long long)");
}

-(void) setLoadStartMs:(long long) {
	%orig;
	NSLog(@"-(void) setLoadStartMs:(long long)");
}

-(void) setResponseEndMs:(long long) {
	%orig;
	NSLog(@"-(void) setResponseEndMs:(long long)");
}

-(void) setDomContentLoadedMs:(long long) {
	%orig;
	NSLog(@"-(void) setDomContentLoadedMs:(long long)");
}

-(void) setScrollReadyMs:(long long) {
	%orig;
	NSLog(@"-(void) setScrollReadyMs:(long long)");
}

-(void) setLoadFinishMs:(long long) {
	%orig;
	NSLog(@"-(void) setLoadFinishMs:(long long)");
}

-(void) setToolBar:(id) {
	%orig;
	NSLog(@"-(void) setToolBar:(id)");
}

-(id) toolBar {
	%orig;
	NSLog(@"-(id) toolBar");
}

-(void) backButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) backButtonClicked:(id)");
}

-(void) forwardButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) forwardButtonClicked:(id)");
}

-(void) refreshButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) refreshButtonClicked:(id)");
}

-(void) setSpinnerButton:(id) {
	%orig;
	NSLog(@"-(void) setSpinnerButton:(id)");
}

-(id) spinnerButton {
	%orig;
	NSLog(@"-(id) spinnerButton");
}

-(void) stopDOMContentLoadedTimer {
	%orig;
	NSLog(@"-(void) stopDOMContentLoadedTimer");
}

-(void) setDomContentLoadedTimer:(id) {
	%orig;
	NSLog(@"-(void) setDomContentLoadedTimer:(id)");
}

-(id) domContentLoadedTimer {
	%orig;
	NSLog(@"-(id) domContentLoadedTimer");
}

-(void) startDOMContentLoadedTimer {
	%orig;
	NSLog(@"-(void) startDOMContentLoadedTimer");
}

-(void) setInlineClientToken:(id) {
	%orig;
	NSLog(@"-(void) setInlineClientToken:(id)");
}

-(void) clearContent {
	%orig;
	NSLog(@"-(void) clearContent");
}

-(void) loadURL:(id) {
	%orig;
	NSLog(@"-(void) loadURL:(id)");
}

-(void) setRefreshButton:(id) {
	%orig;
	NSLog(@"-(void) setRefreshButton:(id)");
}

-(id) refreshButton {
	%orig;
	NSLog(@"-(id) refreshButton");
}

-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id)");
}

-(void) webView:(id) didStartProvisionalNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didStartProvisionalNavigation:(id)");
}

-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id)");
}

-(void) webView:(id) didFinishNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFinishNavigation:(id)");
}

-(void) webView:(id) didFailNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailNavigation:(id) withError:(id)");
}

-(void) doneButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) doneButtonClicked:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(bool) isStatusBarHidden {
	%orig;
	NSLog(@"-(bool) isStatusBarHidden");
}

-(void) setStatusBarHidden:(bool) {
	%orig;
	NSLog(@"-(void) setStatusBarHidden:(bool)");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

%end

%hook FBStoreProductViewController

-(void) reliablyLoadProductWithParameters:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) reliablyLoadProductWithParameters:(id) completionBlock:(id)");
}

-(void) _dismissStoreKitControllerIfPresented:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) _dismissStoreKitControllerIfPresented:(id) completion:(id)");
}

-(void) _scheduleAnotherLoad {
	%orig;
	NSLog(@"-(void) _scheduleAnotherLoad");
}

-(void) _timeoutAfterDelay {
	%orig;
	NSLog(@"-(void) _timeoutAfterDelay");
}

-(void) _presentProductViewController {
	%orig;
	NSLog(@"-(void) _presentProductViewController");
}

-(id) createStoreProductViewController {
	%orig;
	NSLog(@"-(id) createStoreProductViewController");
}

-(id) _createAndPrepareStoreProductViewController {
	%orig;
	NSLog(@"-(id) _createAndPrepareStoreProductViewController");
}

-(void) _loadCompletedWithResult:(bool) error:(id) duration:(double) loadAttempt:(int) storeKitController:(id) {
	%orig;
	NSLog(@"-(void) _loadCompletedWithResult:(bool) error:(id) duration:(double) loadAttempt:(int) storeKitController:(id)");
}

-(void) loadProductWithParameters:(id) numberOfAttempts:(int) delayBetweenAttempts:(double) timeoutAfterDelay:(double) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) loadProductWithParameters:(id) numberOfAttempts:(int) delayBetweenAttempts:(double) timeoutAfterDelay:(double) completionBlock:(id)");
}

-(void) _didPressCancel {
	%orig;
	NSLog(@"-(void) _didPressCancel");
}

-(id) _navBarBackgroundImageForIOS7 {
	%orig;
	NSLog(@"-(id) _navBarBackgroundImageForIOS7");
}

-(id) _navigationBarView {
	%orig;
	NSLog(@"-(id) _navigationBarView");
}

-(void) _dismissProductViewControllerWithCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) _dismissProductViewControllerWithCompletionBlock:(id)");
}

-(id) _dimmingViewBehindModal {
	%orig;
	NSLog(@"-(id) _dimmingViewBehindModal");
}

-(void) productViewControllerDidAppear:(id) {
	%orig;
	NSLog(@"-(void) productViewControllerDidAppear:(id)");
}

-(void) _notifyProductViewControllerDidFinish {
	%orig;
	NSLog(@"-(void) _notifyProductViewControllerDidFinish");
}

-(double) timeSpent {
	%orig;
	NSLog(@"-(double) timeSpent");
}

-(double) timeSpentBeforeLoad {
	%orig;
	NSLog(@"-(double) timeSpentBeforeLoad");
}

-(double) timeSpentAfterLoad {
	%orig;
	NSLog(@"-(double) timeSpentAfterLoad");
}

-(int) loadAttemptCount {
	%orig;
	NSLog(@"-(int) loadAttemptCount");
}

-(int) loadAttemptThatSucceeded {
	%orig;
	NSLog(@"-(int) loadAttemptThatSucceeded");
}

-(bool) loadWasSuccessful {
	%orig;
	NSLog(@"-(bool) loadWasSuccessful");
}

-(void) loadProductWithParameters:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) loadProductWithParameters:(id) completionBlock:(id)");
}

-(void) productViewControllerDidFinish:(id) {
	%orig;
	NSLog(@"-(void) productViewControllerDidFinish:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) loadView {
	%orig;
	NSLog(@"-(void) loadView");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

%end

%hook FBAdFullscreenVideoController

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setCallToActionButton:(id) {
	%orig;
	NSLog(@"-(void) setCallToActionButton:(id)");
}

-(id) callToActionButton {
	%orig;
	NSLog(@"-(id) callToActionButton");
}

-(id) callToAction {
	%orig;
	NSLog(@"-(id) callToAction");
}

-(void) swapInVideoView {
	%orig;
	NSLog(@"-(void) swapInVideoView");
}

-(void) callToActionHit:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) callToActionHit:(id) withEvent:(id)");
}

-(id) videoRenderer {
	%orig;
	NSLog(@"-(id) videoRenderer");
}

-(void) setVideoRenderer:(id) {
	%orig;
	NSLog(@"-(void) setVideoRenderer:(id)");
}

-(id) originalSuperView {
	%orig;
	NSLog(@"-(id) originalSuperView");
}

-(void) swapOutVideoView {
	%orig;
	NSLog(@"-(void) swapOutVideoView");
}

-(id) initWithVideoRenderer:(id) callToAction:(id) {
	%orig;
	NSLog(@"-(id) initWithVideoRenderer:(id) callToAction:(id)");
}

-(void) setCallToAction:(id) {
	%orig;
	NSLog(@"-(void) setCallToAction:(id)");
}

-(void) setOriginalSuperView:(id) {
	%orig;
	NSLog(@"-(void) setOriginalSuperView:(id)");
}

-(void) dismiss:(id) {
	%orig;
	NSLog(@"-(void) dismiss:(id)");
}

-(void) setOriginalFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setOriginalFrame:(CGRect)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(void) setDismissButton:(id) {
	%orig;
	NSLog(@"-(void) setDismissButton:(id)");
}

-(id) dismissButton {
	%orig;
	NSLog(@"-(id) dismissButton");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(bool) modalPresentationCapturesStatusBarAppearance {
	%orig;
	NSLog(@"-(bool) modalPresentationCapturesStatusBarAppearance");
}

-(CGRect) originalFrame {
	%orig;
	NSLog(@"-(CGRect) originalFrame");
}

%end

%hook FBAdUIWebViewBrowserController

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) forwardButton {
	%orig;
	NSLog(@"-(id) forwardButton");
}

-(void) setForwardButton:(id) {
	%orig;
	NSLog(@"-(void) setForwardButton:(id)");
}

-(id) inlineClientToken {
	%orig;
	NSLog(@"-(id) inlineClientToken");
}

-(long long) handlerTimeMs {
	%orig;
	NSLog(@"-(long long) handlerTimeMs");
}

-(long long) loadStartMs {
	%orig;
	NSLog(@"-(long long) loadStartMs");
}

-(long long) responseEndMs {
	%orig;
	NSLog(@"-(long long) responseEndMs");
}

-(long long) domContentLoadedMs {
	%orig;
	NSLog(@"-(long long) domContentLoadedMs");
}

-(long long) scrollReadyMs {
	%orig;
	NSLog(@"-(long long) scrollReadyMs");
}

-(long long) loadFinishMs {
	%orig;
	NSLog(@"-(long long) loadFinishMs");
}

-(void) setHandlerTimeMs:(long long) {
	%orig;
	NSLog(@"-(void) setHandlerTimeMs:(long long)");
}

-(void) setLoadStartMs:(long long) {
	%orig;
	NSLog(@"-(void) setLoadStartMs:(long long)");
}

-(void) setResponseEndMs:(long long) {
	%orig;
	NSLog(@"-(void) setResponseEndMs:(long long)");
}

-(void) setDomContentLoadedMs:(long long) {
	%orig;
	NSLog(@"-(void) setDomContentLoadedMs:(long long)");
}

-(void) setScrollReadyMs:(long long) {
	%orig;
	NSLog(@"-(void) setScrollReadyMs:(long long)");
}

-(void) setLoadFinishMs:(long long) {
	%orig;
	NSLog(@"-(void) setLoadFinishMs:(long long)");
}

-(void) setToolBar:(id) {
	%orig;
	NSLog(@"-(void) setToolBar:(id)");
}

-(id) toolBar {
	%orig;
	NSLog(@"-(id) toolBar");
}

-(void) backButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) backButtonClicked:(id)");
}

-(void) forwardButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) forwardButtonClicked:(id)");
}

-(void) refreshButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) refreshButtonClicked:(id)");
}

-(void) setSpinnerButton:(id) {
	%orig;
	NSLog(@"-(void) setSpinnerButton:(id)");
}

-(id) spinnerButton {
	%orig;
	NSLog(@"-(id) spinnerButton");
}

-(void) stopDOMContentLoadedTimer {
	%orig;
	NSLog(@"-(void) stopDOMContentLoadedTimer");
}

-(void) setDomContentLoadedTimer:(id) {
	%orig;
	NSLog(@"-(void) setDomContentLoadedTimer:(id)");
}

-(id) domContentLoadedTimer {
	%orig;
	NSLog(@"-(id) domContentLoadedTimer");
}

-(void) startDOMContentLoadedTimer {
	%orig;
	NSLog(@"-(void) startDOMContentLoadedTimer");
}

-(void) setInlineClientToken:(id) {
	%orig;
	NSLog(@"-(void) setInlineClientToken:(id)");
}

-(void) clearContent {
	%orig;
	NSLog(@"-(void) clearContent");
}

-(void) loadURL:(id) {
	%orig;
	NSLog(@"-(void) loadURL:(id)");
}

-(void) setRefreshButton:(id) {
	%orig;
	NSLog(@"-(void) setRefreshButton:(id)");
}

-(id) refreshButton {
	%orig;
	NSLog(@"-(id) refreshButton");
}

-(void) doneButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) doneButtonClicked:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(bool) isStatusBarHidden {
	%orig;
	NSLog(@"-(bool) isStatusBarHidden");
}

-(void) setStatusBarHidden:(bool) {
	%orig;
	NSLog(@"-(void) setStatusBarHidden:(bool)");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) updateButtons {
	%orig;
	NSLog(@"-(void) updateButtons");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

-(void) webView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailLoadWithError:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidStartLoad:(id)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

%end

%hook FBRewardedVideoAdEndCardInternal

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(bool) showAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id) animated:(bool)");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(bool) isAutoRotateEnabled {
	%orig;
	NSLog(@"-(bool) isAutoRotateEnabled");
}

-(void) rewardedVideoAdEndViewClicked:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdEndViewClicked:(id)");
}

-(void) rewardedVideoAdEndView:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdEndView:(id) didFailWithError:(id)");
}

-(void) rewardedVideoAdEndViewWillClose:(id) {
	%orig;
	NSLog(@"-(void) rewardedVideoAdEndViewWillClose:(id)");
}

-(id) rewardedVideoDataModel {
	%orig;
	NSLog(@"-(id) rewardedVideoDataModel");
}

-(long long) minViewabilityPercentage {
	%orig;
	NSLog(@"-(long long) minViewabilityPercentage");
}

-(void) setMinViewabilityPercentage:(long long) {
	%orig;
	NSLog(@"-(void) setMinViewabilityPercentage:(long long)");
}

-(void) setIsAutoRotateEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setIsAutoRotateEnabled:(bool)");
}

-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) rootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) rootViewController:(id)");
}

-(void) setEndView:(id) {
	%orig;
	NSLog(@"-(void) setEndView:(id)");
}

-(id) endView {
	%orig;
	NSLog(@"-(id) endView");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(void) didReceiveMemoryWarning {
	%orig;
	NSLog(@"-(void) didReceiveMemoryWarning");
}

-(long long) orientation {
	%orig;
	NSLog(@"-(long long) orientation");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(void) setOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setOrientation:(long long)");
}

%end

%hook FBInterstitialAdInternal

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(void) loadAdFromMarkup:(id) activationCommand:(id) orientation:(long long) {
	%orig;
	NSLog(@"-(void) loadAdFromMarkup:(id) activationCommand:(id) orientation:(long long)");
}

-(bool) showAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id) animated:(bool)");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adData:(id) minViewability:(int)");
}

%end

%hook FBInterstitialVideoAdInternal

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(void) loadAdFromMarkup:(id) activationCommand:(id) orientation:(long long) {
	%orig;
	NSLog(@"-(void) loadAdFromMarkup:(id) activationCommand:(id) orientation:(long long)");
}

-(bool) showAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id) animated:(bool)");
}

-(id) initWithPlacementID:(id) adData:(id) placementDefinition:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adData:(id) placementDefinition:(id)");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(void) setDataModel:(id) {
	%orig;
	NSLog(@"-(void) setDataModel:(id)");
}

-(id) videoAdController {
	%orig;
	NSLog(@"-(id) videoAdController");
}

-(void) controllerDidLoad:(id) {
	%orig;
	NSLog(@"-(void) controllerDidLoad:(id)");
}

-(void) controller:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) controller:(id) didFailWithError:(id)");
}

-(void) controllerWillRegisterProgress:(id) {
	%orig;
	NSLog(@"-(void) controllerWillRegisterProgress:(id)");
}

-(void) controllerDidClick:(id) {
	%orig;
	NSLog(@"-(void) controllerDidClick:(id)");
}

-(void) controllerDidEnd:(id) {
	%orig;
	NSLog(@"-(void) controllerDidEnd:(id)");
}

-(void) controllerDidUnload:(id) {
	%orig;
	NSLog(@"-(void) controllerDidUnload:(id)");
}

-(id) dataModel {
	%orig;
	NSLog(@"-(id) dataModel");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

%end

%hook FBInterstitialDisplayAdInternal

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(void) loadAdFromMarkup:(id) activationCommand:(id) orientation:(long long) {
	%orig;
	NSLog(@"-(void) loadAdFromMarkup:(id) activationCommand:(id) orientation:(long long)");
}

-(bool) showAdFromRootViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id) animated:(bool)");
}

-(void) setIsStatusBarHidden:(bool) {
	%orig;
	NSLog(@"-(void) setIsStatusBarHidden:(bool)");
}

-(void) setInterstitialOpenedTime:(id) {
	%orig;
	NSLog(@"-(void) setInterstitialOpenedTime:(id)");
}

-(CGRect) frameForPresentationInWindow:(id) {
	%orig;
	NSLog(@"-(CGRect) frameForPresentationInWindow:(id)");
}

-(void) exitInterstitial {
	%orig;
	NSLog(@"-(void) exitInterstitial");
}

-(id) interstitialOpenedTime {
	%orig;
	NSLog(@"-(id) interstitialOpenedTime");
}

-(void) adViewWillClose:(id) {
	%orig;
	NSLog(@"-(void) adViewWillClose:(id)");
}

-(void) adViewDidClick:(id) {
	%orig;
	NSLog(@"-(void) adViewDidClick:(id)");
}

-(void) adViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidLoad:(id)");
}

-(void) adView:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailWithError:(id)");
}

-(void) adViewWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) adViewWillLogImpression:(id)");
}

-(id) initWithPlacementID:(id) adData:(id) placementDefinition:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adData:(id) placementDefinition:(id)");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(bool) isStatusBarHidden {
	%orig;
	NSLog(@"-(bool) isStatusBarHidden");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

%end

%hook EmailInputAccessoryViewController

-(void) buttonAction:(id) {
	%orig;
	NSLog(@"-(void) buttonAction:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) stackView {
	%orig;
	NSLog(@"-(id) stackView");
}

-(void) setStackView:(id) {
	%orig;
	NSLog(@"-(void) setStackView:(id)");
}

%end

%hook PMTargetMarketPickerViewController

-(void) configureWithArtistUid:(id) selectedMarketsViewModel:(id) {
	%orig;
	NSLog(@"-(void) configureWithArtistUid:(id) selectedMarketsViewModel:(id)");
}

-(id) selectedMarketsHeight {
	%orig;
	NSLog(@"-(id) selectedMarketsHeight");
}

-(void) setSelectedMarketsHeight:(id) {
	%orig;
	NSLog(@"-(void) setSelectedMarketsHeight:(id)");
}

-(id) selectedMarketView {
	%orig;
	NSLog(@"-(id) selectedMarketView");
}

-(void) setSelectedMarketView:(id) {
	%orig;
	NSLog(@"-(void) setSelectedMarketView:(id)");
}

-(id) comingToTownPrompt {
	%orig;
	NSLog(@"-(id) comingToTownPrompt");
}

-(void) setComingToTownPrompt:(id) {
	%orig;
	NSLog(@"-(void) setComingToTownPrompt:(id)");
}

-(void) searchQueryDidChange:(id) {
	%orig;
	NSLog(@"-(void) searchQueryDidChange:(id)");
}

-(void) adjustKeyboardInset:(id) {
	%orig;
	NSLog(@"-(void) adjustKeyboardInset:(id)");
}

-(void) updateQueryWithTriggeredBy:(id) {
	%orig;
	NSLog(@"-(void) updateQueryWithTriggeredBy:(id)");
}

-(void) setSearchField:(id) {
	%orig;
	NSLog(@"-(void) setSearchField:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) searchField {
	%orig;
	NSLog(@"-(id) searchField");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PodcastCellPreviewViewController

-(void) dismissVC:(id) {
	%orig;
	NSLog(@"-(void) dismissVC:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(id) tableView:(id) titleForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) titleForHeaderInSection:(long long)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PMCustomTemplateStationAdContainerViewController

-(bool) testPointInsideInView:(id) withPoint:(CGPoint) {
	%orig;
	NSLog(@"-(bool) testPointInsideInView:(id) withPoint:(CGPoint)");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) didTapCloseButton {
	%orig;
	NSLog(@"-(void) didTapCloseButton");
}

-(void) dismissAd:(long long) {
	%orig;
	NSLog(@"-(void) dismissAd:(long long)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(bool) isShowingAd {
	%orig;
	NSLog(@"-(bool) isShowingAd");
}

-(void) setIsShowingAd:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingAd:(bool)");
}

-(id) clippingViewTopConstraint {
	%orig;
	NSLog(@"-(id) clippingViewTopConstraint");
}

-(void) setClippingViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setClippingViewTopConstraint:(id)");
}

-(id) outerView {
	%orig;
	NSLog(@"-(id) outerView");
}

-(void) setOuterView:(id) {
	%orig;
	NSLog(@"-(void) setOuterView:(id)");
}

-(id) outerViewTopConstraint {
	%orig;
	NSLog(@"-(id) outerViewTopConstraint");
}

-(void) setOuterViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setOuterViewTopConstraint:(id)");
}

-(id) closeButtonLeadingConstraint {
	%orig;
	NSLog(@"-(id) closeButtonLeadingConstraint");
}

-(void) setCloseButtonLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCloseButtonLeadingConstraint:(id)");
}

-(id) clippingView {
	%orig;
	NSLog(@"-(id) clippingView");
}

-(void) setClippingView:(id) {
	%orig;
	NSLog(@"-(void) setClippingView:(id)");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(void) setIsAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setIsAnimating:(bool)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(bool) isAnimating {
	%orig;
	NSLog(@"-(bool) isAnimating");
}

%end

%hook FirstIntroViewController

-(void) setPageControl:(id) {
	%orig;
	NSLog(@"-(void) setPageControl:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(id) pageControl {
	%orig;
	NSLog(@"-(id) pageControl");
}

-(void) prepareForSegue:(id) sender:(id) {
	%orig;
	NSLog(@"-(void) prepareForSegue:(id) sender:(id)");
}

%end

%hook PMBottomNavigationViewController

-(id) initWithNavigationDelegate:(id) core:(id) {
	%orig;
	NSLog(@"-(id) initWithNavigationDelegate:(id) core:(id)");
}

-(void) updateTabBarItems {
	%orig;
	NSLog(@"-(void) updateTabBarItems");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) tabBar:(id) didSelectItem:(id) {
	%orig;
	NSLog(@"-(void) tabBar:(id) didSelectItem:(id)");
}

-(id) tabBar {
	%orig;
	NSLog(@"-(id) tabBar");
}

-(void) setTabBar:(id) {
	%orig;
	NSLog(@"-(void) setTabBar:(id)");
}

%end

%hook FirstIntroFTUXLoginViewController

-(id) termsWebView {
	%orig;
	NSLog(@"-(id) termsWebView");
}

-(void) setTermsWebView:(id) {
	%orig;
	NSLog(@"-(void) setTermsWebView:(id)");
}

-(void) primaryButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) primaryButtonClicked:(id)");
}

-(void) dismissOverlayWithTouch:(id) {
	%orig;
	NSLog(@"-(void) dismissOverlayWithTouch:(id)");
}

-(void) setEmailTextField:(id) {
	%orig;
	NSLog(@"-(void) setEmailTextField:(id)");
}

-(id) campaignImageThree {
	%orig;
	NSLog(@"-(id) campaignImageThree");
}

-(void) setCampaignImageThree:(id) {
	%orig;
	NSLog(@"-(void) setCampaignImageThree:(id)");
}

-(id) campaignImageTwo {
	%orig;
	NSLog(@"-(id) campaignImageTwo");
}

-(void) setCampaignImageTwo:(id) {
	%orig;
	NSLog(@"-(void) setCampaignImageTwo:(id)");
}

-(id) campaignImageOne {
	%orig;
	NSLog(@"-(id) campaignImageOne");
}

-(void) setCampaignImageOne:(id) {
	%orig;
	NSLog(@"-(void) setCampaignImageOne:(id)");
}

-(id) campaignImageOneWidthConstraint {
	%orig;
	NSLog(@"-(id) campaignImageOneWidthConstraint");
}

-(void) setCampaignImageOneWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCampaignImageOneWidthConstraint:(id)");
}

-(void) secondaryButtonClick:(id) {
	%orig;
	NSLog(@"-(void) secondaryButtonClick:(id)");
}

-(id) headerLabel {
	%orig;
	NSLog(@"-(id) headerLabel");
}

-(void) setHeaderLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderLabel:(id)");
}

-(id) emailTextField {
	%orig;
	NSLog(@"-(id) emailTextField");
}

-(void) setPrimaryButton:(id) {
	%orig;
	NSLog(@"-(void) setPrimaryButton:(id)");
}

-(void) setSecondaryButton:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryButton:(id)");
}

-(id) secondaryButton {
	%orig;
	NSLog(@"-(id) secondaryButton");
}

-(id) primaryButton {
	%orig;
	NSLog(@"-(id) primaryButton");
}

-(id) errorView {
	%orig;
	NSLog(@"-(id) errorView");
}

-(void) setErrorView:(id) {
	%orig;
	NSLog(@"-(void) setErrorView:(id)");
}

-(id) errorLabel {
	%orig;
	NSLog(@"-(id) errorLabel");
}

-(void) setErrorLabel:(id) {
	%orig;
	NSLog(@"-(void) setErrorLabel:(id)");
}

-(id) descriptionTextView {
	%orig;
	NSLog(@"-(id) descriptionTextView");
}

-(void) setDescriptionTextView:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionTextView:(id)");
}

-(id) passwordTextField {
	%orig;
	NSLog(@"-(id) passwordTextField");
}

-(id) passwordLabel {
	%orig;
	NSLog(@"-(id) passwordLabel");
}

-(void) setPasswordLabel:(id) {
	%orig;
	NSLog(@"-(void) setPasswordLabel:(id)");
}

-(void) setPasswordTextField:(id) {
	%orig;
	NSLog(@"-(void) setPasswordTextField:(id)");
}

-(void) keyboardWillShowWithNotification:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShowWithNotification:(id)");
}

-(void) keyboardWillHideWithNotification:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillHideWithNotification:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

%end

%hook AccessoryLockScreenViewController

-(id) voiceHintLabel {
	%orig;
	NSLog(@"-(id) voiceHintLabel");
}

-(void) setVoiceHintLabel:(id) {
	%orig;
	NSLog(@"-(void) setVoiceHintLabel:(id)");
}

-(id) voiceActiveImage {
	%orig;
	NSLog(@"-(id) voiceActiveImage");
}

-(void) setVoiceActiveImage:(id) {
	%orig;
	NSLog(@"-(void) setVoiceActiveImage:(id)");
}

-(id) voiceActiveContainerView {
	%orig;
	NSLog(@"-(id) voiceActiveContainerView");
}

-(void) setVoiceActiveContainerView:(id) {
	%orig;
	NSLog(@"-(void) setVoiceActiveContainerView:(id)");
}

-(id) voiceActiveContainerHeightConstraint {
	%orig;
	NSLog(@"-(id) voiceActiveContainerHeightConstraint");
}

-(void) setVoiceActiveContainerHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setVoiceActiveContainerHeightConstraint:(id)");
}

-(id) albumArtBackgroundImage {
	%orig;
	NSLog(@"-(id) albumArtBackgroundImage");
}

-(void) setAlbumArtBackgroundImage:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtBackgroundImage:(id)");
}

-(id) opacityView {
	%orig;
	NSLog(@"-(id) opacityView");
}

-(void) setOpacityView:(id) {
	%orig;
	NSLog(@"-(void) setOpacityView:(id)");
}

-(id) controlsStackView {
	%orig;
	NSLog(@"-(id) controlsStackView");
}

-(void) setControlsStackView:(id) {
	%orig;
	NSLog(@"-(void) setControlsStackView:(id)");
}

-(void) handleLongSwipe {
	%orig;
	NSLog(@"-(void) handleLongSwipe");
}

-(void) tapToCancelAction:(id) {
	%orig;
	NSLog(@"-(void) tapToCancelAction:(id)");
}

-(void) handleDebugTappedWithSender:(id) {
	%orig;
	NSLog(@"-(void) handleDebugTappedWithSender:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMLevel2RotatableContainerViewController

-(bool) didReachInteractionIdleThreshold {
	%orig;
	NSLog(@"-(bool) didReachInteractionIdleThreshold");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) preferredStatusBarUpdateAnimation {
	%orig;
	NSLog(@"-(long long) preferredStatusBarUpdateAnimation");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(bool) prefersHomeIndicatorAutoHidden {
	%orig;
	NSLog(@"-(bool) prefersHomeIndicatorAutoHidden");
}

-(void) didRotate:(id) {
	%orig;
	NSLog(@"-(void) didRotate:(id)");
}

%end

%hook PMMessageLoadingViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook SharingViewController

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(id) mediaCellView {
	%orig;
	NSLog(@"-(id) mediaCellView");
}

-(void) setMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) setMediaCellView:(id)");
}

-(id) sharingMethodsTableView {
	%orig;
	NSLog(@"-(id) sharingMethodsTableView");
}

-(void) setSharingMethodsTableView:(id) {
	%orig;
	NSLog(@"-(void) setSharingMethodsTableView:(id)");
}

-(id) cardFillerViewHeightConstraint {
	%orig;
	NSLog(@"-(id) cardFillerViewHeightConstraint");
}

-(void) setCardFillerViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCardFillerViewHeightConstraint:(id)");
}

-(id) cardVerticalSpaceToBottomConstraint {
	%orig;
	NSLog(@"-(id) cardVerticalSpaceToBottomConstraint");
}

-(void) setCardVerticalSpaceToBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCardVerticalSpaceToBottomConstraint:(id)");
}

-(id) cardHeightConstraint {
	%orig;
	NSLog(@"-(id) cardHeightConstraint");
}

-(void) setCardHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCardHeightConstraint:(id)");
}

-(void) dismissFromBackgroundTapWithSender:(id) {
	%orig;
	NSLog(@"-(void) dismissFromBackgroundTapWithSender:(id)");
}

-(void) handlePanWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) handlePanWithGestureRecognizer:(id)");
}

-(id) cardView {
	%orig;
	NSLog(@"-(id) cardView");
}

-(void) setCardView:(id) {
	%orig;
	NSLog(@"-(void) setCardView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook FirstIntroGenericViewController

-(bool) textView:(id) shouldInteractWithURL:(id) inRange:(_NSRange) interaction:(long long) {
	%orig;
	NSLog(@"-(bool) textView:(id) shouldInteractWithURL:(id) inRange:(_NSRange) interaction:(long long)");
}

-(id) termsOfServiceView {
	%orig;
	NSLog(@"-(id) termsOfServiceView");
}

-(void) setTermsOfServiceView:(id) {
	%orig;
	NSLog(@"-(void) setTermsOfServiceView:(id)");
}

-(id) campaignImage {
	%orig;
	NSLog(@"-(id) campaignImage");
}

-(void) setCampaignImage:(id) {
	%orig;
	NSLog(@"-(void) setCampaignImage:(id)");
}

-(id) campaignImageWidthConstraint {
	%orig;
	NSLog(@"-(id) campaignImageWidthConstraint");
}

-(void) setCampaignImageWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCampaignImageWidthConstraint:(id)");
}

-(id) gradientBackground {
	%orig;
	NSLog(@"-(id) gradientBackground");
}

-(void) setGradientBackground:(id) {
	%orig;
	NSLog(@"-(void) setGradientBackground:(id)");
}

-(void) secondaryButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) secondaryButtonClicked:(id)");
}

-(void) primaryButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) primaryButtonClicked:(id)");
}

-(void) dismissOverlayWithTouch:(id) {
	%orig;
	NSLog(@"-(void) dismissOverlayWithTouch:(id)");
}

-(id) headerLabel {
	%orig;
	NSLog(@"-(id) headerLabel");
}

-(void) setHeaderLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderLabel:(id)");
}

-(void) setPrimaryButton:(id) {
	%orig;
	NSLog(@"-(void) setPrimaryButton:(id)");
}

-(void) setSecondaryButton:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryButton:(id)");
}

-(id) secondaryButton {
	%orig;
	NSLog(@"-(id) secondaryButton");
}

-(id) primaryButton {
	%orig;
	NSLog(@"-(id) primaryButton");
}

-(id) descriptionTextView {
	%orig;
	NSLog(@"-(id) descriptionTextView");
}

-(void) setDescriptionTextView:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionTextView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

%end

%hook PMTabBarViewController

-(id) itemTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) itemTitleAtIndex:(long long)");
}

-(unsigned long long) selectedItemIndex {
	%orig;
	NSLog(@"-(unsigned long long) selectedItemIndex");
}

-(void) setSelectedItemIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSelectedItemIndex:(unsigned long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) tabBar:(id) didSelectItem:(id) {
	%orig;
	NSLog(@"-(void) tabBar:(id) didSelectItem:(id)");
}

-(id) tabBar {
	%orig;
	NSLog(@"-(id) tabBar");
}

-(void) setTabBar:(id) {
	%orig;
	NSLog(@"-(void) setTabBar:(id)");
}

%end

%hook PMLifeCycleViewController

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) willRotateToInterfaceOrientation:(long long) duration:(double) {
	%orig;
	NSLog(@"-(void) willRotateToInterfaceOrientation:(long long) duration:(double)");
}

-(void) willAnimateRotationToInterfaceOrientation:(long long) duration:(double) {
	%orig;
	NSLog(@"-(void) willAnimateRotationToInterfaceOrientation:(long long) duration:(double)");
}

-(void) didRotateFromInterfaceOrientation:(long long) {
	%orig;
	NSLog(@"-(void) didRotateFromInterfaceOrientation:(long long)");
}

%end

%hook PMStationListOnboardingViewController

+(void) applyGradientToOnboardingUITreatmentView:(id) {
	%orig;
	NSLog(@"+(void) applyGradientToOnboardingUITreatmentView:(id)");
}

-(void) setupForViewWillAppear {
	%orig;
	NSLog(@"-(void) setupForViewWillAppear");
}

-(CGSize) sizeForOnboardingUITreatment {
	%orig;
	NSLog(@"-(CGSize) sizeForOnboardingUITreatment");
}

-(void) createBlueRippleMask {
	%orig;
	NSLog(@"-(void) createBlueRippleMask");
}

-(void) createWhiteRipples {
	%orig;
	NSLog(@"-(void) createWhiteRipples");
}

-(void) createBlueRipples {
	%orig;
	NSLog(@"-(void) createBlueRipples");
}

-(void) createFooterView {
	%orig;
	NSLog(@"-(void) createFooterView");
}

-(void) fireAnimationSequence {
	%orig;
	NSLog(@"-(void) fireAnimationSequence");
}

-(void) resetRippleAnimationTimer {
	%orig;
	NSLog(@"-(void) resetRippleAnimationTimer");
}

-(id) whiteRipples {
	%orig;
	NSLog(@"-(id) whiteRipples");
}

-(id) blueRipples {
	%orig;
	NSLog(@"-(id) blueRipples");
}

-(id) createStationIconContainer {
	%orig;
	NSLog(@"-(id) createStationIconContainer");
}

-(id) createStationLabelContainer {
	%orig;
	NSLog(@"-(id) createStationLabelContainer");
}

-(id) createStationLabel {
	%orig;
	NSLog(@"-(id) createStationLabel");
}

-(id) createStationIcon {
	%orig;
	NSLog(@"-(id) createStationIcon");
}

-(id) createStationDetailLabel {
	%orig;
	NSLog(@"-(id) createStationDetailLabel");
}

-(void) didTapCreateStationButton {
	%orig;
	NSLog(@"-(void) didTapCreateStationButton");
}

-(void) didTapBrowseButton {
	%orig;
	NSLog(@"-(void) didTapBrowseButton");
}

-(id) browseIcon {
	%orig;
	NSLog(@"-(id) browseIcon");
}

-(id) pandoraLogoImageView {
	%orig;
	NSLog(@"-(id) pandoraLogoImageView");
}

-(void) setShouldHideBlueRipples:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideBlueRipples:(bool)");
}

-(void) setShouldShowUITreatment:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowUITreatment:(bool)");
}

-(id) blueRipplesContainer {
	%orig;
	NSLog(@"-(id) blueRipplesContainer");
}

-(id) blueOverlay {
	%orig;
	NSLog(@"-(id) blueOverlay");
}

-(bool) didAnimateWhiteRipplesOnce {
	%orig;
	NSLog(@"-(bool) didAnimateWhiteRipplesOnce");
}

-(bool) shouldShowUITreatment {
	%orig;
	NSLog(@"-(bool) shouldShowUITreatment");
}

-(id) browseLabelContainer {
	%orig;
	NSLog(@"-(id) browseLabelContainer");
}

-(void) adjustCreateStationIconCenter {
	%orig;
	NSLog(@"-(void) adjustCreateStationIconCenter");
}

-(double) iconCenter {
	%orig;
	NSLog(@"-(double) iconCenter");
}

-(void) setIconCenter:(double) {
	%orig;
	NSLog(@"-(void) setIconCenter:(double)");
}

-(id) whiteRipplesContainer {
	%orig;
	NSLog(@"-(id) whiteRipplesContainer");
}

-(void) setRipples:(id) toPosition:(CGPoint) {
	%orig;
	NSLog(@"-(void) setRipples:(id) toPosition:(CGPoint)");
}

-(bool) shouldHideBlueRipples {
	%orig;
	NSLog(@"-(bool) shouldHideBlueRipples");
}

-(id) rippleAnimationTimer {
	%orig;
	NSLog(@"-(id) rippleAnimationTimer");
}

-(void) continueRippleAnimation {
	%orig;
	NSLog(@"-(void) continueRippleAnimation");
}

-(void) setRippleAnimationTimer:(id) {
	%orig;
	NSLog(@"-(void) setRippleAnimationTimer:(id)");
}

-(id) blueRippleColorForIndex:(long long) {
	%orig;
	NSLog(@"-(id) blueRippleColorForIndex:(long long)");
}

-(id) whiteRippleColorForIndex:(long long) {
	%orig;
	NSLog(@"-(id) whiteRippleColorForIndex:(long long)");
}

-(id) uiTreatmentView {
	%orig;
	NSLog(@"-(id) uiTreatmentView");
}

-(id) onboardingUITreatmentView {
	%orig;
	NSLog(@"-(id) onboardingUITreatmentView");
}

-(void) setUiTreatmentView:(id) {
	%orig;
	NSLog(@"-(void) setUiTreatmentView:(id)");
}

-(id) createRippleLayerForIndex:(long long) {
	%orig;
	NSLog(@"-(id) createRippleLayerForIndex:(long long)");
}

-(void) setWhiteRipples:(id) {
	%orig;
	NSLog(@"-(void) setWhiteRipples:(id)");
}

-(void) setBlueRipples:(id) {
	%orig;
	NSLog(@"-(void) setBlueRipples:(id)");
}

-(void) beginAnimationSequence {
	%orig;
	NSLog(@"-(void) beginAnimationSequence");
}

-(void) setDidAnimateWhiteRipplesOnce:(bool) {
	%orig;
	NSLog(@"-(void) setDidAnimateWhiteRipplesOnce:(bool)");
}

-(void) startRippleAnimationTimer {
	%orig;
	NSLog(@"-(void) startRippleAnimationTimer");
}

-(bool) didAnimateRipplesOnce {
	%orig;
	NSLog(@"-(bool) didAnimateRipplesOnce");
}

-(void) setDidAnimateRipplesOnce:(bool) {
	%orig;
	NSLog(@"-(void) setDidAnimateRipplesOnce:(bool)");
}

-(void) fadeInAnimationSequence {
	%orig;
	NSLog(@"-(void) fadeInAnimationSequence");
}

-(void) animateCreateStationIcon {
	%orig;
	NSLog(@"-(void) animateCreateStationIcon");
}

-(void) beginRippleAnimation {
	%orig;
	NSLog(@"-(void) beginRippleAnimation");
}

-(void) animateCreateStationDescription {
	%orig;
	NSLog(@"-(void) animateCreateStationDescription");
}

-(void) animatePandoraLogo {
	%orig;
	NSLog(@"-(void) animatePandoraLogo");
}

-(void) setWhiteRipplesContainer:(id) {
	%orig;
	NSLog(@"-(void) setWhiteRipplesContainer:(id)");
}

-(void) setBlueRipplesContainer:(id) {
	%orig;
	NSLog(@"-(void) setBlueRipplesContainer:(id)");
}

-(void) setBlueOverlay:(id) {
	%orig;
	NSLog(@"-(void) setBlueOverlay:(id)");
}

-(void) setCreateStationLabel:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationLabel:(id)");
}

-(void) setCreateStationIconContainer:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationIconContainer:(id)");
}

-(void) setCreateStationIcon:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationIcon:(id)");
}

-(void) setCreateStationLabelContainer:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationLabelContainer:(id)");
}

-(void) setBrowseLabelContainer:(id) {
	%orig;
	NSLog(@"-(void) setBrowseLabelContainer:(id)");
}

-(void) setBrowseIcon:(id) {
	%orig;
	NSLog(@"-(void) setBrowseIcon:(id)");
}

-(void) setPandoraLogoImageView:(id) {
	%orig;
	NSLog(@"-(void) setPandoraLogoImageView:(id)");
}

-(void) setCreateStationDetailLabel:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationDetailLabel:(id)");
}

-(bool) hideTabBarWhenVisible {
	%orig;
	NSLog(@"-(bool) hideTabBarWhenVisible");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook PMArtistAudioMessageDetailsController

-(void) setMessageFromLabel:(id) {
	%orig;
	NSLog(@"-(void) setMessageFromLabel:(id)");
}

-(id) messageFromLabel {
	%orig;
	NSLog(@"-(id) messageFromLabel");
}

-(void) setupSelectTrackController {
	%orig;
	NSLog(@"-(void) setupSelectTrackController");
}

-(id) changeMessageButton {
	%orig;
	NSLog(@"-(id) changeMessageButton");
}

-(id) changeImageButton {
	%orig;
	NSLog(@"-(id) changeImageButton");
}

-(id) addALinkButton {
	%orig;
	NSLog(@"-(id) addALinkButton");
}

-(id) artistTitleLabel {
	%orig;
	NSLog(@"-(id) artistTitleLabel");
}

-(id) previewProfileImageView {
	%orig;
	NSLog(@"-(id) previewProfileImageView");
}

-(id) previewRadialGradientView {
	%orig;
	NSLog(@"-(id) previewRadialGradientView");
}

-(id) topGradientView {
	%orig;
	NSLog(@"-(id) topGradientView");
}

-(id) bottomGradientView {
	%orig;
	NSLog(@"-(id) bottomGradientView");
}

-(id) optionsTableView {
	%orig;
	NSLog(@"-(id) optionsTableView");
}

-(id) draftButton {
	%orig;
	NSLog(@"-(id) draftButton");
}

-(void) updateLinkButtonWithButtonLabelText:(id) {
	%orig;
	NSLog(@"-(void) updateLinkButtonWithButtonLabelText:(id)");
}

-(void) setupTile {
	%orig;
	NSLog(@"-(void) setupTile");
}

-(void) setDefaultImageVisible:(bool) {
	%orig;
	NSLog(@"-(void) setDefaultImageVisible:(bool)");
}

-(void) updateUIFromOptionsModel {
	%orig;
	NSLog(@"-(void) updateUIFromOptionsModel");
}

-(void) setSelectTrackController:(id) {
	%orig;
	NSLog(@"-(void) setSelectTrackController:(id)");
}

-(id) selectTrackController {
	%orig;
	NSLog(@"-(id) selectTrackController");
}

-(void) logStatForAction:(id) {
	%orig;
	NSLog(@"-(void) logStatForAction:(id)");
}

-(id) linkUrlTextField {
	%orig;
	NSLog(@"-(id) linkUrlTextField");
}

-(bool) hasPermissionToUseCamera {
	%orig;
	NSLog(@"-(bool) hasPermissionToUseCamera");
}

-(void) showImagePickerControllerForCaptureType:(long long) {
	%orig;
	NSLog(@"-(void) showImagePickerControllerForCaptureType:(long long)");
}

-(bool) hasPermissionToUsePhotoLibrary {
	%orig;
	NSLog(@"-(bool) hasPermissionToUsePhotoLibrary");
}

-(id) marketPickerController {
	%orig;
	NSLog(@"-(id) marketPickerController");
}

-(void) logStatForAction:(id) withErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) logStatForAction:(id) withErrorMessage:(id)");
}

-(void) updateVisiblePrompt {
	%orig;
	NSLog(@"-(void) updateVisiblePrompt");
}

-(void) showChangeImageActionSheet {
	%orig;
	NSLog(@"-(void) showChangeImageActionSheet");
}

-(void) postMessageAsDraft:(bool) {
	%orig;
	NSLog(@"-(void) postMessageAsDraft:(bool)");
}

-(void) showPermissionAlertForCaptureType:(long long) {
	%orig;
	NSLog(@"-(void) showPermissionAlertForCaptureType:(long long)");
}

-(id) postQueue {
	%orig;
	NSLog(@"-(id) postQueue");
}

-(void) postEnqueuedMessageAsDraft:(bool) {
	%orig;
	NSLog(@"-(void) postEnqueuedMessageAsDraft:(bool)");
}

-(void) performTaskWhenProcessingIsComplete:(id) {
	%orig;
	NSLog(@"-(void) performTaskWhenProcessingIsComplete:(id)");
}

-(void) showUnableToPostAlertWithMessage:(id) isDraft:(bool) {
	%orig;
	NSLog(@"-(void) showUnableToPostAlertWithMessage:(id) isDraft:(bool)");
}

-(id) redirectTask {
	%orig;
	NSLog(@"-(id) redirectTask");
}

-(void) setRedirectTask:(id) {
	%orig;
	NSLog(@"-(void) setRedirectTask:(id)");
}

-(void) saveImageToPhotosAlbum:(id) {
	%orig;
	NSLog(@"-(void) saveImageToPhotosAlbum:(id)");
}

-(void) showImageCropperWithImage:(id) {
	%orig;
	NSLog(@"-(void) showImageCropperWithImage:(id)");
}

-(void) configureTextCell:(id) atIndexPath:(id) withViewModel:(id) {
	%orig;
	NSLog(@"-(void) configureTextCell:(id) atIndexPath:(id) withViewModel:(id)");
}

-(void) setLinkUrlTextField:(id) {
	%orig;
	NSLog(@"-(void) setLinkUrlTextField:(id)");
}

-(void) showSelectTrackController {
	%orig;
	NSLog(@"-(void) showSelectTrackController");
}

-(void) showButtonLabelActionSheet {
	%orig;
	NSLog(@"-(void) showButtonLabelActionSheet");
}

-(void) showMarketPickerController {
	%orig;
	NSLog(@"-(void) showMarketPickerController");
}

-(id) changeImagePrompt {
	%orig;
	NSLog(@"-(id) changeImagePrompt");
}

-(id) messageOptionsPrompt {
	%orig;
	NSLog(@"-(id) messageOptionsPrompt");
}

-(id) addLinkPrompt {
	%orig;
	NSLog(@"-(id) addLinkPrompt");
}

-(void) messageUploadProgressControllerRequestsDismissal:(id) {
	%orig;
	NSLog(@"-(void) messageUploadProgressControllerRequestsDismissal:(id)");
}

-(void) selectTrackController:(id) didSelectBeforeTrack:(id) {
	%orig;
	NSLog(@"-(void) selectTrackController:(id) didSelectBeforeTrack:(id)");
}

-(void) selectTrackController:(id) didSelectAfterTrack:(id) {
	%orig;
	NSLog(@"-(void) selectTrackController:(id) didSelectAfterTrack:(id)");
}

-(void) imageCropperControllerDidCancel:(id) {
	%orig;
	NSLog(@"-(void) imageCropperControllerDidCancel:(id)");
}

-(void) imageCropperController:(id) didFinishWithImage:(id) cropped:(bool) {
	%orig;
	NSLog(@"-(void) imageCropperController:(id) didFinishWithImage:(id) cropped:(bool)");
}

-(double) messageDetailsContentHeight {
	%orig;
	NSLog(@"-(double) messageDetailsContentHeight");
}

-(double) messageDetailsBottomMargin {
	%orig;
	NSLog(@"-(double) messageDetailsBottomMargin");
}

-(id) viewModeSuffix {
	%orig;
	NSLog(@"-(id) viewModeSuffix");
}

-(void) didChangePositionOnScreen {
	%orig;
	NSLog(@"-(void) didChangePositionOnScreen");
}

-(void) messageDetailsUpdatedPlaybackProgress:(double) forDuration:(double) {
	%orig;
	NSLog(@"-(void) messageDetailsUpdatedPlaybackProgress:(double) forDuration:(double)");
}

-(void) changeMessageTouched:(id) {
	%orig;
	NSLog(@"-(void) changeMessageTouched:(id)");
}

-(void) addALinkTouched:(id) {
	%orig;
	NSLog(@"-(void) addALinkTouched:(id)");
}

-(void) mainViewTouched:(id) {
	%orig;
	NSLog(@"-(void) mainViewTouched:(id)");
}

-(void) changeImageTouched:(id) {
	%orig;
	NSLog(@"-(void) changeImageTouched:(id)");
}

-(void) saveDraftButtonTouched:(id) {
	%orig;
	NSLog(@"-(void) saveDraftButtonTouched:(id)");
}

-(void) setMarketPickerController:(id) {
	%orig;
	NSLog(@"-(void) setMarketPickerController:(id)");
}

-(void) setPostQueue:(id) {
	%orig;
	NSLog(@"-(void) setPostQueue:(id)");
}

-(void) setDraftButton:(id) {
	%orig;
	NSLog(@"-(void) setDraftButton:(id)");
}

-(void) setChangeMessageButton:(id) {
	%orig;
	NSLog(@"-(void) setChangeMessageButton:(id)");
}

-(void) setAddALinkButton:(id) {
	%orig;
	NSLog(@"-(void) setAddALinkButton:(id)");
}

-(void) setOptionsTableView:(id) {
	%orig;
	NSLog(@"-(void) setOptionsTableView:(id)");
}

-(void) setArtistTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistTitleLabel:(id)");
}

-(void) setPreviewProfileImageView:(id) {
	%orig;
	NSLog(@"-(void) setPreviewProfileImageView:(id)");
}

-(void) setChangeImageButton:(id) {
	%orig;
	NSLog(@"-(void) setChangeImageButton:(id)");
}

-(void) setPreviewRadialGradientView:(id) {
	%orig;
	NSLog(@"-(void) setPreviewRadialGradientView:(id)");
}

-(void) setTopGradientView:(id) {
	%orig;
	NSLog(@"-(void) setTopGradientView:(id)");
}

-(void) setBottomGradientView:(id) {
	%orig;
	NSLog(@"-(void) setBottomGradientView:(id)");
}

-(void) setChangeImagePrompt:(id) {
	%orig;
	NSLog(@"-(void) setChangeImagePrompt:(id)");
}

-(void) setMessageOptionsPrompt:(id) {
	%orig;
	NSLog(@"-(void) setMessageOptionsPrompt:(id)");
}

-(void) setAddLinkPrompt:(id) {
	%orig;
	NSLog(@"-(void) setAddLinkPrompt:(id)");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) setViewModel:(id) {
	%orig;
	NSLog(@"-(void) setViewModel:(id)");
}

-(id) customImageView {
	%orig;
	NSLog(@"-(id) customImageView");
}

-(void) setCustomImageView:(id) {
	%orig;
	NSLog(@"-(void) setCustomImageView:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(void) setDurationLabel:(id) {
	%orig;
	NSLog(@"-(void) setDurationLabel:(id)");
}

-(id) durationLabel {
	%orig;
	NSLog(@"-(id) durationLabel");
}

-(id) progressLabel {
	%orig;
	NSLog(@"-(id) progressLabel");
}

-(void) setupViews {
	%orig;
	NSLog(@"-(void) setupViews");
}

-(void) setProgressLabel:(id) {
	%orig;
	NSLog(@"-(void) setProgressLabel:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(id) session {
	%orig;
	NSLog(@"-(id) session");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(id) tableView:(id) titleForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) titleForHeaderInSection:(long long)");
}

-(void) imagePickerController:(id) didFinishPickingMediaWithInfo:(id) {
	%orig;
	NSLog(@"-(void) imagePickerController:(id) didFinishPickingMediaWithInfo:(id)");
}

-(bool) textFieldShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldReturn:(id)");
}

-(void) textFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidBeginEditing:(id)");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

-(id) imagePickerController {
	%orig;
	NSLog(@"-(id) imagePickerController");
}

-(void) setImagePickerController:(id) {
	%orig;
	NSLog(@"-(void) setImagePickerController:(id)");
}

-(void) setSession:(id) {
	%orig;
	NSLog(@"-(void) setSession:(id)");
}

%end

%hook PMViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(bool) shouldDisplayPremiumUI {
	%orig;
	NSLog(@"-(bool) shouldDisplayPremiumUI");
}

-(void) setMenuBarButtonDelegate:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButtonDelegate:(id)");
}

-(void) addMenuButton {
	%orig;
	NSLog(@"-(void) addMenuButton");
}

-(id) menuBarButton {
	%orig;
	NSLog(@"-(id) menuBarButton");
}

-(bool) logViewState {
	%orig;
	NSLog(@"-(bool) logViewState");
}

-(void) viewControllerWillBeReselected {
	%orig;
	NSLog(@"-(void) viewControllerWillBeReselected");
}

-(bool) shouldHideBottomViewWhenPushed {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewWhenPushed");
}

-(void) setShouldHideBottomViewWhenPushed:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideBottomViewWhenPushed:(bool)");
}

-(bool) shouldLogViewStateOnViewWillAppear {
	%orig;
	NSLog(@"-(bool) shouldLogViewStateOnViewWillAppear");
}

-(void) setShouldLogViewStateOnViewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldLogViewStateOnViewWillAppear:(bool)");
}

-(bool) shouldStayInViewHierarchyWhenPresentingModalView {
	%orig;
	NSLog(@"-(bool) shouldStayInViewHierarchyWhenPresentingModalView");
}

-(void) setMenuItem:(id) {
	%orig;
	NSLog(@"-(void) setMenuItem:(id)");
}

-(bool) useDefaultNavigationBarStyling {
	%orig;
	NSLog(@"-(bool) useDefaultNavigationBarStyling");
}

-(void) removeMenuButton {
	%orig;
	NSLog(@"-(void) removeMenuButton");
}

-(void) updateBottomViewHiddenStatus {
	%orig;
	NSLog(@"-(void) updateBottomViewHiddenStatus");
}

-(void) setMenuBarButton:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButton:(id)");
}

-(id) menuBarButtonDelegate {
	%orig;
	NSLog(@"-(id) menuBarButtonDelegate");
}

-(id) menuBarButtonPanGestureRecognizer {
	%orig;
	NSLog(@"-(id) menuBarButtonPanGestureRecognizer");
}

-(void) setMenuBarButtonPanGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButtonPanGestureRecognizer:(id)");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(id) offlineHeaderView {
	%orig;
	NSLog(@"-(id) offlineHeaderView");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(CGRect) offlineHeaderFrame {
	%orig;
	NSLog(@"-(CGRect) offlineHeaderFrame");
}

-(void) setPrefersStatusBarHidden:(bool) animation:(long long) {
	%orig;
	NSLog(@"-(void) setPrefersStatusBarHidden:(bool) animation:(long long)");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(void) searchButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) searchButtonTapped:(id)");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(void) setupSearchButton {
	%orig;
	NSLog(@"-(void) setupSearchButton");
}

-(void) setIsInView:(bool) {
	%orig;
	NSLog(@"-(void) setIsInView:(bool)");
}

-(void) updateIsInView {
	%orig;
	NSLog(@"-(void) updateIsInView");
}

-(bool) isInView {
	%orig;
	NSLog(@"-(bool) isInView");
}

-(void) customizeStatusBar {
	%orig;
	NSLog(@"-(void) customizeStatusBar");
}

-(bool) logViewDidEnterBackground {
	%orig;
	NSLog(@"-(bool) logViewDidEnterBackground");
}

-(void) handleOfflineStateUpdatedIfInView {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdatedIfInView");
}

-(void) setOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setOfflineHeaderView:(id)");
}

-(double) offlineHeaderHeight {
	%orig;
	NSLog(@"-(double) offlineHeaderHeight");
}

-(void) menuButtonWasPanned:(id) {
	%orig;
	NSLog(@"-(void) menuButtonWasPanned:(id)");
}

-(void) menuButtonWasTapped:(id) {
	%orig;
	NSLog(@"-(void) menuButtonWasTapped:(id)");
}

-(void) showOrHideBottomView {
	%orig;
	NSLog(@"-(void) showOrHideBottomView");
}

-(bool) shouldDismissCoachMarks {
	%orig;
	NSLog(@"-(bool) shouldDismissCoachMarks");
}

-(void) dismissCoachMark {
	%orig;
	NSLog(@"-(void) dismissCoachMark");
}

-(long long) statusBarUpdateAnimation {
	%orig;
	NSLog(@"-(long long) statusBarUpdateAnimation");
}

-(void) setStatusBarUpdateAnimation:(long long) {
	%orig;
	NSLog(@"-(void) setStatusBarUpdateAnimation:(long long)");
}

-(void) setSearchButton:(id) {
	%orig;
	NSLog(@"-(void) setSearchButton:(id)");
}

-(bool) hasActiveSource {
	%orig;
	NSLog(@"-(bool) hasActiveSource");
}

-(id) offlineManager {
	%orig;
	NSLog(@"-(id) offlineManager");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(id) subscriptionManager {
	%orig;
	NSLog(@"-(id) subscriptionManager");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(id) menuItem {
	%orig;
	NSLog(@"-(id) menuItem");
}

-(void) setPageView:(id) {
	%orig;
	NSLog(@"-(void) setPageView:(id)");
}

-(void) _addObservers {
	%orig;
	NSLog(@"-(void) _addObservers");
}

-(void) _removeObservers {
	%orig;
	NSLog(@"-(void) _removeObservers");
}

-(bool) isViewVisible {
	%orig;
	NSLog(@"-(bool) isViewVisible");
}

-(id) searchButton {
	%orig;
	NSLog(@"-(id) searchButton");
}

-(void) setViewMode:(id) {
	%orig;
	NSLog(@"-(void) setViewMode:(id)");
}

-(id) navigationManager {
	%orig;
	NSLog(@"-(id) navigationManager");
}

-(void) updateMenuItems {
	%orig;
	NSLog(@"-(void) updateMenuItems");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) didMoveToParentViewController:(id) {
	%orig;
	NSLog(@"-(void) didMoveToParentViewController:(id)");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(long long) statusBarStyle {
	%orig;
	NSLog(@"-(long long) statusBarStyle");
}

-(void) setStatusBarStyle:(long long) {
	%orig;
	NSLog(@"-(void) setStatusBarStyle:(long long)");
}

-(void) setStatusBarHidden:(bool) {
	%orig;
	NSLog(@"-(void) setStatusBarHidden:(bool)");
}

-(long long) preferredStatusBarUpdateAnimation {
	%orig;
	NSLog(@"-(long long) preferredStatusBarUpdateAnimation");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(bool) statusBarHidden {
	%orig;
	NSLog(@"-(bool) statusBarHidden");
}

-(id) viewMode {
	%orig;
	NSLog(@"-(id) viewMode");
}

-(void) setPreferredStatusBarStyle:(long long) {
	%orig;
	NSLog(@"-(void) setPreferredStatusBarStyle:(long long)");
}

-(id) pageView {
	%orig;
	NSLog(@"-(id) pageView");
}

%end

%hook PMPasswordResetViewController

+(id) requestResetPasswordNotificationName {
	%orig;
	NSLog(@"+(id) requestResetPasswordNotificationName");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(bool) onboardingCellIsNewAccount:(id) {
	%orig;
	NSLog(@"-(bool) onboardingCellIsNewAccount:(id)");
}

-(bool) onboardingTextCellShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) onboardingTextCellShouldReturn:(id)");
}

-(void) onboardingTextCellDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidEndEditing:(id)");
}

-(void) onboardingTextCellDidChange:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidChange:(id)");
}

-(id) formTableView {
	%orig;
	NSLog(@"-(id) formTableView");
}

-(void) setFormTableView:(id) {
	%orig;
	NSLog(@"-(void) setFormTableView:(id)");
}

-(id) loginIndicatorView {
	%orig;
	NSLog(@"-(id) loginIndicatorView");
}

-(void) setLoginIndicatorView:(id) {
	%orig;
	NSLog(@"-(void) setLoginIndicatorView:(id)");
}

-(void) setLoginButton:(id) {
	%orig;
	NSLog(@"-(void) setLoginButton:(id)");
}

-(void) loginButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) loginButtonTapped:(id)");
}

-(id) loginButtonTopErrorConstraint {
	%orig;
	NSLog(@"-(id) loginButtonTopErrorConstraint");
}

-(void) setLoginButtonTopErrorConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLoginButtonTopErrorConstraint:(id)");
}

-(id) messageLabel {
	%orig;
	NSLog(@"-(id) messageLabel");
}

-(void) setMessageLabel:(id) {
	%orig;
	NSLog(@"-(void) setMessageLabel:(id)");
}

-(void) cancelButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) cancelButtonTapped:(id)");
}

-(id) errorView {
	%orig;
	NSLog(@"-(id) errorView");
}

-(void) setErrorView:(id) {
	%orig;
	NSLog(@"-(void) setErrorView:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(id) loginButton {
	%orig;
	NSLog(@"-(id) loginButton");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(void) setCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelButton:(id)");
}

-(id) cancelButton {
	%orig;
	NSLog(@"-(id) cancelButton");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMSourceCardViewController

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) onDismissButtonTouched {
	%orig;
	NSLog(@"-(void) onDismissButtonTouched");
}

-(void) doDrag:(id) {
	%orig;
	NSLog(@"-(void) doDrag:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook FTUXViewController

-(bool) didReachInteractionIdleThreshold {
	%orig;
	NSLog(@"-(bool) didReachInteractionIdleThreshold");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) close {
	%orig;
	NSLog(@"-(void) close");
}

%end

%hook PMAddToPlaylistViewController

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) dismissModal {
	%orig;
	NSLog(@"-(void) dismissModal");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook AppIconViewController

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didDeselectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didDeselectItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) collectionView {
	%orig;
	NSLog(@"-(id) collectionView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) setCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setCollectionView:(id)");
}

%end

%hook VoiceAdControlsViewController

-(void) progressViewDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidUpdate:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(id) trackProgressView {
	%orig;
	NSLog(@"-(id) trackProgressView");
}

-(void) setTrackProgressView:(id) {
	%orig;
	NSLog(@"-(void) setTrackProgressView:(id)");
}

-(id) ringOneView {
	%orig;
	NSLog(@"-(id) ringOneView");
}

-(void) setRingOneView:(id) {
	%orig;
	NSLog(@"-(void) setRingOneView:(id)");
}

-(id) ringOneSizeConstraint {
	%orig;
	NSLog(@"-(id) ringOneSizeConstraint");
}

-(void) setRingOneSizeConstraint:(id) {
	%orig;
	NSLog(@"-(void) setRingOneSizeConstraint:(id)");
}

-(id) ringTwoView {
	%orig;
	NSLog(@"-(id) ringTwoView");
}

-(void) setRingTwoView:(id) {
	%orig;
	NSLog(@"-(void) setRingTwoView:(id)");
}

-(id) ringTwoSizeConstraint {
	%orig;
	NSLog(@"-(id) ringTwoSizeConstraint");
}

-(void) setRingTwoSizeConstraint:(id) {
	%orig;
	NSLog(@"-(void) setRingTwoSizeConstraint:(id)");
}

-(id) ringThreeView {
	%orig;
	NSLog(@"-(id) ringThreeView");
}

-(void) setRingThreeView:(id) {
	%orig;
	NSLog(@"-(void) setRingThreeView:(id)");
}

-(id) ringThreeSizeConstraint {
	%orig;
	NSLog(@"-(id) ringThreeSizeConstraint");
}

-(void) setRingThreeSizeConstraint:(id) {
	%orig;
	NSLog(@"-(void) setRingThreeSizeConstraint:(id)");
}

-(id) speakingBubbleView {
	%orig;
	NSLog(@"-(id) speakingBubbleView");
}

-(void) setSpeakingBubbleView:(id) {
	%orig;
	NSLog(@"-(void) setSpeakingBubbleView:(id)");
}

-(id) speakingBubbleSizeConstraint {
	%orig;
	NSLog(@"-(id) speakingBubbleSizeConstraint");
}

-(void) setSpeakingBubbleSizeConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSpeakingBubbleSizeConstraint:(id)");
}

-(void) setRemainingTimeLabel:(id) {
	%orig;
	NSLog(@"-(void) setRemainingTimeLabel:(id)");
}

-(id) remainingTimeLabel {
	%orig;
	NSLog(@"-(id) remainingTimeLabel");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

%end

%hook PML2SponsoredVideoChildViewController

-(void) followDeepLink {
	%orig;
	NSLog(@"-(void) followDeepLink");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(bool) remoteControlTogglePlayPause {
	%orig;
	NSLog(@"-(bool) remoteControlTogglePlayPause");
}

-(bool) remoteControlPause {
	%orig;
	NSLog(@"-(bool) remoteControlPause");
}

-(bool) remoteControlPlay {
	%orig;
	NSLog(@"-(bool) remoteControlPlay");
}

-(bool) remoteControlNextTrack {
	%orig;
	NSLog(@"-(bool) remoteControlNextTrack");
}

-(bool) remoteControlStop {
	%orig;
	NSLog(@"-(bool) remoteControlStop");
}

-(void) addOMSDKTracker {
	%orig;
	NSLog(@"-(void) addOMSDKTracker");
}

-(void) didReachMaxBuffer {
	%orig;
	NSLog(@"-(void) didReachMaxBuffer");
}

-(void) setupFullScreenOverlay {
	%orig;
	NSLog(@"-(void) setupFullScreenOverlay");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(double) timeIntervalSince1970 {
	%orig;
	NSLog(@"-(double) timeIntervalSince1970");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

%end

%hook PMCoachmarkViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) close {
	%orig;
	NSLog(@"-(void) close");
}

%end

%hook PMOnboardingCheckEmailViewController

-(id) arcView {
	%orig;
	NSLog(@"-(id) arcView");
}

-(void) setArcView:(id) {
	%orig;
	NSLog(@"-(void) setArcView:(id)");
}

-(id) emailLabel {
	%orig;
	NSLog(@"-(id) emailLabel");
}

-(void) setEmailLabel:(id) {
	%orig;
	NSLog(@"-(void) setEmailLabel:(id)");
}

-(id) returnToLoginButton {
	%orig;
	NSLog(@"-(id) returnToLoginButton");
}

-(void) setReturnToLoginButton:(id) {
	%orig;
	NSLog(@"-(void) setReturnToLoginButton:(id)");
}

-(void) returnToLoginButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) returnToLoginButtonTapped:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMSLAPBraceletViewController

-(void) revealCTAButtonWithLeftAndRightMargin:(double) {
	%orig;
	NSLog(@"-(void) revealCTAButtonWithLeftAndRightMargin:(double)");
}

-(id) gradientBackgroundView {
	%orig;
	NSLog(@"-(id) gradientBackgroundView");
}

-(void) setGradientBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setGradientBackgroundView:(id)");
}

-(id) offerButtonLeadingConstraint {
	%orig;
	NSLog(@"-(id) offerButtonLeadingConstraint");
}

-(void) setOfferButtonLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setOfferButtonLeadingConstraint:(id)");
}

-(id) offerButtonTrailingConstraint {
	%orig;
	NSLog(@"-(id) offerButtonTrailingConstraint");
}

-(void) setOfferButtonTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setOfferButtonTrailingConstraint:(id)");
}

-(id) offerButtonMaskLeadingConstraint {
	%orig;
	NSLog(@"-(id) offerButtonMaskLeadingConstraint");
}

-(void) setOfferButtonMaskLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setOfferButtonMaskLeadingConstraint:(id)");
}

-(id) offerButtonMaskTrailingConstraint {
	%orig;
	NSLog(@"-(id) offerButtonMaskTrailingConstraint");
}

-(void) setOfferButtonMaskTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setOfferButtonMaskTrailingConstraint:(id)");
}

-(void) offerButtonTouched:(id) {
	%orig;
	NSLog(@"-(void) offerButtonTouched:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) offerButton {
	%orig;
	NSLog(@"-(id) offerButton");
}

-(void) setOfferButton:(id) {
	%orig;
	NSLog(@"-(void) setOfferButton:(id)");
}

%end

%hook VoiceViewController

-(id) voiceView {
	%orig;
	NSLog(@"-(id) voiceView");
}

-(void) setVoiceView:(id) {
	%orig;
	NSLog(@"-(void) setVoiceView:(id)");
}

-(void) setSnapshotImageView:(id) {
	%orig;
	NSLog(@"-(void) setSnapshotImageView:(id)");
}

-(id) microphoneButtonView {
	%orig;
	NSLog(@"-(id) microphoneButtonView");
}

-(void) setMicrophoneButtonView:(id) {
	%orig;
	NSLog(@"-(void) setMicrophoneButtonView:(id)");
}

-(id) microphoneButtonViewBottomConstraint {
	%orig;
	NSLog(@"-(id) microphoneButtonViewBottomConstraint");
}

-(void) setMicrophoneButtonViewBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setMicrophoneButtonViewBottomConstraint:(id)");
}

-(id) ringOneView {
	%orig;
	NSLog(@"-(id) ringOneView");
}

-(void) setRingOneView:(id) {
	%orig;
	NSLog(@"-(void) setRingOneView:(id)");
}

-(id) ringOneSizeConstraint {
	%orig;
	NSLog(@"-(id) ringOneSizeConstraint");
}

-(void) setRingOneSizeConstraint:(id) {
	%orig;
	NSLog(@"-(void) setRingOneSizeConstraint:(id)");
}

-(id) ringTwoView {
	%orig;
	NSLog(@"-(id) ringTwoView");
}

-(void) setRingTwoView:(id) {
	%orig;
	NSLog(@"-(void) setRingTwoView:(id)");
}

-(id) ringTwoSizeConstraint {
	%orig;
	NSLog(@"-(id) ringTwoSizeConstraint");
}

-(void) setRingTwoSizeConstraint:(id) {
	%orig;
	NSLog(@"-(void) setRingTwoSizeConstraint:(id)");
}

-(id) ringThreeView {
	%orig;
	NSLog(@"-(id) ringThreeView");
}

-(void) setRingThreeView:(id) {
	%orig;
	NSLog(@"-(void) setRingThreeView:(id)");
}

-(id) ringThreeSizeConstraint {
	%orig;
	NSLog(@"-(id) ringThreeSizeConstraint");
}

-(void) setRingThreeSizeConstraint:(id) {
	%orig;
	NSLog(@"-(void) setRingThreeSizeConstraint:(id)");
}

-(id) speakingBubbleView {
	%orig;
	NSLog(@"-(id) speakingBubbleView");
}

-(void) setSpeakingBubbleView:(id) {
	%orig;
	NSLog(@"-(void) setSpeakingBubbleView:(id)");
}

-(id) speakingBubbleSizeConstraint {
	%orig;
	NSLog(@"-(id) speakingBubbleSizeConstraint");
}

-(void) setSpeakingBubbleSizeConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSpeakingBubbleSizeConstraint:(id)");
}

-(id) loadingRingView {
	%orig;
	NSLog(@"-(id) loadingRingView");
}

-(void) setLoadingRingView:(id) {
	%orig;
	NSLog(@"-(void) setLoadingRingView:(id)");
}

-(id) tipOneText {
	%orig;
	NSLog(@"-(id) tipOneText");
}

-(void) setTipOneText:(id) {
	%orig;
	NSLog(@"-(void) setTipOneText:(id)");
}

-(id) tipOneTopConstraint {
	%orig;
	NSLog(@"-(id) tipOneTopConstraint");
}

-(void) setTipOneTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTipOneTopConstraint:(id)");
}

-(id) tipTwoText {
	%orig;
	NSLog(@"-(id) tipTwoText");
}

-(void) setTipTwoText:(id) {
	%orig;
	NSLog(@"-(void) setTipTwoText:(id)");
}

-(id) tipTwoTopConstraint {
	%orig;
	NSLog(@"-(id) tipTwoTopConstraint");
}

-(void) setTipTwoTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTipTwoTopConstraint:(id)");
}

-(id) tipThreeText {
	%orig;
	NSLog(@"-(id) tipThreeText");
}

-(void) setTipThreeText:(id) {
	%orig;
	NSLog(@"-(void) setTipThreeText:(id)");
}

-(id) tipThreeTopConstraint {
	%orig;
	NSLog(@"-(id) tipThreeTopConstraint");
}

-(void) setTipThreeTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTipThreeTopConstraint:(id)");
}

-(id) tipFourText {
	%orig;
	NSLog(@"-(id) tipFourText");
}

-(void) setTipFourText:(id) {
	%orig;
	NSLog(@"-(void) setTipFourText:(id)");
}

-(id) tipFourTopConstraint {
	%orig;
	NSLog(@"-(id) tipFourTopConstraint");
}

-(void) setTipFourTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTipFourTopConstraint:(id)");
}

-(id) tipFiveText {
	%orig;
	NSLog(@"-(id) tipFiveText");
}

-(void) setTipFiveText:(id) {
	%orig;
	NSLog(@"-(void) setTipFiveText:(id)");
}

-(id) tipFiveTopConstraint {
	%orig;
	NSLog(@"-(id) tipFiveTopConstraint");
}

-(void) setTipFiveTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTipFiveTopConstraint:(id)");
}

-(void) helpButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) helpButtonTapped:(id)");
}

-(void) microphoneButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) microphoneButtonTapped:(id)");
}

-(void) setHelpButton:(id) {
	%orig;
	NSLog(@"-(void) setHelpButton:(id)");
}

-(id) helpButton {
	%orig;
	NSLog(@"-(id) helpButton");
}

-(void) cancelButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) cancelButtonTapped:(id)");
}

-(id) snapshotImageView {
	%orig;
	NSLog(@"-(id) snapshotImageView");
}

-(void) setMicrophoneButton:(id) {
	%orig;
	NSLog(@"-(void) setMicrophoneButton:(id)");
}

-(id) microphoneButton {
	%orig;
	NSLog(@"-(id) microphoneButton");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) setCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelButton:(id)");
}

-(id) cancelButton {
	%orig;
	NSLog(@"-(id) cancelButton");
}

-(id) headerText {
	%orig;
	NSLog(@"-(id) headerText");
}

-(void) setHeaderText:(id) {
	%orig;
	NSLog(@"-(void) setHeaderText:(id)");
}

%end

%hook PMThumbprintStationDetailViewController

-(void) didDeleteImageBasedTableViewCell:(id) {
	%orig;
	NSLog(@"-(void) didDeleteImageBasedTableViewCell:(id)");
}

-(void) didChangeCurrentStation {
	%orig;
	NSLog(@"-(void) didChangeCurrentStation");
}

-(void) didFinishLoadStationDataFromServerWithResult:(id) {
	%orig;
	NSLog(@"-(void) didFinishLoadStationDataFromServerWithResult:(id)");
}

-(void) songRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) songRatingDidChange:(id)");
}

-(void) didSelectCell:(id) {
	%orig;
	NSLog(@"-(void) didSelectCell:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(bool) useDefaultNavigationBarStyling {
	%orig;
	NSLog(@"-(bool) useDefaultNavigationBarStyling");
}

-(void) setJumpToSharingView:(bool) {
	%orig;
	NSLog(@"-(void) setJumpToSharingView:(bool)");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(void) didTapBackButton {
	%orig;
	NSLog(@"-(void) didTapBackButton");
}

-(bool) jumpToSharingView {
	%orig;
	NSLog(@"-(bool) jumpToSharingView");
}

-(void) didTapSettingsButton {
	%orig;
	NSLog(@"-(void) didTapSettingsButton");
}

-(void) handleRemovedTrackFromThumbUpHistoryNotification:(id) {
	%orig;
	NSLog(@"-(void) handleRemovedTrackFromThumbUpHistoryNotification:(id)");
}

-(void) handleRemovedTrackFromThumbDownHistoryNotification:(id) {
	%orig;
	NSLog(@"-(void) handleRemovedTrackFromThumbDownHistoryNotification:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) reloadData {
	%orig;
	NSLog(@"-(void) reloadData");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) prepareForSegue:(id) sender:(id) {
	%orig;
	NSLog(@"-(void) prepareForSegue:(id) sender:(id)");
}

%end

%hook PMAVPlayerViewController

-(bool) videoAdIsMuted {
	%orig;
	NSLog(@"-(bool) videoAdIsMuted");
}

-(bool) isPlayingVideo {
	%orig;
	NSLog(@"-(bool) isPlayingVideo");
}

-(void) videoPlayTimeout {
	%orig;
	NSLog(@"-(void) videoPlayTimeout");
}

-(void) handleDidBecomeActive {
	%orig;
	NSLog(@"-(void) handleDidBecomeActive");
}

-(void) handleWillResignActive {
	%orig;
	NSLog(@"-(void) handleWillResignActive");
}

-(void) handleEnterBackground {
	%orig;
	NSLog(@"-(void) handleEnterBackground");
}

-(void) handleEnterForeground {
	%orig;
	NSLog(@"-(void) handleEnterForeground");
}

-(void) handleAudioInterruption:(id) {
	%orig;
	NSLog(@"-(void) handleAudioInterruption:(id)");
}

-(void) videoDidPlayToEnd:(id) {
	%orig;
	NSLog(@"-(void) videoDidPlayToEnd:(id)");
}

-(void) playerControlsActivatorTouchDown:(id) {
	%orig;
	NSLog(@"-(void) playerControlsActivatorTouchDown:(id)");
}

-(void) hidePlayerControlOverlay {
	%orig;
	NSLog(@"-(void) hidePlayerControlOverlay");
}

-(id) playerControlOverlayContainer {
	%orig;
	NSLog(@"-(id) playerControlOverlayContainer");
}

-(void) setPlayerControlOverlayContainer:(id) {
	%orig;
	NSLog(@"-(void) setPlayerControlOverlayContainer:(id)");
}

-(void) setCustomOverlayContainer:(id) {
	%orig;
	NSLog(@"-(void) setCustomOverlayContainer:(id)");
}

-(id) playerViewContainer {
	%orig;
	NSLog(@"-(id) playerViewContainer");
}

-(void) setPlayerViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setPlayerViewContainer:(id)");
}

-(id) playerControlActivator {
	%orig;
	NSLog(@"-(id) playerControlActivator");
}

-(void) setPlayerControlActivator:(id) {
	%orig;
	NSLog(@"-(void) setPlayerControlActivator:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) customOverlayContainer {
	%orig;
	NSLog(@"-(id) customOverlayContainer");
}

%end

%hook PremiumSearchResultsViewController

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool) {
	%orig;
	NSLog(@"-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool)");
}

-(void) didTapMoreButtonInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didTapMoreButtonInMediaCollectionViewCell:(id)");
}

-(void) didSelectMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didSelectMediaCollectionViewCell:(id)");
}

-(void) didLongPressMediaCollectionCellViewInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didLongPressMediaCollectionCellViewInMediaCollectionViewCell:(id)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(void) didTapCollectButtonInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didTapCollectButtonInMediaCollectionViewCell:(id)");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id)");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(void) keyboardHidden:(id) {
	%orig;
	NSLog(@"-(void) keyboardHidden:(id)");
}

-(void) keyboardShown:(id) {
	%orig;
	NSLog(@"-(void) keyboardShown:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

%end

%hook PodcastSearchResultsViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

%end

%hook SegmentedViewController

-(bool) shouldHideSegmentControl {
	%orig;
	NSLog(@"-(bool) shouldHideSegmentControl");
}

-(id) pageViewController:(id) viewControllerBeforeViewController:(id) {
	%orig;
	NSLog(@"-(id) pageViewController:(id) viewControllerBeforeViewController:(id)");
}

-(id) pageViewController:(id) viewControllerAfterViewController:(id) {
	%orig;
	NSLog(@"-(id) pageViewController:(id) viewControllerAfterViewController:(id)");
}

-(void) pageViewController:(id) willTransitionToViewControllers:(id) {
	%orig;
	NSLog(@"-(void) pageViewController:(id) willTransitionToViewControllers:(id)");
}

-(void) pageViewController:(id) didFinishAnimating:(bool) previousViewControllers:(id) transitionCompleted:(bool) {
	%orig;
	NSLog(@"-(void) pageViewController:(id) didFinishAnimating:(bool) previousViewControllers:(id) transitionCompleted:(bool)");
}

-(void) segmentControlDidChange:(id) {
	%orig;
	NSLog(@"-(void) segmentControlDidChange:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PremiumSearchViewController

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long) {
	%orig;
	NSLog(@"-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long)");
}

-(void) dismissKeyboard {
	%orig;
	NSLog(@"-(void) dismissKeyboard");
}

-(bool) shouldHideSegmentControl {
	%orig;
	NSLog(@"-(bool) shouldHideSegmentControl");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setupPandoraNavBarStyleForFullScreen:(bool) {
	%orig;
	NSLog(@"-(void) setupPandoraNavBarStyleForFullScreen:(bool)");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(bool) hideTabBarWhenVisible {
	%orig;
	NSLog(@"-(bool) hideTabBarWhenVisible");
}

-(void) resetScrollPositionWithAnimated:(bool) {
	%orig;
	NSLog(@"-(void) resetScrollPositionWithAnimated:(bool)");
}

-(void) performSearchWithKeyword:(id) {
	%orig;
	NSLog(@"-(void) performSearchWithKeyword:(id)");
}

-(void) segmentControlDidChange:(id) {
	%orig;
	NSLog(@"-(void) segmentControlDidChange:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMSingleCallToActionViewController

-(id) actionButton {
	%orig;
	NSLog(@"-(id) actionButton");
}

-(void) setActionButton:(id) {
	%orig;
	NSLog(@"-(void) setActionButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMOnboardingSignInViewController

-(void) forgotPasswordRequestComplete:(id) {
	%orig;
	NSLog(@"-(void) forgotPasswordRequestComplete:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(bool) onboardingCellIsNewAccount:(id) {
	%orig;
	NSLog(@"-(bool) onboardingCellIsNewAccount:(id)");
}

-(bool) onboardingTextCellShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) onboardingTextCellShouldReturn:(id)");
}

-(void) onboardingTextCellDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidEndEditing:(id)");
}

-(void) onboardingTextCellDidChange:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidChange:(id)");
}

-(id) navigationController:(id) animationControllerForOperation:(long long) fromViewController:(id) toViewController:(id) {
	%orig;
	NSLog(@"-(id) navigationController:(id) animationControllerForOperation:(long long) fromViewController:(id) toViewController:(id)");
}

-(void) onboardingPasswordCell:(id) visible:(bool) {
	%orig;
	NSLog(@"-(void) onboardingPasswordCell:(id) visible:(bool)");
}

-(id) arcView {
	%orig;
	NSLog(@"-(id) arcView");
}

-(void) setArcView:(id) {
	%orig;
	NSLog(@"-(void) setArcView:(id)");
}

-(id) signUpButton {
	%orig;
	NSLog(@"-(id) signUpButton");
}

-(void) signUpButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) signUpButtonTapped:(id)");
}

-(void) backButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) backButtonTapped:(id)");
}

-(void) setSignUpButton:(id) {
	%orig;
	NSLog(@"-(void) setSignUpButton:(id)");
}

-(id) arcViewBottomConstraint {
	%orig;
	NSLog(@"-(id) arcViewBottomConstraint");
}

-(void) setArcViewBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setArcViewBottomConstraint:(id)");
}

-(id) arcViewHeightConstraint {
	%orig;
	NSLog(@"-(id) arcViewHeightConstraint");
}

-(void) setArcViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setArcViewHeightConstraint:(id)");
}

-(void) requestForgotPassword:(id) {
	%orig;
	NSLog(@"-(void) requestForgotPassword:(id)");
}

-(void) requestResetPassword:(id) {
	%orig;
	NSLog(@"-(void) requestResetPassword:(id)");
}

-(id) formTableView {
	%orig;
	NSLog(@"-(id) formTableView");
}

-(void) setFormTableView:(id) {
	%orig;
	NSLog(@"-(void) setFormTableView:(id)");
}

-(void) dismissKeyboardTapGestureTapped:(id) {
	%orig;
	NSLog(@"-(void) dismissKeyboardTapGestureTapped:(id)");
}

-(void) setLoginButton:(id) {
	%orig;
	NSLog(@"-(void) setLoginButton:(id)");
}

-(id) failedLoginErrorView {
	%orig;
	NSLog(@"-(id) failedLoginErrorView");
}

-(void) setFailedLoginErrorView:(id) {
	%orig;
	NSLog(@"-(void) setFailedLoginErrorView:(id)");
}

-(id) forgotPasswordButton {
	%orig;
	NSLog(@"-(id) forgotPasswordButton");
}

-(void) setForgotPasswordButton:(id) {
	%orig;
	NSLog(@"-(void) setForgotPasswordButton:(id)");
}

-(id) fastSwitchButton {
	%orig;
	NSLog(@"-(id) fastSwitchButton");
}

-(void) setFastSwitchButton:(id) {
	%orig;
	NSLog(@"-(void) setFastSwitchButton:(id)");
}

-(id) signUpHintLabel {
	%orig;
	NSLog(@"-(id) signUpHintLabel");
}

-(void) setSignUpHintLabel:(id) {
	%orig;
	NSLog(@"-(void) setSignUpHintLabel:(id)");
}

-(id) signInActivityIndicator {
	%orig;
	NSLog(@"-(id) signInActivityIndicator");
}

-(void) setSignInActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setSignInActivityIndicator:(id)");
}

-(id) containerViewVerticalCenterConstraint {
	%orig;
	NSLog(@"-(id) containerViewVerticalCenterConstraint");
}

-(void) setContainerViewVerticalCenterConstraint:(id) {
	%orig;
	NSLog(@"-(void) setContainerViewVerticalCenterConstraint:(id)");
}

-(id) containerViewHeightConstraint {
	%orig;
	NSLog(@"-(id) containerViewHeightConstraint");
}

-(void) setContainerViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setContainerViewHeightConstraint:(id)");
}

-(id) logoBottomConstraint {
	%orig;
	NSLog(@"-(id) logoBottomConstraint");
}

-(void) setLogoBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLogoBottomConstraint:(id)");
}

-(id) logoTopConstraint {
	%orig;
	NSLog(@"-(id) logoTopConstraint");
}

-(void) setLogoTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLogoTopConstraint:(id)");
}

-(id) logoWidthConstraint {
	%orig;
	NSLog(@"-(id) logoWidthConstraint");
}

-(void) setLogoWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLogoWidthConstraint:(id)");
}

-(id) formTableViewHeight {
	%orig;
	NSLog(@"-(id) formTableViewHeight");
}

-(void) setFormTableViewHeight:(id) {
	%orig;
	NSLog(@"-(void) setFormTableViewHeight:(id)");
}

-(id) loginButtonTopConstraint {
	%orig;
	NSLog(@"-(id) loginButtonTopConstraint");
}

-(void) setLoginButtonTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLoginButtonTopConstraint:(id)");
}

-(void) loginFailed {
	%orig;
	NSLog(@"-(void) loginFailed");
}

-(void) loginSuccess {
	%orig;
	NSLog(@"-(void) loginSuccess");
}

-(void) loginButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) loginButtonTapped:(id)");
}

-(void) forgotPasswordButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) forgotPasswordButtonTapped:(id)");
}

-(void) fastSwitchButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) fastSwitchButtonTapped:(id)");
}

-(void) keyboardWillHide:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillHide:(id)");
}

-(void) keyboardWillShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShow:(id)");
}

-(id) logoImageView {
	%orig;
	NSLog(@"-(id) logoImageView");
}

-(void) setLogoImageView:(id) {
	%orig;
	NSLog(@"-(void) setLogoImageView:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(id) loginButton {
	%orig;
	NSLog(@"-(id) loginButton");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) prepareForSegue:(id) sender:(id) {
	%orig;
	NSLog(@"-(void) prepareForSegue:(id) sender:(id)");
}

%end

%hook PMOnboardingForgotPasswordViewController

+(id) requestForgotPasswordNotificationName {
	%orig;
	NSLog(@"+(id) requestForgotPasswordNotificationName");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(bool) onboardingCellIsNewAccount:(id) {
	%orig;
	NSLog(@"-(bool) onboardingCellIsNewAccount:(id)");
}

-(bool) onboardingTextCellShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) onboardingTextCellShouldReturn:(id)");
}

-(void) onboardingTextCellDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidEndEditing:(id)");
}

-(void) onboardingTextCellDidChange:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidChange:(id)");
}

-(id) tableViewHeightConstraint {
	%orig;
	NSLog(@"-(id) tableViewHeightConstraint");
}

-(void) setEmailToPopulate:(id) {
	%orig;
	NSLog(@"-(void) setEmailToPopulate:(id)");
}

-(id) emailToPopulate {
	%orig;
	NSLog(@"-(id) emailToPopulate");
}

-(void) setTableViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTableViewHeightConstraint:(id)");
}

-(id) titleGradientLayerView {
	%orig;
	NSLog(@"-(id) titleGradientLayerView");
}

-(void) setTitleGradientLayerView:(id) {
	%orig;
	NSLog(@"-(void) setTitleGradientLayerView:(id)");
}

-(id) formTableView {
	%orig;
	NSLog(@"-(id) formTableView");
}

-(void) setFormTableView:(id) {
	%orig;
	NSLog(@"-(void) setFormTableView:(id)");
}

-(id) loginIndicatorView {
	%orig;
	NSLog(@"-(id) loginIndicatorView");
}

-(void) setLoginIndicatorView:(id) {
	%orig;
	NSLog(@"-(void) setLoginIndicatorView:(id)");
}

-(id) tableViewBottomConstraint {
	%orig;
	NSLog(@"-(id) tableViewBottomConstraint");
}

-(void) setTableViewBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTableViewBottomConstraint:(id)");
}

-(void) dismissKeyboardTapGestureTapped:(id) {
	%orig;
	NSLog(@"-(void) dismissKeyboardTapGestureTapped:(id)");
}

-(void) cancelButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) cancelButtonTapped:(id)");
}

-(void) keyboardWillHide:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillHide:(id)");
}

-(void) keyboardWillShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShow:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(void) submitButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) submitButtonTapped:(id)");
}

-(id) submitButton {
	%orig;
	NSLog(@"-(id) submitButton");
}

-(void) setSubmitButton:(id) {
	%orig;
	NSLog(@"-(void) setSubmitButton:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(id) tableHeaderView {
	%orig;
	NSLog(@"-(id) tableHeaderView");
}

-(void) prepareForSegue:(id) sender:(id) {
	%orig;
	NSLog(@"-(void) prepareForSegue:(id) sender:(id)");
}

-(void) setTableHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setTableHeaderView:(id)");
}

%end

%hook PMOfflineStationsViewController

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

-(void) updateOfflineStateWithDisplay:(bool) enabled:(bool) switchOn:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineStateWithDisplay:(bool) enabled:(bool) switchOn:(bool)");
}

-(void) manuallyOnlineFailedWithDueTo:(long long) {
	%orig;
	NSLog(@"-(void) manuallyOnlineFailedWithDueTo:(long long)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didEndDisplayingSupplementaryView:(id) forElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didEndDisplayingSupplementaryView:(id) forElementOfKind:(id) atIndexPath:(id)");
}

-(void) updateBottomViewHiddenStatus {
	%orig;
	NSLog(@"-(void) updateBottomViewHiddenStatus");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) onOfflineStationsEnabledUpdated:(id) {
	%orig;
	NSLog(@"-(void) onOfflineStationsEnabledUpdated:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(id) disabledContainerView {
	%orig;
	NSLog(@"-(id) disabledContainerView");
}

-(void) setDisabledContainerView:(id) {
	%orig;
	NSLog(@"-(void) setDisabledContainerView:(id)");
}

-(id) enabledContainerView {
	%orig;
	NSLog(@"-(id) enabledContainerView");
}

-(void) setEnabledContainerView:(id) {
	%orig;
	NSLog(@"-(void) setEnabledContainerView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) collectionView {
	%orig;
	NSLog(@"-(id) collectionView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) setCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setCollectionView:(id)");
}

%end

%hook PMThumbprintStationShareViewController

-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id) {
	%orig;
	NSLog(@"-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id)");
}

-(void) didTapShareButton:(id) {
	%orig;
	NSLog(@"-(void) didTapShareButton:(id)");
}

-(void) didTapCancelButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCancelButton:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) setNameTextField:(id) {
	%orig;
	NSLog(@"-(void) setNameTextField:(id)");
}

-(void) setShareButton:(id) {
	%orig;
	NSLog(@"-(void) setShareButton:(id)");
}

-(id) shareButton {
	%orig;
	NSLog(@"-(id) shareButton");
}

-(id) nameTextField {
	%orig;
	NSLog(@"-(id) nameTextField");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) setCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelButton:(id)");
}

-(id) cancelButton {
	%orig;
	NSLog(@"-(id) cancelButton");
}

%end

%hook PMLevel2AdViewController

+(void) setIsInL2VideoTestMode:(bool) {
	%orig;
	NSLog(@"+(void) setIsInL2VideoTestMode:(bool)");
}

+(bool) isInL2VideoTestMode {
	%orig;
	NSLog(@"+(bool) isInL2VideoTestMode");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(bool) shouldCollapseHistory {
	%orig;
	NSLog(@"-(bool) shouldCollapseHistory");
}

-(bool) useNonPremiumTimeout {
	%orig;
	NSLog(@"-(bool) useNonPremiumTimeout");
}

-(bool) didReachInteractionIdleThreshold {
	%orig;
	NSLog(@"-(bool) didReachInteractionIdleThreshold");
}

-(void) customTimeoutBehavior {
	%orig;
	NSLog(@"-(void) customTimeoutBehavior");
}

-(id) valueExchangeMediator {
	%orig;
	NSLog(@"-(id) valueExchangeMediator");
}

-(void) enforcementProgressDidFinish {
	%orig;
	NSLog(@"-(void) enforcementProgressDidFinish");
}

-(void) showCompletedSponsoredListeningStatus {
	%orig;
	NSLog(@"-(void) showCompletedSponsoredListeningStatus");
}

-(void) didTapBackButton {
	%orig;
	NSLog(@"-(void) didTapBackButton");
}

-(void) didTapMiniPlayer {
	%orig;
	NSLog(@"-(void) didTapMiniPlayer");
}

-(void) didTapWhyAd {
	%orig;
	NSLog(@"-(void) didTapWhyAd");
}

-(void) bottomNotificationTouched:(id) {
	%orig;
	NSLog(@"-(void) bottomNotificationTouched:(id)");
}

-(void) applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillResignActive:(id)");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(id) miniPlayerHeightConstraint {
	%orig;
	NSLog(@"-(id) miniPlayerHeightConstraint");
}

-(void) setMiniPlayerHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerHeightConstraint:(id)");
}

-(id) adContainerTopConstraint {
	%orig;
	NSLog(@"-(id) adContainerTopConstraint");
}

-(void) setAdContainerTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAdContainerTopConstraint:(id)");
}

-(id) miniPlayerBottomConstraint {
	%orig;
	NSLog(@"-(id) miniPlayerBottomConstraint");
}

-(void) setMiniPlayerBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerBottomConstraint:(id)");
}

-(id) bottomNotificationViewTopConstraint {
	%orig;
	NSLog(@"-(id) bottomNotificationViewTopConstraint");
}

-(void) setBottomNotificationViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomNotificationViewTopConstraint:(id)");
}

-(id) topBannerHeight {
	%orig;
	NSLog(@"-(id) topBannerHeight");
}

-(void) setTopBannerHeight:(id) {
	%orig;
	NSLog(@"-(void) setTopBannerHeight:(id)");
}

-(id) adContainerBottomConstraint {
	%orig;
	NSLog(@"-(id) adContainerBottomConstraint");
}

-(void) setAdContainerBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAdContainerBottomConstraint:(id)");
}

-(id) bottomNotificationLabelTopMarginConstraint {
	%orig;
	NSLog(@"-(id) bottomNotificationLabelTopMarginConstraint");
}

-(void) setBottomNotificationLabelTopMarginConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomNotificationLabelTopMarginConstraint:(id)");
}

-(id) bottomNotificationLabelBottomMarginConstraint {
	%orig;
	NSLog(@"-(id) bottomNotificationLabelBottomMarginConstraint");
}

-(void) setBottomNotificationLabelBottomMarginConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomNotificationLabelBottomMarginConstraint:(id)");
}

-(id) sponsoredListeningTopBannerContainer {
	%orig;
	NSLog(@"-(id) sponsoredListeningTopBannerContainer");
}

-(void) setSponsoredListeningTopBannerContainer:(id) {
	%orig;
	NSLog(@"-(void) setSponsoredListeningTopBannerContainer:(id)");
}

-(id) bottomNotificationView {
	%orig;
	NSLog(@"-(id) bottomNotificationView");
}

-(void) setBottomNotificationView:(id) {
	%orig;
	NSLog(@"-(void) setBottomNotificationView:(id)");
}

-(id) bottomNotificationLabel {
	%orig;
	NSLog(@"-(id) bottomNotificationLabel");
}

-(void) setBottomNotificationLabel:(id) {
	%orig;
	NSLog(@"-(void) setBottomNotificationLabel:(id)");
}

-(id) adContainer {
	%orig;
	NSLog(@"-(id) adContainer");
}

-(void) setAdContainer:(id) {
	%orig;
	NSLog(@"-(void) setAdContainer:(id)");
}

-(id) miniPlayerContainer {
	%orig;
	NSLog(@"-(id) miniPlayerContainer");
}

-(void) setMiniPlayerContainer:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerContainer:(id)");
}

-(id) miniPlayerOverflowView {
	%orig;
	NSLog(@"-(id) miniPlayerOverflowView");
}

-(void) setMiniPlayerOverflowView:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerOverflowView:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

%end

%hook PMLevel2WebViewContainerViewController

-(void) customTimeoutBehavior {
	%orig;
	NSLog(@"-(void) customTimeoutBehavior");
}

-(void) valueExchangeRewardDidEnd:(id) {
	%orig;
	NSLog(@"-(void) valueExchangeRewardDidEnd:(id)");
}

-(void) valueExchangeRewardDidStart:(id) {
	%orig;
	NSLog(@"-(void) valueExchangeRewardDidStart:(id)");
}

-(void) valueExchangeRewardDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) valueExchangeRewardDidUpdate:(id)");
}

-(void) valueExchangeRewardDidEnterBackground {
	%orig;
	NSLog(@"-(void) valueExchangeRewardDidEnterBackground");
}

-(void) enforcementProgressDidFinish {
	%orig;
	NSLog(@"-(void) enforcementProgressDidFinish");
}

-(double) timeIntervalSince1970 {
	%orig;
	NSLog(@"-(double) timeIntervalSince1970");
}

-(void) applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillResignActive:(id)");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(void) webViewHostLoadingProgressDidChange:(id) progress:(double) {
	%orig;
	NSLog(@"-(void) webViewHostLoadingProgressDidChange:(id) progress:(double)");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

-(void) updateWebViewLoadingStatusView {
	%orig;
	NSLog(@"-(void) updateWebViewLoadingStatusView");
}

-(void) didTapBackButton {
	%orig;
	NSLog(@"-(void) didTapBackButton");
}

-(id) sponsoredListeningTopBannerTopConstraint {
	%orig;
	NSLog(@"-(id) sponsoredListeningTopBannerTopConstraint");
}

-(void) setSponsoredListeningTopBannerTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSponsoredListeningTopBannerTopConstraint:(id)");
}

-(id) webViewContainer {
	%orig;
	NSLog(@"-(id) webViewContainer");
}

-(void) setWebViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setWebViewContainer:(id)");
}

-(void) setLoadingStatusView:(id) {
	%orig;
	NSLog(@"-(void) setLoadingStatusView:(id)");
}

-(id) loadingStatusView {
	%orig;
	NSLog(@"-(id) loadingStatusView");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

%end

%hook PMLevel2APVContainerViewController

-(void) didUpdatePlayerStateTo:(long long) {
	%orig;
	NSLog(@"-(void) didUpdatePlayerStateTo:(long long)");
}

-(long long) l2PlayerState {
	%orig;
	NSLog(@"-(long long) l2PlayerState");
}

-(void) customTimeoutBehavior {
	%orig;
	NSLog(@"-(void) customTimeoutBehavior");
}

-(void) updateVideoContainerConstraints:(double) {
	%orig;
	NSLog(@"-(void) updateVideoContainerConstraints:(double)");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) animationControllerForPresentedController:(id) presentingController:(id) sourceController:(id) {
	%orig;
	NSLog(@"-(id) animationControllerForPresentedController:(id) presentingController:(id) sourceController:(id)");
}

-(id) animationControllerForDismissedController:(id) {
	%orig;
	NSLog(@"-(id) animationControllerForDismissedController:(id)");
}

-(void) prepareForSegue:(id) sender:(id) {
	%orig;
	NSLog(@"-(void) prepareForSegue:(id) sender:(id)");
}

-(void) didRotate:(id) {
	%orig;
	NSLog(@"-(void) didRotate:(id)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(id) bottomContainerView {
	%orig;
	NSLog(@"-(id) bottomContainerView");
}

-(void) setBottomContainerView:(id) {
	%orig;
	NSLog(@"-(void) setBottomContainerView:(id)");
}

-(id) videoContainerView {
	%orig;
	NSLog(@"-(id) videoContainerView");
}

-(void) setVideoContainerView:(id) {
	%orig;
	NSLog(@"-(void) setVideoContainerView:(id)");
}

-(id) bottomContainerBottomConstraint {
	%orig;
	NSLog(@"-(id) bottomContainerBottomConstraint");
}

-(void) setBottomContainerBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomContainerBottomConstraint:(id)");
}

-(id) videoContainerApsectConstraint {
	%orig;
	NSLog(@"-(id) videoContainerApsectConstraint");
}

-(void) setVideoContainerApsectConstraint:(id) {
	%orig;
	NSLog(@"-(void) setVideoContainerApsectConstraint:(id)");
}

-(id) bottomNotificationHeightConstraint {
	%orig;
	NSLog(@"-(id) bottomNotificationHeightConstraint");
}

-(void) setBottomNotificationHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomNotificationHeightConstraint:(id)");
}

-(id) sponsoredListeningTopBannerTopConstraint {
	%orig;
	NSLog(@"-(id) sponsoredListeningTopBannerTopConstraint");
}

-(void) setSponsoredListeningTopBannerTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSponsoredListeningTopBannerTopConstraint:(id)");
}

-(id) videoContainerLeadConstraint {
	%orig;
	NSLog(@"-(id) videoContainerLeadConstraint");
}

-(void) setVideoContainerLeadConstraint:(id) {
	%orig;
	NSLog(@"-(void) setVideoContainerLeadConstraint:(id)");
}

-(id) videoContainerTrailConstraint {
	%orig;
	NSLog(@"-(id) videoContainerTrailConstraint");
}

-(void) setVideoContainerTrailConstraint:(id) {
	%orig;
	NSLog(@"-(void) setVideoContainerTrailConstraint:(id)");
}

-(id) videoContainerBottomConstraint {
	%orig;
	NSLog(@"-(id) videoContainerBottomConstraint");
}

-(void) setVideoContainerBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setVideoContainerBottomConstraint:(id)");
}

-(id) localVideoContainerTrailConstraint {
	%orig;
	NSLog(@"-(id) localVideoContainerTrailConstraint");
}

-(void) setLocalVideoContainerTrailConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLocalVideoContainerTrailConstraint:(id)");
}

-(id) localVideoContainerLeadConstraint {
	%orig;
	NSLog(@"-(id) localVideoContainerLeadConstraint");
}

-(void) setLocalVideoContainerLeadConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLocalVideoContainerLeadConstraint:(id)");
}

-(id) videoContainerTopConstraint {
	%orig;
	NSLog(@"-(id) videoContainerTopConstraint");
}

-(void) setVideoContainerTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setVideoContainerTopConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook PMLevel2SLAPContainerViewControllerBase

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMLevel2SLAPContainerV3ViewController

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) collectionView {
	%orig;
	NSLog(@"-(id) collectionView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) setCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setCollectionView:(id)");
}

-(void) setDropShadowView:(id) {
	%orig;
	NSLog(@"-(void) setDropShadowView:(id)");
}

-(id) dropShadowView {
	%orig;
	NSLog(@"-(id) dropShadowView");
}

%end

%hook PMLevel2SLAPContainerViewController

-(long long) numberOfItemsInPageView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfItemsInPageView:(id)");
}

-(id) pageView:(id) viewForIndex:(long long) {
	%orig;
	NSLog(@"-(id) pageView:(id) viewForIndex:(long long)");
}

-(void) pageView:(id) didDisplayView:(id) atIndex:(long long) {
	%orig;
	NSLog(@"-(void) pageView:(id) didDisplayView:(id) atIndex:(long long)");
}

-(void) brandNameTouched:(id) {
	%orig;
	NSLog(@"-(void) brandNameTouched:(id)");
}

-(id) activityTitleLabel {
	%orig;
	NSLog(@"-(id) activityTitleLabel");
}

-(void) setActivityTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setActivityTitleLabel:(id)");
}

-(id) brandNameLabel {
	%orig;
	NSLog(@"-(id) brandNameLabel");
}

-(void) setBrandNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setBrandNameLabel:(id)");
}

-(void) setPageControl:(id) {
	%orig;
	NSLog(@"-(void) setPageControl:(id)");
}

-(id) pagingView {
	%orig;
	NSLog(@"-(id) pagingView");
}

-(void) setPagingView:(id) {
	%orig;
	NSLog(@"-(void) setPagingView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) pageControl {
	%orig;
	NSLog(@"-(id) pageControl");
}

%end

%hook PML2VideoChildViewController

-(bool) remoteControlTogglePlayPause {
	%orig;
	NSLog(@"-(bool) remoteControlTogglePlayPause");
}

-(bool) remoteControlPause {
	%orig;
	NSLog(@"-(bool) remoteControlPause");
}

-(bool) remoteControlPlay {
	%orig;
	NSLog(@"-(bool) remoteControlPlay");
}

-(bool) remoteControlNextTrack {
	%orig;
	NSLog(@"-(bool) remoteControlNextTrack");
}

-(bool) remoteControlStop {
	%orig;
	NSLog(@"-(bool) remoteControlStop");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

%end

%hook OptionsViewController

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(void) dismissButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) dismissButtonTapped:(id)");
}

-(void) downloadsOnlySwitchValueChanged:(id) {
	%orig;
	NSLog(@"-(void) downloadsOnlySwitchValueChanged:(id)");
}

-(void) didTapDownloadsOnlyView {
	%orig;
	NSLog(@"-(void) didTapDownloadsOnlyView");
}

-(id) downloadsOnlySwitchControl {
	%orig;
	NSLog(@"-(id) downloadsOnlySwitchControl");
}

-(void) setDownloadsOnlySwitchControl:(id) {
	%orig;
	NSLog(@"-(void) setDownloadsOnlySwitchControl:(id)");
}

-(id) downloadsOnlyView {
	%orig;
	NSLog(@"-(id) downloadsOnlyView");
}

-(void) setDownloadsOnlyView:(id) {
	%orig;
	NSLog(@"-(void) setDownloadsOnlyView:(id)");
}

-(id) downloadsOnlyLabel {
	%orig;
	NSLog(@"-(id) downloadsOnlyLabel");
}

-(void) setDownloadsOnlyLabel:(id) {
	%orig;
	NSLog(@"-(void) setDownloadsOnlyLabel:(id)");
}

-(id) dividingLineHeightConstraint {
	%orig;
	NSLog(@"-(id) dividingLineHeightConstraint");
}

-(void) setDividingLineHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setDividingLineHeightConstraint:(id)");
}

-(id) optionsSheetViewHeightConstraint {
	%orig;
	NSLog(@"-(id) optionsSheetViewHeightConstraint");
}

-(void) setOptionsSheetViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setOptionsSheetViewHeightConstraint:(id)");
}

-(id) optionsSheetViewBottomSpaceConstraint {
	%orig;
	NSLog(@"-(id) optionsSheetViewBottomSpaceConstraint");
}

-(void) setOptionsSheetViewBottomSpaceConstraint:(id) {
	%orig;
	NSLog(@"-(void) setOptionsSheetViewBottomSpaceConstraint:(id)");
}

-(id) downloadsOnlyHeightConstraint {
	%orig;
	NSLog(@"-(id) downloadsOnlyHeightConstraint");
}

-(void) setDownloadsOnlyHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setDownloadsOnlyHeightConstraint:(id)");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) setDismissButton:(id) {
	%orig;
	NSLog(@"-(void) setDismissButton:(id)");
}

-(id) dismissButton {
	%orig;
	NSLog(@"-(id) dismissButton");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PMOnboardingWelcomeViewController

+(bool) shouldPresent {
	%orig;
	NSLog(@"+(bool) shouldPresent");
}

-(id) navigationController:(id) animationControllerForOperation:(long long) fromViewController:(id) toViewController:(id) {
	%orig;
	NSLog(@"-(id) navigationController:(id) animationControllerForOperation:(long long) fromViewController:(id) toViewController:(id)");
}

-(void) haymaker:(id) didFinishLoadingResponse:(id) {
	%orig;
	NSLog(@"-(void) haymaker:(id) didFinishLoadingResponse:(id)");
}

-(void) haymakerDidFail:(id) {
	%orig;
	NSLog(@"-(void) haymakerDidFail:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) arcView {
	%orig;
	NSLog(@"-(id) arcView");
}

-(void) setArcView:(id) {
	%orig;
	NSLog(@"-(void) setArcView:(id)");
}

-(id) signUpButton {
	%orig;
	NSLog(@"-(id) signUpButton");
}

-(void) signUpButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) signUpButtonTapped:(id)");
}

-(void) setSignUpButton:(id) {
	%orig;
	NSLog(@"-(void) setSignUpButton:(id)");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(id) logInButton {
	%orig;
	NSLog(@"-(id) logInButton");
}

-(void) setLogInButton:(id) {
	%orig;
	NSLog(@"-(void) setLogInButton:(id)");
}

-(id) phoneWelcomeLabel {
	%orig;
	NSLog(@"-(id) phoneWelcomeLabel");
}

-(void) setPhoneWelcomeLabel:(id) {
	%orig;
	NSLog(@"-(void) setPhoneWelcomeLabel:(id)");
}

-(id) padWelcomeLabel {
	%orig;
	NSLog(@"-(id) padWelcomeLabel");
}

-(void) setPadWelcomeLabel:(id) {
	%orig;
	NSLog(@"-(void) setPadWelcomeLabel:(id)");
}

-(id) arcViewBottomConstraint {
	%orig;
	NSLog(@"-(id) arcViewBottomConstraint");
}

-(void) setArcViewBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setArcViewBottomConstraint:(id)");
}

-(id) arcViewHeightConstraint {
	%orig;
	NSLog(@"-(id) arcViewHeightConstraint");
}

-(void) setArcViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setArcViewHeightConstraint:(id)");
}

-(id) pandoraLogoWidthConstraint {
	%orig;
	NSLog(@"-(id) pandoraLogoWidthConstraint");
}

-(void) setPandoraLogoWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setPandoraLogoWidthConstraint:(id)");
}

-(id) pandoraLogoTopConstraint {
	%orig;
	NSLog(@"-(id) pandoraLogoTopConstraint");
}

-(void) setPandoraLogoTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setPandoraLogoTopConstraint:(id)");
}

-(id) backgroundImageTrailingConstraint {
	%orig;
	NSLog(@"-(id) backgroundImageTrailingConstraint");
}

-(void) setBackgroundImageTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageTrailingConstraint:(id)");
}

-(id) backgroundImageTopConstraint {
	%orig;
	NSLog(@"-(id) backgroundImageTopConstraint");
}

-(void) setBackgroundImageTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageTopConstraint:(id)");
}

-(id) backgroundImageLeadingConstraint {
	%orig;
	NSLog(@"-(id) backgroundImageLeadingConstraint");
}

-(void) setBackgroundImageLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageLeadingConstraint:(id)");
}

-(id) backgroundImageBottomConstraint {
	%orig;
	NSLog(@"-(id) backgroundImageBottomConstraint");
}

-(void) setBackgroundImageBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageBottomConstraint:(id)");
}

-(void) requestForgotPassword:(id) {
	%orig;
	NSLog(@"-(void) requestForgotPassword:(id)");
}

-(void) requestResetPassword:(id) {
	%orig;
	NSLog(@"-(void) requestResetPassword:(id)");
}

-(void) signInButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) signInButtonTapped:(id)");
}

-(id) logoImageView {
	%orig;
	NSLog(@"-(id) logoImageView");
}

-(void) setLogoImageView:(id) {
	%orig;
	NSLog(@"-(void) setLogoImageView:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) prepareForSegue:(id) sender:(id) {
	%orig;
	NSLog(@"-(void) prepareForSegue:(id) sender:(id)");
}

%end

%hook PMMyMusicViewController

-(void) didTapViewInCatalogMoreView:(id) {
	%orig;
	NSLog(@"-(void) didTapViewInCatalogMoreView:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(void) didSelectActionItemCell:(id) {
	%orig;
	NSLog(@"-(void) didSelectActionItemCell:(id)");
}

-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool) {
	%orig;
	NSLog(@"-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool)");
}

-(void) didTapMoreButtonInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didTapMoreButtonInMediaCollectionViewCell:(id)");
}

-(void) didSelectMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didSelectMediaCollectionViewCell:(id)");
}

-(void) didLongPressMediaCollectionCellViewInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didLongPressMediaCollectionCellViewInMediaCollectionViewCell:(id)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(void) didInteractWithMediaCollectionViewCell:(id) action:(long long) {
	%orig;
	NSLog(@"-(void) didInteractWithMediaCollectionViewCell:(id) action:(long long)");
}

-(void) didInteractWithCalloutView:(id) action:(long long) {
	%orig;
	NSLog(@"-(void) didInteractWithCalloutView:(id) action:(long long)");
}

-(void) didTapOptionButtonInMediaHeaderCollectionReusableView:(id) {
	%orig;
	NSLog(@"-(void) didTapOptionButtonInMediaHeaderCollectionReusableView:(id)");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(void) updateIsInView {
	%orig;
	NSLog(@"-(void) updateIsInView");
}

-(id) collectionViewTopLayoutConstraint {
	%orig;
	NSLog(@"-(id) collectionViewTopLayoutConstraint");
}

-(void) setCollectionViewTopLayoutConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCollectionViewTopLayoutConstraint:(id)");
}

-(void) displayPremiumSearchMiniCoachMark {
	%orig;
	NSLog(@"-(void) displayPremiumSearchMiniCoachMark");
}

-(void) resetScrollPositionWithAnimated:(bool) {
	%orig;
	NSLog(@"-(void) resetScrollPositionWithAnimated:(bool)");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) collectionView {
	%orig;
	NSLog(@"-(id) collectionView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) setCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setCollectionView:(id)");
}

%end

%hook PMLevel1AdViewContainerViewController

-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) nowPlayingCardDidPressAlbumCover:(id) {
	%orig;
	NSLog(@"-(void) nowPlayingCardDidPressAlbumCover:(id)");
}

-(bool) nowPlayingCardShouldShowMiniAlbumCover:(id) {
	%orig;
	NSLog(@"-(bool) nowPlayingCardShouldShowMiniAlbumCover:(id)");
}

-(void) nowPlayingCard:(id) percentCompressed:(double) {
	%orig;
	NSLog(@"-(void) nowPlayingCard:(id) percentCompressed:(double)");
}

-(void) presentViewController:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) presentViewController:(id) animated:(bool) completion:(id)");
}

-(void) dismissAd:(long long) reason:(long long) {
	%orig;
	NSLog(@"-(void) dismissAd:(long long) reason:(long long)");
}

-(id) adViewPlaceholder {
	%orig;
	NSLog(@"-(id) adViewPlaceholder");
}

-(void) setUserSwipeEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setUserSwipeEnabled:(bool)");
}

-(bool) hasQueuedAd {
	%orig;
	NSLog(@"-(bool) hasQueuedAd");
}

-(void) updateScrollDelegate:(id) {
	%orig;
	NSLog(@"-(void) updateScrollDelegate:(id)");
}

-(bool) isShowingAd {
	%orig;
	NSLog(@"-(bool) isShowingAd");
}

-(id) scrollViewLeadingConstraint {
	%orig;
	NSLog(@"-(id) scrollViewLeadingConstraint");
}

-(void) setScrollViewLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setScrollViewLeadingConstraint:(id)");
}

-(void) setAdViewPlaceholder:(id) {
	%orig;
	NSLog(@"-(void) setAdViewPlaceholder:(id)");
}

-(void) setIsShowingAd:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingAd:(bool)");
}

-(double) leftEdgeInset {
	%orig;
	NSLog(@"-(double) leftEdgeInset");
}

-(void) setLeftEdgeInset:(double) {
	%orig;
	NSLog(@"-(void) setLeftEdgeInset:(double)");
}

-(void) setIsAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setIsAnimating:(bool)");
}

-(bool) isDismissing {
	%orig;
	NSLog(@"-(bool) isDismissing");
}

-(void) setIsDismissing:(bool) {
	%orig;
	NSLog(@"-(void) setIsDismissing:(bool)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(bool) isAnimating {
	%orig;
	NSLog(@"-(bool) isAnimating");
}

%end

%hook PMUpsellBannerViewController

-(void) updateWithReward:(id) {
	%orig;
	NSLog(@"-(void) updateWithReward:(id)");
}

-(id) upsellCTAButton {
	%orig;
	NSLog(@"-(id) upsellCTAButton");
}

-(void) setUpsellCTAButton:(id) {
	%orig;
	NSLog(@"-(void) setUpsellCTAButton:(id)");
}

-(id) upsellBannerLabel {
	%orig;
	NSLog(@"-(id) upsellBannerLabel");
}

-(void) setUpsellBannerLabel:(id) {
	%orig;
	NSLog(@"-(void) setUpsellBannerLabel:(id)");
}

-(void) upsellCTAPressed:(id) {
	%orig;
	NSLog(@"-(void) upsellCTAPressed:(id)");
}

-(id) gradientView {
	%orig;
	NSLog(@"-(id) gradientView");
}

-(void) setGradientView:(id) {
	%orig;
	NSLog(@"-(void) setGradientView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

%end

%hook PML1MutedAPVChildViewController

-(void) actionDidTouchDown:(id) {
	%orig;
	NSLog(@"-(void) actionDidTouchDown:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) videoContainer {
	%orig;
	NSLog(@"-(id) videoContainer");
}

-(void) setVideoContainer:(id) {
	%orig;
	NSLog(@"-(void) setVideoContainer:(id)");
}

-(id) videoContainerTopSpacingConstrain {
	%orig;
	NSLog(@"-(id) videoContainerTopSpacingConstrain");
}

-(void) setVideoContainerTopSpacingConstrain:(id) {
	%orig;
	NSLog(@"-(void) setVideoContainerTopSpacingConstrain:(id)");
}

-(id) titleDescriptionContainer {
	%orig;
	NSLog(@"-(id) titleDescriptionContainer");
}

-(void) setTitleDescriptionContainer:(id) {
	%orig;
	NSLog(@"-(void) setTitleDescriptionContainer:(id)");
}

-(id) titleOnlySubContainer {
	%orig;
	NSLog(@"-(id) titleOnlySubContainer");
}

-(void) setTitleOnlySubContainer:(id) {
	%orig;
	NSLog(@"-(void) setTitleOnlySubContainer:(id)");
}

-(id) titleAndDescriptionSubContainer {
	%orig;
	NSLog(@"-(id) titleAndDescriptionSubContainer");
}

-(void) setTitleAndDescriptionSubContainer:(id) {
	%orig;
	NSLog(@"-(void) setTitleAndDescriptionSubContainer:(id)");
}

-(id) titleInTitleOnlySubContainer {
	%orig;
	NSLog(@"-(id) titleInTitleOnlySubContainer");
}

-(void) setTitleInTitleOnlySubContainer:(id) {
	%orig;
	NSLog(@"-(void) setTitleInTitleOnlySubContainer:(id)");
}

-(id) titleInTileAndDescriptionSubContainer {
	%orig;
	NSLog(@"-(id) titleInTileAndDescriptionSubContainer");
}

-(void) setTitleInTileAndDescriptionSubContainer:(id) {
	%orig;
	NSLog(@"-(void) setTitleInTileAndDescriptionSubContainer:(id)");
}

-(id) descriptionInTileAndDescriptionSubContainer {
	%orig;
	NSLog(@"-(id) descriptionInTileAndDescriptionSubContainer");
}

-(void) setDescriptionInTileAndDescriptionSubContainer:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionInTileAndDescriptionSubContainer:(id)");
}

-(id) actionButton {
	%orig;
	NSLog(@"-(id) actionButton");
}

-(void) setActionButton:(id) {
	%orig;
	NSLog(@"-(void) setActionButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

%end

%hook PMCatalogNavigationViewController

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) updateControlsForDarkTheme {
	%orig;
	NSLog(@"-(void) updateControlsForDarkTheme");
}

-(void) updateControlsForLightTheme {
	%orig;
	NSLog(@"-(void) updateControlsForLightTheme");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(bool) useDefaultNavigationBarStyling {
	%orig;
	NSLog(@"-(bool) useDefaultNavigationBarStyling");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(void) didTapSearchButton {
	%orig;
	NSLog(@"-(void) didTapSearchButton");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

%end

%hook PMCatalogHtmlViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook PMArtistBioViewController

-(void) didTapViewInCatalogMoreView:(id) {
	%orig;
	NSLog(@"-(void) didTapViewInCatalogMoreView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMSourceListViewController

-(void) viewModelUpdatedNavigationData {
	%orig;
	NSLog(@"-(void) viewModelUpdatedNavigationData");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool) {
	%orig;
	NSLog(@"-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool)");
}

-(void) didTapMoreButtonInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didTapMoreButtonInMediaCollectionViewCell:(id)");
}

-(void) didSelectMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didSelectMediaCollectionViewCell:(id)");
}

-(void) didLongPressMediaCollectionCellViewInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didLongPressMediaCollectionCellViewInMediaCollectionViewCell:(id)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(void) didTapCollectButtonInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didTapCollectButtonInMediaCollectionViewCell:(id)");
}

-(void) didDelete:(id) {
	%orig;
	NSLog(@"-(void) didDelete:(id)");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook PodcastSeeAllEpisodesViewController

-(void) didTapOptionButtonInMediaHeaderView:(id) {
	%orig;
	NSLog(@"-(void) didTapOptionButtonInMediaHeaderView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook MyPodcastRecentlyPlayedCollectionViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

%end

%hook PMUserSecondaryViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

%end

%hook PMUserFollowViewController

-(void) viewModelUpdatedNavigationData {
	%orig;
	NSLog(@"-(void) viewModelUpdatedNavigationData");
}

-(void) findFriendsSelected {
	%orig;
	NSLog(@"-(void) findFriendsSelected");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

%end

%hook MyPodcastCollectedPodcastCollectionViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

%end

%hook MyPodcastCollectionViewController

-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool) {
	%orig;
	NSLog(@"-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

%end

%hook PMStationThumbsViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook PMCatalogTextViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook PMUserBioViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

%end

%hook PMPlaylistDescriptionViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

%end

%hook PMStationDescriptionViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

%end

%hook PMTrackLyricsViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMBaseCatalogViewController

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionShuffleModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionShuffleModeDidChangeTo:(long long)");
}

-(id) dominantColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) dominantColorForOfflineHeaderView:(id)");
}

-(id) lightThemeOverlayColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) lightThemeOverlayColorForOfflineHeaderView:(id)");
}

-(id) darkThemeOverlayColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) darkThemeOverlayColorForOfflineHeaderView:(id)");
}

-(double) overlayAlphaForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(double) overlayAlphaForOfflineHeaderView:(id)");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(void) catalogListScrolled:(double) {
	%orig;
	NSLog(@"-(void) catalogListScrolled:(double)");
}

-(void) initializeTableView {
	%orig;
	NSLog(@"-(void) initializeTableView");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(void) initializeBackgroundView {
	%orig;
	NSLog(@"-(void) initializeBackgroundView");
}

-(double) transparentHeaderHeight {
	%orig;
	NSLog(@"-(double) transparentHeaderHeight");
}

-(double) transparentHeaderHeightAdjustment {
	%orig;
	NSLog(@"-(double) transparentHeaderHeightAdjustment");
}

-(id) createHeaderView {
	%orig;
	NSLog(@"-(id) createHeaderView");
}

-(void) traitCollectionDidChange:(id) {
	%orig;
	NSLog(@"-(void) traitCollectionDidChange:(id)");
}

-(double) headerHeight {
	%orig;
	NSLog(@"-(double) headerHeight");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(void) resetScrollPositionWithAnimated:(bool) {
	%orig;
	NSLog(@"-(void) resetScrollPositionWithAnimated:(bool)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMAvatarBaseCatalogViewController

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(void) catalogListScrolled:(double) {
	%orig;
	NSLog(@"-(void) catalogListScrolled:(double)");
}

-(id) createHeaderView {
	%orig;
	NSLog(@"-(id) createHeaderView");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

%end

%hook PMUserCatalogViewController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) updateControlsForDarkTheme {
	%orig;
	NSLog(@"-(void) updateControlsForDarkTheme");
}

-(void) updateControlsForLightTheme {
	%orig;
	NSLog(@"-(void) updateControlsForLightTheme");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) loadLogic {
	%orig;
	NSLog(@"-(void) loadLogic");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(void) catalogListScrollBegan {
	%orig;
	NSLog(@"-(void) catalogListScrollBegan");
}

-(double) transparentHeaderHeight {
	%orig;
	NSLog(@"-(double) transparentHeaderHeight");
}

-(double) pm_navigationBarBottom {
	%orig;
	NSLog(@"-(double) pm_navigationBarBottom");
}

-(void) handleActionButtonSelected {
	%orig;
	NSLog(@"-(void) handleActionButtonSelected");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(double) headerHeight {
	%orig;
	NSLog(@"-(double) headerHeight");
}

%end

%hook PMArtistCatalogViewController

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(void) catalogListScrollBegan {
	%orig;
	NSLog(@"-(void) catalogListScrollBegan");
}

-(double) transparentHeaderHeight {
	%orig;
	NSLog(@"-(double) transparentHeaderHeight");
}

-(void) handleTopSongsButtonTouched {
	%orig;
	NSLog(@"-(void) handleTopSongsButtonTouched");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) headerHeight {
	%orig;
	NSLog(@"-(double) headerHeight");
}

%end

%hook PMControlBarCatalogViewController

-(void) catalogListScrolled:(double) {
	%orig;
	NSLog(@"-(void) catalogListScrolled:(double)");
}

-(double) transparentHeaderHeight {
	%orig;
	NSLog(@"-(double) transparentHeaderHeight");
}

-(id) createHeaderView {
	%orig;
	NSLog(@"-(id) createHeaderView");
}

-(void) handleEnterForeground {
	%orig;
	NSLog(@"-(void) handleEnterForeground");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) headerHeight {
	%orig;
	NSLog(@"-(double) headerHeight");
}

%end

%hook PMTrackCatalogViewController

-(void) didTapViewInCatalogMoreView:(id) {
	%orig;
	NSLog(@"-(void) didTapViewInCatalogMoreView:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(void) initializeTableView {
	%orig;
	NSLog(@"-(void) initializeTableView");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(void) initializeBackgroundView {
	%orig;
	NSLog(@"-(void) initializeBackgroundView");
}

-(id) viewControllerIdentifier {
	%orig;
	NSLog(@"-(id) viewControllerIdentifier");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) catalogListScrollBegan {
	%orig;
	NSLog(@"-(void) catalogListScrollBegan");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

%end

%hook PMAlbumCatalogViewController

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) initializeTableView {
	%orig;
	NSLog(@"-(void) initializeTableView");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(id) viewControllerIdentifier {
	%orig;
	NSLog(@"-(id) viewControllerIdentifier");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) catalogListScrollBegan {
	%orig;
	NSLog(@"-(void) catalogListScrollBegan");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) traitCollectionDidChange:(id) {
	%orig;
	NSLog(@"-(void) traitCollectionDidChange:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook PMStationCatalogViewController

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) traitCollectionDidChange:(id) {
	%orig;
	NSLog(@"-(void) traitCollectionDidChange:(id)");
}

-(void) updateControlsForDarkTheme {
	%orig;
	NSLog(@"-(void) updateControlsForDarkTheme");
}

-(void) updateControlsForLightTheme {
	%orig;
	NSLog(@"-(void) updateControlsForLightTheme");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(void) deleteStation {
	%orig;
	NSLog(@"-(void) deleteStation");
}

-(void) doneEditing {
	%orig;
	NSLog(@"-(void) doneEditing");
}

-(void) cancelEditing {
	%orig;
	NSLog(@"-(void) cancelEditing");
}

-(void) initializeTableView {
	%orig;
	NSLog(@"-(void) initializeTableView");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(id) viewControllerIdentifier {
	%orig;
	NSLog(@"-(id) viewControllerIdentifier");
}

-(void) catalogListScrollBegan {
	%orig;
	NSLog(@"-(void) catalogListScrollBegan");
}

-(void) setViewControllerIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setViewControllerIdentifier:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMUncollectedStationCatalogViewController

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(id) viewControllerIdentifier {
	%orig;
	NSLog(@"-(id) viewControllerIdentifier");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(void) catalogListScrollBegan {
	%orig;
	NSLog(@"-(void) catalogListScrollBegan");
}

-(void) setViewControllerIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setViewControllerIdentifier:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

%end

%hook PodcastEpisodeCatalogViewController

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) initializeTableView {
	%orig;
	NSLog(@"-(void) initializeTableView");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(id) viewControllerIdentifier {
	%orig;
	NSLog(@"-(id) viewControllerIdentifier");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) initWithPandoraId:(id) source:(id) {
	%orig;
	NSLog(@"-(id) initWithPandoraId:(id) source:(id)");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook PMPlaylistCatalogViewController

-(void) musicSessionShuffleModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionShuffleModeDidChangeTo:(long long)");
}

-(bool) didReachInteractionIdleThreshold {
	%orig;
	NSLog(@"-(bool) didReachInteractionIdleThreshold");
}

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) didSelectResult:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectResult:(id) isRecommendation:(bool)");
}

-(void) didSelectCollect:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectCollect:(id) isRecommendation:(bool)");
}

-(bool) allowLongPress {
	%orig;
	NSLog(@"-(bool) allowLongPress");
}

-(void) catalogListScrollBegan {
	%orig;
	NSLog(@"-(void) catalogListScrollBegan");
}

-(void) catalogListScrollEnded {
	%orig;
	NSLog(@"-(void) catalogListScrollEnded");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(id) viewControllerIdentifier {
	%orig;
	NSLog(@"-(id) viewControllerIdentifier");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) userSubscriptionStateDidChange {
	%orig;
	NSLog(@"-(void) userSubscriptionStateDidChange");
}

-(void) initializeTableView {
	%orig;
	NSLog(@"-(void) initializeTableView");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(double) transparentHeaderHeightAdjustment {
	%orig;
	NSLog(@"-(double) transparentHeaderHeightAdjustment");
}

-(void) keyboardWillHide {
	%orig;
	NSLog(@"-(void) keyboardWillHide");
}

-(void) addSimilarSongs {
	%orig;
	NSLog(@"-(void) addSimilarSongs");
}

-(void) cancelEditing {
	%orig;
	NSLog(@"-(void) cancelEditing");
}

-(void) keyboardWillShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShow:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) setEditing:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setEditing:(bool) animated:(bool)");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(void) updateViewConstraints {
	%orig;
	NSLog(@"-(void) updateViewConstraints");
}

%end

%hook PodcastProgramCatalogViewController

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(id) viewControllerIdentifier {
	%orig;
	NSLog(@"-(id) viewControllerIdentifier");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) initWithPandoraId:(id) source:(id) {
	%orig;
	NSLog(@"-(id) initWithPandoraId:(id) source:(id)");
}

-(void) initializeTableView {
	%orig;
	NSLog(@"-(void) initializeTableView");
}

-(void) initializeArtHeader {
	%orig;
	NSLog(@"-(void) initializeArtHeader");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(void) catalogListScrollBegan {
	%orig;
	NSLog(@"-(void) catalogListScrollBegan");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMStationListTopViewController

+(id) newStationListTopViewController {
	%orig;
	NSLog(@"+(id) newStationListTopViewController");
}

+(id) slideSwitchButtonTitles {
	%orig;
	NSLog(@"+(id) slideSwitchButtonTitles");
}

+(id) slideSwitchButtonIdentifiers {
	%orig;
	NSLog(@"+(id) slideSwitchButtonIdentifiers");
}

+(id) slideSwitchButtonHints {
	%orig;
	NSLog(@"+(id) slideSwitchButtonHints");
}

-(void) URLWasOpenedWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) URLWasOpenedWithPath:(id) andParameters:(id)");
}

-(void) setMusicSessionManager:(id) {
	%orig;
	NSLog(@"-(void) setMusicSessionManager:(id)");
}

-(void) showCreateStation {
	%orig;
	NSLog(@"-(void) showCreateStation");
}

-(void) clearAndResignStationCreationFirstResponder {
	%orig;
	NSLog(@"-(void) clearAndResignStationCreationFirstResponder");
}

-(long long) selectedChildViewControllerOption {
	%orig;
	NSLog(@"-(long long) selectedChildViewControllerOption");
}

-(id) browseViewController {
	%orig;
	NSLog(@"-(id) browseViewController");
}

-(void) flushPromotedStationCacheIfPossible {
	%orig;
	NSLog(@"-(void) flushPromotedStationCacheIfPossible");
}

-(void) flushStationListRecStatsIfPossible {
	%orig;
	NSLog(@"-(void) flushStationListRecStatsIfPossible");
}

-(void) attemptPromotedStationRefresh {
	%orig;
	NSLog(@"-(void) attemptPromotedStationRefresh");
}

-(void) setupRecommendationStatsCollectorAndCheckIfRecommendationDidntChange:(bool) {
	%orig;
	NSLog(@"-(void) setupRecommendationStatsCollectorAndCheckIfRecommendationDidntChange:(bool)");
}

-(double) topInsetForAdControllerView {
	%orig;
	NSLog(@"-(double) topInsetForAdControllerView");
}

-(bool) shouldFocusOnCreateStationFieldOnNextViewDidAppear {
	%orig;
	NSLog(@"-(bool) shouldFocusOnCreateStationFieldOnNextViewDidAppear");
}

-(void) setShouldFocusOnCreateStationFieldOnNextViewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldFocusOnCreateStationFieldOnNextViewDidAppear:(bool)");
}

-(void) teachMarkWasDismissedByUser:(long long) {
	%orig;
	NSLog(@"-(void) teachMarkWasDismissedByUser:(long long)");
}

-(void) valueExchangeRewardDidStart:(id) {
	%orig;
	NSLog(@"-(void) valueExchangeRewardDidStart:(id)");
}

-(id) createStationButton {
	%orig;
	NSLog(@"-(id) createStationButton");
}

-(void) searchButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) searchButtonTapped:(id)");
}

-(void) myStationsController:(id) didAddStation:(id) {
	%orig;
	NSLog(@"-(void) myStationsController:(id) didAddStation:(id)");
}

-(void) myStationsController:(id) didDeleteStation:(id) {
	%orig;
	NSLog(@"-(void) myStationsController:(id) didDeleteStation:(id)");
}

-(void) myStationsController:(id) didTapBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) myStationsController:(id) didTapBrowseButton:(id)");
}

-(void) didTapSPButtonCellForStationData:(id) {
	%orig;
	NSLog(@"-(void) didTapSPButtonCellForStationData:(id)");
}

-(void) myStationsController:(id) wantsNavBarCreateStationButtonHidden:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) myStationsController:(id) wantsNavBarCreateStationButtonHidden:(bool) animated:(bool)");
}

-(void) myStationsControllerDidSelectCreateStation:(id) {
	%orig;
	NSLog(@"-(void) myStationsControllerDidSelectCreateStation:(id)");
}

-(void) didTapBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapBrowseButton:(id)");
}

-(void) createStationViewController:(id) didScreenEdgeSwipe:(bool) willPopWithSource:(long long) {
	%orig;
	NSLog(@"-(void) createStationViewController:(id) didScreenEdgeSwipe:(bool) willPopWithSource:(long long)");
}

-(void) createStationViewController:(id) didTapBrowseButton:(id) dataSourceType:(long long) {
	%orig;
	NSLog(@"-(void) createStationViewController:(id) didTapBrowseButton:(id) dataSourceType:(long long)");
}

-(void) createStationViewController:(id) didReceiveFuzzyMatchFromTrafficDrivingPartner:(id) {
	%orig;
	NSLog(@"-(void) createStationViewController:(id) didReceiveFuzzyMatchFromTrafficDrivingPartner:(id)");
}

-(id) selectedMeterButton {
	%orig;
	NSLog(@"-(id) selectedMeterButton");
}

-(id) addNavButton {
	%orig;
	NSLog(@"-(id) addNavButton");
}

-(id) tappedMeterCell {
	%orig;
	NSLog(@"-(id) tappedMeterCell");
}

-(void) selectNonPremiumListController {
	%orig;
	NSLog(@"-(void) selectNonPremiumListController");
}

-(void) stationListOnBoardingViewController:(id) didTapCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) stationListOnBoardingViewController:(id) didTapCreateStationButton:(id)");
}

-(void) stationListOnBoardingViewController:(id) didTapBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) stationListOnBoardingViewController:(id) didTapBrowseButton:(id)");
}

-(bool) shouldDismissCoachMarks {
	%orig;
	NSLog(@"-(bool) shouldDismissCoachMarks");
}

-(bool) hideTabBarWhenVisible {
	%orig;
	NSLog(@"-(bool) hideTabBarWhenVisible");
}

-(void) setCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationButton:(id)");
}

-(void) createStationButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) createStationButtonTapped:(id)");
}

-(void) slideOrTapSwitch:(id) didSwitchTo:(long long) byInteraction:(bool) {
	%orig;
	NSLog(@"-(void) slideOrTapSwitch:(id) didSwitchTo:(long long) byInteraction:(bool)");
}

-(void) openStationDetails:(id) {
	%orig;
	NSLog(@"-(void) openStationDetails:(id)");
}

-(void) browseController:(id) wantsNavBarCreateStationButtonHidden:(bool) {
	%orig;
	NSLog(@"-(void) browseController:(id) wantsNavBarCreateStationButtonHidden:(bool)");
}

-(void) browseController:(id) didTapCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) browseController:(id) didTapCreateStationButton:(id)");
}

-(void) browseController:(id) didTapStationListButton:(id) {
	%orig;
	NSLog(@"-(void) browseController:(id) didTapStationListButton:(id)");
}

-(void) updateForUserSubscriptionState {
	%orig;
	NSLog(@"-(void) updateForUserSubscriptionState");
}

-(void) setArtistDeepLinkHandler:(id) {
	%orig;
	NSLog(@"-(void) setArtistDeepLinkHandler:(id)");
}

-(void) setBrowseDeepLinkHandler:(id) {
	%orig;
	NSLog(@"-(void) setBrowseDeepLinkHandler:(id)");
}

-(void) setDisallowSMCCoachmark:(bool) {
	%orig;
	NSLog(@"-(void) setDisallowSMCCoachmark:(bool)");
}

-(void) tabDidChange:(id) {
	%orig;
	NSLog(@"-(void) tabDidChange:(id)");
}

-(void) videoAdDidFinishPlaying {
	%orig;
	NSLog(@"-(void) videoAdDidFinishPlaying");
}

-(void) updateCreateStationVisibility {
	%orig;
	NSLog(@"-(void) updateCreateStationVisibility");
}

-(id) slideSwitch {
	%orig;
	NSLog(@"-(id) slideSwitch");
}

-(id) slideOrTapSwitchWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) slideOrTapSwitchWithStyle:(long long)");
}

-(void) setSlideSwitch:(id) {
	%orig;
	NSLog(@"-(void) setSlideSwitch:(id)");
}

-(bool) shouldAllowNavigationToBrowse {
	%orig;
	NSLog(@"-(bool) shouldAllowNavigationToBrowse");
}

-(bool) isCreateStationButtonHidden {
	%orig;
	NSLog(@"-(bool) isCreateStationButtonHidden");
}

-(void) initOnboardingController {
	%orig;
	NSLog(@"-(void) initOnboardingController");
}

-(void) removeNonPremiumListControllers {
	%orig;
	NSLog(@"-(void) removeNonPremiumListControllers");
}

-(id) onboardingViewController {
	%orig;
	NSLog(@"-(id) onboardingViewController");
}

-(void) setIsNavigatingToBrowseFromSearch:(bool) {
	%orig;
	NSLog(@"-(void) setIsNavigatingToBrowseFromSearch:(bool)");
}

-(id) newBrowseViewController {
	%orig;
	NSLog(@"-(id) newBrowseViewController");
}

-(void) setBrowseViewController:(id) {
	%orig;
	NSLog(@"-(void) setBrowseViewController:(id)");
}

-(id) myMusicViewController {
	%orig;
	NSLog(@"-(id) myMusicViewController");
}

-(void) transitionFromChildViewController:(id) toChildViewController:(id) animated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) transitionFromChildViewController:(id) toChildViewController:(id) animated:(bool) completion:(id)");
}

-(id) nonPremiumListController {
	%orig;
	NSLog(@"-(id) nonPremiumListController");
}

-(id) myMediaController {
	%orig;
	NSLog(@"-(id) myMediaController");
}

-(id) myStationsController {
	%orig;
	NSLog(@"-(id) myStationsController");
}

-(void) setOnboardingViewController:(id) {
	%orig;
	NSLog(@"-(void) setOnboardingViewController:(id)");
}

-(void) setIsCreateStationButtonHidden:(bool) {
	%orig;
	NSLog(@"-(void) setIsCreateStationButtonHidden:(bool)");
}

-(void) syncStationsCompleted {
	%orig;
	NSLog(@"-(void) syncStationsCompleted");
}

-(void) showNewOnboardingUI {
	%orig;
	NSLog(@"-(void) showNewOnboardingUI");
}

-(bool) shouldAnimateNavigationToBrowse {
	%orig;
	NSLog(@"-(bool) shouldAnimateNavigationToBrowse");
}

-(void) showBrowseController:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) showBrowseController:(bool) completion:(id)");
}

-(void) presentMainTeachMark {
	%orig;
	NSLog(@"-(void) presentMainTeachMark");
}

-(bool) didPopCreateStationViewController {
	%orig;
	NSLog(@"-(bool) didPopCreateStationViewController");
}

-(bool) disallowSMCCoachmark {
	%orig;
	NSLog(@"-(bool) disallowSMCCoachmark");
}

-(void) setDidPopCreateStationViewController:(bool) {
	%orig;
	NSLog(@"-(void) setDidPopCreateStationViewController:(bool)");
}

-(void) setupMenuItem {
	%orig;
	NSLog(@"-(void) setupMenuItem");
}

-(void) setupSlideOrTapSwitch:(long long) {
	%orig;
	NSLog(@"-(void) setupSlideOrTapSwitch:(long long)");
}

-(void) removeChild:(id) addChild:(id) {
	%orig;
	NSLog(@"-(void) removeChild:(id) addChild:(id)");
}

-(bool) shouldConstrainNavigationBar {
	%orig;
	NSLog(@"-(bool) shouldConstrainNavigationBar");
}

-(long long) getInitialViewType {
	%orig;
	NSLog(@"-(long long) getInitialViewType");
}

-(id) deepLinkSearchObject {
	%orig;
	NSLog(@"-(id) deepLinkSearchObject");
}

-(void) setDeepLinkSearchObject:(id) {
	%orig;
	NSLog(@"-(void) setDeepLinkSearchObject:(id)");
}

-(void) selectSelf {
	%orig;
	NSLog(@"-(void) selectSelf");
}

-(void) showNavigationBarIfHidden {
	%orig;
	NSLog(@"-(void) showNavigationBarIfHidden");
}

-(bool) hasMovedOffOnboardingScreen {
	%orig;
	NSLog(@"-(bool) hasMovedOffOnboardingScreen");
}

-(id) containerViewController:(id) animationControllerForTransitionFromViewController:(id) toViewController:(id) {
	%orig;
	NSLog(@"-(id) containerViewController:(id) animationControllerForTransitionFromViewController:(id) toViewController:(id)");
}

-(id) pushNewCreateStationViewControllerWithSource:(long long) animated:(bool) {
	%orig;
	NSLog(@"-(id) pushNewCreateStationViewControllerWithSource:(long long) animated:(bool)");
}

-(void) setTappedSPStation:(id) {
	%orig;
	NSLog(@"-(void) setTappedSPStation:(id)");
}

-(void) selectBrowseController {
	%orig;
	NSLog(@"-(void) selectBrowseController");
}

-(void) logCreateStationBrowseAccessEvent:(long long) {
	%orig;
	NSLog(@"-(void) logCreateStationBrowseAccessEvent:(long long)");
}

-(void) setPendingOpenURLRequestUponVideoCompletion:(id) {
	%orig;
	NSLog(@"-(void) setPendingOpenURLRequestUponVideoCompletion:(id)");
}

-(id) browseDeepLinkHandler {
	%orig;
	NSLog(@"-(id) browseDeepLinkHandler");
}

-(id) artistDeepLinkHandler {
	%orig;
	NSLog(@"-(id) artistDeepLinkHandler");
}

-(void) handleStationURL:(id) {
	%orig;
	NSLog(@"-(void) handleStationURL:(id)");
}

-(void) openStationDetailsWithStationId:(id) {
	%orig;
	NSLog(@"-(void) openStationDetailsWithStationId:(id)");
}

-(id) pendingOpenURLRequestUponVideoCompletion {
	%orig;
	NSLog(@"-(id) pendingOpenURLRequestUponVideoCompletion");
}

-(id) getStationIdFromPathElements:(id) stationIdPathIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(id) getStationIdFromPathElements:(id) stationIdPathIndex:(unsigned long long)");
}

-(void) openStationPersonalizationWithStationId:(id) pushToStationHistory:(bool) scrollToThumbDown:(bool) pushToAddVariety:(bool) pushToEditStationNameDescription:(bool) showCreateStationWhenStationDoesNotExist:(bool) {
	%orig;
	NSLog(@"-(void) openStationPersonalizationWithStationId:(id) pushToStationHistory:(bool) scrollToThumbDown:(bool) pushToAddVariety:(bool) pushToEditStationNameDescription:(bool) showCreateStationWhenStationDoesNotExist:(bool)");
}

-(void) showStationDoesNotExitDialog:(id) {
	%orig;
	NSLog(@"-(void) showStationDoesNotExitDialog:(id)");
}

-(id) findStationInStationList:(id) byStationId:(id) {
	%orig;
	NSLog(@"-(id) findStationInStationList:(id) byStationId:(id)");
}

-(id) backstageUrlFromPath:(id) stationId:(id) {
	%orig;
	NSLog(@"-(id) backstageUrlFromPath:(id) stationId:(id)");
}

-(bool) isNavigatingToBrowseFromSearch {
	%orig;
	NSLog(@"-(bool) isNavigatingToBrowseFromSearch");
}

-(bool) isInStationListTopViewController {
	%orig;
	NSLog(@"-(bool) isInStationListTopViewController");
}

-(id) tappedSPStation {
	%orig;
	NSLog(@"-(id) tappedSPStation");
}

-(void) loadPremiumAccessRewardWithRewardManager:(id) musicSessionManager:(id) mocCoordinator:(id) {
	%orig;
	NSLog(@"-(void) loadPremiumAccessRewardWithRewardManager:(id) musicSessionManager:(id) mocCoordinator:(id)");
}

-(void) myMusicViewController:(id) didSelectArtistModel:(id) hasEnabledOptionToShowDownloadsOnly:(bool) {
	%orig;
	NSLog(@"-(void) myMusicViewController:(id) didSelectArtistModel:(id) hasEnabledOptionToShowDownloadsOnly:(bool)");
}

-(void) myMusicViewControllerDidRequestToNavigateToBrowse:(id) {
	%orig;
	NSLog(@"-(void) myMusicViewControllerDidRequestToNavigateToBrowse:(id)");
}

-(id) rightBarButtonItemForNavigationItemOf:(id) {
	%orig;
	NSLog(@"-(id) rightBarButtonItemForNavigationItemOf:(id)");
}

-(void) resetPasswordDidSucceed {
	%orig;
	NSLog(@"-(void) resetPasswordDidSucceed");
}

-(void) resetPasswordDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) resetPasswordDidFailWithError:(id)");
}

-(void) setupCreateStationButton {
	%orig;
	NSLog(@"-(void) setupCreateStationButton");
}

-(id) myCollectionScrollResettable {
	%orig;
	NSLog(@"-(id) myCollectionScrollResettable");
}

-(void) slideOrTapSwitch:(id) didSwitchTo:(long long) byInteraction:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) slideOrTapSwitch:(id) didSwitchTo:(long long) byInteraction:(bool) completion:(id)");
}

-(void) selectBrowseControllerFromSearch {
	%orig;
	NSLog(@"-(void) selectBrowseControllerFromSearch");
}

-(void) teachMarkDidShow:(long long) {
	%orig;
	NSLog(@"-(void) teachMarkDidShow:(long long)");
}

-(void) teachMark:(long long) didTapView:(id) {
	%orig;
	NSLog(@"-(void) teachMark:(long long) didTapView:(id)");
}

-(void) teachMarkDidTimeout:(long long) {
	%orig;
	NSLog(@"-(void) teachMarkDidTimeout:(long long)");
}

-(void) teachMarkDidClickCTA:(long long) {
	%orig;
	NSLog(@"-(void) teachMarkDidClickCTA:(long long)");
}

-(id) animatedTeachMarkSwitch {
	%orig;
	NSLog(@"-(id) animatedTeachMarkSwitch");
}

-(void) setAnimatedTeachMarkSwitch:(id) {
	%orig;
	NSLog(@"-(void) setAnimatedTeachMarkSwitch:(id)");
}

-(void) setMyMediaController:(id) {
	%orig;
	NSLog(@"-(void) setMyMediaController:(id)");
}

-(void) setMyStationsController:(id) {
	%orig;
	NSLog(@"-(void) setMyStationsController:(id)");
}

-(void) setMyMusicViewController:(id) {
	%orig;
	NSLog(@"-(void) setMyMusicViewController:(id)");
}

-(void) resetScrollPositionWithAnimated:(bool) {
	%orig;
	NSLog(@"-(void) resetScrollPositionWithAnimated:(bool)");
}

-(id) musicSessionManager {
	%orig;
	NSLog(@"-(id) musicSessionManager");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(bool) hasActiveSource {
	%orig;
	NSLog(@"-(bool) hasActiveSource");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(void) loginDidComplete:(id) {
	%orig;
	NSLog(@"-(void) loginDidComplete:(id)");
}

-(void) logoutDidComplete:(id) {
	%orig;
	NSLog(@"-(void) logoutDidComplete:(id)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(void) setViewHasAppeared:(bool) {
	%orig;
	NSLog(@"-(void) setViewHasAppeared:(bool)");
}

-(bool) viewHasAppeared {
	%orig;
	NSLog(@"-(bool) viewHasAppeared");
}

-(id) animationQueue {
	%orig;
	NSLog(@"-(id) animationQueue");
}

-(void) updateTitleView {
	%orig;
	NSLog(@"-(void) updateTitleView");
}

-(id) initialViewController {
	%orig;
	NSLog(@"-(id) initialViewController");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) willTransitionToTraitCollection:(id) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) willTransitionToTraitCollection:(id) withTransitionCoordinator:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) reloadData {
	%orig;
	NSLog(@"-(void) reloadData");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(int) minHeight {
	%orig;
	NSLog(@"-(int) minHeight");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook PMImageCropperController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setupImageScrollView {
	%orig;
	NSLog(@"-(void) setupImageScrollView");
}

-(void) updateBlackAlphaMask {
	%orig;
	NSLog(@"-(void) updateBlackAlphaMask");
}

-(void) calculateAndSetMinimumScale {
	%orig;
	NSLog(@"-(void) calculateAndSetMinimumScale");
}

-(id) blackAlphaMaskView {
	%orig;
	NSLog(@"-(id) blackAlphaMaskView");
}

-(id) cropImage {
	%orig;
	NSLog(@"-(id) cropImage");
}

-(void) saveTouched:(id) {
	%orig;
	NSLog(@"-(void) saveTouched:(id)");
}

-(void) setBlackAlphaMaskView:(id) {
	%orig;
	NSLog(@"-(void) setBlackAlphaMaskView:(id)");
}

-(void) centerImage {
	%orig;
	NSLog(@"-(void) centerImage");
}

-(void) setupViewController {
	%orig;
	NSLog(@"-(void) setupViewController");
}

-(id) saveButton {
	%orig;
	NSLog(@"-(id) saveButton");
}

-(void) setSaveButton:(id) {
	%orig;
	NSLog(@"-(void) setSaveButton:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(id) viewForZoomingInScrollView:(id) {
	%orig;
	NSLog(@"-(id) viewForZoomingInScrollView:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook PMEditStationNameDescriptionViewController

+(id) darkFontColor {
	%orig;
	NSLog(@"+(id) darkFontColor");
}

+(id) headerTitleFontColor {
	%orig;
	NSLog(@"+(id) headerTitleFontColor");
}

-(id) setupBackButton {
	%orig;
	NSLog(@"-(id) setupBackButton");
}

-(void) backButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) backButtonTapped:(id)");
}

-(void) updateBottomViewHiddenStatus {
	%orig;
	NSLog(@"-(void) updateBottomViewHiddenStatus");
}

-(void) updateEditStationNameCell:(id) {
	%orig;
	NSLog(@"-(void) updateEditStationNameCell:(id)");
}

-(void) updateEditStationDescriptionCell:(id) {
	%orig;
	NSLog(@"-(void) updateEditStationDescriptionCell:(id)");
}

-(void) popCurrentControllerAnimated {
	%orig;
	NSLog(@"-(void) popCurrentControllerAnimated");
}

-(void) setupObserver {
	%orig;
	NSLog(@"-(void) setupObserver");
}

-(void) setSelectDescriptionCellOnViewAppear:(bool) {
	%orig;
	NSLog(@"-(void) setSelectDescriptionCellOnViewAppear:(bool)");
}

-(double) offsetToNavigationBarBottom {
	%orig;
	NSLog(@"-(double) offsetToNavigationBarBottom");
}

-(void) registerForKeyboardNotifications {
	%orig;
	NSLog(@"-(void) registerForKeyboardNotifications");
}

-(void) setupEditNameDescriptionTableView {
	%orig;
	NSLog(@"-(void) setupEditNameDescriptionTableView");
}

-(id) editNameDescriptionTableView {
	%orig;
	NSLog(@"-(id) editNameDescriptionTableView");
}

-(id) nameTitleView {
	%orig;
	NSLog(@"-(id) nameTitleView");
}

-(id) descriptionTitleView {
	%orig;
	NSLog(@"-(id) descriptionTitleView");
}

-(double) stationDescriptionCellHeight {
	%orig;
	NSLog(@"-(double) stationDescriptionCellHeight");
}

-(bool) firstTimeKeywordSet {
	%orig;
	NSLog(@"-(bool) firstTimeKeywordSet");
}

-(bool) selectDescriptionCellOnViewAppear {
	%orig;
	NSLog(@"-(bool) selectDescriptionCellOnViewAppear");
}

-(void) setFirstTimeKeywordSet:(bool) {
	%orig;
	NSLog(@"-(void) setFirstTimeKeywordSet:(bool)");
}

-(id) validateForm {
	%orig;
	NSLog(@"-(id) validateForm");
}

-(void) handleSaveSuccess:(id) {
	%orig;
	NSLog(@"-(void) handleSaveSuccess:(id)");
}

-(void) handleSaveFailure:(id) {
	%orig;
	NSLog(@"-(void) handleSaveFailure:(id)");
}

-(void) updateStationNameCell:(id) {
	%orig;
	NSLog(@"-(void) updateStationNameCell:(id)");
}

-(void) setEditNameDescriptionTableView:(id) {
	%orig;
	NSLog(@"-(void) setEditNameDescriptionTableView:(id)");
}

-(void) setNameTitleView:(id) {
	%orig;
	NSLog(@"-(void) setNameTitleView:(id)");
}

-(void) setDescriptionTitleView:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionTitleView:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) updateTitle {
	%orig;
	NSLog(@"-(void) updateTitle");
}

-(void) setStationDescription:(id) {
	%orig;
	NSLog(@"-(void) setStationDescription:(id)");
}

-(id) stationDescription {
	%orig;
	NSLog(@"-(id) stationDescription");
}

-(id) nameTextField {
	%orig;
	NSLog(@"-(id) nameTextField");
}

-(void) setKeyboardFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setKeyboardFrame:(CGRect)");
}

-(CGRect) keyboardFrame {
	%orig;
	NSLog(@"-(CGRect) keyboardFrame");
}

-(id) descriptionTextView {
	%orig;
	NSLog(@"-(id) descriptionTextView");
}

-(void) keyboardWasShown:(id) {
	%orig;
	NSLog(@"-(void) keyboardWasShown:(id)");
}

-(void) keyboardWillBeHidden:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillBeHidden:(id)");
}

-(void) updateNavigationBar {
	%orig;
	NSLog(@"-(void) updateNavigationBar");
}

-(void) removeObserver {
	%orig;
	NSLog(@"-(void) removeObserver");
}

-(void) saveButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) saveButtonPressed:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) traitCollectionDidChange:(id) {
	%orig;
	NSLog(@"-(void) traitCollectionDidChange:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(bool) textFieldShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldReturn:(id)");
}

-(void) textViewDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textViewDidBeginEditing:(id)");
}

%end

%hook PMAccessoryViewController

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(long long) preferredInterfaceOrientationForPresentation {
	%orig;
	NSLog(@"-(long long) preferredInterfaceOrientationForPresentation");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMRewardViewController

-(void) removeRewardView {
	%orig;
	NSLog(@"-(void) removeRewardView");
}

-(void) updateReward:(id) startingNow:(bool) {
	%orig;
	NSLog(@"-(void) updateReward:(id) startingNow:(bool)");
}

-(void) updateRewardWithNotification:(id) {
	%orig;
	NSLog(@"-(void) updateRewardWithNotification:(id)");
}

-(void) setHideOfferButton:(bool) {
	%orig;
	NSLog(@"-(void) setHideOfferButton:(bool)");
}

-(bool) shouldShowThankYouMessage {
	%orig;
	NSLog(@"-(bool) shouldShowThankYouMessage");
}

-(void) setMoreButtonTappedAction:(id) {
	%orig;
	NSLog(@"-(void) setMoreButtonTappedAction:(id)");
}

-(void) updateToCurrent {
	%orig;
	NSLog(@"-(void) updateToCurrent");
}

-(id) valueExchangeReward {
	%orig;
	NSLog(@"-(id) valueExchangeReward");
}

-(void) setValueExchangeReward:(id) {
	%orig;
	NSLog(@"-(void) setValueExchangeReward:(id)");
}

-(bool) animatingTimerView {
	%orig;
	NSLog(@"-(bool) animatingTimerView");
}

-(void) updateFromZero {
	%orig;
	NSLog(@"-(void) updateFromZero");
}

-(void) setAnimatingTimerView:(bool) {
	%orig;
	NSLog(@"-(void) setAnimatingTimerView:(bool)");
}

-(void) animateByAddingDelta:(double) {
	%orig;
	NSLog(@"-(void) animateByAddingDelta:(double)");
}

-(void) animateFromZero {
	%orig;
	NSLog(@"-(void) animateFromZero");
}

-(id) limitedMoreButtonText {
	%orig;
	NSLog(@"-(id) limitedMoreButtonText");
}

-(bool) hideOfferButton {
	%orig;
	NSLog(@"-(bool) hideOfferButton");
}

-(id) labelSpacingButtonConstraint {
	%orig;
	NSLog(@"-(id) labelSpacingButtonConstraint");
}

-(void) configureLabelValues {
	%orig;
	NSLog(@"-(void) configureLabelValues");
}

-(id) timerViewWidthConstraint {
	%orig;
	NSLog(@"-(id) timerViewWidthConstraint");
}

-(id) moreButtonTappedAction {
	%orig;
	NSLog(@"-(id) moreButtonTappedAction");
}

-(void) configureLayout {
	%orig;
	NSLog(@"-(void) configureLayout");
}

-(void) moreButtonPresed:(id) {
	%orig;
	NSLog(@"-(void) moreButtonPresed:(id)");
}

-(void) setTimerViewWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTimerViewWidthConstraint:(id)");
}

-(void) setLabelSpacingButtonConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLabelSpacingButtonConstraint:(id)");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) gradientView {
	%orig;
	NSLog(@"-(id) gradientView");
}

-(void) setGradientView:(id) {
	%orig;
	NSLog(@"-(void) setGradientView:(id)");
}

-(void) setTimerView:(id) {
	%orig;
	NSLog(@"-(void) setTimerView:(id)");
}

-(id) timerView {
	%orig;
	NSLog(@"-(id) timerView");
}

-(double) fraction {
	%orig;
	NSLog(@"-(double) fraction");
}

-(id) topLabel {
	%orig;
	NSLog(@"-(id) topLabel");
}

-(void) setTopLabel:(id) {
	%orig;
	NSLog(@"-(void) setTopLabel:(id)");
}

-(id) bottomLabel {
	%orig;
	NSLog(@"-(id) bottomLabel");
}

-(void) setBottomLabel:(id) {
	%orig;
	NSLog(@"-(void) setBottomLabel:(id)");
}

-(void) setMoreButton:(id) {
	%orig;
	NSLog(@"-(void) setMoreButton:(id)");
}

-(id) moreButton {
	%orig;
	NSLog(@"-(id) moreButton");
}

-(void) setupAccessibility {
	%orig;
	NSLog(@"-(void) setupAccessibility");
}

-(void) stopTimer {
	%orig;
	NSLog(@"-(void) stopTimer");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) update {
	%orig;
	NSLog(@"-(void) update");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) startTimer {
	%orig;
	NSLog(@"-(void) startTimer");
}

-(void) setTimer:(id) {
	%orig;
	NSLog(@"-(void) setTimer:(id)");
}

-(id) timer {
	%orig;
	NSLog(@"-(id) timer");
}

%end

%hook PMCoverFlowMessageController

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) castDeviceDidConnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnectWithDevice:(id)");
}

-(void) castDeviceDidDisconnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnectWithDevice:(id)");
}

-(void) setMessageTypeShowing:(long long) {
	%orig;
	NSLog(@"-(void) setMessageTypeShowing:(long long)");
}

-(void) presentReplayMessageAnimated:(bool) {
	%orig;
	NSLog(@"-(void) presentReplayMessageAnimated:(bool)");
}

-(void) presentStationUnavailableMessageAnimated:(bool) {
	%orig;
	NSLog(@"-(void) presentStationUnavailableMessageAnimated:(bool)");
}

-(void) presentTrackUnavailableMessageAnimated:(bool) {
	%orig;
	NSLog(@"-(void) presentTrackUnavailableMessageAnimated:(bool)");
}

-(void) setupTrackUnavailableMessage {
	%orig;
	NSLog(@"-(void) setupTrackUnavailableMessage");
}

-(bool) showTrackUnavailMessage {
	%orig;
	NSLog(@"-(bool) showTrackUnavailMessage");
}

-(void) setShowTrackUnavailMessage:(bool) {
	%orig;
	NSLog(@"-(void) setShowTrackUnavailMessage:(bool)");
}

-(long long) messageTypeShowing {
	%orig;
	NSLog(@"-(long long) messageTypeShowing");
}

-(void) present:(bool) {
	%orig;
	NSLog(@"-(void) present:(bool)");
}

-(void) presentUnavailableMessageAnimated:(bool) {
	%orig;
	NSLog(@"-(void) presentUnavailableMessageAnimated:(bool)");
}

-(void) enableLabel {
	%orig;
	NSLog(@"-(void) enableLabel");
}

-(void) replay {
	%orig;
	NSLog(@"-(void) replay");
}

-(void) dismiss:(bool) {
	%orig;
	NSLog(@"-(void) dismiss:(bool)");
}

-(bool) isPresent {
	%orig;
	NSLog(@"-(bool) isPresent");
}

-(void) enableButton {
	%orig;
	NSLog(@"-(void) enableButton");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) shadowView {
	%orig;
	NSLog(@"-(id) shadowView");
}

-(void) setShadowView:(id) {
	%orig;
	NSLog(@"-(void) setShadowView:(id)");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

-(void) update:(bool) {
	%orig;
	NSLog(@"-(void) update:(bool)");
}

%end

%hook PMInboxTopViewController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setSelectedView:(long long) {
	%orig;
	NSLog(@"-(void) setSelectedView:(long long)");
}

-(void) buildAccessibilityElements {
	%orig;
	NSLog(@"-(void) buildAccessibilityElements");
}

-(void) URLWasOpenedWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) URLWasOpenedWithPath:(id) andParameters:(id)");
}

-(void) loadLogic {
	%orig;
	NSLog(@"-(void) loadLogic");
}

-(void) userDidLogout:(id) {
	%orig;
	NSLog(@"-(void) userDidLogout:(id)");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(void) setupTabBarImages {
	%orig;
	NSLog(@"-(void) setupTabBarImages");
}

-(void) setupTabBarButtonImageWithNotification:(id) {
	%orig;
	NSLog(@"-(void) setupTabBarButtonImageWithNotification:(id)");
}

-(void) registerForKeyboardNotifications {
	%orig;
	NSLog(@"-(void) registerForKeyboardNotifications");
}

-(void) applyBottomBorderToTabs {
	%orig;
	NSLog(@"-(void) applyBottomBorderToTabs");
}

-(void) handleNavigationBarChangesForNotificationTab {
	%orig;
	NSLog(@"-(void) handleNavigationBarChangesForNotificationTab");
}

-(void) handleNavigationBarChangesForActivityTab {
	%orig;
	NSLog(@"-(void) handleNavigationBarChangesForActivityTab");
}

-(id) notificationButton {
	%orig;
	NSLog(@"-(id) notificationButton");
}

-(id) activityButton {
	%orig;
	NSLog(@"-(id) activityButton");
}

-(void) setUnselectedColor:(id) {
	%orig;
	NSLog(@"-(void) setUnselectedColor:(id)");
}

-(id) notificationLabel {
	%orig;
	NSLog(@"-(id) notificationLabel");
}

-(id) inboxBadgeLabel {
	%orig;
	NSLog(@"-(id) inboxBadgeLabel");
}

-(void) setNotificationViewController:(id) {
	%orig;
	NSLog(@"-(void) setNotificationViewController:(id)");
}

-(id) tabContainerView {
	%orig;
	NSLog(@"-(id) tabContainerView");
}

-(id) unselectedColor {
	%orig;
	NSLog(@"-(id) unselectedColor");
}

-(id) notificationView {
	%orig;
	NSLog(@"-(id) notificationView");
}

-(void) addNewChildController:(id) asSubviewOf:(id) {
	%orig;
	NSLog(@"-(void) addNewChildController:(id) asSubviewOf:(id)");
}

-(void) setIsKeyboardVisible:(bool) {
	%orig;
	NSLog(@"-(void) setIsKeyboardVisible:(bool)");
}

-(void) hideFindFriendsButton {
	%orig;
	NSLog(@"-(void) hideFindFriendsButton");
}

-(void) showFindFriendsButton {
	%orig;
	NSLog(@"-(void) showFindFriendsButton");
}

-(id) feedsOffRedDot {
	%orig;
	NSLog(@"-(id) feedsOffRedDot");
}

-(id) feedsOff {
	%orig;
	NSLog(@"-(id) feedsOff");
}

-(id) feedsOnRedDot {
	%orig;
	NSLog(@"-(id) feedsOnRedDot");
}

-(id) feedsOn {
	%orig;
	NSLog(@"-(id) feedsOn");
}

-(id) accessibilityViewForFeedTabBarItem {
	%orig;
	NSLog(@"-(id) accessibilityViewForFeedTabBarItem");
}

-(void) setAccessibilityViewForFeedTabBarItem:(id) {
	%orig;
	NSLog(@"-(void) setAccessibilityViewForFeedTabBarItem:(id)");
}

-(void) tabBarDidUpdateSelectedItem {
	%orig;
	NSLog(@"-(void) tabBarDidUpdateSelectedItem");
}

-(void) updateAccessibilityTraitsOfAccessibilityViewForFeedTabBarItem {
	%orig;
	NSLog(@"-(void) updateAccessibilityTraitsOfAccessibilityViewForFeedTabBarItem");
}

-(void) setFeedsOn:(id) {
	%orig;
	NSLog(@"-(void) setFeedsOn:(id)");
}

-(void) setFeedsOff:(id) {
	%orig;
	NSLog(@"-(void) setFeedsOff:(id)");
}

-(void) setFeedsOnRedDot:(id) {
	%orig;
	NSLog(@"-(void) setFeedsOnRedDot:(id)");
}

-(void) setFeedsOffRedDot:(id) {
	%orig;
	NSLog(@"-(void) setFeedsOffRedDot:(id)");
}

-(void) keyboardStatus {
	%orig;
	NSLog(@"-(void) keyboardStatus");
}

-(void) setUnreadMessages:(long long) {
	%orig;
	NSLog(@"-(void) setUnreadMessages:(long long)");
}

-(id) notificationViewController {
	%orig;
	NSLog(@"-(id) notificationViewController");
}

-(void) setInboxBadgeLabel:(id) {
	%orig;
	NSLog(@"-(void) setInboxBadgeLabel:(id)");
}

-(void) setNotificationButton:(id) {
	%orig;
	NSLog(@"-(void) setNotificationButton:(id)");
}

-(void) setNotificationLabel:(id) {
	%orig;
	NSLog(@"-(void) setNotificationLabel:(id)");
}

-(void) setTabContainerView:(id) {
	%orig;
	NSLog(@"-(void) setTabContainerView:(id)");
}

-(void) setActivityButton:(id) {
	%orig;
	NSLog(@"-(void) setActivityButton:(id)");
}

-(void) setNotificationView:(id) {
	%orig;
	NSLog(@"-(void) setNotificationView:(id)");
}

-(id) previousBarButtonItems {
	%orig;
	NSLog(@"-(id) previousBarButtonItems");
}

-(void) setPreviousBarButtonItems:(id) {
	%orig;
	NSLog(@"-(void) setPreviousBarButtonItems:(id)");
}

-(void) removeOldChildController:(id) {
	%orig;
	NSLog(@"-(void) removeOldChildController:(id)");
}

-(void) setActivityLabel:(id) {
	%orig;
	NSLog(@"-(void) setActivityLabel:(id)");
}

-(id) activityLabel {
	%orig;
	NSLog(@"-(id) activityLabel");
}

-(id) previousTitle {
	%orig;
	NSLog(@"-(id) previousTitle");
}

-(void) setPreviousTitle:(id) {
	%orig;
	NSLog(@"-(void) setPreviousTitle:(id)");
}

-(long long) selectedView {
	%orig;
	NSLog(@"-(long long) selectedView");
}

-(bool) isKeyboardVisible {
	%orig;
	NSLog(@"-(bool) isKeyboardVisible");
}

-(id) selectedColor {
	%orig;
	NSLog(@"-(id) selectedColor");
}

-(void) setSelectedColor:(id) {
	%orig;
	NSLog(@"-(void) setSelectedColor:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) traitCollectionDidChange:(id) {
	%orig;
	NSLog(@"-(void) traitCollectionDidChange:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(void) updateContent {
	%orig;
	NSLog(@"-(void) updateContent");
}

-(id) activityViewController {
	%orig;
	NSLog(@"-(id) activityViewController");
}

-(void) setActivityViewController:(id) {
	%orig;
	NSLog(@"-(void) setActivityViewController:(id)");
}

-(void) buttonPressed:(id) {
	%orig;
	NSLog(@"-(void) buttonPressed:(id)");
}

-(id) activityView {
	%orig;
	NSLog(@"-(id) activityView");
}

-(void) setActivityView:(id) {
	%orig;
	NSLog(@"-(void) setActivityView:(id)");
}

%end

%hook PMSettingsTopViewController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) productUpgradeFinished {
	%orig;
	NSLog(@"-(void) productUpgradeFinished");
}

-(void) showPrivacy {
	%orig;
	NSLog(@"-(void) showPrivacy");
}

-(void) showAdvanced {
	%orig;
	NSLog(@"-(void) showAdvanced");
}

-(void) setupTabBarButtonImage {
	%orig;
	NSLog(@"-(void) setupTabBarButtonImage");
}

-(void) URLWasOpenedWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) URLWasOpenedWithPath:(id) andParameters:(id)");
}

-(void) loadLogic {
	%orig;
	NSLog(@"-(void) loadLogic");
}

-(void) showSubSettingOnAppearance:(long long) {
	%orig;
	NSLog(@"-(void) showSubSettingOnAppearance:(long long)");
}

-(void) backButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) backButtonPressed:(id)");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) castDeviceDidConnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnectWithDevice:(id)");
}

-(void) castDeviceDidDisconnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnectWithDevice:(id)");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(void) handleSettingsFailure {
	%orig;
	NSLog(@"-(void) handleSettingsFailure");
}

-(void) sleepTimerValueUpdated {
	%orig;
	NSLog(@"-(void) sleepTimerValueUpdated");
}

-(void) signOutPandora:(id) {
	%orig;
	NSLog(@"-(void) signOutPandora:(id)");
}

-(id) privacyPolicyButton {
	%orig;
	NSLog(@"-(id) privacyPolicyButton");
}

-(void) setPrivacyPolicyButton:(id) {
	%orig;
	NSLog(@"-(void) setPrivacyPolicyButton:(id)");
}

-(void) alarmUpdated {
	%orig;
	NSLog(@"-(void) alarmUpdated");
}

-(void) updateFastSwitchEnvLabel {
	%orig;
	NSLog(@"-(void) updateFastSwitchEnvLabel");
}

-(void) handleLogin {
	%orig;
	NSLog(@"-(void) handleLogin");
}

-(void) handleOfflineEligibleUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineEligibleUpdated");
}

-(void) userubscriptionStateDidChange {
	%orig;
	NSLog(@"-(void) userubscriptionStateDidChange");
}

-(void) setUpOptionalCellDescriptors {
	%orig;
	NSLog(@"-(void) setUpOptionalCellDescriptors");
}

-(id) versionButton {
	%orig;
	NSLog(@"-(id) versionButton");
}

-(bool) hasSetupNavBarItems {
	%orig;
	NSLog(@"-(bool) hasSetupNavBarItems");
}

-(void) updateNavBarItems {
	%orig;
	NSLog(@"-(void) updateNavBarItems");
}

-(long long) subSettingToShowOnViewDidAppear {
	%orig;
	NSLog(@"-(long long) subSettingToShowOnViewDidAppear");
}

-(void) didSelectOfflineBlock {
	%orig;
	NSLog(@"-(void) didSelectOfflineBlock");
}

-(void) didSelectAudioQualityAndDownloadsBlock {
	%orig;
	NSLog(@"-(void) didSelectAudioQualityAndDownloadsBlock");
}

-(void) didSelectAdvancedRow {
	%orig;
	NSLog(@"-(void) didSelectAdvancedRow");
}

-(void) didSelectP1Block {
	%orig;
	NSLog(@"-(void) didSelectP1Block");
}

-(void) showSiriShortcuts {
	%orig;
	NSLog(@"-(void) showSiriShortcuts");
}

-(void) setSubSettingToShowOnViewDidAppear:(long long) {
	%orig;
	NSLog(@"-(void) setSubSettingToShowOnViewDidAppear:(long long)");
}

-(bool) isInViewHierarchy {
	%orig;
	NSLog(@"-(bool) isInViewHierarchy");
}

-(id) pandoraOneViewController {
	%orig;
	NSLog(@"-(id) pandoraOneViewController");
}

-(void) setPandoraOneViewController:(id) {
	%orig;
	NSLog(@"-(void) setPandoraOneViewController:(id)");
}

-(id) fastSwitchEnvLabel {
	%orig;
	NSLog(@"-(id) fastSwitchEnvLabel");
}

-(void) setupLinksFont {
	%orig;
	NSLog(@"-(void) setupLinksFont");
}

-(id) versionFooterView {
	%orig;
	NSLog(@"-(id) versionFooterView");
}

-(void) setIsShowingCleanApplicationVersion:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingCleanApplicationVersion:(bool)");
}

-(void) updateVersionLabel {
	%orig;
	NSLog(@"-(void) updateVersionLabel");
}

-(id) backButtonCustomView {
	%orig;
	NSLog(@"-(id) backButtonCustomView");
}

-(id) helpButtonCustomView {
	%orig;
	NSLog(@"-(id) helpButtonCustomView");
}

-(void) setHelpButtonCustomView:(id) {
	%orig;
	NSLog(@"-(void) setHelpButtonCustomView:(id)");
}

-(void) showHelpPage:(id) {
	%orig;
	NSLog(@"-(void) showHelpPage:(id)");
}

-(id) helpBarButtonItem {
	%orig;
	NSLog(@"-(id) helpBarButtonItem");
}

-(void) setHasSetupNavBarItems:(bool) {
	%orig;
	NSLog(@"-(void) setHasSetupNavBarItems:(bool)");
}

-(void) displayGoOnlineAlertForSection:(id) {
	%orig;
	NSLog(@"-(void) displayGoOnlineAlertForSection:(id)");
}

-(bool) isSignoutButtonDisabled {
	%orig;
	NSLog(@"-(bool) isSignoutButtonDisabled");
}

-(void) registerFirstStateLogoutListeners {
	%orig;
	NSLog(@"-(void) registerFirstStateLogoutListeners");
}

-(void) disableSignOutButton {
	%orig;
	NSLog(@"-(void) disableSignOutButton");
}

-(bool) isShowingCleanApplicationVersion {
	%orig;
	NSLog(@"-(bool) isShowingCleanApplicationVersion");
}

-(void) logoutDidBegin:(id) {
	%orig;
	NSLog(@"-(void) logoutDidBegin:(id)");
}

-(void) logoutDidCancel:(id) {
	%orig;
	NSLog(@"-(void) logoutDidCancel:(id)");
}

-(void) unregisterFirstStateLogoutListeners {
	%orig;
	NSLog(@"-(void) unregisterFirstStateLogoutListeners");
}

-(void) enableSignOutButtonWithDelay:(bool) {
	%orig;
	NSLog(@"-(void) enableSignOutButtonWithDelay:(bool)");
}

-(void) showProgressIndicatorWithMessage:(id) {
	%orig;
	NSLog(@"-(void) showProgressIndicatorWithMessage:(id)");
}

-(void) hideProgressIndicator {
	%orig;
	NSLog(@"-(void) hideProgressIndicator");
}

-(void) setIsSignoutButtonDisabled:(bool) {
	%orig;
	NSLog(@"-(void) setIsSignoutButtonDisabled:(bool)");
}

-(void) switchAndPop {
	%orig;
	NSLog(@"-(void) switchAndPop");
}

-(id) alarmClockIndexPath {
	%orig;
	NSLog(@"-(id) alarmClockIndexPath");
}

-(void) reloadAlarmClockRow {
	%orig;
	NSLog(@"-(void) reloadAlarmClockRow");
}

-(void) configureDetailTextForAlarmClockCell:(id) {
	%orig;
	NSLog(@"-(void) configureDetailTextForAlarmClockCell:(id)");
}

-(void) showEditAlarm {
	%orig;
	NSLog(@"-(void) showEditAlarm");
}

-(void) updateSleepTimerLabel {
	%orig;
	NSLog(@"-(void) updateSleepTimerLabel");
}

-(id) cellAccessibilityStringForSleepTimer {
	%orig;
	NSLog(@"-(id) cellAccessibilityStringForSleepTimer");
}

-(bool) shouldShowAudioQualityAndDownloadsRow {
	%orig;
	NSLog(@"-(bool) shouldShowAudioQualityAndDownloadsRow");
}

-(id) contentForAudioQualityAndDownloads {
	%orig;
	NSLog(@"-(id) contentForAudioQualityAndDownloads");
}

-(bool) shouldShowOfflineRow {
	%orig;
	NSLog(@"-(bool) shouldShowOfflineRow");
}

-(id) contentForOfflineRow {
	%orig;
	NSLog(@"-(id) contentForOfflineRow");
}

-(bool) shouldShowP1Row {
	%orig;
	NSLog(@"-(bool) shouldShowP1Row");
}

-(id) contentForP1Row {
	%orig;
	NSLog(@"-(id) contentForP1Row");
}

-(bool) shouldShowDevicesRow {
	%orig;
	NSLog(@"-(bool) shouldShowDevicesRow");
}

-(id) contentForDevicesRow {
	%orig;
	NSLog(@"-(id) contentForDevicesRow");
}

-(bool) shouldShowPandoraLinkCertToolRow {
	%orig;
	NSLog(@"-(bool) shouldShowPandoraLinkCertToolRow");
}

-(id) contentForPandoraLinkCertificationTool {
	%orig;
	NSLog(@"-(id) contentForPandoraLinkCertificationTool");
}

-(void) didSelectPandoraLinkCertificationTool {
	%orig;
	NSLog(@"-(void) didSelectPandoraLinkCertificationTool");
}

-(id) contentForAppIcon {
	%orig;
	NSLog(@"-(id) contentForAppIcon");
}

-(void) didSelectAppIconSetting {
	%orig;
	NSLog(@"-(void) didSelectAppIconSetting");
}

-(void) setOptionalCellDescriptors:(id) {
	%orig;
	NSLog(@"-(void) setOptionalCellDescriptors:(id)");
}

-(bool) shouldShowDeveloperTools {
	%orig;
	NSLog(@"-(bool) shouldShowDeveloperTools");
}

-(id) contentForDeveloperTools {
	%orig;
	NSLog(@"-(id) contentForDeveloperTools");
}

-(void) didSelectDeveloperTools {
	%orig;
	NSLog(@"-(void) didSelectDeveloperTools");
}

-(id) optionalCellDescriptors {
	%orig;
	NSLog(@"-(id) optionalCellDescriptors");
}

-(long long) optionIndex:(long long) {
	%orig;
	NSLog(@"-(long long) optionIndex:(long long)");
}

-(id) activeOptions {
	%orig;
	NSLog(@"-(id) activeOptions");
}

-(bool) shouldShowSiriShortcuts {
	%orig;
	NSLog(@"-(bool) shouldShowSiriShortcuts");
}

-(id) contentForOptionalRow:(long long) {
	%orig;
	NSLog(@"-(id) contentForOptionalRow:(long long)");
}

-(bool) restrictOfflineOptions {
	%orig;
	NSLog(@"-(bool) restrictOfflineOptions");
}

-(void) alarmSwitchValueChanged:(id) {
	%orig;
	NSLog(@"-(void) alarmSwitchValueChanged:(id)");
}

-(id) cellForMainSectionAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) cellForMainSectionAtIndexPath:(id)");
}

-(id) cellForUtilitiesSectionAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) cellForUtilitiesSectionAtIndexPath:(id)");
}

-(id) cellForSignOutSectionAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) cellForSignOutSectionAtIndexPath:(id)");
}

-(void) updateDisabledState:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) updateDisabledState:(id) atIndexPath:(id)");
}

-(bool) shouldCellBeDisabled:(id) {
	%orig;
	NSLog(@"-(bool) shouldCellBeDisabled:(id)");
}

-(void) didSelectOptionalRow:(long long) {
	%orig;
	NSLog(@"-(void) didSelectOptionalRow:(long long)");
}

-(bool) requiresUserSettingsForOptionAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) requiresUserSettingsForOptionAtIndexPath:(id)");
}

-(void) didSelectOptionAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) didSelectOptionAtIndexPath:(id)");
}

-(void) didSelectMainSectionAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) didSelectMainSectionAtIndexPath:(id)");
}

-(void) didSelectUtilitiesSectionAtRowIndex:(id) {
	%orig;
	NSLog(@"-(void) didSelectUtilitiesSectionAtRowIndex:(id)");
}

-(void) didSelectSignOutSectionAtRowIndexPath:(id) {
	%orig;
	NSLog(@"-(void) didSelectSignOutSectionAtRowIndexPath:(id)");
}

-(void) refreshSettings {
	%orig;
	NSLog(@"-(void) refreshSettings");
}

-(void) advertiseOnPandoraButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) advertiseOnPandoraButtonPressed:(id)");
}

-(void) showTermsOfUse:(id) {
	%orig;
	NSLog(@"-(void) showTermsOfUse:(id)");
}

-(void) showPrivacyPolicy:(id) {
	%orig;
	NSLog(@"-(void) showPrivacyPolicy:(id)");
}

-(void) versionButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) versionButtonPressed:(id)");
}

-(void) setBackButtonCustomView:(id) {
	%orig;
	NSLog(@"-(void) setBackButtonCustomView:(id)");
}

-(void) setHelpBarButtonItem:(id) {
	%orig;
	NSLog(@"-(void) setHelpBarButtonItem:(id)");
}

-(id) iPhoneOnlyVersionFooterView {
	%orig;
	NSLog(@"-(id) iPhoneOnlyVersionFooterView");
}

-(void) setIPhoneOnlyVersionFooterView:(id) {
	%orig;
	NSLog(@"-(void) setIPhoneOnlyVersionFooterView:(id)");
}

-(void) setVersionFooterView:(id) {
	%orig;
	NSLog(@"-(void) setVersionFooterView:(id)");
}

-(void) setVersionButton:(id) {
	%orig;
	NSLog(@"-(void) setVersionButton:(id)");
}

-(id) advertiseOnPandoraButton {
	%orig;
	NSLog(@"-(id) advertiseOnPandoraButton");
}

-(void) setAdvertiseOnPandoraButton:(id) {
	%orig;
	NSLog(@"-(void) setAdvertiseOnPandoraButton:(id)");
}

-(id) termsOfUseButton {
	%orig;
	NSLog(@"-(id) termsOfUseButton");
}

-(void) setTermsOfUseButton:(id) {
	%orig;
	NSLog(@"-(void) setTermsOfUseButton:(id)");
}

-(void) setFastSwitchEnvLabel:(id) {
	%orig;
	NSLog(@"-(void) setFastSwitchEnvLabel:(id)");
}

-(id) offlineManager {
	%orig;
	NSLog(@"-(id) offlineManager");
}

-(void) radioUsernameDidChange {
	%orig;
	NSLog(@"-(void) radioUsernameDidChange");
}

-(void) radioUserReceivesVisualAdsDidChange {
	%orig;
	NSLog(@"-(void) radioUserReceivesVisualAdsDidChange");
}

-(void) radioUserSettingsDidChange {
	%orig;
	NSLog(@"-(void) radioUserSettingsDidChange");
}

-(void) radioUserAccountMessageUrlDidChange {
	%orig;
	NSLog(@"-(void) radioUserAccountMessageUrlDidChange");
}

-(void) registerSecondStateLogoutListeners {
	%orig;
	NSLog(@"-(void) registerSecondStateLogoutListeners");
}

-(void) logoutDidComplete:(id) {
	%orig;
	NSLog(@"-(void) logoutDidComplete:(id)");
}

-(void) logoutDidFail:(id) {
	%orig;
	NSLog(@"-(void) logoutDidFail:(id)");
}

-(void) unregisterSecondStateLogoutListeners {
	%orig;
	NSLog(@"-(void) unregisterSecondStateLogoutListeners");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) backBarButtonItem {
	%orig;
	NSLog(@"-(id) backBarButtonItem");
}

-(void) setBackBarButtonItem:(id) {
	%orig;
	NSLog(@"-(void) setBackBarButtonItem:(id)");
}

-(void) updateContent {
	%orig;
	NSLog(@"-(void) updateContent");
}

-(void) pushViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) pushViewController:(id) animated:(bool)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) didReceiveMemoryWarning {
	%orig;
	NSLog(@"-(void) didReceiveMemoryWarning");
}

-(void) applicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive");
}

%end

%hook PMOnboardingPopoverController

-(id) messageLabel {
	%orig;
	NSLog(@"-(id) messageLabel");
}

-(void) setMessageLabel:(id) {
	%orig;
	NSLog(@"-(void) setMessageLabel:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMFeedsViewController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(bool) isShowingFindPeople {
	%orig;
	NSLog(@"-(bool) isShowingFindPeople");
}

-(void) forceFindPeople {
	%orig;
	NSLog(@"-(void) forceFindPeople");
}

-(void) findPeopleIfNotAlready {
	%orig;
	NSLog(@"-(void) findPeopleIfNotAlready");
}

-(void) setupTabBarButtonImage {
	%orig;
	NSLog(@"-(void) setupTabBarButtonImage");
}

-(void) navigationDidEnd {
	%orig;
	NSLog(@"-(void) navigationDidEnd");
}

-(void) setPreventPopTo:(bool) {
	%orig;
	NSLog(@"-(void) setPreventPopTo:(bool)");
}

-(id) findPeopleController {
	%orig;
	NSLog(@"-(id) findPeopleController");
}

-(void) setIsShowingFindPeople:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingFindPeople:(bool)");
}

-(void) adjustViewContainment {
	%orig;
	NSLog(@"-(void) adjustViewContainment");
}

-(void) userDidLogout:(id) {
	%orig;
	NSLog(@"-(void) userDidLogout:(id)");
}

-(id) findPeopleBarButton {
	%orig;
	NSLog(@"-(id) findPeopleBarButton");
}

-(id) initialUrl {
	%orig;
	NSLog(@"-(id) initialUrl");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(void) addNewChildController:(id) {
	%orig;
	NSLog(@"-(void) addNewChildController:(id)");
}

-(id) webContentController {
	%orig;
	NSLog(@"-(id) webContentController");
}

-(void) setWebContentController:(id) {
	%orig;
	NSLog(@"-(void) setWebContentController:(id)");
}

-(void) setFeedContentController:(id) {
	%orig;
	NSLog(@"-(void) setFeedContentController:(id)");
}

-(id) feedContentController {
	%orig;
	NSLog(@"-(id) feedContentController");
}

-(id) findPeopleButton {
	%orig;
	NSLog(@"-(id) findPeopleButton");
}

-(void) setFindPeopleButton:(id) {
	%orig;
	NSLog(@"-(void) setFindPeopleButton:(id)");
}

-(void) goFindPeople:(id) {
	%orig;
	NSLog(@"-(void) goFindPeople:(id)");
}

-(void) pushNewFindPeopleController {
	%orig;
	NSLog(@"-(void) pushNewFindPeopleController");
}

-(bool) shouldForceFindPeople {
	%orig;
	NSLog(@"-(bool) shouldForceFindPeople");
}

-(void) setShouldForceFindPeople:(bool) {
	%orig;
	NSLog(@"-(void) setShouldForceFindPeople:(bool)");
}

-(void) setFindPeopleController:(id) {
	%orig;
	NSLog(@"-(void) setFindPeopleController:(id)");
}

-(id) findPeopleButtonIpad {
	%orig;
	NSLog(@"-(id) findPeopleButtonIpad");
}

-(void) setFindPeopleButtonIpad:(id) {
	%orig;
	NSLog(@"-(void) setFindPeopleButtonIpad:(id)");
}

-(bool) preventPopTo {
	%orig;
	NSLog(@"-(bool) preventPopTo");
}

-(void) setFindPeopleBarButton:(id) {
	%orig;
	NSLog(@"-(void) setFindPeopleBarButton:(id)");
}

-(void) removeOldChildController:(id) {
	%orig;
	NSLog(@"-(void) removeOldChildController:(id)");
}

-(long long) selectedMode {
	%orig;
	NSLog(@"-(long long) selectedMode");
}

-(void) setSelectedMode:(long long) {
	%orig;
	NSLog(@"-(void) setSelectedMode:(long long)");
}

-(bool) hasBackButton {
	%orig;
	NSLog(@"-(bool) hasBackButton");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

%end

%hook PMProfileViewController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) setupTabBarButtonImage {
	%orig;
	NSLog(@"-(void) setupTabBarButtonImage");
}

-(bool) shouldHideBottomViewWhenPushed {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewWhenPushed");
}

-(id) artistRep {
	%orig;
	NSLog(@"-(id) artistRep");
}

-(void) setArtistRep:(id) {
	%orig;
	NSLog(@"-(void) setArtistRep:(id)");
}

-(bool) didReachInteractionIdleThreshold {
	%orig;
	NSLog(@"-(bool) didReachInteractionIdleThreshold");
}

-(void) userDidLogout:(id) {
	%orig;
	NSLog(@"-(void) userDidLogout:(id)");
}

-(id) initialUrl {
	%orig;
	NSLog(@"-(id) initialUrl");
}

-(id) webContentController {
	%orig;
	NSLog(@"-(id) webContentController");
}

-(void) setProfileLoadedBlockOperationQueue:(id) {
	%orig;
	NSLog(@"-(void) setProfileLoadedBlockOperationQueue:(id)");
}

-(id) profileLoadedBlockOperationQueue {
	%orig;
	NSLog(@"-(id) profileLoadedBlockOperationQueue");
}

-(void) refreshWebContentController {
	%orig;
	NSLog(@"-(void) refreshWebContentController");
}

-(id) backstageURLForPage:(id) withWebname:(id) {
	%orig;
	NSLog(@"-(id) backstageURLForPage:(id) withWebname:(id)");
}

-(void) setWebContentController:(id) {
	%orig;
	NSLog(@"-(void) setWebContentController:(id)");
}

-(void) redisplayWebContentControllerWithBlock:(id) {
	%orig;
	NSLog(@"-(void) redisplayWebContentControllerWithBlock:(id)");
}

-(bool) hasBackButton {
	%orig;
	NSLog(@"-(bool) hasBackButton");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(void) willAnimateRotationToInterfaceOrientation:(long long) duration:(double) {
	%orig;
	NSLog(@"-(void) willAnimateRotationToInterfaceOrientation:(long long) duration:(double)");
}

%end

%hook PMRecommendationController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setShareController:(id) {
	%orig;
	NSLog(@"-(void) setShareController:(id)");
}

-(id) shareController {
	%orig;
	NSLog(@"-(id) shareController");
}

-(void) dismissPromotedStation:(id) {
	%orig;
	NSLog(@"-(void) dismissPromotedStation:(id)");
}

-(bool) isChangingStations {
	%orig;
	NSLog(@"-(bool) isChangingStations");
}

-(void) setIsChangingStations:(bool) {
	%orig;
	NSLog(@"-(void) setIsChangingStations:(bool)");
}

-(void) dismissRecommendation:(id) {
	%orig;
	NSLog(@"-(void) dismissRecommendation:(id)");
}

-(bool) shouldHideBottomSeparatorForIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) shouldHideBottomSeparatorForIndexPath:(id)");
}

-(void) setRecommendationDelegate:(id) {
	%orig;
	NSLog(@"-(void) setRecommendationDelegate:(id)");
}

-(void) recommendation:(id) didCreateRecommendation:(id) {
	%orig;
	NSLog(@"-(void) recommendation:(id) didCreateRecommendation:(id)");
}

-(void) recommendation:(id) didDismissRecommendation:(id) {
	%orig;
	NSLog(@"-(void) recommendation:(id) didDismissRecommendation:(id)");
}

-(void) stationViewCell:(id) didSelectStation:(id) tappedMoreOptionsButton:(bool) {
	%orig;
	NSLog(@"-(void) stationViewCell:(id) didSelectStation:(id) tappedMoreOptionsButton:(bool)");
}

-(id) onSubGenreViewDidDisappear {
	%orig;
	NSLog(@"-(id) onSubGenreViewDidDisappear");
}

-(void) setOnSubGenreViewDidDisappear:(id) {
	%orig;
	NSLog(@"-(void) setOnSubGenreViewDidDisappear:(id)");
}

-(void) setupNavigation {
	%orig;
	NSLog(@"-(void) setupNavigation");
}

-(void) setupRecommendationStatsCollector {
	%orig;
	NSLog(@"-(void) setupRecommendationStatsCollector");
}

-(void) setWillNavigate:(bool) {
	%orig;
	NSLog(@"-(void) setWillNavigate:(bool)");
}

-(bool) firstViewDidAppearDidRun {
	%orig;
	NSLog(@"-(bool) firstViewDidAppearDidRun");
}

-(void) setFirstViewDidAppearDidRun:(bool) {
	%orig;
	NSLog(@"-(void) setFirstViewDidAppearDidRun:(bool)");
}

-(void) setupCustomBackButton {
	%orig;
	NSLog(@"-(void) setupCustomBackButton");
}

-(void) setSkipNextReloadDataWhenRecsRefresh:(bool) {
	%orig;
	NSLog(@"-(void) setSkipNextReloadDataWhenRecsRefresh:(bool)");
}

-(void) grabMoreRecommendationIfEmpty {
	%orig;
	NSLog(@"-(void) grabMoreRecommendationIfEmpty");
}

-(void) setNoticeController:(id) {
	%orig;
	NSLog(@"-(void) setNoticeController:(id)");
}

-(id) smallCellForRecommendationForIndexPath:(id) {
	%orig;
	NSLog(@"-(id) smallCellForRecommendationForIndexPath:(id)");
}

-(id) largeCellForRecommendationForIndexPath:(id) {
	%orig;
	NSLog(@"-(id) largeCellForRecommendationForIndexPath:(id)");
}

-(bool) isBrowseAllGenreCellAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) isBrowseAllGenreCellAtIndexPath:(id)");
}

-(bool) willNavigate {
	%orig;
	NSLog(@"-(bool) willNavigate");
}

-(void) createStationForMusicToken:(id) source:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) createStationForMusicToken:(id) source:(long long) context:(id)");
}

-(void) didSelectPromotedStationAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) didSelectPromotedStationAtIndexPath:(id)");
}

-(void) dismissStation:(id) {
	%orig;
	NSLog(@"-(void) dismissStation:(id)");
}

-(void) finishedCreateStationWithRequest:(id) station:(id) {
	%orig;
	NSLog(@"-(void) finishedCreateStationWithRequest:(id) station:(id)");
}

-(void) failedCreateStationWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) failedCreateStationWithErrorCode:(long long)");
}

-(void) didSelectPromotedStation:(id) context:(id) {
	%orig;
	NSLog(@"-(void) didSelectPromotedStation:(id) context:(id)");
}

-(id) recommendationDelegate {
	%orig;
	NSLog(@"-(id) recommendationDelegate");
}

-(bool) skipNextReloadDataWhenRecsRefresh {
	%orig;
	NSLog(@"-(bool) skipNextReloadDataWhenRecsRefresh");
}

-(void) handleNoticeControllerIfNeeded {
	%orig;
	NSLog(@"-(void) handleNoticeControllerIfNeeded");
}

-(id) noticeController {
	%orig;
	NSLog(@"-(id) noticeController");
}

-(void) postNotificationToCloseAllTableViewCell {
	%orig;
	NSLog(@"-(void) postNotificationToCloseAllTableViewCell");
}

-(void) addVarietyToStation:(id) {
	%orig;
	NSLog(@"-(void) addVarietyToStation:(id)");
}

-(void) renameStation:(id) {
	%orig;
	NSLog(@"-(void) renameStation:(id)");
}

-(void) shareStation:(id) {
	%orig;
	NSLog(@"-(void) shareStation:(id)");
}

-(void) recommendations:(id) alreadySyncedAt:(id) {
	%orig;
	NSLog(@"-(void) recommendations:(id) alreadySyncedAt:(id)");
}

-(void) recommendationsDidRefresh {
	%orig;
	NSLog(@"-(void) recommendationsDidRefresh");
}

-(void) recommendationsRequestDidFail {
	%orig;
	NSLog(@"-(void) recommendationsRequestDidFail");
}

-(void) setupController {
	%orig;
	NSLog(@"-(void) setupController");
}

-(void) deleteStation:(id) {
	%orig;
	NSLog(@"-(void) deleteStation:(id)");
}

-(void) setupTableView {
	%orig;
	NSLog(@"-(void) setupTableView");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PMCreateAudioMessageController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(bool) didReachInteractionIdleThreshold {
	%orig;
	NSLog(@"-(bool) didReachInteractionIdleThreshold");
}

-(void) logStatForAction:(id) {
	%orig;
	NSLog(@"-(void) logStatForAction:(id)");
}

-(void) logStatForAction:(id) withErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) logStatForAction:(id) withErrorMessage:(id)");
}

-(void) messageDetailsControllerDidSelectChangeMessage:(id) {
	%orig;
	NSLog(@"-(void) messageDetailsControllerDidSelectChangeMessage:(id)");
}

-(void) messageDetailsControllerRequestsDismissal:(id) {
	%orig;
	NSLog(@"-(void) messageDetailsControllerRequestsDismissal:(id)");
}

-(void) updatePlayStopButtonState {
	%orig;
	NSLog(@"-(void) updatePlayStopButtonState");
}

-(void) playStopTouched:(id) {
	%orig;
	NSLog(@"-(void) playStopTouched:(id)");
}

-(id) audioProgressTimer {
	%orig;
	NSLog(@"-(id) audioProgressTimer");
}

-(void) setAudioProgressTimer:(id) {
	%orig;
	NSLog(@"-(void) setAudioProgressTimer:(id)");
}

-(void) setMessageDetailsController:(id) {
	%orig;
	NSLog(@"-(void) setMessageDetailsController:(id)");
}

-(void) createWhiteRipples {
	%orig;
	NSLog(@"-(void) createWhiteRipples");
}

-(id) whiteRippleColorForIndex:(long long) {
	%orig;
	NSLog(@"-(id) whiteRippleColorForIndex:(long long)");
}

-(void) audioRecorderRecordingDidFinish:(id) successfully:(bool) {
	%orig;
	NSLog(@"-(void) audioRecorderRecordingDidFinish:(id) successfully:(bool)");
}

-(void) audioRecorderRecordingDidFail:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) audioRecorderRecordingDidFail:(id) withError:(id)");
}

-(void) audioRecorderPlaybackDidFinish:(id) successfully:(bool) {
	%orig;
	NSLog(@"-(void) audioRecorderPlaybackDidFinish:(id) successfully:(bool)");
}

-(void) audioRecorderPlaybackDidFail:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) audioRecorderPlaybackDidFail:(id) withError:(id)");
}

-(void) pauseRadioAndSavePlaybackState {
	%orig;
	NSLog(@"-(void) pauseRadioAndSavePlaybackState");
}

-(void) setSoundEffectController:(id) {
	%orig;
	NSLog(@"-(void) setSoundEffectController:(id)");
}

-(id) soundEffectController {
	%orig;
	NSLog(@"-(id) soundEffectController");
}

-(void) setShouldAnimateRipplesWithAudio:(bool) {
	%orig;
	NSLog(@"-(void) setShouldAnimateRipplesWithAudio:(bool)");
}

-(id) navigationBarBackgroundViewHeightConstraint {
	%orig;
	NSLog(@"-(id) navigationBarBackgroundViewHeightConstraint");
}

-(id) messageDetailsScrollView {
	%orig;
	NSLog(@"-(id) messageDetailsScrollView");
}

-(id) messageDetailsContainer {
	%orig;
	NSLog(@"-(id) messageDetailsContainer");
}

-(id) messageDetailsController {
	%orig;
	NSLog(@"-(id) messageDetailsController");
}

-(void) handlePlaybackError:(id) {
	%orig;
	NSLog(@"-(void) handlePlaybackError:(id)");
}

-(void) continueToDetailsWithAnimation:(bool) {
	%orig;
	NSLog(@"-(void) continueToDetailsWithAnimation:(bool)");
}

-(id) whiteRipplesView {
	%orig;
	NSLog(@"-(id) whiteRipplesView");
}

-(id) countdownLabel {
	%orig;
	NSLog(@"-(id) countdownLabel");
}

-(id) recordViewContainer {
	%orig;
	NSLog(@"-(id) recordViewContainer");
}

-(id) footerBackgroundView {
	%orig;
	NSLog(@"-(id) footerBackgroundView");
}

-(id) startOverButton {
	%orig;
	NSLog(@"-(id) startOverButton");
}

-(id) reviewPlayStopButton {
	%orig;
	NSLog(@"-(id) reviewPlayStopButton");
}

-(id) reviewControlsContainer {
	%orig;
	NSLog(@"-(id) reviewControlsContainer");
}

-(id) detailsPlayStopButton {
	%orig;
	NSLog(@"-(id) detailsPlayStopButton");
}

-(void) setRecordControlsCenterY:(double) {
	%orig;
	NSLog(@"-(void) setRecordControlsCenterY:(double)");
}

-(void) setRecordControlsCompresseedCenterY:(double) {
	%orig;
	NSLog(@"-(void) setRecordControlsCompresseedCenterY:(double)");
}

-(id) messageDetailsArcView {
	%orig;
	NSLog(@"-(id) messageDetailsArcView");
}

-(void) restoreRadioPlaybackState {
	%orig;
	NSLog(@"-(void) restoreRadioPlaybackState");
}

-(bool) editingMessageDetails {
	%orig;
	NSLog(@"-(bool) editingMessageDetails");
}

-(void) resetRippleTransforms:(bool) {
	%orig;
	NSLog(@"-(void) resetRippleTransforms:(bool)");
}

-(void) startRippleAnimationWithScale:(double) initialAnimationDuration:(double) rippleDelayIncrement:(double) shouldReset:(bool) {
	%orig;
	NSLog(@"-(void) startRippleAnimationWithScale:(double) initialAnimationDuration:(double) rippleDelayIncrement:(double) shouldReset:(bool)");
}

-(void) animateLabel:(id) toNewText:(id) {
	%orig;
	NSLog(@"-(void) animateLabel:(id) toNewText:(id)");
}

-(void) handleRecordingError:(id) {
	%orig;
	NSLog(@"-(void) handleRecordingError:(id)");
}

-(void) startAudioProgressTimer {
	%orig;
	NSLog(@"-(void) startAudioProgressTimer");
}

-(void) updatePlaybackProgressWithTime:(double) {
	%orig;
	NSLog(@"-(void) updatePlaybackProgressWithTime:(double)");
}

-(void) updateMessageDetailsPlaybackProgressWithTime:(double) {
	%orig;
	NSLog(@"-(void) updateMessageDetailsPlaybackProgressWithTime:(double)");
}

-(void) updateRecordingProgressWithTime:(double) {
	%orig;
	NSLog(@"-(void) updateRecordingProgressWithTime:(double)");
}

-(id) messageDetailsScrollViewTopConstraint {
	%orig;
	NSLog(@"-(id) messageDetailsScrollViewTopConstraint");
}

-(id) messageDetailsScrollViewHeightConstraint {
	%orig;
	NSLog(@"-(id) messageDetailsScrollViewHeightConstraint");
}

-(id) detailsPlayStopButtonWidthConstraint {
	%orig;
	NSLog(@"-(id) detailsPlayStopButtonWidthConstraint");
}

-(id) recordViewContainerWidthConstraint {
	%orig;
	NSLog(@"-(id) recordViewContainerWidthConstraint");
}

-(double) recordControlsCompresseedCenterY {
	%orig;
	NSLog(@"-(double) recordControlsCompresseedCenterY");
}

-(id) whiteRipplesViewTopConstraint {
	%orig;
	NSLog(@"-(id) whiteRipplesViewTopConstraint");
}

-(id) composeRecordingViewTopConstraint {
	%orig;
	NSLog(@"-(id) composeRecordingViewTopConstraint");
}

-(void) updateConstraintsToMessageDetailsView {
	%orig;
	NSLog(@"-(void) updateConstraintsToMessageDetailsView");
}

-(void) setEditingMessageDetails:(bool) {
	%orig;
	NSLog(@"-(void) setEditingMessageDetails:(bool)");
}

-(void) animateCornerRadiusToCircleShapeForView:(id) withTotalDuration:(double) {
	%orig;
	NSLog(@"-(void) animateCornerRadiusToCircleShapeForView:(id) withTotalDuration:(double)");
}

-(void) resizeWhiteRipplesWithRippleSize:(double) initialRippleSize:(double) totalAnimationDuration:(double) {
	%orig;
	NSLog(@"-(void) resizeWhiteRipplesWithRippleSize:(double) initialRippleSize:(double) totalAnimationDuration:(double)");
}

-(void) updateConstraintsToMessageRecordingView {
	%orig;
	NSLog(@"-(void) updateConstraintsToMessageRecordingView");
}

-(void) showRecordingError:(id) {
	%orig;
	NSLog(@"-(void) showRecordingError:(id)");
}

-(void) resetRecordButtonState {
	%orig;
	NSLog(@"-(void) resetRecordButtonState");
}

-(void) showPlaybackError:(id) {
	%orig;
	NSLog(@"-(void) showPlaybackError:(id)");
}

-(bool) radioWasPlaying {
	%orig;
	NSLog(@"-(bool) radioWasPlaying");
}

-(void) setRadioWasPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setRadioWasPlaying:(bool)");
}

-(void) updateAudioProgress {
	%orig;
	NSLog(@"-(void) updateAudioProgress");
}

-(bool) shouldAnimateRipplesWithAudio {
	%orig;
	NSLog(@"-(bool) shouldAnimateRipplesWithAudio");
}

-(void) updateAudioFeedbackAnimations {
	%orig;
	NSLog(@"-(void) updateAudioFeedbackAnimations");
}

-(id) recordingProgressView {
	%orig;
	NSLog(@"-(id) recordingProgressView");
}

-(void) discardOrSaveDraft {
	%orig;
	NSLog(@"-(void) discardOrSaveDraft");
}

-(bool) hasPermissionToUseMicrophone {
	%orig;
	NSLog(@"-(bool) hasPermissionToUseMicrophone");
}

-(void) startCountdown {
	%orig;
	NSLog(@"-(void) startCountdown");
}

-(void) addMessageDetailsController {
	%orig;
	NSLog(@"-(void) addMessageDetailsController");
}

-(void) animateToMessageDetailsWithTotalDuration:(double) {
	%orig;
	NSLog(@"-(void) animateToMessageDetailsWithTotalDuration:(double)");
}

-(void) hideRecordingReview {
	%orig;
	NSLog(@"-(void) hideRecordingReview");
}

-(void) showRecordingReview {
	%orig;
	NSLog(@"-(void) showRecordingReview");
}

-(id) navigationBarBackgroundView {
	%orig;
	NSLog(@"-(id) navigationBarBackgroundView");
}

-(void) animateToMessageRecordingWithTotalDuration:(double) {
	%orig;
	NSLog(@"-(void) animateToMessageRecordingWithTotalDuration:(double)");
}

-(double) scrollViewRealOffsetY:(id) {
	%orig;
	NSLog(@"-(double) scrollViewRealOffsetY:(id)");
}

-(id) whiteRippleColors {
	%orig;
	NSLog(@"-(id) whiteRippleColors");
}

-(void) setWhiteRippleColors:(id) {
	%orig;
	NSLog(@"-(void) setWhiteRippleColors:(id)");
}

-(void) createWhiteRippleColors {
	%orig;
	NSLog(@"-(void) createWhiteRippleColors");
}

-(void) closeTouched:(id) {
	%orig;
	NSLog(@"-(void) closeTouched:(id)");
}

-(void) recordTouched:(id) {
	%orig;
	NSLog(@"-(void) recordTouched:(id)");
}

-(void) stopTouched:(id) {
	%orig;
	NSLog(@"-(void) stopTouched:(id)");
}

-(void) continueTouched:(id) {
	%orig;
	NSLog(@"-(void) continueTouched:(id)");
}

-(void) startOverTouched:(id) {
	%orig;
	NSLog(@"-(void) startOverTouched:(id)");
}

-(double) recordControlsCenterY {
	%orig;
	NSLog(@"-(double) recordControlsCenterY");
}

-(void) setWhiteRipplesView:(id) {
	%orig;
	NSLog(@"-(void) setWhiteRipplesView:(id)");
}

-(void) setCountdownLabel:(id) {
	%orig;
	NSLog(@"-(void) setCountdownLabel:(id)");
}

-(void) setRecordViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setRecordViewContainer:(id)");
}

-(void) setRecordingProgressView:(id) {
	%orig;
	NSLog(@"-(void) setRecordingProgressView:(id)");
}

-(void) setFooterBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setFooterBackgroundView:(id)");
}

-(void) setStartOverButton:(id) {
	%orig;
	NSLog(@"-(void) setStartOverButton:(id)");
}

-(void) setReviewControlsContainer:(id) {
	%orig;
	NSLog(@"-(void) setReviewControlsContainer:(id)");
}

-(void) setReviewPlayStopButton:(id) {
	%orig;
	NSLog(@"-(void) setReviewPlayStopButton:(id)");
}

-(void) setDetailsPlayStopButton:(id) {
	%orig;
	NSLog(@"-(void) setDetailsPlayStopButton:(id)");
}

-(id) composeRecordingView {
	%orig;
	NSLog(@"-(id) composeRecordingView");
}

-(void) setComposeRecordingView:(id) {
	%orig;
	NSLog(@"-(void) setComposeRecordingView:(id)");
}

-(void) setMessageDetailsContainer:(id) {
	%orig;
	NSLog(@"-(void) setMessageDetailsContainer:(id)");
}

-(void) setMessageDetailsScrollView:(id) {
	%orig;
	NSLog(@"-(void) setMessageDetailsScrollView:(id)");
}

-(void) setNavigationBarBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setNavigationBarBackgroundView:(id)");
}

-(void) setMessageDetailsArcView:(id) {
	%orig;
	NSLog(@"-(void) setMessageDetailsArcView:(id)");
}

-(void) setRecordViewContainerWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setRecordViewContainerWidthConstraint:(id)");
}

-(void) setWhiteRipplesViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setWhiteRipplesViewTopConstraint:(id)");
}

-(void) setComposeRecordingViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setComposeRecordingViewTopConstraint:(id)");
}

-(void) setDetailsPlayStopButtonWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setDetailsPlayStopButtonWidthConstraint:(id)");
}

-(void) setMessageDetailsScrollViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setMessageDetailsScrollViewHeightConstraint:(id)");
}

-(void) setMessageDetailsScrollViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setMessageDetailsScrollViewTopConstraint:(id)");
}

-(void) setNavigationBarBackgroundViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setNavigationBarBackgroundViewHeightConstraint:(id)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(id) continueButton {
	%orig;
	NSLog(@"-(id) continueButton");
}

-(void) setContinueButton:(id) {
	%orig;
	NSLog(@"-(void) setContinueButton:(id)");
}

-(void) stopPlayback {
	%orig;
	NSLog(@"-(void) stopPlayback");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(id) onDismiss {
	%orig;
	NSLog(@"-(id) onDismiss");
}

-(void) setOnDismiss:(id) {
	%orig;
	NSLog(@"-(void) setOnDismiss:(id)");
}

-(void) setDurationLabel:(id) {
	%orig;
	NSLog(@"-(void) setDurationLabel:(id)");
}

-(id) durationLabel {
	%orig;
	NSLog(@"-(id) durationLabel");
}

-(void) startPlayback {
	%orig;
	NSLog(@"-(void) startPlayback");
}

-(void) setupView {
	%orig;
	NSLog(@"-(void) setupView");
}

-(void) setStopButton:(id) {
	%orig;
	NSLog(@"-(void) setStopButton:(id)");
}

-(id) stopButton {
	%orig;
	NSLog(@"-(id) stopButton");
}

-(void) startRecording {
	%orig;
	NSLog(@"-(void) startRecording");
}

-(id) audioRecorder {
	%orig;
	NSLog(@"-(id) audioRecorder");
}

-(void) setAudioRecorder:(id) {
	%orig;
	NSLog(@"-(void) setAudioRecorder:(id)");
}

-(id) recordButton {
	%orig;
	NSLog(@"-(id) recordButton");
}

-(void) setRecordButton:(id) {
	%orig;
	NSLog(@"-(void) setRecordButton:(id)");
}

-(id) playbackProgressView {
	%orig;
	NSLog(@"-(id) playbackProgressView");
}

-(void) setPlaybackProgressView:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackProgressView:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) didReceiveMemoryWarning {
	%orig;
	NSLog(@"-(void) didReceiveMemoryWarning");
}

%end

%hook PMShuffleEditorController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setupCancelButton {
	%orig;
	NSLog(@"-(void) setupCancelButton");
}

-(void) setupSaveButton {
	%orig;
	NSLog(@"-(void) setupSaveButton");
}

-(void) popCurrentControllerAnimated {
	%orig;
	NSLog(@"-(void) popCurrentControllerAnimated");
}

-(void) segmentedControlDidSelectFirstSegment:(id) {
	%orig;
	NSLog(@"-(void) segmentedControlDidSelectFirstSegment:(id)");
}

-(void) segmentedControlDidSelectSecondSegment:(id) {
	%orig;
	NSLog(@"-(void) segmentedControlDidSelectSecondSegment:(id)");
}

-(void) setDidSaveShuffle:(bool) {
	%orig;
	NSLog(@"-(void) setDidSaveShuffle:(bool)");
}

-(id) stationOrGenreSegmentControl {
	%orig;
	NSLog(@"-(id) stationOrGenreSegmentControl");
}

-(void) setStationOrGenreSegmentControl:(id) {
	%orig;
	NSLog(@"-(void) setStationOrGenreSegmentControl:(id)");
}

-(bool) isValidShuffleList {
	%orig;
	NSLog(@"-(bool) isValidShuffleList");
}

-(void) setQuickMixRequestDidFinish:(id) {
	%orig;
	NSLog(@"-(void) setQuickMixRequestDidFinish:(id)");
}

-(void) setQuickMixRequest:(id) finishedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) setQuickMixRequest:(id) finishedWithErrorCode:(long long)");
}

-(void) saveShuffleList {
	%orig;
	NSLog(@"-(void) saveShuffleList");
}

-(bool) didSaveShuffle {
	%orig;
	NSLog(@"-(bool) didSaveShuffle");
}

-(void) setupController {
	%orig;
	NSLog(@"-(void) setupController");
}

-(void) setupTableView {
	%orig;
	NSLog(@"-(void) setupTableView");
}

-(void) setupDataSource {
	%orig;
	NSLog(@"-(void) setupDataSource");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) goBack {
	%orig;
	NSLog(@"-(void) goBack");
}

%end

%hook PMSubGenreViewController

+(id) subGenreControllerUsingCategories:(id) categoryIndex:(long long) stationIndex:(long long) {
	%orig;
	NSLog(@"+(id) subGenreControllerUsingCategories:(id) categoryIndex:(long long) stationIndex:(long long)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setOnViewDidDisappear:(id) {
	%orig;
	NSLog(@"-(void) setOnViewDidDisappear:(id)");
}

-(id) createdGenreStation {
	%orig;
	NSLog(@"-(id) createdGenreStation");
}

-(void) scrollToRow {
	%orig;
	NSLog(@"-(void) scrollToRow");
}

-(void) setCreatedGenreStation:(id) {
	%orig;
	NSLog(@"-(void) setCreatedGenreStation:(id)");
}

-(void) popToSourceViewController {
	%orig;
	NSLog(@"-(void) popToSourceViewController");
}

-(id) onViewDidDisappear {
	%orig;
	NSLog(@"-(id) onViewDidDisappear");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) setStationIndex:(long long) {
	%orig;
	NSLog(@"-(void) setStationIndex:(long long)");
}

-(long long) stationIndex {
	%orig;
	NSLog(@"-(long long) stationIndex");
}

-(void) setCategories:(id) {
	%orig;
	NSLog(@"-(void) setCategories:(id)");
}

-(void) setupController {
	%orig;
	NSLog(@"-(void) setupController");
}

-(long long) categoryIndex {
	%orig;
	NSLog(@"-(long long) categoryIndex");
}

-(void) setCategoryIndex:(long long) {
	%orig;
	NSLog(@"-(void) setCategoryIndex:(long long)");
}

-(void) popToRootViewController {
	%orig;
	NSLog(@"-(void) popToRootViewController");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(id) categories {
	%orig;
	NSLog(@"-(id) categories");
}

-(void) refresh {
	%orig;
	NSLog(@"-(void) refresh");
}

%end

%hook PMGenreViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) onSubGenreViewDidDisappear {
	%orig;
	NSLog(@"-(id) onSubGenreViewDidDisappear");
}

-(void) showCategoryIndex:(long long) stationIndex:(long long) {
	%orig;
	NSLog(@"-(void) showCategoryIndex:(long long) stationIndex:(long long)");
}

-(void) setOnSubGenreViewDidDisappear:(id) {
	%orig;
	NSLog(@"-(void) setOnSubGenreViewDidDisappear:(id)");
}

-(void) radioGenresDidUpdate {
	%orig;
	NSLog(@"-(void) radioGenresDidUpdate");
}

-(void) setStationIndex:(long long) {
	%orig;
	NSLog(@"-(void) setStationIndex:(long long)");
}

-(long long) stationIndex {
	%orig;
	NSLog(@"-(long long) stationIndex");
}

-(void) setCategories:(id) {
	%orig;
	NSLog(@"-(void) setCategories:(id)");
}

-(void) setupController {
	%orig;
	NSLog(@"-(void) setupController");
}

-(long long) categoryIndex {
	%orig;
	NSLog(@"-(long long) categoryIndex");
}

-(void) setCategoryIndex:(long long) {
	%orig;
	NSLog(@"-(void) setCategoryIndex:(long long)");
}

-(void) resetIndexes {
	%orig;
	NSLog(@"-(void) resetIndexes");
}

-(void) popToRootViewController {
	%orig;
	NSLog(@"-(void) popToRootViewController");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(id) categories {
	%orig;
	NSLog(@"-(id) categories");
}

%end

%hook PMSelectTrackController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setupSearchField {
	%orig;
	NSLog(@"-(void) setupSearchField");
}

-(id) searchTextField {
	%orig;
	NSLog(@"-(id) searchTextField");
}

-(void) setSearchTextField:(id) {
	%orig;
	NSLog(@"-(void) setSearchTextField:(id)");
}

-(void) searchTextField:(id) didChangeWithText:(id) {
	%orig;
	NSLog(@"-(void) searchTextField:(id) didChangeWithText:(id)");
}

-(void) searchTextFieldDidTapCloseButton:(id) {
	%orig;
	NSLog(@"-(void) searchTextFieldDidTapCloseButton:(id)");
}

-(void) loadTracks {
	%orig;
	NSLog(@"-(void) loadTracks");
}

-(id) searchContainer {
	%orig;
	NSLog(@"-(id) searchContainer");
}

-(void) showNoSearchMatchWithText:(id) {
	%orig;
	NSLog(@"-(void) showNoSearchMatchWithText:(id)");
}

-(void) setupKeyboardListeners {
	%orig;
	NSLog(@"-(void) setupKeyboardListeners");
}

-(id) searchContainerTopConstraint {
	%orig;
	NSLog(@"-(id) searchContainerTopConstraint");
}

-(bool) fetchingTracks {
	%orig;
	NSLog(@"-(bool) fetchingTracks");
}

-(id) artistTracks {
	%orig;
	NSLog(@"-(id) artistTracks");
}

-(id) trackStoryPrompt {
	%orig;
	NSLog(@"-(id) trackStoryPrompt");
}

-(id) previousNavBarShadowImage {
	%orig;
	NSLog(@"-(id) previousNavBarShadowImage");
}

-(void) setPreviousNavBarShadowImage:(id) {
	%orig;
	NSLog(@"-(void) setPreviousNavBarShadowImage:(id)");
}

-(void) setArtistTracks:(id) {
	%orig;
	NSLog(@"-(void) setArtistTracks:(id)");
}

-(void) setupTrackData {
	%orig;
	NSLog(@"-(void) setupTrackData");
}

-(void) setFetchingTracks:(bool) {
	%orig;
	NSLog(@"-(void) setFetchingTracks:(bool)");
}

-(bool) shouldUseFilteredDataSource {
	%orig;
	NSLog(@"-(bool) shouldUseFilteredDataSource");
}

-(void) filterArtistTracksWithSearchText:(id) {
	%orig;
	NSLog(@"-(void) filterArtistTracksWithSearchText:(id)");
}

-(void) showErrorViewWithTitle:(id) andMessage:(id) {
	%orig;
	NSLog(@"-(void) showErrorViewWithTitle:(id) andMessage:(id)");
}

-(id) sortDescriptorByFirstSpinDate {
	%orig;
	NSLog(@"-(id) sortDescriptorByFirstSpinDate");
}

-(id) sortDescriptorBySpinCount {
	%orig;
	NSLog(@"-(id) sortDescriptorBySpinCount");
}

-(void) setArtistTracksByFirstSpinDate:(id) {
	%orig;
	NSLog(@"-(void) setArtistTracksByFirstSpinDate:(id)");
}

-(void) setArtistTracksBySpins:(id) {
	%orig;
	NSLog(@"-(void) setArtistTracksBySpins:(id)");
}

-(id) artistTracksFiltered {
	%orig;
	NSLog(@"-(id) artistTracksFiltered");
}

-(id) artistTracksByFirstSpinDate {
	%orig;
	NSLog(@"-(id) artistTracksByFirstSpinDate");
}

-(id) artistTracksBySpins {
	%orig;
	NSLog(@"-(id) artistTracksBySpins");
}

-(void) setArtistTracksFiltered:(id) {
	%orig;
	NSLog(@"-(void) setArtistTracksFiltered:(id)");
}

-(id) selectedTrack {
	%orig;
	NSLog(@"-(id) selectedTrack");
}

-(void) setSelectedTrack:(id) {
	%orig;
	NSLog(@"-(void) setSelectedTrack:(id)");
}

-(void) acknowledgeTutorialPrompt {
	%orig;
	NSLog(@"-(void) acknowledgeTutorialPrompt");
}

-(void) showDeliveryTypeActionSheet {
	%orig;
	NSLog(@"-(void) showDeliveryTypeActionSheet");
}

-(void) setSearchContainer:(id) {
	%orig;
	NSLog(@"-(void) setSearchContainer:(id)");
}

-(void) setSearchContainerTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSearchContainerTopConstraint:(id)");
}

-(void) setTrackStoryPrompt:(id) {
	%orig;
	NSLog(@"-(void) setTrackStoryPrompt:(id)");
}

-(void) setArtistUid:(id) {
	%orig;
	NSLog(@"-(void) setArtistUid:(id)");
}

-(id) artistUid {
	%orig;
	NSLog(@"-(id) artistUid");
}

-(id) selectedIndexPath {
	%orig;
	NSLog(@"-(id) selectedIndexPath");
}

-(void) setSelectedIndexPath:(id) {
	%orig;
	NSLog(@"-(void) setSelectedIndexPath:(id)");
}

-(id) titleForSection:(long long) {
	%orig;
	NSLog(@"-(id) titleForSection:(long long)");
}

-(void) setupView {
	%orig;
	NSLog(@"-(void) setupView");
}

-(void) showLoadingView {
	%orig;
	NSLog(@"-(void) showLoadingView");
}

-(id) dataSourceForSection:(long long) {
	%orig;
	NSLog(@"-(id) dataSourceForSection:(long long)");
}

-(void) hideLoadingView {
	%orig;
	NSLog(@"-(void) hideLoadingView");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PMAlarmRemindersController

-(void) setupParallaxEffect {
	%orig;
	NSLog(@"-(void) setupParallaxEffect");
}

-(void) dismissButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) dismissButtonPressed:(id)");
}

-(void) setIsMissedReminder:(bool) {
	%orig;
	NSLog(@"-(void) setIsMissedReminder:(bool)");
}

-(id) step1ImageView {
	%orig;
	NSLog(@"-(id) step1ImageView");
}

-(void) runStep1Animation {
	%orig;
	NSLog(@"-(void) runStep1Animation");
}

-(bool) isMissedReminder {
	%orig;
	NSLog(@"-(bool) isMissedReminder");
}

-(id) contentViewContainer {
	%orig;
	NSLog(@"-(id) contentViewContainer");
}

-(id) messageHeadline {
	%orig;
	NSLog(@"-(id) messageHeadline");
}

-(void) setStep1ImageView:(id) {
	%orig;
	NSLog(@"-(void) setStep1ImageView:(id)");
}

-(void) setContentViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setContentViewContainer:(id)");
}

-(void) setMessageHeadline:(id) {
	%orig;
	NSLog(@"-(void) setMessageHeadline:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(void) setDismissButton:(id) {
	%orig;
	NSLog(@"-(void) setDismissButton:(id)");
}

-(id) dismissButton {
	%orig;
	NSLog(@"-(id) dismissButton");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMSettingsDeviceActivateViewController

-(void) setUpConstraintsWithViews:(id) {
	%orig;
	NSLog(@"-(void) setUpConstraintsWithViews:(id)");
}

-(id) activationCode {
	%orig;
	NSLog(@"-(id) activationCode");
}

-(id) activateButton {
	%orig;
	NSLog(@"-(id) activateButton");
}

-(id) horizontalVisualFormatStringWithMargin:(long long) withViewString:(id) {
	%orig;
	NSLog(@"-(id) horizontalVisualFormatStringWithMargin:(long long) withViewString:(id)");
}

-(void) displayAlertWithTitle:(id) andMessage:(id) {
	%orig;
	NSLog(@"-(void) displayAlertWithTitle:(id) andMessage:(id)");
}

-(void) activateButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) activateButtonPressed:(id)");
}

-(void) onActivationCodeEdit:(id) {
	%orig;
	NSLog(@"-(void) onActivationCodeEdit:(id)");
}

-(void) setActivationCode:(id) {
	%orig;
	NSLog(@"-(void) setActivationCode:(id)");
}

-(void) setActivateButton:(id) {
	%orig;
	NSLog(@"-(void) setActivateButton:(id)");
}

-(id) textInputTopConstraint {
	%orig;
	NSLog(@"-(id) textInputTopConstraint");
}

-(void) setTextInputTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTextInputTopConstraint:(id)");
}

-(id) textInputLeadingConstraint {
	%orig;
	NSLog(@"-(id) textInputLeadingConstraint");
}

-(void) setTextInputLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTextInputLeadingConstraint:(id)");
}

-(id) promptLabel {
	%orig;
	NSLog(@"-(id) promptLabel");
}

-(void) setPromptLabel:(id) {
	%orig;
	NSLog(@"-(void) setPromptLabel:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) didReceiveMemoryWarning {
	%orig;
	NSLog(@"-(void) didReceiveMemoryWarning");
}

%end

%hook PMStoreKitViewController

+(id) iTunesAppIdFromURL:(id) {
	%orig;
	NSLog(@"+(id) iTunesAppIdFromURL:(id)");
}

+(bool) isAppStoreAppURL:(id) {
	%orig;
	NSLog(@"+(bool) isAppStoreAppURL:(id)");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(bool) showStoreViewForProductURL:(id) {
	%orig;
	NSLog(@"-(bool) showStoreViewForProductURL:(id)");
}

-(bool) showNonModalStoreViewForPandoraApp {
	%orig;
	NSLog(@"-(bool) showNonModalStoreViewForPandoraApp");
}

-(void) setStoreViewController:(id) {
	%orig;
	NSLog(@"-(void) setStoreViewController:(id)");
}

-(id) storeViewController {
	%orig;
	NSLog(@"-(id) storeViewController");
}

-(bool) storeShown {
	%orig;
	NSLog(@"-(bool) storeShown");
}

-(void) setStoreShown:(bool) {
	%orig;
	NSLog(@"-(void) setStoreShown:(bool)");
}

-(void) initStoreViewController {
	%orig;
	NSLog(@"-(void) initStoreViewController");
}

-(void) dismissStoreViewController {
	%orig;
	NSLog(@"-(void) dismissStoreViewController");
}

-(bool) showModalStoreViewForPandoraApp {
	%orig;
	NSLog(@"-(bool) showModalStoreViewForPandoraApp");
}

-(void) productViewControllerDidFinish:(id) {
	%orig;
	NSLog(@"-(void) productViewControllerDidFinish:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMStationThumbHistoryViewController

+(id) findDeletedTrackByCell:(id) inTrackList:(id) {
	%orig;
	NSLog(@"+(id) findDeletedTrackByCell:(id) inTrackList:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) backButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) backButtonTapped:(id)");
}

-(id) snapshotOfstationPersonalizationMeterThumbCountView {
	%orig;
	NSLog(@"-(id) snapshotOfstationPersonalizationMeterThumbCountView");
}

-(void) updateBottomViewHiddenStatus {
	%orig;
	NSLog(@"-(void) updateBottomViewHiddenStatus");
}

-(id) headerTitleBySection:(long long) {
	%orig;
	NSLog(@"-(id) headerTitleBySection:(long long)");
}

-(void) didDeleteImageBasedTableViewCell:(id) {
	%orig;
	NSLog(@"-(void) didDeleteImageBasedTableViewCell:(id)");
}

-(void) removeSeedSelectionHighlight {
	%orig;
	NSLog(@"-(void) removeSeedSelectionHighlight");
}

-(void) popCurrentControllerAnimated {
	%orig;
	NSLog(@"-(void) popCurrentControllerAnimated");
}

-(void) setupObserver {
	%orig;
	NSLog(@"-(void) setupObserver");
}

-(void) setupPersonalizationMeterContainerView {
	%orig;
	NSLog(@"-(void) setupPersonalizationMeterContainerView");
}

-(id) personalizationMeterContainerView {
	%orig;
	NSLog(@"-(id) personalizationMeterContainerView");
}

-(void) meterThumbDownButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) meterThumbDownButtonTapped:(id)");
}

-(void) meterThumbUpButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) meterThumbUpButtonTapped:(id)");
}

-(double) offsetToNavigationBarBottom {
	%orig;
	NSLog(@"-(double) offsetToNavigationBarBottom");
}

-(void) setStationPersonalizationDataProviderImp:(id) {
	%orig;
	NSLog(@"-(void) setStationPersonalizationDataProviderImp:(id)");
}

-(void) setScrollToThumbDownSectionWhenPush:(bool) {
	%orig;
	NSLog(@"-(void) setScrollToThumbDownSectionWhenPush:(bool)");
}

-(double) contentOffsetToMeterButtom {
	%orig;
	NSLog(@"-(double) contentOffsetToMeterButtom");
}

-(void) setPersonalizationMeterContainerView:(id) {
	%orig;
	NSLog(@"-(void) setPersonalizationMeterContainerView:(id)");
}

-(void) scrollToThumbDownSectionIfCapable {
	%orig;
	NSLog(@"-(void) scrollToThumbDownSectionIfCapable");
}

-(void) setupStationThumbHistoryTableView {
	%orig;
	NSLog(@"-(void) setupStationThumbHistoryTableView");
}

-(void) retrieveData {
	%orig;
	NSLog(@"-(void) retrieveData");
}

-(void) updateTableFooterView {
	%orig;
	NSLog(@"-(void) updateTableFooterView");
}

-(bool) scrollToThumbDownSectionWhenPush {
	%orig;
	NSLog(@"-(bool) scrollToThumbDownSectionWhenPush");
}

-(bool) doneInitialScrolling {
	%orig;
	NSLog(@"-(bool) doneInitialScrolling");
}

-(void) scrollToThumbDownSection {
	%orig;
	NSLog(@"-(void) scrollToThumbDownSection");
}

-(id) stationThumbHistoryTableView {
	%orig;
	NSLog(@"-(id) stationThumbHistoryTableView");
}

-(void) updateThumbCounts {
	%orig;
	NSLog(@"-(void) updateThumbCounts");
}

-(id) stationPersonalizationMeterThumbCountView {
	%orig;
	NSLog(@"-(id) stationPersonalizationMeterThumbCountView");
}

-(void) didDeleteTrackFromThumbUpHistory:(id) {
	%orig;
	NSLog(@"-(void) didDeleteTrackFromThumbUpHistory:(id)");
}

-(void) didDeleteTrackFromThumbDownHistory:(id) {
	%orig;
	NSLog(@"-(void) didDeleteTrackFromThumbDownHistory:(id)");
}

-(void) didReloadThumbHistory:(id) {
	%orig;
	NSLog(@"-(void) didReloadThumbHistory:(id)");
}

-(id) stationPersonalizationDataProviderImp {
	%orig;
	NSLog(@"-(id) stationPersonalizationDataProviderImp");
}

-(id) dequeTrackCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) dequeTrackCell:(id) forRowAtIndexPath:(id)");
}

-(id) dequeEmptySectionCell:(id) {
	%orig;
	NSLog(@"-(id) dequeEmptySectionCell:(id)");
}

-(void) updateEmptySectionCell:(id) {
	%orig;
	NSLog(@"-(void) updateEmptySectionCell:(id)");
}

-(void) didSelectCell:(id) {
	%orig;
	NSLog(@"-(void) didSelectCell:(id)");
}

-(void) updateCell:(id) withIndexPath:(id) {
	%orig;
	NSLog(@"-(void) updateCell:(id) withIndexPath:(id)");
}

-(void) scrollToThumbUpSection {
	%orig;
	NSLog(@"-(void) scrollToThumbUpSection");
}

-(void) navigateToTrackDetailViewByThumbTrack:(id) {
	%orig;
	NSLog(@"-(void) navigateToTrackDetailViewByThumbTrack:(id)");
}

-(void) setDoneInitialScrolling:(bool) {
	%orig;
	NSLog(@"-(void) setDoneInitialScrolling:(bool)");
}

-(void) handleDeleteTrackNotification:(id) forTableSection:(unsigned long long) {
	%orig;
	NSLog(@"-(void) handleDeleteTrackNotification:(id) forTableSection:(unsigned long long)");
}

-(void) reloadOrDeleteCellAtIndex:(unsigned long long) inSection:(unsigned long long) {
	%orig;
	NSLog(@"-(void) reloadOrDeleteCellAtIndex:(unsigned long long) inSection:(unsigned long long)");
}

-(id) thumbUpCircleButton {
	%orig;
	NSLog(@"-(id) thumbUpCircleButton");
}

-(id) thumbDownCircleButton {
	%orig;
	NSLog(@"-(id) thumbDownCircleButton");
}

-(void) setStationPersonalizationMeterThumbCountView:(id) {
	%orig;
	NSLog(@"-(void) setStationPersonalizationMeterThumbCountView:(id)");
}

-(void) setThumbUpCircleButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbUpCircleButton:(id)");
}

-(void) setThumbDownCircleButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownCircleButton:(id)");
}

-(void) setStationThumbHistoryTableView:(id) {
	%orig;
	NSLog(@"-(void) setStationThumbHistoryTableView:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) updateTitle {
	%orig;
	NSLog(@"-(void) updateTitle");
}

-(bool) inTransition {
	%orig;
	NSLog(@"-(bool) inTransition");
}

-(void) setInTransition:(bool) {
	%orig;
	NSLog(@"-(void) setInTransition:(bool)");
}

-(void) setViewAppeared:(bool) {
	%orig;
	NSLog(@"-(void) setViewAppeared:(bool)");
}

-(bool) viewAppeared {
	%orig;
	NSLog(@"-(bool) viewAppeared");
}

-(void) updateNavigationBar {
	%orig;
	NSLog(@"-(void) updateNavigationBar");
}

-(long long) currentStatus {
	%orig;
	NSLog(@"-(long long) currentStatus");
}

-(void) removeObserver {
	%orig;
	NSLog(@"-(void) removeObserver");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) traitCollectionDidChange:(id) {
	%orig;
	NSLog(@"-(void) traitCollectionDidChange:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMAllYourArtistsController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) artistsTableView {
	%orig;
	NSLog(@"-(id) artistsTableView");
}

-(void) setArtistsViewModel:(id) {
	%orig;
	NSLog(@"-(void) setArtistsViewModel:(id)");
}

-(id) artistsViewModel {
	%orig;
	NSLog(@"-(id) artistsViewModel");
}

-(void) setArtistsTableView:(id) {
	%orig;
	NSLog(@"-(void) setArtistsTableView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMPhoneTopViewController

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) showBottomView {
	%orig;
	NSLog(@"-(void) showBottomView");
}

-(void) hideBottomView {
	%orig;
	NSLog(@"-(void) hideBottomView");
}

-(void) setSideViewController:(id) {
	%orig;
	NSLog(@"-(void) setSideViewController:(id)");
}

-(void) setBottomViewController:(id) {
	%orig;
	NSLog(@"-(void) setBottomViewController:(id)");
}

-(void) setTabItemsViewController:(id) {
	%orig;
	NSLog(@"-(void) setTabItemsViewController:(id)");
}

-(bool) isDrawerHidden {
	%orig;
	NSLog(@"-(bool) isDrawerHidden");
}

-(bool) hideDrawerWithAnimations:(id) onComplete:(?) {
	%orig;
	NSLog(@"-(bool) hideDrawerWithAnimations:(id) onComplete:(?)");
}

-(id) centerViewController {
	%orig;
	NSLog(@"-(id) centerViewController");
}

-(void) setCenterViewController:(id) {
	%orig;
	NSLog(@"-(void) setCenterViewController:(id)");
}

-(void) expandWazeBannerSpace {
	%orig;
	NSLog(@"-(void) expandWazeBannerSpace");
}

-(void) collapseWazeBannerSpace {
	%orig;
	NSLog(@"-(void) collapseWazeBannerSpace");
}

-(void) displayWazeBanner:(id) inNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) displayWazeBanner:(id) inNowPlaying:(bool)");
}

-(void) menuButtonWasTapped:(id) {
	%orig;
	NSLog(@"-(void) menuButtonWasTapped:(id)");
}

-(void) menuButtonReceivedPanGesture:(id) {
	%orig;
	NSLog(@"-(void) menuButtonReceivedPanGesture:(id)");
}

-(void) setDrawerWidth:(double) {
	%orig;
	NSLog(@"-(void) setDrawerWidth:(double)");
}

-(double) drawerWidth {
	%orig;
	NSLog(@"-(double) drawerWidth");
}

-(void) setIsDrawerHidden:(bool) {
	%orig;
	NSLog(@"-(void) setIsDrawerHidden:(bool)");
}

-(void) setIsDrawerAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setIsDrawerAnimating:(bool)");
}

-(void) setDisableDrawerGestures:(bool) {
	%orig;
	NSLog(@"-(void) setDisableDrawerGestures:(bool)");
}

-(id) centerViewContainer {
	%orig;
	NSLog(@"-(id) centerViewContainer");
}

-(void) addLeftSideShadowToView:(id) {
	%orig;
	NSLog(@"-(void) addLeftSideShadowToView:(id)");
}

-(void) addNewChildController:(id) {
	%orig;
	NSLog(@"-(void) addNewChildController:(id)");
}

-(bool) isBottomViewHidden {
	%orig;
	NSLog(@"-(bool) isBottomViewHidden");
}

-(void) updateCenterViewFramesWithBottomViewHidden:(bool) {
	%orig;
	NSLog(@"-(void) updateCenterViewFramesWithBottomViewHidden:(bool)");
}

-(void) addOpenDrawerGestures {
	%orig;
	NSLog(@"-(void) addOpenDrawerGestures");
}

-(bool) isBottomViewHidden:(id) {
	%orig;
	NSLog(@"-(bool) isBottomViewHidden:(id)");
}

-(void) addBottomViewBottomAnchor {
	%orig;
	NSLog(@"-(void) addBottomViewBottomAnchor");
}

-(void) addTabItemsViewConstraints:(double) {
	%orig;
	NSLog(@"-(void) addTabItemsViewConstraints:(double)");
}

-(id) tabItemsViewController {
	%orig;
	NSLog(@"-(id) tabItemsViewController");
}

-(bool) isSideMenuViewSetup {
	%orig;
	NSLog(@"-(bool) isSideMenuViewSetup");
}

-(void) setIsSideMenuViewSetup:(bool) {
	%orig;
	NSLog(@"-(void) setIsSideMenuViewSetup:(bool)");
}

-(void) removeOpenDrawerGestures {
	%orig;
	NSLog(@"-(void) removeOpenDrawerGestures");
}

-(void) updateCenterViewFramesWithBottomViewHidden:(bool) andWazeContainerHidden:(bool) {
	%orig;
	NSLog(@"-(void) updateCenterViewFramesWithBottomViewHidden:(bool) andWazeContainerHidden:(bool)");
}

-(bool) shouldHideTabItemsAndUpdateLayout {
	%orig;
	NSLog(@"-(bool) shouldHideTabItemsAndUpdateLayout");
}

-(id) tabItemsHeightConstraint {
	%orig;
	NSLog(@"-(id) tabItemsHeightConstraint");
}

-(bool) viewReceivedPanGesture:(id) {
	%orig;
	NSLog(@"-(bool) viewReceivedPanGesture:(id)");
}

-(void) setScreenEdgePanGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setScreenEdgePanGestureRecognizer:(id)");
}

-(id) centerViewPanRecognizer {
	%orig;
	NSLog(@"-(id) centerViewPanRecognizer");
}

-(void) setCenterViewPanRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setCenterViewPanRecognizer:(id)");
}

-(id) centerViewTapRecognizer {
	%orig;
	NSLog(@"-(id) centerViewTapRecognizer");
}

-(bool) viewReceivedTapGesture:(id) {
	%orig;
	NSLog(@"-(bool) viewReceivedTapGesture:(id)");
}

-(void) setCenterViewTapRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setCenterViewTapRecognizer:(id)");
}

-(bool) showDrawerWithAnimations:(id) onComplete:(?) {
	%orig;
	NSLog(@"-(bool) showDrawerWithAnimations:(id) onComplete:(?)");
}

-(bool) showDrawerWithAnimationDuration:(double) withAnimations:(id) onComplete:(?) {
	%orig;
	NSLog(@"-(bool) showDrawerWithAnimationDuration:(double) withAnimations:(id) onComplete:(?)");
}

-(bool) isDrawerAnimating {
	%orig;
	NSLog(@"-(bool) isDrawerAnimating");
}

-(bool) canShowDrawer {
	%orig;
	NSLog(@"-(bool) canShowDrawer");
}

-(id) addSideViewController {
	%orig;
	NSLog(@"-(id) addSideViewController");
}

-(id) sideViewController {
	%orig;
	NSLog(@"-(id) sideViewController");
}

-(void) addCloseDrawerGestures {
	%orig;
	NSLog(@"-(void) addCloseDrawerGestures");
}

-(bool) hideDrawerWithAnimationDuration:(double) withAnimations:(id) onComplete:(?) {
	%orig;
	NSLog(@"-(bool) hideDrawerWithAnimationDuration:(double) withAnimations:(id) onComplete:(?)");
}

-(void) removeCloseDrawerGestures {
	%orig;
	NSLog(@"-(void) removeCloseDrawerGestures");
}

-(void) removeSideViewController {
	%orig;
	NSLog(@"-(void) removeSideViewController");
}

-(bool) disableDrawerGestures {
	%orig;
	NSLog(@"-(bool) disableDrawerGestures");
}

-(void) setInitialCenterViewContainerX:(double) {
	%orig;
	NSLog(@"-(void) setInitialCenterViewContainerX:(double)");
}

-(double) initialCenterViewContainerX {
	%orig;
	NSLog(@"-(double) initialCenterViewContainerX");
}

-(void) finishDrawerAnimationWithVelocityX:(double) {
	%orig;
	NSLog(@"-(void) finishDrawerAnimationWithVelocityX:(double)");
}

-(void) expandWazeNavigationContainerSpace:(bool) {
	%orig;
	NSLog(@"-(void) expandWazeNavigationContainerSpace:(bool)");
}

-(void) collapseWazeNavigationContainerSpace:(bool) {
	%orig;
	NSLog(@"-(void) collapseWazeNavigationContainerSpace:(bool)");
}

-(void) updateBottomNavigationVisibility {
	%orig;
	NSLog(@"-(void) updateBottomNavigationVisibility");
}

-(void) setCenterViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setCenterViewContainer:(id)");
}

-(void) setTabItemsHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTabItemsHeightConstraint:(id)");
}

-(void) removeOldChildController:(id) {
	%orig;
	NSLog(@"-(void) removeOldChildController:(id)");
}

-(id) errorView {
	%orig;
	NSLog(@"-(id) errorView");
}

-(void) setErrorView:(id) {
	%orig;
	NSLog(@"-(void) setErrorView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) gestureRecognizer:(id) shouldBeRequiredToFailByGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldBeRequiredToFailByGestureRecognizer:(id)");
}

-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(id) childViewControllerForStatusBarStyle {
	%orig;
	NSLog(@"-(id) childViewControllerForStatusBarStyle");
}

-(id) childViewControllerForHomeIndicatorAutoHidden {
	%orig;
	NSLog(@"-(id) childViewControllerForHomeIndicatorAutoHidden");
}

-(id) bottomViewController {
	%orig;
	NSLog(@"-(id) bottomViewController");
}

-(id) screenEdgePanGestureRecognizer {
	%orig;
	NSLog(@"-(id) screenEdgePanGestureRecognizer");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) didReceiveMemoryWarning {
	%orig;
	NSLog(@"-(void) didReceiveMemoryWarning");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

%end

%hook PMCCStationReplayViewController

+(void) presentModalCustomContentStationViewControllerWithType:(long long) station:(id) track:(id) rootViewController:(id) {
	%orig;
	NSLog(@"+(void) presentModalCustomContentStationViewControllerWithType:(long long) station:(id) track:(id) rootViewController:(id)");
}

+(void) presentAlertViewWithType:(long long) station:(id) track:(id) {
	%orig;
	NSLog(@"+(void) presentAlertViewWithType:(long long) station:(id) track:(id)");
}

+(void) presentModalWithParams:(id) {
	%orig;
	NSLog(@"+(void) presentModalWithParams:(id)");
}

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(void) setTrackLabel:(id) {
	%orig;
	NSLog(@"-(void) setTrackLabel:(id)");
}

-(id) artistLabel {
	%orig;
	NSLog(@"-(id) artistLabel");
}

-(id) replayLabel {
	%orig;
	NSLog(@"-(id) replayLabel");
}

-(id) replayActionButtonLabel {
	%orig;
	NSLog(@"-(id) replayActionButtonLabel");
}

-(id) expiredLabel {
	%orig;
	NSLog(@"-(id) expiredLabel");
}

-(id) expiredActionButtonLabel {
	%orig;
	NSLog(@"-(id) expiredActionButtonLabel");
}

-(id) replayContainerView {
	%orig;
	NSLog(@"-(id) replayContainerView");
}

-(id) albumLabel {
	%orig;
	NSLog(@"-(id) albumLabel");
}

-(void) setArtistLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistLabel:(id)");
}

-(void) setAlbumLabel:(id) {
	%orig;
	NSLog(@"-(void) setAlbumLabel:(id)");
}

-(void) setReplayLabel:(id) {
	%orig;
	NSLog(@"-(void) setReplayLabel:(id)");
}

-(void) setExpiredLabel:(id) {
	%orig;
	NSLog(@"-(void) setExpiredLabel:(id)");
}

-(void) setReplayActionButtonLabel:(id) {
	%orig;
	NSLog(@"-(void) setReplayActionButtonLabel:(id)");
}

-(void) setExpiredActionButtonLabel:(id) {
	%orig;
	NSLog(@"-(void) setExpiredActionButtonLabel:(id)");
}

-(void) setReplayContainerView:(id) {
	%orig;
	NSLog(@"-(void) setReplayContainerView:(id)");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) radioShowingAccessoryConnectionDidChange {
	%orig;
	NSLog(@"-(void) radioShowingAccessoryConnectionDidChange");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) setImageSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setImageSize:(CGSize)");
}

-(id) actionButton {
	%orig;
	NSLog(@"-(id) actionButton");
}

-(void) setActionButton:(id) {
	%orig;
	NSLog(@"-(void) setActionButton:(id)");
}

-(void) setTopViewController:(id) {
	%orig;
	NSLog(@"-(void) setTopViewController:(id)");
}

-(void) setViewHasAppeared:(bool) {
	%orig;
	NSLog(@"-(void) setViewHasAppeared:(bool)");
}

-(bool) viewHasAppeared {
	%orig;
	NSLog(@"-(bool) viewHasAppeared");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) navigationBar {
	%orig;
	NSLog(@"-(id) navigationBar");
}

-(void) setNavigationBar:(id) {
	%orig;
	NSLog(@"-(void) setNavigationBar:(id)");
}

-(CGSize) imageSize {
	%orig;
	NSLog(@"-(CGSize) imageSize");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(void) setCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelButton:(id)");
}

-(id) cancelButton {
	%orig;
	NSLog(@"-(id) cancelButton");
}

-(id) topViewController {
	%orig;
	NSLog(@"-(id) topViewController");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(id) trackLabel {
	%orig;
	NSLog(@"-(id) trackLabel");
}

-(void) dismissViewController {
	%orig;
	NSLog(@"-(void) dismissViewController");
}

-(void) buttonPressed:(id) {
	%orig;
	NSLog(@"-(void) buttonPressed:(id)");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook PMShareController

+(id) showShareControllerForTrack:(id) station:(id) requester:(id) presenterStyle:(long long) didDismissBlock:(id) {
	%orig;
	NSLog(@"+(id) showShareControllerForTrack:(id) station:(id) requester:(id) presenterStyle:(long long) didDismissBlock:(id)");
}

+(id) showShareControllerForTrack:(id) station:(id) requester:(id) didDismissBlock:(id) {
	%orig;
	NSLog(@"+(id) showShareControllerForTrack:(id) station:(id) requester:(id) didDismissBlock:(id)");
}

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) stationLabel {
	%orig;
	NSLog(@"-(id) stationLabel");
}

-(void) setStationLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationLabel:(id)");
}

-(double) textViewHeightForAttributedText:(id) andWidth:(double) {
	%orig;
	NSLog(@"-(double) textViewHeightForAttributedText:(id) andWidth:(double)");
}

-(id) initWithTrack:(id) station:(id) requester:(id) didDismissBlock:(id) {
	%orig;
	NSLog(@"-(id) initWithTrack:(id) station:(id) requester:(id) didDismissBlock:(id)");
}

-(void) authorizeWillStart:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeWillStart:(long long) context:(id)");
}

-(void) authorizeDidEnd:(long long) success:(bool) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeDidEnd:(long long) success:(bool) context:(id)");
}

-(void) shortURL:(id) context:(id) {
	%orig;
	NSLog(@"-(void) shortURL:(id) context:(id)");
}

-(id) artistPreposition {
	%orig;
	NSLog(@"-(id) artistPreposition");
}

-(void) tokenizedRecipientController:(id) recipientViewFrameUpdated:(CGRect) {
	%orig;
	NSLog(@"-(void) tokenizedRecipientController:(id) recipientViewFrameUpdated:(CGRect)");
}

-(void) tokenizedRecipientController:(id) didHideAutoComplete:(id) {
	%orig;
	NSLog(@"-(void) tokenizedRecipientController:(id) didHideAutoComplete:(id)");
}

-(void) tokenizedRecipientController:(id) willPresentAutoComplete:(id) {
	%orig;
	NSLog(@"-(void) tokenizedRecipientController:(id) willPresentAutoComplete:(id)");
}

-(void) tokenizedRecipientController:(id) didPresentAutoComplete:(id) {
	%orig;
	NSLog(@"-(void) tokenizedRecipientController:(id) didPresentAutoComplete:(id)");
}

-(id) addressBookDataSource {
	%orig;
	NSLog(@"-(id) addressBookDataSource");
}

-(void) setAddressBookDataSource:(id) {
	%orig;
	NSLog(@"-(void) setAddressBookDataSource:(id)");
}

-(id) autocompleteTableView {
	%orig;
	NSLog(@"-(id) autocompleteTableView");
}

-(void) setAutocompleteTableView:(id) {
	%orig;
	NSLog(@"-(void) setAutocompleteTableView:(id)");
}

-(void) setFacebookShareEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setFacebookShareEnabled:(bool)");
}

-(void) setTwitterShareEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setTwitterShareEnabled:(bool)");
}

-(void) setEmailInsteadEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEmailInsteadEnabled:(bool)");
}

-(void) setDidDismissControllerBlock:(id) {
	%orig;
	NSLog(@"-(void) setDidDismissControllerBlock:(id)");
}

-(void) dismissWithAdRefresh {
	%orig;
	NSLog(@"-(void) dismissWithAdRefresh");
}

-(void) setEmptyAlbumArtImage:(id) {
	%orig;
	NSLog(@"-(void) setEmptyAlbumArtImage:(id)");
}

-(id) stationTrackSegmentControl {
	%orig;
	NSLog(@"-(id) stationTrackSegmentControl");
}

-(void) setStationTrackSelectionHidden {
	%orig;
	NSLog(@"-(void) setStationTrackSelectionHidden");
}

-(void) setSeedsForStation:(id) {
	%orig;
	NSLog(@"-(void) setSeedsForStation:(id)");
}

-(void) parseStationSeeds:(id) {
	%orig;
	NSLog(@"-(void) parseStationSeeds:(id)");
}

-(void) getSeedSuggestionWithStationId:(id) {
	%orig;
	NSLog(@"-(void) getSeedSuggestionWithStationId:(id)");
}

-(void) stationRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) stationRequest:(id) finishedWithResult:(id)");
}

-(bool) facebookShareEnabled {
	%orig;
	NSLog(@"-(bool) facebookShareEnabled");
}

-(id) toggleFacebookButton {
	%orig;
	NSLog(@"-(id) toggleFacebookButton");
}

-(bool) twitterShareEnabled {
	%orig;
	NSLog(@"-(bool) twitterShareEnabled");
}

-(id) toggleTwitterButton {
	%orig;
	NSLog(@"-(id) toggleTwitterButton");
}

-(void) resizeMessageTextView {
	%orig;
	NSLog(@"-(void) resizeMessageTextView");
}

-(void) setupDividers {
	%orig;
	NSLog(@"-(void) setupDividers");
}

-(void) setPostButton:(id) {
	%orig;
	NSLog(@"-(void) setPostButton:(id)");
}

-(id) stationTrackInfoContainerView {
	%orig;
	NSLog(@"-(id) stationTrackInfoContainerView");
}

-(id) tokenizedRecipientController {
	%orig;
	NSLog(@"-(id) tokenizedRecipientController");
}

-(id) alsoShareOnLabel {
	%orig;
	NSLog(@"-(id) alsoShareOnLabel");
}

-(id) emailInsteadLabel {
	%orig;
	NSLog(@"-(id) emailInsteadLabel");
}

-(id) emailImageView {
	%orig;
	NSLog(@"-(id) emailImageView");
}

-(id) postToProfileInsteadLabel {
	%orig;
	NSLog(@"-(id) postToProfileInsteadLabel");
}

-(id) postToProfileInsteadImage {
	%orig;
	NSLog(@"-(id) postToProfileInsteadImage");
}

-(id) bottomContainerView {
	%orig;
	NSLog(@"-(id) bottomContainerView");
}

-(id) shareOptionsContainerView {
	%orig;
	NSLog(@"-(id) shareOptionsContainerView");
}

-(void) setupStationTrackSegmentControl {
	%orig;
	NSLog(@"-(void) setupStationTrackSegmentControl");
}

-(id) emailInsteadButton {
	%orig;
	NSLog(@"-(id) emailInsteadButton");
}

-(id) shareInsteadButton {
	%orig;
	NSLog(@"-(id) shareInsteadButton");
}

-(id) middleContainerView {
	%orig;
	NSLog(@"-(id) middleContainerView");
}

-(void) setRecipientViewHidden:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setRecipientViewHidden:(bool) animated:(bool)");
}

-(void) keyboardStateChanged:(id) {
	%orig;
	NSLog(@"-(void) keyboardStateChanged:(id)");
}

-(void) updateMessageProperties {
	%orig;
	NSLog(@"-(void) updateMessageProperties");
}

-(id) middleContainerViewTopLine {
	%orig;
	NSLog(@"-(id) middleContainerViewTopLine");
}

-(void) setMiddleContainerViewTopLine:(id) {
	%orig;
	NSLog(@"-(void) setMiddleContainerViewTopLine:(id)");
}

-(id) bottomContainerTopLine {
	%orig;
	NSLog(@"-(id) bottomContainerTopLine");
}

-(void) setBottomContainerTopLine:(id) {
	%orig;
	NSLog(@"-(void) setBottomContainerTopLine:(id)");
}

-(id) shareOptionsContainerTopLine {
	%orig;
	NSLog(@"-(id) shareOptionsContainerTopLine");
}

-(void) setShareOptionsContainerTopLine:(id) {
	%orig;
	NSLog(@"-(void) setShareOptionsContainerTopLine:(id)");
}

-(id) shareOptionsContainerBottomLine {
	%orig;
	NSLog(@"-(id) shareOptionsContainerBottomLine");
}

-(void) setShareOptionsContainerBottomLine:(id) {
	%orig;
	NSLog(@"-(void) setShareOptionsContainerBottomLine:(id)");
}

-(id) socialSelectionViewRightLine {
	%orig;
	NSLog(@"-(id) socialSelectionViewRightLine");
}

-(void) setSocialSelectionViewRightLine:(id) {
	%orig;
	NSLog(@"-(void) setSocialSelectionViewRightLine:(id)");
}

-(id) socialSelectionView {
	%orig;
	NSLog(@"-(id) socialSelectionView");
}

-(id) socialSelectionViewLeftLine {
	%orig;
	NSLog(@"-(id) socialSelectionViewLeftLine");
}

-(unsigned long long) shareObjectType {
	%orig;
	NSLog(@"-(unsigned long long) shareObjectType");
}

-(id) twitterMessageSuffixForShareObjectType:(unsigned long long) {
	%orig;
	NSLog(@"-(id) twitterMessageSuffixForShareObjectType:(unsigned long long)");
}

-(id) stringForDefaultMessage {
	%orig;
	NSLog(@"-(id) stringForDefaultMessage");
}

-(bool) hasAddedTwitterMessageSuffix {
	%orig;
	NSLog(@"-(bool) hasAddedTwitterMessageSuffix");
}

-(void) setHasAddedTwitterMessageSuffix:(bool) {
	%orig;
	NSLog(@"-(void) setHasAddedTwitterMessageSuffix:(bool)");
}

-(void) moveCursorBeforeTwitterMessageSuffix {
	%orig;
	NSLog(@"-(void) moveCursorBeforeTwitterMessageSuffix");
}

-(id) padShadowContainerView {
	%orig;
	NSLog(@"-(id) padShadowContainerView");
}

-(void) setStationTrackSegmentControl:(id) {
	%orig;
	NSLog(@"-(void) setStationTrackSegmentControl:(id)");
}

-(id) stationTrackSelectorContainerView {
	%orig;
	NSLog(@"-(id) stationTrackSelectorContainerView");
}

-(void) postPressed {
	%orig;
	NSLog(@"-(void) postPressed");
}

-(void) toggleTwitterMessageSuffix {
	%orig;
	NSLog(@"-(void) toggleTwitterMessageSuffix");
}

-(void) didTapEmailInsteadButton {
	%orig;
	NSLog(@"-(void) didTapEmailInsteadButton");
}

-(bool) emailInsteadEnabled {
	%orig;
	NSLog(@"-(bool) emailInsteadEnabled");
}

-(id) albumPreposition {
	%orig;
	NSLog(@"-(id) albumPreposition");
}

-(id) censoredTrackSongName {
	%orig;
	NSLog(@"-(id) censoredTrackSongName");
}

-(id) stringForSuggestedMessage {
	%orig;
	NSLog(@"-(id) stringForSuggestedMessage");
}

-(id) prepMessageForTwitter:(id) {
	%orig;
	NSLog(@"-(id) prepMessageForTwitter:(id)");
}

-(id) autocompleteShadeView {
	%orig;
	NSLog(@"-(id) autocompleteShadeView");
}

-(id) messageViewContainer {
	%orig;
	NSLog(@"-(id) messageViewContainer");
}

-(void) updateMessageProperties:(bool) {
	%orig;
	NSLog(@"-(void) updateMessageProperties:(bool)");
}

-(void) setDefaultMessageBody {
	%orig;
	NSLog(@"-(void) setDefaultMessageBody");
}

-(id) didDismissControllerBlock {
	%orig;
	NSLog(@"-(id) didDismissControllerBlock");
}

-(void) updateShareObjectType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) updateShareObjectType:(unsigned long long)");
}

-(void) setCensoredTrackSongName:(id) {
	%orig;
	NSLog(@"-(void) setCensoredTrackSongName:(id)");
}

-(void) updateTwitterMessageSuffixForShareObjectType {
	%orig;
	NSLog(@"-(void) updateTwitterMessageSuffixForShareObjectType");
}

-(void) setStationShortUrl:(id) {
	%orig;
	NSLog(@"-(void) setStationShortUrl:(id)");
}

-(void) setTrackShortUrl:(id) {
	%orig;
	NSLog(@"-(void) setTrackShortUrl:(id)");
}

-(void) segmentedControlDidSelectFirstSegment:(id) {
	%orig;
	NSLog(@"-(void) segmentedControlDidSelectFirstSegment:(id)");
}

-(void) segmentedControlDidSelectSecondSegment:(id) {
	%orig;
	NSLog(@"-(void) segmentedControlDidSelectSecondSegment:(id)");
}

-(void) dismissViaBackgroundPressed:(id) {
	%orig;
	NSLog(@"-(void) dismissViaBackgroundPressed:(id)");
}

-(void) viewTouched:(id) {
	%orig;
	NSLog(@"-(void) viewTouched:(id)");
}

-(void) updateContentPosition:(bool) {
	%orig;
	NSLog(@"-(void) updateContentPosition:(bool)");
}

-(void) setSuggestedMessageBody {
	%orig;
	NSLog(@"-(void) setSuggestedMessageBody");
}

-(void) setTokenizedRecipientController:(id) {
	%orig;
	NSLog(@"-(void) setTokenizedRecipientController:(id)");
}

-(bool) releaseWhenUnloaded {
	%orig;
	NSLog(@"-(bool) releaseWhenUnloaded");
}

-(void) setReleaseWhenUnloaded:(bool) {
	%orig;
	NSLog(@"-(void) setReleaseWhenUnloaded:(bool)");
}

-(id) seedsForStation {
	%orig;
	NSLog(@"-(id) seedsForStation");
}

-(id) stationShortUrl {
	%orig;
	NSLog(@"-(id) stationShortUrl");
}

-(id) trackShortUrl {
	%orig;
	NSLog(@"-(id) trackShortUrl");
}

-(id) emptyAlbumArtImage {
	%orig;
	NSLog(@"-(id) emptyAlbumArtImage");
}

-(id) padContainerView {
	%orig;
	NSLog(@"-(id) padContainerView");
}

-(void) setPadContainerView:(id) {
	%orig;
	NSLog(@"-(void) setPadContainerView:(id)");
}

-(void) setMessageViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setMessageViewContainer:(id)");
}

-(void) setPadShadowContainerView:(id) {
	%orig;
	NSLog(@"-(void) setPadShadowContainerView:(id)");
}

-(void) setStationTrackSelectorContainerView:(id) {
	%orig;
	NSLog(@"-(void) setStationTrackSelectorContainerView:(id)");
}

-(void) setTrackLabel:(id) {
	%orig;
	NSLog(@"-(void) setTrackLabel:(id)");
}

-(void) setStationTrackInfoContainerView:(id) {
	%orig;
	NSLog(@"-(void) setStationTrackInfoContainerView:(id)");
}

-(id) albumArtContainer_iPad {
	%orig;
	NSLog(@"-(id) albumArtContainer_iPad");
}

-(void) setAlbumArtContainer_iPad:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtContainer_iPad:(id)");
}

-(void) setMiddleContainerView:(id) {
	%orig;
	NSLog(@"-(void) setMiddleContainerView:(id)");
}

-(void) setBottomContainerView:(id) {
	%orig;
	NSLog(@"-(void) setBottomContainerView:(id)");
}

-(void) setShareOptionsContainerView:(id) {
	%orig;
	NSLog(@"-(void) setShareOptionsContainerView:(id)");
}

-(void) setSocialSelectionView:(id) {
	%orig;
	NSLog(@"-(void) setSocialSelectionView:(id)");
}

-(void) setToggleFacebookButton:(id) {
	%orig;
	NSLog(@"-(void) setToggleFacebookButton:(id)");
}

-(void) setToggleTwitterButton:(id) {
	%orig;
	NSLog(@"-(void) setToggleTwitterButton:(id)");
}

-(void) setEmailInsteadButton:(id) {
	%orig;
	NSLog(@"-(void) setEmailInsteadButton:(id)");
}

-(void) setShareInsteadButton:(id) {
	%orig;
	NSLog(@"-(void) setShareInsteadButton:(id)");
}

-(void) setEmailImageView:(id) {
	%orig;
	NSLog(@"-(void) setEmailImageView:(id)");
}

-(void) setEmailInsteadLabel:(id) {
	%orig;
	NSLog(@"-(void) setEmailInsteadLabel:(id)");
}

-(void) setPostToProfileInsteadImage:(id) {
	%orig;
	NSLog(@"-(void) setPostToProfileInsteadImage:(id)");
}

-(void) setPostToProfileInsteadLabel:(id) {
	%orig;
	NSLog(@"-(void) setPostToProfileInsteadLabel:(id)");
}

-(void) setAlsoShareOnLabel:(id) {
	%orig;
	NSLog(@"-(void) setAlsoShareOnLabel:(id)");
}

-(void) setSocialSelectionViewLeftLine:(id) {
	%orig;
	NSLog(@"-(void) setSocialSelectionViewLeftLine:(id)");
}

-(void) setHideKeyboardButton:(id) {
	%orig;
	NSLog(@"-(void) setHideKeyboardButton:(id)");
}

-(void) setAutocompleteShadeView:(id) {
	%orig;
	NSLog(@"-(void) setAutocompleteShadeView:(id)");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) subtitleLabel {
	%orig;
	NSLog(@"-(id) subtitleLabel");
}

-(void) setSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleLabel:(id)");
}

-(id) contentNavigationController {
	%orig;
	NSLog(@"-(id) contentNavigationController");
}

-(id) postButton {
	%orig;
	NSLog(@"-(id) postButton");
}

-(void) setContentNavigationController:(id) {
	%orig;
	NSLog(@"-(void) setContentNavigationController:(id)");
}

-(void) setRecipientView:(id) {
	%orig;
	NSLog(@"-(void) setRecipientView:(id)");
}

-(id) recipientView {
	%orig;
	NSLog(@"-(id) recipientView");
}

-(id) characterCountLabel {
	%orig;
	NSLog(@"-(id) characterCountLabel");
}

-(void) setCharacterCountLabel:(id) {
	%orig;
	NSLog(@"-(void) setCharacterCountLabel:(id)");
}

-(id) messageTextView {
	%orig;
	NSLog(@"-(id) messageTextView");
}

-(void) setMessageTextView:(id) {
	%orig;
	NSLog(@"-(void) setMessageTextView:(id)");
}

-(void) setRequester:(id) {
	%orig;
	NSLog(@"-(void) setRequester:(id)");
}

-(id) requester {
	%orig;
	NSLog(@"-(id) requester");
}

-(id) hideKeyboardButton {
	%orig;
	NSLog(@"-(id) hideKeyboardButton");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) sizeToFit {
	%orig;
	NSLog(@"-(void) sizeToFit");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) backgroundView {
	%orig;
	NSLog(@"-(id) backgroundView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) setBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundView:(id)");
}

-(void) setCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelButton:(id)");
}

-(id) cancelButton {
	%orig;
	NSLog(@"-(id) cancelButton");
}

-(void) willRotateToInterfaceOrientation:(long long) duration:(double) {
	%orig;
	NSLog(@"-(void) willRotateToInterfaceOrientation:(long long) duration:(double)");
}

-(void) didRotateFromInterfaceOrientation:(long long) {
	%orig;
	NSLog(@"-(void) didRotateFromInterfaceOrientation:(long long)");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(id) trackLabel {
	%orig;
	NSLog(@"-(id) trackLabel");
}

-(void) buttonPressed:(id) {
	%orig;
	NSLog(@"-(void) buttonPressed:(id)");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

-(void) dismissKeyboard {
	%orig;
	NSLog(@"-(void) dismissKeyboard");
}

-(bool) textViewShouldBeginEditing:(id) {
	%orig;
	NSLog(@"-(bool) textViewShouldBeginEditing:(id)");
}

-(void) textViewDidChange:(id) {
	%orig;
	NSLog(@"-(void) textViewDidChange:(id)");
}

%end

%hook PMStationPickerController

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(void) setSelectedStation:(id) {
	%orig;
	NSLog(@"-(void) setSelectedStation:(id)");
}

-(id) selectedStation {
	%orig;
	NSLog(@"-(id) selectedStation");
}

-(void) switchDataSourceTo:(long long) {
	%orig;
	NSLog(@"-(void) switchDataSourceTo:(long long)");
}

-(void) selectActiveStation {
	%orig;
	NSLog(@"-(void) selectActiveStation");
}

-(id) cellForStationListAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) cellForStationListAtIndexPath:(id)");
}

-(void) stationWasSelected:(id) {
	%orig;
	NSLog(@"-(void) stationWasSelected:(id)");
}

-(void) rebuildStationListAndReloadIfPossible:(bool) {
	%orig;
	NSLog(@"-(void) rebuildStationListAndReloadIfPossible:(bool)");
}

-(void) stationViewCell:(id) didSelectStation:(id) tappedMoreOptionsButton:(bool) {
	%orig;
	NSLog(@"-(void) stationViewCell:(id) didSelectStation:(id) tappedMoreOptionsButton:(bool)");
}

-(void) array:(id) didInsertWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didInsertWithUpdate:(id)");
}

-(void) array:(id) didRemoveWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didRemoveWithUpdate:(id)");
}

-(void) arrayDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) arrayDidRefresh:(id)");
}

-(void) setupController {
	%orig;
	NSLog(@"-(void) setupController");
}

-(void) setupTableView {
	%orig;
	NSLog(@"-(void) setupTableView");
}

-(void) setupNavigationBar {
	%orig;
	NSLog(@"-(void) setupNavigationBar");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PMClockViewController

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(bool) viewTogglerShouldAnimateTransitions:(id) {
	%orig;
	NSLog(@"-(bool) viewTogglerShouldAnimateTransitions:(id)");
}

-(bool) viewToggler:(id) shouldShowView:(id) {
	%orig;
	NSLog(@"-(bool) viewToggler:(id) shouldShowView:(id)");
}

-(void) setTimeFormatter:(id) {
	%orig;
	NSLog(@"-(void) setTimeFormatter:(id)");
}

-(void) check24HourFormat {
	%orig;
	NSLog(@"-(void) check24HourFormat");
}

-(void) setLastCheckedTrack:(id) {
	%orig;
	NSLog(@"-(void) setLastCheckedTrack:(id)");
}

-(void) setStationForLastCheckedTrack:(id) {
	%orig;
	NSLog(@"-(void) setStationForLastCheckedTrack:(id)");
}

-(void) updateNextAlarmTime {
	%orig;
	NSLog(@"-(void) updateNextAlarmTime");
}

-(void) batteryStateDidChange {
	%orig;
	NSLog(@"-(void) batteryStateDidChange");
}

-(id) footerViewToggler {
	%orig;
	NSLog(@"-(id) footerViewToggler");
}

-(void) clearTurnOffAlarmAlertView {
	%orig;
	NSLog(@"-(void) clearTurnOffAlarmAlertView");
}

-(id) sleepDialView {
	%orig;
	NSLog(@"-(id) sleepDialView");
}

-(void) updateBrightnessAnimated:(bool) {
	%orig;
	NSLog(@"-(void) updateBrightnessAnimated:(bool)");
}

-(void) setupParallaxEffect {
	%orig;
	NSLog(@"-(void) setupParallaxEffect");
}

-(void) setCurrentlyDisplayedTrack:(id) {
	%orig;
	NSLog(@"-(void) setCurrentlyDisplayedTrack:(id)");
}

-(void) setupTimeView {
	%orig;
	NSLog(@"-(void) setupTimeView");
}

-(void) setAlertSuppressorVolumeView:(id) {
	%orig;
	NSLog(@"-(void) setAlertSuppressorVolumeView:(id)");
}

-(id) alertSuppressorVolumeView {
	%orig;
	NSLog(@"-(id) alertSuppressorVolumeView");
}

-(id) firingAlarm {
	%orig;
	NSLog(@"-(id) firingAlarm");
}

-(id) trackInfoView {
	%orig;
	NSLog(@"-(id) trackInfoView");
}

-(id) nextAlarmView {
	%orig;
	NSLog(@"-(id) nextAlarmView");
}

-(void) setFooterViewToggler:(id) {
	%orig;
	NSLog(@"-(void) setFooterViewToggler:(id)");
}

-(void) startTimers {
	%orig;
	NSLog(@"-(void) startTimers");
}

-(void) updateNowPlayingInfoAnimated:(bool) {
	%orig;
	NSLog(@"-(void) updateNowPlayingInfoAnimated:(bool)");
}

-(void) toggleAlarmInterfaceAnimated:(bool) {
	%orig;
	NSLog(@"-(void) toggleAlarmInterfaceAnimated:(bool)");
}

-(void) startCoverArtAnimation {
	%orig;
	NSLog(@"-(void) startCoverArtAnimation");
}

-(void) hideBlackRotationScreen {
	%orig;
	NSLog(@"-(void) hideBlackRotationScreen");
}

-(void) setIsIdle:(bool) {
	%orig;
	NSLog(@"-(void) setIsIdle:(bool)");
}

-(void) updateStatusBarDisplay {
	%orig;
	NSLog(@"-(void) updateStatusBarDisplay");
}

-(void) setShow24HourFormat:(bool) {
	%orig;
	NSLog(@"-(void) setShow24HourFormat:(bool)");
}

-(void) restartIdleTimer {
	%orig;
	NSLog(@"-(void) restartIdleTimer");
}

-(id) turnOffAlarmAlertController {
	%orig;
	NSLog(@"-(id) turnOffAlarmAlertController");
}

-(void) dismissAlarm {
	%orig;
	NSLog(@"-(void) dismissAlarm");
}

-(void) setTurnOffAlarmAlertController:(id) {
	%orig;
	NSLog(@"-(void) setTurnOffAlarmAlertController:(id)");
}

-(void) respondToAlarmWithSnooze:(bool) keepPlaying:(bool) {
	%orig;
	NSLog(@"-(void) respondToAlarmWithSnooze:(bool) keepPlaying:(bool)");
}

-(id) lastCheckedTrack {
	%orig;
	NSLog(@"-(id) lastCheckedTrack");
}

-(id) stationForLastCheckedTrack {
	%orig;
	NSLog(@"-(id) stationForLastCheckedTrack");
}

-(id) currentlyDisplayedTrack {
	%orig;
	NSLog(@"-(id) currentlyDisplayedTrack");
}

-(id) trackTitleLabel {
	%orig;
	NSLog(@"-(id) trackTitleLabel");
}

-(id) trackArtistLabel {
	%orig;
	NSLog(@"-(id) trackArtistLabel");
}

-(id) coverArtImageViewWithImage:(id) {
	%orig;
	NSLog(@"-(id) coverArtImageViewWithImage:(id)");
}

-(void) setIsCoverAnimationActive:(bool) {
	%orig;
	NSLog(@"-(void) setIsCoverAnimationActive:(bool)");
}

-(bool) isCoverAnimationActive {
	%orig;
	NSLog(@"-(bool) isCoverAnimationActive");
}

-(id) nextAlarmLabel {
	%orig;
	NSLog(@"-(id) nextAlarmLabel");
}

-(void) setFiringAlarm:(id) {
	%orig;
	NSLog(@"-(void) setFiringAlarm:(id)");
}

-(void) stopDisplayUpdateTimer {
	%orig;
	NSLog(@"-(void) stopDisplayUpdateTimer");
}

-(void) setDisplayUpdateTimer:(id) {
	%orig;
	NSLog(@"-(void) setDisplayUpdateTimer:(id)");
}

-(id) displayUpdateTimer {
	%orig;
	NSLog(@"-(id) displayUpdateTimer");
}

-(bool) show24HourFormat {
	%orig;
	NSLog(@"-(bool) show24HourFormat");
}

-(void) stopIdleTimer {
	%orig;
	NSLog(@"-(void) stopIdleTimer");
}

-(void) idleTimerTimedOut {
	%orig;
	NSLog(@"-(void) idleTimerTimedOut");
}

-(void) restartDisplayUpdateTimer {
	%orig;
	NSLog(@"-(void) restartDisplayUpdateTimer");
}

-(id) snoozeButton {
	%orig;
	NSLog(@"-(id) snoozeButton");
}

-(id) firingAlarmView {
	%orig;
	NSLog(@"-(id) firingAlarmView");
}

-(id) keepListeningButton {
	%orig;
	NSLog(@"-(id) keepListeningButton");
}

-(bool) shouldShowFullBrightness {
	%orig;
	NSLog(@"-(bool) shouldShowFullBrightness");
}

-(id) darkTintView {
	%orig;
	NSLog(@"-(id) darkTintView");
}

-(void) snoozeButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) snoozeButtonPressed:(id)");
}

-(void) showBlackRotationScreen {
	%orig;
	NSLog(@"-(void) showBlackRotationScreen");
}

-(id) blackRotationScreenView {
	%orig;
	NSLog(@"-(id) blackRotationScreenView");
}

-(void) setBlackRotationScreenView:(id) {
	%orig;
	NSLog(@"-(void) setBlackRotationScreenView:(id)");
}

-(void) dismissButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) dismissButtonPressed:(id)");
}

-(void) keepListeningButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) keepListeningButtonPressed:(id)");
}

-(void) stopButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) stopButtonPressed:(id)");
}

-(void) displayResponseOptionsForAlarm:(id) {
	%orig;
	NSLog(@"-(void) displayResponseOptionsForAlarm:(id)");
}

-(void) setDarkTintView:(id) {
	%orig;
	NSLog(@"-(void) setDarkTintView:(id)");
}

-(void) setFiringAlarmView:(id) {
	%orig;
	NSLog(@"-(void) setFiringAlarmView:(id)");
}

-(void) setKeepListeningButton:(id) {
	%orig;
	NSLog(@"-(void) setKeepListeningButton:(id)");
}

-(void) setNextAlarmLabel:(id) {
	%orig;
	NSLog(@"-(void) setNextAlarmLabel:(id)");
}

-(void) setNextAlarmView:(id) {
	%orig;
	NSLog(@"-(void) setNextAlarmView:(id)");
}

-(void) setSleepDialView:(id) {
	%orig;
	NSLog(@"-(void) setSleepDialView:(id)");
}

-(void) setSnoozeButton:(id) {
	%orig;
	NSLog(@"-(void) setSnoozeButton:(id)");
}

-(void) setTrackArtistLabel:(id) {
	%orig;
	NSLog(@"-(void) setTrackArtistLabel:(id)");
}

-(void) setTrackInfoView:(id) {
	%orig;
	NSLog(@"-(void) setTrackInfoView:(id)");
}

-(void) setTrackTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTrackTitleLabel:(id)");
}

-(CGPoint) panLocation {
	%orig;
	NSLog(@"-(CGPoint) panLocation");
}

-(void) setPanLocation:(CGPoint) {
	%orig;
	NSLog(@"-(void) setPanLocation:(CGPoint)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(id) idleTimer {
	%orig;
	NSLog(@"-(id) idleTimer");
}

-(void) setIdleTimer:(id) {
	%orig;
	NSLog(@"-(void) setIdleTimer:(id)");
}

-(void) stopTimers {
	%orig;
	NSLog(@"-(void) stopTimers");
}

-(id) timeFormatter {
	%orig;
	NSLog(@"-(id) timeFormatter");
}

-(void) applicationDidEnterBackground {
	%orig;
	NSLog(@"-(void) applicationDidEnterBackground");
}

-(void) dispose {
	%orig;
	NSLog(@"-(void) dispose");
}

-(void) setStopButton:(id) {
	%orig;
	NSLog(@"-(void) setStopButton:(id)");
}

-(id) stopButton {
	%orig;
	NSLog(@"-(id) stopButton");
}

-(id) nextAlarm {
	%orig;
	NSLog(@"-(id) nextAlarm");
}

-(void) setNextAlarm:(id) {
	%orig;
	NSLog(@"-(void) setNextAlarm:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(void) updateDisplay {
	%orig;
	NSLog(@"-(void) updateDisplay");
}

-(bool) isIdle {
	%orig;
	NSLog(@"-(bool) isIdle");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(bool) canBecomeFirstResponder {
	%orig;
	NSLog(@"-(bool) canBecomeFirstResponder");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(void) willAnimateRotationToInterfaceOrientation:(long long) duration:(double) {
	%orig;
	NSLog(@"-(void) willAnimateRotationToInterfaceOrientation:(long long) duration:(double)");
}

-(void) didRotateFromInterfaceOrientation:(long long) {
	%orig;
	NSLog(@"-(void) didRotateFromInterfaceOrientation:(long long)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) applicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive");
}

-(void) applicationWillResignActive {
	%orig;
	NSLog(@"-(void) applicationWillResignActive");
}

-(void) motionEnded:(long long) withEvent:(id) {
	%orig;
	NSLog(@"-(void) motionEnded:(long long) withEvent:(id)");
}

-(id) timeView {
	%orig;
	NSLog(@"-(id) timeView");
}

-(void) setTimeView:(id) {
	%orig;
	NSLog(@"-(void) setTimeView:(id)");
}

-(id) coverArtImageView {
	%orig;
	NSLog(@"-(id) coverArtImageView");
}

-(void) setCoverArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setCoverArtImageView:(id)");
}

%end

%hook PMPhoneTunerBarController

+(id) takeScreenShotOfView:(id) inRect:(CGRect) {
	%orig;
	NSLog(@"+(id) takeScreenShotOfView:(id) inRect:(CGRect)");
}

-(void) setupKVOController {
	%orig;
	NSLog(@"-(void) setupKVOController");
}

-(id) trackNameLabel {
	%orig;
	NSLog(@"-(id) trackNameLabel");
}

-(void) setupAlbumCover {
	%orig;
	NSLog(@"-(void) setupAlbumCover");
}

-(id) kvoController {
	%orig;
	NSLog(@"-(id) kvoController");
}

-(void) setKvoController:(id) {
	%orig;
	NSLog(@"-(void) setKvoController:(id)");
}

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(void) handleThumbDownDelegateMethod:(id) {
	%orig;
	NSLog(@"-(void) handleThumbDownDelegateMethod:(id)");
}

-(id) nowPlayingPhoneTunerTeachMarks {
	%orig;
	NSLog(@"-(id) nowPlayingPhoneTunerTeachMarks");
}

-(void) handleThumbUpDelegateMethod:(id) {
	%orig;
	NSLog(@"-(void) handleThumbUpDelegateMethod:(id)");
}

-(void) thumbDownPressed:(id) {
	%orig;
	NSLog(@"-(void) thumbDownPressed:(id)");
}

-(void) thumbUpPressed:(id) {
	%orig;
	NSLog(@"-(void) thumbUpPressed:(id)");
}

-(void) replayPressed:(id) {
	%orig;
	NSLog(@"-(void) replayPressed:(id)");
}

-(void) setNowPlayingPhoneTunerTeachMarks:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingPhoneTunerTeachMarks:(id)");
}

-(void) setTrackNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setTrackNameLabel:(id)");
}

-(void) progressViewDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidUpdate:(id)");
}

-(void) progressViewDidStartBuffering:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidStartBuffering:(id)");
}

-(void) progressViewDidFinishBuffering:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidFinishBuffering:(id)");
}

-(id) statsCallTextForView:(id) {
	%orig;
	NSLog(@"-(id) statsCallTextForView:(id)");
}

-(void) setIsPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setIsPlaying:(bool)");
}

-(void) updateLayoutForSizeChange {
	%orig;
	NSLog(@"-(void) updateLayoutForSizeChange");
}

-(id) trackProgressView {
	%orig;
	NSLog(@"-(id) trackProgressView");
}

-(void) setAlbumCoverShown:(bool) withProgressViewCompressed:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setAlbumCoverShown:(bool) withProgressViewCompressed:(bool) animated:(bool)");
}

-(id) thumbsUpButton {
	%orig;
	NSLog(@"-(id) thumbsUpButton");
}

-(id) controlsContainer {
	%orig;
	NSLog(@"-(id) controlsContainer");
}

-(double) miniCoachMarkVerticalOffset {
	%orig;
	NSLog(@"-(double) miniCoachMarkVerticalOffset");
}

-(id) thumbsDownButton {
	%orig;
	NSLog(@"-(id) thumbsDownButton");
}

-(id) replayButton {
	%orig;
	NSLog(@"-(id) replayButton");
}

-(id) progressViewContainer {
	%orig;
	NSLog(@"-(id) progressViewContainer");
}

-(void) updatePlaybackControlsState {
	%orig;
	NSLog(@"-(void) updatePlaybackControlsState");
}

-(void) setProgressViewCompressed:(bool) {
	%orig;
	NSLog(@"-(void) setProgressViewCompressed:(bool)");
}

-(void) enableSkipButtonIfRequirementSatisfied {
	%orig;
	NSLog(@"-(void) enableSkipButtonIfRequirementSatisfied");
}

-(void) setControlsContainer:(id) {
	%orig;
	NSLog(@"-(void) setControlsContainer:(id)");
}

-(void) setProgressViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setProgressViewContainer:(id)");
}

-(id) clickThroughBlockForSharingStation {
	%orig;
	NSLog(@"-(id) clickThroughBlockForSharingStation");
}

-(void) initTeachMarkPresenter {
	%orig;
	NSLog(@"-(void) initTeachMarkPresenter");
}

-(void) updateViewForIsPlayingChange {
	%orig;
	NSLog(@"-(void) updateViewForIsPlayingChange");
}

-(void) makeButtonImagesCenter {
	%orig;
	NSLog(@"-(void) makeButtonImagesCenter");
}

-(void) setIsProgressViewCompressed:(bool) {
	%orig;
	NSLog(@"-(void) setIsProgressViewCompressed:(bool)");
}

-(void) adjustProgressViewContainerPosition {
	%orig;
	NSLog(@"-(void) adjustProgressViewContainerPosition");
}

-(void) setUpAccessibilityLabels {
	%orig;
	NSLog(@"-(void) setUpAccessibilityLabels");
}

-(void) updateViewsForTrackChange {
	%orig;
	NSLog(@"-(void) updateViewsForTrackChange");
}

-(void) setupBufferingLabel {
	%orig;
	NSLog(@"-(void) setupBufferingLabel");
}

-(void) setHaptics:(id) {
	%orig;
	NSLog(@"-(void) setHaptics:(id)");
}

-(bool) hasSetInitialFrames {
	%orig;
	NSLog(@"-(bool) hasSetInitialFrames");
}

-(void) setHasSetInitialFrames:(bool) {
	%orig;
	NSLog(@"-(void) setHasSetInitialFrames:(bool)");
}

-(void) setReplayButtonHidden:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setReplayButtonHidden:(bool) animated:(bool)");
}

-(CGRect) frameForBufferingLabel {
	%orig;
	NSLog(@"-(CGRect) frameForBufferingLabel");
}

-(id) bufferingLabel {
	%orig;
	NSLog(@"-(id) bufferingLabel");
}

-(id) playbackContainer {
	%orig;
	NSLog(@"-(id) playbackContainer");
}

-(id) albumCoverContainerLeadingConstraint {
	%orig;
	NSLog(@"-(id) albumCoverContainerLeadingConstraint");
}

-(bool) isAlbumCoverShown {
	%orig;
	NSLog(@"-(bool) isAlbumCoverShown");
}

-(void) updatePlaybackControlsPositioningReplayHidden:(bool) albumCoverShown:(bool) {
	%orig;
	NSLog(@"-(void) updatePlaybackControlsPositioningReplayHidden:(bool) albumCoverShown:(bool)");
}

-(id) haptics {
	%orig;
	NSLog(@"-(id) haptics");
}

-(void) updateThumbButtonsForTrack {
	%orig;
	NSLog(@"-(void) updateThumbButtonsForTrack");
}

-(void) updateDisabledImageAfterThumbsDown {
	%orig;
	NSLog(@"-(void) updateDisabledImageAfterThumbsDown");
}

-(void) buildAndShowSiriShortcutToastIfAppropriate:(long long) {
	%orig;
	NSLog(@"-(void) buildAndShowSiriShortcutToastIfAppropriate:(long long)");
}

-(bool) isProgressViewCompressed {
	%orig;
	NSLog(@"-(bool) isProgressViewCompressed");
}

-(void) setAlbumCoverShown:(bool) {
	%orig;
	NSLog(@"-(void) setAlbumCoverShown:(bool)");
}

-(void) compressProgressView {
	%orig;
	NSLog(@"-(void) compressProgressView");
}

-(void) expandProgressView {
	%orig;
	NSLog(@"-(void) expandProgressView");
}

-(void) enablePlayPauseButton:(bool) {
	%orig;
	NSLog(@"-(void) enablePlayPauseButton:(bool)");
}

-(void) enableReplayButtonIfRequirementSatisfied {
	%orig;
	NSLog(@"-(void) enableReplayButtonIfRequirementSatisfied");
}

-(void) disableSkipButton {
	%orig;
	NSLog(@"-(void) disableSkipButton");
}

-(void) updateCurrentTrackProgress {
	%orig;
	NSLog(@"-(void) updateCurrentTrackProgress");
}

-(id) albumCover {
	%orig;
	NSLog(@"-(id) albumCover");
}

-(id) goToNowPlayingButton {
	%orig;
	NSLog(@"-(id) goToNowPlayingButton");
}

-(void) clearTrackProgress {
	%orig;
	NSLog(@"-(void) clearTrackProgress");
}

-(void) showAlbumCover {
	%orig;
	NSLog(@"-(void) showAlbumCover");
}

-(void) hideAlbumCover {
	%orig;
	NSLog(@"-(void) hideAlbumCover");
}

-(void) setIsAlbumCoverShown:(bool) {
	%orig;
	NSLog(@"-(void) setIsAlbumCoverShown:(bool)");
}

-(id) albumCoverContainerHiddenTrailingConstraint {
	%orig;
	NSLog(@"-(id) albumCoverContainerHiddenTrailingConstraint");
}

-(id) albumCoverContainerShownTrailingConstraint {
	%orig;
	NSLog(@"-(id) albumCoverContainerShownTrailingConstraint");
}

-(id) albumCoverContainer {
	%orig;
	NSLog(@"-(id) albumCoverContainer");
}

-(id) timeElapsedLeadingConstraint {
	%orig;
	NSLog(@"-(id) timeElapsedLeadingConstraint");
}

-(id) timeRemainingTrailngConstraint {
	%orig;
	NSLog(@"-(id) timeRemainingTrailngConstraint");
}

-(id) trackProgressViewCenterYConstraint {
	%orig;
	NSLog(@"-(id) trackProgressViewCenterYConstraint");
}

-(id) trackProgressViewTopConstraint {
	%orig;
	NSLog(@"-(id) trackProgressViewTopConstraint");
}

-(id) progressViewContainerTopConstraint {
	%orig;
	NSLog(@"-(id) progressViewContainerTopConstraint");
}

-(void) shouldDisableThumbsUpDownButtons {
	%orig;
	NSLog(@"-(void) shouldDisableThumbsUpDownButtons");
}

-(bool) shouldEnableReplayButton {
	%orig;
	NSLog(@"-(bool) shouldEnableReplayButton");
}

-(void) disableReplayButton {
	%orig;
	NSLog(@"-(void) disableReplayButton");
}

-(bool) shouldEnableThumbsDownButton {
	%orig;
	NSLog(@"-(bool) shouldEnableThumbsDownButton");
}

-(id) controlsContainerWithMargins {
	%orig;
	NSLog(@"-(id) controlsContainerWithMargins");
}

-(id) replayLeadingConstraint {
	%orig;
	NSLog(@"-(id) replayLeadingConstraint");
}

-(id) thumbsDownLeadingConstraint {
	%orig;
	NSLog(@"-(id) thumbsDownLeadingConstraint");
}

-(id) thumbsUpLeadingConstraint {
	%orig;
	NSLog(@"-(id) thumbsUpLeadingConstraint");
}

-(id) playLeadingConstraint {
	%orig;
	NSLog(@"-(id) playLeadingConstraint");
}

-(id) pauseLeadingConstraint {
	%orig;
	NSLog(@"-(id) pauseLeadingConstraint");
}

-(id) skipLeadingConstraint {
	%orig;
	NSLog(@"-(id) skipLeadingConstraint");
}

-(id) trackNameLabelWidthConstraint {
	%orig;
	NSLog(@"-(id) trackNameLabelWidthConstraint");
}

-(id) artistNameLabelWidthConstraint {
	%orig;
	NSLog(@"-(id) artistNameLabelWidthConstraint");
}

-(id) clickThroughBlockForAddVariety {
	%orig;
	NSLog(@"-(id) clickThroughBlockForAddVariety");
}

-(void) playPressed:(id) {
	%orig;
	NSLog(@"-(void) playPressed:(id)");
}

-(void) pausePressed:(id) {
	%orig;
	NSLog(@"-(void) pausePressed:(id)");
}

-(void) skipPressed:(id) {
	%orig;
	NSLog(@"-(void) skipPressed:(id)");
}

-(void) albumCoverClicked:(id) {
	%orig;
	NSLog(@"-(void) albumCoverClicked:(id)");
}

-(void) setProgressViewHidden:(bool) {
	%orig;
	NSLog(@"-(void) setProgressViewHidden:(bool)");
}

-(void) setThumbsUpButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbsUpButton:(id)");
}

-(void) setThumbsDownButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbsDownButton:(id)");
}

-(void) setReplayButton:(id) {
	%orig;
	NSLog(@"-(void) setReplayButton:(id)");
}

-(void) setTrackProgressView:(id) {
	%orig;
	NSLog(@"-(void) setTrackProgressView:(id)");
}

-(double) thumbUpButtonCenterPointInScreen {
	%orig;
	NSLog(@"-(double) thumbUpButtonCenterPointInScreen");
}

-(double) thumbDownButtonCenterPointInScreen {
	%orig;
	NSLog(@"-(double) thumbDownButtonCenterPointInScreen");
}

-(double) replayButtonCenterPointInScreen {
	%orig;
	NSLog(@"-(double) replayButtonCenterPointInScreen");
}

-(double) skipButtonCenterPointInScreen {
	%orig;
	NSLog(@"-(double) skipButtonCenterPointInScreen");
}

-(void) setPlaybackContainer:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackContainer:(id)");
}

-(void) setControlsContainerWithMargins:(id) {
	%orig;
	NSLog(@"-(void) setControlsContainerWithMargins:(id)");
}

-(void) setAlbumCoverContainer:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCoverContainer:(id)");
}

-(void) setAlbumCover:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCover:(id)");
}

-(void) setGoToNowPlayingButton:(id) {
	%orig;
	NSLog(@"-(void) setGoToNowPlayingButton:(id)");
}

-(void) setTimeElapsed:(id) {
	%orig;
	NSLog(@"-(void) setTimeElapsed:(id)");
}

-(void) setProgressViewContainerTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setProgressViewContainerTopConstraint:(id)");
}

-(void) setTimeElapsedLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTimeElapsedLeadingConstraint:(id)");
}

-(void) setTimeRemainingTrailngConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTimeRemainingTrailngConstraint:(id)");
}

-(void) setTrackProgressViewCenterYConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTrackProgressViewCenterYConstraint:(id)");
}

-(void) setTrackProgressViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTrackProgressViewTopConstraint:(id)");
}

-(void) setAlbumCoverContainerLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCoverContainerLeadingConstraint:(id)");
}

-(void) setAlbumCoverContainerShownTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCoverContainerShownTrailingConstraint:(id)");
}

-(void) setAlbumCoverContainerHiddenTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCoverContainerHiddenTrailingConstraint:(id)");
}

-(id) controlsContainerLeadingConstraint {
	%orig;
	NSLog(@"-(id) controlsContainerLeadingConstraint");
}

-(void) setControlsContainerLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setControlsContainerLeadingConstraint:(id)");
}

-(void) setThumbsDownLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setThumbsDownLeadingConstraint:(id)");
}

-(void) setThumbsUpLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setThumbsUpLeadingConstraint:(id)");
}

-(void) setReplayLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setReplayLeadingConstraint:(id)");
}

-(void) setPlayLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setPlayLeadingConstraint:(id)");
}

-(void) setPauseLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setPauseLeadingConstraint:(id)");
}

-(void) setSkipLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSkipLeadingConstraint:(id)");
}

-(void) setTrackNameLabelWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTrackNameLabelWidthConstraint:(id)");
}

-(void) setArtistNameLabelWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setArtistNameLabelWidthConstraint:(id)");
}

-(id) radio {
	%orig;
	NSLog(@"-(id) radio");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(id) timeElapsed {
	%orig;
	NSLog(@"-(id) timeElapsed");
}

-(id) timeRemaining {
	%orig;
	NSLog(@"-(id) timeRemaining");
}

-(void) setTimeRemaining:(id) {
	%orig;
	NSLog(@"-(void) setTimeRemaining:(id)");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(bool) isOffline {
	%orig;
	NSLog(@"-(bool) isOffline");
}

-(id) artistName {
	%orig;
	NSLog(@"-(id) artistName");
}

-(void) setArtistName:(id) {
	%orig;
	NSLog(@"-(void) setArtistName:(id)");
}

-(id) playButton {
	%orig;
	NSLog(@"-(id) playButton");
}

-(void) setRadio:(id) {
	%orig;
	NSLog(@"-(void) setRadio:(id)");
}

-(void) setPlayButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayButton:(id)");
}

-(id) skipButton {
	%orig;
	NSLog(@"-(id) skipButton");
}

-(id) pauseButton {
	%orig;
	NSLog(@"-(id) pauseButton");
}

-(void) setPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPauseButton:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) backgroundView {
	%orig;
	NSLog(@"-(id) backgroundView");
}

-(void) willTransitionToTraitCollection:(id) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) willTransitionToTraitCollection:(id) withTransitionCoordinator:(id)");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) setBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundView:(id)");
}

-(bool) isAnimating {
	%orig;
	NSLog(@"-(bool) isAnimating");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

%end

%hook PMTextFieldViewController

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) setTextFont:(id) {
	%orig;
	NSLog(@"-(void) setTextFont:(id)");
}

-(void) setAllowsEmptyText:(bool) {
	%orig;
	NSLog(@"-(void) setAllowsEmptyText:(bool)");
}

-(void) undoButtonTapped {
	%orig;
	NSLog(@"-(void) undoButtonTapped");
}

-(bool) allowsEmptyText {
	%orig;
	NSLog(@"-(bool) allowsEmptyText");
}

-(void) setUpUndoButton {
	%orig;
	NSLog(@"-(void) setUpUndoButton");
}

-(void) setInitialText:(id) {
	%orig;
	NSLog(@"-(void) setInitialText:(id)");
}

-(void) updateText:(id) {
	%orig;
	NSLog(@"-(void) updateText:(id)");
}

-(id) initialText {
	%orig;
	NSLog(@"-(id) initialText");
}

-(void) setTextField:(id) {
	%orig;
	NSLog(@"-(void) setTextField:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setPlaceholder:(id) {
	%orig;
	NSLog(@"-(void) setPlaceholder:(id)");
}

-(id) textField {
	%orig;
	NSLog(@"-(id) textField");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) setAutocorrectionType:(long long) {
	%orig;
	NSLog(@"-(void) setAutocorrectionType:(long long)");
}

-(void) setAutocapitalizationType:(long long) {
	%orig;
	NSLog(@"-(void) setAutocapitalizationType:(long long)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) placeholder {
	%orig;
	NSLog(@"-(id) placeholder");
}

-(long long) autocorrectionType {
	%orig;
	NSLog(@"-(long long) autocorrectionType");
}

-(long long) autocapitalizationType {
	%orig;
	NSLog(@"-(long long) autocapitalizationType");
}

-(bool) textFieldShouldClear:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldClear:(id)");
}

-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id) {
	%orig;
	NSLog(@"-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id)");
}

-(id) indexPath {
	%orig;
	NSLog(@"-(id) indexPath");
}

-(void) setIndexPath:(id) {
	%orig;
	NSLog(@"-(void) setIndexPath:(id)");
}

-(bool) textFieldShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldReturn:(id)");
}

-(void) textFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidBeginEditing:(id)");
}

-(id) textFont {
	%orig;
	NSLog(@"-(id) textFont");
}

%end

%hook PMPhoneStationListController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) showCreateStation {
	%orig;
	NSLog(@"-(void) showCreateStation");
}

-(id) stationListNavigationController {
	%orig;
	NSLog(@"-(id) stationListNavigationController");
}

-(void) setupStationListController {
	%orig;
	NSLog(@"-(void) setupStationListController");
}

-(void) setStationListNavigationController:(id) {
	%orig;
	NSLog(@"-(void) setStationListNavigationController:(id)");
}

-(void) resetNowPlayingNavigationStackTimer {
	%orig;
	NSLog(@"-(void) resetNowPlayingNavigationStackTimer");
}

-(void) removeNowPlayingNavigationStackTimer {
	%orig;
	NSLog(@"-(void) removeNowPlayingNavigationStackTimer");
}

-(void) handleNowPlayingNavigationStackTimeout {
	%orig;
	NSLog(@"-(void) handleNowPlayingNavigationStackTimeout");
}

-(void) setNowPlayingNavigationStackTimer:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingNavigationStackTimer:(id)");
}

-(id) nowPlayingNavigationStackTimer {
	%orig;
	NSLog(@"-(id) nowPlayingNavigationStackTimer");
}

-(void) setFocusOnCreateStationFieldOnNextViewDidAppear {
	%orig;
	NSLog(@"-(void) setFocusOnCreateStationFieldOnNextViewDidAppear");
}

-(void) resetScrollPositionWithAnimated:(bool) {
	%orig;
	NSLog(@"-(void) resetScrollPositionWithAnimated:(bool)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) navigationController {
	%orig;
	NSLog(@"-(id) navigationController");
}

-(void) navigationController:(id) didShowViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) navigationController:(id) didShowViewController:(id) animated:(bool)");
}

%end

%hook PMCreateStationViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(id) searchTextField {
	%orig;
	NSLog(@"-(id) searchTextField");
}

-(void) setSearchTextField:(id) {
	%orig;
	NSLog(@"-(void) setSearchTextField:(id)");
}

-(void) searchTextField:(id) didChangeWithText:(id) {
	%orig;
	NSLog(@"-(void) searchTextField:(id) didChangeWithText:(id)");
}

-(void) searchTextField:(id) didTapReturnWithText:(id) {
	%orig;
	NSLog(@"-(void) searchTextField:(id) didTapReturnWithText:(id)");
}

-(void) searchTextFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) searchTextFieldDidBeginEditing:(id)");
}

-(void) searchTextFieldDidTapCloseButton:(id) {
	%orig;
	NSLog(@"-(void) searchTextFieldDidTapCloseButton:(id)");
}

-(long long) searchLoggingSequence {
	%orig;
	NSLog(@"-(long long) searchLoggingSequence");
}

-(void) setSearchLoggingSequence:(long long) {
	%orig;
	NSLog(@"-(void) setSearchLoggingSequence:(long long)");
}

-(long long) searchMode {
	%orig;
	NSLog(@"-(long long) searchMode");
}

-(void) popCurrentControllerAnimated {
	%orig;
	NSLog(@"-(void) popCurrentControllerAnimated");
}

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id)");
}

-(void) didDismissRecommendationControllerWithContext:(id) {
	%orig;
	NSLog(@"-(void) didDismissRecommendationControllerWithContext:(id)");
}

-(void) setCreateStationSource:(long long) {
	%orig;
	NSLog(@"-(void) setCreateStationSource:(long long)");
}

-(void) setupVoiceModeUI {
	%orig;
	NSLog(@"-(void) setupVoiceModeUI");
}

-(void) setupSearchTextField {
	%orig;
	NSLog(@"-(void) setupSearchTextField");
}

-(void) hideKeyboard:(id) {
	%orig;
	NSLog(@"-(void) hideKeyboard:(id)");
}

-(id) voiceModeButtonView {
	%orig;
	NSLog(@"-(id) voiceModeButtonView");
}

-(void) setBrowseButtonFooterView:(id) {
	%orig;
	NSLog(@"-(void) setBrowseButtonFooterView:(id)");
}

-(id) browseButtonFooterView {
	%orig;
	NSLog(@"-(id) browseButtonFooterView");
}

-(void) switchDataSourceTo:(long long) {
	%orig;
	NSLog(@"-(void) switchDataSourceTo:(long long)");
}

-(void) showVoiceModeMiniCalloutIfNeeded {
	%orig;
	NSLog(@"-(void) showVoiceModeMiniCalloutIfNeeded");
}

-(long long) createStationSource {
	%orig;
	NSLog(@"-(long long) createStationSource");
}

-(void) setBrowseButtonTapDelegationBlock:(id) {
	%orig;
	NSLog(@"-(void) setBrowseButtonTapDelegationBlock:(id)");
}

-(void) popCurrentControllerAnimated:(id) {
	%orig;
	NSLog(@"-(void) popCurrentControllerAnimated:(id)");
}

-(id) browseButtonTapDelegationBlock {
	%orig;
	NSLog(@"-(id) browseButtonTapDelegationBlock");
}

-(void) dismissVoiceModeMiniCalloutAnimatedWithReason:(long long) {
	%orig;
	NSLog(@"-(void) dismissVoiceModeMiniCalloutAnimatedWithReason:(long long)");
}

-(id) visibleMusicIDs {
	%orig;
	NSLog(@"-(id) visibleMusicIDs");
}

-(id) collapsedServerResults {
	%orig;
	NSLog(@"-(id) collapsedServerResults");
}

-(bool) shouldHideBottomSeparatorForIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) shouldHideBottomSeparatorForIndexPath:(id)");
}

-(id) defaultCellForTableView:(id) {
	%orig;
	NSLog(@"-(id) defaultCellForTableView:(id)");
}

-(void) didSelectMoreRecommendationCellAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) didSelectMoreRecommendationCellAtIndexPath:(id)");
}

-(id) cellForSeedResultAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) cellForSeedResultAtIndexPath:(id)");
}

-(id) trafficPartnerBlobForSelectedSearchResult {
	%orig;
	NSLog(@"-(id) trafficPartnerBlobForSelectedSearchResult");
}

-(void) presentPremiumAccessRewardFrom:(id) stationCreationSource:(long long) additionalParams:(id) {
	%orig;
	NSLog(@"-(void) presentPremiumAccessRewardFrom:(id) stationCreationSource:(long long) additionalParams:(id)");
}

-(void) logCreateExistingStation:(id) {
	%orig;
	NSLog(@"-(void) logCreateExistingStation:(id)");
}

-(void) logCreateNewStation:(id) {
	%orig;
	NSLog(@"-(void) logCreateNewStation:(id)");
}

-(void) setSearchLoggingSelectedInfo:(id) {
	%orig;
	NSLog(@"-(void) setSearchLoggingSelectedInfo:(id)");
}

-(id) searchLoggingSelectedInfo {
	%orig;
	NSLog(@"-(id) searchLoggingSelectedInfo");
}

-(bool) isSearchQueryNotBlank:(id) {
	%orig;
	NSLog(@"-(bool) isSearchQueryNotBlank:(id)");
}

-(void) clearSearchResultsAndReloadTableView {
	%orig;
	NSLog(@"-(void) clearSearchResultsAndReloadTableView");
}

-(void) setTrafficPartnerBlobForSelectedSearchResult:(id) {
	%orig;
	NSLog(@"-(void) setTrafficPartnerBlobForSelectedSearchResult:(id)");
}

-(void) performRegularSearch:(id) populateTextInSearchField:(bool) {
	%orig;
	NSLog(@"-(void) performRegularSearch:(id) populateTextInSearchField:(bool)");
}

-(void) searchRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) searchRequest:(id) finishedWithResult:(id)");
}

-(bool) artistIsExistingArtistStation:(id) {
	%orig;
	NSLog(@"-(bool) artistIsExistingArtistStation:(id)");
}

-(void) showNoMatchCoachmarkForArtist:(id) andSong:(id) {
	%orig;
	NSLog(@"-(void) showNoMatchCoachmarkForArtist:(id) andSong:(id)");
}

-(void) setTrafficDrivingPartnerObject:(id) {
	%orig;
	NSLog(@"-(void) setTrafficDrivingPartnerObject:(id)");
}

-(id) trafficDrivingPartnerObject {
	%orig;
	NSLog(@"-(id) trafficDrivingPartnerObject");
}

-(void) handleModalDismissal {
	%orig;
	NSLog(@"-(void) handleModalDismissal");
}

-(void) showFuzzySearchResultForSearchContext:(id) {
	%orig;
	NSLog(@"-(void) showFuzzySearchResultForSearchContext:(id)");
}

-(void) showNoSearchMatchWithText:(id) {
	%orig;
	NSLog(@"-(void) showNoSearchMatchWithText:(id)");
}

-(void) searchForTermWithSearchTerm:(id) additionalParams:(id) context:(id) {
	%orig;
	NSLog(@"-(void) searchForTermWithSearchTerm:(id) additionalParams:(id) context:(id)");
}

-(void) showVoiceMode {
	%orig;
	NSLog(@"-(void) showVoiceMode");
}

-(void) setTableViewContentInsetBottom:(double) {
	%orig;
	NSLog(@"-(void) setTableViewContentInsetBottom:(double)");
}

-(void) removeNoSearchMatchView {
	%orig;
	NSLog(@"-(void) removeNoSearchMatchView");
}

-(void) becomeFirstResponderSetText:(id) {
	%orig;
	NSLog(@"-(void) becomeFirstResponderSetText:(id)");
}

-(double) tableViewContentInsetBottom {
	%orig;
	NSLog(@"-(double) tableViewContentInsetBottom");
}

-(bool) didShowVoiceModeMiniCalloutView {
	%orig;
	NSLog(@"-(bool) didShowVoiceModeMiniCalloutView");
}

-(id) voiceModeMiniCalloutView {
	%orig;
	NSLog(@"-(id) voiceModeMiniCalloutView");
}

-(bool) shouldShowVoiceModeMiniCallout {
	%orig;
	NSLog(@"-(bool) shouldShowVoiceModeMiniCallout");
}

-(void) setVoiceModeMiniCalloutView:(id) {
	%orig;
	NSLog(@"-(void) setVoiceModeMiniCalloutView:(id)");
}

-(void) setDidShowVoiceModeMiniCalloutView:(bool) {
	%orig;
	NSLog(@"-(void) setDidShowVoiceModeMiniCalloutView:(bool)");
}

-(void) voiceModeButtonClickedWithButtonView:(id) {
	%orig;
	NSLog(@"-(void) voiceModeButtonClickedWithButtonView:(id)");
}

-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long) {
	%orig;
	NSLog(@"-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long)");
}

-(id) initWithSource:(long long) parent:(long long) {
	%orig;
	NSLog(@"-(id) initWithSource:(long long) parent:(long long)");
}

-(void) didSelectStationCreationAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) didSelectStationCreationAtIndexPath:(id)");
}

-(void) recommendation:(id) didCreateRecommendation:(id) {
	%orig;
	NSLog(@"-(void) recommendation:(id) didCreateRecommendation:(id)");
}

-(void) recommendation:(id) didDismissRecommendation:(id) {
	%orig;
	NSLog(@"-(void) recommendation:(id) didDismissRecommendation:(id)");
}

-(void) setVoiceModeButtonView:(id) {
	%orig;
	NSLog(@"-(void) setVoiceModeButtonView:(id)");
}

-(void) autoCompleteRespondedWith:(id) forSearchText:(id) context:(id) {
	%orig;
	NSLog(@"-(void) autoCompleteRespondedWith:(id) forSearchText:(id) context:(id)");
}

-(void) autoCompleteWasCancelledForSearchText:(id) context:(id) {
	%orig;
	NSLog(@"-(void) autoCompleteWasCancelledForSearchText:(id) context:(id)");
}

-(void) autoCompleteDidFailForSearchText:(id) context:(id) {
	%orig;
	NSLog(@"-(void) autoCompleteDidFailForSearchText:(id) context:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) searchSource {
	%orig;
	NSLog(@"-(id) searchSource");
}

-(void) scrollViewDidEndScrolling {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrolling");
}

-(long long) dataSourceType {
	%orig;
	NSLog(@"-(long long) dataSourceType");
}

-(void) setupTableView {
	%orig;
	NSLog(@"-(void) setupTableView");
}

-(void) setParent:(long long) {
	%orig;
	NSLog(@"-(void) setParent:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) animationDidStop:(id) finished:(bool) {
	%orig;
	NSLog(@"-(void) animationDidStop:(id) finished:(bool)");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) didReceiveMemoryWarning {
	%orig;
	NSLog(@"-(void) didReceiveMemoryWarning");
}

-(void) keyboardDidShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardDidShow:(id)");
}

-(void) keyboardDidHide:(id) {
	%orig;
	NSLog(@"-(void) keyboardDidHide:(id)");
}

-(long long) parent {
	%orig;
	NSLog(@"-(long long) parent");
}

%end

%hook PMEnvironmentFastSwitcherController

-(void) setupSearchResultsController {
	%orig;
	NSLog(@"-(void) setupSearchResultsController");
}

-(id) childController {
	%orig;
	NSLog(@"-(id) childController");
}

-(void) setChildController:(id) {
	%orig;
	NSLog(@"-(void) setChildController:(id)");
}

-(void) environmentOptionsDidChangeWithSettings:(id) {
	%orig;
	NSLog(@"-(void) environmentOptionsDidChangeWithSettings:(id)");
}

-(void) setupLeftDismissButton {
	%orig;
	NSLog(@"-(void) setupLeftDismissButton");
}

-(void) loadServerListFromConfig {
	%orig;
	NSLog(@"-(void) loadServerListFromConfig");
}

-(void) switchEnvironmentWithSettings:(id) andMessage:(id) {
	%orig;
	NSLog(@"-(void) switchEnvironmentWithSettings:(id) andMessage:(id)");
}

-(void) setupController {
	%orig;
	NSLog(@"-(void) setupController");
}

-(void) dismissSelf {
	%orig;
	NSLog(@"-(void) dismissSelf");
}

-(void) setupTableView {
	%orig;
	NSLog(@"-(void) setupTableView");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) searchController {
	%orig;
	NSLog(@"-(id) searchController");
}

-(void) setSearchController:(id) {
	%orig;
	NSLog(@"-(void) setSearchController:(id)");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(void) tableView:(id) accessoryButtonTappedForRowWithIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) accessoryButtonTappedForRowWithIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) updateSearchResultsForSearchController:(id) {
	%orig;
	NSLog(@"-(void) updateSearchResultsForSearchController:(id)");
}

%end

%hook PMInboxCollectionViewController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) actionItemTappedForInboxView:(id) {
	%orig;
	NSLog(@"-(void) actionItemTappedForInboxView:(id)");
}

-(void) setLastGetInboxRPCCall:(double) {
	%orig;
	NSLog(@"-(void) setLastGetInboxRPCCall:(double)");
}

-(void) notificationsUpdated:(id) {
	%orig;
	NSLog(@"-(void) notificationsUpdated:(id)");
}

-(void) markMessageSeenWithNotification:(id) {
	%orig;
	NSLog(@"-(void) markMessageSeenWithNotification:(id)");
}

-(void) userDidLogout:(id) {
	%orig;
	NSLog(@"-(void) userDidLogout:(id)");
}

-(void) userDidLogin:(id) {
	%orig;
	NSLog(@"-(void) userDidLogin:(id)");
}

-(void) userDidAutoLogin:(id) {
	%orig;
	NSLog(@"-(void) userDidAutoLogin:(id)");
}

-(void) markNotification:(id) withAction:(long long) {
	%orig;
	NSLog(@"-(void) markNotification:(id) withAction:(long long)");
}

-(void) setViewChangedDueToMessageClick:(bool) {
	%orig;
	NSLog(@"-(void) setViewChangedDueToMessageClick:(bool)");
}

-(void) showNoMessageView {
	%orig;
	NSLog(@"-(void) showNoMessageView");
}

-(long long) emptyInboxFetchCount {
	%orig;
	NSLog(@"-(long long) emptyInboxFetchCount");
}

-(void) setEmptyInboxFetchCount:(long long) {
	%orig;
	NSLog(@"-(void) setEmptyInboxFetchCount:(long long)");
}

-(id) noMessageView {
	%orig;
	NSLog(@"-(id) noMessageView");
}

-(void) hasSetReminderOnNotification:(id) forInboxView:(id) {
	%orig;
	NSLog(@"-(void) hasSetReminderOnNotification:(id) forInboxView:(id)");
}

-(void) presentReminderFailedAlert {
	%orig;
	NSLog(@"-(void) presentReminderFailedAlert");
}

-(void) displayEnableNotificationTeachMark {
	%orig;
	NSLog(@"-(void) displayEnableNotificationTeachMark");
}

-(void) setNoMessageView:(id) {
	%orig;
	NSLog(@"-(void) setNoMessageView:(id)");
}

-(double) lastGetInboxRPCCall {
	%orig;
	NSLog(@"-(double) lastGetInboxRPCCall");
}

-(bool) viewChangedDueToMessageClick {
	%orig;
	NSLog(@"-(bool) viewChangedDueToMessageClick");
}

-(void) setSizingInboxCell:(id) {
	%orig;
	NSLog(@"-(void) setSizingInboxCell:(id)");
}

-(id) sizingInboxCell {
	%orig;
	NSLog(@"-(id) sizingInboxCell");
}

-(bool) shouldShowCircularImageWithType:(id) {
	%orig;
	NSLog(@"-(bool) shouldShowCircularImageWithType:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(id) collectionView {
	%orig;
	NSLog(@"-(id) collectionView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(bool) collectionView:(id) shouldSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) collectionView:(id) shouldSelectItemAtIndexPath:(id)");
}

-(bool) collectionView:(id) shouldDeselectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) collectionView:(id) shouldDeselectItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didDeselectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didDeselectItemAtIndexPath:(id)");
}

-(void) setCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setCollectionView:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

%end

%hook PMStationPersonalizationViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) setupBackButton {
	%orig;
	NSLog(@"-(id) setupBackButton");
}

-(void) backButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) backButtonTapped:(id)");
}

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(void) updateBottomViewHiddenStatus {
	%orig;
	NSLog(@"-(void) updateBottomViewHiddenStatus");
}

-(void) addMusic:(id) toStation:(id) {
	%orig;
	NSLog(@"-(void) addMusic:(id) toStation:(id)");
}

-(id) personalizationMeterButton {
	%orig;
	NSLog(@"-(id) personalizationMeterButton");
}

-(bool) shouldShowAddVarietySection {
	%orig;
	NSLog(@"-(bool) shouldShowAddVarietySection");
}

-(void) didSelectedSeedForSeedIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) didSelectedSeedForSeedIndex:(unsigned long long)");
}

-(void) didTapArtistMessageSettings {
	%orig;
	NSLog(@"-(void) didTapArtistMessageSettings");
}

-(void) editStationNameButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) editStationNameButtonTapped:(id)");
}

-(void) editStationDescriptionButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) editStationDescriptionButtonTapped:(id)");
}

-(void) addVarietyButtonTapped {
	%orig;
	NSLog(@"-(void) addVarietyButtonTapped");
}

-(void) editStationNameButtonTapped {
	%orig;
	NSLog(@"-(void) editStationNameButtonTapped");
}

-(void) editStationDescriptionButtonTapped {
	%orig;
	NSLog(@"-(void) editStationDescriptionButtonTapped");
}

-(void) setJumpToThumbHistoryWhenPush:(bool) {
	%orig;
	NSLog(@"-(void) setJumpToThumbHistoryWhenPush:(bool)");
}

-(void) setJumpToThumbDownHistory:(bool) {
	%orig;
	NSLog(@"-(void) setJumpToThumbDownHistory:(bool)");
}

-(void) setJumpToAddVarietyWhenPush:(bool) {
	%orig;
	NSLog(@"-(void) setJumpToAddVarietyWhenPush:(bool)");
}

-(id) scaleUpAnimation {
	%orig;
	NSLog(@"-(id) scaleUpAnimation");
}

-(void) setTitleViewLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleViewLabel:(id)");
}

-(id) titleViewLabel {
	%orig;
	NSLog(@"-(id) titleViewLabel");
}

-(void) setupDataModal {
	%orig;
	NSLog(@"-(void) setupDataModal");
}

-(void) setupObserver {
	%orig;
	NSLog(@"-(void) setupObserver");
}

-(void) setupInnerTableView {
	%orig;
	NSLog(@"-(void) setupInnerTableView");
}

-(void) setupPersonalizationMeterContainerView {
	%orig;
	NSLog(@"-(void) setupPersonalizationMeterContainerView");
}

-(void) setFirstTimeAppear:(bool) {
	%orig;
	NSLog(@"-(void) setFirstTimeAppear:(bool)");
}

-(void) recordEntryPoint {
	%orig;
	NSLog(@"-(void) recordEntryPoint");
}

-(bool) jumpToThumbHistoryWhenPush {
	%orig;
	NSLog(@"-(bool) jumpToThumbHistoryWhenPush");
}

-(bool) jumpToThumbDownHistory {
	%orig;
	NSLog(@"-(bool) jumpToThumbDownHistory");
}

-(void) navigateToStationThumbHistoryWithScrolling:(bool) {
	%orig;
	NSLog(@"-(void) navigateToStationThumbHistoryWithScrolling:(bool)");
}

-(id) innerTableView {
	%orig;
	NSLog(@"-(id) innerTableView");
}

-(void) updateThumbCount {
	%orig;
	NSLog(@"-(void) updateThumbCount");
}

-(bool) inAddVarietyBackTransition {
	%orig;
	NSLog(@"-(bool) inAddVarietyBackTransition");
}

-(void) animateAddVarietyBack {
	%orig;
	NSLog(@"-(void) animateAddVarietyBack");
}

-(bool) jumpToAddVarietyWhenPush {
	%orig;
	NSLog(@"-(bool) jumpToAddVarietyWhenPush");
}

-(bool) firstTimeAppear {
	%orig;
	NSLog(@"-(bool) firstTimeAppear");
}

-(bool) delayUpdateUIForTransition {
	%orig;
	NSLog(@"-(bool) delayUpdateUIForTransition");
}

-(id) stationPersonalizationTableViewDataProviderImp {
	%orig;
	NSLog(@"-(id) stationPersonalizationTableViewDataProviderImp");
}

-(bool) inEditingBackTransition {
	%orig;
	NSLog(@"-(bool) inEditingBackTransition");
}

-(void) animateEditStationBack {
	%orig;
	NSLog(@"-(void) animateEditStationBack");
}

-(id) viewDidAppearBlock {
	%orig;
	NSLog(@"-(id) viewDidAppearBlock");
}

-(void) setTransitionAnimationType:(long long) {
	%orig;
	NSLog(@"-(void) setTransitionAnimationType:(long long)");
}

-(void) removeTimer {
	%orig;
	NSLog(@"-(void) removeTimer");
}

-(void) setTimeEnterView:(id) {
	%orig;
	NSLog(@"-(void) setTimeEnterView:(id)");
}

-(void) setEntryPoint:(long long) {
	%orig;
	NSLog(@"-(void) setEntryPoint:(long long)");
}

-(id) timeEnterView {
	%orig;
	NSLog(@"-(id) timeEnterView");
}

-(double) totalTimeInView {
	%orig;
	NSLog(@"-(double) totalTimeInView");
}

-(void) setTotalTimeInView:(double) {
	%orig;
	NSLog(@"-(void) setTotalTimeInView:(double)");
}

-(bool) expandThumbHistory {
	%orig;
	NSLog(@"-(bool) expandThumbHistory");
}

-(void) setStationPersonalizationTableViewDataProviderImp:(id) {
	%orig;
	NSLog(@"-(void) setStationPersonalizationTableViewDataProviderImp:(id)");
}

-(id) personalizationMeterContainerView {
	%orig;
	NSLog(@"-(id) personalizationMeterContainerView");
}

-(id) stationPMeterThumbCountView {
	%orig;
	NSLog(@"-(id) stationPMeterThumbCountView");
}

-(void) meterButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) meterButtonClicked:(id)");
}

-(void) meterThumbDownButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) meterThumbDownButtonTapped:(id)");
}

-(void) meterThumbUpButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) meterThumbUpButtonTapped:(id)");
}

-(void) setInAddVarietyBackTransition:(bool) {
	%orig;
	NSLog(@"-(void) setInAddVarietyBackTransition:(bool)");
}

-(void) pushStationNameDescriptionVCWithDescriptionSelected:(bool) {
	%orig;
	NSLog(@"-(void) pushStationNameDescriptionVCWithDescriptionSelected:(bool)");
}

-(void) setInEditingBackTransition:(bool) {
	%orig;
	NSLog(@"-(void) setInEditingBackTransition:(bool)");
}

-(void) navigateToSeedDetailBySeed:(id) {
	%orig;
	NSLog(@"-(void) navigateToSeedDetailBySeed:(id)");
}

-(unsigned long long) thumbDownCount {
	%orig;
	NSLog(@"-(unsigned long long) thumbDownCount");
}

-(unsigned long long) thumbUpCount {
	%orig;
	NSLog(@"-(unsigned long long) thumbUpCount");
}

-(double) offsetToNavigationBarBottom {
	%orig;
	NSLog(@"-(double) offsetToNavigationBarBottom");
}

-(id) controllerBySeed:(id) {
	%orig;
	NSLog(@"-(id) controllerBySeed:(id)");
}

-(void) handleTimeout {
	%orig;
	NSLog(@"-(void) handleTimeout");
}

-(void) popToNowPlayingIfItsInNavigationStack {
	%orig;
	NSLog(@"-(void) popToNowPlayingIfItsInNavigationStack");
}

-(id) stationNameDescriptionView {
	%orig;
	NSLog(@"-(id) stationNameDescriptionView");
}

-(void) appBecomeActive {
	%orig;
	NSLog(@"-(void) appBecomeActive");
}

-(void) shouldRequestStationData:(id) {
	%orig;
	NSLog(@"-(void) shouldRequestStationData:(id)");
}

-(void) addMusicRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) addMusicRequest:(id) finishedWithResult:(id)");
}

-(id) clickThroughBlockForSharingStation {
	%orig;
	NSLog(@"-(id) clickThroughBlockForSharingStation");
}

-(void) setExpandThumbHistory:(bool) {
	%orig;
	NSLog(@"-(void) setExpandThumbHistory:(bool)");
}

-(void) transitionToAddVariety {
	%orig;
	NSLog(@"-(void) transitionToAddVariety");
}

-(id) imageOfView:(id) {
	%orig;
	NSLog(@"-(id) imageOfView:(id)");
}

-(void) updateStationNameDescriptionContainerView {
	%orig;
	NSLog(@"-(void) updateStationNameDescriptionContainerView");
}

-(id) thumbUpTracks {
	%orig;
	NSLog(@"-(id) thumbUpTracks");
}

-(id) thumbDownTracks {
	%orig;
	NSLog(@"-(id) thumbDownTracks");
}

-(void) didSelectResult:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectResult:(id) isRecommendation:(bool)");
}

-(void) didChangeCurrentStation {
	%orig;
	NSLog(@"-(void) didChangeCurrentStation");
}

-(void) didFinishLoadStationDataFromServerWithResult:(id) {
	%orig;
	NSLog(@"-(void) didFinishLoadStationDataFromServerWithResult:(id)");
}

-(void) songRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) songRatingDidChange:(id)");
}

-(void) didUpdateStationName:(id) stationDescription:(id) {
	%orig;
	NSLog(@"-(void) didUpdateStationName:(id) stationDescription:(id)");
}

-(void) didSelectCollect:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectCollect:(id) isRecommendation:(bool)");
}

-(bool) allowLongPress {
	%orig;
	NSLog(@"-(bool) allowLongPress");
}

-(void) collectionViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) collectionViewDidScroll:(id)");
}

-(double) contentOffsetToMeterButtom {
	%orig;
	NSLog(@"-(double) contentOffsetToMeterButtom");
}

-(void) hideMeterArea {
	%orig;
	NSLog(@"-(void) hideMeterArea");
}

-(void) showMeterArea {
	%orig;
	NSLog(@"-(void) showMeterArea");
}

-(CGPoint) meterThumbUpCenter {
	%orig;
	NSLog(@"-(CGPoint) meterThumbUpCenter");
}

-(CGPoint) meterThumbDownCenter {
	%orig;
	NSLog(@"-(CGPoint) meterThumbDownCenter");
}

-(CGRect) thumbUpPillFrameInWindow {
	%orig;
	NSLog(@"-(CGRect) thumbUpPillFrameInWindow");
}

-(CGRect) thumbDownPillFrameInWindow {
	%orig;
	NSLog(@"-(CGRect) thumbDownPillFrameInWindow");
}

-(void) hideBackbutton {
	%orig;
	NSLog(@"-(void) hideBackbutton");
}

-(void) showBackbutton {
	%orig;
	NSLog(@"-(void) showBackbutton");
}

-(void) reloadAddVarietyArea {
	%orig;
	NSLog(@"-(void) reloadAddVarietyArea");
}

-(void) setPersonalizationMeterContainerView:(id) {
	%orig;
	NSLog(@"-(void) setPersonalizationMeterContainerView:(id)");
}

-(void) setViewDidAppearBlock:(id) {
	%orig;
	NSLog(@"-(void) setViewDidAppearBlock:(id)");
}

-(id) thumbUpPillSnapshot {
	%orig;
	NSLog(@"-(id) thumbUpPillSnapshot");
}

-(void) setDelayUpdateUIForTransition:(bool) {
	%orig;
	NSLog(@"-(void) setDelayUpdateUIForTransition:(bool)");
}

-(long long) transitionAnimationType {
	%orig;
	NSLog(@"-(long long) transitionAnimationType");
}

-(bool) jumpToEditStationNameDescriptionWhenPush {
	%orig;
	NSLog(@"-(bool) jumpToEditStationNameDescriptionWhenPush");
}

-(void) setJumpToEditStationNameDescriptionWhenPush:(bool) {
	%orig;
	NSLog(@"-(void) setJumpToEditStationNameDescriptionWhenPush:(bool)");
}

-(CGPoint) baseContentOffset {
	%orig;
	NSLog(@"-(CGPoint) baseContentOffset");
}

-(void) setBaseContentOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) setBaseContentOffset:(CGPoint)");
}

-(void) setInnerTableView:(id) {
	%orig;
	NSLog(@"-(void) setInnerTableView:(id)");
}

-(void) setStationPMeterThumbCountView:(id) {
	%orig;
	NSLog(@"-(void) setStationPMeterThumbCountView:(id)");
}

-(void) setStationNameDescriptionView:(id) {
	%orig;
	NSLog(@"-(void) setStationNameDescriptionView:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(long long) entryPoint {
	%orig;
	NSLog(@"-(long long) entryPoint");
}

-(void) reportStats {
	%orig;
	NSLog(@"-(void) reportStats");
}

-(id) idleTimer {
	%orig;
	NSLog(@"-(id) idleTimer");
}

-(void) setIdleTimer:(id) {
	%orig;
	NSLog(@"-(void) setIdleTimer:(id)");
}

-(void) showTitle {
	%orig;
	NSLog(@"-(void) showTitle");
}

-(void) updateTitle {
	%orig;
	NSLog(@"-(void) updateTitle");
}

-(void) appWillResignActive {
	%orig;
	NSLog(@"-(void) appWillResignActive");
}

-(void) hideTitle {
	%orig;
	NSLog(@"-(void) hideTitle");
}

-(void) resetIdleTimer {
	%orig;
	NSLog(@"-(void) resetIdleTimer");
}

-(void) updateNavigationBar {
	%orig;
	NSLog(@"-(void) updateNavigationBar");
}

-(void) removeObserver {
	%orig;
	NSLog(@"-(void) removeObserver");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(id) titleViewSnapshot {
	%orig;
	NSLog(@"-(id) titleViewSnapshot");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMUpgradeViewController

+(id) newUpgradeViewController {
	%orig;
	NSLog(@"+(id) newUpgradeViewController");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(void) webViewHostDidRequestCustomWebViewContainerClose:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidRequestCustomWebViewContainerClose:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setMenuItem:(id) {
	%orig;
	NSLog(@"-(void) setMenuItem:(id)");
}

-(void) setUpgradeSource:(long long) {
	%orig;
	NSLog(@"-(void) setUpgradeSource:(long long)");
}

-(void) setForcePlusFirst:(bool) {
	%orig;
	NSLog(@"-(void) setForcePlusFirst:(bool)");
}

-(bool) didReachInteractionIdleThreshold {
	%orig;
	NSLog(@"-(bool) didReachInteractionIdleThreshold");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(id) createUpgradeMenuItem {
	%orig;
	NSLog(@"-(id) createUpgradeMenuItem");
}

-(void) setupForViewDidLoad {
	%orig;
	NSLog(@"-(void) setupForViewDidLoad");
}

-(void) createUpgradeWebview {
	%orig;
	NSLog(@"-(void) createUpgradeWebview");
}

-(id) pandoraOneWebViewHost {
	%orig;
	NSLog(@"-(id) pandoraOneWebViewHost");
}

-(void) reloadUpgradeWebview {
	%orig;
	NSLog(@"-(void) reloadUpgradeWebview");
}

-(long long) upgradeSource {
	%orig;
	NSLog(@"-(long long) upgradeSource");
}

-(bool) showFreeTier {
	%orig;
	NSLog(@"-(bool) showFreeTier");
}

-(id) upgradeType {
	%orig;
	NSLog(@"-(id) upgradeType");
}

-(id) mWebParams {
	%orig;
	NSLog(@"-(id) mWebParams");
}

-(bool) forcePlusFirst {
	%orig;
	NSLog(@"-(bool) forcePlusFirst");
}

-(id) pandoraUpgradeUrl {
	%orig;
	NSLog(@"-(id) pandoraUpgradeUrl");
}

-(void) setPandoraOneWebViewHost:(id) {
	%orig;
	NSLog(@"-(void) setPandoraOneWebViewHost:(id)");
}

-(id) pandoraUpgradeUrlWithAdobeVisitorID {
	%orig;
	NSLog(@"-(id) pandoraUpgradeUrlWithAdobeVisitorID");
}

-(void) updateWebviewAndMenuItem {
	%orig;
	NSLog(@"-(void) updateWebviewAndMenuItem");
}

-(id) menuItemTitle {
	%orig;
	NSLog(@"-(id) menuItemTitle");
}

-(void) attachNavigationInterceptToMenuItem:(id) {
	%orig;
	NSLog(@"-(void) attachNavigationInterceptToMenuItem:(id)");
}

-(void) setMWebParams:(id) {
	%orig;
	NSLog(@"-(void) setMWebParams:(id)");
}

-(void) setFirstIntroduction:(id) {
	%orig;
	NSLog(@"-(void) setFirstIntroduction:(id)");
}

-(void) setUpgradeType:(id) {
	%orig;
	NSLog(@"-(void) setUpgradeType:(id)");
}

-(void) setShowFreeTier:(bool) {
	%orig;
	NSLog(@"-(void) setShowFreeTier:(bool)");
}

-(id) firstIntroduction {
	%orig;
	NSLog(@"-(id) firstIntroduction");
}

-(void) setSourceId:(id) {
	%orig;
	NSLog(@"-(void) setSourceId:(id)");
}

-(id) sourceId {
	%orig;
	NSLog(@"-(id) sourceId");
}

-(void) addNotificationObservers {
	%orig;
	NSLog(@"-(void) addNotificationObservers");
}

-(id) menuItem {
	%orig;
	NSLog(@"-(id) menuItem");
}

-(void) backButtonTapped {
	%orig;
	NSLog(@"-(void) backButtonTapped");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(id) sourceType {
	%orig;
	NSLog(@"-(id) sourceType");
}

-(void) setSourceType:(id) {
	%orig;
	NSLog(@"-(void) setSourceType:(id)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook PMABTestSummaryController

-(void) setupSearchResultsController {
	%orig;
	NSLog(@"-(void) setupSearchResultsController");
}

-(void) filterContentForSearchText:(id) withScope:(id) {
	%orig;
	NSLog(@"-(void) filterContentForSearchText:(id) withScope:(id)");
}

-(void) setFilteredABTests:(id) {
	%orig;
	NSLog(@"-(void) setFilteredABTests:(id)");
}

-(id) filteredABTests {
	%orig;
	NSLog(@"-(id) filteredABTests");
}

-(void) updateMutuallyExclusiveTests:(id) {
	%orig;
	NSLog(@"-(void) updateMutuallyExclusiveTests:(id)");
}

-(void) setMutualExclusiveNegation:(id) {
	%orig;
	NSLog(@"-(void) setMutualExclusiveNegation:(id)");
}

-(id) abTests {
	%orig;
	NSLog(@"-(id) abTests");
}

-(void) setAbTests:(id) {
	%orig;
	NSLog(@"-(void) setAbTests:(id)");
}

-(void) setupTitleView {
	%orig;
	NSLog(@"-(void) setupTitleView");
}

-(void) close:(id) {
	%orig;
	NSLog(@"-(void) close:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) searchController {
	%orig;
	NSLog(@"-(id) searchController");
}

-(void) setSearchController:(id) {
	%orig;
	NSLog(@"-(void) setSearchController:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) updateSearchResultsForSearchController:(id) {
	%orig;
	NSLog(@"-(void) updateSearchResultsForSearchController:(id)");
}

%end

%hook PMPreviewCardPresentingViewController

-(id) previewCardPresenter {
	%orig;
	NSLog(@"-(id) previewCardPresenter");
}

-(void) setPreviewCardPresenter:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardPresenter:(id)");
}

-(bool) shouldShowPreviewCardOnViewDidAppear {
	%orig;
	NSLog(@"-(bool) shouldShowPreviewCardOnViewDidAppear");
}

-(void) setShouldShowPreviewCardOnViewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowPreviewCardOnViewDidAppear:(bool)");
}

-(id) previewCardTransitionNavigationSnapshotView {
	%orig;
	NSLog(@"-(id) previewCardTransitionNavigationSnapshotView");
}

-(void) setPreviewCardTransitionNavigationSnapshotView:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardTransitionNavigationSnapshotView:(id)");
}

-(id) previewCardTransitionViewControllerSnapshotView {
	%orig;
	NSLog(@"-(id) previewCardTransitionViewControllerSnapshotView");
}

-(void) setPreviewCardTransitionViewControllerSnapshotView:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardTransitionViewControllerSnapshotView:(id)");
}

-(void) presenterWillDismissPreviewCard:(id) {
	%orig;
	NSLog(@"-(void) presenterWillDismissPreviewCard:(id)");
}

-(void) presenterDidDismissPreviewCard:(id) {
	%orig;
	NSLog(@"-(void) presenterDidDismissPreviewCard:(id)");
}

-(void) removePreviewCardTimeoutTimer {
	%orig;
	NSLog(@"-(void) removePreviewCardTimeoutTimer");
}

-(void) handlePreviewCardTimeout {
	%orig;
	NSLog(@"-(void) handlePreviewCardTimeout");
}

-(void) setPreviewCardTimeoutTimer:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardTimeoutTimer:(id)");
}

-(void) removeTransitionViewsAndClear:(bool) {
	%orig;
	NSLog(@"-(void) removeTransitionViewsAndClear:(bool)");
}

-(id) previewCardTimeoutTimer {
	%orig;
	NSLog(@"-(id) previewCardTimeoutTimer");
}

-(void) addTransitionViews {
	%orig;
	NSLog(@"-(void) addTransitionViews");
}

-(void) setupPreviewCardTransitionViews {
	%orig;
	NSLog(@"-(void) setupPreviewCardTransitionViews");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook BrowseRankedCollectionViewController

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool) {
	%orig;
	NSLog(@"-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool)");
}

-(void) didSelectMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didSelectMediaCollectionViewCell:(id)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setModuleId:(id) {
	%orig;
	NSLog(@"-(void) setModuleId:(id)");
}

-(id) moduleId {
	%orig;
	NSLog(@"-(id) moduleId");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

%end

%hook PMWebContentController

-(id) webViewHost {
	%orig;
	NSLog(@"-(id) webViewHost");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(bool) isFromBrowse {
	%orig;
	NSLog(@"-(bool) isFromBrowse");
}

-(bool) isFromDeepLink {
	%orig;
	NSLog(@"-(bool) isFromDeepLink");
}

-(void) checkPartnerLinkOnStationStart:(id) {
	%orig;
	NSLog(@"-(void) checkPartnerLinkOnStationStart:(id)");
}

-(void) setWebViewHost:(id) {
	%orig;
	NSLog(@"-(void) setWebViewHost:(id)");
}

-(void) setLoadingViewHidden:(bool) {
	%orig;
	NSLog(@"-(void) setLoadingViewHidden:(bool)");
}

-(id) initWithURLString:(id) title:(id) type:(id) category:(id) {
	%orig;
	NSLog(@"-(id) initWithURLString:(id) title:(id) type:(id) category:(id)");
}

-(bool) shouldHideBottomViewWhenPushed {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewWhenPushed");
}

-(bool) useDefaultNavigationBarStyling {
	%orig;
	NSLog(@"-(bool) useDefaultNavigationBarStyling");
}

-(void) nowPlayingButtonWasTapped {
	%orig;
	NSLog(@"-(void) nowPlayingButtonWasTapped");
}

-(bool) didReachInteractionIdleThreshold {
	%orig;
	NSLog(@"-(bool) didReachInteractionIdleThreshold");
}

-(void) webViewHost:(id) presentArtistMessagePreviewCardWithData:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) presentArtistMessagePreviewCardWithData:(id)");
}

-(void) webViewHost:(id) updatedShareableItem:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) updatedShareableItem:(id)");
}

-(void) setShareBarButtonController:(id) {
	%orig;
	NSLog(@"-(void) setShareBarButtonController:(id)");
}

-(id) shareBarButtonController {
	%orig;
	NSLog(@"-(id) shareBarButtonController");
}

-(void) setRefreshHtmlWithView:(bool) {
	%orig;
	NSLog(@"-(void) setRefreshHtmlWithView:(bool)");
}

-(void) setupBackNavigationButton {
	%orig;
	NSLog(@"-(void) setupBackNavigationButton");
}

-(void) setIsFromBrowse:(bool) {
	%orig;
	NSLog(@"-(void) setIsFromBrowse:(bool)");
}

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) updatePropertiesDerivedFromType {
	%orig;
	NSLog(@"-(void) updatePropertiesDerivedFromType");
}

-(void) determineUrl {
	%orig;
	NSLog(@"-(void) determineUrl");
}

-(void) startUrlConnection {
	%orig;
	NSLog(@"-(void) startUrlConnection");
}

-(id) initWithURLString:(id) title:(id) type:(id) category:(id) more:(id) bgColor:(id) {
	%orig;
	NSLog(@"-(id) initWithURLString:(id) title:(id) type:(id) category:(id) more:(id) bgColor:(id)");
}

-(id) initWithURLString:(id) title:(id) type:(id) category:(id) more:(id) bgColor:(id) frame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithURLString:(id) title:(id) type:(id) category:(id) more:(id) bgColor:(id) frame:(CGRect)");
}

-(id) validateURLString:(id) {
	%orig;
	NSLog(@"-(id) validateURLString:(id)");
}

-(void) setMore:(id) {
	%orig;
	NSLog(@"-(void) setMore:(id)");
}

-(void) setShouldShowTranslucentNavBar:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowTranslucentNavBar:(bool)");
}

-(void) setShouldShowStickyTranslucentNavBar:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowStickyTranslucentNavBar:(bool)");
}

-(bool) isArtistType {
	%orig;
	NSLog(@"-(bool) isArtistType");
}

-(void) setTranslucentNavBarTransitionStyle:(long long) {
	%orig;
	NSLog(@"-(void) setTranslucentNavBarTransitionStyle:(long long)");
}

-(bool) shouldShowTranslucentNavBar {
	%orig;
	NSLog(@"-(bool) shouldShowTranslucentNavBar");
}

-(bool) shouldShowStickyTranslucentNavBar {
	%orig;
	NSLog(@"-(bool) shouldShowStickyTranslucentNavBar");
}

-(void) setShouldCheckForTitleJSON:(bool) {
	%orig;
	NSLog(@"-(void) setShouldCheckForTitleJSON:(bool)");
}

-(void) setWebViewDidLoadResponse:(bool) {
	%orig;
	NSLog(@"-(void) setWebViewDidLoadResponse:(bool)");
}

-(void) setIsFromDeepLink:(bool) {
	%orig;
	NSLog(@"-(void) setIsFromDeepLink:(bool)");
}

-(void) establishWebView {
	%orig;
	NSLog(@"-(void) establishWebView");
}

-(id) viewControllerDirectlyRelatedToNavigationController {
	%orig;
	NSLog(@"-(id) viewControllerDirectlyRelatedToNavigationController");
}

-(void) setIsRadioPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setIsRadioPlaying:(bool)");
}

-(void) backStagePageStoppedPlayingSample:(id) {
	%orig;
	NSLog(@"-(void) backStagePageStoppedPlayingSample:(id)");
}

-(id) more {
	%orig;
	NSLog(@"-(id) more");
}

-(void) loadWebViewWithContent:(id) {
	%orig;
	NSLog(@"-(void) loadWebViewWithContent:(id)");
}

-(void) recreateWebViewHost {
	%orig;
	NSLog(@"-(void) recreateWebViewHost");
}

-(id) profileAnalyticsParameter {
	%orig;
	NSLog(@"-(id) profileAnalyticsParameter");
}

-(void) updateViewMode {
	%orig;
	NSLog(@"-(void) updateViewMode");
}

-(bool) shouldUseLoadingSpinner {
	%orig;
	NSLog(@"-(bool) shouldUseLoadingSpinner");
}

-(bool) shouldCheckForTitleJSON {
	%orig;
	NSLog(@"-(bool) shouldCheckForTitleJSON");
}

-(id) titleJSON {
	%orig;
	NSLog(@"-(id) titleJSON");
}

-(void) handleTitleJsonForStickyNav {
	%orig;
	NSLog(@"-(void) handleTitleJsonForStickyNav");
}

-(void) setTitleJSON:(id) {
	%orig;
	NSLog(@"-(void) setTitleJSON:(id)");
}

-(void) jsBridgeGetHeaderDetailsForBackStagePage:(id) {
	%orig;
	NSLog(@"-(void) jsBridgeGetHeaderDetailsForBackStagePage:(id)");
}

-(void) setDominantColor:(id) {
	%orig;
	NSLog(@"-(void) setDominantColor:(id)");
}

-(void) setTitleViewLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleViewLabel:(id)");
}

-(void) updateControls:(id) {
	%orig;
	NSLog(@"-(void) updateControls:(id)");
}

-(void) setBackNavigationButton:(id) {
	%orig;
	NSLog(@"-(void) setBackNavigationButton:(id)");
}

-(id) backNavigationButton {
	%orig;
	NSLog(@"-(id) backNavigationButton");
}

-(void) activateTranslucency {
	%orig;
	NSLog(@"-(void) activateTranslucency");
}

-(bool) isMainArtistPage {
	%orig;
	NSLog(@"-(bool) isMainArtistPage");
}

-(id) titleViewLabel {
	%orig;
	NSLog(@"-(id) titleViewLabel");
}

-(void) adjustNavigationBarElementsColorNoTransition:(double) {
	%orig;
	NSLog(@"-(void) adjustNavigationBarElementsColorNoTransition:(double)");
}

-(void) adjustNavigationBarElementsColorFadeTransition:(double) {
	%orig;
	NSLog(@"-(void) adjustNavigationBarElementsColorFadeTransition:(double)");
}

-(void) setIsDarkTheme:(bool) {
	%orig;
	NSLog(@"-(void) setIsDarkTheme:(bool)");
}

-(id) dominantColor {
	%orig;
	NSLog(@"-(id) dominantColor");
}

-(void) activateStickyTranslucency {
	%orig;
	NSLog(@"-(void) activateStickyTranslucency");
}

-(void) setupForViewWillAppear {
	%orig;
	NSLog(@"-(void) setupForViewWillAppear");
}

-(void) clearHtmlResponse {
	%orig;
	NSLog(@"-(void) clearHtmlResponse");
}

-(bool) shouldClearMyHtml {
	%orig;
	NSLog(@"-(bool) shouldClearMyHtml");
}

-(void) setTmpNavigationController:(id) {
	%orig;
	NSLog(@"-(void) setTmpNavigationController:(id)");
}

-(id) viewControllerAdjacentToNavigation {
	%orig;
	NSLog(@"-(id) viewControllerAdjacentToNavigation");
}

-(bool) shouldClearPreviousHtml {
	%orig;
	NSLog(@"-(bool) shouldClearPreviousHtml");
}

-(void) adjustNavigationBarBasedOnScrollViewOffset {
	%orig;
	NSLog(@"-(void) adjustNavigationBarBasedOnScrollViewOffset");
}

-(bool) doNotDumpHtml {
	%orig;
	NSLog(@"-(bool) doNotDumpHtml");
}

-(void) reviseURLStringOnDisappearIfNecessary {
	%orig;
	NSLog(@"-(void) reviseURLStringOnDisappearIfNecessary");
}

-(long long) translucentNavBarTransitionStyle {
	%orig;
	NSLog(@"-(long long) translucentNavBarTransitionStyle");
}

-(void) adjustNavigationBarElementsColor:(double) forTransitionStyle:(long long) {
	%orig;
	NSLog(@"-(void) adjustNavigationBarElementsColor:(double) forTransitionStyle:(long long)");
}

-(void) performJavascriptFunction:(id) withDelay:(double) {
	%orig;
	NSLog(@"-(void) performJavascriptFunction:(id) withDelay:(double)");
}

-(id) getWebName {
	%orig;
	NSLog(@"-(id) getWebName");
}

-(id) constructUrlForRightNow {
	%orig;
	NSLog(@"-(id) constructUrlForRightNow");
}

-(id) constructUrlRequest {
	%orig;
	NSLog(@"-(id) constructUrlRequest");
}

-(void) setHtmlConnection:(id) {
	%orig;
	NSLog(@"-(void) setHtmlConnection:(id)");
}

-(void) webviewLoadNotification:(id) {
	%orig;
	NSLog(@"-(void) webviewLoadNotification:(id)");
}

-(bool) webViewDidLoadResponse {
	%orig;
	NSLog(@"-(bool) webViewDidLoadResponse");
}

-(void) jsBridgeUpdateFeedsPage {
	%orig;
	NSLog(@"-(void) jsBridgeUpdateFeedsPage");
}

-(void) setupTitleViewLabelForStickyNav {
	%orig;
	NSLog(@"-(void) setupTitleViewLabelForStickyNav");
}

-(void) setupTitleViewLabel {
	%orig;
	NSLog(@"-(void) setupTitleViewLabel");
}

-(void) makeStickyNavBarTranslucent {
	%orig;
	NSLog(@"-(void) makeStickyNavBarTranslucent");
}

-(void) addStatusBarOverLay {
	%orig;
	NSLog(@"-(void) addStatusBarOverLay");
}

-(void) makeNavigationBarTranslucent {
	%orig;
	NSLog(@"-(void) makeNavigationBarTranslucent");
}

-(bool) isRadioPlaying {
	%orig;
	NSLog(@"-(bool) isRadioPlaying");
}

-(void) updateControlsForDarkTheme {
	%orig;
	NSLog(@"-(void) updateControlsForDarkTheme");
}

-(void) updateControlsForLightTheme {
	%orig;
	NSLog(@"-(void) updateControlsForLightTheme");
}

-(id) getQueryParameter {
	%orig;
	NSLog(@"-(id) getQueryParameter");
}

-(bool) isArtistProfile {
	%orig;
	NSLog(@"-(bool) isArtistProfile");
}

-(id) viewControllerIdentifier {
	%orig;
	NSLog(@"-(id) viewControllerIdentifier");
}

-(void) refreshViewWithType:(id) {
	%orig;
	NSLog(@"-(void) refreshViewWithType:(id)");
}

-(id) initWithURLString:(id) title:(id) type:(id) category:(id) more:(id) {
	%orig;
	NSLog(@"-(id) initWithURLString:(id) title:(id) type:(id) category:(id) more:(id)");
}

-(id) initWithURLString:(id) title:(id) type:(id) category:(id) frame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithURLString:(id) title:(id) type:(id) category:(id) frame:(CGRect)");
}

-(void) backButtonPressed {
	%orig;
	NSLog(@"-(void) backButtonPressed");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(void) setWebViewBottomInset:(double) {
	%orig;
	NSLog(@"-(void) setWebViewBottomInset:(double)");
}

-(void) setupSearchButton {
	%orig;
	NSLog(@"-(void) setupSearchButton");
}

-(id) webContentControllerDelegate {
	%orig;
	NSLog(@"-(id) webContentControllerDelegate");
}

-(void) setWebContentControllerDelegate:(id) {
	%orig;
	NSLog(@"-(void) setWebContentControllerDelegate:(id)");
}

-(void) setDoNotDumpHtml:(bool) {
	%orig;
	NSLog(@"-(void) setDoNotDumpHtml:(bool)");
}

-(bool) showsBackArrowLeftBarButtonItem {
	%orig;
	NSLog(@"-(bool) showsBackArrowLeftBarButtonItem");
}

-(void) setShowsBackArrowLeftBarButtonItem:(bool) {
	%orig;
	NSLog(@"-(void) setShowsBackArrowLeftBarButtonItem:(bool)");
}

-(bool) refreshHtmlWithView {
	%orig;
	NSLog(@"-(bool) refreshHtmlWithView");
}

-(void) setViewControllerAdjacentToNavigation:(id) {
	%orig;
	NSLog(@"-(void) setViewControllerAdjacentToNavigation:(id)");
}

-(id) tmpNavigationController {
	%orig;
	NSLog(@"-(id) tmpNavigationController");
}

-(id) htmlConnection {
	%orig;
	NSLog(@"-(id) htmlConnection");
}

-(void) setWebName:(id) {
	%orig;
	NSLog(@"-(void) setWebName:(id)");
}

-(void) setSearchButton:(id) {
	%orig;
	NSLog(@"-(void) setSearchButton:(id)");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(bool) isCurrentUser {
	%orig;
	NSLog(@"-(bool) isCurrentUser");
}

-(bool) isDarkTheme {
	%orig;
	NSLog(@"-(bool) isDarkTheme");
}

-(void) setLoadingView:(id) {
	%orig;
	NSLog(@"-(void) setLoadingView:(id)");
}

-(id) loadingView {
	%orig;
	NSLog(@"-(id) loadingView");
}

-(id) urlString {
	%orig;
	NSLog(@"-(id) urlString");
}

-(void) setUrlString:(id) {
	%orig;
	NSLog(@"-(void) setUrlString:(id)");
}

-(id) statusBarBackgroundView {
	%orig;
	NSLog(@"-(id) statusBarBackgroundView");
}

-(void) setStatusBarBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setStatusBarBackgroundView:(id)");
}

-(void) reloadWebContent {
	%orig;
	NSLog(@"-(void) reloadWebContent");
}

-(void) setLoadingIndicatorView:(id) {
	%orig;
	NSLog(@"-(void) setLoadingIndicatorView:(id)");
}

-(id) loadingIndicatorView {
	%orig;
	NSLog(@"-(id) loadingIndicatorView");
}

-(id) searchButton {
	%orig;
	NSLog(@"-(id) searchButton");
}

-(void) setBgColor:(id) {
	%orig;
	NSLog(@"-(void) setBgColor:(id)");
}

-(id) bgColor {
	%orig;
	NSLog(@"-(id) bgColor");
}

-(void) appDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) appDidEnterBackground:(id)");
}

-(void) updateTitleView {
	%orig;
	NSLog(@"-(void) updateTitleView");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) type {
	%orig;
	NSLog(@"-(id) type");
}

-(void) setType:(id) {
	%orig;
	NSLog(@"-(void) setType:(id)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) initWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) initWithDelegate:(id)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) didReceiveMemoryWarning {
	%orig;
	NSLog(@"-(void) didReceiveMemoryWarning");
}

-(void) setHeader:(id) {
	%orig;
	NSLog(@"-(void) setHeader:(id)");
}

-(id) header {
	%orig;
	NSLog(@"-(id) header");
}

-(void) setCategory:(id) {
	%orig;
	NSLog(@"-(void) setCategory:(id)");
}

-(id) category {
	%orig;
	NSLog(@"-(id) category");
}

%end

%hook PMBackstageModalWebContentController

-(void) setLoadingViewHidden:(bool) {
	%orig;
	NSLog(@"-(void) setLoadingViewHidden:(bool)");
}

-(void) setupCancelButton {
	%orig;
	NSLog(@"-(void) setupCancelButton");
}

-(id) initWithPageTitle:(id) type:(id) category:(id) canceButtonTitle:(id) cancelJsFunction:(id) okayButtonTitle:(id) okayJsFunction:(id) urlString:(id) bgColor:(id) {
	%orig;
	NSLog(@"-(id) initWithPageTitle:(id) type:(id) category:(id) canceButtonTitle:(id) cancelJsFunction:(id) okayButtonTitle:(id) okayJsFunction:(id) urlString:(id) bgColor:(id)");
}

-(id) initWithPageTitle:(id) type:(id) category:(id) canceButtonTitle:(id) cancelJsFunction:(id) okayButtonTitle:(id) okayJsFunction:(id) urlString:(id) {
	%orig;
	NSLog(@"-(id) initWithPageTitle:(id) type:(id) category:(id) canceButtonTitle:(id) cancelJsFunction:(id) okayButtonTitle:(id) okayJsFunction:(id) urlString:(id)");
}

-(void) setOkayButtonTitle:(id) {
	%orig;
	NSLog(@"-(void) setOkayButtonTitle:(id)");
}

-(void) setCancelJsFunction:(id) {
	%orig;
	NSLog(@"-(void) setCancelJsFunction:(id)");
}

-(void) setOkayJsFunction:(id) {
	%orig;
	NSLog(@"-(void) setOkayJsFunction:(id)");
}

-(void) setupOKButton {
	%orig;
	NSLog(@"-(void) setupOKButton");
}

-(void) okay:(id) {
	%orig;
	NSLog(@"-(void) okay:(id)");
}

-(id) onViewDidDismissBlock {
	%orig;
	NSLog(@"-(id) onViewDidDismissBlock");
}

-(id) cancelJsFunction {
	%orig;
	NSLog(@"-(id) cancelJsFunction");
}

-(id) okayJsFunction {
	%orig;
	NSLog(@"-(id) okayJsFunction");
}

-(void) setOnViewDidDismissBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnViewDidDismissBlock:(id)");
}

-(void) cancel:(id) {
	%orig;
	NSLog(@"-(void) cancel:(id)");
}

-(void) setLoadingView:(id) {
	%orig;
	NSLog(@"-(void) setLoadingView:(id)");
}

-(id) loadingView {
	%orig;
	NSLog(@"-(id) loadingView");
}

-(void) setPageTitle:(id) {
	%orig;
	NSLog(@"-(void) setPageTitle:(id)");
}

-(void) setNavBar:(id) {
	%orig;
	NSLog(@"-(void) setNavBar:(id)");
}

-(id) navBar {
	%orig;
	NSLog(@"-(id) navBar");
}

-(void) setCancelButtonTitle:(id) {
	%orig;
	NSLog(@"-(void) setCancelButtonTitle:(id)");
}

-(id) cancelButtonTitle {
	%orig;
	NSLog(@"-(id) cancelButtonTitle");
}

-(id) okayButtonTitle {
	%orig;
	NSLog(@"-(id) okayButtonTitle");
}

-(id) okayButton {
	%orig;
	NSLog(@"-(id) okayButton");
}

-(void) setOkayButton:(id) {
	%orig;
	NSLog(@"-(void) setOkayButton:(id)");
}

-(void) setupNavigationBar {
	%orig;
	NSLog(@"-(void) setupNavigationBar");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(void) setCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelButton:(id)");
}

-(id) cancelButton {
	%orig;
	NSLog(@"-(id) cancelButton");
}

-(id) pageTitle {
	%orig;
	NSLog(@"-(id) pageTitle");
}

%end

%hook PMBrowseCatalogTileViewController

+(id) newCatalogTileViewController {
	%orig;
	NSLog(@"+(id) newCatalogTileViewController");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) statsContext {
	%orig;
	NSLog(@"-(id) statsContext");
}

-(void) presentAlertWithText:(id) {
	%orig;
	NSLog(@"-(void) presentAlertWithText:(id)");
}

-(void) setStatsContext:(id) {
	%orig;
	NSLog(@"-(void) setStatsContext:(id)");
}

-(void) setModuleTitle:(id) {
	%orig;
	NSLog(@"-(void) setModuleTitle:(id)");
}

-(void) setupActivityIndicator {
	%orig;
	NSLog(@"-(void) setupActivityIndicator");
}

-(void) setTileCollectionViewController:(id) {
	%orig;
	NSLog(@"-(void) setTileCollectionViewController:(id)");
}

-(id) tileCollectionViewController {
	%orig;
	NSLog(@"-(id) tileCollectionViewController");
}

-(void) reloadDataAnimated:(bool) {
	%orig;
	NSLog(@"-(void) reloadDataAnimated:(bool)");
}

-(void) setupSourceCardPresenter {
	%orig;
	NSLog(@"-(void) setupSourceCardPresenter");
}

-(void) setSourceCardPresenter:(id) {
	%orig;
	NSLog(@"-(void) setSourceCardPresenter:(id)");
}

-(void) fetchPodcastForCategory:(id) moc:(id) {
	%orig;
	NSLog(@"-(void) fetchPodcastForCategory:(id) moc:(id)");
}

-(void) setPodcastsForCategory:(id) {
	%orig;
	NSLog(@"-(void) setPodcastsForCategory:(id)");
}

-(id) podcastCategoryModel {
	%orig;
	NSLog(@"-(id) podcastCategoryModel");
}

-(id) moduleTitle {
	%orig;
	NSLog(@"-(id) moduleTitle");
}

-(id) podcastsForCategory {
	%orig;
	NSLog(@"-(id) podcastsForCategory");
}

-(void) displayPreviewCardForCell:(id) collectionViewController:(id) data:(id) maxIndex:(long long) {
	%orig;
	NSLog(@"-(void) displayPreviewCardForCell:(id) collectionViewController:(id) data:(id) maxIndex:(long long)");
}

-(void) logBrowseSelectEventForBrowseTileCardCollectionViewController:(id) withTileCardCell:(id) data:(id) {
	%orig;
	NSLog(@"-(void) logBrowseSelectEventForBrowseTileCardCollectionViewController:(id) withTileCardCell:(id) data:(id)");
}

-(id) sourceCardPresenter {
	%orig;
	NSLog(@"-(id) sourceCardPresenter");
}

-(void) browseTileCardCollectionViewController:(id) didSelectCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileCardCollectionViewController:(id) didSelectCell:(id) withData:(id)");
}

-(void) browseTileCardCollectionViewController:(id) didLongPressCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileCardCollectionViewController:(id) didLongPressCell:(id) withData:(id)");
}

-(void) browseTileCardCollectionViewController:(id) logBrowseViewEventWithCell:(id) atIndexpath:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileCardCollectionViewController:(id) logBrowseViewEventWithCell:(id) atIndexpath:(id) withData:(id)");
}

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) setPodcastCategoryModel:(id) {
	%orig;
	NSLog(@"-(void) setPodcastCategoryModel:(id)");
}

-(id) tileCollectionViewContainer {
	%orig;
	NSLog(@"-(id) tileCollectionViewContainer");
}

-(void) setTileCollectionViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setTileCollectionViewContainer:(id)");
}

-(id) categoryId {
	%orig;
	NSLog(@"-(id) categoryId");
}

-(void) setCategoryId:(id) {
	%orig;
	NSLog(@"-(void) setCategoryId:(id)");
}

-(void) browseManagerDidRefreshCatalogForModule:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshCatalogForModule:(id)");
}

-(void) browseManagerDidFailToRefreshCatalogForModule:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshCatalogForModule:(id)");
}

-(id) module {
	%orig;
	NSLog(@"-(id) module");
}

-(void) setModule:(id) {
	%orig;
	NSLog(@"-(void) setModule:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) setCategory:(id) {
	%orig;
	NSLog(@"-(void) setCategory:(id)");
}

-(id) category {
	%orig;
	NSLog(@"-(id) category");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

%end

%hook PMTabMenuViewController

-(id) itemTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) itemTitleAtIndex:(long long)");
}

-(bool) canSetMenuItems:(id) {
	%orig;
	NSLog(@"-(bool) canSetMenuItems:(id)");
}

-(id) menuTableView {
	%orig;
	NSLog(@"-(id) menuTableView");
}

-(void) createPresenters {
	%orig;
	NSLog(@"-(void) createPresenters");
}

-(id) offlineSwitchControl {
	%orig;
	NSLog(@"-(id) offlineSwitchControl");
}

-(void) didTapOfflineFooterView {
	%orig;
	NSLog(@"-(void) didTapOfflineFooterView");
}

-(id) offlineFooterView {
	%orig;
	NSLog(@"-(id) offlineFooterView");
}

-(id) headerViewTopConstraint {
	%orig;
	NSLog(@"-(id) headerViewTopConstraint");
}

-(id) offlineSwitchPresenter {
	%orig;
	NSLog(@"-(id) offlineSwitchPresenter");
}

-(id) artistProfileCallout {
	%orig;
	NSLog(@"-(id) artistProfileCallout");
}

-(void) expandWazeBannerSpace {
	%orig;
	NSLog(@"-(void) expandWazeBannerSpace");
}

-(void) updateSelectedCell:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) updateSelectedCell:(id) atIndexPath:(id)");
}

-(void) updateDeselectedCell:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) updateDeselectedCell:(id) atIndexPath:(id)");
}

-(void) updateHeaderImageFromSubscriptionState {
	%orig;
	NSLog(@"-(void) updateHeaderImageFromSubscriptionState");
}

-(void) setOfflineSwitchPresenter:(id) {
	%orig;
	NSLog(@"-(void) setOfflineSwitchPresenter:(id)");
}

-(void) showOfflineDisabledAlertForPremiumAccessReward {
	%orig;
	NSLog(@"-(void) showOfflineDisabledAlertForPremiumAccessReward");
}

-(unsigned long long) indexForSettingsMenuItem {
	%orig;
	NSLog(@"-(unsigned long long) indexForSettingsMenuItem");
}

-(id) imageFromSubscriptionState {
	%orig;
	NSLog(@"-(id) imageFromSubscriptionState");
}

-(void) offlineSwitchDisabledButtonPressed {
	%orig;
	NSLog(@"-(void) offlineSwitchDisabledButtonPressed");
}

-(void) collapseWazeBannerSpace {
	%orig;
	NSLog(@"-(void) collapseWazeBannerSpace");
}

-(void) displayWazeBanner:(id) inNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) displayWazeBanner:(id) inNowPlaying:(bool)");
}

-(void) updateOfflineStateWithDisplay:(bool) enabled:(bool) switchOn:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineStateWithDisplay:(bool) enabled:(bool) switchOn:(bool)");
}

-(void) manuallyOnlineFailedWithDueTo:(long long) {
	%orig;
	NSLog(@"-(void) manuallyOnlineFailedWithDueTo:(long long)");
}

-(void) offlineSwitchValueChanged:(id) {
	%orig;
	NSLog(@"-(void) offlineSwitchValueChanged:(id)");
}

-(void) disabledSwitchButtonTouchUpInside:(id) {
	%orig;
	NSLog(@"-(void) disabledSwitchButtonTouchUpInside:(id)");
}

-(void) setHeaderViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setHeaderViewTopConstraint:(id)");
}

-(void) setMenuTableView:(id) {
	%orig;
	NSLog(@"-(void) setMenuTableView:(id)");
}

-(void) setOfflineFooterView:(id) {
	%orig;
	NSLog(@"-(void) setOfflineFooterView:(id)");
}

-(void) setArtistProfileCallout:(id) {
	%orig;
	NSLog(@"-(void) setArtistProfileCallout:(id)");
}

-(void) setOfflineSwitchControl:(id) {
	%orig;
	NSLog(@"-(void) setOfflineSwitchControl:(id)");
}

-(void) setOfflineEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setOfflineEnabled:(bool)");
}

-(bool) offlineEnabled {
	%orig;
	NSLog(@"-(bool) offlineEnabled");
}

-(id) offlineManager {
	%orig;
	NSLog(@"-(id) offlineManager");
}

-(id) headerImageView {
	%orig;
	NSLog(@"-(id) headerImageView");
}

-(void) setHeaderImageView:(id) {
	%orig;
	NSLog(@"-(void) setHeaderImageView:(id)");
}

-(unsigned long long) selectedItemIndex {
	%orig;
	NSLog(@"-(unsigned long long) selectedItemIndex");
}

-(void) setSelectedItemIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSelectedItemIndex:(unsigned long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) reloadData {
	%orig;
	NSLog(@"-(void) reloadData");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) headerView {
	%orig;
	NSLog(@"-(id) headerView");
}

-(void) setHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setHeaderView:(id)");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(void) setMenuItems:(id) {
	%orig;
	NSLog(@"-(void) setMenuItems:(id)");
}

-(id) menuItems {
	%orig;
	NSLog(@"-(id) menuItems");
}

%end

%hook PMOnboardingRegistrationViewController

-(void) updateBackgroundImageViewIsLandscape:(bool) {
	%orig;
	NSLog(@"-(void) updateBackgroundImageViewIsLandscape:(bool)");
}

-(void) setErrorMessagesAndIndexPaths:(id) {
	%orig;
	NSLog(@"-(void) setErrorMessagesAndIndexPaths:(id)");
}

-(void) updateSignUpButtonEnabled {
	%orig;
	NSLog(@"-(void) updateSignUpButtonEnabled");
}

-(void) setLastActiveCell:(id) {
	%orig;
	NSLog(@"-(void) setLastActiveCell:(id)");
}

-(void) logViewStateWithPageView:(id) viewMode:(id) {
	%orig;
	NSLog(@"-(void) logViewStateWithPageView:(id) viewMode:(id)");
}

-(void) styleTitleGradientView {
	%orig;
	NSLog(@"-(void) styleTitleGradientView");
}

-(id) lastActiveCell {
	%orig;
	NSLog(@"-(id) lastActiveCell");
}

-(id) emailCell {
	%orig;
	NSLog(@"-(id) emailCell");
}

-(id) signUpButton {
	%orig;
	NSLog(@"-(id) signUpButton");
}

-(void) setIsKeyboardShowing:(bool) {
	%orig;
	NSLog(@"-(void) setIsKeyboardShowing:(bool)");
}

-(id) titleGradientView {
	%orig;
	NSLog(@"-(id) titleGradientView");
}

-(id) termsWebView {
	%orig;
	NSLog(@"-(id) termsWebView");
}

-(id) tableViewHeightConstraint {
	%orig;
	NSLog(@"-(id) tableViewHeightConstraint");
}

-(bool) submissionRequirementsMet {
	%orig;
	NSLog(@"-(bool) submissionRequirementsMet");
}

-(id) lockoutLabel {
	%orig;
	NSLog(@"-(id) lockoutLabel");
}

-(id) errorMessagesAndIndexPaths {
	%orig;
	NSLog(@"-(id) errorMessagesAndIndexPaths");
}

-(void) updateTableViewForCell:(id) indexPath:(id) {
	%orig;
	NSLog(@"-(void) updateTableViewForCell:(id) indexPath:(id)");
}

-(void) setEmailToPopulate:(id) {
	%orig;
	NSLog(@"-(void) setEmailToPopulate:(id)");
}

-(id) birthYearCell {
	%orig;
	NSLog(@"-(id) birthYearCell");
}

-(void) lockoutUserWithMessage:(id) {
	%orig;
	NSLog(@"-(void) lockoutUserWithMessage:(id)");
}

-(void) performNewUserSignUp {
	%orig;
	NSLog(@"-(void) performNewUserSignUp");
}

-(id) zipcodeCell {
	%orig;
	NSLog(@"-(id) zipcodeCell");
}

-(id) genderCell {
	%orig;
	NSLog(@"-(id) genderCell");
}

-(id) emailToPopulate {
	%orig;
	NSLog(@"-(id) emailToPopulate");
}

-(void) updateErrorStateForCell:(id) {
	%orig;
	NSLog(@"-(void) updateErrorStateForCell:(id)");
}

-(void) handleExistingAccount {
	%orig;
	NSLog(@"-(void) handleExistingAccount");
}

-(void) displayForgotPasswordControllerAnimated:(bool) {
	%orig;
	NSLog(@"-(void) displayForgotPasswordControllerAnimated:(bool)");
}

-(void) displayPrivacyPolicyAlertWithTitle:(id) message:(id) {
	%orig;
	NSLog(@"-(void) displayPrivacyPolicyAlertWithTitle:(id) message:(id)");
}

-(void) displayPrivacyPolicyWebView {
	%orig;
	NSLog(@"-(void) displayPrivacyPolicyWebView");
}

-(bool) onboardingCellIsNewAccount:(id) {
	%orig;
	NSLog(@"-(bool) onboardingCellIsNewAccount:(id)");
}

-(bool) onboardingTextCellShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) onboardingTextCellShouldReturn:(id)");
}

-(void) onboardingTextCellDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidEndEditing:(id)");
}

-(void) onboardingTextCellDidChange:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidChange:(id)");
}

-(void) onboardingTextCellDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidBeginEditing:(id)");
}

-(void) onboardingPasswordCell:(id) visible:(bool) {
	%orig;
	NSLog(@"-(void) onboardingPasswordCell:(id) visible:(bool)");
}

-(void) displayWhyBirthYearAlert:(id) {
	%orig;
	NSLog(@"-(void) displayWhyBirthYearAlert:(id)");
}

-(bool) shouldShowBirthMonthDay:(id) {
	%orig;
	NSLog(@"-(bool) shouldShowBirthMonthDay:(id)");
}

-(void) displayWhyZipcodeAlert:(id) {
	%orig;
	NSLog(@"-(void) displayWhyZipcodeAlert:(id)");
}

-(void) genderSelectedForCell:(id) {
	%orig;
	NSLog(@"-(void) genderSelectedForCell:(id)");
}

-(void) displayWhyGenderAlert:(id) {
	%orig;
	NSLog(@"-(void) displayWhyGenderAlert:(id)");
}

-(void) backgroundTapped:(id) {
	%orig;
	NSLog(@"-(void) backgroundTapped:(id)");
}

-(void) signUpButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) signUpButtonTapped:(id)");
}

-(void) setTitleGradientView:(id) {
	%orig;
	NSLog(@"-(void) setTitleGradientView:(id)");
}

-(void) setTermsWebView:(id) {
	%orig;
	NSLog(@"-(void) setTermsWebView:(id)");
}

-(void) setSignUpButton:(id) {
	%orig;
	NSLog(@"-(void) setSignUpButton:(id)");
}

-(void) setLockoutLabel:(id) {
	%orig;
	NSLog(@"-(void) setLockoutLabel:(id)");
}

-(void) setTableViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTableViewHeightConstraint:(id)");
}

-(bool) isKeyboardShowing {
	%orig;
	NSLog(@"-(bool) isKeyboardShowing");
}

-(void) setupTermsView {
	%orig;
	NSLog(@"-(void) setupTermsView");
}

-(id) tableViewBottomSpacingConstraint {
	%orig;
	NSLog(@"-(id) tableViewBottomSpacingConstraint");
}

-(void) createUserAccountRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) createUserAccountRequest:(id) finishedWithResult:(id)");
}

-(void) createUserAccountRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) createUserAccountRequest:(id) failedWithErrorCode:(long long)");
}

-(void) applyDefaultYear {
	%orig;
	NSLog(@"-(void) applyDefaultYear");
}

-(void) setTableViewBottomSpacingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTableViewBottomSpacingConstraint:(id)");
}

-(id) nextIndexPath:(id) {
	%orig;
	NSLog(@"-(id) nextIndexPath:(id)");
}

-(void) cancelButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) cancelButtonTapped:(id)");
}

-(void) keyboardWillHide:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillHide:(id)");
}

-(void) keyboardWillShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShow:(id)");
}

-(id) passwordCell {
	%orig;
	NSLog(@"-(id) passwordCell");
}

-(void) setLogoView:(id) {
	%orig;
	NSLog(@"-(void) setLogoView:(id)");
}

-(id) logoView {
	%orig;
	NSLog(@"-(id) logoView");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(void) setHeaderTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderTitleLabel:(id)");
}

-(id) headerTitleLabel {
	%orig;
	NSLog(@"-(id) headerTitleLabel");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) headerView {
	%orig;
	NSLog(@"-(id) headerView");
}

-(void) setHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setHeaderView:(id)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(void) setCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelButton:(id)");
}

-(id) cancelButton {
	%orig;
	NSLog(@"-(id) cancelButton");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) keyboardDidShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardDidShow:(id)");
}

-(void) keyboardDidHide:(id) {
	%orig;
	NSLog(@"-(void) keyboardDidHide:(id)");
}

-(void) hideKeyboard {
	%orig;
	NSLog(@"-(void) hideKeyboard");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

%end

%hook PMMessageUploadProgressController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) animateSuccessfulMessageUpload {
	%orig;
	NSLog(@"-(void) animateSuccessfulMessageUpload");
}

-(id) progressViewHeightConstraint {
	%orig;
	NSLog(@"-(id) progressViewHeightConstraint");
}

-(id) checkMarkImageView {
	%orig;
	NSLog(@"-(id) checkMarkImageView");
}

-(id) detailMessageLabel {
	%orig;
	NSLog(@"-(id) detailMessageLabel");
}

-(void) updateProgressTitle {
	%orig;
	NSLog(@"-(void) updateProgressTitle");
}

-(void) okTouched:(id) {
	%orig;
	NSLog(@"-(void) okTouched:(id)");
}

-(void) setProgressViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setProgressViewHeightConstraint:(id)");
}

-(void) setCheckMarkImageView:(id) {
	%orig;
	NSLog(@"-(void) setCheckMarkImageView:(id)");
}

-(void) setDetailMessageLabel:(id) {
	%orig;
	NSLog(@"-(void) setDetailMessageLabel:(id)");
}

-(id) okButton {
	%orig;
	NSLog(@"-(id) okButton");
}

-(void) setOkButton:(id) {
	%orig;
	NSLog(@"-(void) setOkButton:(id)");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) setViewModel:(id) {
	%orig;
	NSLog(@"-(void) setViewModel:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(void) setupView {
	%orig;
	NSLog(@"-(void) setupView");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) setProgress:(double) {
	%orig;
	NSLog(@"-(void) setProgress:(double)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(double) progress {
	%orig;
	NSLog(@"-(double) progress");
}

%end

%hook PMInboxListViewController

-(void) actionItemTappedForInboxView:(id) {
	%orig;
	NSLog(@"-(void) actionItemTappedForInboxView:(id)");
}

-(id) setUpTableView {
	%orig;
	NSLog(@"-(id) setUpTableView");
}

-(void) setUpConstraintsWithViews:(id) {
	%orig;
	NSLog(@"-(void) setUpConstraintsWithViews:(id)");
}

-(void) setLastGetInboxRPCCall:(double) {
	%orig;
	NSLog(@"-(void) setLastGetInboxRPCCall:(double)");
}

-(void) notificationsUpdated:(id) {
	%orig;
	NSLog(@"-(void) notificationsUpdated:(id)");
}

-(void) markMessageSeenWithNotification:(id) {
	%orig;
	NSLog(@"-(void) markMessageSeenWithNotification:(id)");
}

-(void) userDidLogout:(id) {
	%orig;
	NSLog(@"-(void) userDidLogout:(id)");
}

-(void) userDidLogin:(id) {
	%orig;
	NSLog(@"-(void) userDidLogin:(id)");
}

-(void) userDidAutoLogin:(id) {
	%orig;
	NSLog(@"-(void) userDidAutoLogin:(id)");
}

-(void) markNotification:(id) withAction:(long long) {
	%orig;
	NSLog(@"-(void) markNotification:(id) withAction:(long long)");
}

-(void) setViewChangedDueToMessageClick:(bool) {
	%orig;
	NSLog(@"-(void) setViewChangedDueToMessageClick:(bool)");
}

-(bool) showInboxPandoraNotificationCell:(id) {
	%orig;
	NSLog(@"-(bool) showInboxPandoraNotificationCell:(id)");
}

-(void) showNoMessageView {
	%orig;
	NSLog(@"-(void) showNoMessageView");
}

-(long long) emptyInboxFetchCount {
	%orig;
	NSLog(@"-(long long) emptyInboxFetchCount");
}

-(void) setEmptyInboxFetchCount:(long long) {
	%orig;
	NSLog(@"-(void) setEmptyInboxFetchCount:(long long)");
}

-(id) noMessageView {
	%orig;
	NSLog(@"-(id) noMessageView");
}

-(void) hasSetReminderOnNotification:(id) forInboxView:(id) {
	%orig;
	NSLog(@"-(void) hasSetReminderOnNotification:(id) forInboxView:(id)");
}

-(void) presentReminderFailedAlert {
	%orig;
	NSLog(@"-(void) presentReminderFailedAlert");
}

-(void) displayEnableNotificationTeachMark {
	%orig;
	NSLog(@"-(void) displayEnableNotificationTeachMark");
}

-(void) setNoMessageView:(id) {
	%orig;
	NSLog(@"-(void) setNoMessageView:(id)");
}

-(double) lastGetInboxRPCCall {
	%orig;
	NSLog(@"-(double) lastGetInboxRPCCall");
}

-(bool) viewChangedDueToMessageClick {
	%orig;
	NSLog(@"-(bool) viewChangedDueToMessageClick");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PMBaseAdVideoPlayerViewController

-(bool) remoteControlTogglePlayPause {
	%orig;
	NSLog(@"-(bool) remoteControlTogglePlayPause");
}

-(bool) remoteControlPause {
	%orig;
	NSLog(@"-(bool) remoteControlPause");
}

-(bool) remoteControlPlay {
	%orig;
	NSLog(@"-(bool) remoteControlPlay");
}

-(bool) remoteControlNextTrack {
	%orig;
	NSLog(@"-(bool) remoteControlNextTrack");
}

-(bool) remoteControlStop {
	%orig;
	NSLog(@"-(bool) remoteControlStop");
}

-(void) resumeVideo {
	%orig;
	NSLog(@"-(void) resumeVideo");
}

-(id) initWithContentPMAVAssetURL:(id) showsMoreInfoButton:(bool) showsSkipButton:(bool) adIdentifiers:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithContentPMAVAssetURL:(id) showsMoreInfoButton:(bool) showsSkipButton:(bool) adIdentifiers:(id) delegate:(id)");
}

-(void) setDidRotate:(bool) {
	%orig;
	NSLog(@"-(void) setDidRotate:(bool)");
}

-(void) switchLayoutForProgressToolbar:(bool) {
	%orig;
	NSLog(@"-(void) switchLayoutForProgressToolbar:(bool)");
}

-(id) progressToolbar {
	%orig;
	NSLog(@"-(id) progressToolbar");
}

-(void) updateProgressLabels {
	%orig;
	NSLog(@"-(void) updateProgressLabels");
}

-(id) reward {
	%orig;
	NSLog(@"-(id) reward");
}

-(long long) rewardThresholdSeconds {
	%orig;
	NSLog(@"-(long long) rewardThresholdSeconds");
}

-(void) registerInteraction {
	%orig;
	NSLog(@"-(void) registerInteraction");
}

-(bool) rewardThresholdMet {
	%orig;
	NSLog(@"-(bool) rewardThresholdMet");
}

-(void) showCustomControls {
	%orig;
	NSLog(@"-(void) showCustomControls");
}

-(long long) skipDelay {
	%orig;
	NSLog(@"-(long long) skipDelay");
}

-(void) initView {
	%orig;
	NSLog(@"-(void) initView");
}

-(bool) canBeSkipped {
	%orig;
	NSLog(@"-(bool) canBeSkipped");
}

-(void) showSkipIfNotAlreadyShowing {
	%orig;
	NSLog(@"-(void) showSkipIfNotAlreadyShowing");
}

-(id) progressSlider {
	%orig;
	NSLog(@"-(id) progressSlider");
}

-(void) layoutControlsForContainer {
	%orig;
	NSLog(@"-(void) layoutControlsForContainer");
}

-(void) hideCustomControls {
	%orig;
	NSLog(@"-(void) hideCustomControls");
}

-(void) disableVideoTracks {
	%orig;
	NSLog(@"-(void) disableVideoTracks");
}

-(id) initWithContentURL:(id) showsMoreInfoButton:(bool) showsSkipButton:(bool) adIdentifiers:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithContentURL:(id) showsMoreInfoButton:(bool) showsSkipButton:(bool) adIdentifiers:(id) delegate:(id)");
}

-(id) pmurl {
	%orig;
	NSLog(@"-(id) pmurl");
}

-(void) addAVPlayerObservers {
	%orig;
	NSLog(@"-(void) addAVPlayerObservers");
}

-(void) audioInterruption:(id) {
	%orig;
	NSLog(@"-(void) audioInterruption:(id)");
}

-(void) removeTimeObserver {
	%orig;
	NSLog(@"-(void) removeTimeObserver");
}

-(void) removeAVPlayerObservers {
	%orig;
	NSLog(@"-(void) removeAVPlayerObservers");
}

-(void) updateNowPlayingInfoCenter {
	%orig;
	NSLog(@"-(void) updateNowPlayingInfoCenter");
}

-(void) enableVideoTracks {
	%orig;
	NSLog(@"-(void) enableVideoTracks");
}

-(void) checkNeedToResume {
	%orig;
	NSLog(@"-(void) checkNeedToResume");
}

-(bool) isEjected {
	%orig;
	NSLog(@"-(bool) isEjected");
}

-(void) moviePlaybackFinished:(id) {
	%orig;
	NSLog(@"-(void) moviePlaybackFinished:(id)");
}

-(void) updateScrubberUI {
	%orig;
	NSLog(@"-(void) updateScrubberUI");
}

-(id) titleMessageLabel {
	%orig;
	NSLog(@"-(id) titleMessageLabel");
}

-(id) alternateProgressSlider {
	%orig;
	NSLog(@"-(id) alternateProgressSlider");
}

-(bool) didAdjustScreenWidth {
	%orig;
	NSLog(@"-(bool) didAdjustScreenWidth");
}

-(void) setLastScreenWidth:(double) {
	%orig;
	NSLog(@"-(void) setLastScreenWidth:(double)");
}

-(double) lastScreenWidth {
	%orig;
	NSLog(@"-(double) lastScreenWidth");
}

-(bool) viewHasInitialized {
	%orig;
	NSLog(@"-(bool) viewHasInitialized");
}

-(void) setViewHasInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setViewHasInitialized:(bool)");
}

-(void) startProgressSliderTimer {
	%orig;
	NSLog(@"-(void) startProgressSliderTimer");
}

-(void) setStartPlayingWhenReady:(bool) {
	%orig;
	NSLog(@"-(void) setStartPlayingWhenReady:(bool)");
}

-(void) updateScrubberUI:(id) {
	%orig;
	NSLog(@"-(void) updateScrubberUI:(id)");
}

-(bool) startPlayingWhenReady {
	%orig;
	NSLog(@"-(bool) startPlayingWhenReady");
}

-(long long) numberOfVideoRequestRetriesDueToBadUrlError {
	%orig;
	NSLog(@"-(long long) numberOfVideoRequestRetriesDueToBadUrlError");
}

-(void) setNumberOfVideoRequestRetriesDueToBadUrlError:(long long) {
	%orig;
	NSLog(@"-(void) setNumberOfVideoRequestRetriesDueToBadUrlError:(long long)");
}

-(void) reloadVideoAndReportVideoFailureWithMessage:(id) {
	%orig;
	NSLog(@"-(void) reloadVideoAndReportVideoFailureWithMessage:(id)");
}

-(void) stopVideoAndReportVideoFailureWithMessage:(id) {
	%orig;
	NSLog(@"-(void) stopVideoAndReportVideoFailureWithMessage:(id)");
}

-(void) setPlaybackTimeAtDismissal:(double) {
	%orig;
	NSLog(@"-(void) setPlaybackTimeAtDismissal:(double)");
}

-(void) setDurationAtDismissal:(double) {
	%orig;
	NSLog(@"-(void) setDurationAtDismissal:(double)");
}

-(void) removePlayer {
	%orig;
	NSLog(@"-(void) removePlayer");
}

-(double) playbackTimeAtDismissal {
	%orig;
	NSLog(@"-(double) playbackTimeAtDismissal");
}

-(double) durationAtDismissal {
	%orig;
	NSLog(@"-(double) durationAtDismissal");
}

-(id) playerTimeObserver {
	%orig;
	NSLog(@"-(id) playerTimeObserver");
}

-(void) updateProgressSlider {
	%orig;
	NSLog(@"-(void) updateProgressSlider");
}

-(void) setPlayerTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) setPlayerTimeObserver:(id)");
}

-(id) timeElapsedLabel {
	%orig;
	NSLog(@"-(id) timeElapsedLabel");
}

-(void) setBlockedSeek:(bool) {
	%orig;
	NSLog(@"-(void) setBlockedSeek:(bool)");
}

-(void) setStartingScrubPosition:(double) {
	%orig;
	NSLog(@"-(void) setStartingScrubPosition:(double)");
}

-(void) setUserHasScrubbed:(bool) {
	%orig;
	NSLog(@"-(void) setUserHasScrubbed:(bool)");
}

-(void) setPreviousRate:(double) {
	%orig;
	NSLog(@"-(void) setPreviousRate:(double)");
}

-(bool) blockedSeek {
	%orig;
	NSLog(@"-(bool) blockedSeek");
}

-(bool) currentlySeeking {
	%orig;
	NSLog(@"-(bool) currentlySeeking");
}

-(double) startingScrubPosition {
	%orig;
	NSLog(@"-(double) startingScrubPosition");
}

-(double) previousRate {
	%orig;
	NSLog(@"-(double) previousRate");
}

-(void) setCurrentlySeeking:(bool) {
	%orig;
	NSLog(@"-(void) setCurrentlySeeking:(bool)");
}

-(void) implicitPause {
	%orig;
	NSLog(@"-(void) implicitPause");
}

-(void) userInitiatedPause {
	%orig;
	NSLog(@"-(void) userInitiatedPause");
}

-(void) playTapped {
	%orig;
	NSLog(@"-(void) playTapped");
}

-(void) pauseTapped {
	%orig;
	NSLog(@"-(void) pauseTapped");
}

-(void) doneTapped {
	%orig;
	NSLog(@"-(void) doneTapped");
}

-(void) moreTapped {
	%orig;
	NSLog(@"-(void) moreTapped");
}

-(void) ejectVideo {
	%orig;
	NSLog(@"-(void) ejectVideo");
}

-(void) scrub:(id) {
	%orig;
	NSLog(@"-(void) scrub:(id)");
}

-(void*) statusChangeContext {
	%orig;
	NSLog(@"-(void*) statusChangeContext");
}

-(void*) rateChangeContext {
	%orig;
	NSLog(@"-(void*) rateChangeContext");
}

-(long long) maxNumberOfVideoRequestRetriesDueToBadUrlError {
	%orig;
	NSLog(@"-(long long) maxNumberOfVideoRequestRetriesDueToBadUrlError");
}

-(void) setProgressToolbar:(id) {
	%orig;
	NSLog(@"-(void) setProgressToolbar:(id)");
}

-(void) setReward:(id) {
	%orig;
	NSLog(@"-(void) setReward:(id)");
}

-(void) setSkipDelay:(long long) {
	%orig;
	NSLog(@"-(void) setSkipDelay:(long long)");
}

-(void) setRewardThresholdSeconds:(long long) {
	%orig;
	NSLog(@"-(void) setRewardThresholdSeconds:(long long)");
}

-(bool) userHasScrubbed {
	%orig;
	NSLog(@"-(bool) userHasScrubbed");
}

-(void) setProgressSlider:(id) {
	%orig;
	NSLog(@"-(void) setProgressSlider:(id)");
}

-(void) setTimeElapsedLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimeElapsedLabel:(id)");
}

-(void) setTitleMessageLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleMessageLabel:(id)");
}

-(void) setAlternateProgressSlider:(id) {
	%orig;
	NSLog(@"-(void) setAlternateProgressSlider:(id)");
}

-(void) setPmurl:(id) {
	%orig;
	NSLog(@"-(void) setPmurl:(id)");
}

-(id) friendlyObstructions {
	%orig;
	NSLog(@"-(id) friendlyObstructions");
}

-(void) willResignActive:(id) {
	%orig;
	NSLog(@"-(void) willResignActive:(id)");
}

-(void) beginInterruption {
	%orig;
	NSLog(@"-(void) beginInterruption");
}

-(void) endInterruption {
	%orig;
	NSLog(@"-(void) endInterruption");
}

-(void) beginScrubbing:(id) {
	%orig;
	NSLog(@"-(void) beginScrubbing:(id)");
}

-(void) endScrubbing:(id) {
	%orig;
	NSLog(@"-(void) endScrubbing:(id)");
}

-(id) avPlayer {
	%orig;
	NSLog(@"-(id) avPlayer");
}

-(double) currentPlaybackTime {
	%orig;
	NSLog(@"-(double) currentPlaybackTime");
}

-(id) playerView {
	%orig;
	NSLog(@"-(id) playerView");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(void) setPlayerView:(id) {
	%orig;
	NSLog(@"-(void) setPlayerView:(id)");
}

-(bool) playing {
	%orig;
	NSLog(@"-(bool) playing");
}

-(void) startVideo {
	%orig;
	NSLog(@"-(void) startVideo");
}

-(void) stopVideo {
	%orig;
	NSLog(@"-(void) stopVideo");
}

-(void) pauseVideo {
	%orig;
	NSLog(@"-(void) pauseVideo");
}

-(void) setTimeRemainingLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimeRemainingLabel:(id)");
}

-(id) timeRemainingLabel {
	%orig;
	NSLog(@"-(id) timeRemainingLabel");
}

-(void) setAvPlayer:(id) {
	%orig;
	NSLog(@"-(void) setAvPlayer:(id)");
}

-(void) setTitleContainer:(id) {
	%orig;
	NSLog(@"-(void) setTitleContainer:(id)");
}

-(id) titleContainer {
	%orig;
	NSLog(@"-(id) titleContainer");
}

-(void) didBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) didBecomeActive:(id)");
}

-(bool) scrubbingEnabled {
	%orig;
	NSLog(@"-(bool) scrubbingEnabled");
}

-(void) setScrubbingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setScrubbingEnabled:(bool)");
}

-(void) seekToTime:(?) {
	%orig;
	NSLog(@"-(void) seekToTime:(?)");
}

-(id) titleMessage {
	%orig;
	NSLog(@"-(id) titleMessage");
}

-(void) setTitleMessage:(id) {
	%orig;
	NSLog(@"-(void) setTitleMessage:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(bool) canBecomeFirstResponder {
	%orig;
	NSLog(@"-(bool) canBecomeFirstResponder");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

-(double) duration {
	%orig;
	NSLog(@"-(double) duration");
}

-(void) didEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) didEnterBackground:(id)");
}

-(bool) didRotate {
	%orig;
	NSLog(@"-(bool) didRotate");
}

-(bool) paused {
	%orig;
	NSLog(@"-(bool) paused");
}

%end

%hook PMPhoneAdVideoPlayerViewController

-(id) controlsContainer {
	%orig;
	NSLog(@"-(id) controlsContainer");
}

-(void) resumeVideo {
	%orig;
	NSLog(@"-(void) resumeVideo");
}

-(id) initWithContentPMAVAssetURL:(id) showsMoreInfoButton:(bool) showsSkipButton:(bool) adIdentifiers:(id) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithContentPMAVAssetURL:(id) showsMoreInfoButton:(bool) showsSkipButton:(bool) adIdentifiers:(id) delegate:(id)");
}

-(void) updateHomeIndicatorVisibility {
	%orig;
	NSLog(@"-(void) updateHomeIndicatorVisibility");
}

-(void) updatePlayerViewTransformForDeviceOrientation:(long long) {
	%orig;
	NSLog(@"-(void) updatePlayerViewTransformForDeviceOrientation:(long long)");
}

-(id) skipRewardAlertController {
	%orig;
	NSLog(@"-(id) skipRewardAlertController");
}

-(bool) shouldTransformVerticalVideo {
	%orig;
	NSLog(@"-(bool) shouldTransformVerticalVideo");
}

-(id) progressEnforcementBannerView {
	%orig;
	NSLog(@"-(id) progressEnforcementBannerView");
}

-(void) updateProgressLabels {
	%orig;
	NSLog(@"-(void) updateProgressLabels");
}

-(id) progressEnforcementTitleLabel {
	%orig;
	NSLog(@"-(id) progressEnforcementTitleLabel");
}

-(id) progressEnforcementCancelButton {
	%orig;
	NSLog(@"-(id) progressEnforcementCancelButton");
}

-(id) progressEnforcementLearnMoreButton {
	%orig;
	NSLog(@"-(id) progressEnforcementLearnMoreButton");
}

-(void) showSkipRewardActionSheet {
	%orig;
	NSLog(@"-(void) showSkipRewardActionSheet");
}

-(void) setSkipRewardAlertController:(id) {
	%orig;
	NSLog(@"-(void) setSkipRewardAlertController:(id)");
}

-(void) blinkDoneOff {
	%orig;
	NSLog(@"-(void) blinkDoneOff");
}

-(void) blinkDoneOn {
	%orig;
	NSLog(@"-(void) blinkDoneOn");
}

-(void) showCustomControls {
	%orig;
	NSLog(@"-(void) showCustomControls");
}

-(void) blinkDone {
	%orig;
	NSLog(@"-(void) blinkDone");
}

-(void) initView {
	%orig;
	NSLog(@"-(void) initView");
}

-(void) progressEnforcementCancelButtonTouched:(id) {
	%orig;
	NSLog(@"-(void) progressEnforcementCancelButtonTouched:(id)");
}

-(void) showSkipIfNotAlreadyShowing {
	%orig;
	NSLog(@"-(void) showSkipIfNotAlreadyShowing");
}

-(void) updateMoreInfoBarButtonItem {
	%orig;
	NSLog(@"-(void) updateMoreInfoBarButtonItem");
}

-(id) controlsShower {
	%orig;
	NSLog(@"-(id) controlsShower");
}

-(void) hideCustomControls {
	%orig;
	NSLog(@"-(void) hideCustomControls");
}

-(void) setControlsContainer:(id) {
	%orig;
	NSLog(@"-(void) setControlsContainer:(id)");
}

-(void) setControlsShower:(id) {
	%orig;
	NSLog(@"-(void) setControlsShower:(id)");
}

-(void) setProgressEnforcementBannerView:(id) {
	%orig;
	NSLog(@"-(void) setProgressEnforcementBannerView:(id)");
}

-(void) setProgressEnforcementTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setProgressEnforcementTitleLabel:(id)");
}

-(void) setProgressEnforcementCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setProgressEnforcementCancelButton:(id)");
}

-(void) setProgressEnforcementLearnMoreButton:(id) {
	%orig;
	NSLog(@"-(void) setProgressEnforcementLearnMoreButton:(id)");
}

-(id) friendlyObstructions {
	%orig;
	NSLog(@"-(id) friendlyObstructions");
}

-(void) deviceOrientationDidChange:(id) {
	%orig;
	NSLog(@"-(void) deviceOrientationDidChange:(id)");
}

-(void) pauseVideo {
	%orig;
	NSLog(@"-(void) pauseVideo");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) prefersHomeIndicatorAutoHidden {
	%orig;
	NSLog(@"-(bool) prefersHomeIndicatorAutoHidden");
}

%end

%hook PMBaseAddVarietyController

-(id) stationNameLabel {
	%orig;
	NSLog(@"-(id) stationNameLabel");
}

-(id) stationArtImageView {
	%orig;
	NSLog(@"-(id) stationArtImageView");
}

-(void) setStationArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setStationArtImageView:(id)");
}

-(void) setStationNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationNameLabel:(id)");
}

-(id) sectionTitleAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) sectionTitleAtIndex:(long long)");
}

-(void) dismissController:(id) {
	%orig;
	NSLog(@"-(void) dismissController:(id)");
}

-(void) setupSearchField {
	%orig;
	NSLog(@"-(void) setupSearchField");
}

-(id) searchTextField {
	%orig;
	NSLog(@"-(id) searchTextField");
}

-(void) setSearchTextField:(id) {
	%orig;
	NSLog(@"-(void) setSearchTextField:(id)");
}

-(void) searchTextField:(id) didChangeWithText:(id) {
	%orig;
	NSLog(@"-(void) searchTextField:(id) didChangeWithText:(id)");
}

-(void) searchTextField:(id) didTapReturnWithText:(id) {
	%orig;
	NSLog(@"-(void) searchTextField:(id) didTapReturnWithText:(id)");
}

-(void) searchTextFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) searchTextFieldDidBeginEditing:(id)");
}

-(void) searchTextFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) searchTextFieldDidEndEditing:(id)");
}

-(void) searchTextFieldDidTapCloseButton:(id) {
	%orig;
	NSLog(@"-(void) searchTextFieldDidTapCloseButton:(id)");
}

-(void) setupNavBar {
	%orig;
	NSLog(@"-(void) setupNavBar");
}

-(void) setupStationArt {
	%orig;
	NSLog(@"-(void) setupStationArt");
}

-(id) stationArtContainer {
	%orig;
	NSLog(@"-(id) stationArtContainer");
}

-(void) setStationArtContainer:(id) {
	%orig;
	NSLog(@"-(void) setStationArtContainer:(id)");
}

-(void) setupStationLabels {
	%orig;
	NSLog(@"-(void) setupStationLabels");
}

-(id) stationSubtitleLabel {
	%orig;
	NSLog(@"-(id) stationSubtitleLabel");
}

-(void) setStationSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationSubtitleLabel:(id)");
}

-(id) searchContainer {
	%orig;
	NSLog(@"-(id) searchContainer");
}

-(long long) searchLoggingSequence {
	%orig;
	NSLog(@"-(long long) searchLoggingSequence");
}

-(void) setSearchLoggingSequence:(long long) {
	%orig;
	NSLog(@"-(void) setSearchLoggingSequence:(long long)");
}

-(long long) searchMode {
	%orig;
	NSLog(@"-(long long) searchMode");
}

-(id) visibleMusicIDs {
	%orig;
	NSLog(@"-(id) visibleMusicIDs");
}

-(id) collapsedServerResults {
	%orig;
	NSLog(@"-(id) collapsedServerResults");
}

-(void) setSearchLoggingSelectedInfo:(id) {
	%orig;
	NSLog(@"-(void) setSearchLoggingSelectedInfo:(id)");
}

-(id) searchLoggingSelectedInfo {
	%orig;
	NSLog(@"-(id) searchLoggingSelectedInfo");
}

-(bool) isSearchQueryNotBlank:(id) {
	%orig;
	NSLog(@"-(bool) isSearchQueryNotBlank:(id)");
}

-(void) searchRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) searchRequest:(id) finishedWithResult:(id)");
}

-(void) showNoSearchMatchWithText:(id) {
	%orig;
	NSLog(@"-(void) showNoSearchMatchWithText:(id)");
}

-(void) setSearchContainer:(id) {
	%orig;
	NSLog(@"-(void) setSearchContainer:(id)");
}

-(void) removeKeyboardListeners {
	%orig;
	NSLog(@"-(void) removeKeyboardListeners");
}

-(double) additionalHeightOnKeyboadWillShow {
	%orig;
	NSLog(@"-(double) additionalHeightOnKeyboadWillShow");
}

-(void) addKeyboardListeners {
	%orig;
	NSLog(@"-(void) addKeyboardListeners");
}

-(void) getSeedSuggestionMusicRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) getSeedSuggestionMusicRequest:(id) finishedWithResult:(id)");
}

-(id) leftVerticalBorder {
	%orig;
	NSLog(@"-(id) leftVerticalBorder");
}

-(id) searchTextBottomBorder {
	%orig;
	NSLog(@"-(id) searchTextBottomBorder");
}

-(id) getSearchResultSeedModelWithIndexPath:(id) {
	%orig;
	NSLog(@"-(id) getSearchResultSeedModelWithIndexPath:(id)");
}

-(void) setLeftVerticalBorder:(id) {
	%orig;
	NSLog(@"-(void) setLeftVerticalBorder:(id)");
}

-(void) setSearchTextBottomBorder:(id) {
	%orig;
	NSLog(@"-(void) setSearchTextBottomBorder:(id)");
}

-(void) autoCompleteRespondedWith:(id) forSearchText:(id) context:(id) {
	%orig;
	NSLog(@"-(void) autoCompleteRespondedWith:(id) forSearchText:(id) context:(id)");
}

-(void) autoCompleteWasCancelledForSearchText:(id) context:(id) {
	%orig;
	NSLog(@"-(void) autoCompleteWasCancelledForSearchText:(id) context:(id)");
}

-(void) autoCompleteDidFailForSearchText:(id) context:(id) {
	%orig;
	NSLog(@"-(void) autoCompleteDidFailForSearchText:(id) context:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) setupController {
	%orig;
	NSLog(@"-(void) setupController");
}

-(void) scrollViewDidEndScrolling {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrolling");
}

-(void) keyboardWillHide:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillHide:(id)");
}

-(void) keyboardWillShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShow:(id)");
}

-(void) setupTableView {
	%orig;
	NSLog(@"-(void) setupTableView");
}

-(void) setupDefaults {
	%orig;
	NSLog(@"-(void) setupDefaults");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(bool) disablesAutomaticKeyboardDismissal {
	%orig;
	NSLog(@"-(bool) disablesAutomaticKeyboardDismissal");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PMPhoneAddVarietyController

+(id) controllerForStation:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) controllerForStation:(id) delegate:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) backButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) backButtonTapped:(id)");
}

-(void) dismissController:(id) {
	%orig;
	NSLog(@"-(void) dismissController:(id)");
}

-(void) setPresentedAsModal:(bool) {
	%orig;
	NSLog(@"-(void) setPresentedAsModal:(bool)");
}

-(void) setupSearchField {
	%orig;
	NSLog(@"-(void) setupSearchField");
}

-(void) setupNavBar {
	%orig;
	NSLog(@"-(void) setupNavBar");
}

-(void) setupStationArt {
	%orig;
	NSLog(@"-(void) setupStationArt");
}

-(void) setupStationLabels {
	%orig;
	NSLog(@"-(void) setupStationLabels");
}

-(bool) presentedAsModal {
	%orig;
	NSLog(@"-(bool) presentedAsModal");
}

-(void) setupController {
	%orig;
	NSLog(@"-(void) setupController");
}

-(void) setupTableView {
	%orig;
	NSLog(@"-(void) setupTableView");
}

%end

%hook PMMediaWebViewController

+(void) presentWebContentControllerWithURLString:(id) title:(id) statsParams:(id) {
	%orig;
	NSLog(@"+(void) presentWebContentControllerWithURLString:(id) title:(id) statsParams:(id)");
}

+(bool) tryLoadUrlInApp:(id) {
	%orig;
	NSLog(@"+(bool) tryLoadUrlInApp:(id)");
}

-(id) initWithURLString:(id) title:(id) {
	%orig;
	NSLog(@"-(id) initWithURLString:(id) title:(id)");
}

-(void) setStatsParams:(id) {
	%orig;
	NSLog(@"-(void) setStatsParams:(id)");
}

-(id) initWithURLString:(id) title:(id) statsParams:(id) {
	%orig;
	NSLog(@"-(id) initWithURLString:(id) title:(id) statsParams:(id)");
}

-(id) contentWebView {
	%orig;
	NSLog(@"-(id) contentWebView");
}

-(void) setIsInitialContentLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setIsInitialContentLoaded:(bool)");
}

-(void) moreOptions:(id) {
	%orig;
	NSLog(@"-(void) moreOptions:(id)");
}

-(void) handleButtonsState {
	%orig;
	NSLog(@"-(void) handleButtonsState");
}

-(void) copyUrl {
	%orig;
	NSLog(@"-(void) copyUrl");
}

-(void) openInSafari {
	%orig;
	NSLog(@"-(void) openInSafari");
}

-(bool) isInitialContentLoaded {
	%orig;
	NSLog(@"-(bool) isInitialContentLoaded");
}

-(id) statsParams {
	%orig;
	NSLog(@"-(id) statsParams");
}

-(void) logEvent:(id) {
	%orig;
	NSLog(@"-(void) logEvent:(id)");
}

-(void) setLoadingView:(id) {
	%orig;
	NSLog(@"-(void) setLoadingView:(id)");
}

-(id) loadingView {
	%orig;
	NSLog(@"-(id) loadingView");
}

-(id) contentURL {
	%orig;
	NSLog(@"-(id) contentURL");
}

-(void) setContentURL:(id) {
	%orig;
	NSLog(@"-(void) setContentURL:(id)");
}

-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id)");
}

-(void) webView:(id) didStartProvisionalNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didStartProvisionalNavigation:(id)");
}

-(void) webView:(id) didFinishNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFinishNavigation:(id)");
}

-(id) webView:(id) createWebViewWithConfiguration:(id) forNavigationAction:(id) windowFeatures:(id) {
	%orig;
	NSLog(@"-(id) webView:(id) createWebViewWithConfiguration:(id) forNavigationAction:(id) windowFeatures:(id)");
}

-(void) close:(id) {
	%orig;
	NSLog(@"-(void) close:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) goBack:(id) {
	%orig;
	NSLog(@"-(void) goBack:(id)");
}

-(void) goForward:(id) {
	%orig;
	NSLog(@"-(void) goForward:(id)");
}

%end

%hook PMNowPlayingPhoneViewController

-(bool) shouldShowUnifiedPlayControl {
	%orig;
	NSLog(@"-(bool) shouldShowUnifiedPlayControl");
}

-(id) whyAdsButton {
	%orig;
	NSLog(@"-(id) whyAdsButton");
}

-(void) nowPlayingCardDidTapDisabledReplay:(id) {
	%orig;
	NSLog(@"-(void) nowPlayingCardDidTapDisabledReplay:(id)");
}

-(void) nowPlayingCardDidTapWhyAds:(id) {
	%orig;
	NSLog(@"-(void) nowPlayingCardDidTapWhyAds:(id)");
}

-(double) topInsetForRewardDisplayed:(id) {
	%orig;
	NSLog(@"-(double) topInsetForRewardDisplayed:(id)");
}

-(void) nowPlayingCard:(id) percentCompressed:(double) {
	%orig;
	NSLog(@"-(void) nowPlayingCard:(id) percentCompressed:(double)");
}

-(void) didExpandNowPlayingCard:(id) {
	%orig;
	NSLog(@"-(void) didExpandNowPlayingCard:(id)");
}

-(void) didCompressNowPlayingCard:(id) {
	%orig;
	NSLog(@"-(void) didCompressNowPlayingCard:(id)");
}

-(void) willCompressNowPlayingCard:(id) {
	%orig;
	NSLog(@"-(void) willCompressNowPlayingCard:(id)");
}

-(void) didChangeExpandedTrackDetailsState:(id) {
	%orig;
	NSLog(@"-(void) didChangeExpandedTrackDetailsState:(id)");
}

-(void) willExpandNowPlayingCard:(id) {
	%orig;
	NSLog(@"-(void) willExpandNowPlayingCard:(id)");
}

-(void) willScrollWebViewInCompressStateNowPlayingCard:(id) {
	%orig;
	NSLog(@"-(void) willScrollWebViewInCompressStateNowPlayingCard:(id)");
}

-(void) willChangeToThumbUpInCard:(id) {
	%orig;
	NSLog(@"-(void) willChangeToThumbUpInCard:(id)");
}

-(void) willChangeToThumbDownInCard:(id) {
	%orig;
	NSLog(@"-(void) willChangeToThumbDownInCard:(id)");
}

-(CGRect) boundsOfCollectionViewOfNowPlayingCard:(id) {
	%orig;
	NSLog(@"-(CGRect) boundsOfCollectionViewOfNowPlayingCard:(id)");
}

-(void) whyAdsWasClicked:(id) {
	%orig;
	NSLog(@"-(void) whyAdsWasClicked:(id)");
}

-(void) setWhyAdsButton:(id) {
	%orig;
	NSLog(@"-(void) setWhyAdsButton:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) statsCallTextForView:(id) {
	%orig;
	NSLog(@"-(id) statsCallTextForView:(id)");
}

-(void) setMaxTrackHistory:(long long) {
	%orig;
	NSLog(@"-(void) setMaxTrackHistory:(long long)");
}

-(void) refreshPlayingState {
	%orig;
	NSLog(@"-(void) refreshPlayingState");
}

-(bool) refreshTrack {
	%orig;
	NSLog(@"-(bool) refreshTrack");
}

-(void) prepStationChange {
	%orig;
	NSLog(@"-(void) prepStationChange");
}

-(void) refreshStation {
	%orig;
	NSLog(@"-(void) refreshStation");
}

-(void) refreshTrackRating:(id) {
	%orig;
	NSLog(@"-(void) refreshTrackRating:(id)");
}

-(void) refreshTrackMetadata {
	%orig;
	NSLog(@"-(void) refreshTrackMetadata");
}

-(void) compressHighlightedTrackDetailView:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) compressHighlightedTrackDetailView:(bool) animated:(bool)");
}

-(void) hideRewardAfterDelay {
	%orig;
	NSLog(@"-(void) hideRewardAfterDelay");
}

-(void) showReward:(id) {
	%orig;
	NSLog(@"-(void) showReward:(id)");
}

-(void) hideRewardForced:(bool) {
	%orig;
	NSLog(@"-(void) hideRewardForced:(bool)");
}

-(void) hideReward {
	%orig;
	NSLog(@"-(void) hideReward");
}

-(void) albumCoverTappedInTunerBar:(id) {
	%orig;
	NSLog(@"-(void) albumCoverTappedInTunerBar:(id)");
}

-(void) willChangeToThumbUpInTunerBar {
	%orig;
	NSLog(@"-(void) willChangeToThumbUpInTunerBar");
}

-(void) willChangeToThumbDownInTunerBar {
	%orig;
	NSLog(@"-(void) willChangeToThumbDownInTunerBar");
}

-(void) tunerBarDidTapPlay:(id) {
	%orig;
	NSLog(@"-(void) tunerBarDidTapPlay:(id)");
}

-(void) tunerBarDidSkip:(id) {
	%orig;
	NSLog(@"-(void) tunerBarDidSkip:(id)");
}

-(void) tunerBarDidTapDisabledReplay:(id) {
	%orig;
	NSLog(@"-(void) tunerBarDidTapDisabledReplay:(id)");
}

-(id) tunerBarController {
	%orig;
	NSLog(@"-(id) tunerBarController");
}

-(void) setTunerBarController:(id) {
	%orig;
	NSLog(@"-(void) setTunerBarController:(id)");
}

-(double) heightForNowPlayingContentArea {
	%orig;
	NSLog(@"-(double) heightForNowPlayingContentArea");
}

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(bool) shouldHideBottomViewWhenPushed {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewWhenPushed");
}

-(void) showCCSReplayScreenAfterLoadUsingBlock:(id) {
	%orig;
	NSLog(@"-(void) showCCSReplayScreenAfterLoadUsingBlock:(id)");
}

-(bool) useDefaultNavigationBarStyling {
	%orig;
	NSLog(@"-(bool) useDefaultNavigationBarStyling");
}

-(void) setEnterNowplayingBecauseOfGlobalTimeout:(bool) {
	%orig;
	NSLog(@"-(void) setEnterNowplayingBecauseOfGlobalTimeout:(bool)");
}

-(id) valueExchangeMediator {
	%orig;
	NSLog(@"-(id) valueExchangeMediator");
}

-(void) setValueExchangeMediator:(id) {
	%orig;
	NSLog(@"-(void) setValueExchangeMediator:(id)");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(id) adSlot {
	%orig;
	NSLog(@"-(id) adSlot");
}

-(void) setUpDelegate {
	%orig;
	NSLog(@"-(void) setUpDelegate");
}

-(void) addObserversForNotifications {
	%orig;
	NSLog(@"-(void) addObserversForNotifications");
}

-(void) appDidBecomeInactive:(id) {
	%orig;
	NSLog(@"-(void) appDidBecomeInactive:(id)");
}

-(id) mainViewModel {
	%orig;
	NSLog(@"-(id) mainViewModel");
}

-(id) createAdTouchEventHelper {
	%orig;
	NSLog(@"-(id) createAdTouchEventHelper");
}

-(void) setForceGoingToNowPlayingCard:(bool) {
	%orig;
	NSLog(@"-(void) setForceGoingToNowPlayingCard:(bool)");
}

-(void) attemptNowPlayingTemplateImpression {
	%orig;
	NSLog(@"-(void) attemptNowPlayingTemplateImpression");
}

-(void) showNowPlayingCardAfterViewUpdate {
	%orig;
	NSLog(@"-(void) showNowPlayingCardAfterViewUpdate");
}

-(void) logCenterArtistMessageTileImpressionFirstTimeOnly:(bool) {
	%orig;
	NSLog(@"-(void) logCenterArtistMessageTileImpressionFirstTimeOnly:(bool)");
}

-(bool) shouldAttemptSkipLicensingCoachmarkOnForeground {
	%orig;
	NSLog(@"-(bool) shouldAttemptSkipLicensingCoachmarkOnForeground");
}

-(id) lastSkipAttemptedBackgroundTrack {
	%orig;
	NSLog(@"-(id) lastSkipAttemptedBackgroundTrack");
}

-(void) setShouldAttemptSkipLicensingCoachmarkOnForeground:(bool) {
	%orig;
	NSLog(@"-(void) setShouldAttemptSkipLicensingCoachmarkOnForeground:(bool)");
}

-(void) setLastSkipAttemptedBackgroundTrack:(id) {
	%orig;
	NSLog(@"-(void) setLastSkipAttemptedBackgroundTrack:(id)");
}

-(bool) attemptSkipLicensingCoachmarkOnForegroundWithThumbDown {
	%orig;
	NSLog(@"-(bool) attemptSkipLicensingCoachmarkOnForegroundWithThumbDown");
}

-(void) presentSkipMiniCoachmarkWithType:(long long) fromThumbDown:(bool) {
	%orig;
	NSLog(@"-(void) presentSkipMiniCoachmarkWithType:(long long) fromThumbDown:(bool)");
}

-(void) resizeLevel1ViewControllerForRotation {
	%orig;
	NSLog(@"-(void) resizeLevel1ViewControllerForRotation");
}

-(bool) hideValueExchange {
	%orig;
	NSLog(@"-(bool) hideValueExchange");
}

-(bool) shouldDismissAdOnBackground {
	%orig;
	NSLog(@"-(bool) shouldDismissAdOnBackground");
}

-(id) level1AdViewContainerViewController {
	%orig;
	NSLog(@"-(id) level1AdViewContainerViewController");
}

-(void) removeAudioAdTrackFromHistoryIfNeeded {
	%orig;
	NSLog(@"-(void) removeAudioAdTrackFromHistoryIfNeeded");
}

-(void) updateAudioAdViewFor3Point5InchScreen {
	%orig;
	NSLog(@"-(void) updateAudioAdViewFor3Point5InchScreen");
}

-(void) setupNavBar {
	%orig;
	NSLog(@"-(void) setupNavBar");
}

-(void) initTunerBar {
	%orig;
	NSLog(@"-(void) initTunerBar");
}

-(id) bannerAdContainer {
	%orig;
	NSLog(@"-(id) bannerAdContainer");
}

-(void) setInitialBannerAdContainerHeight:(double) {
	%orig;
	NSLog(@"-(void) setInitialBannerAdContainerHeight:(double)");
}

-(id) collectionViewTopConstraint {
	%orig;
	NSLog(@"-(id) collectionViewTopConstraint");
}

-(void) setupAirplayButton {
	%orig;
	NSLog(@"-(void) setupAirplayButton");
}

-(void) setupCastButton {
	%orig;
	NSLog(@"-(void) setupCastButton");
}

-(void) updateRemoteRadioButtons {
	%orig;
	NSLog(@"-(void) updateRemoteRadioButtons");
}

-(id) nowPlayingCards {
	%orig;
	NSLog(@"-(id) nowPlayingCards");
}

-(void) registerTrackCardReuseIdentifier:(id) {
	%orig;
	NSLog(@"-(void) registerTrackCardReuseIdentifier:(id)");
}

-(void) setCurrentViewMode:(long long) {
	%orig;
	NSLog(@"-(void) setCurrentViewMode:(long long)");
}

-(void) setupAudioAdContainer {
	%orig;
	NSLog(@"-(void) setupAudioAdContainer");
}

-(void) setupVoiceAdControls {
	%orig;
	NSLog(@"-(void) setupVoiceAdControls");
}

-(id) nowPlayingTrack {
	%orig;
	NSLog(@"-(id) nowPlayingTrack");
}

-(void) showAudioAdOrAudioWarning:(id) {
	%orig;
	NSLog(@"-(void) showAudioAdOrAudioWarning:(id)");
}

-(void) showRewardController {
	%orig;
	NSLog(@"-(void) showRewardController");
}

-(id) topBannerViewController {
	%orig;
	NSLog(@"-(id) topBannerViewController");
}

-(void) rewardDidEnd {
	%orig;
	NSLog(@"-(void) rewardDidEnd");
}

-(void) hideSLAPBracelet:(bool) {
	%orig;
	NSLog(@"-(void) hideSLAPBracelet:(bool)");
}

-(void) showOnDemandArtistAudioMessageExpirationMessage {
	%orig;
	NSLog(@"-(void) showOnDemandArtistAudioMessageExpirationMessage");
}

-(void) showSkipLicensingMinicoachmark:(id) {
	%orig;
	NSLog(@"-(void) showSkipLicensingMinicoachmark:(id)");
}

-(void) refreshNowPlayingTracks {
	%orig;
	NSLog(@"-(void) refreshNowPlayingTracks");
}

-(void) setIsPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setIsPlaying:(bool)");
}

-(void) setupBackgroundImageView {
	%orig;
	NSLog(@"-(void) setupBackgroundImageView");
}

-(void) addTunerBarControllerAsChild {
	%orig;
	NSLog(@"-(void) addTunerBarControllerAsChild");
}

-(void) showTopBannerControllerWithClass:(Class) completion:(id) {
	%orig;
	NSLog(@"-(void) showTopBannerControllerWithClass:(Class) completion:(id)");
}

-(void) removeTopBannerViewController:(bool) {
	%orig;
	NSLog(@"-(void) removeTopBannerViewController:(bool)");
}

-(void) setCcsReplayBlock:(id) {
	%orig;
	NSLog(@"-(void) setCcsReplayBlock:(id)");
}

-(bool) shouldShowStationPersonalizationMeter {
	%orig;
	NSLog(@"-(bool) shouldShowStationPersonalizationMeter");
}

-(CGSize) sizeForNowPlayingContentArea {
	%orig;
	NSLog(@"-(CGSize) sizeForNowPlayingContentArea");
}

-(void) setViewDisappearedOn:(id) {
	%orig;
	NSLog(@"-(void) setViewDisappearedOn:(id)");
}

-(bool) refreshTrackWithAudioAd:(bool) {
	%orig;
	NSLog(@"-(bool) refreshTrackWithAudioAd:(bool)");
}

-(void) addBannerAdContainer {
	%orig;
	NSLog(@"-(void) addBannerAdContainer");
}

-(void) setShouldTryToShowFirstTimeNPTeachMark:(bool) {
	%orig;
	NSLog(@"-(void) setShouldTryToShowFirstTimeNPTeachMark:(bool)");
}

-(id) audioAdAppearance {
	%orig;
	NSLog(@"-(id) audioAdAppearance");
}

-(void) setupTitleViewTextUsingText:(id) {
	%orig;
	NSLog(@"-(void) setupTitleViewTextUsingText:(id)");
}

-(bool) viewAppearedWithStationChanged {
	%orig;
	NSLog(@"-(bool) viewAppearedWithStationChanged");
}

-(bool) enterNowplayingBecauseOfGlobalTimeout {
	%orig;
	NSLog(@"-(bool) enterNowplayingBecauseOfGlobalTimeout");
}

-(bool) disappearBecauseAdPresenting {
	%orig;
	NSLog(@"-(bool) disappearBecauseAdPresenting");
}

-(void) refreshBannerAdBeforeAppearing {
	%orig;
	NSLog(@"-(void) refreshBannerAdBeforeAppearing");
}

-(void) setDisappearBecauseAdPresenting:(bool) {
	%orig;
	NSLog(@"-(void) setDisappearBecauseAdPresenting:(bool)");
}

-(void) setViewAppearedWithStationChanged:(bool) {
	%orig;
	NSLog(@"-(void) setViewAppearedWithStationChanged:(bool)");
}

-(bool) animatePersonalizationButton {
	%orig;
	NSLog(@"-(bool) animatePersonalizationButton");
}

-(id) personalizationMeterButton {
	%orig;
	NSLog(@"-(id) personalizationMeterButton");
}

-(void) setAnimatePersonalizationButton:(bool) {
	%orig;
	NSLog(@"-(void) setAnimatePersonalizationButton:(bool)");
}

-(void) updateViewsForMovingToNowPlayingCardAndUpdateTunerBar:(bool) {
	%orig;
	NSLog(@"-(void) updateViewsForMovingToNowPlayingCardAndUpdateTunerBar:(bool)");
}

-(void) setBounceScroll:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBounceScroll:(unsigned long long)");
}

-(void) setShareBarButtonController:(id) {
	%orig;
	NSLog(@"-(void) setShareBarButtonController:(id)");
}

-(id) shareBarButtonController {
	%orig;
	NSLog(@"-(id) shareBarButtonController");
}

-(id) emptyNavItemView {
	%orig;
	NSLog(@"-(id) emptyNavItemView");
}

-(bool) performLayoutUpdateOnViewDidAppear {
	%orig;
	NSLog(@"-(bool) performLayoutUpdateOnViewDidAppear");
}

-(void) setPerformLayoutUpdateOnViewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) setPerformLayoutUpdateOnViewDidAppear:(bool)");
}

-(void) updateTrackCardCellIdentifierForSize:(CGSize) {
	%orig;
	NSLog(@"-(void) updateTrackCardCellIdentifierForSize:(CGSize)");
}

-(void) reloadCollectionView {
	%orig;
	NSLog(@"-(void) reloadCollectionView");
}

-(void) executeIfViewDisappearedAtLeast60secondsAgo:(id) {
	%orig;
	NSLog(@"-(void) executeIfViewDisappearedAtLeast60secondsAgo:(id)");
}

-(id) audioAdImageView {
	%orig;
	NSLog(@"-(id) audioAdImageView");
}

-(id) ccsReplayBlock {
	%orig;
	NSLog(@"-(id) ccsReplayBlock");
}

-(void) updateHighlightedCard {
	%orig;
	NSLog(@"-(void) updateHighlightedCard");
}

-(void) positionBannerAdContainer {
	%orig;
	NSLog(@"-(void) positionBannerAdContainer");
}

-(id) adTouchEventHelper {
	%orig;
	NSLog(@"-(id) adTouchEventHelper");
}

-(id) nowPlayingControlBarView {
	%orig;
	NSLog(@"-(id) nowPlayingControlBarView");
}

-(bool) tryToPresentReplayMiniCoachmarkWithTrack:(id) context:(long long) type:(long long) {
	%orig;
	NSLog(@"-(bool) tryToPresentReplayMiniCoachmarkWithTrack:(id) context:(long long) type:(long long)");
}

-(void) setShouldAttemptReplayCoachmarkOnNextTrack:(bool) {
	%orig;
	NSLog(@"-(void) setShouldAttemptReplayCoachmarkOnNextTrack:(bool)");
}

-(CGRect) level1AdHeaderViewFrame {
	%orig;
	NSLog(@"-(CGRect) level1AdHeaderViewFrame");
}

-(id) level1AdHeaderView {
	%orig;
	NSLog(@"-(id) level1AdHeaderView");
}

-(void) showPremiumRewardBannerIfNeeded {
	%orig;
	NSLog(@"-(void) showPremiumRewardBannerIfNeeded");
}

-(bool) canShowSLAPBracelet {
	%orig;
	NSLog(@"-(bool) canShowSLAPBracelet");
}

-(void) showSLAPBracelet {
	%orig;
	NSLog(@"-(void) showSLAPBracelet");
}

-(void) setShouldRefreshAdOnViewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldRefreshAdOnViewDidAppear:(bool)");
}

-(void) refreshBannerAdOnViewAppear:(id) {
	%orig;
	NSLog(@"-(void) refreshBannerAdOnViewAppear:(id)");
}

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(bool) shouldDismissAdOnDisappear {
	%orig;
	NSLog(@"-(bool) shouldDismissAdOnDisappear");
}

-(void) setLastViewDidDisappear:(id) {
	%orig;
	NSLog(@"-(void) setLastViewDidDisappear:(id)");
}

-(void) dismissPremiumRewardBannerIfNeededWithAnimation:(bool) {
	%orig;
	NSLog(@"-(void) dismissPremiumRewardBannerIfNeededWithAnimation:(bool)");
}

-(bool) refreshBannerAdOnViewAppear {
	%orig;
	NSLog(@"-(bool) refreshBannerAdOnViewAppear");
}

-(void) setRefreshBannerAdOnViewAppear:(bool) {
	%orig;
	NSLog(@"-(void) setRefreshBannerAdOnViewAppear:(bool)");
}

-(void) scrollToEndOnCollectionView {
	%orig;
	NSLog(@"-(void) scrollToEndOnCollectionView");
}

-(void) nowPlayingWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) nowPlayingWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(id) centerCard {
	%orig;
	NSLog(@"-(id) centerCard");
}

-(void) updateTopBannerLayout {
	%orig;
	NSLog(@"-(void) updateTopBannerLayout");
}

-(id) collapsedTunerView {
	%orig;
	NSLog(@"-(id) collapsedTunerView");
}

-(id) collapsedTunerContainer {
	%orig;
	NSLog(@"-(id) collapsedTunerContainer");
}

-(id) collapsedTunerSafeAreaView {
	%orig;
	NSLog(@"-(id) collapsedTunerSafeAreaView");
}

-(void) refreshControlBarViewConstraintsForOrientation {
	%orig;
	NSLog(@"-(void) refreshControlBarViewConstraintsForOrientation");
}

-(void) goToNowPlayingCardAnimated:(bool) {
	%orig;
	NSLog(@"-(void) goToNowPlayingCardAnimated:(bool)");
}

-(id) miniCoachMarkView {
	%orig;
	NSLog(@"-(id) miniCoachMarkView");
}

-(double) miniCoachMarkYPositionFromBottom {
	%orig;
	NSLog(@"-(double) miniCoachMarkYPositionFromBottom");
}

-(id) miniCoachMarkPointsToButton {
	%orig;
	NSLog(@"-(id) miniCoachMarkPointsToButton");
}

-(id) miniCoachMarkPresentingRecentlyPlayedTrackCard {
	%orig;
	NSLog(@"-(id) miniCoachMarkPresentingRecentlyPlayedTrackCard");
}

-(id) lastCard {
	%orig;
	NSLog(@"-(id) lastCard");
}

-(void) setTrackCardCellIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setTrackCardCellIdentifier:(id)");
}

-(id) nowPlayingCardsDataSource {
	%orig;
	NSLog(@"-(id) nowPlayingCardsDataSource");
}

-(long long) currentViewMode {
	%orig;
	NSLog(@"-(long long) currentViewMode");
}

-(id) audioAdContainer {
	%orig;
	NSLog(@"-(id) audioAdContainer");
}

-(CGRect) nowPlayingCardAlbumCoverFrame {
	%orig;
	NSLog(@"-(CGRect) nowPlayingCardAlbumCoverFrame");
}

-(bool) isTransitionComplete {
	%orig;
	NSLog(@"-(bool) isTransitionComplete");
}

-(bool) isNowPlayingCardIsHighlighted {
	%orig;
	NSLog(@"-(bool) isNowPlayingCardIsHighlighted");
}

-(bool) movedToNowPlayingAfterTrackReload {
	%orig;
	NSLog(@"-(bool) movedToNowPlayingAfterTrackReload");
}

-(void) setMovedToNowPlayingAfterTrackReload:(bool) {
	%orig;
	NSLog(@"-(void) setMovedToNowPlayingAfterTrackReload:(bool)");
}

-(void) showBannerAdContainerAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showBannerAdContainerAnimated:(bool)");
}

-(bool) isShowingActiveTrack {
	%orig;
	NSLog(@"-(bool) isShowingActiveTrack");
}

-(void) setIsGoingToNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setIsGoingToNowPlaying:(bool)");
}

-(bool) shouldUseCustomTemplateStationAdContainer {
	%orig;
	NSLog(@"-(bool) shouldUseCustomTemplateStationAdContainer");
}

-(id) customTemplateStationAdContainerViewController {
	%orig;
	NSLog(@"-(id) customTemplateStationAdContainerViewController");
}

-(void) addNewNowPlayingTrack:(id) {
	%orig;
	NSLog(@"-(void) addNewNowPlayingTrack:(id)");
}

-(void) transitionBackgroundForAudioAd {
	%orig;
	NSLog(@"-(void) transitionBackgroundForAudioAd");
}

-(void) setNowPlayingTrack:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingTrack:(id)");
}

-(void) hideAudioAdOrExplicitWarning {
	%orig;
	NSLog(@"-(void) hideAudioAdOrExplicitWarning");
}

-(void) setIsShowingActiveTrack:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingActiveTrack:(bool)");
}

-(bool) pruneNowPlayingCardsDataSource {
	%orig;
	NSLog(@"-(bool) pruneNowPlayingCardsDataSource");
}

-(bool) isTrack:(id) equalToTrack:(id) {
	%orig;
	NSLog(@"-(bool) isTrack:(id) equalToTrack:(id)");
}

-(bool) forceGoingToNowPlayingCard {
	%orig;
	NSLog(@"-(bool) forceGoingToNowPlayingCard");
}

-(void) setShouldRemoveAudioAdTrackFromHistory:(bool) {
	%orig;
	NSLog(@"-(void) setShouldRemoveAudioAdTrackFromHistory:(bool)");
}

-(long long) numberOfPhoneTrackCardsToDelete {
	%orig;
	NSLog(@"-(long long) numberOfPhoneTrackCardsToDelete");
}

-(void) setNumberOfPhoneTrackCardsToDelete:(long long) {
	%orig;
	NSLog(@"-(void) setNumberOfPhoneTrackCardsToDelete:(long long)");
}

-(bool) shouldRemoveAudioAdTrackFromHistory {
	%orig;
	NSLog(@"-(bool) shouldRemoveAudioAdTrackFromHistory");
}

-(bool) shouldAttemptReplayCoachmarkOnNextTrack {
	%orig;
	NSLog(@"-(bool) shouldAttemptReplayCoachmarkOnNextTrack");
}

-(void) tryToPresentThumbprintMiniCoachMarkWithTrackId:(id) {
	%orig;
	NSLog(@"-(void) tryToPresentThumbprintMiniCoachMarkWithTrackId:(id)");
}

-(void) performNowPlayingCardBatchUpdates:(id) completion:(?) clearTracksBeforeRunning:(id) {
	%orig;
	NSLog(@"-(void) performNowPlayingCardBatchUpdates:(id) completion:(?) clearTracksBeforeRunning:(id)");
}

-(void) setMiniCoachMarkPointsToButton:(id) {
	%orig;
	NSLog(@"-(void) setMiniCoachMarkPointsToButton:(id)");
}

-(void) presentMiniCoachmarkWithContentType:(long long) yPosition:(double) arrowEdge:(unsigned long long) contentDate:(id) dismissalInterval:(double) shouldTrackDismissalEvent:(bool) tapActionBlock:(id) {
	%orig;
	NSLog(@"-(void) presentMiniCoachmarkWithContentType:(long long) yPosition:(double) arrowEdge:(unsigned long long) contentDate:(id) dismissalInterval:(double) shouldTrackDismissalEvent:(bool) tapActionBlock:(id)");
}

-(bool) isGoingToNowPlaying {
	%orig;
	NSLog(@"-(bool) isGoingToNowPlaying");
}

-(void) setMiniCoachMarkPresentingRecentlyPlayedTrackCard:(id) {
	%orig;
	NSLog(@"-(void) setMiniCoachMarkPresentingRecentlyPlayedTrackCard:(id)");
}

-(void) setCurrentCoachmarkStatsId:(long long) {
	%orig;
	NSLog(@"-(void) setCurrentCoachmarkStatsId:(long long)");
}

-(void) setShouldTrackCurrentCoachmarkDismissalEvent:(bool) {
	%orig;
	NSLog(@"-(void) setShouldTrackCurrentCoachmarkDismissalEvent:(bool)");
}

-(void) setMiniCoachMarkYPositionFromBottom:(double) {
	%orig;
	NSLog(@"-(void) setMiniCoachMarkYPositionFromBottom:(double)");
}

-(void) setMiniCoachMarkView:(id) {
	%orig;
	NSLog(@"-(void) setMiniCoachMarkView:(id)");
}

-(id) miniCoachMarkDismissTimer {
	%orig;
	NSLog(@"-(id) miniCoachMarkDismissTimer");
}

-(void) miniCoachMarkViewDismissTimerDidTrigger {
	%orig;
	NSLog(@"-(void) miniCoachMarkViewDismissTimerDidTrigger");
}

-(void) setMiniCoachMarkDismissTimer:(id) {
	%orig;
	NSLog(@"-(void) setMiniCoachMarkDismissTimer:(id)");
}

-(bool) shouldTrackCurrentCoachmarkDismissalEvent {
	%orig;
	NSLog(@"-(bool) shouldTrackCurrentCoachmarkDismissalEvent");
}

-(long long) currentCoachmarkStatsId {
	%orig;
	NSLog(@"-(long long) currentCoachmarkStatsId");
}

-(void) dismissMiniCoachMark:(bool) fromUserAction:(bool) {
	%orig;
	NSLog(@"-(void) dismissMiniCoachMark:(bool) fromUserAction:(bool)");
}

-(void) clearAllTracks {
	%orig;
	NSLog(@"-(void) clearAllTracks");
}

-(long long) maxTrackHistory {
	%orig;
	NSLog(@"-(long long) maxTrackHistory");
}

-(void) addStationCardToDataSource {
	%orig;
	NSLog(@"-(void) addStationCardToDataSource");
}

-(void) updateCardRatingAreaByTrack:(id) {
	%orig;
	NSLog(@"-(void) updateCardRatingAreaByTrack:(id)");
}

-(id) tunerBarContainer {
	%orig;
	NSLog(@"-(id) tunerBarContainer");
}

-(bool) castButtonShown {
	%orig;
	NSLog(@"-(bool) castButtonShown");
}

-(id) airplayButton {
	%orig;
	NSLog(@"-(id) airplayButton");
}

-(void) setCastButtonShown:(bool) {
	%orig;
	NSLog(@"-(void) setCastButtonShown:(bool)");
}

-(void) showOrHideRemoteRadioButtons:(bool) {
	%orig;
	NSLog(@"-(void) showOrHideRemoteRadioButtons:(bool)");
}

-(id) nowPlayingProgressBarView {
	%orig;
	NSLog(@"-(id) nowPlayingProgressBarView");
}

-(void) castButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) castButtonTapped:(id)");
}

-(void) setAirplayButton:(id) {
	%orig;
	NSLog(@"-(void) setAirplayButton:(id)");
}

-(void) cleanUpAdContainer {
	%orig;
	NSLog(@"-(void) cleanUpAdContainer");
}

-(void) didShowActiveTrack {
	%orig;
	NSLog(@"-(void) didShowActiveTrack");
}

-(void) showFirstTimeNowPlayingTeachMark {
	%orig;
	NSLog(@"-(void) showFirstTimeNowPlayingTeachMark");
}

-(void) setResetSMCCoachmarkDisplayOpportunityOnStationHistoryScroll:(bool) {
	%orig;
	NSLog(@"-(void) setResetSMCCoachmarkDisplayOpportunityOnStationHistoryScroll:(bool)");
}

-(id) delayAdRefreshInteractionBlock {
	%orig;
	NSLog(@"-(id) delayAdRefreshInteractionBlock");
}

-(void) setDelayAdRefreshInteractionBlock:(id) {
	%orig;
	NSLog(@"-(void) setDelayAdRefreshInteractionBlock:(id)");
}

-(id) nowPlayingCardsUserInteractionDisabledTimer {
	%orig;
	NSLog(@"-(id) nowPlayingCardsUserInteractionDisabledTimer");
}

-(void) setNowPlayingCardsUserInteractionDisabledTimer:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingCardsUserInteractionDisabledTimer:(id)");
}

-(void) enableNowPlayingCardsUserInteraction:(id) {
	%orig;
	NSLog(@"-(void) enableNowPlayingCardsUserInteraction:(id)");
}

-(void) skipAudioMessageForCard:(id) withReason:(long long) {
	%orig;
	NSLog(@"-(void) skipAudioMessageForCard:(id) withReason:(long long)");
}

-(void) showFlagDialogForReason:(long long) {
	%orig;
	NSLog(@"-(void) showFlagDialogForReason:(long long)");
}

-(void) pushToThumbprintRadioStationDetail {
	%orig;
	NSLog(@"-(void) pushToThumbprintRadioStationDetail");
}

-(void) updateRemoteButtonsForOffline:(bool) {
	%orig;
	NSLog(@"-(void) updateRemoteButtonsForOffline:(bool)");
}

-(void) adjustRightNavigationButtonAnimated:(bool) {
	%orig;
	NSLog(@"-(void) adjustRightNavigationButtonAnimated:(bool)");
}

-(void) updateUnfiedPlayControlsForOffline:(bool) {
	%orig;
	NSLog(@"-(void) updateUnfiedPlayControlsForOffline:(bool)");
}

-(void) handleRequestForWhyAds {
	%orig;
	NSLog(@"-(void) handleRequestForWhyAds");
}

-(id) trackCardCellIdentifier {
	%orig;
	NSLog(@"-(id) trackCardCellIdentifier");
}

-(void) limitReplayForCell:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) limitReplayForCell:(id) atIndexPath:(id)");
}

-(void) adjustRemoteRadioButtonsInView:(id) {
	%orig;
	NSLog(@"-(void) adjustRemoteRadioButtonsInView:(id)");
}

-(void) removeBannerAdContainer {
	%orig;
	NSLog(@"-(void) removeBannerAdContainer");
}

-(bool) shouldRefreshAdOnViewDidAppear {
	%orig;
	NSLog(@"-(bool) shouldRefreshAdOnViewDidAppear");
}

-(void) removeBannerAdContainerWithSwipe {
	%orig;
	NSLog(@"-(void) removeBannerAdContainerWithSwipe");
}

-(bool) didScrollFromLastTile:(CGPoint) {
	%orig;
	NSLog(@"-(bool) didScrollFromLastTile:(CGPoint)");
}

-(bool) didInitScrolling {
	%orig;
	NSLog(@"-(bool) didInitScrolling");
}

-(void) setDidInitScrolling:(bool) {
	%orig;
	NSLog(@"-(void) setDidInitScrolling:(bool)");
}

-(void) updateTrackHistoryProgress:(id) {
	%orig;
	NSLog(@"-(void) updateTrackHistoryProgress:(id)");
}

-(void) updateViewsForCurrentDistanceFromNowPlayingCardAndUpdateTunerBar:(bool) {
	%orig;
	NSLog(@"-(void) updateViewsForCurrentDistanceFromNowPlayingCardAndUpdateTunerBar:(bool)");
}

-(void) handleScrollViewDidEndDeceleratingWhenVoiceOverIsOn:(id) {
	%orig;
	NSLog(@"-(void) handleScrollViewDidEndDeceleratingWhenVoiceOverIsOn:(id)");
}

-(void) handleScrollEndAnimated:(bool) {
	%orig;
	NSLog(@"-(void) handleScrollEndAnimated:(bool)");
}

-(bool) attemptSMCCoachmarkDisplayWhenScrollViewEndsDecelerating {
	%orig;
	NSLog(@"-(bool) attemptSMCCoachmarkDisplayWhenScrollViewEndsDecelerating");
}

-(unsigned long long) bounceScroll {
	%orig;
	NSLog(@"-(unsigned long long) bounceScroll");
}

-(void) attemptShowDisplayAdWhenScrollViewEndDecelerating {
	%orig;
	NSLog(@"-(void) attemptShowDisplayAdWhenScrollViewEndDecelerating");
}

-(double) lastCardIndex {
	%orig;
	NSLog(@"-(double) lastCardIndex");
}

-(void) setLastCardIndex:(double) {
	%orig;
	NSLog(@"-(void) setLastCardIndex:(double)");
}

-(bool) resetSMCCoachmarkDisplayOpportunityOnStationHistoryScroll {
	%orig;
	NSLog(@"-(bool) resetSMCCoachmarkDisplayOpportunityOnStationHistoryScroll");
}

-(id) advertisingController {
	%orig;
	NSLog(@"-(id) advertisingController");
}

-(void) performTunerBarThumbUpToMeterAnimation {
	%orig;
	NSLog(@"-(void) performTunerBarThumbUpToMeterAnimation");
}

-(void) performTunerBarThumbDownToMeterAnimation {
	%orig;
	NSLog(@"-(void) performTunerBarThumbDownToMeterAnimation");
}

-(void) handleTunerBarDidTapPlay {
	%orig;
	NSLog(@"-(void) handleTunerBarDidTapPlay");
}

-(void) setCanShowBannerAdContainer:(bool) {
	%orig;
	NSLog(@"-(void) setCanShowBannerAdContainer:(bool)");
}

-(void) setShouldResetFirstResponder:(bool) {
	%orig;
	NSLog(@"-(void) setShouldResetFirstResponder:(bool)");
}

-(void) showSonosTeachMarkIfAvailable {
	%orig;
	NSLog(@"-(void) showSonosTeachMarkIfAvailable");
}

-(void) showCastingTeachMarkIfAvailable {
	%orig;
	NSLog(@"-(void) showCastingTeachMarkIfAvailable");
}

-(void) performCardThumbToMeterAnimationFromButton:(id) isThumbUp:(bool) {
	%orig;
	NSLog(@"-(void) performCardThumbToMeterAnimationFromButton:(id) isThumbUp:(bool)");
}

-(id) audioAdImageButton {
	%orig;
	NSLog(@"-(id) audioAdImageButton");
}

-(id) audioAdLabel {
	%orig;
	NSLog(@"-(id) audioAdLabel");
}

-(id) lastViewDidDisappear {
	%orig;
	NSLog(@"-(id) lastViewDidDisappear");
}

-(void) updateViewsForMovingAwayFromNowPlayingCardAndUpdateTunerBar:(bool) {
	%orig;
	NSLog(@"-(void) updateViewsForMovingAwayFromNowPlayingCardAndUpdateTunerBar:(bool)");
}

-(void) updateTrackHistoryProcessUIWithProgressPercentage:(double) {
	%orig;
	NSLog(@"-(void) updateTrackHistoryProcessUIWithProgressPercentage:(double)");
}

-(void) setLevel1AdHeaderHidden:(bool) animated:(bool) complete:(id) {
	%orig;
	NSLog(@"-(void) setLevel1AdHeaderHidden:(bool) animated:(bool) complete:(id)");
}

-(void) setupBackNavigationButton {
	%orig;
	NSLog(@"-(void) setupBackNavigationButton");
}

-(void) setupPersonalizationNavigationButton {
	%orig;
	NSLog(@"-(void) setupPersonalizationNavigationButton");
}

-(void) setupInfoNavigationButton {
	%orig;
	NSLog(@"-(void) setupInfoNavigationButton");
}

-(void) backWasTouched {
	%orig;
	NSLog(@"-(void) backWasTouched");
}

-(void) didTapPersonalizationButton {
	%orig;
	NSLog(@"-(void) didTapPersonalizationButton");
}

-(void) setPersonalizationMeterButton:(id) {
	%orig;
	NSLog(@"-(void) setPersonalizationMeterButton:(id)");
}

-(void) didTapInfoButton {
	%orig;
	NSLog(@"-(void) didTapInfoButton");
}

-(void) createCollapsedTunerSafeAreaView {
	%orig;
	NSLog(@"-(void) createCollapsedTunerSafeAreaView");
}

-(void) setUpNowPlayingControlsForUnificationInResizableView:(id) {
	%orig;
	NSLog(@"-(void) setUpNowPlayingControlsForUnificationInResizableView:(id)");
}

-(void) setUpCollapsedTunerInResizableView:(id) {
	%orig;
	NSLog(@"-(void) setUpCollapsedTunerInResizableView:(id)");
}

-(void) setCollapsedTunerSafeAreaView:(id) {
	%orig;
	NSLog(@"-(void) setCollapsedTunerSafeAreaView:(id)");
}

-(void) showTopBannerControllerWithClass:(Class) {
	%orig;
	NSLog(@"-(void) showTopBannerControllerWithClass:(Class)");
}

-(void) setAttemptSkipLicensingCoachmarkOnForegroundWithThumbDown:(bool) {
	%orig;
	NSLog(@"-(void) setAttemptSkipLicensingCoachmarkOnForegroundWithThumbDown:(bool)");
}

-(CGSize) cardSize {
	%orig;
	NSLog(@"-(CGSize) cardSize");
}

-(bool) canShowBannerAdContainer {
	%orig;
	NSLog(@"-(bool) canShowBannerAdContainer");
}

-(bool) isInNowPlaying {
	%orig;
	NSLog(@"-(bool) isInNowPlaying");
}

-(double) initialBannerAdContainerHeight {
	%orig;
	NSLog(@"-(double) initialBannerAdContainerHeight");
}

-(id) previousCenterCard {
	%orig;
	NSLog(@"-(id) previousCenterCard");
}

-(void) setPreviousCenterCard:(id) {
	%orig;
	NSLog(@"-(void) setPreviousCenterCard:(id)");
}

-(void) setCenterCard:(id) {
	%orig;
	NSLog(@"-(void) setCenterCard:(id)");
}

-(void) limitReplayForCell:(id) {
	%orig;
	NSLog(@"-(void) limitReplayForCell:(id)");
}

-(void) didUpdateHighlightedCard:(id) {
	%orig;
	NSLog(@"-(void) didUpdateHighlightedCard:(id)");
}

-(bool) shouldTryToShowFirstTimeNPTeachMark {
	%orig;
	NSLog(@"-(bool) shouldTryToShowFirstTimeNPTeachMark");
}

-(bool) isStationPersonalizationButtonShown {
	%orig;
	NSLog(@"-(bool) isStationPersonalizationButtonShown");
}

-(void) animateThumbToMeter:(id) centerPoint:(CGPoint) animateThumb:(bool) {
	%orig;
	NSLog(@"-(void) animateThumbToMeter:(id) centerPoint:(CGPoint) animateThumb:(bool)");
}

-(void) setFreezeMeterUpdate:(bool) {
	%orig;
	NSLog(@"-(void) setFreezeMeterUpdate:(bool)");
}

-(double) moveThumbToCenterAnimationDuration {
	%orig;
	NSLog(@"-(double) moveThumbToCenterAnimationDuration");
}

-(double) moveThumbUpToMeterDuration {
	%orig;
	NSLog(@"-(double) moveThumbUpToMeterDuration");
}

-(id) albumCoverForTransition {
	%orig;
	NSLog(@"-(id) albumCoverForTransition");
}

-(void) setHideValueExchange:(bool) {
	%orig;
	NSLog(@"-(void) setHideValueExchange:(bool)");
}

-(void) setTopBannerViewController:(id) {
	%orig;
	NSLog(@"-(void) setTopBannerViewController:(id)");
}

-(void) configureRewardViewController:(id) {
	%orig;
	NSLog(@"-(void) configureRewardViewController:(id)");
}

-(void) toggleNowPlayingCardsHeightWithBannerVisible:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) toggleNowPlayingCardsHeightWithBannerVisible:(bool) animated:(bool)");
}

-(bool) handleOpenL2LandingPageCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleOpenL2LandingPageCommand:(id)");
}

-(bool) canDisplayLevel1Ad {
	%orig;
	NSLog(@"-(bool) canDisplayLevel1Ad");
}

-(void) setLevel1AdHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setLevel1AdHeaderView:(id)");
}

-(bool) isShowingLevel1AdViewHeader {
	%orig;
	NSLog(@"-(bool) isShowingLevel1AdViewHeader");
}

-(void) setIsShowingLevel1AdViewHeader:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingLevel1AdViewHeader:(bool)");
}

-(void) showP1Banner {
	%orig;
	NSLog(@"-(void) showP1Banner");
}

-(CGPoint) level1AdViewContainerScrollViewLastContentOffset {
	%orig;
	NSLog(@"-(CGPoint) level1AdViewContainerScrollViewLastContentOffset");
}

-(void) setLevel1AdViewContainerScrollViewLastContentOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) setLevel1AdViewContainerScrollViewLastContentOffset:(CGPoint)");
}

-(bool) handleCloseAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleCloseAdCommand:(id)");
}

-(bool) handleDismissCommandWithCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleDismissCommandWithCommand:(id)");
}

-(bool) handlePresentSLAPViewCommand:(id) {
	%orig;
	NSLog(@"-(bool) handlePresentSLAPViewCommand:(id)");
}

-(bool) handleDismissSLAPBracelet:(id) {
	%orig;
	NSLog(@"-(bool) handleDismissSLAPBracelet:(id)");
}

-(bool) handlePresentValueExchangeCommand:(id) {
	%orig;
	NSLog(@"-(bool) handlePresentValueExchangeCommand:(id)");
}

-(bool) handleSetViewportHeight:(id) {
	%orig;
	NSLog(@"-(bool) handleSetViewportHeight:(id)");
}

-(bool) handleRequestsCloseButtonVisibility:(id) {
	%orig;
	NSLog(@"-(bool) handleRequestsCloseButtonVisibility:(id)");
}

-(bool) handleOpenL2VideoWithCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleOpenL2VideoWithCommand:(id)");
}

-(bool) handleFBAdClickCommand {
	%orig;
	NSLog(@"-(bool) handleFBAdClickCommand");
}

-(bool) handleGoToNowplayingCardCommand {
	%orig;
	NSLog(@"-(bool) handleGoToNowplayingCardCommand");
}

-(void) updateInfoForTrack:(id) {
	%orig;
	NSLog(@"-(void) updateInfoForTrack:(id)");
}

-(void) updateActiveTrackForCasting:(id) {
	%orig;
	NSLog(@"-(void) updateActiveTrackForCasting:(id)");
}

-(void) reloadWithTracks:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) reloadWithTracks:(id) animated:(bool)");
}

-(bool) shouldReplayTrackAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) shouldReplayTrackAtIndexPath:(id)");
}

-(bool) canReplayAllTracks {
	%orig;
	NSLog(@"-(bool) canReplayAllTracks");
}

-(id) replayableMusicIds {
	%orig;
	NSLog(@"-(id) replayableMusicIds");
}

-(void) setReplayableMusicIds:(id) {
	%orig;
	NSLog(@"-(void) setReplayableMusicIds:(id)");
}

-(void) hideCastButton {
	%orig;
	NSLog(@"-(void) hideCastButton");
}

-(void) showCastButton {
	%orig;
	NSLog(@"-(void) showCastButton");
}

-(void) updateCastingViews:(id) {
	%orig;
	NSLog(@"-(void) updateCastingViews:(id)");
}

-(void) hideCastMessage {
	%orig;
	NSLog(@"-(void) hideCastMessage");
}

-(void) showCastMessage:(id) {
	%orig;
	NSLog(@"-(void) showCastMessage:(id)");
}

-(void) updateUniqueReplayableTracks {
	%orig;
	NSLog(@"-(void) updateUniqueReplayableTracks");
}

-(id) viewsForNewUserFirstTimeNowplayingTeachmark {
	%orig;
	NSLog(@"-(id) viewsForNewUserFirstTimeNowplayingTeachmark");
}

-(id) viewsForStationPersonalizationMeter {
	%orig;
	NSLog(@"-(id) viewsForStationPersonalizationMeter");
}

-(void) showFlagArtistMessageSheetForMessageCard:(id) from:(id) {
	%orig;
	NSLog(@"-(void) showFlagArtistMessageSheetForMessageCard:(id) from:(id)");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) viewModelDidUpdate {
	%orig;
	NSLog(@"-(void) viewModelDidUpdate");
}

-(CGRect) offlineHeaderFrame {
	%orig;
	NSLog(@"-(CGRect) offlineHeaderFrame");
}

-(id) dominantColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) dominantColorForOfflineHeaderView:(id)");
}

-(id) lightThemeOverlayColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) lightThemeOverlayColorForOfflineHeaderView:(id)");
}

-(id) darkThemeOverlayColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) darkThemeOverlayColorForOfflineHeaderView:(id)");
}

-(double) overlayAlphaForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(double) overlayAlphaForOfflineHeaderView:(id)");
}

-(id) level2AdContainerPresenter {
	%orig;
	NSLog(@"-(id) level2AdContainerPresenter");
}

-(id) trackNameLabelForTransition {
	%orig;
	NSLog(@"-(id) trackNameLabelForTransition");
}

-(id) artistNameLabelForTransition {
	%orig;
	NSLog(@"-(id) artistNameLabelForTransition");
}

-(CGRect) albumCoverFrameForTransitionFromNowplaying {
	%orig;
	NSLog(@"-(CGRect) albumCoverFrameForTransitionFromNowplaying");
}

-(CGRect) albumCoverFrameForTransition {
	%orig;
	NSLog(@"-(CGRect) albumCoverFrameForTransition");
}

-(CGRect) progressViewFrameForTransition {
	%orig;
	NSLog(@"-(CGRect) progressViewFrameForTransition");
}

-(CGRect) level1AdViewContainerViewFrameForTransition {
	%orig;
	NSLog(@"-(CGRect) level1AdViewContainerViewFrameForTransition");
}

-(void) reloadNowPlayingCards {
	%orig;
	NSLog(@"-(void) reloadNowPlayingCards");
}

-(id) highlightedPhoneCard {
	%orig;
	NSLog(@"-(id) highlightedPhoneCard");
}

-(void) audioAdClicked:(id) {
	%orig;
	NSLog(@"-(void) audioAdClicked:(id)");
}

-(bool) shouldRemoveCloseButtonForAdAtHeight:(double) {
	%orig;
	NSLog(@"-(bool) shouldRemoveCloseButtonForAdAtHeight:(double)");
}

-(void) resetFirstResponder {
	%orig;
	NSLog(@"-(void) resetFirstResponder");
}

-(void) setupTitleViewTextUsingText:(id) subtitleText:(id) {
	%orig;
	NSLog(@"-(void) setupTitleViewTextUsingText:(id) subtitleText:(id)");
}

-(bool) canDisplayCustomTemplateStationAd {
	%orig;
	NSLog(@"-(bool) canDisplayCustomTemplateStationAd");
}

-(CGRect) songLabelFrameForTransition {
	%orig;
	NSLog(@"-(CGRect) songLabelFrameForTransition");
}

-(CGRect) artistNameLabelFrameForTransition {
	%orig;
	NSLog(@"-(CGRect) artistNameLabelFrameForTransition");
}

-(id) progressViewSnapshot {
	%orig;
	NSLog(@"-(id) progressViewSnapshot");
}

-(void) setTrackInfoLabelsHiddenForTransition:(bool) {
	%orig;
	NSLog(@"-(void) setTrackInfoLabelsHiddenForTransition:(bool)");
}

-(void) setAlbumArtHiddenForTransition:(bool) {
	%orig;
	NSLog(@"-(void) setAlbumArtHiddenForTransition:(bool)");
}

-(void) setSLAPBraceletHiddenForTransition:(bool) {
	%orig;
	NSLog(@"-(void) setSLAPBraceletHiddenForTransition:(bool)");
}

-(bool) willPerformLayoutUpdateOnViewDidAppear {
	%orig;
	NSLog(@"-(bool) willPerformLayoutUpdateOnViewDidAppear");
}

-(bool) isRewardBannerVisible {
	%orig;
	NSLog(@"-(bool) isRewardBannerVisible");
}

-(bool) displayLevel1AdHeaderWithTitle:(id) {
	%orig;
	NSLog(@"-(bool) displayLevel1AdHeaderWithTitle:(id)");
}

-(bool) dismissLevel1AdHeaderAnimated:(bool) {
	%orig;
	NSLog(@"-(bool) dismissLevel1AdHeaderAnimated:(bool)");
}

-(void) handleAdDismissedWithReason:(long long) {
	%orig;
	NSLog(@"-(void) handleAdDismissedWithReason:(long long)");
}

-(void) didScrollLevel1AdViewContainerScrollView:(id) {
	%orig;
	NSLog(@"-(void) didScrollLevel1AdViewContainerScrollView:(id)");
}

-(void) level1AdViewContainerScrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) level1AdViewContainerScrollViewDidEndScrollingAnimation:(id)");
}

-(void) didRegisterTouchInTrackHistory {
	%orig;
	NSLog(@"-(void) didRegisterTouchInTrackHistory");
}

-(void) setMainViewModel:(id) {
	%orig;
	NSLog(@"-(void) setMainViewModel:(id)");
}

-(void) setAdSlot:(id) {
	%orig;
	NSLog(@"-(void) setAdSlot:(id)");
}

-(void) setAudioAdAppearance:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdAppearance:(id)");
}

-(void) setBannerAdContainer:(id) {
	%orig;
	NSLog(@"-(void) setBannerAdContainer:(id)");
}

-(void) setNowPlayingCards:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingCards:(id)");
}

-(void) setCustomTemplateStationAdContainerViewController:(id) {
	%orig;
	NSLog(@"-(void) setCustomTemplateStationAdContainerViewController:(id)");
}

-(void) setLevel1AdViewContainerViewController:(id) {
	%orig;
	NSLog(@"-(void) setLevel1AdViewContainerViewController:(id)");
}

-(id) voiceAdControlsViewController {
	%orig;
	NSLog(@"-(id) voiceAdControlsViewController");
}

-(void) setVoiceAdControlsViewController:(id) {
	%orig;
	NSLog(@"-(void) setVoiceAdControlsViewController:(id)");
}

-(void) setIsTransitionComplete:(bool) {
	%orig;
	NSLog(@"-(void) setIsTransitionComplete:(bool)");
}

-(void) setNowPlayingControlBarView:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingControlBarView:(id)");
}

-(void) setNowPlayingProgressBarView:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingProgressBarView:(id)");
}

-(void) setCollapsedTunerView:(id) {
	%orig;
	NSLog(@"-(void) setCollapsedTunerView:(id)");
}

-(id) progressBarViewConstraints {
	%orig;
	NSLog(@"-(id) progressBarViewConstraints");
}

-(void) setProgressBarViewConstraints:(id) {
	%orig;
	NSLog(@"-(void) setProgressBarViewConstraints:(id)");
}

-(id) controlBarViewConstraints {
	%orig;
	NSLog(@"-(id) controlBarViewConstraints");
}

-(void) setControlBarViewConstraints:(id) {
	%orig;
	NSLog(@"-(void) setControlBarViewConstraints:(id)");
}

-(id) collapsedTunerConstraints {
	%orig;
	NSLog(@"-(id) collapsedTunerConstraints");
}

-(void) setCollapsedTunerConstraints:(id) {
	%orig;
	NSLog(@"-(void) setCollapsedTunerConstraints:(id)");
}

-(id) mainViewConstraints {
	%orig;
	NSLog(@"-(id) mainViewConstraints");
}

-(void) setMainViewConstraints:(id) {
	%orig;
	NSLog(@"-(void) setMainViewConstraints:(id)");
}

-(id) viewDisappearedOn {
	%orig;
	NSLog(@"-(id) viewDisappearedOn");
}

-(void) setEmptyNavItemView:(id) {
	%orig;
	NSLog(@"-(void) setEmptyNavItemView:(id)");
}

-(void) setCollectionViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCollectionViewTopConstraint:(id)");
}

-(void) setTunerBarContainer:(id) {
	%orig;
	NSLog(@"-(void) setTunerBarContainer:(id)");
}

-(void) setCollapsedTunerContainer:(id) {
	%orig;
	NSLog(@"-(void) setCollapsedTunerContainer:(id)");
}

-(void) setAudioAdContainer:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdContainer:(id)");
}

-(void) setAudioAdImageButton:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdImageButton:(id)");
}

-(void) setAudioAdImageView:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdImageView:(id)");
}

-(void) setAudioAdLabel:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdLabel:(id)");
}

-(id) castMessage {
	%orig;
	NSLog(@"-(id) castMessage");
}

-(void) setCastMessage:(id) {
	%orig;
	NSLog(@"-(void) setCastMessage:(id)");
}

-(bool) shouldResetFirstResponder {
	%orig;
	NSLog(@"-(bool) shouldResetFirstResponder");
}

-(bool) freezeMeterUpdate {
	%orig;
	NSLog(@"-(bool) freezeMeterUpdate");
}

-(long long) prevViewMode {
	%orig;
	NSLog(@"-(long long) prevViewMode");
}

-(void) setPrevViewMode:(long long) {
	%orig;
	NSLog(@"-(void) setPrevViewMode:(long long)");
}

-(void) setLevel2AdContainerPresenter:(id) {
	%orig;
	NSLog(@"-(void) setLevel2AdContainerPresenter:(id)");
}

-(void) setAdTouchEventHelper:(id) {
	%orig;
	NSLog(@"-(void) setAdTouchEventHelper:(id)");
}

-(bool) hideTabBarWhenVisible {
	%orig;
	NSLog(@"-(bool) hideTabBarWhenVisible");
}

-(void) openL2LandingPage:(id) {
	%orig;
	NSLog(@"-(void) openL2LandingPage:(id)");
}

-(void) setupCustomTemplateStationAdContainerViewController {
	%orig;
	NSLog(@"-(void) setupCustomTemplateStationAdContainerViewController");
}

-(void) addCollapsedTunerToViewIn:(id) {
	%orig;
	NSLog(@"-(void) addCollapsedTunerToViewIn:(id)");
}

-(void) addControlBarAndProgressBarToViewIn:(id) {
	%orig;
	NSLog(@"-(void) addControlBarAndProgressBarToViewIn:(id)");
}

-(void) setCastButton:(id) {
	%orig;
	NSLog(@"-(void) setCastButton:(id)");
}

-(id) castButton {
	%orig;
	NSLog(@"-(id) castButton");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(bool) inNowPlaying {
	%orig;
	NSLog(@"-(bool) inNowPlaying");
}

-(id) radio {
	%orig;
	NSLog(@"-(id) radio");
}

-(void) setInNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setInNowPlaying:(bool)");
}

-(long long) replayableTrackHistoryCount {
	%orig;
	NSLog(@"-(long long) replayableTrackHistoryCount");
}

-(void) setReplayableTrackHistoryCount:(long long) {
	%orig;
	NSLog(@"-(void) setReplayableTrackHistoryCount:(long long)");
}

-(void) logoutDidComplete {
	%orig;
	NSLog(@"-(void) logoutDidComplete");
}

-(void) radioReplayRequestForTrack:(id) wasSuccessful:(id) {
	%orig;
	NSLog(@"-(void) radioReplayRequestForTrack:(id) wasSuccessful:(id)");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) appWillEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) appWillEnterForeground:(id)");
}

-(id) initWithViewModel:(id) {
	%orig;
	NSLog(@"-(id) initWithViewModel:(id)");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) setViewModel:(id) {
	%orig;
	NSLog(@"-(void) setViewModel:(id)");
}

-(id) shareButton {
	%orig;
	NSLog(@"-(id) shareButton");
}

-(void) setRadio:(id) {
	%orig;
	NSLog(@"-(void) setRadio:(id)");
}

-(void) setIsAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setIsAnimating:(bool)");
}

-(bool) isUserSwiping {
	%orig;
	NSLog(@"-(bool) isUserSwiping");
}

-(void) setIsUserSwiping:(bool) {
	%orig;
	NSLog(@"-(void) setIsUserSwiping:(bool)");
}

-(void) setViewHasAppeared:(bool) {
	%orig;
	NSLog(@"-(void) setViewHasAppeared:(bool)");
}

-(bool) viewHasAppeared {
	%orig;
	NSLog(@"-(bool) viewHasAppeared");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(void) setIsRotating:(bool) {
	%orig;
	NSLog(@"-(void) setIsRotating:(bool)");
}

-(void) appDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) appDidBecomeActive:(id)");
}

-(void) appDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) appDidEnterBackground:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) didMoveToParentViewController:(id) {
	%orig;
	NSLog(@"-(void) didMoveToParentViewController:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(bool) isRotating {
	%orig;
	NSLog(@"-(bool) isRotating");
}

-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(bool) isAnimating {
	%orig;
	NSLog(@"-(bool) isAnimating");
}

-(bool) prefersHomeIndicatorAutoHidden {
	%orig;
	NSLog(@"-(bool) prefersHomeIndicatorAutoHidden");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

-(double) lastContentOffset {
	%orig;
	NSLog(@"-(double) lastContentOffset");
}

-(void) setLastContentOffset:(double) {
	%orig;
	NSLog(@"-(void) setLastContentOffset:(double)");
}

-(id) infoButton {
	%orig;
	NSLog(@"-(id) infoButton");
}

-(void) setInfoButton:(id) {
	%orig;
	NSLog(@"-(void) setInfoButton:(id)");
}

%end

%hook PMEditAlarmController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) multiOptionViewControllerDidChangeSelectedValues:(id) {
	%orig;
	NSLog(@"-(void) multiOptionViewControllerDidChangeSelectedValues:(id)");
}

-(id) howItWorksView {
	%orig;
	NSLog(@"-(id) howItWorksView");
}

-(id) howItWorksButton {
	%orig;
	NSLog(@"-(id) howItWorksButton");
}

-(void) updateNavigationBarContent {
	%orig;
	NSLog(@"-(void) updateNavigationBarContent");
}

-(void) setupTimePickerValue {
	%orig;
	NSLog(@"-(void) setupTimePickerValue");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(id) pendingAlarmInfo {
	%orig;
	NSLog(@"-(id) pendingAlarmInfo");
}

-(void) saveAlarmAndDismiss {
	%orig;
	NSLog(@"-(void) saveAlarmAndDismiss");
}

-(void) showStationPicker {
	%orig;
	NSLog(@"-(void) showStationPicker");
}

-(void) setDismissOnHideReminders:(bool) {
	%orig;
	NSLog(@"-(void) setDismissOnHideReminders:(bool)");
}

-(void) showReminders {
	%orig;
	NSLog(@"-(void) showReminders");
}

-(void) setIsShowingReminders:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingReminders:(bool)");
}

-(void) setRemindersViewController:(id) {
	%orig;
	NSLog(@"-(void) setRemindersViewController:(id)");
}

-(id) remindersViewController {
	%orig;
	NSLog(@"-(id) remindersViewController");
}

-(bool) dismissOnHideReminders {
	%orig;
	NSLog(@"-(bool) dismissOnHideReminders");
}

-(void) setupCancelButton {
	%orig;
	NSLog(@"-(void) setupCancelButton");
}

-(void) setupSaveButton {
	%orig;
	NSLog(@"-(void) setupSaveButton");
}

-(void) showSnoozeOptions {
	%orig;
	NSLog(@"-(void) showSnoozeOptions");
}

-(void) hideReminders {
	%orig;
	NSLog(@"-(void) hideReminders");
}

-(void) alarmRemindersControllerDismissButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) alarmRemindersControllerDismissButtonPressed:(id)");
}

-(void) stationPickerControllerDidChangeSelectedStation:(id) {
	%orig;
	NSLog(@"-(void) stationPickerControllerDidChangeSelectedStation:(id)");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(void) showRemindersButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) showRemindersButtonPressed:(id)");
}

-(void) timePickerValueChanged:(id) {
	%orig;
	NSLog(@"-(void) timePickerValueChanged:(id)");
}

-(void) setHowItWorksView:(id) {
	%orig;
	NSLog(@"-(void) setHowItWorksView:(id)");
}

-(void) setTimePicker:(id) {
	%orig;
	NSLog(@"-(void) setTimePicker:(id)");
}

-(id) confirmationButtonView {
	%orig;
	NSLog(@"-(id) confirmationButtonView");
}

-(void) setConfirmationButtonView:(id) {
	%orig;
	NSLog(@"-(void) setConfirmationButtonView:(id)");
}

-(id) saveConfirmationButton {
	%orig;
	NSLog(@"-(id) saveConfirmationButton");
}

-(void) setSaveConfirmationButton:(id) {
	%orig;
	NSLog(@"-(void) setSaveConfirmationButton:(id)");
}

-(id) cancelConfirmationButton {
	%orig;
	NSLog(@"-(id) cancelConfirmationButton");
}

-(void) setCancelConfirmationButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelConfirmationButton:(id)");
}

-(void) setHowItWorksButton:(id) {
	%orig;
	NSLog(@"-(void) setHowItWorksButton:(id)");
}

-(void) setPendingAlarmInfo:(id) {
	%orig;
	NSLog(@"-(void) setPendingAlarmInfo:(id)");
}

-(bool) isShowingReminders {
	%orig;
	NSLog(@"-(bool) isShowingReminders");
}

-(void) volumeSliderValueChanged:(id) {
	%orig;
	NSLog(@"-(void) volumeSliderValueChanged:(id)");
}

-(id) alarm {
	%orig;
	NSLog(@"-(id) alarm");
}

-(id) timePicker {
	%orig;
	NSLog(@"-(id) timePicker");
}

-(void) setAlarm:(id) {
	%orig;
	NSLog(@"-(void) setAlarm:(id)");
}

-(void) saveButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) saveButtonPressed:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) pushViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) pushViewController:(id) animated:(bool)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) cancelButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) cancelButtonPressed:(id)");
}

%end

%hook PMFindPeopleController

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(void) webViewHost:(id) didReceiveEvent:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) didReceiveEvent:(id)");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) authorizeWillStart:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeWillStart:(long long) context:(id)");
}

-(void) authorizeDidEnd:(long long) success:(bool) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeDidEnd:(long long) success:(bool) context:(id)");
}

-(void) setFacebookAuthInitiatedByFindPeopleController:(bool) {
	%orig;
	NSLog(@"-(void) setFacebookAuthInitiatedByFindPeopleController:(bool)");
}

-(void) setDidLoadFbFriends:(bool) {
	%orig;
	NSLog(@"-(void) setDidLoadFbFriends:(bool)");
}

-(void) resultsNeedRefreshNotification:(id) {
	%orig;
	NSLog(@"-(void) resultsNeedRefreshNotification:(id)");
}

-(id) resultsWebView {
	%orig;
	NSLog(@"-(id) resultsWebView");
}

-(void) setResultsWebView:(id) {
	%orig;
	NSLog(@"-(void) setResultsWebView:(id)");
}

-(id) alsoShareView {
	%orig;
	NSLog(@"-(id) alsoShareView");
}

-(void) setWebViewBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setWebViewBottomConstraint:(id)");
}

-(id) webViewBottomConstraint {
	%orig;
	NSLog(@"-(id) webViewBottomConstraint");
}

-(void) setBackstageHost:(id) {
	%orig;
	NSLog(@"-(void) setBackstageHost:(id)");
}

-(id) backstageHost {
	%orig;
	NSLog(@"-(id) backstageHost");
}

-(id) introNewSubViewIphone {
	%orig;
	NSLog(@"-(id) introNewSubViewIphone");
}

-(void) setupSearchField {
	%orig;
	NSLog(@"-(void) setupSearchField");
}

-(void) setupBackBarButton {
	%orig;
	NSLog(@"-(void) setupBackBarButton");
}

-(void) buildAccessibilityLabels {
	%orig;
	NSLog(@"-(void) buildAccessibilityLabels");
}

-(id) searchTextField {
	%orig;
	NSLog(@"-(id) searchTextField");
}

-(id) searchFieldContainer {
	%orig;
	NSLog(@"-(id) searchFieldContainer");
}

-(void) setNoResultHidden:(bool) withTitle:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) setNoResultHidden:(bool) withTitle:(id) animated:(bool)");
}

-(void) addFacebookConnectButton {
	%orig;
	NSLog(@"-(void) addFacebookConnectButton");
}

-(void) addFacebookButtonBelowSearchField {
	%orig;
	NSLog(@"-(void) addFacebookButtonBelowSearchField");
}

-(bool) isFacebookConnected {
	%orig;
	NSLog(@"-(bool) isFacebookConnected");
}

-(void) setIntroViewHiddenWithAnimation:(bool) {
	%orig;
	NSLog(@"-(void) setIntroViewHiddenWithAnimation:(bool)");
}

-(void) setFBConnectViewHidden:(bool) withAnimation:(bool) {
	%orig;
	NSLog(@"-(void) setFBConnectViewHidden:(bool) withAnimation:(bool)");
}

-(void) setupFBFriends {
	%orig;
	NSLog(@"-(void) setupFBFriends");
}

-(void) backButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) backButtonPressed:(id)");
}

-(void) setSearchTextField:(id) {
	%orig;
	NSLog(@"-(void) setSearchTextField:(id)");
}

-(void) jsBridgeSetSearchFacebookEnabled:(bool) {
	%orig;
	NSLog(@"-(void) jsBridgeSetSearchFacebookEnabled:(bool)");
}

-(void) loadFbFriendsIfNeeded {
	%orig;
	NSLog(@"-(void) loadFbFriendsIfNeeded");
}

-(bool) facebookAuthInitiatedByFindPeopleController {
	%orig;
	NSLog(@"-(bool) facebookAuthInitiatedByFindPeopleController");
}

-(void) jsBridgeDoSearch {
	%orig;
	NSLog(@"-(void) jsBridgeDoSearch");
}

-(bool) isWaitingToSetupForFacebook {
	%orig;
	NSLog(@"-(bool) isWaitingToSetupForFacebook");
}

-(void) setEmptyFolloweesMode:(bool) {
	%orig;
	NSLog(@"-(void) setEmptyFolloweesMode:(bool)");
}

-(bool) isDisplayingSearchResults {
	%orig;
	NSLog(@"-(bool) isDisplayingSearchResults");
}

-(bool) emptyFolloweesMode {
	%orig;
	NSLog(@"-(bool) emptyFolloweesMode");
}

-(void) searchTextDidChange {
	%orig;
	NSLog(@"-(void) searchTextDidChange");
}

-(void) setIsDisplayingSearchResults:(bool) {
	%orig;
	NSLog(@"-(void) setIsDisplayingSearchResults:(bool)");
}

-(void) setLastSearchText:(id) {
	%orig;
	NSLog(@"-(void) setLastSearchText:(id)");
}

-(id) lastSearchText {
	%orig;
	NSLog(@"-(id) lastSearchText");
}

-(void) jsBridgeDoSearch:(id) {
	%orig;
	NSLog(@"-(void) jsBridgeDoSearch:(id)");
}

-(id) resultViewTopConstraint {
	%orig;
	NSLog(@"-(id) resultViewTopConstraint");
}

-(id) noResultsView {
	%orig;
	NSLog(@"-(id) noResultsView");
}

-(id) findFriendsButtonTopConstraint {
	%orig;
	NSLog(@"-(id) findFriendsButtonTopConstraint");
}

-(void) setIsWaitingToSetupForFacebook:(bool) {
	%orig;
	NSLog(@"-(void) setIsWaitingToSetupForFacebook:(bool)");
}

-(void) connectToFacebook:(id) {
	%orig;
	NSLog(@"-(void) connectToFacebook:(id)");
}

-(void) jsBridgeSendFbFriends:(id) {
	%orig;
	NSLog(@"-(void) jsBridgeSendFbFriends:(id)");
}

-(id) findFriendsButtonHeightConstraint {
	%orig;
	NSLog(@"-(id) findFriendsButtonHeightConstraint");
}

-(id) fbConnectButtonView {
	%orig;
	NSLog(@"-(id) fbConnectButtonView");
}

-(void) addBottomBorderToAlsoShareView {
	%orig;
	NSLog(@"-(void) addBottomBorderToAlsoShareView");
}

-(bool) isRootView {
	%orig;
	NSLog(@"-(bool) isRootView");
}

-(void) searchTextField:(id) didChangeWithText:(id) {
	%orig;
	NSLog(@"-(void) searchTextField:(id) didChangeWithText:(id)");
}

-(void) searchTextField:(id) didTapReturnWithText:(id) {
	%orig;
	NSLog(@"-(void) searchTextField:(id) didTapReturnWithText:(id)");
}

-(void) searchTextFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) searchTextFieldDidBeginEditing:(id)");
}

-(void) searchTextFieldDidTapCloseButton:(id) {
	%orig;
	NSLog(@"-(void) searchTextFieldDidTapCloseButton:(id)");
}

-(void) requestDidFailWithError:(id) withPlatform:(long long) queryType:(long long) {
	%orig;
	NSLog(@"-(void) requestDidFailWithError:(id) withPlatform:(long long) queryType:(long long)");
}

-(void) requestDidLoad:(id) withPlatform:(long long) queryType:(long long) {
	%orig;
	NSLog(@"-(void) requestDidLoad:(id) withPlatform:(long long) queryType:(long long)");
}

-(bool) didLoadFbFriends {
	%orig;
	NSLog(@"-(bool) didLoadFbFriends");
}

-(void) setFbConnectButtonView:(id) {
	%orig;
	NSLog(@"-(void) setFbConnectButtonView:(id)");
}

-(void) setIntroNewSubViewIphone:(id) {
	%orig;
	NSLog(@"-(void) setIntroNewSubViewIphone:(id)");
}

-(void) setAlsoShareView:(id) {
	%orig;
	NSLog(@"-(void) setAlsoShareView:(id)");
}

-(void) setNoResultsView:(id) {
	%orig;
	NSLog(@"-(void) setNoResultsView:(id)");
}

-(void) setSearchFieldContainer:(id) {
	%orig;
	NSLog(@"-(void) setSearchFieldContainer:(id)");
}

-(id) findPeopleImageView {
	%orig;
	NSLog(@"-(id) findPeopleImageView");
}

-(void) setFindPeopleImageView:(id) {
	%orig;
	NSLog(@"-(void) setFindPeopleImageView:(id)");
}

-(void) setFindFriendsButtonTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setFindFriendsButtonTopConstraint:(id)");
}

-(void) setFindFriendsButtonHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setFindFriendsButtonHeightConstraint:(id)");
}

-(void) setResultViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setResultViewTopConstraint:(id)");
}

-(id) introTextViewTopConstraint {
	%orig;
	NSLog(@"-(id) introTextViewTopConstraint");
}

-(void) setIntroTextViewTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setIntroTextViewTopConstraint:(id)");
}

-(id) noResultsLabel {
	%orig;
	NSLog(@"-(id) noResultsLabel");
}

-(void) setNoResultsLabel:(id) {
	%orig;
	NSLog(@"-(void) setNoResultsLabel:(id)");
}

-(void) setTextViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setTextViewContainer:(id)");
}

-(id) textViewContainer {
	%orig;
	NSLog(@"-(id) textViewContainer");
}

-(id) urlString {
	%orig;
	NSLog(@"-(id) urlString");
}

-(void) searchWithText:(id) {
	%orig;
	NSLog(@"-(void) searchWithText:(id)");
}

-(id) introView {
	%orig;
	NSLog(@"-(id) introView");
}

-(void) setIntroView:(id) {
	%orig;
	NSLog(@"-(void) setIntroView:(id)");
}

-(id) cancelBarButton {
	%orig;
	NSLog(@"-(id) cancelBarButton");
}

-(void) setCancelBarButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelBarButton:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(bool) canBecomeFirstResponder {
	%orig;
	NSLog(@"-(bool) canBecomeFirstResponder");
}

-(id) backBarButtonItem {
	%orig;
	NSLog(@"-(id) backBarButtonItem");
}

-(void) setBackBarButtonItem:(id) {
	%orig;
	NSLog(@"-(void) setBackBarButtonItem:(id)");
}

-(void) setLeftBarButtonItem:(id) {
	%orig;
	NSLog(@"-(void) setLeftBarButtonItem:(id)");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) dismissKeyboard {
	%orig;
	NSLog(@"-(void) dismissKeyboard");
}

%end

%hook PMFirstIntroOnboardingRegistrationViewController

-(void) updateBackgroundImageViewIsLandscape:(bool) {
	%orig;
	NSLog(@"-(void) updateBackgroundImageViewIsLandscape:(bool)");
}

-(void) setupTextFieldsAndTableHeight {
	%orig;
	NSLog(@"-(void) setupTextFieldsAndTableHeight");
}

-(void) setErrorMessagesAndIndexPaths:(id) {
	%orig;
	NSLog(@"-(void) setErrorMessagesAndIndexPaths:(id)");
}

-(void) updateSignUpButtonEnabled {
	%orig;
	NSLog(@"-(void) updateSignUpButtonEnabled");
}

-(void) setLastActiveCell:(id) {
	%orig;
	NSLog(@"-(void) setLastActiveCell:(id)");
}

-(void) logViewStateWithPageView:(id) viewMode:(id) {
	%orig;
	NSLog(@"-(void) logViewStateWithPageView:(id) viewMode:(id)");
}

-(void) styleTitleGradientView {
	%orig;
	NSLog(@"-(void) styleTitleGradientView");
}

-(id) lastActiveCell {
	%orig;
	NSLog(@"-(id) lastActiveCell");
}

-(id) emailCell {
	%orig;
	NSLog(@"-(id) emailCell");
}

-(id) signUpButton {
	%orig;
	NSLog(@"-(id) signUpButton");
}

-(id) scrollViewBottomConstriaint {
	%orig;
	NSLog(@"-(id) scrollViewBottomConstriaint");
}

-(id) registrationScrollView {
	%orig;
	NSLog(@"-(id) registrationScrollView");
}

-(void) setIsKeyboardShowing:(bool) {
	%orig;
	NSLog(@"-(void) setIsKeyboardShowing:(bool)");
}

-(id) titleGradientView {
	%orig;
	NSLog(@"-(id) titleGradientView");
}

-(id) subscriptionInfoWebView {
	%orig;
	NSLog(@"-(id) subscriptionInfoWebView");
}

-(id) subscriptionInfoHeightConstraint {
	%orig;
	NSLog(@"-(id) subscriptionInfoHeightConstraint");
}

-(id) termsWebView {
	%orig;
	NSLog(@"-(id) termsWebView");
}

-(id) tableViewHeightConstraint {
	%orig;
	NSLog(@"-(id) tableViewHeightConstraint");
}

-(id) termsWebViewHeightConstraint {
	%orig;
	NSLog(@"-(id) termsWebViewHeightConstraint");
}

-(bool) submissionRequirementsMet {
	%orig;
	NSLog(@"-(bool) submissionRequirementsMet");
}

-(id) lockoutLabel {
	%orig;
	NSLog(@"-(id) lockoutLabel");
}

-(id) errorMessagesAndIndexPaths {
	%orig;
	NSLog(@"-(id) errorMessagesAndIndexPaths");
}

-(void) updateTableViewForCell:(id) indexPath:(id) {
	%orig;
	NSLog(@"-(void) updateTableViewForCell:(id) indexPath:(id)");
}

-(void) setEmailToPopulate:(id) {
	%orig;
	NSLog(@"-(void) setEmailToPopulate:(id)");
}

-(id) birthYearCell {
	%orig;
	NSLog(@"-(id) birthYearCell");
}

-(void) lockoutUserWithMessage:(id) {
	%orig;
	NSLog(@"-(void) lockoutUserWithMessage:(id)");
}

-(void) performNewUserSignUp {
	%orig;
	NSLog(@"-(void) performNewUserSignUp");
}

-(id) zipcodeCell {
	%orig;
	NSLog(@"-(id) zipcodeCell");
}

-(id) genderCell {
	%orig;
	NSLog(@"-(id) genderCell");
}

-(id) emailToPopulate {
	%orig;
	NSLog(@"-(id) emailToPopulate");
}

-(void) updateErrorStateForCell:(id) {
	%orig;
	NSLog(@"-(void) updateErrorStateForCell:(id)");
}

-(void) handleExistingAccount {
	%orig;
	NSLog(@"-(void) handleExistingAccount");
}

-(void) displayForgotPasswordControllerAnimated:(bool) {
	%orig;
	NSLog(@"-(void) displayForgotPasswordControllerAnimated:(bool)");
}

-(void) displayPrivacyPolicyAlertWithTitle:(id) message:(id) {
	%orig;
	NSLog(@"-(void) displayPrivacyPolicyAlertWithTitle:(id) message:(id)");
}

-(void) displayPrivacyPolicyWebView {
	%orig;
	NSLog(@"-(void) displayPrivacyPolicyWebView");
}

-(bool) onboardingCellIsNewAccount:(id) {
	%orig;
	NSLog(@"-(bool) onboardingCellIsNewAccount:(id)");
}

-(bool) onboardingTextCellShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) onboardingTextCellShouldReturn:(id)");
}

-(void) onboardingTextCellDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidEndEditing:(id)");
}

-(void) onboardingTextCellDidChange:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidChange:(id)");
}

-(void) onboardingTextCellDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) onboardingTextCellDidBeginEditing:(id)");
}

-(void) onboardingPasswordCell:(id) visible:(bool) {
	%orig;
	NSLog(@"-(void) onboardingPasswordCell:(id) visible:(bool)");
}

-(void) displayWhyBirthYearAlert:(id) {
	%orig;
	NSLog(@"-(void) displayWhyBirthYearAlert:(id)");
}

-(bool) shouldShowBirthMonthDay:(id) {
	%orig;
	NSLog(@"-(bool) shouldShowBirthMonthDay:(id)");
}

-(void) displayWhyZipcodeAlert:(id) {
	%orig;
	NSLog(@"-(void) displayWhyZipcodeAlert:(id)");
}

-(void) genderSelectedForCell:(id) {
	%orig;
	NSLog(@"-(void) genderSelectedForCell:(id)");
}

-(void) displayWhyGenderAlert:(id) {
	%orig;
	NSLog(@"-(void) displayWhyGenderAlert:(id)");
}

-(void) signUpFailedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) signUpFailedWithErrorCode:(long long)");
}

-(void) backgroundTapped:(id) {
	%orig;
	NSLog(@"-(void) backgroundTapped:(id)");
}

-(void) signUpButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) signUpButtonTapped:(id)");
}

-(void) backButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) backButtonTapped:(id)");
}

-(void) secondaryActionButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) secondaryActionButtonTapped:(id)");
}

-(void) setTitleGradientView:(id) {
	%orig;
	NSLog(@"-(void) setTitleGradientView:(id)");
}

-(void) setTermsWebView:(id) {
	%orig;
	NSLog(@"-(void) setTermsWebView:(id)");
}

-(void) setSubscriptionInfoWebView:(id) {
	%orig;
	NSLog(@"-(void) setSubscriptionInfoWebView:(id)");
}

-(void) setSignUpButton:(id) {
	%orig;
	NSLog(@"-(void) setSignUpButton:(id)");
}

-(void) setSecondaryActionButton:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryActionButton:(id)");
}

-(void) setLockoutLabel:(id) {
	%orig;
	NSLog(@"-(void) setLockoutLabel:(id)");
}

-(void) setRegistrationScrollView:(id) {
	%orig;
	NSLog(@"-(void) setRegistrationScrollView:(id)");
}

-(void) setTableViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTableViewHeightConstraint:(id)");
}

-(void) setTermsWebViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTermsWebViewHeightConstraint:(id)");
}

-(void) setSubscriptionInfoHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSubscriptionInfoHeightConstraint:(id)");
}

-(void) setScrollViewBottomConstriaint:(id) {
	%orig;
	NSLog(@"-(void) setScrollViewBottomConstriaint:(id)");
}

-(bool) isKeyboardShowing {
	%orig;
	NSLog(@"-(bool) isKeyboardShowing");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) setViewModel:(id) {
	%orig;
	NSLog(@"-(void) setViewModel:(id)");
}

-(id) nextIndexPath:(id) {
	%orig;
	NSLog(@"-(id) nextIndexPath:(id)");
}

-(void) keyboardWillHide:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillHide:(id)");
}

-(void) keyboardWillShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShow:(id)");
}

-(id) secondaryActionButton {
	%orig;
	NSLog(@"-(id) secondaryActionButton");
}

-(id) passwordCell {
	%orig;
	NSLog(@"-(id) passwordCell");
}

-(void) setLogoView:(id) {
	%orig;
	NSLog(@"-(void) setLogoView:(id)");
}

-(id) logoView {
	%orig;
	NSLog(@"-(id) logoView");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(void) setHeaderTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderTitleLabel:(id)");
}

-(id) headerTitleLabel {
	%orig;
	NSLog(@"-(id) headerTitleLabel");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) headerView {
	%orig;
	NSLog(@"-(id) headerView");
}

-(void) setHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setHeaderView:(id)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(id) backButton {
	%orig;
	NSLog(@"-(id) backButton");
}

-(void) setBackButton:(id) {
	%orig;
	NSLog(@"-(void) setBackButton:(id)");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

-(void) keyboardDidShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardDidShow:(id)");
}

-(void) keyboardDidHide:(id) {
	%orig;
	NSLog(@"-(void) keyboardDidHide:(id)");
}

-(void) hideKeyboard {
	%orig;
	NSLog(@"-(void) hideKeyboard");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

%end

%hook PMStationListNavigationController

-(void) setupTabBarButtonImage {
	%orig;
	NSLog(@"-(void) setupTabBarButtonImage");
}

-(void) reloadRootController {
	%orig;
	NSLog(@"-(void) reloadRootController");
}

-(void) setRootController:(id) {
	%orig;
	NSLog(@"-(void) setRootController:(id)");
}

-(id) rootController {
	%orig;
	NSLog(@"-(id) rootController");
}

-(void) setNavController:(id) {
	%orig;
	NSLog(@"-(void) setNavController:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(id) navController {
	%orig;
	NSLog(@"-(id) navController");
}

%end

%hook PMNoticeController

+(void) showBookmarkNotice {
	%orig;
	NSLog(@"+(void) showBookmarkNotice");
}

+(id) showNoticeWithText:(id) {
	%orig;
	NSLog(@"+(id) showNoticeWithText:(id)");
}

+(id) showNoticeOnController:(id) text:(id) autoDismiss:(bool) disableInteractions:(bool) {
	%orig;
	NSLog(@"+(id) showNoticeOnController:(id) text:(id) autoDismiss:(bool) disableInteractions:(bool)");
}

+(id) showNoticeOnWindow:(id) text:(id) autoDismiss:(bool) disableInteractions:(bool) {
	%orig;
	NSLog(@"+(id) showNoticeOnWindow:(id) text:(id) autoDismiss:(bool) disableInteractions:(bool)");
}

-(void) dismissNoticeAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissNoticeAnimated:(bool) completion:(id)");
}

-(void) setDidDisableInteractions:(bool) {
	%orig;
	NSLog(@"-(void) setDidDisableInteractions:(bool)");
}

-(void) showWithText:(id) autoDismiss:(bool) disableInteractions:(bool) {
	%orig;
	NSLog(@"-(void) showWithText:(id) autoDismiss:(bool) disableInteractions:(bool)");
}

-(id) noticeView {
	%orig;
	NSLog(@"-(id) noticeView");
}

-(bool) didDisableInteractions {
	%orig;
	NSLog(@"-(bool) didDisableInteractions");
}

-(void) setNoticeView:(id) {
	%orig;
	NSLog(@"-(void) setNoticeView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

-(id) activity {
	%orig;
	NSLog(@"-(id) activity");
}

-(void) setActivity:(id) {
	%orig;
	NSLog(@"-(void) setActivity:(id)");
}

%end

%hook PMBaseMiniPlayerViewController

-(id) artistNameLabel {
	%orig;
	NSLog(@"-(id) artistNameLabel");
}

-(void) setArtistNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistNameLabel:(id)");
}

-(id) accessibilityView {
	%orig;
	NSLog(@"-(id) accessibilityView");
}

-(id) songTitleLabel {
	%orig;
	NSLog(@"-(id) songTitleLabel");
}

-(void) stopMarquee {
	%orig;
	NSLog(@"-(void) stopMarquee");
}

-(void) startMarquee {
	%orig;
	NSLog(@"-(void) startMarquee");
}

-(id) viewForProgressBar {
	%orig;
	NSLog(@"-(id) viewForProgressBar");
}

-(void) miniPlayerWasTapped:(id) {
	%orig;
	NSLog(@"-(void) miniPlayerWasTapped:(id)");
}

-(void) setupForTransition {
	%orig;
	NSLog(@"-(void) setupForTransition");
}

-(void) transitionFinalized {
	%orig;
	NSLog(@"-(void) transitionFinalized");
}

-(void) setSongTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSongTitleLabel:(id)");
}

-(void) setAccessibilityView:(id) {
	%orig;
	NSLog(@"-(void) setAccessibilityView:(id)");
}

-(id) albumImageView {
	%orig;
	NSLog(@"-(id) albumImageView");
}

-(void) setAlbumImageView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumImageView:(id)");
}

-(void) longPressGestureRecognized:(id) {
	%orig;
	NSLog(@"-(void) longPressGestureRecognized:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMPremiumMiniPlayerViewController

-(void) interactiveTransitionWillDisplay:(bool) {
	%orig;
	NSLog(@"-(void) interactiveTransitionWillDisplay:(bool)");
}

-(void) musicSessionModelDidChange:(id) {
	%orig;
	NSLog(@"-(void) musicSessionModelDidChange:(id)");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionBufferStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionBufferStateDidChangeTo:(bool)");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) activeTrackCompleted:(id) {
	%orig;
	NSLog(@"-(void) activeTrackCompleted:(id)");
}

-(id) viewForProgressBar {
	%orig;
	NSLog(@"-(id) viewForProgressBar");
}

-(void) updateBlurredBackgroundAlbumArt:(id) {
	%orig;
	NSLog(@"-(void) updateBlurredBackgroundAlbumArt:(id)");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(id) albumImageContainerView {
	%orig;
	NSLog(@"-(id) albumImageContainerView");
}

-(void) setAlbumImageContainerView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumImageContainerView:(id)");
}

-(id) progressBarTrackView {
	%orig;
	NSLog(@"-(id) progressBarTrackView");
}

-(void) setProgressBarTrackView:(id) {
	%orig;
	NSLog(@"-(void) setProgressBarTrackView:(id)");
}

-(id) albumContainerLeadingConstraint {
	%orig;
	NSLog(@"-(id) albumContainerLeadingConstraint");
}

-(void) setAlbumContainerLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumContainerLeadingConstraint:(id)");
}

-(id) albumImageWidthConstraint {
	%orig;
	NSLog(@"-(id) albumImageWidthConstraint");
}

-(void) setAlbumImageWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumImageWidthConstraint:(id)");
}

-(id) albumImageHeightConstraint {
	%orig;
	NSLog(@"-(id) albumImageHeightConstraint");
}

-(void) setAlbumImageHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumImageHeightConstraint:(id)");
}

-(id) playButtonTopConstraint {
	%orig;
	NSLog(@"-(id) playButtonTopConstraint");
}

-(void) setPlayButtonTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setPlayButtonTopConstraint:(id)");
}

-(id) playButton {
	%orig;
	NSLog(@"-(id) playButton");
}

-(void) setPlayButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayButton:(id)");
}

-(void) playButtonTapped {
	%orig;
	NSLog(@"-(void) playButtonTapped");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) handlePan:(id) {
	%orig;
	NSLog(@"-(void) handlePan:(id)");
}

%end

%hook PMNonPremiumMiniPlayerViewController

-(id) whyAdsButton {
	%orig;
	NSLog(@"-(id) whyAdsButton");
}

-(void) setWhyAdsButton:(id) {
	%orig;
	NSLog(@"-(void) setWhyAdsButton:(id)");
}

-(void) progressViewDidStartBuffering:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidStartBuffering:(id)");
}

-(void) progressViewDidFinishBuffering:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidFinishBuffering:(id)");
}

-(id) viewForProgressBar {
	%orig;
	NSLog(@"-(id) viewForProgressBar");
}

-(void) radioDidInitialize {
	%orig;
	NSLog(@"-(void) radioDidInitialize");
}

-(id) audioAdAppearance {
	%orig;
	NSLog(@"-(id) audioAdAppearance");
}

-(void) setAudioAdAppearance:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdAppearance:(id)");
}

-(bool) trackProgressViewIsBuffering {
	%orig;
	NSLog(@"-(bool) trackProgressViewIsBuffering");
}

-(float) trackProgressViewPlayingProgress {
	%orig;
	NSLog(@"-(float) trackProgressViewPlayingProgress");
}

-(id) animatedEQImages {
	%orig;
	NSLog(@"-(id) animatedEQImages");
}

-(id) eqImageView {
	%orig;
	NSLog(@"-(id) eqImageView");
}

-(void) setEqImageObserver:(id) {
	%orig;
	NSLog(@"-(void) setEqImageObserver:(id)");
}

-(id) albumImageViewLeadingConstraint {
	%orig;
	NSLog(@"-(id) albumImageViewLeadingConstraint");
}

-(id) eqImageViewTrailingConstraint {
	%orig;
	NSLog(@"-(id) eqImageViewTrailingConstraint");
}

-(id) whyAdsTrailingConstraint {
	%orig;
	NSLog(@"-(id) whyAdsTrailingConstraint");
}

-(void) setupLabels {
	%orig;
	NSLog(@"-(void) setupLabels");
}

-(void) setupEQImages {
	%orig;
	NSLog(@"-(void) setupEQImages");
}

-(void) setupWhyAdsButton {
	%orig;
	NSLog(@"-(void) setupWhyAdsButton");
}

-(void) loadInitialViewInfo {
	%orig;
	NSLog(@"-(void) loadInitialViewInfo");
}

-(id) trackInfoContainerEqualTopConstraint {
	%orig;
	NSLog(@"-(id) trackInfoContainerEqualTopConstraint");
}

-(id) trackInfoContainer {
	%orig;
	NSLog(@"-(id) trackInfoContainer");
}

-(void) setAnimatedEQImages:(id) {
	%orig;
	NSLog(@"-(void) setAnimatedEQImages:(id)");
}

-(id) trackInfoContainerToEQImageviewConstraint {
	%orig;
	NSLog(@"-(id) trackInfoContainerToEQImageviewConstraint");
}

-(id) trackInfoContainerToWhyAdButtonConstraint {
	%orig;
	NSLog(@"-(id) trackInfoContainerToWhyAdButtonConstraint");
}

-(id) albumHeightConstraint {
	%orig;
	NSLog(@"-(id) albumHeightConstraint");
}

-(id) albumWidthConstraint {
	%orig;
	NSLog(@"-(id) albumWidthConstraint");
}

-(void) updateBackgroundView {
	%orig;
	NSLog(@"-(void) updateBackgroundView");
}

-(void) setAnimateEQ:(bool) {
	%orig;
	NSLog(@"-(void) setAnimateEQ:(bool)");
}

-(id) interruptionMessage {
	%orig;
	NSLog(@"-(id) interruptionMessage");
}

-(void) updateUIWithTrack:(id) {
	%orig;
	NSLog(@"-(void) updateUIWithTrack:(id)");
}

-(void) updateEQUI {
	%orig;
	NSLog(@"-(void) updateEQUI");
}

-(void) refreshPlayingProgress {
	%orig;
	NSLog(@"-(void) refreshPlayingProgress");
}

-(void) whyAdsWasTapped:(id) {
	%orig;
	NSLog(@"-(void) whyAdsWasTapped:(id)");
}

-(void) setEqImageView:(id) {
	%orig;
	NSLog(@"-(void) setEqImageView:(id)");
}

-(bool) animateEQ {
	%orig;
	NSLog(@"-(bool) animateEQ");
}

-(id) stopEQImage {
	%orig;
	NSLog(@"-(id) stopEQImage");
}

-(void) setStopEQImage:(id) {
	%orig;
	NSLog(@"-(void) setStopEQImage:(id)");
}

-(id) eqImageObserver {
	%orig;
	NSLog(@"-(id) eqImageObserver");
}

-(void) setTrackInfoContainerToEQImageviewConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTrackInfoContainerToEQImageviewConstraint:(id)");
}

-(void) setTrackInfoContainerToWhyAdButtonConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTrackInfoContainerToWhyAdButtonConstraint:(id)");
}

-(void) setAlbumHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumHeightConstraint:(id)");
}

-(void) setAlbumWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumWidthConstraint:(id)");
}

-(void) setTrackInfoContainer:(id) {
	%orig;
	NSLog(@"-(void) setTrackInfoContainer:(id)");
}

-(void) setTrackInfoContainerEqualTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTrackInfoContainerEqualTopConstraint:(id)");
}

-(void) setAlbumImageViewLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setAlbumImageViewLeadingConstraint:(id)");
}

-(void) setEqImageViewTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setEqImageViewTrailingConstraint:(id)");
}

-(void) setWhyAdsTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setWhyAdsTrailingConstraint:(id)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(id) radio {
	%orig;
	NSLog(@"-(id) radio");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(id) viewContext {
	%orig;
	NSLog(@"-(id) viewContext");
}

-(void) refreshData {
	%orig;
	NSLog(@"-(void) refreshData");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(void) setRadio:(id) {
	%orig;
	NSLog(@"-(void) setRadio:(id)");
}

-(id) presenter {
	%orig;
	NSLog(@"-(id) presenter");
}

-(void) setPresenter:(id) {
	%orig;
	NSLog(@"-(void) setPresenter:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) backgroundView {
	%orig;
	NSLog(@"-(id) backgroundView");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) setBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundView:(id)");
}

%end

%hook PMMultiOptionViewController

-(void) setSelectedValues:(id) {
	%orig;
	NSLog(@"-(void) setSelectedValues:(id)");
}

-(id) selectedValues {
	%orig;
	NSLog(@"-(id) selectedValues");
}

-(bool) firstOptionRepresentsNothingSelected {
	%orig;
	NSLog(@"-(bool) firstOptionRepresentsNothingSelected");
}

-(id) optionValues {
	%orig;
	NSLog(@"-(id) optionValues");
}

-(id) optionTitles {
	%orig;
	NSLog(@"-(id) optionTitles");
}

-(void) setFirstOptionRepresentsNothingSelected:(bool) {
	%orig;
	NSLog(@"-(void) setFirstOptionRepresentsNothingSelected:(bool)");
}

-(void) setOptionTitles:(id) {
	%orig;
	NSLog(@"-(void) setOptionTitles:(id)");
}

-(void) setOptionValues:(id) {
	%orig;
	NSLog(@"-(void) setOptionValues:(id)");
}

-(id) selectedValue {
	%orig;
	NSLog(@"-(id) selectedValue");
}

-(void) setSelectedValue:(id) {
	%orig;
	NSLog(@"-(void) setSelectedValue:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) tableView {
	%orig;
	NSLog(@"-(id) tableView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) setTag:(long long) {
	%orig;
	NSLog(@"-(void) setTag:(long long)");
}

-(long long) tag {
	%orig;
	NSLog(@"-(long long) tag");
}

-(bool) allowsMultipleSelection {
	%orig;
	NSLog(@"-(bool) allowsMultipleSelection");
}

-(void) setAllowsMultipleSelection:(bool) {
	%orig;
	NSLog(@"-(void) setAllowsMultipleSelection:(bool)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(void) tableView:(id) didDeselectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didDeselectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(void) setTableView:(id) {
	%orig;
	NSLog(@"-(void) setTableView:(id)");
}

%end

%hook PMPreviewCardViewController

-(void) didTapCloseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCloseButton:(id)");
}

-(void) previewCardDidDismiss {
	%orig;
	NSLog(@"-(void) previewCardDidDismiss");
}

-(void) setupCloseButton {
	%orig;
	NSLog(@"-(void) setupCloseButton");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(id) presenter {
	%orig;
	NSLog(@"-(id) presenter");
}

-(void) setPresenter:(id) {
	%orig;
	NSLog(@"-(void) setPresenter:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook PMArtistAudioMessagePreviewCardViewController

-(id) artistNameLabel {
	%orig;
	NSLog(@"-(id) artistNameLabel");
}

-(void) setArtistNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistNameLabel:(id)");
}

-(void) progressViewDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidUpdate:(id)");
}

-(id) audioSamplePlayer {
	%orig;
	NSLog(@"-(id) audioSamplePlayer");
}

-(void) audioSamplePlayer:(id) sampleHasStarted:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayer:(id) sampleHasStarted:(id)");
}

-(void) audioSamplePlayerAudioWasCompleted:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasCompleted:(id)");
}

-(void) audioSamplePlayerAudioWasStopped:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasStopped:(id)");
}

-(void) audioSamplePlayerAudioWasPaused:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasPaused:(id)");
}

-(void) audioSamplePlayerAudioWasResumed:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasResumed:(id)");
}

-(void) audioSamplePlayerAudioBeganPlaying:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioBeganPlaying:(id)");
}

-(void) setAudioSamplePlayer:(id) {
	%orig;
	NSLog(@"-(void) setAudioSamplePlayer:(id)");
}

-(void) setMessageFromLabel:(id) {
	%orig;
	NSLog(@"-(void) setMessageFromLabel:(id)");
}

-(id) messageFromLabel {
	%orig;
	NSLog(@"-(id) messageFromLabel");
}

-(id) progressViewContainer {
	%orig;
	NSLog(@"-(id) progressViewContainer");
}

-(void) didTapCloseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCloseButton:(id)");
}

-(void) logStatForAction:(id) {
	%orig;
	NSLog(@"-(void) logStatForAction:(id)");
}

-(void) setupCache {
	%orig;
	NSLog(@"-(void) setupCache");
}

-(void) setupSamplePlayer {
	%orig;
	NSLog(@"-(void) setupSamplePlayer");
}

-(void) updatePlayStopButtonState {
	%orig;
	NSLog(@"-(void) updatePlayStopButtonState");
}

-(id) tileImageView {
	%orig;
	NSLog(@"-(id) tileImageView");
}

-(id) playStopButton {
	%orig;
	NSLog(@"-(id) playStopButton");
}

-(id) ctaButton {
	%orig;
	NSLog(@"-(id) ctaButton");
}

-(bool) assetIsCached {
	%orig;
	NSLog(@"-(bool) assetIsCached");
}

-(id) audioSample {
	%orig;
	NSLog(@"-(id) audioSample");
}

-(void) updatePlaybackProgressInterface {
	%orig;
	NSLog(@"-(void) updatePlaybackProgressInterface");
}

-(void) previewCardDidDismiss {
	%orig;
	NSLog(@"-(void) previewCardDidDismiss");
}

-(id) initWithPreviewData:(id) {
	%orig;
	NSLog(@"-(id) initWithPreviewData:(id)");
}

-(void) ctaTouched:(id) {
	%orig;
	NSLog(@"-(void) ctaTouched:(id)");
}

-(void) playStopTouched:(id) {
	%orig;
	NSLog(@"-(void) playStopTouched:(id)");
}

-(id) audioProgressTimer {
	%orig;
	NSLog(@"-(id) audioProgressTimer");
}

-(void) setAudioProgressTimer:(id) {
	%orig;
	NSLog(@"-(void) setAudioProgressTimer:(id)");
}

-(void) setTileImageView:(id) {
	%orig;
	NSLog(@"-(void) setTileImageView:(id)");
}

-(void) setCtaButton:(id) {
	%orig;
	NSLog(@"-(void) setCtaButton:(id)");
}

-(void) setProgressViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setProgressViewContainer:(id)");
}

-(void) setPlayStopButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayStopButton:(id)");
}

-(void) urlAssetCache:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) urlAssetCache:(id) didFailWithError:(id)");
}

-(void) urlAssetCacheDidFinishCaching:(id) {
	%orig;
	NSLog(@"-(void) urlAssetCacheDidFinishCaching:(id)");
}

-(void) setPreviewData:(id) {
	%orig;
	NSLog(@"-(void) setPreviewData:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(void) setDurationLabel:(id) {
	%orig;
	NSLog(@"-(void) setDurationLabel:(id)");
}

-(id) durationLabel {
	%orig;
	NSLog(@"-(id) durationLabel");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(id) progressLabel {
	%orig;
	NSLog(@"-(id) progressLabel");
}

-(void) setupView {
	%orig;
	NSLog(@"-(void) setupView");
}

-(id) assetCache {
	%orig;
	NSLog(@"-(id) assetCache");
}

-(void) setAssetCache:(id) {
	%orig;
	NSLog(@"-(void) setAssetCache:(id)");
}

-(void) setProgressLabel:(id) {
	%orig;
	NSLog(@"-(void) setProgressLabel:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) previewData {
	%orig;
	NSLog(@"-(id) previewData");
}

%end

%hook PMStationPreviewCardViewController

-(id) stationData {
	%orig;
	NSLog(@"-(id) stationData");
}

-(void) setContentScheme:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setContentScheme:(unsigned long long)");
}

-(id) statsContext {
	%orig;
	NSLog(@"-(id) statsContext");
}

-(void) didTapInfoButton:(id) {
	%orig;
	NSLog(@"-(void) didTapInfoButton:(id)");
}

-(void) setStatsContext:(id) {
	%orig;
	NSLog(@"-(void) setStatsContext:(id)");
}

-(void) setupCloseButton {
	%orig;
	NSLog(@"-(void) setupCloseButton");
}

-(void) setupInfoButton {
	%orig;
	NSLog(@"-(void) setupInfoButton");
}

-(void) setStationData:(id) {
	%orig;
	NSLog(@"-(void) setStationData:(id)");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) initWithData:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id)");
}

-(id) infoButton {
	%orig;
	NSLog(@"-(id) infoButton");
}

-(void) setInfoButton:(id) {
	%orig;
	NSLog(@"-(void) setInfoButton:(id)");
}

%end

%hook PMStationCustomContentPreviewCardViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) stationLabel {
	%orig;
	NSLog(@"-(id) stationLabel");
}

-(void) setContentScheme:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setContentScheme:(unsigned long long)");
}

-(void) didTapCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCreateStationButton:(id)");
}

-(void) presentAlertWithText:(id) {
	%orig;
	NSLog(@"-(void) presentAlertWithText:(id)");
}

-(void) didTapMore:(id) {
	%orig;
	NSLog(@"-(void) didTapMore:(id)");
}

-(void) setStationLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationLabel:(id)");
}

-(id) createButton {
	%orig;
	NSLog(@"-(id) createButton");
}

-(void) setCreateButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateButton:(id)");
}

-(id) createWithTextButton {
	%orig;
	NSLog(@"-(id) createWithTextButton");
}

-(void) setCreateWithTextButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateWithTextButton:(id)");
}

-(void) updateUIWithStation:(id) {
	%orig;
	NSLog(@"-(void) updateUIWithStation:(id)");
}

-(void) setupThumbprintRadioUI {
	%orig;
	NSLog(@"-(void) setupThumbprintRadioUI");
}

-(id) backgroundArtView {
	%orig;
	NSLog(@"-(id) backgroundArtView");
}

-(void) setBackgroundArtView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundArtView:(id)");
}

-(void) browseManagerDidRefreshDetailForStation:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshDetailForStation:(id)");
}

-(void) browseManagerDidFailToRefreshDetailForStation:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshDetailForStation:(id)");
}

-(id) descriptionLabel {
	%orig;
	NSLog(@"-(id) descriptionLabel");
}

-(void) setDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionLabel:(id)");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) initWithData:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id)");
}

-(id) infoButton {
	%orig;
	NSLog(@"-(id) infoButton");
}

-(void) setInfoButton:(id) {
	%orig;
	NSLog(@"-(void) setInfoButton:(id)");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

%end

%hook PMStationArtistsPreviewCardViewController

-(id) stationArtImageView {
	%orig;
	NSLog(@"-(id) stationArtImageView");
}

-(void) setStationArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setStationArtImageView:(id)");
}

-(unsigned long long) numberOfItemsInGalleryView:(id) {
	%orig;
	NSLog(@"-(unsigned long long) numberOfItemsInGalleryView:(id)");
}

-(id) galleryView:(id) cellForItemAtIndex:(unsigned long long) withCGSize:(CGSize) {
	%orig;
	NSLog(@"-(id) galleryView:(id) cellForItemAtIndex:(unsigned long long) withCGSize:(CGSize)");
}

-(void) galleryView:(id) scrolledFromIndex:(long long) toIndex:(long long) {
	%orig;
	NSLog(@"-(void) galleryView:(id) scrolledFromIndex:(long long) toIndex:(long long)");
}

-(void) galleryView:(id) didSelectRowAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) galleryView:(id) didSelectRowAtIndex:(unsigned long long)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) stationLabel {
	%orig;
	NSLog(@"-(id) stationLabel");
}

-(void) setContentScheme:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setContentScheme:(unsigned long long)");
}

-(void) didTapCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCreateStationButton:(id)");
}

-(void) presentAlertWithText:(id) {
	%orig;
	NSLog(@"-(void) presentAlertWithText:(id)");
}

-(void) didTapMore:(id) {
	%orig;
	NSLog(@"-(void) didTapMore:(id)");
}

-(void) setStationLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationLabel:(id)");
}

-(id) createButton {
	%orig;
	NSLog(@"-(id) createButton");
}

-(void) setCreateButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateButton:(id)");
}

-(id) createWithTextButton {
	%orig;
	NSLog(@"-(id) createWithTextButton");
}

-(void) setCreateWithTextButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateWithTextButton:(id)");
}

-(void) updateUIWithStation:(id) populateArtists:(bool) {
	%orig;
	NSLog(@"-(void) updateUIWithStation:(id) populateArtists:(bool)");
}

-(id) listenerCountLabel {
	%orig;
	NSLog(@"-(id) listenerCountLabel");
}

-(id) arcView {
	%orig;
	NSLog(@"-(id) arcView");
}

-(void) setupStationArtImageViewWithStation:(id) {
	%orig;
	NSLog(@"-(void) setupStationArtImageViewWithStation:(id)");
}

-(id) stationArtistImageView {
	%orig;
	NSLog(@"-(id) stationArtistImageView");
}

-(id) artistGalleryView {
	%orig;
	NSLog(@"-(id) artistGalleryView");
}

-(void) setListenerCountLabel:(id) {
	%orig;
	NSLog(@"-(void) setListenerCountLabel:(id)");
}

-(void) setStationArtistImageView:(id) {
	%orig;
	NSLog(@"-(void) setStationArtistImageView:(id)");
}

-(void) setArcView:(id) {
	%orig;
	NSLog(@"-(void) setArcView:(id)");
}

-(void) setArtistGalleryView:(id) {
	%orig;
	NSLog(@"-(void) setArtistGalleryView:(id)");
}

-(void) browseManagerDidRefreshDetailForStation:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshDetailForStation:(id)");
}

-(void) browseManagerDidFailToRefreshDetailForStation:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshDetailForStation:(id)");
}

-(void) setArtists:(id) {
	%orig;
	NSLog(@"-(void) setArtists:(id)");
}

-(id) artists {
	%orig;
	NSLog(@"-(id) artists");
}

-(id) descriptionLabel {
	%orig;
	NSLog(@"-(id) descriptionLabel");
}

-(void) setDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionLabel:(id)");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) initWithData:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id)");
}

-(id) infoButton {
	%orig;
	NSLog(@"-(id) infoButton");
}

-(void) setInfoButton:(id) {
	%orig;
	NSLog(@"-(void) setInfoButton:(id)");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

%end

%hook PMStationSamplesPreviewCardViewController

-(unsigned long long) numberOfItemsInGalleryView:(id) {
	%orig;
	NSLog(@"-(unsigned long long) numberOfItemsInGalleryView:(id)");
}

-(void) galleryView:(id) didEndScrollingOnIndex:(long long) {
	%orig;
	NSLog(@"-(void) galleryView:(id) didEndScrollingOnIndex:(long long)");
}

-(id) galleryView:(id) cellForItemAtIndex:(unsigned long long) withCGSize:(CGSize) {
	%orig;
	NSLog(@"-(id) galleryView:(id) cellForItemAtIndex:(unsigned long long) withCGSize:(CGSize)");
}

-(void) galleryView:(id) scrolledFromIndex:(long long) toIndex:(long long) {
	%orig;
	NSLog(@"-(void) galleryView:(id) scrolledFromIndex:(long long) toIndex:(long long)");
}

-(void) galleryView:(id) didSelectRowAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) galleryView:(id) didSelectRowAtIndex:(unsigned long long)");
}

-(id) audioSamplePlayer {
	%orig;
	NSLog(@"-(id) audioSamplePlayer");
}

-(void) updateUIWithStation:(id) populateSamples:(bool) {
	%orig;
	NSLog(@"-(void) updateUIWithStation:(id) populateSamples:(bool)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) stationLabel {
	%orig;
	NSLog(@"-(id) stationLabel");
}

-(void) setContentScheme:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setContentScheme:(unsigned long long)");
}

-(id) samplesGalleryView {
	%orig;
	NSLog(@"-(id) samplesGalleryView");
}

-(long long) nowPlayingSampleIndex {
	%orig;
	NSLog(@"-(long long) nowPlayingSampleIndex");
}

-(void) playBrowseSamplesAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) playBrowseSamplesAtIndex:(unsigned long long)");
}

-(void) didTapCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCreateStationButton:(id)");
}

-(void) presentAlertWithText:(id) {
	%orig;
	NSLog(@"-(void) presentAlertWithText:(id)");
}

-(void) setNowPlayingSampleIndex:(long long) {
	%orig;
	NSLog(@"-(void) setNowPlayingSampleIndex:(long long)");
}

-(void) logBrowseSamplePlayEventWithProgress:(float) {
	%orig;
	NSLog(@"-(void) logBrowseSamplePlayEventWithProgress:(float)");
}

-(void) hideLockScreenControlsIfNecessary {
	%orig;
	NSLog(@"-(void) hideLockScreenControlsIfNecessary");
}

-(void) didTapMore:(id) {
	%orig;
	NSLog(@"-(void) didTapMore:(id)");
}

-(id) galleryView:(id) sampleTitleForItemAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) galleryView:(id) sampleTitleForItemAtIndex:(long long)");
}

-(id) galleryView:(id) sampleArtistForItemAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) galleryView:(id) sampleArtistForItemAtIndex:(long long)");
}

-(long long) nowPlayingSampleIndexInGalleryView:(id) {
	%orig;
	NSLog(@"-(long long) nowPlayingSampleIndexInGalleryView:(id)");
}

-(void) galleryView:(id) didSelectCell:(id) atIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) galleryView:(id) didSelectCell:(id) atIndex:(unsigned long long)");
}

-(void) galleryView:(id) didTapOniTunesButtonAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) galleryView:(id) didTapOniTunesButtonAtIndex:(unsigned long long)");
}

-(void) audioSamplePlayer:(id) sampleHasStarted:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayer:(id) sampleHasStarted:(id)");
}

-(void) audioSamplePlayerAudioWasCompleted:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasCompleted:(id)");
}

-(void) audioSamplePlayerAudioWasStopped:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasStopped:(id)");
}

-(void) audioSamplePlayerAudioWasPaused:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasPaused:(id)");
}

-(void) audioSamplePlayerAudioWasResumed:(id) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerAudioWasResumed:(id)");
}

-(void) audioSamplePlayerTrack:(id) stoppedWithProgress:(float) {
	%orig;
	NSLog(@"-(void) audioSamplePlayerTrack:(id) stoppedWithProgress:(float)");
}

-(void) setSamplesGalleryView:(id) {
	%orig;
	NSLog(@"-(void) setSamplesGalleryView:(id)");
}

-(void) setStationLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationLabel:(id)");
}

-(id) createButton {
	%orig;
	NSLog(@"-(id) createButton");
}

-(void) setCreateButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateButton:(id)");
}

-(id) createWithTextButton {
	%orig;
	NSLog(@"-(id) createWithTextButton");
}

-(void) setCreateWithTextButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateWithTextButton:(id)");
}

-(void) setAudioSamplePlayer:(id) {
	%orig;
	NSLog(@"-(void) setAudioSamplePlayer:(id)");
}

-(void) browseManagerDidRefreshDetailForStation:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshDetailForStation:(id)");
}

-(void) browseManagerDidFailToRefreshDetailForStation:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshDetailForStation:(id)");
}

-(id) descriptionLabel {
	%orig;
	NSLog(@"-(id) descriptionLabel");
}

-(void) setDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionLabel:(id)");
}

-(void) appDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) appDidEnterBackground:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(id) initWithData:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id)");
}

-(id) samples {
	%orig;
	NSLog(@"-(id) samples");
}

-(void) setSamples:(id) {
	%orig;
	NSLog(@"-(void) setSamples:(id)");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

%end

%hook FBSKStoreProductViewControllerWithOrientationMask

-(id) initWithOrientationMask:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithOrientationMask:(unsigned long long)");
}

-(unsigned long long) orientationMask {
	%orig;
	NSLog(@"-(unsigned long long) orientationMask");
}

-(void) setOrientationMask:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setOrientationMask:(unsigned long long)");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

%end

%hook FirstIntroOverlayPageViewController

-(void) pageViewController:(id) didFinishAnimating:(bool) previousViewControllers:(id) transitionCompleted:(bool) {
	%orig;
	NSLog(@"-(void) pageViewController:(id) didFinishAnimating:(bool) previousViewControllers:(id) transitionCompleted:(bool)");
}

-(id) pageViewController:(id) viewControllerBeforeViewController:(id) {
	%orig;
	NSLog(@"-(id) pageViewController:(id) viewControllerBeforeViewController:(id)");
}

-(id) pageViewController:(id) viewControllerAfterViewController:(id) {
	%orig;
	NSLog(@"-(id) pageViewController:(id) viewControllerAfterViewController:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) initWithTransitionStyle:(long long) navigationOrientation:(long long) options:(id) {
	%orig;
	NSLog(@"-(id) initWithTransitionStyle:(long long) navigationOrientation:(long long) options:(id)");
}

%end

%hook SDLConsoleController

-(id) messageList {
	%orig;
	NSLog(@"-(id) messageList");
}

-(bool) isLastRowVisible {
	%orig;
	NSLog(@"-(bool) isLastRowVisible");
}

-(void) updateWhetherScrolledToBottom {
	%orig;
	NSLog(@"-(void) updateWhetherScrolledToBottom");
}

-(void) logException:(id) withMessage:(id) {
	%orig;
	NSLog(@"-(void) logException:(id) withMessage:(id)");
}

-(void) logMessage:(id) {
	%orig;
	NSLog(@"-(void) logMessage:(id)");
}

-(void) logInfo:(id) {
	%orig;
	NSLog(@"-(void) logInfo:(id)");
}

-(void) append:(id) {
	%orig;
	NSLog(@"-(void) append:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) initWithTableView:(id) {
	%orig;
	NSLog(@"-(id) initWithTableView:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMProductFeatureEditorViewController

-(void) didTapReset:(id) {
	%orig;
	NSLog(@"-(void) didTapReset:(id)");
}

-(void) didTapDone:(id) {
	%orig;
	NSLog(@"-(void) didTapDone:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook SonosGroupEditViewController

-(void) saveGroup {
	%orig;
	NSLog(@"-(void) saveGroup");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(bool) tableView:(id) shouldHighlightRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) tableView:(id) shouldHighlightRowAtIndexPath:(id)");
}

-(id) tableView:(id) willSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) willSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook CastDeviceListViewController

-(void) castVolumeUpdated:(id) {
	%orig;
	NSLog(@"-(void) castVolumeUpdated:(id)");
}

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) dismissCastList {
	%orig;
	NSLog(@"-(void) dismissCastList");
}

-(void) refreshList {
	%orig;
	NSLog(@"-(void) refreshList");
}

-(id) initWithDevice:(id) {
	%orig;
	NSLog(@"-(id) initWithDevice:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) tableView:(id) willDisplayHeaderView:(id) forSection:(long long) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayHeaderView:(id) forSection:(long long)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(bool) tableView:(id) shouldHighlightRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) tableView:(id) shouldHighlightRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(id) tableView:(id) titleForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) titleForHeaderInSection:(long long)");
}

%end

%hook PMStationCatalogEditViewController

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(void) catalogListScrolled:(double) {
	%orig;
	NSLog(@"-(void) catalogListScrolled:(double)");
}

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) didSelectResult:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectResult:(id) isRecommendation:(bool)");
}

-(void) didSelectCollect:(id) isRecommendation:(bool) {
	%orig;
	NSLog(@"-(void) didSelectCollect:(id) isRecommendation:(bool)");
}

-(bool) allowLongPress {
	%orig;
	NSLog(@"-(bool) allowLongPress");
}

-(void) didSelectCancel {
	%orig;
	NSLog(@"-(void) didSelectCancel");
}

-(id) artistMessagingSwitch {
	%orig;
	NSLog(@"-(id) artistMessagingSwitch");
}

-(void) setArtistMessagingSwitch:(id) {
	%orig;
	NSLog(@"-(void) setArtistMessagingSwitch:(id)");
}

-(id) deleteStationButton {
	%orig;
	NSLog(@"-(id) deleteStationButton");
}

-(void) setDeleteStationButton:(id) {
	%orig;
	NSLog(@"-(void) setDeleteStationButton:(id)");
}

-(id) artistMessagingHeader {
	%orig;
	NSLog(@"-(id) artistMessagingHeader");
}

-(void) setArtistMessagingHeader:(id) {
	%orig;
	NSLog(@"-(void) setArtistMessagingHeader:(id)");
}

-(void) didSave:(id) {
	%orig;
	NSLog(@"-(void) didSave:(id)");
}

-(void) didTapDeleteStationButton:(id) {
	%orig;
	NSLog(@"-(void) didTapDeleteStationButton:(id)");
}

-(void) didSwitchArtistMessagingSetting:(id) {
	%orig;
	NSLog(@"-(void) didSwitchArtistMessagingSetting:(id)");
}

-(void) didCancel:(id) {
	%orig;
	NSLog(@"-(void) didCancel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(void) setDoneButton:(id) {
	%orig;
	NSLog(@"-(void) setDoneButton:(id)");
}

-(id) doneButton {
	%orig;
	NSLog(@"-(id) doneButton");
}

%end

%hook PMEnvironmentViewController

-(void) setKeysToShow:(id) {
	%orig;
	NSLog(@"-(void) setKeysToShow:(id)");
}

-(id) keysToShow {
	%orig;
	NSLog(@"-(id) keysToShow");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(bool) tableView:(id) shouldHighlightRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) tableView:(id) shouldHighlightRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMTableViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setMenuBarButtonDelegate:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButtonDelegate:(id)");
}

-(void) addMenuButton {
	%orig;
	NSLog(@"-(void) addMenuButton");
}

-(id) menuBarButton {
	%orig;
	NSLog(@"-(id) menuBarButton");
}

-(bool) logViewState {
	%orig;
	NSLog(@"-(bool) logViewState");
}

-(void) viewControllerWillBeReselected {
	%orig;
	NSLog(@"-(void) viewControllerWillBeReselected");
}

-(bool) shouldHideBottomViewWhenPushed {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewWhenPushed");
}

-(void) setShouldHideBottomViewWhenPushed:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideBottomViewWhenPushed:(bool)");
}

-(bool) shouldLogViewStateOnViewWillAppear {
	%orig;
	NSLog(@"-(bool) shouldLogViewStateOnViewWillAppear");
}

-(void) setShouldLogViewStateOnViewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldLogViewStateOnViewWillAppear:(bool)");
}

-(bool) shouldStayInViewHierarchyWhenPresentingModalView {
	%orig;
	NSLog(@"-(bool) shouldStayInViewHierarchyWhenPresentingModalView");
}

-(void) setMenuItem:(id) {
	%orig;
	NSLog(@"-(void) setMenuItem:(id)");
}

-(void) removeMenuButton {
	%orig;
	NSLog(@"-(void) removeMenuButton");
}

-(void) updateBottomViewHiddenStatus {
	%orig;
	NSLog(@"-(void) updateBottomViewHiddenStatus");
}

-(void) setMenuBarButton:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButton:(id)");
}

-(id) menuBarButtonDelegate {
	%orig;
	NSLog(@"-(id) menuBarButtonDelegate");
}

-(id) menuBarButtonPanGestureRecognizer {
	%orig;
	NSLog(@"-(id) menuBarButtonPanGestureRecognizer");
}

-(void) setMenuBarButtonPanGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButtonPanGestureRecognizer:(id)");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(id) offlineHeaderView {
	%orig;
	NSLog(@"-(id) offlineHeaderView");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(void) searchButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) searchButtonTapped:(id)");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(void) setupSearchButton {
	%orig;
	NSLog(@"-(void) setupSearchButton");
}

-(void) setIsInView:(bool) {
	%orig;
	NSLog(@"-(void) setIsInView:(bool)");
}

-(bool) isInView {
	%orig;
	NSLog(@"-(bool) isInView");
}

-(bool) logViewDidEnterBackground {
	%orig;
	NSLog(@"-(bool) logViewDidEnterBackground");
}

-(void) handleOfflineStateUpdatedIfInView {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdatedIfInView");
}

-(void) setOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setOfflineHeaderView:(id)");
}

-(double) offlineHeaderHeight {
	%orig;
	NSLog(@"-(double) offlineHeaderHeight");
}

-(void) updateViewForOfflineHeaderViewAfterScrolling:(id) {
	%orig;
	NSLog(@"-(void) updateViewForOfflineHeaderViewAfterScrolling:(id)");
}

-(void) menuButtonWasPanned:(id) {
	%orig;
	NSLog(@"-(void) menuButtonWasPanned:(id)");
}

-(void) menuButtonWasTapped:(id) {
	%orig;
	NSLog(@"-(void) menuButtonWasTapped:(id)");
}

-(void) setSearchButton:(id) {
	%orig;
	NSLog(@"-(void) setSearchButton:(id)");
}

-(id) offlineManager {
	%orig;
	NSLog(@"-(id) offlineManager");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(id) subscriptionManager {
	%orig;
	NSLog(@"-(id) subscriptionManager");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(id) menuItem {
	%orig;
	NSLog(@"-(id) menuItem");
}

-(void) setPageView:(id) {
	%orig;
	NSLog(@"-(void) setPageView:(id)");
}

-(void) _addObservers {
	%orig;
	NSLog(@"-(void) _addObservers");
}

-(void) _removeObservers {
	%orig;
	NSLog(@"-(void) _removeObservers");
}

-(bool) isViewVisible {
	%orig;
	NSLog(@"-(bool) isViewVisible");
}

-(id) searchButton {
	%orig;
	NSLog(@"-(id) searchButton");
}

-(void) setViewMode:(id) {
	%orig;
	NSLog(@"-(void) setViewMode:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(long long) statusBarStyle {
	%orig;
	NSLog(@"-(long long) statusBarStyle");
}

-(void) setStatusBarStyle:(long long) {
	%orig;
	NSLog(@"-(void) setStatusBarStyle:(long long)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(id) viewMode {
	%orig;
	NSLog(@"-(id) viewMode");
}

-(void) setPreferredStatusBarStyle:(long long) {
	%orig;
	NSLog(@"-(void) setPreferredStatusBarStyle:(long long)");
}

-(id) pageView {
	%orig;
	NSLog(@"-(id) pageView");
}

%end

%hook PMMyMediaViewController

-(void) didInteractWithCalloutView:(id) action:(long long) {
	%orig;
	NSLog(@"-(void) didInteractWithCalloutView:(id) action:(long long)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) willDisplayCell:(id) forRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(id) tableView:(id) trailingSwipeActionsConfigurationForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) trailingSwipeActionsConfigurationForRowAtIndexPath:(id)");
}

-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id)");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook PMThumbprintStationSettingViewController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

%end

%hook DeveloperToolsViewController

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMRecommendationCellMoreOptionsController

+(id) controllerWithDelegate:(id) onDismissBlock:(id) {
	%orig;
	NSLog(@"+(id) controllerWithDelegate:(id) onDismissBlock:(id)");
}

-(id) onDismissBlock {
	%orig;
	NSLog(@"-(id) onDismissBlock");
}

-(void) setOnDismissBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnDismissBlock:(id)");
}

-(id) optionDataSource {
	%orig;
	NSLog(@"-(id) optionDataSource");
}

-(void) setOptionDataSource:(id) {
	%orig;
	NSLog(@"-(void) setOptionDataSource:(id)");
}

-(void) dismissSelf {
	%orig;
	NSLog(@"-(void) dismissSelf");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(double) preferredHeight {
	%orig;
	NSLog(@"-(double) preferredHeight");
}

%end

%hook PMStationCellMoreOptionsController

+(id) controllerForStation:(id) delegate:(id) onDismissBlock:(id) {
	%orig;
	NSLog(@"+(id) controllerForStation:(id) delegate:(id) onDismissBlock:(id)");
}

-(id) onDismissBlock {
	%orig;
	NSLog(@"-(id) onDismissBlock");
}

-(void) setOnDismissBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnDismissBlock:(id)");
}

-(void) openStationDetails:(id) {
	%orig;
	NSLog(@"-(void) openStationDetails:(id)");
}

-(void) setStationViewCellDelegate:(id) {
	%orig;
	NSLog(@"-(void) setStationViewCellDelegate:(id)");
}

-(id) optionDataSource {
	%orig;
	NSLog(@"-(id) optionDataSource");
}

-(id) stationViewCellDelegate {
	%orig;
	NSLog(@"-(id) stationViewCellDelegate");
}

-(void) setOptionDataSource:(id) {
	%orig;
	NSLog(@"-(void) setOptionDataSource:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) dismissSelf {
	%orig;
	NSLog(@"-(void) dismissSelf");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(double) preferredHeight {
	%orig;
	NSLog(@"-(double) preferredHeight");
}

%end

%hook PMNowPlayingMenuBarMoreOptionsViewController

-(void) fontDidResize:(id) {
	%orig;
	NSLog(@"-(void) fontDidResize:(id)");
}

-(id) menuOptionLabelMap {
	%orig;
	NSLog(@"-(id) menuOptionLabelMap");
}

-(void) updateViewSize {
	%orig;
	NSLog(@"-(void) updateViewSize");
}

-(id) longestStringInMenuList {
	%orig;
	NSLog(@"-(id) longestStringInMenuList");
}

-(void) setMenuOptionLabelMap:(id) {
	%orig;
	NSLog(@"-(void) setMenuOptionLabelMap:(id)");
}

-(id) currentTrack {
	%orig;
	NSLog(@"-(id) currentTrack");
}

-(void) setCurrentTrack:(id) {
	%orig;
	NSLog(@"-(void) setCurrentTrack:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMNowPlayingFlagOptionsViewController

-(id) menuOptionLabelMap {
	%orig;
	NSLog(@"-(id) menuOptionLabelMap");
}

-(void) setMenuOptionLabelMap:(id) {
	%orig;
	NSLog(@"-(void) setMenuOptionLabelMap:(id)");
}

-(void) skipAudioMessageWithReason:(long long) {
	%orig;
	NSLog(@"-(void) skipAudioMessageWithReason:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

%end

%hook PMEnvironmentFastSwitcherDetailViewController

+(id) controllerForDictionary:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) controllerForDictionary:(id) delegate:(id)");
}

-(void) didSelectSwitchTableViewCell:(id) value:(bool) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) didSelectSwitchTableViewCell:(id) value:(bool) atIndexPath:(id)");
}

-(void) backButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) backButtonTapped:(id)");
}

-(void) doneKeyboardToolbarDidTapDone:(id) {
	%orig;
	NSLog(@"-(void) doneKeyboardToolbarDidTapDone:(id)");
}

-(id) keyboardToolbar {
	%orig;
	NSLog(@"-(id) keyboardToolbar");
}

-(void) setKeyboardToolbar:(id) {
	%orig;
	NSLog(@"-(void) setKeyboardToolbar:(id)");
}

-(void) setOldSettings:(id) {
	%orig;
	NSLog(@"-(void) setOldSettings:(id)");
}

-(id) oldSettings {
	%orig;
	NSLog(@"-(id) oldSettings");
}

-(void) setFilteredSearchArray:(id) {
	%orig;
	NSLog(@"-(void) setFilteredSearchArray:(id)");
}

-(id) childOption {
	%orig;
	NSLog(@"-(id) childOption");
}

-(void) setupKeyboardToolbar {
	%orig;
	NSLog(@"-(void) setupKeyboardToolbar");
}

-(void) setupResetButton {
	%orig;
	NSLog(@"-(void) setupResetButton");
}

-(void) setupSearchBar {
	%orig;
	NSLog(@"-(void) setupSearchBar");
}

-(id) childController {
	%orig;
	NSLog(@"-(id) childController");
}

-(void) setChildController:(id) {
	%orig;
	NSLog(@"-(void) setChildController:(id)");
}

-(void) resetButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) resetButtonTapped:(id)");
}

-(void) setEnvFieldSearchBar:(id) {
	%orig;
	NSLog(@"-(void) setEnvFieldSearchBar:(id)");
}

-(id) envFieldSearchBar {
	%orig;
	NSLog(@"-(id) envFieldSearchBar");
}

-(void) setEnvFieldSearchDisplayController:(id) {
	%orig;
	NSLog(@"-(void) setEnvFieldSearchDisplayController:(id)");
}

-(id) envFieldSearchDisplayController {
	%orig;
	NSLog(@"-(id) envFieldSearchDisplayController");
}

-(bool) hideSearchBar {
	%orig;
	NSLog(@"-(bool) hideSearchBar");
}

-(id) cellForOption:(id) withIndexPath:(id) {
	%orig;
	NSLog(@"-(id) cellForOption:(id) withIndexPath:(id)");
}

-(void) showDictionaryDataForOption:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) showDictionaryDataForOption:(id) atIndexPath:(id)");
}

-(void) setValue:(id) forIndexPath:(id) {
	%orig;
	NSLog(@"-(void) setValue:(id) forIndexPath:(id)");
}

-(id) childOptionIndexPath {
	%orig;
	NSLog(@"-(id) childOptionIndexPath");
}

-(void) setChildOptionIndexPath:(id) {
	%orig;
	NSLog(@"-(void) setChildOptionIndexPath:(id)");
}

-(void) environmentOptionsDidChangeWithSettings:(id) {
	%orig;
	NSLog(@"-(void) environmentOptionsDidChangeWithSettings:(id)");
}

-(void) setChildOption:(id) {
	%orig;
	NSLog(@"-(void) setChildOption:(id)");
}

-(void) setHideSearchBar:(bool) {
	%orig;
	NSLog(@"-(void) setHideSearchBar:(bool)");
}

-(id) filteredSearchArray {
	%orig;
	NSLog(@"-(id) filteredSearchArray");
}

-(void) didSelectTextFieldCell:(id) value:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) didSelectTextFieldCell:(id) value:(id) atIndexPath:(id)");
}

-(void) textFieldViewControllerDidChangeText:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) textFieldViewControllerDidChangeText:(id) atIndexPath:(id)");
}

-(void) setEnvironmentValue:(id) forKey:(id) {
	%orig;
	NSLog(@"-(void) setEnvironmentValue:(id) forKey:(id)");
}

-(void) filterContentForSearchText:(id) scope:(id) {
	%orig;
	NSLog(@"-(void) filterContentForSearchText:(id) scope:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) accessoryButtonTappedForRowWithIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) accessoryButtonTappedForRowWithIndexPath:(id)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(id) tableView:(id) titleForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) titleForHeaderInSection:(long long)");
}

-(void) updateSearchResultsForSearchController:(id) {
	%orig;
	NSLog(@"-(void) updateSearchResultsForSearchController:(id)");
}

%end

%hook PMSettingsChildController

-(id) switchTableCellWithLabel:(id) identifier:(id) andAccessibilityLabel:(id) tag:(long long) switchOn:(bool) disabled:(bool) configureSwitchBlock:(id) {
	%orig;
	NSLog(@"-(id) switchTableCellWithLabel:(id) identifier:(id) andAccessibilityLabel:(id) tag:(long long) switchOn:(bool) disabled:(bool) configureSwitchBlock:(id)");
}

-(id) confirmationButtonView {
	%orig;
	NSLog(@"-(id) confirmationButtonView");
}

-(void) setConfirmationButtonView:(id) {
	%orig;
	NSLog(@"-(void) setConfirmationButtonView:(id)");
}

-(id) saveConfirmationButton {
	%orig;
	NSLog(@"-(id) saveConfirmationButton");
}

-(void) setSaveConfirmationButton:(id) {
	%orig;
	NSLog(@"-(void) setSaveConfirmationButton:(id)");
}

-(id) cancelConfirmationButton {
	%orig;
	NSLog(@"-(id) cancelConfirmationButton");
}

-(void) setCancelConfirmationButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelConfirmationButton:(id)");
}

-(void) updateSwitchTableCell:(id) disabled:(bool) {
	%orig;
	NSLog(@"-(void) updateSwitchTableCell:(id) disabled:(bool)");
}

-(id) labeledAccessoryTableCellWithLabel:(id) accessoryLabel:(id) tag:(long long) {
	%orig;
	NSLog(@"-(id) labeledAccessoryTableCellWithLabel:(id) accessoryLabel:(id) tag:(long long)");
}

-(id) checkmarkTableCellWithLabel:(id) andAccessibilityLabel:(id) tag:(long long) checkmarkOn:(bool) disabled:(bool) {
	%orig;
	NSLog(@"-(id) checkmarkTableCellWithLabel:(id) andAccessibilityLabel:(id) tag:(long long) checkmarkOn:(bool) disabled:(bool)");
}

-(id) switchTableCellWithLabel:(id) andAccessibilityLabel:(id) tag:(long long) switchOn:(bool) disabled:(bool) {
	%orig;
	NSLog(@"-(id) switchTableCellWithLabel:(id) andAccessibilityLabel:(id) tag:(long long) switchOn:(bool) disabled:(bool)");
}

-(void) updateFontForCheckmarkTableViewCell:(id) {
	%orig;
	NSLog(@"-(void) updateFontForCheckmarkTableViewCell:(id)");
}

-(void) updateFontForTableViewCell:(id) {
	%orig;
	NSLog(@"-(void) updateFontForTableViewCell:(id)");
}

-(void) updateSwitchTableCell:(id) switchOn:(bool) disabled:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) updateSwitchTableCell:(id) switchOn:(bool) disabled:(bool) animated:(bool)");
}

-(void) settingSwitchChanged:(id) {
	%orig;
	NSLog(@"-(void) settingSwitchChanged:(id)");
}

-(void) updateButtonsFontSize {
	%orig;
	NSLog(@"-(void) updateButtonsFontSize");
}

-(id) keyboardToolbar {
	%orig;
	NSLog(@"-(id) keyboardToolbar");
}

-(void) onFontDidResizeNotification:(id) {
	%orig;
	NSLog(@"-(void) onFontDidResizeNotification:(id)");
}

-(void) handleOfflineStateUpdated:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated:(id)");
}

-(void) updateCheckboxTableCell:(id) checkmarkOn:(bool) disabled:(bool) {
	%orig;
	NSLog(@"-(void) updateCheckboxTableCell:(id) checkmarkOn:(bool) disabled:(bool)");
}

-(void) updateDetailLabelWidth:(id) {
	%orig;
	NSLog(@"-(void) updateDetailLabelWidth:(id)");
}

-(void) checkmarkToggled:(id) {
	%orig;
	NSLog(@"-(void) checkmarkToggled:(id)");
}

-(id) textFieldTableCellWithLabel:(id) tag:(long long) text:(id) keyboard:(long long) indexPath:(id) cellType:(long long) {
	%orig;
	NSLog(@"-(id) textFieldTableCellWithLabel:(id) tag:(long long) text:(id) keyboard:(long long) indexPath:(id) cellType:(long long)");
}

-(void) scrollToTextField:(id) {
	%orig;
	NSLog(@"-(void) scrollToTextField:(id)");
}

-(void) showAlertWithTitle:(id) message:(id) {
	%orig;
	NSLog(@"-(void) showAlertWithTitle:(id) message:(id)");
}

-(void) showBackgroundButtonBelowView:(id) {
	%orig;
	NSLog(@"-(void) showBackgroundButtonBelowView:(id)");
}

-(void) keyboardToolbarPrevButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) keyboardToolbarPrevButtonPressed:(id)");
}

-(void) keyboardToolbarNextButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) keyboardToolbarNextButtonPressed:(id)");
}

-(void) keyboardToolbarDoneButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) keyboardToolbarDoneButtonPressed:(id)");
}

-(void) backgroundTap:(id) {
	%orig;
	NSLog(@"-(void) backgroundTap:(id)");
}

-(void) addConfirmationButtonView {
	%orig;
	NSLog(@"-(void) addConfirmationButtonView");
}

-(void) setKeyboardToolbar:(id) {
	%orig;
	NSLog(@"-(void) setKeyboardToolbar:(id)");
}

-(id) backgroundButton {
	%orig;
	NSLog(@"-(id) backgroundButton");
}

-(void) setBackgroundButton:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundButton:(id)");
}

-(bool) isRegionAUNZ {
	%orig;
	NSLog(@"-(bool) isRegionAUNZ");
}

-(void) setIsRegionAUNZ:(bool) {
	%orig;
	NSLog(@"-(void) setIsRegionAUNZ:(bool)");
}

-(void) cancelButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) cancelButtonTapped:(id)");
}

-(id) textFieldWithTag:(long long) {
	%orig;
	NSLog(@"-(id) textFieldWithTag:(long long)");
}

-(void) saveButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) saveButtonTapped:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewWillLayoutSubviews");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

%end

%hook PMSettingsVoiceAssistantController

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) updateWakeWordListenerEnabledWithASwitch:(id) {
	%orig;
	NSLog(@"-(void) updateWakeWordListenerEnabledWithASwitch:(id)");
}

-(void) updateShouldDisableAutolockAfterVoiceSessionWithASwitch:(id) {
	%orig;
	NSLog(@"-(void) updateShouldDisableAutolockAfterVoiceSessionWithASwitch:(id)");
}

-(void) updatePhraseSpotterThreshold {
	%orig;
	NSLog(@"-(void) updatePhraseSpotterThreshold");
}

-(void) updateVoiceSocketURLWithTextField:(id) {
	%orig;
	NSLog(@"-(void) updateVoiceSocketURLWithTextField:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

%end

%hook Settings2OfflineController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) settingSwitchChanged:(id) {
	%orig;
	NSLog(@"-(void) settingSwitchChanged:(id)");
}

-(void) handleTrackDownloadComplete {
	%orig;
	NSLog(@"-(void) handleTrackDownloadComplete");
}

-(void) handleOfflineEnabledUpdate {
	%orig;
	NSLog(@"-(void) handleOfflineEnabledUpdate");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) loadData {
	%orig;
	NSLog(@"-(void) loadData");
}

%end

%hook PMSettingsAudioQualityController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) checkmarkTableCellWithLabel:(id) andAccessibilityLabel:(id) tag:(long long) checkmarkOn:(bool) disabled:(bool) {
	%orig;
	NSLog(@"-(id) checkmarkTableCellWithLabel:(id) andAccessibilityLabel:(id) tag:(long long) checkmarkOn:(bool) disabled:(bool)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMSettingsSiriShortcutsController

-(void) editVoiceShortcutViewController:(id) didUpdateVoiceShortcut:(id) error:(id) {
	%orig;
	NSLog(@"-(void) editVoiceShortcutViewController:(id) didUpdateVoiceShortcut:(id) error:(id)");
}

-(void) editVoiceShortcutViewController:(id) didDeleteVoiceShortcutWithIdentifier:(id) {
	%orig;
	NSLog(@"-(void) editVoiceShortcutViewController:(id) didDeleteVoiceShortcutWithIdentifier:(id)");
}

-(void) editVoiceShortcutViewControllerDidCancel:(id) {
	%orig;
	NSLog(@"-(void) editVoiceShortcutViewControllerDidCancel:(id)");
}

-(void) addVoiceShortcutViewController:(id) didFinishWithVoiceShortcut:(id) error:(id) {
	%orig;
	NSLog(@"-(void) addVoiceShortcutViewController:(id) didFinishWithVoiceShortcut:(id) error:(id)");
}

-(void) addVoiceShortcutViewControllerDidCancel:(id) {
	%orig;
	NSLog(@"-(void) addVoiceShortcutViewControllerDidCancel:(id)");
}

-(void) catalogListViewWithDidSelectItemAt:(id) {
	%orig;
	NSLog(@"-(void) catalogListViewWithDidSelectItemAt:(id)");
}

-(void) catalogListScrolled:(double) {
	%orig;
	NSLog(@"-(void) catalogListScrolled:(double)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

%end

%hook PMSettingsAudioQualityAndDownloadsController

-(void) settingSwitchChanged:(id) {
	%orig;
	NSLog(@"-(void) settingSwitchChanged:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithStyle:(long long) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMSettingsPrivacyProfileController

-(void) backButtonPressed {
	%orig;
	NSLog(@"-(void) backButtonPressed");
}

-(void) handleSettingsFailure {
	%orig;
	NSLog(@"-(void) handleSettingsFailure");
}

-(void) settingSwitchChanged:(id) {
	%orig;
	NSLog(@"-(void) settingSwitchChanged:(id)");
}

-(id) titleForSection:(long long) {
	%orig;
	NSLog(@"-(id) titleForSection:(long long)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

%end

%hook PMSettingsSleepTimerController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) castDeviceDidConnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnectWithDevice:(id)");
}

-(void) castDeviceDidDisconnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnectWithDevice:(id)");
}

-(void) sleepTimerValueUpdated {
	%orig;
	NSLog(@"-(void) sleepTimerValueUpdated");
}

-(void) updateSleepTimerEnabled:(id) {
	%orig;
	NSLog(@"-(void) updateSleepTimerEnabled:(id)");
}

-(id) cellAccessibilityStringForSleepTimerWithToggle {
	%orig;
	NSLog(@"-(id) cellAccessibilityStringForSleepTimerWithToggle");
}

-(void) startSleepTimerWithSeconds:(int) {
	%orig;
	NSLog(@"-(void) startSleepTimerWithSeconds:(int)");
}

-(id) headerRowIndexPath {
	%orig;
	NSLog(@"-(id) headerRowIndexPath");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMSettingsAccountController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setupCancelButton {
	%orig;
	NSLog(@"-(void) setupCancelButton");
}

-(void) setupSaveButton {
	%orig;
	NSLog(@"-(void) setupSaveButton");
}

-(void) settingSwitchChanged:(id) {
	%orig;
	NSLog(@"-(void) settingSwitchChanged:(id)");
}

-(void) updateTableViewCellsFontStyleAndSize {
	%orig;
	NSLog(@"-(void) updateTableViewCellsFontStyleAndSize");
}

-(void) keyboardToolbarPrevButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) keyboardToolbarPrevButtonPressed:(id)");
}

-(void) keyboardToolbarNextButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) keyboardToolbarNextButtonPressed:(id)");
}

-(void) keyboardToolbarDoneButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) keyboardToolbarDoneButtonPressed:(id)");
}

-(void) backgroundTap:(id) {
	%orig;
	NSLog(@"-(void) backgroundTap:(id)");
}

-(void) setPasswordAlertController:(id) {
	%orig;
	NSLog(@"-(void) setPasswordAlertController:(id)");
}

-(id) passwordAlertController {
	%orig;
	NSLog(@"-(id) passwordAlertController");
}

-(void) configureAlertPasswordField:(id) {
	%orig;
	NSLog(@"-(void) configureAlertPasswordField:(id)");
}

-(void) passwordAlertCanceled {
	%orig;
	NSLog(@"-(void) passwordAlertCanceled");
}

-(void) passwordAlertConfirmed {
	%orig;
	NSLog(@"-(void) passwordAlertConfirmed");
}

-(void) setForceSave:(bool) {
	%orig;
	NSLog(@"-(void) setForceSave:(bool)");
}

-(id) highlightedFields {
	%orig;
	NSLog(@"-(id) highlightedFields");
}

-(void) setHighlightedFields:(id) {
	%orig;
	NSLog(@"-(void) setHighlightedFields:(id)");
}

-(long long) tagForTextFieldName:(id) {
	%orig;
	NSLog(@"-(long long) tagForTextFieldName:(id)");
}

-(bool) explicitContentFilterChanged {
	%orig;
	NSLog(@"-(bool) explicitContentFilterChanged");
}

-(bool) explicitContentFilterEnabled {
	%orig;
	NSLog(@"-(bool) explicitContentFilterEnabled");
}

-(bool) forceSave {
	%orig;
	NSLog(@"-(bool) forceSave");
}

-(void) changeSettingsRequest:(id) finishedWithResult:(id) {
	%orig;
	NSLog(@"-(void) changeSettingsRequest:(id) finishedWithResult:(id)");
}

-(void) changeSettingsRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) changeSettingsRequest:(id) failedWithErrorCode:(long long)");
}

-(void) popViewControllerIfPossible {
	%orig;
	NSLog(@"-(void) popViewControllerIfPossible");
}

-(id) handleInvalidBirthYearField:(id) {
	%orig;
	NSLog(@"-(id) handleInvalidBirthYearField:(id)");
}

-(void) updateSettingsWithPassword:(id) {
	%orig;
	NSLog(@"-(void) updateSettingsWithPassword:(id)");
}

-(void) clearPasswordAlert {
	%orig;
	NSLog(@"-(void) clearPasswordAlert");
}

-(double) getDeleteAccountFooterViewHeight {
	%orig;
	NSLog(@"-(double) getDeleteAccountFooterViewHeight");
}

-(void) deleteAccountButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) deleteAccountButtonTapped:(id)");
}

-(void) updateFontForTableViewCell:(id) tag:(long long) {
	%orig;
	NSLog(@"-(void) updateFontForTableViewCell:(id) tag:(long long)");
}

-(id) passwordValue {
	%orig;
	NSLog(@"-(id) passwordValue");
}

-(long long) genderPickerRowForValue:(id) {
	%orig;
	NSLog(@"-(long long) genderPickerRowForValue:(id)");
}

-(void) updateFontForDemographicRow:(long long) tag:(long long) {
	%orig;
	NSLog(@"-(void) updateFontForDemographicRow:(long long) tag:(long long)");
}

-(id) cellForDemographicRow:(long long) {
	%orig;
	NSLog(@"-(id) cellForDemographicRow:(long long)");
}

-(long long) demographicRowForTag:(long long) {
	%orig;
	NSLog(@"-(long long) demographicRowForTag:(long long)");
}

-(void) setPasswordValue:(id) {
	%orig;
	NSLog(@"-(void) setPasswordValue:(id)");
}

-(id) deleteAccountAlertController {
	%orig;
	NSLog(@"-(id) deleteAccountAlertController");
}

-(id) deleteAccountAlertConfirmController {
	%orig;
	NSLog(@"-(id) deleteAccountAlertConfirmController");
}

-(void) setDeleteAccountAlertController:(id) {
	%orig;
	NSLog(@"-(void) setDeleteAccountAlertController:(id)");
}

-(void) setupConfirmationAlert {
	%orig;
	NSLog(@"-(void) setupConfirmationAlert");
}

-(id) deleteAccountConfirmationTitleString {
	%orig;
	NSLog(@"-(id) deleteAccountConfirmationTitleString");
}

-(id) deleteAccountConfirmationDetailString {
	%orig;
	NSLog(@"-(id) deleteAccountConfirmationDetailString");
}

-(void) setDeleteAccountAlertConfirmController:(id) {
	%orig;
	NSLog(@"-(void) setDeleteAccountAlertConfirmController:(id)");
}

-(void) setupLoadingAlert {
	%orig;
	NSLog(@"-(void) setupLoadingAlert");
}

-(void) requestDeletingAccountWithTextFieldString:(id) {
	%orig;
	NSLog(@"-(void) requestDeletingAccountWithTextFieldString:(id)");
}

-(id) loadingAlertController {
	%orig;
	NSLog(@"-(id) loadingAlertController");
}

-(void) setLoadingAlertController:(id) {
	%orig;
	NSLog(@"-(void) setLoadingAlertController:(id)");
}

-(void) showDeleteAccountErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) showDeleteAccountErrorMessage:(id)");
}

-(void) deleteUserWithPassword:(id) email:(id) {
	%orig;
	NSLog(@"-(void) deleteUserWithPassword:(id) email:(id)");
}

-(id) deleteAccountResultTitleString {
	%orig;
	NSLog(@"-(id) deleteAccountResultTitleString");
}

-(id) deleteAccountResultDetailString {
	%orig;
	NSLog(@"-(id) deleteAccountResultDetailString");
}

-(void) finishDeleteAccountProcess {
	%orig;
	NSLog(@"-(void) finishDeleteAccountProcess");
}

-(void) setupDeleteAccountAlert {
	%orig;
	NSLog(@"-(void) setupDeleteAccountAlert");
}

-(void) showPasswordAlertPrompt {
	%orig;
	NSLog(@"-(void) showPasswordAlertPrompt");
}

-(void) setInvalidFieldsByName:(id) {
	%orig;
	NSLog(@"-(void) setInvalidFieldsByName:(id)");
}

-(bool) customGenderPickerKeyboardIsShowing {
	%orig;
	NSLog(@"-(bool) customGenderPickerKeyboardIsShowing");
}

-(bool) saveActionDisabled {
	%orig;
	NSLog(@"-(bool) saveActionDisabled");
}

-(void) setSaveActionDisabled:(bool) {
	%orig;
	NSLog(@"-(void) setSaveActionDisabled:(bool)");
}

-(void) setExplicitContentFilterChanged:(bool) {
	%orig;
	NSLog(@"-(void) setExplicitContentFilterChanged:(bool)");
}

-(void) setExplicitContentFilterEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setExplicitContentFilterEnabled:(bool)");
}

-(id) saveButton {
	%orig;
	NSLog(@"-(id) saveButton");
}

-(void) setSaveButton:(id) {
	%orig;
	NSLog(@"-(void) setSaveButton:(id)");
}

-(void) cancelButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) cancelButtonTapped:(id)");
}

-(void) saveButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) saveButtonTapped:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) loadView {
	%orig;
	NSLog(@"-(void) loadView");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) setCancelButton:(id) {
	%orig;
	NSLog(@"-(void) setCancelButton:(id)");
}

-(id) cancelButton {
	%orig;
	NSLog(@"-(id) cancelButton");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(id) highlightColor {
	%orig;
	NSLog(@"-(id) highlightColor");
}

-(void) setHighlightColor:(id) {
	%orig;
	NSLog(@"-(void) setHighlightColor:(id)");
}

-(long long) numberOfComponentsInPickerView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfComponentsInPickerView:(id)");
}

-(long long) pickerView:(id) numberOfRowsInComponent:(long long) {
	%orig;
	NSLog(@"-(long long) pickerView:(id) numberOfRowsInComponent:(long long)");
}

-(id) pickerView:(id) titleForRow:(long long) forComponent:(long long) {
	%orig;
	NSLog(@"-(id) pickerView:(id) titleForRow:(long long) forComponent:(long long)");
}

-(void) pickerView:(id) didSelectRow:(long long) inComponent:(long long) {
	%orig;
	NSLog(@"-(void) pickerView:(id) didSelectRow:(long long) inComponent:(long long)");
}

-(bool) textFieldShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldReturn:(id)");
}

-(void) textFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidBeginEditing:(id)");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

%end

%hook PMSettingsDeviceController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) userSettingsUpdated {
	%orig;
	NSLog(@"-(void) userSettingsUpdated");
}

-(void) updateCellNetworkAudioQuality:(id) {
	%orig;
	NSLog(@"-(void) updateCellNetworkAudioQuality:(id)");
}

-(void) updateDisablesAutoLock:(id) {
	%orig;
	NSLog(@"-(void) updateDisablesAutoLock:(id)");
}

-(void) updateAutoplayEnabled:(id) {
	%orig;
	NSLog(@"-(void) updateAutoplayEnabled:(id)");
}

-(void) setupViewModels {
	%orig;
	NSLog(@"-(void) setupViewModels");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(id) sections {
	%orig;
	NSLog(@"-(id) sections");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setSections:(id) {
	%orig;
	NSLog(@"-(void) setSections:(id)");
}

%end

%hook PMSettingsAlertsController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) settingSwitchChanged:(id) {
	%orig;
	NSLog(@"-(void) settingSwitchChanged:(id)");
}

-(void) userSettingsUpdated {
	%orig;
	NSLog(@"-(void) userSettingsUpdated");
}

-(id) titleForSection:(long long) {
	%orig;
	NSLog(@"-(id) titleForSection:(long long)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMSettingsPrivacyController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) authorizeWillStart:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeWillStart:(long long) context:(id)");
}

-(void) authorizeDidEnd:(long long) success:(bool) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeDidEnd:(long long) success:(bool) context:(id)");
}

-(void) deauthorizeDidEnd:(long long) success:(bool) {
	%orig;
	NSLog(@"-(void) deauthorizeDidEnd:(long long) success:(bool)");
}

-(id) facebookStatusRow {
	%orig;
	NSLog(@"-(id) facebookStatusRow");
}

-(bool) isFacebookRequestInProgress {
	%orig;
	NSLog(@"-(bool) isFacebookRequestInProgress");
}

-(void) setIsFacebookRequestInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setIsFacebookRequestInProgress:(bool)");
}

-(void) updateFontForLabelAccessoryUnifiedCell:(id) {
	%orig;
	NSLog(@"-(void) updateFontForLabelAccessoryUnifiedCell:(id)");
}

-(void) updateFontForLabelAccessoryCell:(id) {
	%orig;
	NSLog(@"-(void) updateFontForLabelAccessoryCell:(id)");
}

-(void) handleSettingsFailure {
	%orig;
	NSLog(@"-(void) handleSettingsFailure");
}

-(void) handleAppEnterForeground {
	%orig;
	NSLog(@"-(void) handleAppEnterForeground");
}

-(bool) isTableViewShowingFacebookStatusRow {
	%orig;
	NSLog(@"-(bool) isTableViewShowingFacebookStatusRow");
}

-(void) settingSwitchChanged:(id) {
	%orig;
	NSLog(@"-(void) settingSwitchChanged:(id)");
}

-(void) updateTableViewCellsFontStyleAndSize {
	%orig;
	NSLog(@"-(void) updateTableViewCellsFontStyleAndSize");
}

-(id) titleForSection:(long long) {
	%orig;
	NSLog(@"-(id) titleForSection:(long long)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(double) tableView:(id) heightForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForFooterInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForFooterInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMSettingsArtistMessagesController

-(void) refreshDataAndReloadTableView {
	%orig;
	NSLog(@"-(void) refreshDataAndReloadTableView");
}

-(void) savePerStationArtistAudioMessageSettings {
	%orig;
	NSLog(@"-(void) savePerStationArtistAudioMessageSettings");
}

-(id) stationsDataSource {
	%orig;
	NSLog(@"-(id) stationsDataSource");
}

-(id) originalStationArtistEnabledValues {
	%orig;
	NSLog(@"-(id) originalStationArtistEnabledValues");
}

-(void) updateGlobalArtistMessageSetting:(id) {
	%orig;
	NSLog(@"-(void) updateGlobalArtistMessageSetting:(id)");
}

-(void) updateArtistMessageEnabled:(id) {
	%orig;
	NSLog(@"-(void) updateArtistMessageEnabled:(id)");
}

-(void) setStationsDataSource:(id) {
	%orig;
	NSLog(@"-(void) setStationsDataSource:(id)");
}

-(void) setOriginalStationArtistEnabledValues:(id) {
	%orig;
	NSLog(@"-(void) setOriginalStationArtistEnabledValues:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMCollectionViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) setMenuBarButtonDelegate:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButtonDelegate:(id)");
}

-(void) addMenuButton {
	%orig;
	NSLog(@"-(void) addMenuButton");
}

-(id) menuBarButton {
	%orig;
	NSLog(@"-(id) menuBarButton");
}

-(bool) logViewState {
	%orig;
	NSLog(@"-(bool) logViewState");
}

-(void) viewControllerWillBeReselected {
	%orig;
	NSLog(@"-(void) viewControllerWillBeReselected");
}

-(bool) shouldHideBottomViewWhenPushed {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewWhenPushed");
}

-(void) setShouldHideBottomViewWhenPushed:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideBottomViewWhenPushed:(bool)");
}

-(bool) shouldLogViewStateOnViewWillAppear {
	%orig;
	NSLog(@"-(bool) shouldLogViewStateOnViewWillAppear");
}

-(void) setShouldLogViewStateOnViewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldLogViewStateOnViewWillAppear:(bool)");
}

-(bool) shouldStayInViewHierarchyWhenPresentingModalView {
	%orig;
	NSLog(@"-(bool) shouldStayInViewHierarchyWhenPresentingModalView");
}

-(void) setMenuItem:(id) {
	%orig;
	NSLog(@"-(void) setMenuItem:(id)");
}

-(void) removeMenuButton {
	%orig;
	NSLog(@"-(void) removeMenuButton");
}

-(void) updateBottomViewHiddenStatus {
	%orig;
	NSLog(@"-(void) updateBottomViewHiddenStatus");
}

-(void) setMenuBarButton:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButton:(id)");
}

-(id) menuBarButtonDelegate {
	%orig;
	NSLog(@"-(id) menuBarButtonDelegate");
}

-(id) menuBarButtonPanGestureRecognizer {
	%orig;
	NSLog(@"-(id) menuBarButtonPanGestureRecognizer");
}

-(void) setMenuBarButtonPanGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setMenuBarButtonPanGestureRecognizer:(id)");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(id) offlineHeaderView {
	%orig;
	NSLog(@"-(id) offlineHeaderView");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(bool) collectionViewWillAppear {
	%orig;
	NSLog(@"-(bool) collectionViewWillAppear");
}

-(void) setCollectionViewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) setCollectionViewWillAppear:(bool)");
}

-(bool) shouldHideSearchButton {
	%orig;
	NSLog(@"-(bool) shouldHideSearchButton");
}

-(void) searchButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) searchButtonTapped:(id)");
}

-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear {
	%orig;
	NSLog(@"-(bool) isAuditedForSafeRemovalOfObserversInViewDidDisappear");
}

-(void) setupSearchButton {
	%orig;
	NSLog(@"-(void) setupSearchButton");
}

-(void) setIsInView:(bool) {
	%orig;
	NSLog(@"-(void) setIsInView:(bool)");
}

-(void) updateIsInView {
	%orig;
	NSLog(@"-(void) updateIsInView");
}

-(bool) isInView {
	%orig;
	NSLog(@"-(bool) isInView");
}

-(bool) showSearchButton {
	%orig;
	NSLog(@"-(bool) showSearchButton");
}

-(void) customizeStatusBar {
	%orig;
	NSLog(@"-(void) customizeStatusBar");
}

-(bool) logViewDidEnterBackground {
	%orig;
	NSLog(@"-(bool) logViewDidEnterBackground");
}

-(void) handleOfflineStateUpdatedIfInView {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdatedIfInView");
}

-(void) setOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setOfflineHeaderView:(id)");
}

-(double) offlineHeaderHeight {
	%orig;
	NSLog(@"-(double) offlineHeaderHeight");
}

-(void) updateViewForOfflineHeaderViewAfterScrolling:(id) {
	%orig;
	NSLog(@"-(void) updateViewForOfflineHeaderViewAfterScrolling:(id)");
}

-(void) menuButtonWasPanned:(id) {
	%orig;
	NSLog(@"-(void) menuButtonWasPanned:(id)");
}

-(void) menuButtonWasTapped:(id) {
	%orig;
	NSLog(@"-(void) menuButtonWasTapped:(id)");
}

-(void) setSearchButton:(id) {
	%orig;
	NSLog(@"-(void) setSearchButton:(id)");
}

-(id) offlineManager {
	%orig;
	NSLog(@"-(id) offlineManager");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(id) subscriptionManager {
	%orig;
	NSLog(@"-(id) subscriptionManager");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(id) menuItem {
	%orig;
	NSLog(@"-(id) menuItem");
}

-(void) setPageView:(id) {
	%orig;
	NSLog(@"-(void) setPageView:(id)");
}

-(UIEdgeInsets) initialContentInset {
	%orig;
	NSLog(@"-(UIEdgeInsets) initialContentInset");
}

-(void) _addObservers {
	%orig;
	NSLog(@"-(void) _addObservers");
}

-(void) _removeObservers {
	%orig;
	NSLog(@"-(void) _removeObservers");
}

-(bool) isViewVisible {
	%orig;
	NSLog(@"-(bool) isViewVisible");
}

-(id) searchButton {
	%orig;
	NSLog(@"-(id) searchButton");
}

-(void) setViewMode:(id) {
	%orig;
	NSLog(@"-(void) setViewMode:(id)");
}

-(id) navigationManager {
	%orig;
	NSLog(@"-(id) navigationManager");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(bool) shouldAutorotate {
	%orig;
	NSLog(@"-(bool) shouldAutorotate");
}

-(long long) statusBarStyle {
	%orig;
	NSLog(@"-(long long) statusBarStyle");
}

-(void) setStatusBarStyle:(long long) {
	%orig;
	NSLog(@"-(void) setStatusBarStyle:(long long)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

-(id) viewMode {
	%orig;
	NSLog(@"-(id) viewMode");
}

-(void) setPreferredStatusBarStyle:(long long) {
	%orig;
	NSLog(@"-(void) setPreferredStatusBarStyle:(long long)");
}

-(id) pageView {
	%orig;
	NSLog(@"-(id) pageView");
}

%end

%hook PMPremiumNowPlayingViewController

-(void) expandWazeBannerSpace {
	%orig;
	NSLog(@"-(void) expandWazeBannerSpace");
}

-(void) collapseWazeBannerSpace {
	%orig;
	NSLog(@"-(void) collapseWazeBannerSpace");
}

-(void) displayWazeBanner:(id) inNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) displayWazeBanner:(id) inNowPlaying:(bool)");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) musicSessionShuffleModeDidChangeTo:(long long) {
	%orig;
	NSLog(@"-(void) musicSessionShuffleModeDidChangeTo:(long long)");
}

-(void) bubbleViewHasDismissed:(id) {
	%orig;
	NSLog(@"-(void) bubbleViewHasDismissed:(id)");
}

-(void) showStationModePicker {
	%orig;
	NSLog(@"-(void) showStationModePicker");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(id) dominantColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) dominantColorForOfflineHeaderView:(id)");
}

-(id) lightThemeOverlayColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) lightThemeOverlayColorForOfflineHeaderView:(id)");
}

-(id) darkThemeOverlayColorForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(id) darkThemeOverlayColorForOfflineHeaderView:(id)");
}

-(double) overlayAlphaForOfflineHeaderView:(id) {
	%orig;
	NSLog(@"-(double) overlayAlphaForOfflineHeaderView:(id)");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(bool) shouldStayInViewHierarchyWhenPresentingModalView {
	%orig;
	NSLog(@"-(bool) shouldStayInViewHierarchyWhenPresentingModalView");
}

-(void) interactiveTransitionWillDisplay:(bool) {
	%orig;
	NSLog(@"-(void) interactiveTransitionWillDisplay:(bool)");
}

-(bool) prefersStatusBarHidden {
	%orig;
	NSLog(@"-(bool) prefersStatusBarHidden");
}

-(void) didTapMiniPlayer {
	%orig;
	NSLog(@"-(void) didTapMiniPlayer");
}

-(void) availableStationModesDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) availableStationModesDidUpdate:(id)");
}

-(void) handleQueueButtonTapped {
	%orig;
	NSLog(@"-(void) handleQueueButtonTapped");
}

-(void) handleDismiss {
	%orig;
	NSLog(@"-(void) handleDismiss");
}

-(void) miniTrackCoverImageButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) miniTrackCoverImageButtonTapped:(id)");
}

-(void) infoButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) infoButtonTapped:(id)");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) updateBlurredBackground:(id) {
	%orig;
	NSLog(@"-(void) updateBlurredBackground:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(id) collectionView:(id) targetIndexPathForMoveFromItemAtIndexPath:(id) toProposedIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) targetIndexPathForMoveFromItemAtIndexPath:(id) toProposedIndexPath:(id)");
}

-(bool) collectionView:(id) canMoveItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) collectionView:(id) canMoveItemAtIndexPath:(id)");
}

-(void) collectionView:(id) moveItemAtIndexPath:(id) toIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) moveItemAtIndexPath:(id) toIndexPath:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) collapseWazeNavigationContainerSpace {
	%orig;
	NSLog(@"-(void) collapseWazeNavigationContainerSpace");
}

-(void) scrollToQueueWithActionSource:(long long) {
	%orig;
	NSLog(@"-(void) scrollToQueueWithActionSource:(long long)");
}

-(bool) hideTabBarWhenVisible {
	%orig;
	NSLog(@"-(bool) hideTabBarWhenVisible");
}

-(void) expandWazeNavigationContainerSpace {
	%orig;
	NSLog(@"-(void) expandWazeNavigationContainerSpace");
}

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(UIEdgeInsets) initialContentInset {
	%orig;
	NSLog(@"-(UIEdgeInsets) initialContentInset");
}

-(id) initWithViewModel:(id) {
	%orig;
	NSLog(@"-(id) initWithViewModel:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) initWithCollectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithCollectionViewLayout:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidLayoutSubviews {
	%orig;
	NSLog(@"-(void) viewDidLayoutSubviews");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(id) navigationBar {
	%orig;
	NSLog(@"-(id) navigationBar");
}

%end

%hook PMItemsByArtistViewController

+(id) loadFromStoryBoard {
	%orig;
	NSLog(@"+(id) loadFromStoryBoard");
}

-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool) {
	%orig;
	NSLog(@"-(void) didTapPlayButtonInMediaCollectionViewCell:(id) isPlaying:(bool)");
}

-(void) didTapMoreButtonInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didTapMoreButtonInMediaCollectionViewCell:(id)");
}

-(void) didSelectMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didSelectMediaCollectionViewCell:(id)");
}

-(void) didLongPressMediaCollectionCellViewInMediaCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) didLongPressMediaCollectionCellViewInMediaCollectionViewCell:(id)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(void) onBackButtonTapped {
	%orig;
	NSLog(@"-(void) onBackButtonTapped");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) updateOfflineHeaderView:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineHeaderView:(bool)");
}

-(bool) needsOfflineHeaderView {
	%orig;
	NSLog(@"-(bool) needsOfflineHeaderView");
}

-(void) updateViewForOfflineHeaderViewAfterScrolling:(id) {
	%orig;
	NSLog(@"-(void) updateViewForOfflineHeaderViewAfterScrolling:(id)");
}

-(void) setHasEnabledOptionToShowDownloadsOnly:(bool) {
	%orig;
	NSLog(@"-(void) setHasEnabledOptionToShowDownloadsOnly:(bool)");
}

-(bool) hasEnabledOptionToShowDownloadsOnly {
	%orig;
	NSLog(@"-(bool) hasEnabledOptionToShowDownloadsOnly");
}

-(void) setArtistModel:(id) {
	%orig;
	NSLog(@"-(void) setArtistModel:(id)");
}

-(id) artistModel {
	%orig;
	NSLog(@"-(id) artistModel");
}

-(void) handleOfflineStateUpdated {
	%orig;
	NSLog(@"-(void) handleOfflineStateUpdated");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) initWithCollectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithCollectionViewLayout:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

%end

%hook PMBrowseCatalogListViewController

+(id) newCatalogListViewController {
	%orig;
	NSLog(@"+(id) newCatalogListViewController");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) statsContext {
	%orig;
	NSLog(@"-(id) statsContext");
}

-(void) presentAlertWithText:(id) {
	%orig;
	NSLog(@"-(void) presentAlertWithText:(id)");
}

-(void) setStatsContext:(id) {
	%orig;
	NSLog(@"-(void) setStatsContext:(id)");
}

-(id) displayedCategories {
	%orig;
	NSLog(@"-(id) displayedCategories");
}

-(void) setModuleTitle:(id) {
	%orig;
	NSLog(@"-(void) setModuleTitle:(id)");
}

-(void) setupActivityIndicator {
	%orig;
	NSLog(@"-(void) setupActivityIndicator");
}

-(void) reloadDataAnimated:(bool) {
	%orig;
	NSLog(@"-(void) reloadDataAnimated:(bool)");
}

-(id) moduleTitle {
	%orig;
	NSLog(@"-(id) moduleTitle");
}

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) setDisplayedCategories:(id) {
	%orig;
	NSLog(@"-(void) setDisplayedCategories:(id)");
}

-(id) subtitleForCategory:(id) {
	%orig;
	NSLog(@"-(id) subtitleForCategory:(id)");
}

-(void) setCategoryCount:(long long) {
	%orig;
	NSLog(@"-(void) setCategoryCount:(long long)");
}

-(void) logBrowseModuleSelectionForIndexpath:(id) {
	%orig;
	NSLog(@"-(void) logBrowseModuleSelectionForIndexpath:(id)");
}

-(void) logBrowseModuleImpressionForIndexpath:(id) {
	%orig;
	NSLog(@"-(void) logBrowseModuleImpressionForIndexpath:(id)");
}

-(void) browseManagerDidRefreshCatalogForModule:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshCatalogForModule:(id)");
}

-(void) browseManagerDidFailToRefreshCatalogForModule:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshCatalogForModule:(id)");
}

-(id) module {
	%orig;
	NSLog(@"-(id) module");
}

-(id) categoryAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) categoryAtIndex:(long long)");
}

-(void) setModule:(id) {
	%orig;
	NSLog(@"-(void) setModule:(id)");
}

-(long long) categoryCount {
	%orig;
	NSLog(@"-(long long) categoryCount");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

-(void) setCategory:(id) {
	%orig;
	NSLog(@"-(void) setCategory:(id)");
}

-(id) category {
	%orig;
	NSLog(@"-(id) category");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

%end

%hook PMMyStationsCollectionViewController

+(void) applyGradientToOnboardingUITreatmentView:(id) {
	%orig;
	NSLog(@"+(void) applyGradientToOnboardingUITreatmentView:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) cellHighlightOverlay {
	%orig;
	NSLog(@"-(id) cellHighlightOverlay");
}

-(void) setCellHighlightOverlay:(id) {
	%orig;
	NSLog(@"-(void) setCellHighlightOverlay:(id)");
}

-(void) setAccessibilityObserver:(id) {
	%orig;
	NSLog(@"-(void) setAccessibilityObserver:(id)");
}

-(id) accessibilityObserver {
	%orig;
	NSLog(@"-(id) accessibilityObserver");
}

-(void) showCreateStation {
	%orig;
	NSLog(@"-(void) showCreateStation");
}

-(void) attemptPromotedStationRefresh {
	%orig;
	NSLog(@"-(void) attemptPromotedStationRefresh");
}

-(void) setupRecommendationStatsCollectorAndCheckIfRecommendationDidntChange:(bool) {
	%orig;
	NSLog(@"-(void) setupRecommendationStatsCollectorAndCheckIfRecommendationDidntChange:(bool)");
}

-(void) dismissPromotedStation:(id) {
	%orig;
	NSLog(@"-(void) dismissPromotedStation:(id)");
}

-(id) advertisingController {
	%orig;
	NSLog(@"-(id) advertisingController");
}

-(void) alphabeticalSectionIndexView:(id) didSelectSection:(id) {
	%orig;
	NSLog(@"-(void) alphabeticalSectionIndexView:(id) didSelectSection:(id)");
}

-(id) pillSegmentedControl:(id) accessibilityOptionsForSegmentAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) pillSegmentedControl:(id) accessibilityOptionsForSegmentAtIndex:(long long)");
}

-(void) pillSegmentedControl:(id) didSelectSegmentAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) pillSegmentedControl:(id) didSelectSegmentAtIndex:(long long)");
}

-(void) logInvalidReuseIdentifierExceptionAtIndexPath:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) logInvalidReuseIdentifierExceptionAtIndexPath:(id) withData:(id)");
}

-(void) reloadDataAnimated:(bool) {
	%orig;
	NSLog(@"-(void) reloadDataAnimated:(bool)");
}

-(void) addOverlayViewOnHighLightForIndexPath:(id) {
	%orig;
	NSLog(@"-(void) addOverlayViewOnHighLightForIndexPath:(id)");
}

-(void) removeOverlayViewOnUnHighlightForIndexPath:(id) {
	%orig;
	NSLog(@"-(void) removeOverlayViewOnUnHighlightForIndexPath:(id)");
}

-(void) sharedInitializer {
	%orig;
	NSLog(@"-(void) sharedInitializer");
}

-(void) setRecommendedStationsDataSource:(id) {
	%orig;
	NSLog(@"-(void) setRecommendedStationsDataSource:(id)");
}

-(id) recommendedStationsDataSource {
	%orig;
	NSLog(@"-(id) recommendedStationsDataSource");
}

-(unsigned long long) fetchBachSize {
	%orig;
	NSLog(@"-(unsigned long long) fetchBachSize");
}

-(void) registerSupplementaryViews {
	%orig;
	NSLog(@"-(void) registerSupplementaryViews");
}

-(void) createAdditionalControls {
	%orig;
	NSLog(@"-(void) createAdditionalControls");
}

-(double) heightForContentSizeCategory:(id) {
	%orig;
	NSLog(@"-(double) heightForContentSizeCategory:(id)");
}

-(void) setDynamicCellHeight:(double) {
	%orig;
	NSLog(@"-(void) setDynamicCellHeight:(double)");
}

-(id) collectionViewUserStationsDataSource {
	%orig;
	NSLog(@"-(id) collectionViewUserStationsDataSource");
}

-(void) syncStationPersonalizationForVisibleCells {
	%orig;
	NSLog(@"-(void) syncStationPersonalizationForVisibleCells");
}

-(long long) stationSortType {
	%orig;
	NSLog(@"-(long long) stationSortType");
}

-(bool) hasInitializedSortControlPosition {
	%orig;
	NSLog(@"-(bool) hasInitializedSortControlPosition");
}

-(void) sortStationsWithType:(long long) animated:(bool) scrollToTop:(bool) {
	%orig;
	NSLog(@"-(void) sortStationsWithType:(long long) animated:(bool) scrollToTop:(bool)");
}

-(void) makeCollectionViewCellsHideButtonDrawerAnimated:(bool) {
	%orig;
	NSLog(@"-(void) makeCollectionViewCellsHideButtonDrawerAnimated:(bool)");
}

-(void) setHasInitializedSortControlPosition:(bool) {
	%orig;
	NSLog(@"-(void) setHasInitializedSortControlPosition:(bool)");
}

-(void) updateIsInView {
	%orig;
	NSLog(@"-(void) updateIsInView");
}

-(void) tryToShowPodcastCallout {
	%orig;
	NSLog(@"-(void) tryToShowPodcastCallout");
}

-(void) setIsViewDisappearing:(bool) {
	%orig;
	NSLog(@"-(void) setIsViewDisappearing:(bool)");
}

-(void) updateSortControlPositionMode:(long long) animated:(bool) {
	%orig;
	NSLog(@"-(void) updateSortControlPositionMode:(long long) animated:(bool)");
}

-(bool) isChangingStations {
	%orig;
	NSLog(@"-(bool) isChangingStations");
}

-(void) setIsChangingStations:(bool) {
	%orig;
	NSLog(@"-(void) setIsChangingStations:(bool)");
}

-(void) setHasLoggedInitialPromotedStationImpression:(bool) {
	%orig;
	NSLog(@"-(void) setHasLoggedInitialPromotedStationImpression:(bool)");
}

-(id) recentlyPlayedItemObserver {
	%orig;
	NSLog(@"-(id) recentlyPlayedItemObserver");
}

-(void) userDidLogOut {
	%orig;
	NSLog(@"-(void) userDidLogOut");
}

-(void) promotedStationsDidUpdate {
	%orig;
	NSLog(@"-(void) promotedStationsDidUpdate");
}

-(void) registerFontSizeChangeNotification {
	%orig;
	NSLog(@"-(void) registerFontSizeChangeNotification");
}

-(void) createSortControl {
	%orig;
	NSLog(@"-(void) createSortControl");
}

-(void) createSectionIndexView {
	%orig;
	NSLog(@"-(void) createSectionIndexView");
}

-(CGSize) sizeForOnboardingUITreatment {
	%orig;
	NSLog(@"-(CGSize) sizeForOnboardingUITreatment");
}

-(void) logStationSortChangeWithCurrentSortType:(long long) newSortType:(long long) {
	%orig;
	NSLog(@"-(void) logStationSortChangeWithCurrentSortType:(long long) newSortType:(long long)");
}

-(void) setStationSortType:(long long) {
	%orig;
	NSLog(@"-(void) setStationSortType:(long long)");
}

-(long long) sortControlSegmentIndexForCurrentSortType {
	%orig;
	NSLog(@"-(long long) sortControlSegmentIndexForCurrentSortType");
}

-(id) sortControl {
	%orig;
	NSLog(@"-(id) sortControl");
}

-(void) makeCollectionViewCellsInvalidateDisplay {
	%orig;
	NSLog(@"-(void) makeCollectionViewCellsInvalidateDisplay");
}

-(void) performCollectionViewUpdate:(id) {
	%orig;
	NSLog(@"-(void) performCollectionViewUpdate:(id)");
}

-(void) resetSortControlPositionAndScrollToTop {
	%orig;
	NSLog(@"-(void) resetSortControlPositionAndScrollToTop");
}

-(void) setIsAnimatingCollectionViewOffset:(bool) {
	%orig;
	NSLog(@"-(void) setIsAnimatingCollectionViewOffset:(bool)");
}

-(void) setSectionIndexViewVisible:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSectionIndexViewVisible:(bool) animated:(bool)");
}

-(id) sortControlSegmentTitleForSegment:(long long) {
	%orig;
	NSLog(@"-(id) sortControlSegmentTitleForSegment:(long long)");
}

-(void) setSortControl:(id) {
	%orig;
	NSLog(@"-(void) setSortControl:(id)");
}

-(void) setSortControlPositionMode:(long long) {
	%orig;
	NSLog(@"-(void) setSortControlPositionMode:(long long)");
}

-(double) sortControlPositionForMode:(long long) {
	%orig;
	NSLog(@"-(double) sortControlPositionForMode:(long long)");
}

-(void) setSortControlPosition:(double) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSortControlPosition:(double) animated:(bool)");
}

-(void) setSectionIndexView:(id) {
	%orig;
	NSLog(@"-(void) setSectionIndexView:(id)");
}

-(id) sectionIndexView {
	%orig;
	NSLog(@"-(id) sectionIndexView");
}

-(void) setIsManuallyTrackingCollectionViewOffset:(bool) {
	%orig;
	NSLog(@"-(void) setIsManuallyTrackingCollectionViewOffset:(bool)");
}

-(unsigned long long) numberOfItemsInRecommendationSection {
	%orig;
	NSLog(@"-(unsigned long long) numberOfItemsInRecommendationSection");
}

-(id) collectionViewCellIdentifierForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionViewCellIdentifierForItemAtIndexPath:(id)");
}

-(id) dataForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) dataForItemAtIndexPath:(id)");
}

-(bool) shouldHideSeparatorViewForCellAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) shouldHideSeparatorViewForCellAtIndexPath:(id)");
}

-(void) setCreateStationButtonCell:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationButtonCell:(id)");
}

-(void) reloadCollectionViewSection:(long long) {
	%orig;
	NSLog(@"-(void) reloadCollectionViewSection:(long long)");
}

-(void) logImpressionForCollectionViewCell:(id) {
	%orig;
	NSLog(@"-(void) logImpressionForCollectionViewCell:(id)");
}

-(bool) shouldShowOnboardingUITreatment {
	%orig;
	NSLog(@"-(bool) shouldShowOnboardingUITreatment");
}

-(id) onboardingUITreatmentFooterView {
	%orig;
	NSLog(@"-(id) onboardingUITreatmentFooterView");
}

-(id) podcastMyMusicCellData {
	%orig;
	NSLog(@"-(id) podcastMyMusicCellData");
}

-(id) recommendationDataForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) recommendationDataForItemAtIndexPath:(id)");
}

-(void) invalidateSizeForCell:(id) {
	%orig;
	NSLog(@"-(void) invalidateSizeForCell:(id)");
}

-(void) handleFontSizeChangeNotification:(id) {
	%orig;
	NSLog(@"-(void) handleFontSizeChangeNotification:(id)");
}

-(void) selectStation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) selectStation:(id) atIndexPath:(id)");
}

-(void) selectRecommendation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) selectRecommendation:(id) atIndexPath:(id)");
}

-(void) myStationsMusicCell:(id) makeCollectionViewCellsHideButtonDrawerAnimated:(bool) {
	%orig;
	NSLog(@"-(void) myStationsMusicCell:(id) makeCollectionViewCellsHideButtonDrawerAnimated:(bool)");
}

-(void) pushToThumbprintStationDetail:(id) {
	%orig;
	NSLog(@"-(void) pushToThumbprintStationDetail:(id)");
}

-(void) promptToDeleteStation:(id) {
	%orig;
	NSLog(@"-(void) promptToDeleteStation:(id)");
}

-(void) dismissRecommendation:(id) {
	%orig;
	NSLog(@"-(void) dismissRecommendation:(id)");
}

-(void) showShuffleEditor {
	%orig;
	NSLog(@"-(void) showShuffleEditor");
}

-(void) invalidatePodcastRowCell {
	%orig;
	NSLog(@"-(void) invalidatePodcastRowCell");
}

-(void) makeCollectionViewCellsCancelGestureRecognizers {
	%orig;
	NSLog(@"-(void) makeCollectionViewCellsCancelGestureRecognizers");
}

-(id) createStationButtonCell {
	%orig;
	NSLog(@"-(id) createStationButtonCell");
}

-(bool) isManuallyTrackingCollectionViewOffset {
	%orig;
	NSLog(@"-(bool) isManuallyTrackingCollectionViewOffset");
}

-(bool) isAnimatingCollectionViewOffset {
	%orig;
	NSLog(@"-(bool) isAnimatingCollectionViewOffset");
}

-(void) updateSortControlPositionMidScroll:(id) {
	%orig;
	NSLog(@"-(void) updateSortControlPositionMidScroll:(id)");
}

-(void) adjustFutureSortControlModeForUserScrollingVelocity:(double) {
	%orig;
	NSLog(@"-(void) adjustFutureSortControlModeForUserScrollingVelocity:(double)");
}

-(long long) sortControlPositionMode {
	%orig;
	NSLog(@"-(long long) sortControlPositionMode");
}

-(void) setIsCollectionViewScrolling:(bool) {
	%orig;
	NSLog(@"-(void) setIsCollectionViewScrolling:(bool)");
}

-(void) snapSortControlAfterScrolling {
	%orig;
	NSLog(@"-(void) snapSortControlAfterScrolling");
}

-(bool) skipNextRebuildUserRecommendationWhenRecsRefresh {
	%orig;
	NSLog(@"-(bool) skipNextRebuildUserRecommendationWhenRecsRefresh");
}

-(void) setSkipNextRebuildUserRecommendationWhenRecsRefresh:(bool) {
	%orig;
	NSLog(@"-(void) setSkipNextRebuildUserRecommendationWhenRecsRefresh:(bool)");
}

-(void) selectPromotedStation:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(void) selectPromotedStation:(id) atIndexPath:(id)");
}

-(void) logChangeToStation:(id) {
	%orig;
	NSLog(@"-(void) logChangeToStation:(id)");
}

-(void) logStationSelection:(id) {
	%orig;
	NSLog(@"-(void) logStationSelection:(id)");
}

-(void) finishCreateStationWithRequest:(id) station:(id) {
	%orig;
	NSLog(@"-(void) finishCreateStationWithRequest:(id) station:(id)");
}

-(void) failedCreateStationWithRequest:(id) errorCode:(long long) {
	%orig;
	NSLog(@"-(void) failedCreateStationWithRequest:(id) errorCode:(long long)");
}

-(void) forceSyncRecommendationIfEmptyCache {
	%orig;
	NSLog(@"-(void) forceSyncRecommendationIfEmptyCache");
}

-(void) logImpressionsForVisibleCollectionViewCells {
	%orig;
	NSLog(@"-(void) logImpressionsForVisibleCollectionViewCells");
}

-(long long) statsIndexWithoutHeadersForIndexPath:(id) {
	%orig;
	NSLog(@"-(long long) statsIndexWithoutHeadersForIndexPath:(id)");
}

-(long long) maxStatsIndexWithoutHeaders {
	%orig;
	NSLog(@"-(long long) maxStatsIndexWithoutHeaders");
}

-(bool) myStationsIsVisible {
	%orig;
	NSLog(@"-(bool) myStationsIsVisible");
}

-(void) logImpressionForPromotedStationIfNeeded:(id) {
	%orig;
	NSLog(@"-(void) logImpressionForPromotedStationIfNeeded:(id)");
}

-(bool) isCollectionViewScrolling {
	%orig;
	NSLog(@"-(bool) isCollectionViewScrolling");
}

-(bool) hasLoggedInitialPromotedStationImpression {
	%orig;
	NSLog(@"-(bool) hasLoggedInitialPromotedStationImpression");
}

-(void) revealSortControl {
	%orig;
	NSLog(@"-(void) revealSortControl");
}

-(long long) stationSortTypeForMusicCell:(id) {
	%orig;
	NSLog(@"-(long long) stationSortTypeForMusicCell:(id)");
}

-(void) musicCellWasTapped:(id) {
	%orig;
	NSLog(@"-(void) musicCellWasTapped:(id)");
}

-(void) musicCellDidBeginShowingButtonDrawer:(id) {
	%orig;
	NSLog(@"-(void) musicCellDidBeginShowingButtonDrawer:(id)");
}

-(void) musicCellDidTapPersonalizeButton:(id) {
	%orig;
	NSLog(@"-(void) musicCellDidTapPersonalizeButton:(id)");
}

-(void) musicCellDidTapInfoButton:(id) {
	%orig;
	NSLog(@"-(void) musicCellDidTapInfoButton:(id)");
}

-(void) musicCell:(id) didTapAccessoryButtonOfType:(long long) {
	%orig;
	NSLog(@"-(void) musicCell:(id) didTapAccessoryButtonOfType:(long long)");
}

-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id)");
}

-(void) didDismissRecommendationControllerWithContext:(id) {
	%orig;
	NSLog(@"-(void) didDismissRecommendationControllerWithContext:(id)");
}

-(void) didInteractWithCalloutView:(id) action:(long long) {
	%orig;
	NSLog(@"-(void) didInteractWithCalloutView:(id) action:(long long)");
}

-(void) sortStationsWithType:(long long) animated:(bool) {
	%orig;
	NSLog(@"-(void) sortStationsWithType:(long long) animated:(bool)");
}

-(id) visibleCellForStation:(id) {
	%orig;
	NSLog(@"-(id) visibleCellForStation:(id)");
}

-(void) setCollectionViewUserStationsDataSource:(id) {
	%orig;
	NSLog(@"-(void) setCollectionViewUserStationsDataSource:(id)");
}

-(void) setAdvertisingController:(id) {
	%orig;
	NSLog(@"-(void) setAdvertisingController:(id)");
}

-(void) setRecentlyPlayedItemObserver:(id) {
	%orig;
	NSLog(@"-(void) setRecentlyPlayedItemObserver:(id)");
}

-(void) setPodcastMyMusicCellData:(id) {
	%orig;
	NSLog(@"-(void) setPodcastMyMusicCellData:(id)");
}

-(long long) firstSectionForNonQuickMix {
	%orig;
	NSLog(@"-(long long) firstSectionForNonQuickMix");
}

-(long long) sectionForQuickMix {
	%orig;
	NSLog(@"-(long long) sectionForQuickMix");
}

-(id) sectionsForNonUserStations {
	%orig;
	NSLog(@"-(id) sectionsForNonUserStations");
}

-(void) recommendations:(id) alreadySyncedAt:(id) {
	%orig;
	NSLog(@"-(void) recommendations:(id) alreadySyncedAt:(id)");
}

-(void) recommendationsDidRefresh {
	%orig;
	NSLog(@"-(void) recommendationsDidRefresh");
}

-(void) array:(id) didInsertWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didInsertWithUpdate:(id)");
}

-(void) array:(id) didRemoveWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didRemoveWithUpdate:(id)");
}

-(void) arrayDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) arrayDidRefresh:(id)");
}

-(void) scrollViewDidEndScrolling {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrolling");
}

-(double) dynamicCellHeight {
	%orig;
	NSLog(@"-(double) dynamicCellHeight");
}

-(bool) isViewDisappearing {
	%orig;
	NSLog(@"-(bool) isViewDisappearing");
}

-(void) removeObservers {
	%orig;
	NSLog(@"-(void) removeObservers");
}

-(void) addObservers {
	%orig;
	NSLog(@"-(void) addObservers");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) accessibilityScroll:(long long) {
	%orig;
	NSLog(@"-(bool) accessibilityScroll:(long long)");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) initWithCollectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithCollectionViewLayout:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(void) collectionView:(id) didHighlightItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didHighlightItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didUnhighlightItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didUnhighlightItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

%end

%hook PMBrowseTileCardCollectionViewController

+(CGSize) collectionViewCellSizeForWidth:(double) {
	%orig;
	NSLog(@"+(CGSize) collectionViewCellSizeForWidth:(double)");
}

+(id) newTileCardCollectionViewController {
	%orig;
	NSLog(@"+(id) newTileCardCollectionViewController");
}

+(double) collectionViewHeightForWidth:(double) totalCardCount:(long long) {
	%orig;
	NSLog(@"+(double) collectionViewHeightForWidth:(double) totalCardCount:(long long)");
}

-(void) didLongPressBrowseTileCardCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) didLongPressBrowseTileCardCell:(id) withData:(id)");
}

-(void) setTileCardCellData:(id) {
	%orig;
	NSLog(@"-(void) setTileCardCellData:(id)");
}

-(void) setModuleTitle:(id) {
	%orig;
	NSLog(@"-(void) setModuleTitle:(id)");
}

-(id) moduleTitle {
	%orig;
	NSLog(@"-(id) moduleTitle");
}

-(void) setTileCardCellData:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) setTileCardCellData:(id) animated:(bool)");
}

-(id) tileCardCellData {
	%orig;
	NSLog(@"-(id) tileCardCellData");
}

-(void) logBrowseViewEventWithCell:(id) atIndexpath:(id) {
	%orig;
	NSLog(@"-(void) logBrowseViewEventWithCell:(id) atIndexpath:(id)");
}

-(void) addOverlayViewOnHighLightForIndexPath:(id) {
	%orig;
	NSLog(@"-(void) addOverlayViewOnHighLightForIndexPath:(id)");
}

-(void) removeOverlayViewOnUnHighlightForIndexPath:(id) {
	%orig;
	NSLog(@"-(void) removeOverlayViewOnUnHighlightForIndexPath:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didHighlightItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didHighlightItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didUnhighlightItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didUnhighlightItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) willDisplayCell:(id) forItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumLineSpacingForSectionAtIndex:(long long)");
}

%end

%hook PMPreviewCardPresentingCollectionViewController

-(id) previewCardPresenter {
	%orig;
	NSLog(@"-(id) previewCardPresenter");
}

-(void) setPreviewCardPresenter:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardPresenter:(id)");
}

-(bool) shouldShowPreviewCardOnViewDidAppear {
	%orig;
	NSLog(@"-(bool) shouldShowPreviewCardOnViewDidAppear");
}

-(void) setShouldShowPreviewCardOnViewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowPreviewCardOnViewDidAppear:(bool)");
}

-(id) previewCardTransitionNavigationSnapshotView {
	%orig;
	NSLog(@"-(id) previewCardTransitionNavigationSnapshotView");
}

-(void) setPreviewCardTransitionNavigationSnapshotView:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardTransitionNavigationSnapshotView:(id)");
}

-(id) previewCardTransitionViewControllerSnapshotView {
	%orig;
	NSLog(@"-(id) previewCardTransitionViewControllerSnapshotView");
}

-(void) setPreviewCardTransitionViewControllerSnapshotView:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardTransitionViewControllerSnapshotView:(id)");
}

-(void) presenterWillDismissPreviewCard:(id) {
	%orig;
	NSLog(@"-(void) presenterWillDismissPreviewCard:(id)");
}

-(void) presenterDidDismissPreviewCard:(id) {
	%orig;
	NSLog(@"-(void) presenterDidDismissPreviewCard:(id)");
}

-(void) removePreviewCardTimeoutTimer {
	%orig;
	NSLog(@"-(void) removePreviewCardTimeoutTimer");
}

-(void) handlePreviewCardTimeout {
	%orig;
	NSLog(@"-(void) handlePreviewCardTimeout");
}

-(void) setPreviewCardTimeoutTimer:(id) {
	%orig;
	NSLog(@"-(void) setPreviewCardTimeoutTimer:(id)");
}

-(void) removeTransitionViewsAndClear:(bool) {
	%orig;
	NSLog(@"-(void) removeTransitionViewsAndClear:(bool)");
}

-(id) previewCardTimeoutTimer {
	%orig;
	NSLog(@"-(id) previewCardTimeoutTimer");
}

-(void) addTransitionViews {
	%orig;
	NSLog(@"-(void) addTransitionViews");
}

-(void) setupPreviewCardTransitionViews {
	%orig;
	NSLog(@"-(void) setupPreviewCardTransitionViews");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook PMBrowseNewContentCollectionViewController

+(id) newNewMusicCollectionViewControllerWith:(id) {
	%orig;
	NSLog(@"+(id) newNewMusicCollectionViewControllerWith:(id)");
}

-(bool) shouldEnableInteractivePopGestureRecognizer {
	%orig;
	NSLog(@"-(bool) shouldEnableInteractivePopGestureRecognizer");
}

-(bool) shouldEnableLeftNavMenuGesture {
	%orig;
	NSLog(@"-(bool) shouldEnableLeftNavMenuGesture");
}

-(void) browseNewContentViewModelDidUpdate {
	%orig;
	NSLog(@"-(void) browseNewContentViewModelDidUpdate");
}

-(void) browseNewContentViewModelDidRefresh {
	%orig;
	NSLog(@"-(void) browseNewContentViewModelDidRefresh");
}

-(void) didLongPressBrowseTileCardCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) didLongPressBrowseTileCardCell:(id) withData:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForHeaderInSection:(long long)");
}

-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) referenceSizeForFooterInSection:(long long)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) viewForSupplementaryElementOfKind:(id) atIndexPath:(id)");
}

-(void) collectionView:(id) didHighlightItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didHighlightItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didUnhighlightItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didUnhighlightItemAtIndexPath:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(id) statsContext {
	%orig;
	NSLog(@"-(id) statsContext");
}

-(void) setStatsContext:(id) {
	%orig;
	NSLog(@"-(void) setStatsContext:(id)");
}

-(bool) showSearchButton {
	%orig;
	NSLog(@"-(bool) showSearchButton");
}

-(id) parentModule {
	%orig;
	NSLog(@"-(id) parentModule");
}

-(void) setParentModule:(id) {
	%orig;
	NSLog(@"-(void) setParentModule:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) initWithCollectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithCollectionViewLayout:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

%end

%hook PMBrowseCollectionViewController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(void) didTapCreateStationButtonFooterView:(id) withCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) didTapCreateStationButtonFooterView:(id) withCreateStationButton:(id)");
}

-(void) setAccessibilityObserver:(id) {
	%orig;
	NSLog(@"-(void) setAccessibilityObserver:(id)");
}

-(id) accessibilityObserver {
	%orig;
	NSLog(@"-(id) accessibilityObserver");
}

-(void) setupSourceCardPresenter {
	%orig;
	NSLog(@"-(void) setupSourceCardPresenter");
}

-(void) setSourceCardPresenter:(id) {
	%orig;
	NSLog(@"-(void) setSourceCardPresenter:(id)");
}

-(id) sourceCardPresenter {
	%orig;
	NSLog(@"-(id) sourceCardPresenter");
}

-(void) updateIsInView {
	%orig;
	NSLog(@"-(void) updateIsInView");
}

-(id) collectionViewDataSource {
	%orig;
	NSLog(@"-(id) collectionViewDataSource");
}

-(void) setCollectionViewDataSource:(id) {
	%orig;
	NSLog(@"-(void) setCollectionViewDataSource:(id)");
}

-(void) browseTileModuleCell:(id) didSelectTileCardCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileModuleCell:(id) didSelectTileCardCell:(id) withData:(id)");
}

-(void) browseTileModuleCell:(id) didLongPressTileCardCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileModuleCell:(id) didLongPressTileCardCell:(id) withData:(id)");
}

-(void) browseTileModuleCellDidSelectViewAll:(id) {
	%orig;
	NSLog(@"-(void) browseTileModuleCellDidSelectViewAll:(id)");
}

-(id) browseCollectionViewFlowLayout {
	%orig;
	NSLog(@"-(id) browseCollectionViewFlowLayout");
}

-(void) reloadBrowseModules {
	%orig;
	NSLog(@"-(void) reloadBrowseModules");
}

-(void) setupCollectionViewDelegate {
	%orig;
	NSLog(@"-(void) setupCollectionViewDelegate");
}

-(void) setupCollectionViewDataSource {
	%orig;
	NSLog(@"-(void) setupCollectionViewDataSource");
}

-(void) startCarouselTimer {
	%orig;
	NSLog(@"-(void) startCarouselTimer");
}

-(void) resetCarouselTimer {
	%orig;
	NSLog(@"-(void) resetCarouselTimer");
}

-(void) invalidateBrowseChecksumIfApplicable {
	%orig;
	NSLog(@"-(void) invalidateBrowseChecksumIfApplicable");
}

-(void) podcastExperimentDidChange:(id) {
	%orig;
	NSLog(@"-(void) podcastExperimentDidChange:(id)");
}

-(void) setSubscriptionModel:(id) {
	%orig;
	NSLog(@"-(void) setSubscriptionModel:(id)");
}

-(bool) didReceiveModuleRefreshError {
	%orig;
	NSLog(@"-(bool) didReceiveModuleRefreshError");
}

-(id) carouselTimer {
	%orig;
	NSLog(@"-(id) carouselTimer");
}

-(void) spinCarousel {
	%orig;
	NSLog(@"-(void) spinCarousel");
}

-(void) setCarouselTimer:(id) {
	%orig;
	NSLog(@"-(void) setCarouselTimer:(id)");
}

-(void) displayPreviewCardForCell:(id) cardCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) displayPreviewCardForCell:(id) cardCell:(id) withData:(id)");
}

-(void) setDidReceiveModuleRefreshError:(bool) {
	%orig;
	NSLog(@"-(void) setDidReceiveModuleRefreshError:(bool)");
}

-(void) featureModuleCell:(id) touchesBegan:(CGPoint) {
	%orig;
	NSLog(@"-(void) featureModuleCell:(id) touchesBegan:(CGPoint)");
}

-(void) featureModuleCell:(id) didTapFeatureStationsView:(id) {
	%orig;
	NSLog(@"-(void) featureModuleCell:(id) didTapFeatureStationsView:(id)");
}

-(void) featureModuleCell:(id) didSpinCarouselToIndex:(long long) {
	%orig;
	NSLog(@"-(void) featureModuleCell:(id) didSpinCarouselToIndex:(long long)");
}

-(void) featureModuleCell:(id) didSwipeFromIndex:(long long) toIndex:(long long) {
	%orig;
	NSLog(@"-(void) featureModuleCell:(id) didSwipeFromIndex:(long long) toIndex:(long long)");
}

-(void) didTap:(id) footerView:(id) {
	%orig;
	NSLog(@"-(void) didTap:(id) footerView:(id)");
}

-(void) browseSubscriptionModelDidInvalidateChecksumAndTTL {
	%orig;
	NSLog(@"-(void) browseSubscriptionModelDidInvalidateChecksumAndTTL");
}

-(void) setBrowseCollectionViewFlowLayout:(id) {
	%orig;
	NSLog(@"-(void) setBrowseCollectionViewFlowLayout:(id)");
}

-(id) subscriptionModel {
	%orig;
	NSLog(@"-(id) subscriptionModel");
}

-(id) browseModules {
	%orig;
	NSLog(@"-(id) browseModules");
}

-(void) setBrowseModules:(id) {
	%orig;
	NSLog(@"-(void) setBrowseModules:(id)");
}

-(void) browseManagerWillRefreshModules {
	%orig;
	NSLog(@"-(void) browseManagerWillRefreshModules");
}

-(void) browseManagerDidRefreshModules:(id) {
	%orig;
	NSLog(@"-(void) browseManagerDidRefreshModules:(id)");
}

-(void) browseManagerDidFailToRefreshModules {
	%orig;
	NSLog(@"-(void) browseManagerDidFailToRefreshModules");
}

-(void) logoutDidComplete:(id) {
	%orig;
	NSLog(@"-(void) logoutDidComplete:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) tearDown {
	%orig;
	NSLog(@"-(void) tearDown");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id) {
	%orig;
	NSLog(@"-(void) viewWillTransitionToSize:(CGSize) withTransitionCoordinator:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

%end

%hook PMUpdatingNavigationController

-(void) setPendingTopViewController:(id) {
	%orig;
	NSLog(@"-(void) setPendingTopViewController:(id)");
}

-(id) pendingTopViewController {
	%orig;
	NSLog(@"-(id) pendingTopViewController");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) pushViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) pushViewController:(id) animated:(bool)");
}

-(void) setViewControllers:(id) {
	%orig;
	NSLog(@"-(void) setViewControllers:(id)");
}

-(id) popToRootViewControllerAnimated:(bool) {
	%orig;
	NSLog(@"-(id) popToRootViewControllerAnimated:(bool)");
}

-(id) popViewControllerAnimated:(bool) {
	%orig;
	NSLog(@"-(id) popViewControllerAnimated:(bool)");
}

-(void) setViewControllers:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) setViewControllers:(id) animated:(bool)");
}

-(id) popToViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(id) popToViewController:(id) animated:(bool)");
}

%end

%hook PMResizingNavigationController

-(id) resizingNavigationBar {
	%orig;
	NSLog(@"-(id) resizingNavigationBar");
}

-(void) setPendingTopViewController:(id) {
	%orig;
	NSLog(@"-(void) setPendingTopViewController:(id)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

%end

%hook PMNavigationController

-(bool) gestureRecognizerShouldBegin:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizerShouldBegin:(id)");
}

-(void) dismissViewControllerAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissViewControllerAnimated:(bool) completion:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(unsigned long long) supportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientations");
}

-(void) pushViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) pushViewController:(id) animated:(bool)");
}

-(id) childViewControllerForStatusBarStyle {
	%orig;
	NSLog(@"-(id) childViewControllerForStatusBarStyle");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMModalContainer

-(void) didTapCloseWithSender:(id) {
	%orig;
	NSLog(@"-(void) didTapCloseWithSender:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillAppear:(bool)");
}

-(void) viewWillDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewWillDisappear:(bool)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

%end

%hook PMPremiumNowPlayingNavigationController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(bool) logViewState {
	%orig;
	NSLog(@"-(bool) logViewState");
}

-(void) viewControllerWillBeReselected {
	%orig;
	NSLog(@"-(void) viewControllerWillBeReselected");
}

-(bool) shouldHideBottomViewWhenPushed {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewWhenPushed");
}

-(void) setShouldHideBottomViewWhenPushed:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideBottomViewWhenPushed:(bool)");
}

-(bool) shouldLogViewStateOnViewWillAppear {
	%orig;
	NSLog(@"-(bool) shouldLogViewStateOnViewWillAppear");
}

-(void) setShouldLogViewStateOnViewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldLogViewStateOnViewWillAppear:(bool)");
}

-(bool) shouldStayInViewHierarchyWhenPresentingModalView {
	%orig;
	NSLog(@"-(bool) shouldStayInViewHierarchyWhenPresentingModalView");
}

-(void) setMenuItem:(id) {
	%orig;
	NSLog(@"-(void) setMenuItem:(id)");
}

-(id) menuItem {
	%orig;
	NSLog(@"-(id) menuItem");
}

-(void) setPageView:(id) {
	%orig;
	NSLog(@"-(void) setPageView:(id)");
}

-(void) setViewMode:(id) {
	%orig;
	NSLog(@"-(void) setViewMode:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidAppear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidAppear:(bool)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

-(id) viewMode {
	%orig;
	NSLog(@"-(id) viewMode");
}

-(id) pageView {
	%orig;
	NSLog(@"-(id) pageView");
}

%end

%hook PremiumSearchNavigationController

-(void) refreshViewState {
	%orig;
	NSLog(@"-(void) refreshViewState");
}

-(bool) logViewState {
	%orig;
	NSLog(@"-(bool) logViewState");
}

-(void) viewControllerWillBeReselected {
	%orig;
	NSLog(@"-(void) viewControllerWillBeReselected");
}

-(bool) shouldHideBottomViewWhenPushed {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewWhenPushed");
}

-(void) setShouldHideBottomViewWhenPushed:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideBottomViewWhenPushed:(bool)");
}

-(bool) shouldLogViewStateOnViewWillAppear {
	%orig;
	NSLog(@"-(bool) shouldLogViewStateOnViewWillAppear");
}

-(void) setShouldLogViewStateOnViewWillAppear:(bool) {
	%orig;
	NSLog(@"-(void) setShouldLogViewStateOnViewWillAppear:(bool)");
}

-(bool) shouldStayInViewHierarchyWhenPresentingModalView {
	%orig;
	NSLog(@"-(bool) shouldStayInViewHierarchyWhenPresentingModalView");
}

-(void) setMenuItem:(id) {
	%orig;
	NSLog(@"-(void) setMenuItem:(id)");
}

-(id) menuItem {
	%orig;
	NSLog(@"-(id) menuItem");
}

-(void) setPageView:(id) {
	%orig;
	NSLog(@"-(void) setPageView:(id)");
}

-(void) setViewMode:(id) {
	%orig;
	NSLog(@"-(void) setViewMode:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidDisappear:(bool) {
	%orig;
	NSLog(@"-(void) viewDidDisappear:(bool)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

-(id) viewMode {
	%orig;
	NSLog(@"-(id) viewMode");
}

-(id) pageView {
	%orig;
	NSLog(@"-(id) pageView");
}

%end

%hook PMLevel2NavigationController

-(id) level2AdViewController {
	%orig;
	NSLog(@"-(id) level2AdViewController");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(void) viewDidLoad {
	%orig;
	NSLog(@"-(void) viewDidLoad");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

%end

%hook PMLevel2WebViewContainerNavigationController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

%end

%hook PMLevel2SLAPContainerNavigationController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

%end

%hook PMLevel2APVContainerNavigationController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

%end

%hook PMLevel2SLAPContainerV3NavigationController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

%end

%hook PMTintedBarNavigationController

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithNibName:(id) bundle:(id) {
	%orig;
	NSLog(@"-(id) initWithNibName:(id) bundle:(id)");
}

-(id) initWithRootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithRootViewController:(id)");
}

-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class) {
	%orig;
	NSLog(@"-(id) initWithNavigationBarClass:(Class) toolbarClass:(Class)");
}

-(long long) preferredStatusBarStyle {
	%orig;
	NSLog(@"-(long long) preferredStatusBarStyle");
}

%end

%hook PMStationPersonalizationNavigationController

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(unsigned long long) indexOfStationPersonalizationControllerInNavigationStack {
	%orig;
	NSLog(@"-(unsigned long long) indexOfStationPersonalizationControllerInNavigationStack");
}

-(id) stationPersonalizationViewControllerForStation:(id) {
	%orig;
	NSLog(@"-(id) stationPersonalizationViewControllerForStation:(id)");
}

-(unsigned long long) indexOfThumbprintRadioInNavigationStack {
	%orig;
	NSLog(@"-(unsigned long long) indexOfThumbprintRadioInNavigationStack");
}

-(id) thumbprintStationDetailViewController:(id) {
	%orig;
	NSLog(@"-(id) thumbprintStationDetailViewController:(id)");
}

-(void) setViewForStation:(id) option:(long long) {
	%orig;
	NSLog(@"-(void) setViewForStation:(id) option:(long long)");
}

-(void) setThumbPrintRadioViewForStation:(id) option:(long long) {
	%orig;
	NSLog(@"-(void) setThumbPrintRadioViewForStation:(id) option:(long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

%end

%hook PMBaseApplicationDelegate

+(id) findVersionFromString:(id) {
	%orig;
	NSLog(@"+(id) findVersionFromString:(id)");
}

+(long long) compareStringWithCurrentAppVersion:(id) {
	%orig;
	NSLog(@"+(long long) compareStringWithCurrentAppVersion:(id)");
}

-(bool) modalActionIsInProgress {
	%orig;
	NSLog(@"-(bool) modalActionIsInProgress");
}

-(id) phoneApplicationDelegate {
	%orig;
	NSLog(@"-(id) phoneApplicationDelegate");
}

-(id) remoteControlDelegate {
	%orig;
	NSLog(@"-(id) remoteControlDelegate");
}

-(void) setRemoteControlDelegate:(id) {
	%orig;
	NSLog(@"-(void) setRemoteControlDelegate:(id)");
}

-(void) authorizeWillStart:(long long) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeWillStart:(long long) context:(id)");
}

-(void) authorizeDidEnd:(long long) success:(bool) context:(id) {
	%orig;
	NSLog(@"-(void) authorizeDidEnd:(long long) success:(bool) context:(id)");
}

-(void) whyAdsPressed {
	%orig;
	NSLog(@"-(void) whyAdsPressed");
}

-(id) currModalController {
	%orig;
	NSLog(@"-(id) currModalController");
}

-(id) abTestController {
	%orig;
	NSLog(@"-(id) abTestController");
}

-(id) firstIntroManager {
	%orig;
	NSLog(@"-(id) firstIntroManager");
}

-(bool) isValidListenerInteraction:(id) {
	%orig;
	NSLog(@"-(bool) isValidListenerInteraction:(id)");
}

-(id) eventObservers {
	%orig;
	NSLog(@"-(id) eventObservers");
}

-(id) remoteControlManager {
	%orig;
	NSLog(@"-(id) remoteControlManager");
}

-(void) setEventObservers:(id) {
	%orig;
	NSLog(@"-(void) setEventObservers:(id)");
}

-(void) showThumbprintRadioNonEligibleCoachMark {
	%orig;
	NSLog(@"-(void) showThumbprintRadioNonEligibleCoachMark");
}

-(unsigned long long) initTaskIdentifier {
	%orig;
	NSLog(@"-(unsigned long long) initTaskIdentifier");
}

-(void) setInitTaskIdentifier:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setInitTaskIdentifier:(unsigned long long)");
}

-(void) checkInitTask {
	%orig;
	NSLog(@"-(void) checkInitTask");
}

-(void) endInitTask {
	%orig;
	NSLog(@"-(void) endInitTask");
}

-(void) updateIdleTimer {
	%orig;
	NSLog(@"-(void) updateIdleTimer");
}

-(void) clearPreviouslyQueuedDeepLink {
	%orig;
	NSLog(@"-(void) clearPreviouslyQueuedDeepLink");
}

-(void) setRemoteNotification:(id) {
	%orig;
	NSLog(@"-(void) setRemoteNotification:(id)");
}

-(bool) didFinishInitialNavigation {
	%orig;
	NSLog(@"-(bool) didFinishInitialNavigation");
}

-(id) remoteNotification {
	%orig;
	NSLog(@"-(id) remoteNotification");
}

-(void) setAppStartedAt:(id) {
	%orig;
	NSLog(@"-(void) setAppStartedAt:(id)");
}

-(void) setUpPersistence {
	%orig;
	NSLog(@"-(void) setUpPersistence");
}

-(void) setSupportedInterfaceOrientation:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSupportedInterfaceOrientation:(unsigned long long)");
}

-(void) setupAppearance {
	%orig;
	NSLog(@"-(void) setupAppearance");
}

-(void) setupGoogleCastMethodSwizzling {
	%orig;
	NSLog(@"-(void) setupGoogleCastMethodSwizzling");
}

-(void) autoLoginDidComplete:(id) {
	%orig;
	NSLog(@"-(void) autoLoginDidComplete:(id)");
}

-(void) handleDidDeleteStation:(id) {
	%orig;
	NSLog(@"-(void) handleDidDeleteStation:(id)");
}

-(void) manualLoginDidSucceed:(id) {
	%orig;
	NSLog(@"-(void) manualLoginDidSucceed:(id)");
}

-(void) manualLoginDidFail:(id) {
	%orig;
	NSLog(@"-(void) manualLoginDidFail:(id)");
}

-(void) switchEnvironment:(id) {
	%orig;
	NSLog(@"-(void) switchEnvironment:(id)");
}

-(void) setModalAnimationSerializer:(id) {
	%orig;
	NSLog(@"-(void) setModalAnimationSerializer:(id)");
}

-(void) setIsFreshAppLaunch:(bool) {
	%orig;
	NSLog(@"-(void) setIsFreshAppLaunch:(bool)");
}

-(void) setUiWasInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setUiWasInitialized:(bool)");
}

-(void) setDidFinishInitialNavigation:(bool) {
	%orig;
	NSLog(@"-(void) setDidFinishInitialNavigation:(bool)");
}

-(void) setDidLaunchWithLandingPage:(bool) {
	%orig;
	NSLog(@"-(void) setDidLaunchWithLandingPage:(bool)");
}

-(void) setDidLaunchWithBrowsePage:(bool) {
	%orig;
	NSLog(@"-(void) setDidLaunchWithBrowsePage:(bool)");
}

-(void) setShowingSubscriptionExpired:(bool) {
	%orig;
	NSLog(@"-(void) setShowingSubscriptionExpired:(bool)");
}

-(id) rpcConfiguration {
	%orig;
	NSLog(@"-(id) rpcConfiguration");
}

-(void) loadMainWindowNibWithOwner {
	%orig;
	NSLog(@"-(void) loadMainWindowNibWithOwner");
}

-(void) setLogNewAppInstallIsFromDeferredDeepLink:(bool) {
	%orig;
	NSLog(@"-(void) setLogNewAppInstallIsFromDeferredDeepLink:(bool)");
}

-(void) setLogNewAppInstallDeferredDeepLinkURLString:(id) {
	%orig;
	NSLog(@"-(void) setLogNewAppInstallDeferredDeepLinkURLString:(id)");
}

-(bool) checkForDeferredDeepLinkAndNavigateToContent {
	%orig;
	NSLog(@"-(bool) checkForDeferredDeepLinkAndNavigateToContent");
}

-(bool) logNewAppInstallIsFromDeferredDeepLink {
	%orig;
	NSLog(@"-(bool) logNewAppInstallIsFromDeferredDeepLink");
}

-(id) logNewAppInstallDeferredDeepLinkURLString {
	%orig;
	NSLog(@"-(id) logNewAppInstallDeferredDeepLinkURLString");
}

-(void) overrideUserAgentIfNecessary {
	%orig;
	NSLog(@"-(void) overrideUserAgentIfNecessary");
}

-(void) setExtensionRadioObserver:(id) {
	%orig;
	NSLog(@"-(void) setExtensionRadioObserver:(id)");
}

-(void) batteryStateDidChange:(id) {
	%orig;
	NSLog(@"-(void) batteryStateDidChange:(id)");
}

-(void) setShortcutManager:(id) {
	%orig;
	NSLog(@"-(void) setShortcutManager:(id)");
}

-(void) application:(id) handleLocalNotification:(id) onLaunch:(bool) {
	%orig;
	NSLog(@"-(void) application:(id) handleLocalNotification:(id) onLaunch:(bool)");
}

-(void) confirmUserInitiatedLaunch {
	%orig;
	NSLog(@"-(void) confirmUserInitiatedLaunch");
}

-(bool) safeForGLOperations {
	%orig;
	NSLog(@"-(bool) safeForGLOperations");
}

-(void) setGlSafeQueue:(id) {
	%orig;
	NSLog(@"-(void) setGlSafeQueue:(id)");
}

-(void) radioDidInitialize {
	%orig;
	NSLog(@"-(void) radioDidInitialize");
}

-(void) setupApplicationHealthTrackers {
	%orig;
	NSLog(@"-(void) setupApplicationHealthTrackers");
}

-(void) setAdobe:(id) {
	%orig;
	NSLog(@"-(void) setAdobe:(id)");
}

-(id) adobe {
	%orig;
	NSLog(@"-(id) adobe");
}

-(void) setLinkTracker:(id) {
	%orig;
	NSLog(@"-(void) setLinkTracker:(id)");
}

-(id) linkTracker {
	%orig;
	NSLog(@"-(id) linkTracker");
}

-(void) setIntentManager:(id) {
	%orig;
	NSLog(@"-(void) setIntentManager:(id)");
}

-(void) setFirstIntroManager:(id) {
	%orig;
	NSLog(@"-(void) setFirstIntroManager:(id)");
}

-(bool) canPerformEarlyUIInitialization {
	%orig;
	NSLog(@"-(bool) canPerformEarlyUIInitialization");
}

-(void) initControllers {
	%orig;
	NSLog(@"-(void) initControllers");
}

-(void) showFallbackLoadingIndicatorView {
	%orig;
	NSLog(@"-(void) showFallbackLoadingIndicatorView");
}

-(id) shortcutManager {
	%orig;
	NSLog(@"-(id) shortcutManager");
}

-(bool) openUniversalLink:(id) isDeferredDeepLink:(bool) {
	%orig;
	NSLog(@"-(bool) openUniversalLink:(id) isDeferredDeepLink:(bool)");
}

-(id) intentManager {
	%orig;
	NSLog(@"-(id) intentManager");
}

-(void) setDelayedSiriIntentHandler:(id) {
	%orig;
	NSLog(@"-(void) setDelayedSiriIntentHandler:(id)");
}

-(id) spotlightService {
	%orig;
	NSLog(@"-(id) spotlightService");
}

-(bool) shouldHandleURL {
	%orig;
	NSLog(@"-(bool) shouldHandleURL");
}

-(id) universalLinkHandler {
	%orig;
	NSLog(@"-(id) universalLinkHandler");
}

-(void) setShouldShowLoginPromptForURLProcessing:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowLoginPromptForURLProcessing:(bool)");
}

-(void) handleURLProcessingIfNeededAndAppReady {
	%orig;
	NSLog(@"-(void) handleURLProcessingIfNeededAndAppReady");
}

-(bool) willBePlaying {
	%orig;
	NSLog(@"-(bool) willBePlaying");
}

-(bool) shouldSuppressOnLaunchMusicPlayback {
	%orig;
	NSLog(@"-(bool) shouldSuppressOnLaunchMusicPlayback");
}

-(void) launchedWithoutUserIntervention {
	%orig;
	NSLog(@"-(void) launchedWithoutUserIntervention");
}

-(bool) isFreshAppLaunch {
	%orig;
	NSLog(@"-(bool) isFreshAppLaunch");
}

-(bool) shouldRegisterForPushNotification {
	%orig;
	NSLog(@"-(bool) shouldRegisterForPushNotification");
}

-(void) registerForPushNotification {
	%orig;
	NSLog(@"-(void) registerForPushNotification");
}

-(void) checkForPendingOpenURLRequests {
	%orig;
	NSLog(@"-(void) checkForPendingOpenURLRequests");
}

-(id) userAgentWebView {
	%orig;
	NSLog(@"-(id) userAgentWebView");
}

-(void) setUserAgentWebView:(id) {
	%orig;
	NSLog(@"-(void) setUserAgentWebView:(id)");
}

-(void) initRadioRuntime {
	%orig;
	NSLog(@"-(void) initRadioRuntime");
}

-(void) setSpotlightService:(id) {
	%orig;
	NSLog(@"-(void) setSpotlightService:(id)");
}

-(void) configurePlayableContentManager {
	%orig;
	NSLog(@"-(void) configurePlayableContentManager");
}

-(void) addDeviceProperties {
	%orig;
	NSLog(@"-(void) addDeviceProperties");
}

-(void) setupBackgroundFetch {
	%orig;
	NSLog(@"-(void) setupBackgroundFetch");
}

-(void) setupWatchService {
	%orig;
	NSLog(@"-(void) setupWatchService");
}

-(void) startRadio {
	%orig;
	NSLog(@"-(void) startRadio");
}

-(void) setApplicationBackgroundFetchManager:(id) {
	%orig;
	NSLog(@"-(void) setApplicationBackgroundFetchManager:(id)");
}

-(id) applicationBackgroundFetchManager {
	%orig;
	NSLog(@"-(id) applicationBackgroundFetchManager");
}

-(id) createHostWatchService {
	%orig;
	NSLog(@"-(id) createHostWatchService");
}

-(void) setHostWatchService:(id) {
	%orig;
	NSLog(@"-(void) setHostWatchService:(id)");
}

-(id) hostWatchService {
	%orig;
	NSLog(@"-(id) hostWatchService");
}

-(void) startManuallyOffline {
	%orig;
	NSLog(@"-(void) startManuallyOffline");
}

-(void) startImplicitlyOffline {
	%orig;
	NSLog(@"-(void) startImplicitlyOffline");
}

-(bool) startOfflineModeIfNecessary {
	%orig;
	NSLog(@"-(bool) startOfflineModeIfNecessary");
}

-(id) glSafeQueue {
	%orig;
	NSLog(@"-(id) glSafeQueue");
}

-(bool) shouldShowSignInImmediately {
	%orig;
	NSLog(@"-(bool) shouldShowSignInImmediately");
}

-(void) showSignInAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showSignInAnimated:(bool)");
}

-(void) applicationRequestsControllerInitialization {
	%orig;
	NSLog(@"-(void) applicationRequestsControllerInitialization");
}

-(void) finishUIInit {
	%orig;
	NSLog(@"-(void) finishUIInit");
}

-(void) hideFallbackLoadingIndicatorView {
	%orig;
	NSLog(@"-(void) hideFallbackLoadingIndicatorView");
}

-(void) applicationDidInitializeUserInterface {
	%orig;
	NSLog(@"-(void) applicationDidInitializeUserInterface");
}

-(void) applicationDidCompleteInitialization {
	%orig;
	NSLog(@"-(void) applicationDidCompleteInitialization");
}

-(void) applicationDidFinishInitialNavigation {
	%orig;
	NSLog(@"-(void) applicationDidFinishInitialNavigation");
}

-(id) createOpenPandoraURLHandler {
	%orig;
	NSLog(@"-(id) createOpenPandoraURLHandler");
}

-(void) setOpenPandoraURLHandler:(id) {
	%orig;
	NSLog(@"-(void) setOpenPandoraURLHandler:(id)");
}

-(void) triggerSavedRemoteNotificationIfNeeded {
	%orig;
	NSLog(@"-(void) triggerSavedRemoteNotificationIfNeeded");
}

-(id) openURLToInvokeAfterUIInit {
	%orig;
	NSLog(@"-(id) openURLToInvokeAfterUIInit");
}

-(void) handleOpenURL:(id) {
	%orig;
	NSLog(@"-(void) handleOpenURL:(id)");
}

-(id) automationSuite {
	%orig;
	NSLog(@"-(id) automationSuite");
}

-(bool) isReceivingRemoteControlEvents {
	%orig;
	NSLog(@"-(bool) isReceivingRemoteControlEvents");
}

-(void) setIsReceivingRemoteControlEvents:(bool) {
	%orig;
	NSLog(@"-(void) setIsReceivingRemoteControlEvents:(bool)");
}

-(bool) hasSpentEntireRuntimeInBackground {
	%orig;
	NSLog(@"-(bool) hasSpentEntireRuntimeInBackground");
}

-(id) delayedSiriIntentHandler {
	%orig;
	NSLog(@"-(id) delayedSiriIntentHandler");
}

-(void) setRemoteControlManager:(id) {
	%orig;
	NSLog(@"-(void) setRemoteControlManager:(id)");
}

-(id) invocationsToInvokeOnStartup {
	%orig;
	NSLog(@"-(id) invocationsToInvokeOnStartup");
}

-(void) setInvocationsToInvokeOnStartup:(id) {
	%orig;
	NSLog(@"-(void) setInvocationsToInvokeOnStartup:(id)");
}

-(void) setListenTimeoutUiDelegate:(id) {
	%orig;
	NSLog(@"-(void) setListenTimeoutUiDelegate:(id)");
}

-(id) listenTimeoutUiDelegate {
	%orig;
	NSLog(@"-(id) listenTimeoutUiDelegate");
}

-(long long) backgroundRoute {
	%orig;
	NSLog(@"-(long long) backgroundRoute");
}

-(bool) hasTransitionedToBackgroundAtLeastOnce {
	%orig;
	NSLog(@"-(bool) hasTransitionedToBackgroundAtLeastOnce");
}

-(void) startOfflineModeInManual:(bool) {
	%orig;
	NSLog(@"-(void) startOfflineModeInManual:(bool)");
}

-(void) applyBadgeNumber:(int) toTabItemWithTag:(long long) {
	%orig;
	NSLog(@"-(void) applyBadgeNumber:(int) toTabItemWithTag:(long long)");
}

-(void) applicationDeviceOrientationDidChange {
	%orig;
	NSLog(@"-(void) applicationDeviceOrientationDidChange");
}

-(void) stationListChangedWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) stationListChangedWithUpdate:(id)");
}

-(bool) shouldNotifyObserversForURL:(id) {
	%orig;
	NSLog(@"-(bool) shouldNotifyObserversForURL:(id)");
}

-(bool) isAuthorizedToNotifyWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(bool) isAuthorizedToNotifyWithPath:(id) andParameters:(id)");
}

-(void) cacheDeferredOpenURLRequestWithPath:(id) andParameters:(id) {
	%orig;
	NSLog(@"-(void) cacheDeferredOpenURLRequestWithPath:(id) andParameters:(id)");
}

-(void) performLogout {
	%orig;
	NSLog(@"-(void) performLogout");
}

-(void) setDeferredOpenURLRequest:(id) {
	%orig;
	NSLog(@"-(void) setDeferredOpenURLRequest:(id)");
}

-(id) deferredOpenURLRequest {
	%orig;
	NSLog(@"-(id) deferredOpenURLRequest");
}

-(void) handleOpenURLIfAppDidFinishInitialNavigation:(id) {
	%orig;
	NSLog(@"-(void) handleOpenURLIfAppDidFinishInitialNavigation:(id)");
}

-(void) queueSelectorUntilAppDidFinishInitialNavigation:(SEL) withObject:(id) {
	%orig;
	NSLog(@"-(void) queueSelectorUntilAppDidFinishInitialNavigation:(SEL) withObject:(id)");
}

-(void) scheduleHandleOpenURL:(id) {
	%orig;
	NSLog(@"-(void) scheduleHandleOpenURL:(id)");
}

-(void) setOpenURLToInvokeAfterUIInit:(id) {
	%orig;
	NSLog(@"-(void) setOpenURLToInvokeAfterUIInit:(id)");
}

-(bool) shouldShowLoginPromptForURLProcessing {
	%orig;
	NSLog(@"-(bool) shouldShowLoginPromptForURLProcessing");
}

-(void) applicationLogoutWasRequested {
	%orig;
	NSLog(@"-(void) applicationLogoutWasRequested");
}

-(void) onApplicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) onApplicationDidBecomeActive");
}

-(void) didBecomeSafeForGPUAccess {
	%orig;
	NSLog(@"-(void) didBecomeSafeForGPUAccess");
}

-(bool) canPerformConditionalBatchDeletionOfObjectsMarkedForLocalDeletion {
	%orig;
	NSLog(@"-(bool) canPerformConditionalBatchDeletionOfObjectsMarkedForLocalDeletion");
}

-(void) willBecomeUnsafeForGPUAccess {
	%orig;
	NSLog(@"-(void) willBecomeUnsafeForGPUAccess");
}

-(void) setBackgroundRoute:(long long) {
	%orig;
	NSLog(@"-(void) setBackgroundRoute:(long long)");
}

-(id) audioFailureDelegate {
	%orig;
	NSLog(@"-(id) audioFailureDelegate");
}

-(void) setAudioFailureDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAudioFailureDelegate:(id)");
}

-(id) audioFailureAlertController {
	%orig;
	NSLog(@"-(id) audioFailureAlertController");
}

-(void) setAudioFailureAlertController:(id) {
	%orig;
	NSLog(@"-(void) setAudioFailureAlertController:(id)");
}

-(bool) attemptingUpgrade {
	%orig;
	NSLog(@"-(bool) attemptingUpgrade");
}

-(void) setAttemptingUpgrade:(bool) {
	%orig;
	NSLog(@"-(void) setAttemptingUpgrade:(bool)");
}

-(void) dismissAudioFailure {
	%orig;
	NSLog(@"-(void) dismissAudioFailure");
}

-(void) clearAppIsInBackground {
	%orig;
	NSLog(@"-(void) clearAppIsInBackground");
}

-(void) confirmValidAuthTokenOnAppForeground {
	%orig;
	NSLog(@"-(void) confirmValidAuthTokenOnAppForeground");
}

-(void) setAbTestController:(id) {
	%orig;
	NSLog(@"-(void) setAbTestController:(id)");
}

-(id) largeSpikeBatteryTracker {
	%orig;
	NSLog(@"-(id) largeSpikeBatteryTracker");
}

-(void) setupLargeSpikeBatteryTracker {
	%orig;
	NSLog(@"-(void) setupLargeSpikeBatteryTracker");
}

-(void) setLargeSpikeBatteryTracker:(id) {
	%orig;
	NSLog(@"-(void) setLargeSpikeBatteryTracker:(id)");
}

-(id) smallSpikeBatteryTracker {
	%orig;
	NSLog(@"-(id) smallSpikeBatteryTracker");
}

-(void) setupSmallSpikeBatteryTracker {
	%orig;
	NSLog(@"-(void) setupSmallSpikeBatteryTracker");
}

-(void) setSmallSpikeBatteryTracker:(id) {
	%orig;
	NSLog(@"-(void) setSmallSpikeBatteryTracker:(id)");
}

-(void) setSigningInInProgress:(bool) {
	%orig;
	NSLog(@"-(void) setSigningInInProgress:(bool)");
}

-(void) loginUIDidComplete {
	%orig;
	NSLog(@"-(void) loginUIDidComplete");
}

-(bool) isShowingNetworkConnectivityAlert {
	%orig;
	NSLog(@"-(bool) isShowingNetworkConnectivityAlert");
}

-(id) urlForSkipLimitAlert:(bool) {
	%orig;
	NSLog(@"-(id) urlForSkipLimitAlert:(bool)");
}

-(id) showAlertWithMessage:(id) sendToWatch:(bool) {
	%orig;
	NSLog(@"-(id) showAlertWithMessage:(id) sendToWatch:(bool)");
}

-(id) maintenanceModeAlertController {
	%orig;
	NSLog(@"-(id) maintenanceModeAlertController");
}

-(void) setMaintenanceModeAlertController:(id) {
	%orig;
	NSLog(@"-(void) setMaintenanceModeAlertController:(id)");
}

-(id) showAlertWithMessage:(id) confirmAction:(id) sendToWatch:(?) {
	%orig;
	NSLog(@"-(id) showAlertWithMessage:(id) confirmAction:(id) sendToWatch:(?)");
}

-(id) retryDelegate {
	%orig;
	NSLog(@"-(id) retryDelegate");
}

-(void) setRetryAlertController:(id) {
	%orig;
	NSLog(@"-(void) setRetryAlertController:(id)");
}

-(bool) showingSubscriptionExpired {
	%orig;
	NSLog(@"-(bool) showingSubscriptionExpired");
}

-(void) whyAdsPressed:(bool) {
	%orig;
	NSLog(@"-(void) whyAdsPressed:(bool)");
}

-(unsigned long long) supportedInterfaceOrientation {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientation");
}

-(void) selectController:(id) forcePopToRoot:(bool) {
	%orig;
	NSLog(@"-(void) selectController:(id) forcePopToRoot:(bool)");
}

-(id) fallbackLoadingIndicatorView {
	%orig;
	NSLog(@"-(id) fallbackLoadingIndicatorView");
}

-(void) setFallbackLoadingIndicatorView:(id) {
	%orig;
	NSLog(@"-(void) setFallbackLoadingIndicatorView:(id)");
}

-(void) webAlertView:(id) wasDismissed:(id) command:(id) {
	%orig;
	NSLog(@"-(void) webAlertView:(id) wasDismissed:(id) command:(id)");
}

-(void) addUIEventObserver:(id) {
	%orig;
	NSLog(@"-(void) addUIEventObserver:(id)");
}

-(void) removeUIEventObserver:(id) {
	%orig;
	NSLog(@"-(void) removeUIEventObserver:(id)");
}

-(bool) containsEvent:(id) withTouchEndingOutsideView:(id) {
	%orig;
	NSLog(@"-(bool) containsEvent:(id) withTouchEndingOutsideView:(id)");
}

-(bool) willDeleteOfflineStationsOnLogout {
	%orig;
	NSLog(@"-(bool) willDeleteOfflineStationsOnLogout");
}

-(void) setupIntegrationTesting {
	%orig;
	NSLog(@"-(void) setupIntegrationTesting");
}

-(void) resetIntegrationTestingData {
	%orig;
	NSLog(@"-(void) resetIntegrationTestingData");
}

-(void) handleIntegrationTestingEnvironment {
	%orig;
	NSLog(@"-(void) handleIntegrationTestingEnvironment");
}

-(void) enableDevModeManagerForIntegrationTest {
	%orig;
	NSLog(@"-(void) enableDevModeManagerForIntegrationTest");
}

-(void) radioIsActiveDidChange {
	%orig;
	NSLog(@"-(void) radioIsActiveDidChange");
}

-(void) applyBadgeNumberToSettingsControl:(int) {
	%orig;
	NSLog(@"-(void) applyBadgeNumberToSettingsControl:(int)");
}

-(void) array:(id) didChangeWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didChangeWithUpdate:(id)");
}

-(bool) urlWillBeOpened {
	%orig;
	NSLog(@"-(bool) urlWillBeOpened");
}

-(void) logoutRequested {
	%orig;
	NSLog(@"-(void) logoutRequested");
}

-(void) showAbout {
	%orig;
	NSLog(@"-(void) showAbout");
}

-(id) getCurrentPresentedController {
	%orig;
	NSLog(@"-(id) getCurrentPresentedController");
}

-(void) applicationRequestsDisplayOfModalViewController:(id) animated:(bool) completion:(id) transition:(?) {
	%orig;
	NSLog(@"-(void) applicationRequestsDisplayOfModalViewController:(id) animated:(bool) completion:(id) transition:(?)");
}

-(void) applicationRequestsDismissalOfModalViewControllerAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) applicationRequestsDismissalOfModalViewControllerAnimated:(bool) completion:(id)");
}

-(void) selectController:(id) {
	%orig;
	NSLog(@"-(void) selectController:(id)");
}

-(void) showCreateStation {
	%orig;
	NSLog(@"-(void) showCreateStation");
}

-(void) showSearch {
	%orig;
	NSLog(@"-(void) showSearch");
}

-(void) recreateModalAnimationSerializer {
	%orig;
	NSLog(@"-(void) recreateModalAnimationSerializer");
}

-(void) radioUserSubscriptionStateDidChange {
	%orig;
	NSLog(@"-(void) radioUserSubscriptionStateDidChange");
}

-(void) setSupportedInterfaceOrientationForPhone:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSupportedInterfaceOrientationForPhone:(unsigned long long)");
}

-(void) setCurrModalController:(id) {
	%orig;
	NSLog(@"-(void) setCurrModalController:(id)");
}

-(bool) didLaunchWithLandingPage {
	%orig;
	NSLog(@"-(bool) didLaunchWithLandingPage");
}

-(bool) didLaunchWithBrowsePage {
	%orig;
	NSLog(@"-(bool) didLaunchWithBrowsePage");
}

-(bool) hasDeferredInterstitial {
	%orig;
	NSLog(@"-(bool) hasDeferredInterstitial");
}

-(void) setHasDeferredInterstitial:(bool) {
	%orig;
	NSLog(@"-(void) setHasDeferredInterstitial:(bool)");
}

-(bool) uiWasInitialized {
	%orig;
	NSLog(@"-(bool) uiWasInitialized");
}

-(id) topLevelView {
	%orig;
	NSLog(@"-(id) topLevelView");
}

-(void) setTopLevelView:(id) {
	%orig;
	NSLog(@"-(void) setTopLevelView:(id)");
}

-(id) modalAnimationSerializer {
	%orig;
	NSLog(@"-(id) modalAnimationSerializer");
}

-(bool) signingInInProgress {
	%orig;
	NSLog(@"-(bool) signingInInProgress");
}

-(id) trialWaitAlertController {
	%orig;
	NSLog(@"-(id) trialWaitAlertController");
}

-(void) setTrialWaitAlertController:(id) {
	%orig;
	NSLog(@"-(void) setTrialWaitAlertController:(id)");
}

-(id) retryAlertController {
	%orig;
	NSLog(@"-(id) retryAlertController");
}

-(bool) isRestoringSubscription {
	%orig;
	NSLog(@"-(bool) isRestoringSubscription");
}

-(void) setIsRestoringSubscription:(bool) {
	%orig;
	NSLog(@"-(void) setIsRestoringSubscription:(bool)");
}

-(id) appStartedAt {
	%orig;
	NSLog(@"-(id) appStartedAt");
}

-(id) streamViolationView {
	%orig;
	NSLog(@"-(id) streamViolationView");
}

-(void) setStreamViolationView:(id) {
	%orig;
	NSLog(@"-(void) setStreamViolationView:(id)");
}

-(id) streamViolationAlert {
	%orig;
	NSLog(@"-(id) streamViolationAlert");
}

-(void) setStreamViolationAlert:(id) {
	%orig;
	NSLog(@"-(void) setStreamViolationAlert:(id)");
}

-(id) extensionRadioObserver {
	%orig;
	NSLog(@"-(id) extensionRadioObserver");
}

-(id) hockeyAppAuthenticationController {
	%orig;
	NSLog(@"-(id) hockeyAppAuthenticationController");
}

-(void) setHockeyAppAuthenticationController:(id) {
	%orig;
	NSLog(@"-(void) setHockeyAppAuthenticationController:(id)");
}

-(void) setAutomationSuite:(id) {
	%orig;
	NSLog(@"-(void) setAutomationSuite:(id)");
}

-(id) openPandoraURLHandler {
	%orig;
	NSLog(@"-(id) openPandoraURLHandler");
}

-(void) setUniversalLinkHandler:(id) {
	%orig;
	NSLog(@"-(void) setUniversalLinkHandler:(id)");
}

-(void) setIsShowingNetworkConnectivityAlert:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingNetworkConnectivityAlert:(bool)");
}

-(void) dismissVisibleOverlayViews {
	%orig;
	NSLog(@"-(void) dismissVisibleOverlayViews");
}

-(bool) shouldPlayViolationWarning {
	%orig;
	NSLog(@"-(bool) shouldPlayViolationWarning");
}

-(void) deepLinkingHandlerRequestOpenURL:(id) {
	%orig;
	NSLog(@"-(void) deepLinkingHandlerRequestOpenURL:(id)");
}

-(void) setupDevTestModeDataSource {
	%orig;
	NSLog(@"-(void) setupDevTestModeDataSource");
}

-(bool) isClientOffline {
	%orig;
	NSLog(@"-(bool) isClientOffline");
}

-(id) modalApplicationPreferredContentSizeCategory {
	%orig;
	NSLog(@"-(id) modalApplicationPreferredContentSizeCategory");
}

-(void) setAppPresenter:(id) {
	%orig;
	NSLog(@"-(void) setAppPresenter:(id)");
}

-(id) appPresenter {
	%orig;
	NSLog(@"-(id) appPresenter");
}

-(void) beginRuntimeStartup {
	%orig;
	NSLog(@"-(void) beginRuntimeStartup");
}

-(id) modalApplicationWindows {
	%orig;
	NSLog(@"-(id) modalApplicationWindows");
}

-(id) modalApplicationKeyWindow {
	%orig;
	NSLog(@"-(id) modalApplicationKeyWindow");
}

-(void) handleException:(id) withMetadata:(id) {
	%orig;
	NSLog(@"-(void) handleException:(id) withMetadata:(id)");
}

-(void) showSessionStartDialog {
	%orig;
	NSLog(@"-(void) showSessionStartDialog");
}

-(void) audioOutputVolumeChanged:(id) dueToChangeReason:(id) {
	%orig;
	NSLog(@"-(void) audioOutputVolumeChanged:(id) dueToChangeReason:(id)");
}

-(bool) isPlayingVideoAd {
	%orig;
	NSLog(@"-(bool) isPlayingVideoAd");
}

-(void) radioRequestsNetworkActivityIndicatorVisible:(bool) {
	%orig;
	NSLog(@"-(void) radioRequestsNetworkActivityIndicatorVisible:(bool)");
}

-(void) alertMaintenanceMode {
	%orig;
	NSLog(@"-(void) alertMaintenanceMode");
}

-(void) alertAccountSuspended {
	%orig;
	NSLog(@"-(void) alertAccountSuspended");
}

-(void) alertUnsupportedFunctionality {
	%orig;
	NSLog(@"-(void) alertUnsupportedFunctionality");
}

-(void) alertRetryWithRequest:(id) delegate:(id) {
	%orig;
	NSLog(@"-(void) alertRetryWithRequest:(id) delegate:(id)");
}

-(void) alertNetworkConnectionUnavailable {
	%orig;
	NSLog(@"-(void) alertNetworkConnectionUnavailable");
}

-(bool) isPandoraPremiumSubscriber {
	%orig;
	NSLog(@"-(bool) isPandoraPremiumSubscriber");
}

-(void) alertStationExpired:(id) {
	%orig;
	NSLog(@"-(void) alertStationExpired:(id)");
}

-(void) alertStationHasNoTracks {
	%orig;
	NSLog(@"-(void) alertStationHasNoTracks");
}

-(double) secondsSinceDisplayAdRefresh {
	%orig;
	NSLog(@"-(double) secondsSinceDisplayAdRefresh");
}

-(bool) readyForVideoAdDisplay {
	%orig;
	NSLog(@"-(bool) readyForVideoAdDisplay");
}

-(void) alertTrackNotFound {
	%orig;
	NSLog(@"-(void) alertTrackNotFound");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(long long) modalApplicationState {
	%orig;
	NSLog(@"-(long long) modalApplicationState");
}

-(bool) radioAlertIsVisible:(id) {
	%orig;
	NSLog(@"-(bool) radioAlertIsVisible:(id)");
}

-(void) radioRequestsOpenURL:(id) {
	%orig;
	NSLog(@"-(void) radioRequestsOpenURL:(id)");
}

-(id) radioRequestsAlertWithTitle:(id) message:(id) cancelButtonTitle:(id) confirmationButtonTitle:(id) confirmationBlock:(id) {
	%orig;
	NSLog(@"-(id) radioRequestsAlertWithTitle:(id) message:(id) cancelButtonTitle:(id) confirmationButtonTitle:(id) confirmationBlock:(id)");
}

-(long long) modalApplicationStatusBarOrientation {
	%orig;
	NSLog(@"-(long long) modalApplicationStatusBarOrientation");
}

-(id) offlineManager {
	%orig;
	NSLog(@"-(id) offlineManager");
}

-(void) streamViolationResolved {
	%orig;
	NSLog(@"-(void) streamViolationResolved");
}

-(void) simultaneousStreamDetected:(id) withDelegate:(id) {
	%orig;
	NSLog(@"-(void) simultaneousStreamDetected:(id) withDelegate:(id)");
}

-(void) radioRuntimeDidStart {
	%orig;
	NSLog(@"-(void) radioRuntimeDidStart");
}

-(void) radioStationListSynced {
	%orig;
	NSLog(@"-(void) radioStationListSynced");
}

-(void) radioNetworkDidUpdate {
	%orig;
	NSLog(@"-(void) radioNetworkDidUpdate");
}

-(void) radioUsernameDidChange {
	%orig;
	NSLog(@"-(void) radioUsernameDidChange");
}

-(void) radioUserReceivesVisualAdsDidChange {
	%orig;
	NSLog(@"-(void) radioUserReceivesVisualAdsDidChange");
}

-(void) radioUserSettingsDidChange {
	%orig;
	NSLog(@"-(void) radioUserSettingsDidChange");
}

-(void) radioUserAccountMessageUrlDidChange {
	%orig;
	NSLog(@"-(void) radioUserAccountMessageUrlDidChange");
}

-(void) loginDidComplete:(id) {
	%orig;
	NSLog(@"-(void) loginDidComplete:(id)");
}

-(bool) shouldStartAudioPlaybackOnInit {
	%orig;
	NSLog(@"-(bool) shouldStartAudioPlaybackOnInit");
}

-(bool) hasAvailableEndpointForServingPlayableContent {
	%orig;
	NSLog(@"-(bool) hasAvailableEndpointForServingPlayableContent");
}

-(void) batchDeleteObjectsMarkedForLocalDeletionConditionally {
	%orig;
	NSLog(@"-(void) batchDeleteObjectsMarkedForLocalDeletionConditionally");
}

-(void) logoutDidComplete:(id) {
	%orig;
	NSLog(@"-(void) logoutDidComplete:(id)");
}

-(bool) shouldStartAudioPlayback {
	%orig;
	NSLog(@"-(bool) shouldStartAudioPlayback");
}

-(void) failedSkipAttemptInBackground {
	%orig;
	NSLog(@"-(void) failedSkipAttemptInBackground");
}

-(void) failedSkipAttemptOnThumbsDownInBackground {
	%orig;
	NSLog(@"-(void) failedSkipAttemptOnThumbsDownInBackground");
}

-(void) alertStationLimitReachedForArtistAudioMessage {
	%orig;
	NSLog(@"-(void) alertStationLimitReachedForArtistAudioMessage");
}

-(void) alertStationLimitReached {
	%orig;
	NSLog(@"-(void) alertStationLimitReached");
}

-(void) radioDidHandleException:(id) metadata:(id) {
	%orig;
	NSLog(@"-(void) radioDidHandleException:(id) metadata:(id)");
}

-(void) reauthorizeFacebookRequested {
	%orig;
	NSLog(@"-(void) reauthorizeFacebookRequested");
}

-(void) alertSubscriptionRenewalRequest {
	%orig;
	NSLog(@"-(void) alertSubscriptionRenewalRequest");
}

-(void) alertPremiumSubscriptionExpiration {
	%orig;
	NSLog(@"-(void) alertPremiumSubscriptionExpiration");
}

-(void) alertTrialExpiration {
	%orig;
	NSLog(@"-(void) alertTrialExpiration");
}

-(id) accessoryIntegrationReportingInfo {
	%orig;
	NSLog(@"-(id) accessoryIntegrationReportingInfo");
}

-(void) showErrorViewForReason:(long long) {
	%orig;
	NSLog(@"-(void) showErrorViewForReason:(long long)");
}

-(bool) canEnterOfflineMode {
	%orig;
	NSLog(@"-(bool) canEnterOfflineMode");
}

-(void) alertLicensingRestriction {
	%orig;
	NSLog(@"-(void) alertLicensingRestriction");
}

-(void) hideErrorView {
	%orig;
	NSLog(@"-(void) hideErrorView");
}

-(void) showSignIn {
	%orig;
	NSLog(@"-(void) showSignIn");
}

-(void) alertAudioFailure:(id) {
	%orig;
	NSLog(@"-(void) alertAudioFailure:(id)");
}

-(void) clearAudioFailure:(id) {
	%orig;
	NSLog(@"-(void) clearAudioFailure:(id)");
}

-(void) alertOutOfSkipsOnThumbDown {
	%orig;
	NSLog(@"-(void) alertOutOfSkipsOnThumbDown");
}

-(void) alertOutOfSkips {
	%orig;
	NSLog(@"-(void) alertOutOfSkips");
}

-(void) alertSkipsLicensingRestrictionWithThumbDown:(bool) {
	%orig;
	NSLog(@"-(void) alertSkipsLicensingRestrictionWithThumbDown:(bool)");
}

-(void) alertGopaSubscriptionExpiration:(long long) {
	%orig;
	NSLog(@"-(void) alertGopaSubscriptionExpiration:(long long)");
}

-(void) alertPlusSubscriptionExpiration {
	%orig;
	NSLog(@"-(void) alertPlusSubscriptionExpiration");
}

-(void) alertIneligibleGopa {
	%orig;
	NSLog(@"-(void) alertIneligibleGopa");
}

-(void) alertIneligibleIsPremiumGopa {
	%orig;
	NSLog(@"-(void) alertIneligibleIsPremiumGopa");
}

-(void) alertBadLogin {
	%orig;
	NSLog(@"-(void) alertBadLogin");
}

-(void) alertPasswordSent {
	%orig;
	NSLog(@"-(void) alertPasswordSent");
}

-(void) alertEmailAddressNotFound {
	%orig;
	NSLog(@"-(void) alertEmailAddressNotFound");
}

-(void) alertEditingSharedStation {
	%orig;
	NSLog(@"-(void) alertEditingSharedStation");
}

-(void) alertDeleteLastSeed {
	%orig;
	NSLog(@"-(void) alertDeleteLastSeed");
}

-(void) alertSelectAtLeastOneStationForQuickMix {
	%orig;
	NSLog(@"-(void) alertSelectAtLeastOneStationForQuickMix");
}

-(void) alertSwitchAudioType:(id) {
	%orig;
	NSLog(@"-(void) alertSwitchAudioType:(id)");
}

-(void) alertVideoTestMode {
	%orig;
	NSLog(@"-(void) alertVideoTestMode");
}

-(void) alertTestModeOn:(id) {
	%orig;
	NSLog(@"-(void) alertTestModeOn:(id)");
}

-(void) alertTestModeOff {
	%orig;
	NSLog(@"-(void) alertTestModeOff");
}

-(void) alertTestModeError:(id) {
	%orig;
	NSLog(@"-(void) alertTestModeError:(id)");
}

-(void) alertTestModeMessage:(id) {
	%orig;
	NSLog(@"-(void) alertTestModeMessage:(id)");
}

-(void) alertCurrentEnvironment:(id) {
	%orig;
	NSLog(@"-(void) alertCurrentEnvironment:(id)");
}

-(void) alertVideoDidFinishPreloading:(bool) {
	%orig;
	NSLog(@"-(void) alertVideoDidFinishPreloading:(bool)");
}

-(void) alertVideoDidFailPreloading {
	%orig;
	NSLog(@"-(void) alertVideoDidFailPreloading");
}

-(bool) modalApplicationCanOpenURL:(id) {
	%orig;
	NSLog(@"-(bool) modalApplicationCanOpenURL:(id)");
}

-(id) backgroundSessionCompletionHandler {
	%orig;
	NSLog(@"-(id) backgroundSessionCompletionHandler");
}

-(void) setBackgroundSessionCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundSessionCompletionHandler:(id)");
}

-(void) updateDevicePropertiesInCrashReporter {
	%orig;
	NSLog(@"-(void) updateDevicePropertiesInCrashReporter");
}

-(void) deviceOrientationDidChange:(id) {
	%orig;
	NSLog(@"-(void) deviceOrientationDidChange:(id)");
}

-(void) setRetryDelegate:(id) {
	%orig;
	NSLog(@"-(void) setRetryDelegate:(id)");
}

-(bool) isOffline {
	%orig;
	NSLog(@"-(bool) isOffline");
}

-(id) avPlayer {
	%orig;
	NSLog(@"-(id) avPlayer");
}

-(id) startupQueue {
	%orig;
	NSLog(@"-(id) startupQueue");
}

-(void) setStartupQueue:(id) {
	%orig;
	NSLog(@"-(void) setStartupQueue:(id)");
}

-(id) callObserver {
	%orig;
	NSLog(@"-(id) callObserver");
}

-(void) setCallObserver:(id) {
	%orig;
	NSLog(@"-(void) setCallObserver:(id)");
}

-(id) setupConfig {
	%orig;
	NSLog(@"-(id) setupConfig");
}

-(void) setAvPlayer:(id) {
	%orig;
	NSLog(@"-(void) setAvPlayer:(id)");
}

-(bool) appIsInBackground {
	%orig;
	NSLog(@"-(bool) appIsInBackground");
}

-(void) setAppIsInBackground:(bool) {
	%orig;
	NSLog(@"-(void) setAppIsInBackground:(bool)");
}

-(id) errorView {
	%orig;
	NSLog(@"-(id) errorView");
}

-(void) setErrorView:(id) {
	%orig;
	NSLog(@"-(void) setErrorView:(id)");
}

-(void) callObserver:(id) callChanged:(id) {
	%orig;
	NSLog(@"-(void) callObserver:(id) callChanged:(id)");
}

-(void) hideSignIn {
	%orig;
	NSLog(@"-(void) hideSignIn");
}

-(id) navigationManager {
	%orig;
	NSLog(@"-(id) navigationManager");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) window {
	%orig;
	NSLog(@"-(id) window");
}

-(bool) isActive {
	%orig;
	NSLog(@"-(bool) isActive");
}

-(unsigned long long) supportedInterfaceOrientationsForWindow:(id) {
	%orig;
	NSLog(@"-(unsigned long long) supportedInterfaceOrientationsForWindow:(id)");
}

-(id) selectedViewController {
	%orig;
	NSLog(@"-(id) selectedViewController");
}

-(void) presentModalViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) presentModalViewController:(id) animated:(bool)");
}

-(id) mainViewController {
	%orig;
	NSLog(@"-(id) mainViewController");
}

-(void) setWindow:(id) {
	%orig;
	NSLog(@"-(void) setWindow:(id)");
}

-(void) applicationDidReceiveMemoryWarning:(id) {
	%orig;
	NSLog(@"-(void) applicationDidReceiveMemoryWarning:(id)");
}

-(void) remoteControlReceivedWithEvent:(id) {
	%orig;
	NSLog(@"-(void) remoteControlReceivedWithEvent:(id)");
}

-(void) applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillResignActive:(id)");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(void) applicationWillEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) applicationWillEnterForeground:(id)");
}

-(void) applicationDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) applicationDidEnterBackground:(id)");
}

-(void) setIsActive:(bool) {
	%orig;
	NSLog(@"-(void) setIsActive:(bool)");
}

-(bool) application:(id) openURL:(id) sourceApplication:(id) annotation:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) openURL:(id) sourceApplication:(id) annotation:(id)");
}

-(bool) application:(id) openURL:(id) options:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) openURL:(id) options:(id)");
}

-(void) applicationWillTerminate:(id) {
	%orig;
	NSLog(@"-(void) applicationWillTerminate:(id)");
}

-(void) application:(id) handleIntent:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) application:(id) handleIntent:(id) completionHandler:(id)");
}

-(unsigned long long) application:(id) supportedInterfaceOrientationsForWindow:(id) {
	%orig;
	NSLog(@"-(unsigned long long) application:(id) supportedInterfaceOrientationsForWindow:(id)");
}

-(bool) application:(id) didFinishLaunchingWithOptions:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) didFinishLaunchingWithOptions:(id)");
}

-(void) application:(id) didReceiveRemoteNotification:(id) fetchCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveRemoteNotification:(id) fetchCompletionHandler:(id)");
}

-(bool) application:(id) continueUserActivity:(id) restorationHandler:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) continueUserActivity:(id) restorationHandler:(id)");
}

-(void) sendEvent:(id) {
	%orig;
	NSLog(@"-(void) sendEvent:(id)");
}

-(void) application:(id) performFetchWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) application:(id) performFetchWithCompletionHandler:(id)");
}

-(void) application:(id) handleActionWithIdentifier:(id) forRemoteNotification:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) application:(id) handleActionWithIdentifier:(id) forRemoteNotification:(id) completionHandler:(id)");
}

-(void) application:(id) handleEventsForBackgroundURLSession:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) application:(id) handleEventsForBackgroundURLSession:(id) completionHandler:(id)");
}

-(void) application:(id) didReceiveLocalNotification:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveLocalNotification:(id)");
}

-(void) application:(id) performActionForShortcutItem:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) application:(id) performActionForShortcutItem:(id) completionHandler:(id)");
}

-(void) application:(id) didFailToRegisterForRemoteNotificationsWithError:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didFailToRegisterForRemoteNotificationsWithError:(id)");
}

-(void) application:(id) didRegisterForRemoteNotificationsWithDeviceToken:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didRegisterForRemoteNotificationsWithDeviceToken:(id)");
}

-(void) beginReceivingRemoteControlEvents {
	%orig;
	NSLog(@"-(void) beginReceivingRemoteControlEvents");
}

-(void) endReceivingRemoteControlEvents {
	%orig;
	NSLog(@"-(void) endReceivingRemoteControlEvents");
}

-(void) setBackgroundTaskIdentifier:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBackgroundTaskIdentifier:(unsigned long long)");
}

-(unsigned long long) backgroundTaskIdentifier {
	%orig;
	NSLog(@"-(unsigned long long) backgroundTaskIdentifier");
}

%end

%hook PMPhoneApplicationDelegate

+(void) doAfterImplicitAnimations:(id) {
	%orig;
	NSLog(@"+(void) doAfterImplicitAnimations:(id)");
}

+(bool) navigationTimeoutBlockedByTopViewController:(id) orAdStatus:(unsigned long long) {
	%orig;
	NSLog(@"+(bool) navigationTimeoutBlockedByTopViewController:(id) orAdStatus:(unsigned long long)");
}

+(id) visibleViewControllerFromController:(id) {
	%orig;
	NSLog(@"+(id) visibleViewControllerFromController:(id)");
}

-(void) resetGlobalNavigationTimer {
	%orig;
	NSLog(@"-(void) resetGlobalNavigationTimer");
}

-(void) didTapMiniPlayer {
	%orig;
	NSLog(@"-(void) didTapMiniPlayer");
}

-(void) productUpgradeFinished {
	%orig;
	NSLog(@"-(void) productUpgradeFinished");
}

-(void) showMenuItemOfType:(long long) {
	%orig;
	NSLog(@"-(void) showMenuItemOfType:(long long)");
}

-(void) adLoader:(id) didLoadAd:(id) withUserInfo:(id) {
	%orig;
	NSLog(@"-(void) adLoader:(id) didLoadAd:(id) withUserInfo:(id)");
}

-(void) adLoaderFailedToLoadAd:(id) withUserInfo:(id) {
	%orig;
	NSLog(@"-(void) adLoaderFailedToLoadAd:(id) withUserInfo:(id)");
}

-(bool) shouldDisplayPremiumUI {
	%orig;
	NSLog(@"-(bool) shouldDisplayPremiumUI");
}

-(id) miniPlayerViewController {
	%orig;
	NSLog(@"-(id) miniPlayerViewController");
}

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(void) autoLoginDidComplete:(id) {
	%orig;
	NSLog(@"-(void) autoLoginDidComplete:(id)");
}

-(void) loadMainWindowNibWithOwner {
	%orig;
	NSLog(@"-(void) loadMainWindowNibWithOwner");
}

-(void) radioDidInitialize {
	%orig;
	NSLog(@"-(void) radioDidInitialize");
}

-(void) showSignInAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showSignInAnimated:(bool)");
}

-(void) applicationRequestsControllerInitialization {
	%orig;
	NSLog(@"-(void) applicationRequestsControllerInitialization");
}

-(void) applicationDidInitializeUserInterface {
	%orig;
	NSLog(@"-(void) applicationDidInitializeUserInterface");
}

-(void) applicationDidCompleteInitialization {
	%orig;
	NSLog(@"-(void) applicationDidCompleteInitialization");
}

-(void) applicationDidFinishInitialNavigation {
	%orig;
	NSLog(@"-(void) applicationDidFinishInitialNavigation");
}

-(id) createOpenPandoraURLHandler {
	%orig;
	NSLog(@"-(id) createOpenPandoraURLHandler");
}

-(bool) shouldNotifyObserversForURL:(id) {
	%orig;
	NSLog(@"-(bool) shouldNotifyObserversForURL:(id)");
}

-(void) applicationLogoutWasRequested {
	%orig;
	NSLog(@"-(void) applicationLogoutWasRequested");
}

-(void) onApplicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) onApplicationDidBecomeActive");
}

-(void) applicationRequestsDisplayOfModalViewController:(id) animated:(bool) completion:(id) transition:(?) {
	%orig;
	NSLog(@"-(void) applicationRequestsDisplayOfModalViewController:(id) animated:(bool) completion:(id) transition:(?)");
}

-(void) applicationRequestsDismissalOfModalViewControllerAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) applicationRequestsDismissalOfModalViewControllerAnimated:(bool) completion:(id)");
}

-(void) showCreateStation {
	%orig;
	NSLog(@"-(void) showCreateStation");
}

-(void) showSearch {
	%orig;
	NSLog(@"-(void) showSearch");
}

-(void) radioUserSubscriptionStateDidChange {
	%orig;
	NSLog(@"-(void) radioUserSubscriptionStateDidChange");
}

-(void) popToStationListTop {
	%orig;
	NSLog(@"-(void) popToStationListTop");
}

-(id) tabMenuViewController {
	%orig;
	NSLog(@"-(id) tabMenuViewController");
}

-(void) resetBottomAndTabViewControllers {
	%orig;
	NSLog(@"-(void) resetBottomAndTabViewControllers");
}

-(void) setMiniPlayerViewController:(id) {
	%orig;
	NSLog(@"-(void) setMiniPlayerViewController:(id)");
}

-(void) setTabBarViewController:(id) {
	%orig;
	NSLog(@"-(void) setTabBarViewController:(id)");
}

-(id) tabBarViewController {
	%orig;
	NSLog(@"-(id) tabBarViewController");
}

-(void) updateBottomViewVisibilityForCurrentViewController {
	%orig;
	NSLog(@"-(void) updateBottomViewVisibilityForCurrentViewController");
}

-(void) rebuildNavigationControllers {
	%orig;
	NSLog(@"-(void) rebuildNavigationControllers");
}

-(long long) selectedMenuItemType {
	%orig;
	NSLog(@"-(long long) selectedMenuItemType");
}

-(unsigned long long) indexForMenuItem:(long long) {
	%orig;
	NSLog(@"-(unsigned long long) indexForMenuItem:(long long)");
}

-(id) navigationControllerForMenuItem:(long long) {
	%orig;
	NSLog(@"-(id) navigationControllerForMenuItem:(long long)");
}

-(long long) getOfflineMenuItemType:(long long) {
	%orig;
	NSLog(@"-(long long) getOfflineMenuItemType:(long long)");
}

-(id) navigationControllerForMenuItemType:(long long) {
	%orig;
	NSLog(@"-(id) navigationControllerForMenuItemType:(long long)");
}

-(id) menuItemForNavigationController:(id) {
	%orig;
	NSLog(@"-(id) menuItemForNavigationController:(id)");
}

-(void) showMenuItem:(id) {
	%orig;
	NSLog(@"-(void) showMenuItem:(id)");
}

-(void) updateSelectedItemAppearance:(id) {
	%orig;
	NSLog(@"-(void) updateSelectedItemAppearance:(id)");
}

-(void) rebuildTabClickTrackArray {
	%orig;
	NSLog(@"-(void) rebuildTabClickTrackArray");
}

-(id) getNavigationControllers {
	%orig;
	NSLog(@"-(id) getNavigationControllers");
}

-(id) getOfflineNavigationControllers {
	%orig;
	NSLog(@"-(id) getOfflineNavigationControllers");
}

-(void) setNavigationControllers:(id) {
	%orig;
	NSLog(@"-(void) setNavigationControllers:(id)");
}

-(void) setOfflineNavigationControllers:(id) {
	%orig;
	NSLog(@"-(void) setOfflineNavigationControllers:(id)");
}

-(id) tabMenuItemsFromNavigationControllers {
	%orig;
	NSLog(@"-(id) tabMenuItemsFromNavigationControllers");
}

-(void) setTabClickTrackArray:(id) {
	%orig;
	NSLog(@"-(void) setTabClickTrackArray:(id)");
}

-(void) handleOfflineNoDiskSpace:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineNoDiskSpace:(id)");
}

-(void) handleOfflineLimitedDiskSpace:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineLimitedDiskSpace:(id)");
}

-(void) handleOfflineStationsAuthenticationWillExpire:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineStationsAuthenticationWillExpire:(id)");
}

-(void) handleOfflineStationsAuthenticationDidExpire:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineStationsAuthenticationDidExpire:(id)");
}

-(void) handleOfflineStationsHeaderPressed:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineStationsHeaderPressed:(id)");
}

-(void) handleOfflineStationsDownloadFinished:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineStationsDownloadFinished:(id)");
}

-(void) handleOfflineWillPlayAudioInterruptionMessage:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineWillPlayAudioInterruptionMessage:(id)");
}

-(void) startOrStopBluetoothStatsIfNecessary {
	%orig;
	NSLog(@"-(void) startOrStopBluetoothStatsIfNecessary");
}

-(void) handleOnePlaylistFinishedPlaying:(id) {
	%orig;
	NSLog(@"-(void) handleOnePlaylistFinishedPlaying:(id)");
}

-(void) handleStationExpired:(id) {
	%orig;
	NSLog(@"-(void) handleStationExpired:(id)");
}

-(void) updateBadgeWithNotification:(id) {
	%orig;
	NSLog(@"-(void) updateBadgeWithNotification:(id)");
}

-(void) checkDeferredInterstitial {
	%orig;
	NSLog(@"-(void) checkDeferredInterstitial");
}

-(void) handleOfflineExceededAllowedLimitOfDevices {
	%orig;
	NSLog(@"-(void) handleOfflineExceededAllowedLimitOfDevices");
}

-(void) observeOfflineNotifications {
	%orig;
	NSLog(@"-(void) observeOfflineNotifications");
}

-(id) publishTimer {
	%orig;
	NSLog(@"-(id) publishTimer");
}

-(void) publishTabClickTracking {
	%orig;
	NSLog(@"-(void) publishTabClickTracking");
}

-(void) setPublishTimer:(id) {
	%orig;
	NSLog(@"-(void) setPublishTimer:(id)");
}

-(id) cachedTabBadgeNumbers {
	%orig;
	NSLog(@"-(id) cachedTabBadgeNumbers");
}

-(void) checkForCachedTabBadgeNumberForTabTag:(long long) {
	%orig;
	NSLog(@"-(void) checkForCachedTabBadgeNumberForTabTag:(long long)");
}

-(void) setCachedTabBadgeNumbers:(id) {
	%orig;
	NSLog(@"-(void) setCachedTabBadgeNumbers:(id)");
}

-(void) updateForRadioActiveStation {
	%orig;
	NSLog(@"-(void) updateForRadioActiveStation");
}

-(void) handleOfflineChanged:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineChanged:(id)");
}

-(bool) disableNextInterstialAd {
	%orig;
	NSLog(@"-(bool) disableNextInterstialAd");
}

-(void) setDisableNextInterstialAd:(bool) {
	%orig;
	NSLog(@"-(void) setDisableNextInterstialAd:(bool)");
}

-(void) hideErrorViewIfShownForReason:(long long) {
	%orig;
	NSLog(@"-(void) hideErrorViewIfShownForReason:(long long)");
}

-(bool) canShowInterstitialAnnouncement {
	%orig;
	NSLog(@"-(bool) canShowInterstitialAnnouncement");
}

-(void) addServerFastSwitcherButton {
	%orig;
	NSLog(@"-(void) addServerFastSwitcherButton");
}

-(void) setShowingSignInView:(bool) {
	%orig;
	NSLog(@"-(void) setShowingSignInView:(bool)");
}

-(bool) showingSignInView {
	%orig;
	NSLog(@"-(bool) showingSignInView");
}

-(bool) shouldPresentControllerBeneathPresentedController:(id) {
	%orig;
	NSLog(@"-(bool) shouldPresentControllerBeneathPresentedController:(id)");
}

-(id) logOutAlertTitle {
	%orig;
	NSLog(@"-(id) logOutAlertTitle");
}

-(void) showInterstitialAd {
	%orig;
	NSLog(@"-(void) showInterstitialAd");
}

-(id) updateNowPlayingBackControllerTimer {
	%orig;
	NSLog(@"-(id) updateNowPlayingBackControllerTimer");
}

-(bool) shouldNavigateToNowPlayingWhenActive {
	%orig;
	NSLog(@"-(bool) shouldNavigateToNowPlayingWhenActive");
}

-(void) setShouldNavigateToNowPlayingWhenActive:(bool) {
	%orig;
	NSLog(@"-(void) setShouldNavigateToNowPlayingWhenActive:(bool)");
}

-(void) resetUpdateNowPlayingBackControllerTimer {
	%orig;
	NSLog(@"-(void) resetUpdateNowPlayingBackControllerTimer");
}

-(void) setCanShowInterstitialAnnouncement:(bool) {
	%orig;
	NSLog(@"-(void) setCanShowInterstitialAnnouncement:(bool)");
}

-(void) requestInterstitialAd:(id) withRuntimeConditions:(bool) freshAppLaunch:(bool) {
	%orig;
	NSLog(@"-(void) requestInterstitialAd:(id) withRuntimeConditions:(bool) freshAppLaunch:(bool)");
}

-(id) tabClickTrackArray {
	%orig;
	NSLog(@"-(id) tabClickTrackArray");
}

-(bool) isShowingNonPremiumNowPlayingViewController {
	%orig;
	NSLog(@"-(bool) isShowingNonPremiumNowPlayingViewController");
}

-(void) updateSwipeToCloseGesture:(id) {
	%orig;
	NSLog(@"-(void) updateSwipeToCloseGesture:(id)");
}

-(void) updateBottomViewVisibilityForViewController:(id) {
	%orig;
	NSLog(@"-(void) updateBottomViewVisibilityForViewController:(id)");
}

-(void) updateNavigationBar:(id) {
	%orig;
	NSLog(@"-(void) updateNavigationBar:(id)");
}

-(void) updateMenuButtonHaxorz:(id) {
	%orig;
	NSLog(@"-(void) updateMenuButtonHaxorz:(id)");
}

-(void) setUserDidScreenEdgeSwipeToClose:(bool) {
	%orig;
	NSLog(@"-(void) setUserDidScreenEdgeSwipeToClose:(bool)");
}

-(void) updateFeedViewController:(id) {
	%orig;
	NSLog(@"-(void) updateFeedViewController:(id)");
}

-(bool) shouldDisableInteractivePopGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) shouldDisableInteractivePopGestureRecognizer:(id)");
}

-(void) updateNowPlayingBackStack:(id) viewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) updateNowPlayingBackStack:(id) viewController:(id) animated:(bool)");
}

-(id) updateNowPlayingBackControllerTimeoutOverrideInSeconds {
	%orig;
	NSLog(@"-(id) updateNowPlayingBackControllerTimeoutOverrideInSeconds");
}

-(double) updateNowPlayingBackControllerTimeout {
	%orig;
	NSLog(@"-(double) updateNowPlayingBackControllerTimeout");
}

-(void) setNowPlayingBackDestinationToStationList {
	%orig;
	NSLog(@"-(void) setNowPlayingBackDestinationToStationList");
}

-(void) setUpdateNowPlayingBackControllerTimer:(id) {
	%orig;
	NSLog(@"-(void) setUpdateNowPlayingBackControllerTimer:(id)");
}

-(void) addMenuButtonToViewController:(id) {
	%orig;
	NSLog(@"-(void) addMenuButtonToViewController:(id)");
}

-(long long) nowplayingBackMenu {
	%orig;
	NSLog(@"-(long long) nowplayingBackMenu");
}

-(bool) shouldHideBottomViewForViewController:(id) {
	%orig;
	NSLog(@"-(bool) shouldHideBottomViewForViewController:(id)");
}

-(id) interactivePopGestureRecognizerOptOutList {
	%orig;
	NSLog(@"-(id) interactivePopGestureRecognizerOptOutList");
}

-(id) nowPlayingButtonDelegate {
	%orig;
	NSLog(@"-(id) nowPlayingButtonDelegate");
}

-(void) updateForRadioInNowPlayingAnimated:(bool) {
	%orig;
	NSLog(@"-(void) updateForRadioInNowPlayingAnimated:(bool)");
}

-(id) viewControllerForMenuItem:(long long) {
	%orig;
	NSLog(@"-(id) viewControllerForMenuItem:(long long)");
}

-(id) navigationControllers {
	%orig;
	NSLog(@"-(id) navigationControllers");
}

-(id) offlineNavigationControllers {
	%orig;
	NSLog(@"-(id) offlineNavigationControllers");
}

-(void) setNowplayingBackMenu:(long long) {
	%orig;
	NSLog(@"-(void) setNowplayingBackMenu:(long long)");
}

-(long long) menuItemIndex:(id) {
	%orig;
	NSLog(@"-(long long) menuItemIndex:(id)");
}

-(long long) menuItemToPersistenceTabBarButton:(long long) {
	%orig;
	NSLog(@"-(long long) menuItemToPersistenceTabBarButton:(long long)");
}

-(void) updateBadgeCount {
	%orig;
	NSLog(@"-(void) updateBadgeCount");
}

-(void) updateBadge:(bool) forMenuPandoraItemType:(long long) {
	%orig;
	NSLog(@"-(void) updateBadge:(bool) forMenuPandoraItemType:(long long)");
}

-(void) showSettingsSubSetting:(long long) {
	%orig;
	NSLog(@"-(void) showSettingsSubSetting:(long long)");
}

-(id) offlineNavigationControllerForMenuItem:(long long) {
	%orig;
	NSLog(@"-(id) offlineNavigationControllerForMenuItem:(long long)");
}

-(id) offlineViewControllerForMenuItem:(long long) {
	%orig;
	NSLog(@"-(id) offlineViewControllerForMenuItem:(long long)");
}

-(void) updateBottomNavigationItems {
	%orig;
	NSLog(@"-(void) updateBottomNavigationItems");
}

-(void) userDidRequestNowPlaying {
	%orig;
	NSLog(@"-(void) userDidRequestNowPlaying");
}

-(void) removeGlobalNavigationTimer {
	%orig;
	NSLog(@"-(void) removeGlobalNavigationTimer");
}

-(void) handleGlobalNavigationTimeout {
	%orig;
	NSLog(@"-(void) handleGlobalNavigationTimeout");
}

-(double) globalNavigationTimeoutInSeconds {
	%orig;
	NSLog(@"-(double) globalNavigationTimeoutInSeconds");
}

-(void) setGlobalNavigationTimer:(id) {
	%orig;
	NSLog(@"-(void) setGlobalNavigationTimer:(id)");
}

-(id) globalNavigationTimeoutOverrideInSeconds {
	%orig;
	NSLog(@"-(id) globalNavigationTimeoutOverrideInSeconds");
}

-(id) globalNavigationTimer {
	%orig;
	NSLog(@"-(id) globalNavigationTimer");
}

-(void) setBluetoothStats:(id) {
	%orig;
	NSLog(@"-(void) setBluetoothStats:(id)");
}

-(id) bluetoothStats {
	%orig;
	NSLog(@"-(id) bluetoothStats");
}

-(void) menuViewController:(id) showSettingsSubSetting:(long long) indexForSettingsItem:(unsigned long long) {
	%orig;
	NSLog(@"-(void) menuViewController:(id) showSettingsSubSetting:(long long) indexForSettingsItem:(unsigned long long)");
}

-(void) didTapWhyAd {
	%orig;
	NSLog(@"-(void) didTapWhyAd");
}

-(void) showServerList {
	%orig;
	NSLog(@"-(void) showServerList");
}

-(void) reloadTabs {
	%orig;
	NSLog(@"-(void) reloadTabs");
}

-(void) popAllNavigationControllers {
	%orig;
	NSLog(@"-(void) popAllNavigationControllers");
}

-(void) sendSelector:(SEL) toOwnerOfController:(id) {
	%orig;
	NSLog(@"-(void) sendSelector:(SEL) toOwnerOfController:(id)");
}

-(void) teachMarkWasDismissedByUser:(long long) {
	%orig;
	NSLog(@"-(void) teachMarkWasDismissedByUser:(long long)");
}

-(void) setUpdateNowPlayingBackControllerTimeoutOverrideInSeconds:(id) {
	%orig;
	NSLog(@"-(void) setUpdateNowPlayingBackControllerTimeoutOverrideInSeconds:(id)");
}

-(void) accountMessageDismissedRequestDidFinish:(id) {
	%orig;
	NSLog(@"-(void) accountMessageDismissedRequestDidFinish:(id)");
}

-(void) accountMessageDismissedRequest:(id) failedWithErrorCode:(long long) {
	%orig;
	NSLog(@"-(void) accountMessageDismissedRequest:(id) failedWithErrorCode:(long long)");
}

-(void) userSubscriptionStateDidChange {
	%orig;
	NSLog(@"-(void) userSubscriptionStateDidChange");
}

-(void) userDidExitPremiumAccess {
	%orig;
	NSLog(@"-(void) userDidExitPremiumAccess");
}

-(id) tabBarItemsFromNavigationControllers {
	%orig;
	NSLog(@"-(id) tabBarItemsFromNavigationControllers");
}

-(long long) menuItemTypeAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(long long) menuItemTypeAtIndex:(unsigned long long)");
}

-(void) setGlobalNavigationTimeoutOverrideInSeconds:(id) {
	%orig;
	NSLog(@"-(void) setGlobalNavigationTimeoutOverrideInSeconds:(id)");
}

-(bool) nowplayingInNavigationStack {
	%orig;
	NSLog(@"-(bool) nowplayingInNavigationStack");
}

-(bool) userDidScreenEdgeSwipeToClose {
	%orig;
	NSLog(@"-(bool) userDidScreenEdgeSwipeToClose");
}

-(id) nowPlayingBarButton {
	%orig;
	NSLog(@"-(id) nowPlayingBarButton");
}

-(void) setNowPlayingBarButton:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingBarButton:(id)");
}

-(void) setNowPlayingButtonDelegate:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingButtonDelegate:(id)");
}

-(void) setTabMenuViewController:(id) {
	%orig;
	NSLog(@"-(void) setTabMenuViewController:(id)");
}

-(void) didReceiveAudioRouteChangeNotification:(id) {
	%orig;
	NSLog(@"-(void) didReceiveAudioRouteChangeNotification:(id)");
}

-(bool) isPlayingVideoAd {
	%orig;
	NSLog(@"-(bool) isPlayingVideoAd");
}

-(void) radioActiveStationDidChange {
	%orig;
	NSLog(@"-(void) radioActiveStationDidChange");
}

-(void) radioCreateStationDidFail {
	%orig;
	NSLog(@"-(void) radioCreateStationDidFail");
}

-(void) radioActiveStationWasDeleted:(id) {
	%orig;
	NSLog(@"-(void) radioActiveStationWasDeleted:(id)");
}

-(void) radioCreateReturnedActiveStation {
	%orig;
	NSLog(@"-(void) radioCreateReturnedActiveStation");
}

-(void) radioAuthStatusDidChange {
	%orig;
	NSLog(@"-(void) radioAuthStatusDidChange");
}

-(void) radioShowingAccessoryConnectionDidChange {
	%orig;
	NSLog(@"-(void) radioShowingAccessoryConnectionDidChange");
}

-(void) radioRuntimeDidStart {
	%orig;
	NSLog(@"-(void) radioRuntimeDidStart");
}

-(void) radioStationListSynced {
	%orig;
	NSLog(@"-(void) radioStationListSynced");
}

-(void) radioInNowPlayingWillChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingWillChange");
}

-(void) radioInNowPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioInNowPlayingDidChange");
}

-(void) loginDidComplete:(id) {
	%orig;
	NSLog(@"-(void) loginDidComplete:(id)");
}

-(void) showErrorViewForReason:(long long) {
	%orig;
	NSLog(@"-(void) showErrorViewForReason:(long long)");
}

-(bool) canEnterOfflineMode {
	%orig;
	NSLog(@"-(bool) canEnterOfflineMode");
}

-(void) hideErrorView {
	%orig;
	NSLog(@"-(void) hideErrorView");
}

-(void) alertSkipsLicensingRestrictionWithThumbDown:(bool) {
	%orig;
	NSLog(@"-(void) alertSkipsLicensingRestrictionWithThumbDown:(bool)");
}

-(bool) isNavigating {
	%orig;
	NSLog(@"-(bool) isNavigating");
}

-(bool) isOffline {
	%orig;
	NSLog(@"-(bool) isOffline");
}

-(id) selectedNavigationController {
	%orig;
	NSLog(@"-(id) selectedNavigationController");
}

-(void) setTopViewController:(id) {
	%orig;
	NSLog(@"-(void) setTopViewController:(id)");
}

-(void) menuViewController:(id) didSelectItemAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) menuViewController:(id) didSelectItemAtIndex:(unsigned long long)");
}

-(unsigned long long) badgeCount {
	%orig;
	NSLog(@"-(unsigned long long) badgeCount");
}

-(void) setBadgeCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setBadgeCount:(unsigned long long)");
}

-(void) setMenuViewController:(id) {
	%orig;
	NSLog(@"-(void) setMenuViewController:(id)");
}

-(id) menuViewController {
	%orig;
	NSLog(@"-(id) menuViewController");
}

-(id) topmostViewController {
	%orig;
	NSLog(@"-(id) topmostViewController");
}

-(void) hideSignIn {
	%orig;
	NSLog(@"-(void) hideSignIn");
}

-(void) setIsNavigating:(bool) {
	%orig;
	NSLog(@"-(void) setIsNavigating:(bool)");
}

-(void) updateMenuItems {
	%orig;
	NSLog(@"-(void) updateMenuItems");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) topViewController {
	%orig;
	NSLog(@"-(id) topViewController");
}

-(id) selectedViewController {
	%orig;
	NSLog(@"-(id) selectedViewController");
}

-(void) navigationController:(id) willShowViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) navigationController:(id) willShowViewController:(id) animated:(bool)");
}

-(void) navigationController:(id) didShowViewController:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) navigationController:(id) didShowViewController:(id) animated:(bool)");
}

-(id) navigationController:(id) animationControllerForOperation:(long long) fromViewController:(id) toViewController:(id) {
	%orig;
	NSLog(@"-(id) navigationController:(id) animationControllerForOperation:(long long) fromViewController:(id) toViewController:(id)");
}

-(id) mainViewController {
	%orig;
	NSLog(@"-(id) mainViewController");
}

-(void) applicationWillEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) applicationWillEnterForeground:(id)");
}

-(void) applicationDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) applicationDidEnterBackground:(id)");
}

-(bool) application:(id) openURL:(id) options:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) openURL:(id) options:(id)");
}

-(bool) application:(id) didFinishLaunchingWithOptions:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) didFinishLaunchingWithOptions:(id)");
}

%end

%hook GADUnclickableView

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

%end

%hook GADWebView

-(void) didFinishLoad {
	%orig;
	NSLog(@"-(void) didFinishLoad");
}

-(void) notifyDelegateIfRequestFailed {
	%orig;
	NSLog(@"-(void) notifyDelegateIfRequestFailed");
}

-(bool) contentSizeUpdatesSynchronously {
	%orig;
	NSLog(@"-(bool) contentSizeUpdatesSynchronously");
}

-(void) evaluateJavaScriptFromString:(id) {
	%orig;
	NSLog(@"-(void) evaluateJavaScriptFromString:(id)");
}

-(void) addURLToPendingURLStrings:(id) {
	%orig;
	NSLog(@"-(void) addURLToPendingURLStrings:(id)");
}

-(void) didMakeLoadDecision:(bool) withRequest:(id) {
	%orig;
	NSLog(@"-(void) didMakeLoadDecision:(bool) withRequest:(id)");
}

-(void) didStartLoad {
	%orig;
	NSLog(@"-(void) didStartLoad");
}

-(void) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) didFailLoadWithError:(id)");
}

-(id) contentSizeDelegate {
	%orig;
	NSLog(@"-(id) contentSizeDelegate");
}

-(void) setContentSizeDelegate:(id) {
	%orig;
	NSLog(@"-(void) setContentSizeDelegate:(id)");
}

-(id) initWithFrame:(CGRect) configuration:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) configuration:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setOpaque:(bool) {
	%orig;
	NSLog(@"-(void) setOpaque:(bool)");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

-(bool) isOpaque {
	%orig;
	NSLog(@"-(bool) isOpaque");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) loadHTMLString:(id) baseURL:(id) {
	%orig;
	NSLog(@"-(void) loadHTMLString:(id) baseURL:(id)");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) reload {
	%orig;
	NSLog(@"-(void) reload");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

-(bool) isLoading {
	%orig;
	NSLog(@"-(bool) isLoading");
}

-(bool) canGoBack {
	%orig;
	NSLog(@"-(bool) canGoBack");
}

-(bool) canGoForward {
	%orig;
	NSLog(@"-(bool) canGoForward");
}

-(void) stopLoading {
	%orig;
	NSLog(@"-(void) stopLoading");
}

-(void) goBack {
	%orig;
	NSLog(@"-(void) goBack");
}

-(void) goForward {
	%orig;
	NSLog(@"-(void) goForward");
}

%end

%hook GADWebKitWebView

+(bool) isAvailable {
	%orig;
	NSLog(@"+(bool) isAvailable");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setMRAIDDelegate:(id) {
	%orig;
	NSLog(@"-(void) setMRAIDDelegate:(id)");
}

-(id) MRAIDDelegate {
	%orig;
	NSLog(@"-(id) MRAIDDelegate");
}

-(void) addUserScript:(id) injectionTime:(long long) {
	%orig;
	NSLog(@"-(void) addUserScript:(id) injectionTime:(long long)");
}

-(void) loadMRAID {
	%orig;
	NSLog(@"-(void) loadMRAID");
}

-(void) loadViewport {
	%orig;
	NSLog(@"-(void) loadViewport");
}

-(void) loadUserScripts {
	%orig;
	NSLog(@"-(void) loadUserScripts");
}

-(bool) contentSizeUpdatesSynchronously {
	%orig;
	NSLog(@"-(bool) contentSizeUpdatesSynchronously");
}

-(void) evaluateJavaScriptFromString:(id) {
	%orig;
	NSLog(@"-(void) evaluateJavaScriptFromString:(id)");
}

-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) decidePolicyForNavigationAction:(id) decisionHandler:(id)");
}

-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailProvisionalNavigation:(id) withError:(id)");
}

-(void) webView:(id) didCommitNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didCommitNavigation:(id)");
}

-(void) webView:(id) didFinishNavigation:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFinishNavigation:(id)");
}

-(void) webView:(id) didFailNavigation:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailNavigation:(id) withError:(id)");
}

-(void) webViewWebContentProcessDidTerminate:(id) {
	%orig;
	NSLog(@"-(void) webViewWebContentProcessDidTerminate:(id)");
}

-(id) webView:(id) createWebViewWithConfiguration:(id) forNavigationAction:(id) windowFeatures:(id) {
	%orig;
	NSLog(@"-(id) webView:(id) createWebViewWithConfiguration:(id) forNavigationAction:(id) windowFeatures:(id)");
}

-(void) webView:(id) runJavaScriptAlertPanelWithMessage:(id) initiatedByFrame:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) runJavaScriptAlertPanelWithMessage:(id) initiatedByFrame:(id) completionHandler:(id)");
}

-(id) initWithFrame:(CGRect) configuration:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) configuration:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) loadHTMLString:(id) baseURL:(id) {
	%orig;
	NSLog(@"-(void) loadHTMLString:(id) baseURL:(id)");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

%end

%hook GADUIKitWebView

-(bool) contentSizeUpdatesSynchronously {
	%orig;
	NSLog(@"-(bool) contentSizeUpdatesSynchronously");
}

-(void) evaluateJavaScriptFromString:(id) {
	%orig;
	NSLog(@"-(void) evaluateJavaScriptFromString:(id)");
}

-(id) initWithFrame:(CGRect) configuration:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) configuration:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(void) webView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailLoadWithError:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidStartLoad:(id)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

%end

%hook GADNativeExpressAdView

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(void) adViewDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adViewDidReceiveAd:(id)");
}

-(void) adView:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailToReceiveAdWithError:(id)");
}

-(void) adViewWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewWillPresentScreen:(id)");
}

-(void) adViewWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewWillDismissScreen:(id)");
}

-(void) adViewDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) adViewDidDismissScreen:(id)");
}

-(void) adViewWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) adViewWillLeaveApplication:(id)");
}

-(GADAdSize) adSize {
	%orig;
	NSLog(@"-(GADAdSize) adSize");
}

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) setAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) setAdSize:(GADAdSize)");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id)");
}

-(void) rootObjectLoggerChanged {
	%orig;
	NSLog(@"-(void) rootObjectLoggerChanged");
}

-(id) adNetworkClassName {
	%orig;
	NSLog(@"-(id) adNetworkClassName");
}

-(id) adLoaderConfigurationForAd:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"-(id) adLoaderConfigurationForAd:(id) networkConfiguration:(id)");
}

-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*)");
}

-(void) slot:(id) willProcessMediatedAdResponse:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) willProcessMediatedAdResponse:(id)");
}

-(id) initWithAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(id) initWithAdSize:(GADAdSize)");
}

-(void) createdBannerView:(id) {
	%orig;
	NSLog(@"-(void) createdBannerView:(id)");
}

-(id) initWithFrame:(CGRect) adSize:(GADAdSize) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) adSize:(GADAdSize)");
}

-(void) commonInitWithBannerView:(id) {
	%orig;
	NSLog(@"-(void) commonInitWithBannerView:(id)");
}

-(void) setAutoloadEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAutoloadEnabled:(bool)");
}

-(bool) isAutoloadEnabled {
	%orig;
	NSLog(@"-(bool) isAutoloadEnabled");
}

-(void) setAdOptions:(id) {
	%orig;
	NSLog(@"-(void) setAdOptions:(id)");
}

-(id) initWithAdSize:(GADAdSize) origin:(CGPoint) {
	%orig;
	NSLog(@"-(id) initWithAdSize:(GADAdSize) origin:(CGPoint)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(void) setRootViewController:(id) {
	%orig;
	NSLog(@"-(void) setRootViewController:(id)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

%end

%hook GADDynamicHeightSearchBannerView

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(void) webView:(id) runJavaScriptAlertPanelWithTitle:(id) message:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) runJavaScriptAlertPanelWithTitle:(id) message:(id) completionHandler:(id)");
}

-(void) webViewProcessDidTerminate:(id) {
	%orig;
	NSLog(@"-(void) webViewProcessDidTerminate:(id)");
}

-(void) configureBannerView {
	%orig;
	NSLog(@"-(void) configureBannerView");
}

-(void) handleBannerViewDidReceiveAd {
	%orig;
	NSLog(@"-(void) handleBannerViewDidReceiveAd");
}

-(void) updateInternalAdViewHeightAndNotifyDelegateWithHeight:(double) {
	%orig;
	NSLog(@"-(void) updateInternalAdViewHeightAndNotifyDelegateWithHeight:(double)");
}

-(void) handleUserDidTapAdDestinationURL:(id) {
	%orig;
	NSLog(@"-(void) handleUserDidTapAdDestinationURL:(id)");
}

-(CGSize) currentAdSize {
	%orig;
	NSLog(@"-(CGSize) currentAdSize");
}

-(long long) adState {
	%orig;
	NSLog(@"-(long long) adState");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

-(void) webView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailLoadWithError:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidStartLoad:(id)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

%end

%hook GADAdView

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) setVideoController:(id) {
	%orig;
	NSLog(@"-(void) setVideoController:(id)");
}

-(void) addGestureRecognizers {
	%orig;
	NSLog(@"-(void) addGestureRecognizers");
}

-(void) configureAsBannerAdView {
	%orig;
	NSLog(@"-(void) configureAsBannerAdView");
}

-(void) executeJavaScriptAsynchronouslyFromString:(id) {
	%orig;
	NSLog(@"-(void) executeJavaScriptAsynchronouslyFromString:(id)");
}

-(void) postJSNotification:(id) userInfo:(id) {
	%orig;
	NSLog(@"-(void) postJSNotification:(id) userInfo:(id)");
}

-(id) opener {
	%orig;
	NSLog(@"-(id) opener");
}

-(id) rewardBasedVideoAdGMSGHandlerDelegate {
	%orig;
	NSLog(@"-(id) rewardBasedVideoAdGMSGHandlerDelegate");
}

-(void) setCachedVideoPlayerFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setCachedVideoPlayerFrame:(CGRect)");
}

-(void) rotateVideoToDegrees:(double) {
	%orig;
	NSLog(@"-(void) rotateVideoToDegrees:(double)");
}

-(void) setSpherical:(bool) {
	%orig;
	NSLog(@"-(void) setSpherical:(bool)");
}

-(void) setUpVideoPlayerWithURL:(id) resourceCache:(id) configuration:(id) {
	%orig;
	NSLog(@"-(void) setUpVideoPlayerWithURL:(id) resourceCache:(id) configuration:(id)");
}

-(void) showVideo {
	%orig;
	NSLog(@"-(void) showVideo");
}

-(void) optimizeVideoPlayback {
	%orig;
	NSLog(@"-(void) optimizeVideoPlayback");
}

-(id) adDebugDialogString {
	%orig;
	NSLog(@"-(id) adDebugDialogString");
}

-(void) setAdDebugDialogString:(id) {
	%orig;
	NSLog(@"-(void) setAdDebugDialogString:(id)");
}

-(void) configureAsInterstitialAdView {
	%orig;
	NSLog(@"-(void) configureAsInterstitialAdView");
}

-(void) setRewardBasedVideoAdGMSGHandlerDelegate:(id) {
	%orig;
	NSLog(@"-(void) setRewardBasedVideoAdGMSGHandlerDelegate:(id)");
}

-(void) didMoveToPlacement:(id) {
	%orig;
	NSLog(@"-(void) didMoveToPlacement:(id)");
}

-(id) activeViewReporter {
	%orig;
	NSLog(@"-(id) activeViewReporter");
}

-(void) setAdResponseSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setAdResponseSize:(CGSize)");
}

-(void) videoLoadStartedWithURL:(id) {
	%orig;
	NSLog(@"-(void) videoLoadStartedWithURL:(id)");
}

-(void) removeVideoPlayerView {
	%orig;
	NSLog(@"-(void) removeVideoPlayerView");
}

-(void) createdVideoPlayer:(id) {
	%orig;
	NSLog(@"-(void) createdVideoPlayer:(id)");
}

-(void) openGLVideoRenderingStarted {
	%orig;
	NSLog(@"-(void) openGLVideoRenderingStarted");
}

-(void) createSphericalViewForPlayer:(id) {
	%orig;
	NSLog(@"-(void) createSphericalViewForPlayer:(id)");
}

-(void) videoRenderingStarted {
	%orig;
	NSLog(@"-(void) videoRenderingStarted");
}

-(void) createNonSphericalViewForPlayer:(id) {
	%orig;
	NSLog(@"-(void) createNonSphericalViewForPlayer:(id)");
}

-(void) videoRenderingSucceeded {
	%orig;
	NSLog(@"-(void) videoRenderingSucceeded");
}

-(void) notifySphericalVideoRenderingFailedWithError:(id) {
	%orig;
	NSLog(@"-(void) notifySphericalVideoRenderingFailedWithError:(id)");
}

-(void) videoLoadSucceededWithURL:(id) {
	%orig;
	NSLog(@"-(void) videoLoadSucceededWithURL:(id)");
}

-(void) createViewForPlayer:(id) {
	%orig;
	NSLog(@"-(void) createViewForPlayer:(id)");
}

-(void) openGLVideoRenderingSucceeded {
	%orig;
	NSLog(@"-(void) openGLVideoRenderingSucceeded");
}

-(void) openGLVideoRenderingFailedWithError:(id) {
	%orig;
	NSLog(@"-(void) openGLVideoRenderingFailedWithError:(id)");
}

-(void) player:(id) didLoadURL:(id) withAVPlayer:(id) {
	%orig;
	NSLog(@"-(void) player:(id) didLoadURL:(id) withAVPlayer:(id)");
}

-(void) videoPlayerGLView:(id) didSetUpVideoPlayer:(id) {
	%orig;
	NSLog(@"-(void) videoPlayerGLView:(id) didSetUpVideoPlayer:(id)");
}

-(void) videoPlayerGLView:(id) didFailToSetupVideoPlayer:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) videoPlayerGLView:(id) didFailToSetupVideoPlayer:(id) withError:(id)");
}

-(void) willLoadHTML {
	%orig;
	NSLog(@"-(void) willLoadHTML");
}

-(void) reportRequestsForAd:(id) {
	%orig;
	NSLog(@"-(void) reportRequestsForAd:(id)");
}

-(void) adRenderingStarted {
	%orig;
	NSLog(@"-(void) adRenderingStarted");
}

-(void) setHTMLWindowOrientation:(long long) shouldDispatchOrientationChangeEvent:(bool) {
	%orig;
	NSLog(@"-(void) setHTMLWindowOrientation:(long long) shouldDispatchOrientationChangeEvent:(bool)");
}

-(double) contentSizeDelay {
	%orig;
	NSLog(@"-(double) contentSizeDelay");
}

-(void) updateWebViewFrame {
	%orig;
	NSLog(@"-(void) updateWebViewFrame");
}

-(void) setVideoPlayerFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setVideoPlayerFrame:(CGRect)");
}

-(void) webView:(id) runJavaScriptAlertPanelWithTitle:(id) message:(id) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) runJavaScriptAlertPanelWithTitle:(id) message:(id) completionHandler:(id)");
}

-(void) webViewProcessDidTerminate:(id) {
	%orig;
	NSLog(@"-(void) webViewProcessDidTerminate:(id)");
}

-(id) MRAIDJavaScriptURLStringForWebView:(id) {
	%orig;
	NSLog(@"-(id) MRAIDJavaScriptURLStringForWebView:(id)");
}

-(void) setIsFluidAdView:(bool) {
	%orig;
	NSLog(@"-(void) setIsFluidAdView:(bool)");
}

-(void) dispatchSDKEvent:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) dispatchSDKEvent:(id) parameters:(id)");
}

-(bool) showDebug {
	%orig;
	NSLog(@"-(bool) showDebug");
}

-(void) setShowDebug:(bool) {
	%orig;
	NSLog(@"-(void) setShowDebug:(bool)");
}

-(CGSize) adResponseSize {
	%orig;
	NSLog(@"-(CGSize) adResponseSize");
}

-(void) setActiveViewReporter:(id) {
	%orig;
	NSLog(@"-(void) setActiveViewReporter:(id)");
}

-(bool) attachedToPlacement {
	%orig;
	NSLog(@"-(bool) attachedToPlacement");
}

-(bool) isSpherical {
	%orig;
	NSLog(@"-(bool) isSpherical");
}

-(CGRect) cachedVideoPlayerFrame {
	%orig;
	NSLog(@"-(CGRect) cachedVideoPlayerFrame");
}

-(void) webView:(id) didChangeScrollViewContentSize:(CGSize) {
	%orig;
	NSLog(@"-(void) webView:(id) didChangeScrollViewContentSize:(CGSize)");
}

-(bool) hasLoadedAtLeastOnce {
	%orig;
	NSLog(@"-(bool) hasLoadedAtLeastOnce");
}

-(void) didRotateToOrientation:(long long) {
	%orig;
	NSLog(@"-(void) didRotateToOrientation:(long long)");
}

-(void) forceRotateHTMLToOrientation:(long long) {
	%orig;
	NSLog(@"-(void) forceRotateHTMLToOrientation:(long long)");
}

-(void) setAd:(id) {
	%orig;
	NSLog(@"-(void) setAd:(id)");
}

-(id) ad {
	%orig;
	NSLog(@"-(id) ad");
}

-(void) setTouched:(bool) {
	%orig;
	NSLog(@"-(void) setTouched:(bool)");
}

-(bool) touched {
	%orig;
	NSLog(@"-(bool) touched");
}

-(id) videoPlayer {
	%orig;
	NSLog(@"-(id) videoPlayer");
}

-(void) saveState {
	%orig;
	NSLog(@"-(void) saveState");
}

-(void) setVideoPlayer:(id) {
	%orig;
	NSLog(@"-(void) setVideoPlayer:(id)");
}

-(id) videoPlayerView {
	%orig;
	NSLog(@"-(id) videoPlayerView");
}

-(void) pauseVideo {
	%orig;
	NSLog(@"-(void) pauseVideo");
}

-(void) restoreState {
	%orig;
	NSLog(@"-(void) restoreState");
}

-(void) handleGesture:(id) {
	%orig;
	NSLog(@"-(void) handleGesture:(id)");
}

-(void) hideVideo {
	%orig;
	NSLog(@"-(void) hideVideo");
}

-(id) initWithFrame:(CGRect) configuration:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) configuration:(id)");
}

-(id) logger {
	%orig;
	NSLog(@"-(id) logger");
}

-(void) setLogger:(id) {
	%orig;
	NSLog(@"-(void) setLogger:(id)");
}

-(void) setVideoPlayerView:(id) {
	%orig;
	NSLog(@"-(void) setVideoPlayerView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setOpaque:(bool) {
	%orig;
	NSLog(@"-(void) setOpaque:(bool)");
}

-(CGSize) contentSize {
	%orig;
	NSLog(@"-(CGSize) contentSize");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(void) willMoveToWindow:(id) {
	%orig;
	NSLog(@"-(void) willMoveToWindow:(id)");
}

-(bool) isOpaque {
	%orig;
	NSLog(@"-(bool) isOpaque");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) loadHTMLString:(id) baseURL:(id) {
	%orig;
	NSLog(@"-(void) loadHTMLString:(id) baseURL:(id)");
}

-(long long) orientation {
	%orig;
	NSLog(@"-(long long) orientation");
}

-(id) URL {
	%orig;
	NSLog(@"-(id) URL");
}

-(bool) visible {
	%orig;
	NSLog(@"-(bool) visible");
}

-(void) setOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setOrientation:(long long)");
}

-(void) setVisible:(bool) {
	%orig;
	NSLog(@"-(void) setVisible:(bool)");
}

-(void) reload {
	%orig;
	NSLog(@"-(void) reload");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

-(bool) isLoading {
	%orig;
	NSLog(@"-(bool) isLoading");
}

-(bool) canGoBack {
	%orig;
	NSLog(@"-(bool) canGoBack");
}

-(bool) canGoForward {
	%orig;
	NSLog(@"-(bool) canGoForward");
}

-(void) webView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailLoadWithError:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidStartLoad:(id)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

-(void) stopLoading {
	%orig;
	NSLog(@"-(void) stopLoading");
}

-(void) goBack {
	%orig;
	NSLog(@"-(void) goBack");
}

-(void) goForward {
	%orig;
	NSLog(@"-(void) goForward");
}

%end

%hook GADBrowserAdView

-(id) browserViewController {
	%orig;
	NSLog(@"-(id) browserViewController");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

%end

%hook GADBannerView

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(GADAdSize) adSize {
	%orig;
	NSLog(@"-(GADAdSize) adSize");
}

-(id) videoController {
	%orig;
	NSLog(@"-(id) videoController");
}

-(void) setAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) setAdSize:(GADAdSize)");
}

-(id) bannerKey {
	%orig;
	NSLog(@"-(id) bannerKey");
}

-(void) setBannerKey:(id) {
	%orig;
	NSLog(@"-(void) setBannerKey:(id)");
}

-(id) requestParametersForRequest:(id) {
	%orig;
	NSLog(@"-(id) requestParametersForRequest:(id)");
}

-(id) adUnitID {
	%orig;
	NSLog(@"-(id) adUnitID");
}

-(void) slotWillPresentScreen:(id) {
	%orig;
	NSLog(@"-(void) slotWillPresentScreen:(id)");
}

-(void) slotWillDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) slotWillDismissScreen:(id)");
}

-(void) slotDidDismissScreen:(id) {
	%orig;
	NSLog(@"-(void) slotDidDismissScreen:(id)");
}

-(void) slotWillLeaveApplication:(id) {
	%orig;
	NSLog(@"-(void) slotWillLeaveApplication:(id)");
}

-(void) slotFinishedLoadingAdContent:(id) {
	%orig;
	NSLog(@"-(void) slotFinishedLoadingAdContent:(id)");
}

-(void) slot:(id) didFailToLoadAdContentWithError:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didFailToLoadAdContentWithError:(id)");
}

-(bool) slot:(id) shouldLoadRequest:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) shouldLoadRequest:(id) error:(id*)");
}

-(bool) slotShouldReloadCurrentRequest:(id) {
	%orig;
	NSLog(@"-(bool) slotShouldReloadCurrentRequest:(id)");
}

-(CGRect) frameInInterface {
	%orig;
	NSLog(@"-(CGRect) frameInInterface");
}

-(void) slot:(id) didReceiveAdView:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didReceiveAdView:(id)");
}

-(void) slot:(id) contentSizeDidChange:(CGSize) {
	%orig;
	NSLog(@"-(void) slot:(id) contentSizeDidChange:(CGSize)");
}

-(void) setAdSize:(GADAdSize) andReload:(bool) {
	%orig;
	NSLog(@"-(void) setAdSize:(GADAdSize) andReload:(bool)");
}

-(void) layoutSubviewsIfNeeded {
	%orig;
	NSLog(@"-(void) layoutSubviewsIfNeeded");
}

-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"-(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id)");
}

-(void) rootObjectLoggerChanged {
	%orig;
	NSLog(@"-(void) rootObjectLoggerChanged");
}

-(id) adNetworkClassName {
	%orig;
	NSLog(@"-(id) adNetworkClassName");
}

-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) shouldProcessAdResponse:(id) error:(id*)");
}

-(void) slot:(id) willProcessMediatedAdResponse:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) willProcessMediatedAdResponse:(id)");
}

-(void) setMediated {
	%orig;
	NSLog(@"-(void) setMediated");
}

-(id) inAppPurchaseDelegate {
	%orig;
	NSLog(@"-(id) inAppPurchaseDelegate");
}

-(void) setInAppPurchaseDelegate:(id) {
	%orig;
	NSLog(@"-(void) setInAppPurchaseDelegate:(id)");
}

-(id) initWithAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(id) initWithAdSize:(GADAdSize)");
}

-(id) adSizeDelegate {
	%orig;
	NSLog(@"-(id) adSizeDelegate");
}

-(void) setAdSizeDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAdSizeDelegate:(id)");
}

-(void) cacheViewHierarchyInformationForSlot:(id) {
	%orig;
	NSLog(@"-(void) cacheViewHierarchyInformationForSlot:(id)");
}

-(bool) hasAutoRefreshed {
	%orig;
	NSLog(@"-(bool) hasAutoRefreshed");
}

-(void) bannerCreatedSlot:(id) {
	%orig;
	NSLog(@"-(void) bannerCreatedSlot:(id)");
}

-(id) rootAdView {
	%orig;
	NSLog(@"-(id) rootAdView");
}

-(void) setAdSizeFromExternalCGSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setAdSizeFromExternalCGSize:(CGSize)");
}

-(void) commonLayoutSubviews {
	%orig;
	NSLog(@"-(void) commonLayoutSubviews");
}

-(void) setRootAdView:(id) {
	%orig;
	NSLog(@"-(void) setRootAdView:(id)");
}

-(void) bannerAdLoadSucceeded {
	%orig;
	NSLog(@"-(void) bannerAdLoadSucceeded");
}

-(void) resetVideoController {
	%orig;
	NSLog(@"-(void) resetVideoController");
}

-(void) bannerAdLoadFailedWithError:(id) {
	%orig;
	NSLog(@"-(void) bannerAdLoadFailedWithError:(id)");
}

-(void) bannerAdLoadStarted {
	%orig;
	NSLog(@"-(void) bannerAdLoadStarted");
}

-(void) processAdOptions {
	%orig;
	NSLog(@"-(void) processAdOptions");
}

-(id) viewHierarchyInformationForSlot:(id) {
	%orig;
	NSLog(@"-(id) viewHierarchyInformationForSlot:(id)");
}

-(id) mediatedAdView {
	%orig;
	NSLog(@"-(id) mediatedAdView");
}

-(id) initWithFrame:(CGRect) adSize:(GADAdSize) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) adSize:(GADAdSize)");
}

-(void) setAutoloadEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAutoloadEnabled:(bool)");
}

-(bool) isAutoloadEnabled {
	%orig;
	NSLog(@"-(bool) isAutoloadEnabled");
}

-(void) setAdOptions:(id) {
	%orig;
	NSLog(@"-(void) setAdOptions:(id)");
}

-(id) initWithAdSize:(GADAdSize) origin:(CGPoint) {
	%orig;
	NSLog(@"-(id) initWithAdSize:(GADAdSize) origin:(CGPoint)");
}

-(void) commonInitWithAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) commonInitWithAdSize:(GADAdSize)");
}

-(id) videoOptions {
	%orig;
	NSLog(@"-(id) videoOptions");
}

-(id) slot {
	%orig;
	NSLog(@"-(id) slot");
}

-(void) setSlot:(id) {
	%orig;
	NSLog(@"-(void) setSlot:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setAlpha:(double) {
	%orig;
	NSLog(@"-(void) setAlpha:(double)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(void) setRootViewController:(id) {
	%orig;
	NSLog(@"-(void) setRootViewController:(id)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) didMoveToWindow {
	%orig;
	NSLog(@"-(void) didMoveToWindow");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

%end

%hook GADSearchBannerView

-(void) setAdUnitID:(id) {
	%orig;
	NSLog(@"-(void) setAdUnitID:(id)");
}

-(void) commonInitWithAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) commonInitWithAdSize:(GADAdSize)");
}

-(id) dynamicHeightAdView {
	%orig;
	NSLog(@"-(id) dynamicHeightAdView");
}

-(void) bannerViewDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) bannerViewDidReceiveAd:(id)");
}

-(void) bannerView:(id) didUpdateDesiredContentSize:(CGSize) {
	%orig;
	NSLog(@"-(void) bannerView:(id) didUpdateDesiredContentSize:(CGSize)");
}

-(void) bannerView:(id) didReceiveLandingPageURL:(id) {
	%orig;
	NSLog(@"-(void) bannerView:(id) didReceiveLandingPageURL:(id)");
}

-(void) setDynamicHeightAdView:(id) {
	%orig;
	NSLog(@"-(void) setDynamicHeightAdView:(id)");
}

-(void) bannerView:(id) didFailToReceiveAdWithError:(id) {
	%orig;
	NSLog(@"-(void) bannerView:(id) didFailToReceiveAdWithError:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) loadRequest:(id) {
	%orig;
	NSLog(@"-(void) loadRequest:(id)");
}

%end

%hook DFPBannerView

+(id) requiredDelegateProtocol {
	%orig;
	NSLog(@"+(id) requiredDelegateProtocol");
}

+(id) requestParametersForAdLoader:(id) {
	%orig;
	NSLog(@"+(id) requestParametersForAdLoader:(id)");
}

+(bool) canInitWithAdLoader:(id) error:(id*) {
	%orig;
	NSLog(@"+(bool) canInitWithAdLoader:(id) error:(id*)");
}

+(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id) {
	%orig;
	NSLog(@"+(id) mediationConnectorForConfiguration:(id) networkConfiguration:(id)");
}

-(bool) enableManualImpressions {
	%orig;
	NSLog(@"-(bool) enableManualImpressions");
}

-(void) recordImpression {
	%orig;
	NSLog(@"-(void) recordImpression");
}

-(void) finishedRenderingAdView:(id) {
	%orig;
	NSLog(@"-(void) finishedRenderingAdView:(id)");
}

-(void) recordClick {
	%orig;
	NSLog(@"-(void) recordClick");
}

-(void) setEnableManualImpressions:(bool) {
	%orig;
	NSLog(@"-(void) setEnableManualImpressions:(bool)");
}

-(void) setValidAdSizes:(id) {
	%orig;
	NSLog(@"-(void) setValidAdSizes:(id)");
}

-(void) setCustomRenderedBannerViewDelegate:(id) {
	%orig;
	NSLog(@"-(void) setCustomRenderedBannerViewDelegate:(id)");
}

-(void) recordCustomAdImpression {
	%orig;
	NSLog(@"-(void) recordCustomAdImpression");
}

-(bool) slotShouldPreemptInProgressRequest:(id) {
	%orig;
	NSLog(@"-(bool) slotShouldPreemptInProgressRequest:(id)");
}

-(id) validAdSizes {
	%orig;
	NSLog(@"-(id) validAdSizes");
}

-(void) slot:(id) willResizeToAdSize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) slot:(id) willResizeToAdSize:(GADAdSize)");
}

-(void) slot:(id) didReceiveAppEvent:(id) withInfo:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) didReceiveAppEvent:(id) withInfo:(id)");
}

-(bool) slot:(id) notifyPublisherToRenderCustomRenderingAd:(id) error:(id*) {
	%orig;
	NSLog(@"-(bool) slot:(id) notifyPublisherToRenderCustomRenderingAd:(id) error:(id*)");
}

-(void) slot:(id) willLoadAdWithRequest:(id) {
	%orig;
	NSLog(@"-(void) slot:(id) willLoadAdWithRequest:(id)");
}

-(void) loadAssetsWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) loadAssetsWithCompletionHandler:(id)");
}

-(void) adLoaderDidReceiveAd:(id) {
	%orig;
	NSLog(@"-(void) adLoaderDidReceiveAd:(id)");
}

-(id) correlator {
	%orig;
	NSLog(@"-(id) correlator");
}

-(void) setCorrelator:(id) {
	%orig;
	NSLog(@"-(void) setCorrelator:(id)");
}

-(id) appEventDelegate {
	%orig;
	NSLog(@"-(id) appEventDelegate");
}

-(void) setAppEventDelegate:(id) {
	%orig;
	NSLog(@"-(void) setAppEventDelegate:(id)");
}

-(id) customRenderedBannerViewDelegate {
	%orig;
	NSLog(@"-(id) customRenderedBannerViewDelegate");
}

-(void) setValidAdSizesWithSizes:(GADAdSize*) {
	%orig;
	NSLog(@"-(void) setValidAdSizesWithSizes:(GADAdSize*)");
}

-(void) setAdOptions:(id) {
	%orig;
	NSLog(@"-(void) setAdOptions:(id)");
}

-(void) resize:(GADAdSize) {
	%orig;
	NSLog(@"-(void) resize:(GADAdSize)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADVideoPlayerView

-(void) disableVideoPlaybackOptimization {
	%orig;
	NSLog(@"-(void) disableVideoPlaybackOptimization");
}

-(void) resetVideoPlaybackOptimization {
	%orig;
	NSLog(@"-(void) resetVideoPlaybackOptimization");
}

-(void) enableVideoPlaybackOptimization {
	%orig;
	NSLog(@"-(void) enableVideoPlaybackOptimization");
}

-(void) setUpWithPlayer:(id) {
	%orig;
	NSLog(@"-(void) setUpWithPlayer:(id)");
}

-(void) optimizeVideoForAdVisibility:(bool) {
	%orig;
	NSLog(@"-(void) optimizeVideoForAdVisibility:(bool)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADVideoPlayerGLView

-(void) disableVideoPlaybackOptimization {
	%orig;
	NSLog(@"-(void) disableVideoPlaybackOptimization");
}

-(void) resetVideoPlaybackOptimization {
	%orig;
	NSLog(@"-(void) resetVideoPlaybackOptimization");
}

-(void) enableVideoPlaybackOptimization {
	%orig;
	NSLog(@"-(void) enableVideoPlaybackOptimization");
}

-(void) handleUserTouchMovedByVector:(CGVector) {
	%orig;
	NSLog(@"-(void) handleUserTouchMovedByVector:(CGVector)");
}

-(void) stopRenderThread {
	%orig;
	NSLog(@"-(void) stopRenderThread");
}

-(void) startRenderThread {
	%orig;
	NSLog(@"-(void) startRenderThread");
}

-(void) renderThreadUserTouchMovedByVector:(id) {
	%orig;
	NSLog(@"-(void) renderThreadUserTouchMovedByVector:(id)");
}

-(id) displayLinkCallbackBlockInvocation {
	%orig;
	NSLog(@"-(id) displayLinkCallbackBlockInvocation");
}

-(id) renderThreadBlockInvocationWithDisplayLink:(id) {
	%orig;
	NSLog(@"-(id) renderThreadBlockInvocationWithDisplayLink:(id)");
}

-(void) unscheduleDisplayLink {
	%orig;
	NSLog(@"-(void) unscheduleDisplayLink");
}

-(void) renderThreadSetUp {
	%orig;
	NSLog(@"-(void) renderThreadSetUp");
}

-(void) renderThreadSetUpSucceeded {
	%orig;
	NSLog(@"-(void) renderThreadSetUpSucceeded");
}

-(void) renderThreadSetUpFailedWithErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) renderThreadSetUpFailedWithErrorMessage:(id)");
}

-(void) renderThreadResetVideoOutput {
	%orig;
	NSLog(@"-(void) renderThreadResetVideoOutput");
}

-(void) renderThreadWillMoveToWindow:(id) {
	%orig;
	NSLog(@"-(void) renderThreadWillMoveToWindow:(id)");
}

-(void) renderThreadApplicationWillEnterForeground {
	%orig;
	NSLog(@"-(void) renderThreadApplicationWillEnterForeground");
}

-(void) renderThreadApplicationDidEnterBackground {
	%orig;
	NSLog(@"-(void) renderThreadApplicationDidEnterBackground");
}

-(void) setUpWithPlayer:(id) {
	%orig;
	NSLog(@"-(void) setUpWithPlayer:(id)");
}

-(void) optimizeVideoForAdVisibility:(bool) {
	%orig;
	NSLog(@"-(void) optimizeVideoForAdVisibility:(bool)");
}

-(void) pauseDisplayLink {
	%orig;
	NSLog(@"-(void) pauseDisplayLink");
}

-(void) resumeDisplayLink {
	%orig;
	NSLog(@"-(void) resumeDisplayLink");
}

-(void) displayLinkCallback:(id) {
	%orig;
	NSLog(@"-(void) displayLinkCallback:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) willMoveToWindow:(id) {
	%orig;
	NSLog(@"-(void) willMoveToWindow:(id)");
}

-(void) glkView:(id) drawInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) glkView:(id) drawInRect:(CGRect)");
}

-(void) applicationWillEnterForeground:(id) {
	%orig;
	NSLog(@"-(void) applicationWillEnterForeground:(id)");
}

-(void) applicationDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) applicationDidEnterBackground:(id)");
}

%end

%hook GADPushTransitionView

-(void) dispatchAnimation {
	%orig;
	NSLog(@"-(void) dispatchAnimation");
}

-(long long) animationGroupIdentifier {
	%orig;
	NSLog(@"-(long long) animationGroupIdentifier");
}

-(void) setPresentationDuration:(double) {
	%orig;
	NSLog(@"-(void) setPresentationDuration:(double)");
}

-(void) setViews:(id) {
	%orig;
	NSLog(@"-(void) setViews:(id)");
}

-(void) setCurrentView:(id) {
	%orig;
	NSLog(@"-(void) setCurrentView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) animate {
	%orig;
	NSLog(@"-(void) animate");
}

-(void) setAnimationDuration:(double) {
	%orig;
	NSLog(@"-(void) setAnimationDuration:(double)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook GADOverlayView

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) adView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) adViewDidStartLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidStartLoad:(id)");
}

-(void) adViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) adViewDidFinishLoad:(id)");
}

-(void) adView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) adView:(id) didFailLoadWithError:(id)");
}

-(void) adViewWebProcessDidTerminate:(id) {
	%orig;
	NSLog(@"-(void) adViewWebProcessDidTerminate:(id)");
}

-(void) removeOverlaySubview {
	%orig;
	NSLog(@"-(void) removeOverlaySubview");
}

-(void) handleLoadOverlayView:(id) {
	%orig;
	NSLog(@"-(void) handleLoadOverlayView:(id)");
}

-(void) handleShowOverlayView:(id) {
	%orig;
	NSLog(@"-(void) handleShowOverlayView:(id)");
}

-(void) handleHideOverlayView:(id) {
	%orig;
	NSLog(@"-(void) handleHideOverlayView:(id)");
}

-(void) handleSendMessageToOverlayView:(id) {
	%orig;
	NSLog(@"-(void) handleSendMessageToOverlayView:(id)");
}

-(void) handleHideOverlayNotification:(id) {
	%orig;
	NSLog(@"-(void) handleHideOverlayNotification:(id)");
}

-(void) handleSendMessageToAdViewNotification:(id) {
	%orig;
	NSLog(@"-(void) handleSendMessageToAdViewNotification:(id)");
}

-(void) addOverlaySubview {
	%orig;
	NSLog(@"-(void) addOverlaySubview");
}

-(void) loadOverlayWithUserInfo:(id) {
	%orig;
	NSLog(@"-(void) loadOverlayWithUserInfo:(id)");
}

-(void) sendMessageToOverlayWithUserInfo:(id) {
	%orig;
	NSLog(@"-(void) sendMessageToOverlayWithUserInfo:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook GADNativeContentAdView

-(id) callToActionView {
	%orig;
	NSLog(@"-(id) callToActionView");
}

-(void) setAdChoicesView:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesView:(id)");
}

-(id) adChoicesView {
	%orig;
	NSLog(@"-(id) adChoicesView");
}

-(void) setCallToActionView:(id) {
	%orig;
	NSLog(@"-(void) setCallToActionView:(id)");
}

-(void) updateMediaView {
	%orig;
	NSLog(@"-(void) updateMediaView");
}

-(id) nativeContentAd {
	%orig;
	NSLog(@"-(id) nativeContentAd");
}

-(void) setNativeContentAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeContentAd:(id)");
}

-(void) setAdvertiserView:(id) {
	%orig;
	NSLog(@"-(void) setAdvertiserView:(id)");
}

-(id) advertiserView {
	%orig;
	NSLog(@"-(id) advertiserView");
}

-(id) mediaView {
	%orig;
	NSLog(@"-(id) mediaView");
}

-(void) setMediaView:(id) {
	%orig;
	NSLog(@"-(void) setMediaView:(id)");
}

-(void) setLogoView:(id) {
	%orig;
	NSLog(@"-(void) setLogoView:(id)");
}

-(id) logoView {
	%orig;
	NSLog(@"-(id) logoView");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

-(id) bodyView {
	%orig;
	NSLog(@"-(id) bodyView");
}

-(void) setBodyView:(id) {
	%orig;
	NSLog(@"-(void) setBodyView:(id)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

-(void) setHeadlineView:(id) {
	%orig;
	NSLog(@"-(void) setHeadlineView:(id)");
}

-(id) headlineView {
	%orig;
	NSLog(@"-(id) headlineView");
}

%end

%hook GADNativeAppInstallAdView

-(id) callToActionView {
	%orig;
	NSLog(@"-(id) callToActionView");
}

-(void) setAdChoicesView:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesView:(id)");
}

-(id) adChoicesView {
	%orig;
	NSLog(@"-(id) adChoicesView");
}

-(void) setCallToActionView:(id) {
	%orig;
	NSLog(@"-(void) setCallToActionView:(id)");
}

-(id) nativeAppInstallAd {
	%orig;
	NSLog(@"-(id) nativeAppInstallAd");
}

-(void) setNativeAppInstallAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAppInstallAd:(id)");
}

-(void) setStoreView:(id) {
	%orig;
	NSLog(@"-(void) setStoreView:(id)");
}

-(void) setPriceView:(id) {
	%orig;
	NSLog(@"-(void) setPriceView:(id)");
}

-(id) storeView {
	%orig;
	NSLog(@"-(id) storeView");
}

-(id) priceView {
	%orig;
	NSLog(@"-(id) priceView");
}

-(void) updateMediaView {
	%orig;
	NSLog(@"-(void) updateMediaView");
}

-(id) starRatingView {
	%orig;
	NSLog(@"-(id) starRatingView");
}

-(id) iconView {
	%orig;
	NSLog(@"-(id) iconView");
}

-(void) setIconView:(id) {
	%orig;
	NSLog(@"-(void) setIconView:(id)");
}

-(id) mediaView {
	%orig;
	NSLog(@"-(id) mediaView");
}

-(void) setMediaView:(id) {
	%orig;
	NSLog(@"-(void) setMediaView:(id)");
}

-(void) setStarRatingView:(id) {
	%orig;
	NSLog(@"-(void) setStarRatingView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

-(id) bodyView {
	%orig;
	NSLog(@"-(id) bodyView");
}

-(void) setBodyView:(id) {
	%orig;
	NSLog(@"-(void) setBodyView:(id)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

-(void) setHeadlineView:(id) {
	%orig;
	NSLog(@"-(void) setHeadlineView:(id)");
}

-(id) headlineView {
	%orig;
	NSLog(@"-(id) headlineView");
}

%end

%hook GADNativeAdAttributionView

-(void) setAttribution:(id) {
	%orig;
	NSLog(@"-(void) setAttribution:(id)");
}

-(id) iconView {
	%orig;
	NSLog(@"-(id) iconView");
}

-(id) initWithAttribution:(id) {
	%orig;
	NSLog(@"-(id) initWithAttribution:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) textView {
	%orig;
	NSLog(@"-(id) textView");
}

%end

%hook GADMediaView

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(void) mediaContent:(id) didLoadVideoWithSize:(CGSize) {
	%orig;
	NSLog(@"-(void) mediaContent:(id) didLoadVideoWithSize:(CGSize)");
}

-(void) setMediaContent:(id) {
	%orig;
	NSLog(@"-(void) setMediaContent:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) didMoveToWindow {
	%orig;
	NSLog(@"-(void) didMoveToWindow");
}

%end

%hook GADAdChoicesView

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(void) setAdChoicesContentView:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesContentView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

%end

%hook FBSDKLikeBoxView

-(void) _initializeContent {
	%orig;
	NSLog(@"-(void) _initializeContent");
}

-(void) setCaretPosition:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCaretPosition:(unsigned long long)");
}

-(unsigned long long) caretPosition {
	%orig;
	NSLog(@"-(unsigned long long) caretPosition");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

%end

%hook FBSDKLikeBoxBorderView

-(UIEdgeInsets) _borderInsets {
	%orig;
	NSLog(@"-(UIEdgeInsets) _borderInsets");
}

-(void) _initializeContent {
	%orig;
	NSLog(@"-(void) _initializeContent");
}

-(void) setCaretPosition:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCaretPosition:(unsigned long long)");
}

-(unsigned long long) caretPosition {
	%orig;
	NSLog(@"-(unsigned long long) caretPosition");
}

-(double) borderCornerRadius {
	%orig;
	NSLog(@"-(double) borderCornerRadius");
}

-(void) setBorderCornerRadius:(double) {
	%orig;
	NSLog(@"-(void) setBorderCornerRadius:(double)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) setBorderWidth:(double) {
	%orig;
	NSLog(@"-(void) setBorderWidth:(double)");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

-(id) fillColor {
	%orig;
	NSLog(@"-(id) fillColor");
}

-(double) borderWidth {
	%orig;
	NSLog(@"-(double) borderWidth");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(UIEdgeInsets) contentInsets {
	%orig;
	NSLog(@"-(UIEdgeInsets) contentInsets");
}

-(void) setFillColor:(id) {
	%orig;
	NSLog(@"-(void) setFillColor:(id)");
}

-(void) setForegroundColor:(id) {
	%orig;
	NSLog(@"-(void) setForegroundColor:(id)");
}

-(id) foregroundColor {
	%orig;
	NSLog(@"-(id) foregroundColor");
}

%end

%hook FBSDKTooltipView

-(void) setDisplayDuration:(double) {
	%orig;
	NSLog(@"-(void) setDisplayDuration:(double)");
}

-(double) displayDuration {
	%orig;
	NSLog(@"-(double) displayDuration");
}

-(void) presentFromView:(id) {
	%orig;
	NSLog(@"-(void) presentFromView:(id)");
}

-(void) setMessage:(id) tagline:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id) tagline:(id)");
}

-(void) onTapInTooltip:(id) {
	%orig;
	NSLog(@"-(void) onTapInTooltip:(id)");
}

-(id) tagline {
	%orig;
	NSLog(@"-(id) tagline");
}

-(void) presentInView:(id) withArrowPosition:(CGPoint) direction:(unsigned long long) {
	%orig;
	NSLog(@"-(void) presentInView:(id) withArrowPosition:(CGPoint) direction:(unsigned long long)");
}

-(CGRect) layoutSubviewsAndDetermineFrame {
	%orig;
	NSLog(@"-(CGRect) layoutSubviewsAndDetermineFrame");
}

-(void) scheduleAutomaticFadeout {
	%orig;
	NSLog(@"-(void) scheduleAutomaticFadeout");
}

-(void) animateFadeIn {
	%orig;
	NSLog(@"-(void) animateFadeIn");
}

-(void) cancelAllScheduledFadeOutMethods {
	%orig;
	NSLog(@"-(void) cancelAllScheduledFadeOutMethods");
}

-(void) animateFadeOutWithCompletion:(id) {
	%orig;
	NSLog(@"-(void) animateFadeOutWithCompletion:(id)");
}

-(void) scheduleFadeoutRespectingMinimumDisplayDuration {
	%orig;
	NSLog(@"-(void) scheduleFadeoutRespectingMinimumDisplayDuration");
}

-(id) initWithTagline:(id) message:(id) colorStyle:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithTagline:(id) message:(id) colorStyle:(unsigned long long)");
}

-(void) setTagline:(id) {
	%orig;
	NSLog(@"-(void) setTagline:(id)");
}

-(void) setColorStyle:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setColorStyle:(unsigned long long)");
}

-(unsigned long long) colorStyle {
	%orig;
	NSLog(@"-(unsigned long long) colorStyle");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook FBSDKLoginTooltipView

-(void) setForceDisplay:(bool) {
	%orig;
	NSLog(@"-(void) setForceDisplay:(bool)");
}

-(bool) forceDisplay {
	%orig;
	NSLog(@"-(bool) forceDisplay");
}

-(void) presentInView:(id) withArrowPosition:(CGPoint) direction:(unsigned long long) {
	%orig;
	NSLog(@"-(void) presentInView:(id) withArrowPosition:(CGPoint) direction:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook FBSDKWebDialogView

-(void) _close:(id) {
	%orig;
	NSLog(@"-(void) _close:(id)");
}

-(void) loadURL:(id) {
	%orig;
	NSLog(@"-(void) loadURL:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(void) webView:(id) didFailLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) webView:(id) didFailLoadWithError:(id)");
}

-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long) {
	%orig;
	NSLog(@"-(bool) webView:(id) shouldStartLoadWithRequest:(id) navigationType:(long long)");
}

-(void) webViewDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewDidFinishLoad:(id)");
}

-(void) stopLoading {
	%orig;
	NSLog(@"-(void) stopLoading");
}

%end

%hook FBSDKProfilePictureView

+(id) _imageURLWithState:(id) {
	%orig;
	NSLog(@"+(id) _imageURLWithState:(id)");
}

+(void) _downloadImageWithState:(id) completionBlock:(id) {
	%orig;
	NSLog(@"+(void) _downloadImageWithState:(id) completionBlock:(id)");
}

-(unsigned long long) pictureMode {
	%orig;
	NSLog(@"-(unsigned long long) pictureMode");
}

-(bool) _imageShouldFit {
	%orig;
	NSLog(@"-(bool) _imageShouldFit");
}

-(void) _configureProfilePictureView {
	%orig;
	NSLog(@"-(void) _configureProfilePictureView");
}

-(void) setNeedsImageUpdate {
	%orig;
	NSLog(@"-(void) setNeedsImageUpdate");
}

-(void) _setPlaceholderImage {
	%orig;
	NSLog(@"-(void) _setPlaceholderImage");
}

-(void) _needsImageUpdate {
	%orig;
	NSLog(@"-(void) _needsImageUpdate");
}

-(void) _accessTokenDidChangeNotification:(id) {
	%orig;
	NSLog(@"-(void) _accessTokenDidChangeNotification:(id)");
}

-(CGSize) _imageSize:(bool) scale:(double) {
	%orig;
	NSLog(@"-(CGSize) _imageSize:(bool) scale:(double)");
}

-(void) _updateImageWithData:(id) state:(id) {
	%orig;
	NSLog(@"-(void) _updateImageWithData:(id) state:(id)");
}

-(void) setProfileID:(id) {
	%orig;
	NSLog(@"-(void) setProfileID:(id)");
}

-(void) setPictureMode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setPictureMode:(unsigned long long)");
}

-(id) profileID {
	%orig;
	NSLog(@"-(id) profileID");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setContentMode:(long long) {
	%orig;
	NSLog(@"-(void) setContentMode:(long long)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(void) setMode:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMode:(unsigned long long)");
}

-(long long) contentMode {
	%orig;
	NSLog(@"-(long long) contentMode");
}

%end

%hook FBSDKAppLinkReturnToRefererView

-(void) setIncludeStatusBarInSize:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setIncludeStatusBarInSize:(unsigned long long)");
}

-(void) setRefererAppLink:(id) {
	%orig;
	NSLog(@"-(void) setRefererAppLink:(id)");
}

-(id) refererAppLink {
	%orig;
	NSLog(@"-(id) refererAppLink");
}

-(void) onTapInside:(id) {
	%orig;
	NSLog(@"-(void) onTapInside:(id)");
}

-(bool) hasRefererData {
	%orig;
	NSLog(@"-(bool) hasRefererData");
}

-(void) updateHidden {
	%orig;
	NSLog(@"-(void) updateHidden");
}

-(id) localizedLabelForReferer:(id) {
	%orig;
	NSLog(@"-(id) localizedLabelForReferer:(id)");
}

-(id) drawCloseButtonImageWithColor:(id) {
	%orig;
	NSLog(@"-(id) drawCloseButtonImageWithColor:(id)");
}

-(unsigned long long) includeStatusBarInSize {
	%orig;
	NSLog(@"-(unsigned long long) includeStatusBarInSize");
}

-(void) setLabelView:(id) {
	%orig;
	NSLog(@"-(void) setLabelView:(id)");
}

-(id) insideTapGestureRecognizer {
	%orig;
	NSLog(@"-(id) insideTapGestureRecognizer");
}

-(void) setInsideTapGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setInsideTapGestureRecognizer:(id)");
}

-(bool) closed {
	%orig;
	NSLog(@"-(bool) closed");
}

-(void) setClosed:(bool) {
	%orig;
	NSLog(@"-(void) setClosed:(bool)");
}

-(void) initViews {
	%orig;
	NSLog(@"-(void) initViews");
}

-(id) labelView {
	%orig;
	NSLog(@"-(id) labelView");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(void) closeButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) closeButtonTapped:(id)");
}

-(void) updateLabelText {
	%orig;
	NSLog(@"-(void) updateLabelText");
}

-(void) updateColors {
	%orig;
	NSLog(@"-(void) updateColors");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) setTextColor:(id) {
	%orig;
	NSLog(@"-(void) setTextColor:(id)");
}

-(id) textColor {
	%orig;
	NSLog(@"-(id) textColor");
}

-(double) statusBarHeight {
	%orig;
	NSLog(@"-(double) statusBarHeight");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook FBCombinedSecondaryView

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(id) socialContextLabel {
	%orig;
	NSLog(@"-(id) socialContextLabel");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(id) initWithFrame:(CGRect) nativeAd:(id) attributes:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) nativeAd:(id) attributes:(id)");
}

-(void) setSocialContextLabel:(id) {
	%orig;
	NSLog(@"-(void) setSocialContextLabel:(id)");
}

-(void) setRatingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setRatingEnabled:(bool)");
}

-(void) setSocialContextEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setSocialContextEnabled:(bool)");
}

-(CGRect) spareSpace {
	%orig;
	NSLog(@"-(CGRect) spareSpace");
}

-(void) setAdditionalYSpacing:(double) {
	%orig;
	NSLog(@"-(void) setAdditionalYSpacing:(double)");
}

-(double) additionalYSpacing {
	%orig;
	NSLog(@"-(double) additionalYSpacing");
}

-(bool) isFullRatingView {
	%orig;
	NSLog(@"-(bool) isFullRatingView");
}

-(void) setFullRatingView:(bool) {
	%orig;
	NSLog(@"-(void) setFullRatingView:(bool)");
}

-(bool) isRatingEnabled {
	%orig;
	NSLog(@"-(bool) isRatingEnabled");
}

-(void) setRatingEnabledInternal:(id) {
	%orig;
	NSLog(@"-(void) setRatingEnabledInternal:(id)");
}

-(bool) isSocialContextEnabled {
	%orig;
	NSLog(@"-(bool) isSocialContextEnabled");
}

-(void) setSocialContextEnabledInternal:(id) {
	%orig;
	NSLog(@"-(void) setSocialContextEnabledInternal:(id)");
}

-(void) setSocialContextEnabledLast:(bool) {
	%orig;
	NSLog(@"-(void) setSocialContextEnabledLast:(bool)");
}

-(void) setRatingEnabledLast:(bool) {
	%orig;
	NSLog(@"-(void) setRatingEnabledLast:(bool)");
}

-(void) createTitleLabel {
	%orig;
	NSLog(@"-(void) createTitleLabel");
}

-(void) createSocialContextView {
	%orig;
	NSLog(@"-(void) createSocialContextView");
}

-(bool) isSocialContextEnabledLast {
	%orig;
	NSLog(@"-(bool) isSocialContextEnabledLast");
}

-(bool) isRatingEnabledLast {
	%orig;
	NSLog(@"-(bool) isRatingEnabledLast");
}

-(id) isRatingEnabledInternal {
	%orig;
	NSLog(@"-(id) isRatingEnabledInternal");
}

-(id) isSocialContextEnabledInternal {
	%orig;
	NSLog(@"-(id) isSocialContextEnabledInternal");
}

-(void) createView {
	%orig;
	NSLog(@"-(void) createView");
}

-(void) updateTitle:(id) {
	%orig;
	NSLog(@"-(void) updateTitle:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(void) setAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAttributes:(id)");
}

-(void) resetView {
	%orig;
	NSLog(@"-(void) resetView");
}

%end

%hook FBAdBodyView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(id) socialContextLabel {
	%orig;
	NSLog(@"-(id) socialContextLabel");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(id) initWithFrame:(CGRect) nativeAd:(id) attributes:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) nativeAd:(id) attributes:(id)");
}

-(void) setAnimationEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAnimationEnabled:(bool)");
}

-(void) setRatingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setRatingEnabled:(bool)");
}

-(bool) socialContextEnabled {
	%orig;
	NSLog(@"-(bool) socialContextEnabled");
}

-(void) setSocialContextEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setSocialContextEnabled:(bool)");
}

-(CGRect) spareSpace {
	%orig;
	NSLog(@"-(CGRect) spareSpace");
}

-(void) setAdditionalYSpacing:(double) {
	%orig;
	NSLog(@"-(void) setAdditionalYSpacing:(double)");
}

-(void) calculateValues {
	%orig;
	NSLog(@"-(void) calculateValues");
}

-(CGRect) normalFrame {
	%orig;
	NSLog(@"-(CGRect) normalFrame");
}

-(CGRect) offscreenFrame {
	%orig;
	NSLog(@"-(CGRect) offscreenFrame");
}

-(double) miscMargin {
	%orig;
	NSLog(@"-(double) miscMargin");
}

-(id) firstContainerView {
	%orig;
	NSLog(@"-(id) firstContainerView");
}

-(void) setSecondaryCombinedView:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryCombinedView:(id)");
}

-(void) setTitleHeight:(double) {
	%orig;
	NSLog(@"-(void) setTitleHeight:(double)");
}

-(void) setMiscMargin:(double) {
	%orig;
	NSLog(@"-(void) setMiscMargin:(double)");
}

-(id) secondContainerView {
	%orig;
	NSLog(@"-(id) secondContainerView");
}

-(id) secondaryCombinedView {
	%orig;
	NSLog(@"-(id) secondaryCombinedView");
}

-(double) additionalYSpacing {
	%orig;
	NSLog(@"-(double) additionalYSpacing");
}

-(bool) isFullRatingView {
	%orig;
	NSLog(@"-(bool) isFullRatingView");
}

-(void) setFullRatingView:(bool) {
	%orig;
	NSLog(@"-(void) setFullRatingView:(bool)");
}

-(id) rotationTimer {
	%orig;
	NSLog(@"-(id) rotationTimer");
}

-(void) rotate {
	%orig;
	NSLog(@"-(void) rotate");
}

-(void) setRotationTimer:(id) {
	%orig;
	NSLog(@"-(void) setRotationTimer:(id)");
}

-(void) animateRotationWithCurrentView:(id) otherView:(id) {
	%orig;
	NSLog(@"-(void) animateRotationWithCurrentView:(id) otherView:(id)");
}

-(bool) isRatingEnabled {
	%orig;
	NSLog(@"-(bool) isRatingEnabled");
}

-(void) updateBodyTitle:(id) {
	%orig;
	NSLog(@"-(void) updateBodyTitle:(id)");
}

-(void) setFirstContainerView:(id) {
	%orig;
	NSLog(@"-(void) setFirstContainerView:(id)");
}

-(void) setSecondContainerView:(id) {
	%orig;
	NSLog(@"-(void) setSecondContainerView:(id)");
}

-(double) titleHeight {
	%orig;
	NSLog(@"-(double) titleHeight");
}

-(id) descriptionLabel {
	%orig;
	NSLog(@"-(id) descriptionLabel");
}

-(void) setDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionLabel:(id)");
}

-(CGRect) animationFrame {
	%orig;
	NSLog(@"-(CGRect) animationFrame");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) sizeToFit {
	%orig;
	NSLog(@"-(void) sizeToFit");
}

-(void) willMoveToWindow:(id) {
	%orig;
	NSLog(@"-(void) willMoveToWindow:(id)");
}

-(bool) isAnimationEnabled {
	%orig;
	NSLog(@"-(bool) isAnimationEnabled");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(void) setAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAttributes:(id)");
}

-(void) setRotated:(bool) {
	%orig;
	NSLog(@"-(void) setRotated:(bool)");
}

-(bool) isRotated {
	%orig;
	NSLog(@"-(bool) isRotated");
}

%end

%hook FBNativeAdDetailsView

-(void) setCallToActionButton:(id) {
	%orig;
	NSLog(@"-(void) setCallToActionButton:(id)");
}

-(id) callToActionButton {
	%orig;
	NSLog(@"-(id) callToActionButton");
}

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(id) initWithFrame:(CGRect) nativeAd:(id) attributes:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) nativeAd:(id) attributes:(id)");
}

-(bool) isBodyTextEnabled {
	%orig;
	NSLog(@"-(bool) isBodyTextEnabled");
}

-(void) setBodyTextEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setBodyTextEnabled:(bool)");
}

-(void) reinitializeView {
	%orig;
	NSLog(@"-(void) reinitializeView");
}

-(void) createView {
	%orig;
	NSLog(@"-(void) createView");
}

-(void) setLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setLoaded:(bool)");
}

-(id) bodyLabel {
	%orig;
	NSLog(@"-(id) bodyLabel");
}

-(void) setBodyLabel:(id) {
	%orig;
	NSLog(@"-(void) setBodyLabel:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(void) setAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAttributes:(id)");
}

-(id) iconImageView {
	%orig;
	NSLog(@"-(id) iconImageView");
}

-(void) setIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setIconImageView:(id)");
}

-(id) bodyView {
	%orig;
	NSLog(@"-(id) bodyView");
}

-(void) setBodyView:(id) {
	%orig;
	NSLog(@"-(void) setBodyView:(id)");
}

-(void) resetView {
	%orig;
	NSLog(@"-(void) resetView");
}

%end

%hook FBNativeAdHeaderView

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(id) initWithFrame:(CGRect) nativeAd:(id) attributes:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) nativeAd:(id) attributes:(id)");
}

-(id) headerBodyLabel {
	%orig;
	NSLog(@"-(id) headerBodyLabel");
}

-(void) setHeaderBodyLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderBodyLabel:(id)");
}

-(void) reinitializeView {
	%orig;
	NSLog(@"-(void) reinitializeView");
}

-(void) createView {
	%orig;
	NSLog(@"-(void) createView");
}

-(void) setLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setLoaded:(bool)");
}

-(void) setHeaderTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderTitleLabel:(id)");
}

-(id) headerTitleLabel {
	%orig;
	NSLog(@"-(id) headerTitleLabel");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(void) setAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAttributes:(id)");
}

-(void) resetView {
	%orig;
	NSLog(@"-(void) resetView");
}

%end

%hook FBAdVideoSkipButton

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithDuration:(?) withIconType:(long long) {
	%orig;
	NSLog(@"-(id) initWithDuration:(?) withIconType:(long long)");
}

-(double) completeRatio {
	%orig;
	NSLog(@"-(double) completeRatio");
}

-(long long) iconType {
	%orig;
	NSLog(@"-(long long) iconType");
}

-(void) setIconType:(long long) {
	%orig;
	NSLog(@"-(void) setIconType:(long long)");
}

-(void) setCurrentTime:(?) {
	%orig;
	NSLog(@"-(void) setCurrentTime:(?)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setDuration:(?) {
	%orig;
	NSLog(@"-(void) setDuration:(?)");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(void) setProgressColor:(id) {
	%orig;
	NSLog(@"-(void) setProgressColor:(id)");
}

-(id) progressColor {
	%orig;
	NSLog(@"-(id) progressColor");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

%end

%hook FBAdStarRatingView

-(id) initWithFrame:(CGRect) withStarRating:(FBAdStarRating) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) withStarRating:(FBAdStarRating)");
}

-(void) updateDrawingAttributesFromSize:(CGSize) {
	%orig;
	NSLog(@"-(void) updateDrawingAttributesFromSize:(CGSize)");
}

-(void) setXCenter:(double) {
	%orig;
	NSLog(@"-(void) setXCenter:(double)");
}

-(void) setYCenter:(double) {
	%orig;
	NSLog(@"-(void) setYCenter:(double)");
}

-(void) setXIncrement:(double) {
	%orig;
	NSLog(@"-(void) setXIncrement:(double)");
}

-(double) xCenter {
	%orig;
	NSLog(@"-(double) xCenter");
}

-(double) yCenter {
	%orig;
	NSLog(@"-(double) yCenter");
}

-(double) xIncrement {
	%orig;
	NSLog(@"-(double) xIncrement");
}

-(CGPoint) farthestPoint {
	%orig;
	NSLog(@"-(CGPoint) farthestPoint");
}

-(void) setFarthestPoint:(CGPoint) {
	%orig;
	NSLog(@"-(void) setFarthestPoint:(CGPoint)");
}

-(FBAdStarRating) rating {
	%orig;
	NSLog(@"-(FBAdStarRating) rating");
}

-(void) setRating:(FBAdStarRating) {
	%orig;
	NSLog(@"-(void) setRating:(FBAdStarRating)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(double) width {
	%orig;
	NSLog(@"-(double) width");
}

-(void) setWidth:(double) {
	%orig;
	NSLog(@"-(void) setWidth:(double)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(void) setPrimaryColor:(id) {
	%orig;
	NSLog(@"-(void) setPrimaryColor:(id)");
}

-(void) setSecondaryColor:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryColor:(id)");
}

-(id) primaryColor {
	%orig;
	NSLog(@"-(id) primaryColor");
}

-(id) secondaryColor {
	%orig;
	NSLog(@"-(id) secondaryColor");
}

%end

%hook FBInterstitialVideoAdCloseButton

-(double) completeRatio {
	%orig;
	NSLog(@"-(double) completeRatio");
}

-(void) setCurrentTime:(?) {
	%orig;
	NSLog(@"-(void) setCurrentTime:(?)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setDuration:(?) {
	%orig;
	NSLog(@"-(void) setDuration:(?)");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(void) setProgressColor:(id) {
	%orig;
	NSLog(@"-(void) setProgressColor:(id)");
}

-(id) progressColor {
	%orig;
	NSLog(@"-(id) progressColor");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(id) initWithDuration:(?) {
	%orig;
	NSLog(@"-(id) initWithDuration:(?)");
}

%end

%hook FBMediaViewVideoRenderer

-(void) loadNativeAd:(id) autoplayEnabled:(bool) loadedBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(void) loadNativeAd:(id) autoplayEnabled:(bool) loadedBlock:(id) failureBlock:(?)");
}

-(void) engageVideoSeek {
	%orig;
	NSLog(@"-(void) engageVideoSeek");
}

-(void) seekVideoToTime:(?) {
	%orig;
	NSLog(@"-(void) seekVideoToTime:(?)");
}

-(void) disengageVideoSeek {
	%orig;
	NSLog(@"-(void) disengageVideoSeek");
}

-(void) videoDidChangeVolume {
	%orig;
	NSLog(@"-(void) videoDidChangeVolume");
}

-(void) videoDidLoad {
	%orig;
	NSLog(@"-(void) videoDidLoad");
}

-(void) videoDidPause {
	%orig;
	NSLog(@"-(void) videoDidPause");
}

-(void) videoDidPlay {
	%orig;
	NSLog(@"-(void) videoDidPlay");
}

-(void) videoDidEngageSeek {
	%orig;
	NSLog(@"-(void) videoDidEngageSeek");
}

-(void) videoDidSeek {
	%orig;
	NSLog(@"-(void) videoDidSeek");
}

-(void) videoDidDisengageSeek {
	%orig;
	NSLog(@"-(void) videoDidDisengageSeek");
}

-(void) videoDidEnd {
	%orig;
	NSLog(@"-(void) videoDidEnd");
}

-(void) videoDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) videoDidFailWithError:(id)");
}

-(double) aspectRatio {
	%orig;
	NSLog(@"-(double) aspectRatio");
}

-(void) removeTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeTimeObserver:(id)");
}

-(id) addPeriodicTimeObserverForInterval:(?) queue:(id) usingBlock:(id) {
	%orig;
	NSLog(@"-(id) addPeriodicTimeObserverForInterval:(?) queue:(id) usingBlock:(id)");
}

-(void) pauseVideo {
	%orig;
	NSLog(@"-(void) pauseVideo");
}

-(void) playVideo {
	%orig;
	NSLog(@"-(void) playVideo");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(void) setVolume:(float) {
	%orig;
	NSLog(@"-(void) setVolume:(float)");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

%end

%hook FBMediaViewDefaultVideoRenderer

+(id) dateFormatter {
	%orig;
	NSLog(@"+(id) dateFormatter");
}

-(id) viewabilityValidator {
	%orig;
	NSLog(@"-(id) viewabilityValidator");
}

-(void) setViewabilityValidator:(id) {
	%orig;
	NSLog(@"-(void) setViewabilityValidator:(id)");
}

-(bool) viewabilityValidator:(id) checkedWithStatus:(long long) {
	%orig;
	NSLog(@"-(bool) viewabilityValidator:(id) checkedWithStatus:(long long)");
}

-(void) setInlineMode:(bool) {
	%orig;
	NSLog(@"-(void) setInlineMode:(bool)");
}

-(void) removeProgressTimeObserver {
	%orig;
	NSLog(@"-(void) removeProgressTimeObserver");
}

-(void) loadNativeAd:(id) autoplayEnabled:(bool) loadedBlock:(id) failureBlock:(?) {
	%orig;
	NSLog(@"-(void) loadNativeAd:(id) autoplayEnabled:(bool) loadedBlock:(id) failureBlock:(?)");
}

-(void) onVideoProgress {
	%orig;
	NSLog(@"-(void) onVideoProgress");
}

-(void) setProgressTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) setProgressTimeObserver:(id)");
}

-(bool) playbackSuspended {
	%orig;
	NSLog(@"-(bool) playbackSuspended");
}

-(void) setPlaybackSuspended:(bool) {
	%orig;
	NSLog(@"-(void) setPlaybackSuspended:(bool)");
}

-(bool) playerIsPlaying {
	%orig;
	NSLog(@"-(bool) playerIsPlaying");
}

-(void) setVideoCurrentlyShownToUser:(bool) {
	%orig;
	NSLog(@"-(void) setVideoCurrentlyShownToUser:(bool)");
}

-(bool) layoutBuilt {
	%orig;
	NSLog(@"-(bool) layoutBuilt");
}

-(void) setLayoutBuilt:(bool) {
	%orig;
	NSLog(@"-(void) setLayoutBuilt:(bool)");
}

-(void) startStopAction:(id) {
	%orig;
	NSLog(@"-(void) startStopAction:(id)");
}

-(void) videoScrubberChanged:(id) {
	%orig;
	NSLog(@"-(void) videoScrubberChanged:(id)");
}

-(void) videoScrubberTouchDown:(id) {
	%orig;
	NSLog(@"-(void) videoScrubberTouchDown:(id)");
}

-(void) videoScrubberTouchComplete:(id) {
	%orig;
	NSLog(@"-(void) videoScrubberTouchComplete:(id)");
}

-(void) addGestureRecognizers {
	%orig;
	NSLog(@"-(void) addGestureRecognizers");
}

-(id) remainingTimeLabelFromDate:(id) duration:(double) {
	%orig;
	NSLog(@"-(id) remainingTimeLabelFromDate:(id) duration:(double)");
}

-(void) setPlayerIsPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setPlayerIsPlaying:(bool)");
}

-(id) progressTimeObserver {
	%orig;
	NSLog(@"-(id) progressTimeObserver");
}

-(void) setupCoverImage {
	%orig;
	NSLog(@"-(void) setupCoverImage");
}

-(void) updateCoverImage {
	%orig;
	NSLog(@"-(void) updateCoverImage");
}

-(void) setControlSizeMultiplier:(double) {
	%orig;
	NSLog(@"-(void) setControlSizeMultiplier:(double)");
}

-(void) setScrubberEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setScrubberEnabled:(bool)");
}

-(void) setPlayPauseButtonEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setPlayPauseButtonEnabled:(bool)");
}

-(void) removeGestureRecognizers {
	%orig;
	NSLog(@"-(void) removeGestureRecognizers");
}

-(double) controlSizeMultiplier {
	%orig;
	NSLog(@"-(double) controlSizeMultiplier");
}

-(bool) isPlayPauseButtonEnabled {
	%orig;
	NSLog(@"-(bool) isPlayPauseButtonEnabled");
}

-(bool) isScrubberEnabled {
	%orig;
	NSLog(@"-(bool) isScrubberEnabled");
}

-(id) audioMetersView {
	%orig;
	NSLog(@"-(id) audioMetersView");
}

-(bool) inlineMode {
	%orig;
	NSLog(@"-(bool) inlineMode");
}

-(void) enableCoverImageIfNeeded {
	%orig;
	NSLog(@"-(void) enableCoverImageIfNeeded");
}

-(bool) volumeWasSet {
	%orig;
	NSLog(@"-(bool) volumeWasSet");
}

-(void) setVolumeWasSet:(bool) {
	%orig;
	NSLog(@"-(void) setVolumeWasSet:(bool)");
}

-(void) addProgressTimeObserver {
	%orig;
	NSLog(@"-(void) addProgressTimeObserver");
}

-(void) buildLayout {
	%orig;
	NSLog(@"-(void) buildLayout");
}

-(void) onVideoStopped {
	%orig;
	NSLog(@"-(void) onVideoStopped");
}

-(void) disableCoverImageIfNeeded {
	%orig;
	NSLog(@"-(void) disableCoverImageIfNeeded");
}

-(bool) videoCurrentlyShownToUser {
	%orig;
	NSLog(@"-(bool) videoCurrentlyShownToUser");
}

-(void) videoDidChangeVolume {
	%orig;
	NSLog(@"-(void) videoDidChangeVolume");
}

-(void) videoDidLoad {
	%orig;
	NSLog(@"-(void) videoDidLoad");
}

-(void) videoDidPause {
	%orig;
	NSLog(@"-(void) videoDidPause");
}

-(void) videoDidPlay {
	%orig;
	NSLog(@"-(void) videoDidPlay");
}

-(void) videoDidEngageSeek {
	%orig;
	NSLog(@"-(void) videoDidEngageSeek");
}

-(void) videoDidSeek {
	%orig;
	NSLog(@"-(void) videoDidSeek");
}

-(void) videoDidDisengageSeek {
	%orig;
	NSLog(@"-(void) videoDidDisengageSeek");
}

-(void) videoDidEnd {
	%orig;
	NSLog(@"-(void) videoDidEnd");
}

-(void) videoDidFailWithError:(id) {
	%orig;
	NSLog(@"-(void) videoDidFailWithError:(id)");
}

-(void) setAudioMetersView:(id) {
	%orig;
	NSLog(@"-(void) setAudioMetersView:(id)");
}

-(bool) isTapEnabled {
	%orig;
	NSLog(@"-(bool) isTapEnabled");
}

-(id) videoFullscreenController {
	%orig;
	NSLog(@"-(id) videoFullscreenController");
}

-(void) setVideoFullscreenController:(id) {
	%orig;
	NSLog(@"-(void) setVideoFullscreenController:(id)");
}

-(void) setVideoScrubber:(id) {
	%orig;
	NSLog(@"-(void) setVideoScrubber:(id)");
}

-(bool) autoplayEnabled {
	%orig;
	NSLog(@"-(bool) autoplayEnabled");
}

-(void) setAutoplayEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAutoplayEnabled:(bool)");
}

-(void) setPosterImage:(id) {
	%orig;
	NSLog(@"-(void) setPosterImage:(id)");
}

-(id) videoScrubber {
	%orig;
	NSLog(@"-(id) videoScrubber");
}

-(id) gradientView {
	%orig;
	NSLog(@"-(id) gradientView");
}

-(void) setGradientView:(id) {
	%orig;
	NSLog(@"-(void) setGradientView:(id)");
}

-(void) setTapGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setTapGestureRecognizer:(id)");
}

-(id) posterImage {
	%orig;
	NSLog(@"-(id) posterImage");
}

-(id) tapGestureRecognizer {
	%orig;
	NSLog(@"-(id) tapGestureRecognizer");
}

-(void) setTimeRemainingLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimeRemainingLabel:(id)");
}

-(id) timeRemainingLabel {
	%orig;
	NSLog(@"-(id) timeRemainingLabel");
}

-(void) setupView {
	%orig;
	NSLog(@"-(void) setupView");
}

-(id) playPauseButton {
	%orig;
	NSLog(@"-(id) playPauseButton");
}

-(void) setPlayPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayPauseButton:(id)");
}

-(void) removeAllObservers {
	%orig;
	NSLog(@"-(void) removeAllObservers");
}

-(void) setTapEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setTapEnabled:(bool)");
}

-(void) setPosterImageView:(id) {
	%orig;
	NSLog(@"-(void) setPosterImageView:(id)");
}

-(id) posterImageView {
	%orig;
	NSLog(@"-(id) posterImageView");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setObservers:(id) {
	%orig;
	NSLog(@"-(void) setObservers:(id)");
}

-(id) observers {
	%orig;
	NSLog(@"-(id) observers");
}

-(void) addObserver:(id) {
	%orig;
	NSLog(@"-(void) addObserver:(id)");
}

-(void) applicationDidBecomeActive {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive");
}

-(void) applicationWillResignActive {
	%orig;
	NSLog(@"-(void) applicationWillResignActive");
}

-(void) tap:(id) {
	%orig;
	NSLog(@"-(void) tap:(id)");
}

%end

%hook FBAdBlurredImageView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(void) setBlurredImage:(id) {
	%orig;
	NSLog(@"-(void) setBlurredImage:(id)");
}

-(id) initWithImage:(id) withBlurredImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id) withBlurredImage:(id)");
}

-(void) updateNeedsImageBlurring {
	%orig;
	NSLog(@"-(void) updateNeedsImageBlurring");
}

-(id) createImageRenderer {
	%orig;
	NSLog(@"-(id) createImageRenderer");
}

-(id) openGLImageRenderer {
	%orig;
	NSLog(@"-(id) openGLImageRenderer");
}

-(id) softwareImageRenderer {
	%orig;
	NSLog(@"-(id) softwareImageRenderer");
}

-(id) metalImageRenderer:(id) {
	%orig;
	NSLog(@"-(id) metalImageRenderer:(id)");
}

-(void) setupViewsWithImage:(id) withBlurredImage:(id) {
	%orig;
	NSLog(@"-(void) setupViewsWithImage:(id) withBlurredImage:(id)");
}

-(FBAspectRatioInfo) infoForRequestedSize:(CGSize) {
	%orig;
	NSLog(@"-(FBAspectRatioInfo) infoForRequestedSize:(CGSize)");
}

-(id) blurredImageView {
	%orig;
	NSLog(@"-(id) blurredImageView");
}

-(bool) isHardwareRenderingRestrictedDevice {
	%orig;
	NSLog(@"-(bool) isHardwareRenderingRestrictedDevice");
}

-(bool) needsImageBlurring {
	%orig;
	NSLog(@"-(bool) needsImageBlurring");
}

-(void) setNeedsImageBlurring:(bool) {
	%orig;
	NSLog(@"-(void) setNeedsImageBlurring:(bool)");
}

-(id) blurredImage {
	%orig;
	NSLog(@"-(id) blurredImage");
}

-(id) imageRenderer {
	%orig;
	NSLog(@"-(id) imageRenderer");
}

-(void) setImageRenderer:(id) {
	%orig;
	NSLog(@"-(void) setImageRenderer:(id)");
}

-(id) ciContext {
	%orig;
	NSLog(@"-(id) ciContext");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook FBGradientView

+(id) newWithColors:(id) {
	%orig;
	NSLog(@"+(id) newWithColors:(id)");
}

+(id) newWithBackgroundColor:(id) withColors:(id) withLocations:(id) withStartPoint:(CGPoint) withEndPoint:(CGPoint) withOpacity:(float) {
	%orig;
	NSLog(@"+(id) newWithBackgroundColor:(id) withColors:(id) withLocations:(id) withStartPoint:(CGPoint) withEndPoint:(CGPoint) withOpacity:(float)");
}

+(id) shadowGradientViewWithOpacity:(double) {
	%orig;
	NSLog(@"+(id) shadowGradientViewWithOpacity:(double)");
}

+(id) newWithColors:(id) withOpacity:(double) {
	%orig;
	NSLog(@"+(id) newWithColors:(id) withOpacity:(double)");
}

+(id) shadowGradientView {
	%orig;
	NSLog(@"+(id) shadowGradientView");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

+(Class) layerClass {
	%orig;
	NSLog(@"+(Class) layerClass");
}

-(void) updateGradientWithBackgroundColor:(id) withColors:(id) withLocations:(id) withStartPoint:(CGPoint) withEndPoint:(CGPoint) withOpacity:(float) {
	%orig;
	NSLog(@"-(void) updateGradientWithBackgroundColor:(id) withColors:(id) withLocations:(id) withStartPoint:(CGPoint) withEndPoint:(CGPoint) withOpacity:(float)");
}

-(id) _init {
	%orig;
	NSLog(@"-(id) _init");
}

%end

%hook FBRewardedVideoAdView

-(void) backgroundTapped:(id) {
	%orig;
	NSLog(@"-(void) backgroundTapped:(id)");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(id) rewardedVideoDataModel {
	%orig;
	NSLog(@"-(id) rewardedVideoDataModel");
}

-(long long) minViewabilityPercentage {
	%orig;
	NSLog(@"-(long long) minViewabilityPercentage");
}

-(void) setMinViewabilityPercentage:(long long) {
	%orig;
	NSLog(@"-(void) setMinViewabilityPercentage:(long long)");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) rootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adData:(id) minViewability:(int) rootViewController:(id)");
}

-(void) setSkippableTime:(?) {
	%orig;
	NSLog(@"-(void) setSkippableTime:(?)");
}

-(void) addProgressBar {
	%orig;
	NSLog(@"-(void) addProgressBar");
}

-(void) setAdDetailsView:(id) {
	%orig;
	NSLog(@"-(void) setAdDetailsView:(id)");
}

-(id) adDetailsView {
	%orig;
	NSLog(@"-(id) adDetailsView");
}

-(void) addPlayPauseButton {
	%orig;
	NSLog(@"-(void) addPlayPauseButton");
}

-(void) scheduleHideViews:(id) {
	%orig;
	NSLog(@"-(void) scheduleHideViews:(id)");
}

-(?) skippableTime {
	%orig;
	NSLog(@"-(?) skippableTime");
}

-(bool) skippable {
	%orig;
	NSLog(@"-(bool) skippable");
}

-(void) playPauseButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) playPauseButtonTapped:(id)");
}

-(void) toggleAll {
	%orig;
	NSLog(@"-(void) toggleAll");
}

-(?) skipRemainingTime {
	%orig;
	NSLog(@"-(?) skipRemainingTime");
}

-(void) cleanLayout {
	%orig;
	NSLog(@"-(void) cleanLayout");
}

-(void) cancelAnimateViews {
	%orig;
	NSLog(@"-(void) cancelAnimateViews");
}

-(id) toggleViewsTimer {
	%orig;
	NSLog(@"-(id) toggleViewsTimer");
}

-(void) setToggleViewsTimer:(id) {
	%orig;
	NSLog(@"-(void) setToggleViewsTimer:(id)");
}

-(void) animateHideViews:(id) {
	%orig;
	NSLog(@"-(void) animateHideViews:(id)");
}

-(void) toggleViews:(id) {
	%orig;
	NSLog(@"-(void) toggleViews:(id)");
}

-(void) animateShowViews:(id) {
	%orig;
	NSLog(@"-(void) animateShowViews:(id)");
}

-(void) addGradientView {
	%orig;
	NSLog(@"-(void) addGradientView");
}

-(void) addAdDetailsView {
	%orig;
	NSLog(@"-(void) addAdDetailsView");
}

-(void) addIconView {
	%orig;
	NSLog(@"-(void) addIconView");
}

-(void) addTitleView {
	%orig;
	NSLog(@"-(void) addTitleView");
}

-(void) addSubtitleView {
	%orig;
	NSLog(@"-(void) addSubtitleView");
}

-(void) addSkipButton {
	%orig;
	NSLog(@"-(void) addSkipButton");
}

-(void) dispatchVideoCached {
	%orig;
	NSLog(@"-(void) dispatchVideoCached");
}

-(id) skipButtonView {
	%orig;
	NSLog(@"-(id) skipButtonView");
}

-(void) addTimingObserver:(id) {
	%orig;
	NSLog(@"-(void) addTimingObserver:(id)");
}

-(id) timingObservers {
	%orig;
	NSLog(@"-(id) timingObservers");
}

-(void) skipButtonViewTapped:(id) {
	%orig;
	NSLog(@"-(void) skipButtonViewTapped:(id)");
}

-(void) setSkipButtonView:(id) {
	%orig;
	NSLog(@"-(void) setSkipButtonView:(id)");
}

-(void) removeAllTimingObservers {
	%orig;
	NSLog(@"-(void) removeAllTimingObservers");
}

-(void) dispatchVideoEndedWithSuccess:(bool) error:(id) {
	%orig;
	NSLog(@"-(void) dispatchVideoEndedWithSuccess:(bool) error:(id)");
}

-(void) clearSubviews {
	%orig;
	NSLog(@"-(void) clearSubviews");
}

-(void) setTimingObservers:(id) {
	%orig;
	NSLog(@"-(void) setTimingObservers:(id)");
}

-(id) adapter {
	%orig;
	NSLog(@"-(id) adapter");
}

-(id) titleText {
	%orig;
	NSLog(@"-(id) titleText");
}

-(id) videoView {
	%orig;
	NSLog(@"-(id) videoView");
}

-(void) setVideoView:(id) {
	%orig;
	NSLog(@"-(void) setVideoView:(id)");
}

-(id) iconView {
	%orig;
	NSLog(@"-(id) iconView");
}

-(void) setIconView:(id) {
	%orig;
	NSLog(@"-(void) setIconView:(id)");
}

-(id) gradientView {
	%orig;
	NSLog(@"-(id) gradientView");
}

-(void) setGradientView:(id) {
	%orig;
	NSLog(@"-(void) setGradientView:(id)");
}

-(void) setCurrentTime:(?) {
	%orig;
	NSLog(@"-(void) setCurrentTime:(?)");
}

-(id) player {
	%orig;
	NSLog(@"-(id) player");
}

-(void) setPlayer:(id) {
	%orig;
	NSLog(@"-(void) setPlayer:(id)");
}

-(id) playerItem {
	%orig;
	NSLog(@"-(id) playerItem");
}

-(void) setPlayerItem:(id) {
	%orig;
	NSLog(@"-(void) setPlayerItem:(id)");
}

-(void) setSubtitleView:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleView:(id)");
}

-(id) subtitleView {
	%orig;
	NSLog(@"-(id) subtitleView");
}

-(id) progressBar {
	%orig;
	NSLog(@"-(id) progressBar");
}

-(void) setProgressBar:(id) {
	%orig;
	NSLog(@"-(void) setProgressBar:(id)");
}

-(void) playVideo {
	%orig;
	NSLog(@"-(void) playVideo");
}

-(void) setupNotifications {
	%orig;
	NSLog(@"-(void) setupNotifications");
}

-(id) playPauseButton {
	%orig;
	NSLog(@"-(id) playPauseButton");
}

-(void) setPlayPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayPauseButton:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(void) setRootViewController:(id) {
	%orig;
	NSLog(@"-(void) setRootViewController:(id)");
}

-(void) setDuration:(?) {
	%orig;
	NSLog(@"-(void) setDuration:(?)");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(id) titleView {
	%orig;
	NSLog(@"-(id) titleView");
}

-(void) setTitleView:(id) {
	%orig;
	NSLog(@"-(void) setTitleView:(id)");
}

-(void) setPaused:(bool) {
	%orig;
	NSLog(@"-(void) setPaused:(bool)");
}

-(long long) orientation {
	%orig;
	NSLog(@"-(long long) orientation");
}

-(void) setAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setAnimating:(bool)");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(void) setOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setOrientation:(long long)");
}

-(bool) animating {
	%orig;
	NSLog(@"-(bool) animating");
}

-(void) setTitleText:(id) {
	%orig;
	NSLog(@"-(void) setTitleText:(id)");
}

-(bool) paused {
	%orig;
	NSLog(@"-(bool) paused");
}

%end

%hook FBAdScrollView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(void) setAnimationEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAnimationEnabled:(bool)");
}

-(void) commonInitialization {
	%orig;
	NSLog(@"-(void) commonInitialization");
}

-(void) setupScrollViewSize {
	%orig;
	NSLog(@"-(void) setupScrollViewSize");
}

-(void) setupContentSize {
	%orig;
	NSLog(@"-(void) setupContentSize");
}

-(void) loadPages {
	%orig;
	NSLog(@"-(void) loadPages");
}

-(id) hitTestView {
	%orig;
	NSLog(@"-(id) hitTestView");
}

-(void) loadPage:(unsigned long long) {
	%orig;
	NSLog(@"-(void) loadPage:(unsigned long long)");
}

-(unsigned long long) maximumNativeAdCount {
	%orig;
	NSLog(@"-(unsigned long long) maximumNativeAdCount");
}

-(void) populate:(id) forIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) populate:(id) forIndex:(unsigned long long)");
}

-(id) nativeAdForView:(id) {
	%orig;
	NSLog(@"-(id) nativeAdForView:(id)");
}

-(void) detachAllNativeAds:(id) {
	%orig;
	NSLog(@"-(void) detachAllNativeAds:(id)");
}

-(id) childViewProvider {
	%orig;
	NSLog(@"-(id) childViewProvider");
}

-(void) setChildViewProvider:(id) {
	%orig;
	NSLog(@"-(void) setChildViewProvider:(id)");
}

-(void) setHitTestView:(id) {
	%orig;
	NSLog(@"-(void) setHitTestView:(id)");
}

-(id) cellViews {
	%orig;
	NSLog(@"-(id) cellViews");
}

-(void) addAllCells {
	%orig;
	NSLog(@"-(void) addAllCells");
}

-(CGRect) scrollFrame {
	%orig;
	NSLog(@"-(CGRect) scrollFrame");
}

-(void) positionGradient {
	%orig;
	NSLog(@"-(void) positionGradient");
}

-(void) repositionScrollView {
	%orig;
	NSLog(@"-(void) repositionScrollView");
}

-(double) paddingTotal {
	%orig;
	NSLog(@"-(double) paddingTotal");
}

-(id) leftGradientView {
	%orig;
	NSLog(@"-(id) leftGradientView");
}

-(id) rightGradientView {
	%orig;
	NSLog(@"-(id) rightGradientView");
}

-(void) animateWithFade:(bool) view:(id) animations:(id) completion:(?) {
	%orig;
	NSLog(@"-(void) animateWithFade:(bool) view:(id) animations:(id) completion:(?)");
}

-(double) paddingforPage:(unsigned long long) {
	%orig;
	NSLog(@"-(double) paddingforPage:(unsigned long long)");
}

-(unsigned long long) addCellForData:(id) withPosition:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) addCellForData:(id) withPosition:(unsigned long long)");
}

-(id) childViewForData:(id) withPosition:(unsigned long long) {
	%orig;
	NSLog(@"-(id) childViewForData:(id) withPosition:(unsigned long long)");
}

-(void) mapData:(id) toView:(id) {
	%orig;
	NSLog(@"-(void) mapData:(id) toView:(id)");
}

-(id) cellMapping {
	%orig;
	NSLog(@"-(id) cellMapping");
}

-(void) removeAllCells:(id) {
	%orig;
	NSLog(@"-(void) removeAllCells:(id)");
}

-(void) setCellMapping:(id) {
	%orig;
	NSLog(@"-(void) setCellMapping:(id)");
}

-(void) setCellViews:(id) {
	%orig;
	NSLog(@"-(void) setCellViews:(id)");
}

-(id) initWithCellData:(id) withViewProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithCellData:(id) withViewProvider:(id)");
}

-(unsigned long long) indexForData:(id) {
	%orig;
	NSLog(@"-(unsigned long long) indexForData:(id)");
}

-(id) viewForData:(id) {
	%orig;
	NSLog(@"-(id) viewForData:(id)");
}

-(void) setYInset:(double) {
	%orig;
	NSLog(@"-(void) setYInset:(double)");
}

-(void) setLeftGradientView:(id) {
	%orig;
	NSLog(@"-(void) setLeftGradientView:(id)");
}

-(void) setRightGradientView:(id) {
	%orig;
	NSLog(@"-(void) setRightGradientView:(id)");
}

-(double) yInset {
	%orig;
	NSLog(@"-(double) yInset");
}

-(double) xInset {
	%orig;
	NSLog(@"-(double) xInset");
}

-(void) setXInset:(double) {
	%orig;
	NSLog(@"-(void) setXInset:(double)");
}

-(void) setLoading:(bool) {
	%orig;
	NSLog(@"-(void) setLoading:(bool)");
}

-(bool) debugMode {
	%orig;
	NSLog(@"-(bool) debugMode");
}

-(void) setDebugMode:(bool) {
	%orig;
	NSLog(@"-(void) setDebugMode:(bool)");
}

-(void) removeAllCells {
	%orig;
	NSLog(@"-(void) removeAllCells");
}

-(double) ratio {
	%orig;
	NSLog(@"-(double) ratio");
}

-(void) loadCells {
	%orig;
	NSLog(@"-(void) loadCells");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(unsigned long long) count {
	%orig;
	NSLog(@"-(unsigned long long) count");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewDidZoom:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidZoom:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewWillBeginDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDecelerating:(id)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(id) viewForZoomingInScrollView:(id) {
	%orig;
	NSLog(@"-(id) viewForZoomingInScrollView:(id)");
}

-(void) scrollViewWillBeginZooming:(id) withView:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginZooming:(id) withView:(id)");
}

-(void) scrollViewDidEndZooming:(id) withView:(id) atScale:(double) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndZooming:(id) withView:(id) atScale:(double)");
}

-(bool) scrollViewShouldScrollToTop:(id) {
	%orig;
	NSLog(@"-(bool) scrollViewShouldScrollToTop:(id)");
}

-(void) scrollViewDidScrollToTop:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScrollToTop:(id)");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

-(bool) isAnimationEnabled {
	%orig;
	NSLog(@"-(bool) isAnimationEnabled");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(void) setData:(id) {
	%orig;
	NSLog(@"-(void) setData:(id)");
}

-(bool) isLoading {
	%orig;
	NSLog(@"-(bool) isLoading");
}

%end

%hook FBAdMultiProductView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(void) setLoadedWasCalled:(bool) {
	%orig;
	NSLog(@"-(void) setLoadedWasCalled:(bool)");
}

-(id) multiProductAds {
	%orig;
	NSLog(@"-(id) multiProductAds");
}

-(bool) loadedWasCalled {
	%orig;
	NSLog(@"-(bool) loadedWasCalled");
}

-(id) impressionBlock {
	%orig;
	NSLog(@"-(id) impressionBlock");
}

-(id) clickBlock {
	%orig;
	NSLog(@"-(id) clickBlock");
}

-(void) multiProductCellLoaded:(id) {
	%orig;
	NSLog(@"-(void) multiProductCellLoaded:(id)");
}

-(void) multiProductCellVisible:(id) {
	%orig;
	NSLog(@"-(void) multiProductCellVisible:(id)");
}

-(void) multiProductCellClicked:(id) withPosition:(CGPoint) inRect:(CGRect) {
	%orig;
	NSLog(@"-(void) multiProductCellClicked:(id) withPosition:(CGPoint) inRect:(CGRect)");
}

-(void) setMultiProductAds:(id) withImpressionHandler:(id) withClickHandler:(?) {
	%orig;
	NSLog(@"-(void) setMultiProductAds:(id) withImpressionHandler:(id) withClickHandler:(?)");
}

-(void) setMultiProductAds:(id) {
	%orig;
	NSLog(@"-(void) setMultiProductAds:(id)");
}

-(void) setImpressionBlock:(id) {
	%orig;
	NSLog(@"-(void) setImpressionBlock:(id)");
}

-(void) setClickBlock:(id) {
	%orig;
	NSLog(@"-(void) setClickBlock:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

%end

%hook FBAdVideoProgressBar

-(void) setCurrentTime:(?) {
	%orig;
	NSLog(@"-(void) setCurrentTime:(?)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setDuration:(?) {
	%orig;
	NSLog(@"-(void) setDuration:(?)");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(void) setProgressColor:(id) {
	%orig;
	NSLog(@"-(void) setProgressColor:(id)");
}

-(id) progressColor {
	%orig;
	NSLog(@"-(id) progressColor");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

%end

%hook FBAdChoicesView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) initWithNativeAd:(id) expandable:(bool) {
	%orig;
	NSLog(@"-(id) initWithNativeAd:(id) expandable:(bool)");
}

-(void) updateFrameFromSuperview:(unsigned long long) {
	%orig;
	NSLog(@"-(void) updateFrameFromSuperview:(unsigned long long)");
}

-(id) inlineClientToken {
	%orig;
	NSLog(@"-(id) inlineClientToken");
}

-(void) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) viewControllerDismissed:(id)");
}

-(void) willPresentViewController:(id) {
	%orig;
	NSLog(@"-(void) willPresentViewController:(id)");
}

-(void) viewControllerCompleted:(id) {
	%orig;
	NSLog(@"-(void) viewControllerCompleted:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(void) setBackgroundShown:(bool) {
	%orig;
	NSLog(@"-(void) setBackgroundShown:(bool)");
}

-(id) initWithNativeAd:(id) expandable:(bool) attributes:(id) {
	%orig;
	NSLog(@"-(id) initWithNativeAd:(id) expandable:(bool) attributes:(id)");
}

-(void) updateFrameFromSuperview {
	%orig;
	NSLog(@"-(void) updateFrameFromSuperview");
}

-(id) adChoicesIcon {
	%orig;
	NSLog(@"-(id) adChoicesIcon");
}

-(id) adChoicesLinkURL {
	%orig;
	NSLog(@"-(id) adChoicesLinkURL");
}

-(id) adChoicesText {
	%orig;
	NSLog(@"-(id) adChoicesText");
}

-(id) initWithViewController:(id) inlineClientToken:(id) adChoicesIcon:(id) adChoicesLinkURL:(id) adChoicesText:(id) attributes:(id) expandable:(bool) {
	%orig;
	NSLog(@"-(id) initWithViewController:(id) inlineClientToken:(id) adChoicesIcon:(id) adChoicesLinkURL:(id) adChoicesText:(id) attributes:(id) expandable:(bool)");
}

-(id) initWithNativeAd:(id) {
	%orig;
	NSLog(@"-(id) initWithNativeAd:(id)");
}

-(void) updateViewsWithViewController:(id) inlineClientToken:(id) adChoicesIcon:(id) adChoicesLinkURL:(id) adChoicesText:(id) attributes:(id) expandable:(bool) initialized:(bool) {
	%orig;
	NSLog(@"-(void) updateViewsWithViewController:(id) inlineClientToken:(id) adChoicesIcon:(id) adChoicesLinkURL:(id) adChoicesText:(id) attributes:(id) expandable:(bool) initialized:(bool)");
}

-(id) sponsoredImageView {
	%orig;
	NSLog(@"-(id) sponsoredImageView");
}

-(unsigned long long) corner {
	%orig;
	NSLog(@"-(unsigned long long) corner");
}

-(double) extensionAmount {
	%orig;
	NSLog(@"-(double) extensionAmount");
}

-(void) setSponsoredImageView:(id) {
	%orig;
	NSLog(@"-(void) setSponsoredImageView:(id)");
}

-(id) generateLabel {
	%orig;
	NSLog(@"-(id) generateLabel");
}

-(void) updateMask {
	%orig;
	NSLog(@"-(void) updateMask");
}

-(void) extend:(bool) animate:(bool) persistChanges:(bool) {
	%orig;
	NSLog(@"-(void) extend:(bool) animate:(bool) persistChanges:(bool)");
}

-(void) sponsoredImageTapped:(id) {
	%orig;
	NSLog(@"-(void) sponsoredImageTapped:(id)");
}

-(void) setCorner:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCorner:(unsigned long long)");
}

-(bool) isAdChoicesIconAvailable {
	%orig;
	NSLog(@"-(bool) isAdChoicesIconAvailable");
}

-(void) setExtended:(bool) {
	%orig;
	NSLog(@"-(void) setExtended:(bool)");
}

-(unsigned long long) maskCornerForCurrentState {
	%orig;
	NSLog(@"-(unsigned long long) maskCornerForCurrentState");
}

-(void) checkInvalidCorner:(unsigned long long) {
	%orig;
	NSLog(@"-(void) checkInvalidCorner:(unsigned long long)");
}

-(double) relativeWidthForAdSize:(CGSize) forCorner:(unsigned long long) {
	%orig;
	NSLog(@"-(double) relativeWidthForAdSize:(CGSize) forCorner:(unsigned long long)");
}

-(double) relativeHeightForAdSize:(CGSize) forCorner:(unsigned long long) {
	%orig;
	NSLog(@"-(double) relativeHeightForAdSize:(CGSize) forCorner:(unsigned long long)");
}

-(void) updateViewsFromNativeAd:(id) {
	%orig;
	NSLog(@"-(void) updateViewsFromNativeAd:(id)");
}

-(void) updateAdChoicesInfoFromNativeAd:(id) {
	%orig;
	NSLog(@"-(void) updateAdChoicesInfoFromNativeAd:(id)");
}

-(bool) isBackgroundShown {
	%orig;
	NSLog(@"-(bool) isBackgroundShown");
}

-(void) setExpandable:(bool) {
	%orig;
	NSLog(@"-(void) setExpandable:(bool)");
}

-(id) adChoicesBrowserController {
	%orig;
	NSLog(@"-(id) adChoicesBrowserController");
}

-(void) setAdChoicesBrowserController:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesBrowserController:(id)");
}

-(bool) isExpandable {
	%orig;
	NSLog(@"-(bool) isExpandable");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(void) setAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAttributes:(id)");
}

-(bool) isAnimating {
	%orig;
	NSLog(@"-(bool) isAnimating");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setAnimating:(bool)");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

-(bool) isExtended {
	%orig;
	NSLog(@"-(bool) isExtended");
}

-(CGRect) labelFrame {
	%orig;
	NSLog(@"-(CGRect) labelFrame");
}

%end

%hook FBNativeAdScrollView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) nativeAdWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) nativeAdWillLogImpression:(id)");
}

-(void) nativeAdDidClick:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidClick:(id)");
}

-(void) nativeAdDidFinishHandlingClick:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidFinishHandlingClick:(id)");
}

-(void) setAnimationEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAnimationEnabled:(bool)");
}

-(id) initWithNativeAdsManager:(id) withType:(long long) withAttributes:(id) {
	%orig;
	NSLog(@"-(id) initWithNativeAdsManager:(id) withType:(long long) withAttributes:(id)");
}

-(id) initWithNativeAdsManager:(id) withType:(long long) withAttributes:(id) withMaximum:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithNativeAdsManager:(id) withType:(long long) withAttributes:(id) withMaximum:(unsigned long long)");
}

-(id) initWithNativeAdsManager:(id) withViewProvider:(id) {
	%orig;
	NSLog(@"-(id) initWithNativeAdsManager:(id) withViewProvider:(id)");
}

-(id) initWithNativeAdsManager:(id) withViewProvider:(id) withMaximum:(?) {
	%orig;
	NSLog(@"-(id) initWithNativeAdsManager:(id) withViewProvider:(id) withMaximum:(?)");
}

-(void) commonInitialization {
	%orig;
	NSLog(@"-(void) commonInitialization");
}

-(void) loadAds {
	%orig;
	NSLog(@"-(void) loadAds");
}

-(id) nativeAdViews {
	%orig;
	NSLog(@"-(id) nativeAdViews");
}

-(void) setLoadingAds:(bool) {
	%orig;
	NSLog(@"-(void) setLoadingAds:(bool)");
}

-(void) removeAllNativeAds {
	%orig;
	NSLog(@"-(void) removeAllNativeAds");
}

-(void) addAllNativeAds {
	%orig;
	NSLog(@"-(void) addAllNativeAds");
}

-(void) setupScrollViewSize {
	%orig;
	NSLog(@"-(void) setupScrollViewSize");
}

-(void) setupContentSize {
	%orig;
	NSLog(@"-(void) setupContentSize");
}

-(void) loadPages {
	%orig;
	NSLog(@"-(void) loadPages");
}

-(id) hitTestView {
	%orig;
	NSLog(@"-(id) hitTestView");
}

-(unsigned long long) nativeAdCount {
	%orig;
	NSLog(@"-(unsigned long long) nativeAdCount");
}

-(void) loadPage:(unsigned long long) {
	%orig;
	NSLog(@"-(void) loadPage:(unsigned long long)");
}

-(unsigned long long) maximumNativeAdCount {
	%orig;
	NSLog(@"-(unsigned long long) maximumNativeAdCount");
}

-(bool) isAdPersistenceEnabled {
	%orig;
	NSLog(@"-(bool) isAdPersistenceEnabled");
}

-(unsigned long long) addNativeAd:(id) withPosition:(unsigned long long) {
	%orig;
	NSLog(@"-(unsigned long long) addNativeAd:(id) withPosition:(unsigned long long)");
}

-(void) registerNativeAd:(id) {
	%orig;
	NSLog(@"-(void) registerNativeAd:(id)");
}

-(id) childViewForNativeAd:(id) withPosition:(unsigned long long) {
	%orig;
	NSLog(@"-(id) childViewForNativeAd:(id) withPosition:(unsigned long long)");
}

-(void) mapNativeAd:(id) toView:(id) {
	%orig;
	NSLog(@"-(void) mapNativeAd:(id) toView:(id)");
}

-(void) populate:(id) forIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) populate:(id) forIndex:(unsigned long long)");
}

-(id) nativeAdForView:(id) {
	%orig;
	NSLog(@"-(id) nativeAdForView:(id)");
}

-(id) nativeAdMapping {
	%orig;
	NSLog(@"-(id) nativeAdMapping");
}

-(id) viewForNativeAd:(id) {
	%orig;
	NSLog(@"-(id) viewForNativeAd:(id)");
}

-(void) removeAllNativeAds:(id) {
	%orig;
	NSLog(@"-(void) removeAllNativeAds:(id)");
}

-(void) unregisterAllNativeAds:(id) {
	%orig;
	NSLog(@"-(void) unregisterAllNativeAds:(id)");
}

-(void) detachAllNativeAds:(id) {
	%orig;
	NSLog(@"-(void) detachAllNativeAds:(id)");
}

-(void) setNativeAdMapping:(id) {
	%orig;
	NSLog(@"-(void) setNativeAdMapping:(id)");
}

-(void) setNativeAdViews:(id) {
	%orig;
	NSLog(@"-(void) setNativeAdViews:(id)");
}

-(id) initWithNativeAdsManager:(id) withType:(long long) {
	%orig;
	NSLog(@"-(id) initWithNativeAdsManager:(id) withType:(long long)");
}

-(unsigned long long) indexForNativeAd:(id) {
	%orig;
	NSLog(@"-(unsigned long long) indexForNativeAd:(id)");
}

-(void) registerNativeAds:(id) {
	%orig;
	NSLog(@"-(void) registerNativeAds:(id)");
}

-(void) unregisterAllNativeAds {
	%orig;
	NSLog(@"-(void) unregisterAllNativeAds");
}

-(id) nativeAds {
	%orig;
	NSLog(@"-(id) nativeAds");
}

-(void) setMaximumNativeAdCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMaximumNativeAdCount:(unsigned long long)");
}

-(void) setAdPersistenceEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAdPersistenceEnabled:(bool)");
}

-(id) childViewProvider {
	%orig;
	NSLog(@"-(id) childViewProvider");
}

-(void) setChildViewProvider:(id) {
	%orig;
	NSLog(@"-(void) setChildViewProvider:(id)");
}

-(void) setHitTestView:(id) {
	%orig;
	NSLog(@"-(void) setHitTestView:(id)");
}

-(bool) isLoadingAds {
	%orig;
	NSLog(@"-(bool) isLoadingAds");
}

-(double) xInset {
	%orig;
	NSLog(@"-(double) xInset");
}

-(void) setXInset:(double) {
	%orig;
	NSLog(@"-(void) setXInset:(double)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

-(bool) isAnimationEnabled {
	%orig;
	NSLog(@"-(bool) isAnimationEnabled");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(id) manager {
	%orig;
	NSLog(@"-(id) manager");
}

-(void) setManager:(id) {
	%orig;
	NSLog(@"-(void) setManager:(id)");
}

%end

%hook FBVideoAdContentView

+(id) timeStringFromDate:(id) duration:(double) {
	%orig;
	NSLog(@"+(id) timeStringFromDate:(id) duration:(double)");
}

+(id) dateFormatter {
	%orig;
	NSLog(@"+(id) dateFormatter");
}

-(void) loadAdFromDataModel:(id) {
	%orig;
	NSLog(@"-(void) loadAdFromDataModel:(id)");
}

-(bool) skippable {
	%orig;
	NSLog(@"-(bool) skippable");
}

-(?) skipRemainingTime {
	%orig;
	NSLog(@"-(?) skipRemainingTime");
}

-(void) startFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) startFromRootViewController:(id)");
}

-(bool) isAutoplay {
	%orig;
	NSLog(@"-(bool) isAutoplay");
}

-(id) countdownFormat {
	%orig;
	NSLog(@"-(id) countdownFormat");
}

-(bool) countdownEnabled {
	%orig;
	NSLog(@"-(bool) countdownEnabled");
}

-(void) setCountdownEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setCountdownEnabled:(bool)");
}

-(void) setCountdownFormat:(id) {
	%orig;
	NSLog(@"-(void) setCountdownFormat:(id)");
}

-(id) formattedCountdownFromRemainingSeconds:(unsigned long long) {
	%orig;
	NSLog(@"-(id) formattedCountdownFromRemainingSeconds:(unsigned long long)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

%end

%hook FBInstreamAdContentView

-(id) countdownView {
	%orig;
	NSLog(@"-(id) countdownView");
}

-(void) setCountdownView:(id) {
	%orig;
	NSLog(@"-(void) setCountdownView:(id)");
}

-(id) inlineClientToken {
	%orig;
	NSLog(@"-(id) inlineClientToken");
}

-(void) setInlineClientToken:(id) {
	%orig;
	NSLog(@"-(void) setInlineClientToken:(id)");
}

-(id) adChoicesIcon {
	%orig;
	NSLog(@"-(id) adChoicesIcon");
}

-(void) loadAdFromDataModel:(id) {
	%orig;
	NSLog(@"-(void) loadAdFromDataModel:(id)");
}

-(void) setSkippableTime:(?) {
	%orig;
	NSLog(@"-(void) setSkippableTime:(?)");
}

-(void) addAdChoicesView {
	%orig;
	NSLog(@"-(void) addAdChoicesView");
}

-(?) skippableTime {
	%orig;
	NSLog(@"-(?) skippableTime");
}

-(bool) skippable {
	%orig;
	NSLog(@"-(bool) skippable");
}

-(void) setAdChoicesIcon:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesIcon:(id)");
}

-(void) setAdChoicesView:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesView:(id)");
}

-(id) adChoicesView {
	%orig;
	NSLog(@"-(id) adChoicesView");
}

-(?) skipRemainingTime {
	%orig;
	NSLog(@"-(?) skipRemainingTime");
}

-(void) cleanLayout {
	%orig;
	NSLog(@"-(void) cleanLayout");
}

-(void) videoViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) videoViewDidLoad:(id)");
}

-(void) videoViewTapped:(id) {
	%orig;
	NSLog(@"-(void) videoViewTapped:(id)");
}

-(void) videoViewDidProgress:(id) {
	%orig;
	NSLog(@"-(void) videoViewDidProgress:(id)");
}

-(void) videoViewDidEnd:(id) {
	%orig;
	NSLog(@"-(void) videoViewDidEnd:(id)");
}

-(void) videoView:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) videoView:(id) didFailWithError:(id)");
}

-(void) adChoicesView:(id) willPresentViewController:(id) {
	%orig;
	NSLog(@"-(void) adChoicesView:(id) willPresentViewController:(id)");
}

-(void) adChoicesView:(id) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) adChoicesView:(id) viewControllerDismissed:(id)");
}

-(void) startFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) startFromRootViewController:(id)");
}

-(bool) isAutoplay {
	%orig;
	NSLog(@"-(bool) isAutoplay");
}

-(unsigned long long) skipRemainingSeconds {
	%orig;
	NSLog(@"-(unsigned long long) skipRemainingSeconds");
}

-(void) addSkipButton {
	%orig;
	NSLog(@"-(void) addSkipButton");
}

-(id) skipButtonView {
	%orig;
	NSLog(@"-(id) skipButtonView");
}

-(void) skipButtonViewTapped:(id) {
	%orig;
	NSLog(@"-(void) skipButtonViewTapped:(id)");
}

-(void) setSkipButtonView:(id) {
	%orig;
	NSLog(@"-(void) setSkipButtonView:(id)");
}

-(void) setLastRemainingTimeSeconds:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLastRemainingTimeSeconds:(unsigned long long)");
}

-(void) setDestinationAvailable:(bool) {
	%orig;
	NSLog(@"-(void) setDestinationAvailable:(bool)");
}

-(void) addCountdownView {
	%orig;
	NSLog(@"-(void) addCountdownView");
}

-(void) addLearnMoreView {
	%orig;
	NSLog(@"-(void) addLearnMoreView");
}

-(id) learnMoreView {
	%orig;
	NSLog(@"-(id) learnMoreView");
}

-(void) updateCountdownText {
	%orig;
	NSLog(@"-(void) updateCountdownText");
}

-(bool) destinationAvailable {
	%orig;
	NSLog(@"-(bool) destinationAvailable");
}

-(void) setLearnMoreView:(id) {
	%orig;
	NSLog(@"-(void) setLearnMoreView:(id)");
}

-(void) learnMoreViewTapped:(id) {
	%orig;
	NSLog(@"-(void) learnMoreViewTapped:(id)");
}

-(unsigned long long) lastRemainingTimeSeconds {
	%orig;
	NSLog(@"-(unsigned long long) lastRemainingTimeSeconds");
}

-(void) updateSkipButtonRemainingTime {
	%orig;
	NSLog(@"-(void) updateSkipButtonRemainingTime");
}

-(id) videoView {
	%orig;
	NSLog(@"-(id) videoView");
}

-(void) setVideoView:(id) {
	%orig;
	NSLog(@"-(void) setVideoView:(id)");
}

-(void) removeObservers {
	%orig;
	NSLog(@"-(void) removeObservers");
}

-(void) addObservers {
	%orig;
	NSLog(@"-(void) addObservers");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(void) setRootViewController:(id) {
	%orig;
	NSLog(@"-(void) setRootViewController:(id)");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(void) setPaused:(bool) {
	%orig;
	NSLog(@"-(void) setPaused:(bool)");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

-(void) applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillResignActive:(id)");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

-(bool) paused {
	%orig;
	NSLog(@"-(bool) paused");
}

%end

%hook FBInterstitialVideoAdContentView

+(void) arrangeViewsVertically:(id) inContainer:(id) {
	%orig;
	NSLog(@"+(void) arrangeViewsVertically:(id) inContainer:(id)");
}

-(void) backgroundTapped:(id) {
	%orig;
	NSLog(@"-(void) backgroundTapped:(id)");
}

-(id) inlineClientToken {
	%orig;
	NSLog(@"-(id) inlineClientToken");
}

-(void) setInlineClientToken:(id) {
	%orig;
	NSLog(@"-(void) setInlineClientToken:(id)");
}

-(id) adChoicesIcon {
	%orig;
	NSLog(@"-(id) adChoicesIcon");
}

-(void) loadAdFromDataModel:(id) {
	%orig;
	NSLog(@"-(void) loadAdFromDataModel:(id)");
}

-(void) removeAnimationProgressTimingObserver {
	%orig;
	NSLog(@"-(void) removeAnimationProgressTimingObserver");
}

-(void) setSkippableTime:(?) {
	%orig;
	NSLog(@"-(void) setSkippableTime:(?)");
}

-(void) setImagesLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setImagesLoaded:(bool)");
}

-(void) setVideoLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setVideoLoaded:(bool)");
}

-(id) callToActionText {
	%orig;
	NSLog(@"-(id) callToActionText");
}

-(void) setCallToActionText:(id) {
	%orig;
	NSLog(@"-(void) setCallToActionText:(id)");
}

-(void) setAdDetailsTextColor:(id) {
	%orig;
	NSLog(@"-(void) setAdDetailsTextColor:(id)");
}

-(void) registerLoaded {
	%orig;
	NSLog(@"-(void) registerLoaded");
}

-(void) addProgressBar {
	%orig;
	NSLog(@"-(void) addProgressBar");
}

-(void) addCallToActionView {
	%orig;
	NSLog(@"-(void) addCallToActionView");
}

-(void) addAdChoicesView {
	%orig;
	NSLog(@"-(void) addAdChoicesView");
}

-(void) setAdDetailsView:(id) {
	%orig;
	NSLog(@"-(void) setAdDetailsView:(id)");
}

-(id) adDetailsView {
	%orig;
	NSLog(@"-(id) adDetailsView");
}

-(void) addPlayPauseButton {
	%orig;
	NSLog(@"-(void) addPlayPauseButton");
}

-(void) addCloseButton {
	%orig;
	NSLog(@"-(void) addCloseButton");
}

-(void) addAnimationProgressTimingObserver {
	%orig;
	NSLog(@"-(void) addAnimationProgressTimingObserver");
}

-(void) layoutWithAdDetailsBanner {
	%orig;
	NSLog(@"-(void) layoutWithAdDetailsBanner");
}

-(void) layoutWithAdDetailsStackedBanner {
	%orig;
	NSLog(@"-(void) layoutWithAdDetailsStackedBanner");
}

-(void) showAdDetails {
	%orig;
	NSLog(@"-(void) showAdDetails");
}

-(void) scheduleHideAll {
	%orig;
	NSLog(@"-(void) scheduleHideAll");
}

-(void) layoutPortraitWithAdDetailsList {
	%orig;
	NSLog(@"-(void) layoutPortraitWithAdDetailsList");
}

-(id) playerControlViews {
	%orig;
	NSLog(@"-(id) playerControlViews");
}

-(void) scheduleHideViews:(id) {
	%orig;
	NSLog(@"-(void) scheduleHideViews:(id)");
}

-(void) layoutLandscapeWithAdDetailsList {
	%orig;
	NSLog(@"-(void) layoutLandscapeWithAdDetailsList");
}

-(id) closeButtonView {
	%orig;
	NSLog(@"-(id) closeButtonView");
}

-(?) skippableTime {
	%orig;
	NSLog(@"-(?) skippableTime");
}

-(bool) skippable {
	%orig;
	NSLog(@"-(bool) skippable");
}

-(void) setAdDetailsPersistent:(bool) {
	%orig;
	NSLog(@"-(void) setAdDetailsPersistent:(bool)");
}

-(id) callToActionView {
	%orig;
	NSLog(@"-(id) callToActionView");
}

-(bool) defaultPersistentAdDetails {
	%orig;
	NSLog(@"-(bool) defaultPersistentAdDetails");
}

-(void) setAdChoicesIcon:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesIcon:(id)");
}

-(void) setAdChoicesView:(id) {
	%orig;
	NSLog(@"-(void) setAdChoicesView:(id)");
}

-(id) adChoicesView {
	%orig;
	NSLog(@"-(id) adChoicesView");
}

-(void) handleAnimationProgress {
	%orig;
	NSLog(@"-(void) handleAnimationProgress");
}

-(void) setAnimationProgressTimingObserver:(id) {
	%orig;
	NSLog(@"-(void) setAnimationProgressTimingObserver:(id)");
}

-(void) setCallToActionView:(id) {
	%orig;
	NSLog(@"-(void) setCallToActionView:(id)");
}

-(void) callToActionViewTapped:(id) {
	%orig;
	NSLog(@"-(void) callToActionViewTapped:(id)");
}

-(void) setCloseButtonView:(id) {
	%orig;
	NSLog(@"-(void) setCloseButtonView:(id)");
}

-(void) closeButtonViewTapped:(id) {
	%orig;
	NSLog(@"-(void) closeButtonViewTapped:(id)");
}

-(void) playPauseButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) playPauseButtonTapped:(id)");
}

-(void) toggleAll {
	%orig;
	NSLog(@"-(void) toggleAll");
}

-(?) skipRemainingTime {
	%orig;
	NSLog(@"-(?) skipRemainingTime");
}

-(void) cleanLayout {
	%orig;
	NSLog(@"-(void) cleanLayout");
}

-(bool) videoEnded {
	%orig;
	NSLog(@"-(bool) videoEnded");
}

-(void) cancelAnimateViews {
	%orig;
	NSLog(@"-(void) cancelAnimateViews");
}

-(bool) imagesLoaded {
	%orig;
	NSLog(@"-(bool) imagesLoaded");
}

-(bool) videoLoaded {
	%orig;
	NSLog(@"-(bool) videoLoaded");
}

-(id) animationProgressTimingObserver {
	%orig;
	NSLog(@"-(id) animationProgressTimingObserver");
}

-(void) showPlayerControls {
	%orig;
	NSLog(@"-(void) showPlayerControls");
}

-(id) toggleViewsTimer {
	%orig;
	NSLog(@"-(id) toggleViewsTimer");
}

-(void) setToggleViewsTimer:(id) {
	%orig;
	NSLog(@"-(void) setToggleViewsTimer:(id)");
}

-(bool) adDetailsPersistent {
	%orig;
	NSLog(@"-(bool) adDetailsPersistent");
}

-(id) adDetailViews {
	%orig;
	NSLog(@"-(id) adDetailViews");
}

-(void) animateHideViews:(id) {
	%orig;
	NSLog(@"-(void) animateHideViews:(id)");
}

-(void) toggleViews:(id) {
	%orig;
	NSLog(@"-(void) toggleViews:(id)");
}

-(void) animateShowViews:(id) {
	%orig;
	NSLog(@"-(void) animateShowViews:(id)");
}

-(void) setVideoEnded:(bool) {
	%orig;
	NSLog(@"-(void) setVideoEnded:(bool)");
}

-(void) videoViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) videoViewDidLoad:(id)");
}

-(void) videoViewTapped:(id) {
	%orig;
	NSLog(@"-(void) videoViewTapped:(id)");
}

-(void) videoViewDidProgress:(id) {
	%orig;
	NSLog(@"-(void) videoViewDidProgress:(id)");
}

-(void) videoViewDidEnd:(id) {
	%orig;
	NSLog(@"-(void) videoViewDidEnd:(id)");
}

-(void) videoView:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) videoView:(id) didFailWithError:(id)");
}

-(void) adChoicesView:(id) willPresentViewController:(id) {
	%orig;
	NSLog(@"-(void) adChoicesView:(id) willPresentViewController:(id)");
}

-(void) adChoicesView:(id) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) adChoicesView:(id) viewControllerDismissed:(id)");
}

-(void) startFromRootViewController:(id) {
	%orig;
	NSLog(@"-(void) startFromRootViewController:(id)");
}

-(bool) isAutoplay {
	%orig;
	NSLog(@"-(bool) isAutoplay");
}

-(unsigned long long) skipRemainingSeconds {
	%orig;
	NSLog(@"-(unsigned long long) skipRemainingSeconds");
}

-(void) toggleAdDetails {
	%orig;
	NSLog(@"-(void) toggleAdDetails");
}

-(void) togglePlayerControls {
	%orig;
	NSLog(@"-(void) togglePlayerControls");
}

-(?) lastRemainingTime {
	%orig;
	NSLog(@"-(?) lastRemainingTime");
}

-(void) setLastRemainingTime:(?) {
	%orig;
	NSLog(@"-(void) setLastRemainingTime:(?)");
}

-(id) titleText {
	%orig;
	NSLog(@"-(id) titleText");
}

-(id) videoView {
	%orig;
	NSLog(@"-(id) videoView");
}

-(void) setVideoView:(id) {
	%orig;
	NSLog(@"-(void) setVideoView:(id)");
}

-(void) resetPlayer {
	%orig;
	NSLog(@"-(void) resetPlayer");
}

-(id) iconView {
	%orig;
	NSLog(@"-(id) iconView");
}

-(void) setIconView:(id) {
	%orig;
	NSLog(@"-(void) setIconView:(id)");
}

-(id) gradientView {
	%orig;
	NSLog(@"-(id) gradientView");
}

-(void) setGradientView:(id) {
	%orig;
	NSLog(@"-(void) setGradientView:(id)");
}

-(void) setSubtitleView:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleView:(id)");
}

-(id) subtitleView {
	%orig;
	NSLog(@"-(id) subtitleView");
}

-(id) progressBar {
	%orig;
	NSLog(@"-(id) progressBar");
}

-(void) setProgressBar:(id) {
	%orig;
	NSLog(@"-(void) setProgressBar:(id)");
}

-(id) playPauseButton {
	%orig;
	NSLog(@"-(id) playPauseButton");
}

-(void) setPlayPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayPauseButton:(id)");
}

-(double) videoAspectRatio {
	%orig;
	NSLog(@"-(double) videoAspectRatio");
}

-(bool) autoplay {
	%orig;
	NSLog(@"-(bool) autoplay");
}

-(void) removeObservers {
	%orig;
	NSLog(@"-(void) removeObservers");
}

-(void) addObservers {
	%orig;
	NSLog(@"-(void) addObservers");
}

-(void) setAccentColor:(id) {
	%orig;
	NSLog(@"-(void) setAccentColor:(id)");
}

-(id) accentColor {
	%orig;
	NSLog(@"-(id) accentColor");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(void) setRootViewController:(id) {
	%orig;
	NSLog(@"-(void) setRootViewController:(id)");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(id) titleView {
	%orig;
	NSLog(@"-(id) titleView");
}

-(void) setTitleView:(id) {
	%orig;
	NSLog(@"-(void) setTitleView:(id)");
}

-(id) defaultTextColor {
	%orig;
	NSLog(@"-(id) defaultTextColor");
}

-(void) setPaused:(bool) {
	%orig;
	NSLog(@"-(void) setPaused:(bool)");
}

-(void) setAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setAnimating:(bool)");
}

-(void) resume {
	%orig;
	NSLog(@"-(void) resume");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

-(bool) animating {
	%orig;
	NSLog(@"-(bool) animating");
}

-(void) setTitleText:(id) {
	%orig;
	NSLog(@"-(void) setTitleText:(id)");
}

-(void) applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) applicationWillResignActive:(id)");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(id) defaultBackgroundColor {
	%orig;
	NSLog(@"-(id) defaultBackgroundColor");
}

-(void) pause {
	%orig;
	NSLog(@"-(void) pause");
}

-(bool) paused {
	%orig;
	NSLog(@"-(bool) paused");
}

%end

%hook FBAdVideoPlayerView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(void) initVideoLayer {
	%orig;
	NSLog(@"-(void) initVideoLayer");
}

-(bool) initialized {
	%orig;
	NSLog(@"-(bool) initialized");
}

-(id) playerLayer {
	%orig;
	NSLog(@"-(id) playerLayer");
}

-(id) player {
	%orig;
	NSLog(@"-(id) player");
}

-(void) setPlayer:(id) {
	%orig;
	NSLog(@"-(void) setPlayer:(id)");
}

-(void) setInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setInitialized:(bool)");
}

-(void) setPlayerLayer:(id) {
	%orig;
	NSLog(@"-(void) setPlayerLayer:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

%end

%hook FBAdVideoPlayerAudioMeters

-(id) newAudioMeter {
	%orig;
	NSLog(@"-(id) newAudioMeter");
}

-(void) _startAnimatingIfNecessary {
	%orig;
	NSLog(@"-(void) _startAnimatingIfNecessary");
}

-(void) _setAnimationForLayer:(id) values:(id) {
	%orig;
	NSLog(@"-(void) _setAnimationForLayer:(id) values:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

-(bool) isAnimating {
	%orig;
	NSLog(@"-(bool) isAnimating");
}

-(void) startAnimating {
	%orig;
	NSLog(@"-(void) startAnimating");
}

-(void) stopAnimating {
	%orig;
	NSLog(@"-(void) stopAnimating");
}

-(void) setHidesWhenStopped:(bool) {
	%orig;
	NSLog(@"-(void) setHidesWhenStopped:(bool)");
}

-(bool) hidesWhenStopped {
	%orig;
	NSLog(@"-(bool) hidesWhenStopped");
}

-(void) _stopAnimating {
	%orig;
	NSLog(@"-(void) _stopAnimating");
}

%end

%hook FBInstreamAdView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) initWithPlacementID:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id)");
}

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(void) setAdController:(id) {
	%orig;
	NSLog(@"-(void) setAdController:(id)");
}

-(void) displayAdControllerLoaded:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerLoaded:(id)");
}

-(void) displayAdControllerStopped:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerStopped:(id)");
}

-(void) displayAdController:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) didFailWithError:(id)");
}

-(void) displayAdController:(id) presentedView:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) presentedView:(id)");
}

-(void) displayAdControllerImpression:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerImpression:(id)");
}

-(void) displayAdController:(id) clickThruWithURL:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) clickThruWithURL:(id)");
}

-(id) instreamVideoAdView {
	%orig;
	NSLog(@"-(id) instreamVideoAdView");
}

-(void) setInstreamVideoAdView:(id) {
	%orig;
	NSLog(@"-(void) setInstreamVideoAdView:(id)");
}

-(void) setLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setLoaded:(bool)");
}

-(bool) isStarted {
	%orig;
	NSLog(@"-(bool) isStarted");
}

-(id) adController {
	%orig;
	NSLog(@"-(id) adController");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setStarted:(bool) {
	%orig;
	NSLog(@"-(void) setStarted:(bool)");
}

%end

%hook FBAdMultiProductCell

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(id) viewabilityValidator {
	%orig;
	NSLog(@"-(id) viewabilityValidator");
}

-(void) setViewabilityValidator:(id) {
	%orig;
	NSLog(@"-(void) setViewabilityValidator:(id)");
}

-(bool) viewabilityValidator:(id) checkedWithStatus:(long long) {
	%orig;
	NSLog(@"-(bool) viewabilityValidator:(id) checkedWithStatus:(long long)");
}

-(void) gestureRecognizerTappedCell:(id) {
	%orig;
	NSLog(@"-(void) gestureRecognizerTappedCell:(id)");
}

-(void) dispatchClickedWithPosition:(CGPoint) inRect:(CGRect) {
	%orig;
	NSLog(@"-(void) dispatchClickedWithPosition:(CGPoint) inRect:(CGRect)");
}

-(void) blurredImageViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) blurredImageViewDidLoad:(id)");
}

-(id) eaglSharegroup {
	%orig;
	NSLog(@"-(id) eaglSharegroup");
}

-(void) setEaglSharegroup:(id) {
	%orig;
	NSLog(@"-(void) setEaglSharegroup:(id)");
}

-(void) updateCellWithData:(id) {
	%orig;
	NSLog(@"-(void) updateCellWithData:(id)");
}

-(void) setContent:(id) {
	%orig;
	NSLog(@"-(void) setContent:(id)");
}

-(bool) debugMode {
	%orig;
	NSLog(@"-(bool) debugMode");
}

-(void) setDebugMode:(bool) {
	%orig;
	NSLog(@"-(void) setDebugMode:(bool)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

-(id) content {
	%orig;
	NSLog(@"-(id) content");
}

%end

%hook FBAdView

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(FBAdSize) adSize {
	%orig;
	NSLog(@"-(FBAdSize) adSize");
}

-(CGSize) actualAdSize {
	%orig;
	NSLog(@"-(CGSize) actualAdSize");
}

-(void) setActualAdSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setActualAdSize:(CGSize)");
}

-(void) setAdController:(id) {
	%orig;
	NSLog(@"-(void) setAdController:(id)");
}

-(void) disableAutoRefresh {
	%orig;
	NSLog(@"-(void) disableAutoRefresh");
}

-(void) doLoadAd:(id) {
	%orig;
	NSLog(@"-(void) doLoadAd:(id)");
}

-(void) displayAdControllerLoaded:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerLoaded:(id)");
}

-(void) displayAdControllerStopped:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerStopped:(id)");
}

-(void) displayAdController:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) didFailWithError:(id)");
}

-(void) displayAdController:(id) presentedView:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) presentedView:(id)");
}

-(void) displayAdControllerImpression:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerImpression:(id)");
}

-(void) displayAdController:(id) clickThruWithURL:(id) {
	%orig;
	NSLog(@"-(void) displayAdController:(id) clickThruWithURL:(id)");
}

-(void) displayAdControllerUserClosed:(id) {
	%orig;
	NSLog(@"-(void) displayAdControllerUserClosed:(id)");
}

-(void) updateInitialAdViewSize:(FBAdSize) {
	%orig;
	NSLog(@"-(void) updateInitialAdViewSize:(FBAdSize)");
}

-(void) clearSubviews {
	%orig;
	NSLog(@"-(void) clearSubviews");
}

-(id) initWithPlacementID:(id) adSize:(FBAdSize) rootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adSize:(FBAdSize) rootViewController:(id)");
}

-(void) setAdSize:(FBAdSize) {
	%orig;
	NSLog(@"-(void) setAdSize:(FBAdSize)");
}

-(id) adapter {
	%orig;
	NSLog(@"-(id) adapter");
}

-(void) setAdapter:(id) {
	%orig;
	NSLog(@"-(void) setAdapter:(id)");
}

-(bool) isInitialized {
	%orig;
	NSLog(@"-(bool) isInitialized");
}

-(void) setInitialized:(bool) {
	%orig;
	NSLog(@"-(void) setInitialized:(bool)");
}

-(id) adController {
	%orig;
	NSLog(@"-(id) adController");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

%end

%hook FBAdViewInternal

-(void) setIsInterstitial:(bool) {
	%orig;
	NSLog(@"-(void) setIsInterstitial:(bool)");
}

-(void) loadAd {
	%orig;
	NSLog(@"-(void) loadAd");
}

-(id) initWithAdData:(id) placementDefinition:(id) adSize:(FBAdSize) rootViewController:(id) {
	%orig;
	NSLog(@"-(id) initWithAdData:(id) placementDefinition:(id) adSize:(FBAdSize) rootViewController:(id)");
}

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(void) loadAdFromMarkup:(id) activationCommand:(id) orientation:(long long) {
	%orig;
	NSLog(@"-(void) loadAdFromMarkup:(id) activationCommand:(id) orientation:(long long)");
}

-(bool) isModalViewPresenting {
	%orig;
	NSLog(@"-(bool) isModalViewPresenting");
}

-(void) setModalViewPresenting:(bool) {
	%orig;
	NSLog(@"-(void) setModalViewPresenting:(bool)");
}

-(void) setInterstitialOpenedTime:(id) {
	%orig;
	NSLog(@"-(void) setInterstitialOpenedTime:(id)");
}

-(id) interstitialOpenedTime {
	%orig;
	NSLog(@"-(id) interstitialOpenedTime");
}

-(id) offsiteAd {
	%orig;
	NSLog(@"-(id) offsiteAd");
}

-(id) viewControllerForPresentingModalView {
	%orig;
	NSLog(@"-(id) viewControllerForPresentingModalView");
}

-(id) commandProcessorTouchInformation:(id) {
	%orig;
	NSLog(@"-(id) commandProcessorTouchInformation:(id)");
}

-(void) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) viewControllerDismissed:(id)");
}

-(void) setForceUIWebView:(bool) {
	%orig;
	NSLog(@"-(void) setForceUIWebView:(bool)");
}

-(bool) forceUIWebView {
	%orig;
	NSLog(@"-(bool) forceUIWebView");
}

-(bool) isFBAdScheme:(id) {
	%orig;
	NSLog(@"-(bool) isFBAdScheme:(id)");
}

-(bool) processFBAdSchemeLink:(id) adDataModel:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(bool) processFBAdSchemeLink:(id) adDataModel:(id) withExtraData:(id)");
}

-(void) handleClickWithExtraData:(id) {
	%orig;
	NSLog(@"-(void) handleClickWithExtraData:(id)");
}

-(id) commandHandler {
	%orig;
	NSLog(@"-(id) commandHandler");
}

-(void) adDidLogClick {
	%orig;
	NSLog(@"-(void) adDidLogClick");
}

-(bool) processRequestURL:(id) adDataModel:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(bool) processRequestURL:(id) adDataModel:(id) withExtraData:(id)");
}

-(void) ensureViewabilityValidation {
	%orig;
	NSLog(@"-(void) ensureViewabilityValidation");
}

-(void) adDidLoad {
	%orig;
	NSLog(@"-(void) adDidLoad");
}

-(void) adWillLogImpression {
	%orig;
	NSLog(@"-(void) adWillLogImpression");
}

-(void) adDidFailToLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) adDidFailToLoadWithError:(id)");
}

-(void) adDidFinishHandlingClick {
	%orig;
	NSLog(@"-(void) adDidFinishHandlingClick");
}

-(id) contentContainerViewabilityValidator {
	%orig;
	NSLog(@"-(id) contentContainerViewabilityValidator");
}

-(void) setCommandHandler:(id) {
	%orig;
	NSLog(@"-(void) setCommandHandler:(id)");
}

-(FBAdSize) adSizeType {
	%orig;
	NSLog(@"-(FBAdSize) adSizeType");
}

-(void) setAdSizeType:(FBAdSize) {
	%orig;
	NSLog(@"-(void) setAdSizeType:(FBAdSize)");
}

-(void) createAdContentContainer {
	%orig;
	NSLog(@"-(void) createAdContentContainer");
}

-(id) adContentContainer {
	%orig;
	NSLog(@"-(id) adContentContainer");
}

-(void) disableViewabilityValidation {
	%orig;
	NSLog(@"-(void) disableViewabilityValidation");
}

-(CGRect) validRectForFrame:(CGRect) {
	%orig;
	NSLog(@"-(CGRect) validRectForFrame:(CGRect)");
}

-(void) setAdContentContainer:(id) {
	%orig;
	NSLog(@"-(void) setAdContentContainer:(id)");
}

-(bool) isImpressionSent {
	%orig;
	NSLog(@"-(bool) isImpressionSent");
}

-(id) viewabilityValidator {
	%orig;
	NSLog(@"-(id) viewabilityValidator");
}

-(id) placementDefinition {
	%orig;
	NSLog(@"-(id) placementDefinition");
}

-(void) setViewabilityValidator:(id) {
	%orig;
	NSLog(@"-(void) setViewabilityValidator:(id)");
}

-(void) setAdValid:(bool) {
	%orig;
	NSLog(@"-(void) setAdValid:(bool)");
}

-(void) setIsImpressionSent:(bool) {
	%orig;
	NSLog(@"-(void) setIsImpressionSent:(bool)");
}

-(void) finishHandlingClick {
	%orig;
	NSLog(@"-(void) finishHandlingClick");
}

-(bool) viewabilityValidator:(id) checkedWithStatus:(long long) {
	%orig;
	NSLog(@"-(bool) viewabilityValidator:(id) checkedWithStatus:(long long)");
}

-(void) setPlacementDefinition:(id) {
	%orig;
	NSLog(@"-(void) setPlacementDefinition:(id)");
}

-(bool) isInterstitial {
	%orig;
	NSLog(@"-(bool) isInterstitial");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(void) setRootViewController:(id) {
	%orig;
	NSLog(@"-(void) setRootViewController:(id)");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

-(long long) orientation {
	%orig;
	NSLog(@"-(long long) orientation");
}

-(void) setOrientation:(long long) {
	%orig;
	NSLog(@"-(void) setOrientation:(long long)");
}

-(id) internalDelegate {
	%orig;
	NSLog(@"-(id) internalDelegate");
}

-(void) setInternalDelegate:(id) {
	%orig;
	NSLog(@"-(void) setInternalDelegate:(id)");
}

%end

%hook FBInstreamAdVideoView

+(Class) layerClass {
	%orig;
	NSLog(@"+(Class) layerClass");
}

-(id) stallTimer {
	%orig;
	NSLog(@"-(id) stallTimer");
}

-(void) setStallTimer:(id) {
	%orig;
	NSLog(@"-(void) setStallTimer:(id)");
}

-(void) playbackStalled {
	%orig;
	NSLog(@"-(void) playbackStalled");
}

-(void) startStallTimer {
	%orig;
	NSLog(@"-(void) startStallTimer");
}

-(void) loadMovieWithURL:(id) {
	%orig;
	NSLog(@"-(void) loadMovieWithURL:(id)");
}

-(void) removeProgressTimeObserver {
	%orig;
	NSLog(@"-(void) removeProgressTimeObserver");
}

-(void) setProgressTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) setProgressTimeObserver:(id)");
}

-(void) addGestureRecognizers {
	%orig;
	NSLog(@"-(void) addGestureRecognizers");
}

-(id) progressTimeObserver {
	%orig;
	NSLog(@"-(id) progressTimeObserver");
}

-(void) addProgressTimeObserver {
	%orig;
	NSLog(@"-(void) addProgressTimeObserver");
}

-(bool) loaded {
	%orig;
	NSLog(@"-(bool) loaded");
}

-(void) setLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setLoaded:(bool)");
}

-(void) setTapGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setTapGestureRecognizer:(id)");
}

-(id) avPlayer {
	%orig;
	NSLog(@"-(id) avPlayer");
}

-(CGSize) naturalSize {
	%orig;
	NSLog(@"-(CGSize) naturalSize");
}

-(id) tapGestureRecognizer {
	%orig;
	NSLog(@"-(id) tapGestureRecognizer");
}

-(id) player {
	%orig;
	NSLog(@"-(id) player");
}

-(void) setPlayer:(id) {
	%orig;
	NSLog(@"-(void) setPlayer:(id)");
}

-(void) removeTimeObserver:(id) {
	%orig;
	NSLog(@"-(void) removeTimeObserver:(id)");
}

-(id) addPeriodicTimeObserverForInterval:(?) queue:(id) usingBlock:(id) {
	%orig;
	NSLog(@"-(id) addPeriodicTimeObserverForInterval:(?) queue:(id) usingBlock:(id)");
}

-(id) avPlayerItem {
	%orig;
	NSLog(@"-(id) avPlayerItem");
}

-(void) setAvPlayer:(id) {
	%orig;
	NSLog(@"-(void) setAvPlayer:(id)");
}

-(void) setAvPlayerItem:(id) {
	%orig;
	NSLog(@"-(void) setAvPlayerItem:(id)");
}

-(void) setupNotifications {
	%orig;
	NSLog(@"-(void) setupNotifications");
}

-(void) removeAllObservers {
	%orig;
	NSLog(@"-(void) removeAllObservers");
}

-(void) addObservers {
	%orig;
	NSLog(@"-(void) addObservers");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) stop {
	%orig;
	NSLog(@"-(void) stop");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

-(?) duration {
	%orig;
	NSLog(@"-(?) duration");
}

-(void) start {
	%orig;
	NSLog(@"-(void) start");
}

-(void) setPaused:(bool) {
	%orig;
	NSLog(@"-(void) setPaused:(bool)");
}

-(?) currentTime {
	%orig;
	NSLog(@"-(?) currentTime");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

-(bool) isPlaying {
	%orig;
	NSLog(@"-(bool) isPlaying");
}

-(void) tap:(id) {
	%orig;
	NSLog(@"-(void) tap:(id)");
}

-(bool) paused {
	%orig;
	NSLog(@"-(bool) paused");
}

%end

%hook FBMediaView

-(void) loadVideo {
	%orig;
	NSLog(@"-(void) loadVideo");
}

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) viewControllerForPresentingModalView {
	%orig;
	NSLog(@"-(id) viewControllerForPresentingModalView");
}

-(id) commandProcessorTouchInformation:(id) {
	%orig;
	NSLog(@"-(id) commandProcessorTouchInformation:(id)");
}

-(void) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) viewControllerDismissed:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(bool) isAutoplayEnabled {
	%orig;
	NSLog(@"-(bool) isAutoplayEnabled");
}

-(void) setCommandProcessor:(id) {
	%orig;
	NSLog(@"-(void) setCommandProcessor:(id)");
}

-(id) commandProcessor {
	%orig;
	NSLog(@"-(id) commandProcessor");
}

-(id) currentVideoRenderer {
	%orig;
	NSLog(@"-(id) currentVideoRenderer");
}

-(id) multiProductView {
	%orig;
	NSLog(@"-(id) multiProductView");
}

-(bool) videoSupported {
	%orig;
	NSLog(@"-(bool) videoSupported");
}

-(void) setupVideoRenderer:(id) {
	%orig;
	NSLog(@"-(void) setupVideoRenderer:(id)");
}

-(bool) multiProductSupported {
	%orig;
	NSLog(@"-(bool) multiProductSupported");
}

-(bool) videoFailedToLoad {
	%orig;
	NSLog(@"-(bool) videoFailedToLoad");
}

-(bool) isValidFrame {
	%orig;
	NSLog(@"-(bool) isValidFrame");
}

-(void) setNeedsDelayedLoad:(bool) {
	%orig;
	NSLog(@"-(void) setNeedsDelayedLoad:(bool)");
}

-(void) loadNativeAd:(id) {
	%orig;
	NSLog(@"-(void) loadNativeAd:(id)");
}

-(void) setVideoFailedToLoad:(bool) {
	%orig;
	NSLog(@"-(void) setVideoFailedToLoad:(bool)");
}

-(void) loadMultiProductAd {
	%orig;
	NSLog(@"-(void) loadMultiProductAd");
}

-(void) dispatchViewDidLoad {
	%orig;
	NSLog(@"-(void) dispatchViewDidLoad");
}

-(void) setupCommandProcessorIfNeeded {
	%orig;
	NSLog(@"-(void) setupCommandProcessorIfNeeded");
}

-(double) loadedTime {
	%orig;
	NSLog(@"-(double) loadedTime");
}

-(bool) needsDelayedLoad {
	%orig;
	NSLog(@"-(bool) needsDelayedLoad");
}

-(void) applyNaturalWidth {
	%orig;
	NSLog(@"-(void) applyNaturalWidth");
}

-(void) applyNaturalHeight {
	%orig;
	NSLog(@"-(void) applyNaturalHeight");
}

-(void) setCurrentVideoRenderer:(id) {
	%orig;
	NSLog(@"-(void) setCurrentVideoRenderer:(id)");
}

-(void) setMultiProductView:(id) {
	%orig;
	NSLog(@"-(void) setMultiProductView:(id)");
}

-(void) setLoadedTime:(double) {
	%orig;
	NSLog(@"-(void) setLoadedTime:(double)");
}

-(bool) videoViewPlaying {
	%orig;
	NSLog(@"-(bool) videoViewPlaying");
}

-(void) setVideoViewPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setVideoViewPlaying:(bool)");
}

-(id) videoRenderer {
	%orig;
	NSLog(@"-(id) videoRenderer");
}

-(void) setVideoRenderer:(id) {
	%orig;
	NSLog(@"-(void) setVideoRenderer:(id)");
}

-(void) videoControllerWillDismiss:(id) {
	%orig;
	NSLog(@"-(void) videoControllerWillDismiss:(id)");
}

-(void) videoControllerDidDismiss:(id) {
	%orig;
	NSLog(@"-(void) videoControllerDidDismiss:(id)");
}

-(void) videoControllerDidTapCallToAction:(id) withButton:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) videoControllerDidTapCallToAction:(id) withButton:(id) withEvent:(id)");
}

-(void) blurredImageViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) blurredImageViewDidLoad:(id)");
}

-(id) initWithNativeAd:(id) {
	%orig;
	NSLog(@"-(id) initWithNativeAd:(id)");
}

-(void) multiProductViewDidLoad:(id) {
	%orig;
	NSLog(@"-(void) multiProductViewDidLoad:(id)");
}

-(void) defaultVideoRendererWasTapped:(id) {
	%orig;
	NSLog(@"-(void) defaultVideoRendererWasTapped:(id)");
}

-(void) defaultVideoRenderer:(id) volumeDidChange:(float) {
	%orig;
	NSLog(@"-(void) defaultVideoRenderer:(id) volumeDidChange:(float)");
}

-(void) defaultVideoRendererDidPause:(id) {
	%orig;
	NSLog(@"-(void) defaultVideoRendererDidPause:(id)");
}

-(void) defaultVideoRendererDidPlay:(id) {
	%orig;
	NSLog(@"-(void) defaultVideoRendererDidPlay:(id)");
}

-(void) defaultVideoRendererVideoDidComplete:(id) {
	%orig;
	NSLog(@"-(void) defaultVideoRendererVideoDidComplete:(id)");
}

-(id) videoFullscreenController {
	%orig;
	NSLog(@"-(id) videoFullscreenController");
}

-(void) setVideoFullscreenController:(id) {
	%orig;
	NSLog(@"-(void) setVideoFullscreenController:(id)");
}

-(void) setAutoplayEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setAutoplayEnabled:(bool)");
}

-(double) aspectRatio {
	%orig;
	NSLog(@"-(double) aspectRatio");
}

-(void) setupView {
	%orig;
	NSLog(@"-(void) setupView");
}

-(void) loadImage {
	%orig;
	NSLog(@"-(void) loadImage");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook FBNativeAdView

+(id) nativeAdViewWithNativeAd:(id) withType:(long long) withAttributes:(id) {
	%orig;
	NSLog(@"+(id) nativeAdViewWithNativeAd:(id) withType:(long long) withAttributes:(id)");
}

+(Class) classFromType:(long long) {
	%orig;
	NSLog(@"+(Class) classFromType:(long long)");
}

+(id) nativeAdViewWithType:(long long) withAttributes:(id) {
	%orig;
	NSLog(@"+(id) nativeAdViewWithType:(long long) withAttributes:(id)");
}

+(id) nativeAdViewWithNativeAd:(id) withType:(long long) {
	%orig;
	NSLog(@"+(id) nativeAdViewWithNativeAd:(id) withType:(long long)");
}

+(id) defaultAttributes {
	%orig;
	NSLog(@"+(id) defaultAttributes");
}

-(void) setCallToActionButton:(id) {
	%orig;
	NSLog(@"-(void) setCallToActionButton:(id)");
}

-(id) callToActionButton {
	%orig;
	NSLog(@"-(id) callToActionButton");
}

-(void) nativeAdDidLoad:(id) {
	%orig;
	NSLog(@"-(void) nativeAdDidLoad:(id)");
}

-(void) setNativeAd:(id) {
	%orig;
	NSLog(@"-(void) setNativeAd:(id)");
}

-(id) initWithNativeAd:(id) withType:(long long) withAttributes:(id) {
	%orig;
	NSLog(@"-(id) initWithNativeAd:(id) withType:(long long) withAttributes:(id)");
}

-(id) nativeAd {
	%orig;
	NSLog(@"-(id) nativeAd");
}

-(void) populate:(id) {
	%orig;
	NSLog(@"-(void) populate:(id)");
}

-(id) initWithNativeAd:(id) withType:(long long) {
	%orig;
	NSLog(@"-(id) initWithNativeAd:(id) withType:(long long)");
}

-(id) socialContextLabel {
	%orig;
	NSLog(@"-(id) socialContextLabel");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(id) sponsoredView {
	%orig;
	NSLog(@"-(id) sponsoredView");
}

-(void) constructView {
	%orig;
	NSLog(@"-(void) constructView");
}

-(void) registerView {
	%orig;
	NSLog(@"-(void) registerView");
}

-(id) allInteractableTargets {
	%orig;
	NSLog(@"-(id) allInteractableTargets");
}

-(void) setCoverImageView:(id) {
	%orig;
	NSLog(@"-(void) setCoverImageView:(id)");
}

-(void) setSponsoredView:(id) {
	%orig;
	NSLog(@"-(void) setSponsoredView:(id)");
}

-(void) setSocialContextLabel:(id) {
	%orig;
	NSLog(@"-(void) setSocialContextLabel:(id)");
}

-(void) setClickableViews:(id) {
	%orig;
	NSLog(@"-(void) setClickableViews:(id)");
}

-(void) setExcludedClickableViews:(id) {
	%orig;
	NSLog(@"-(void) setExcludedClickableViews:(id)");
}

-(void) constructCallToActionButton {
	%orig;
	NSLog(@"-(void) constructCallToActionButton");
}

-(void) constructIconImageView {
	%orig;
	NSLog(@"-(void) constructIconImageView");
}

-(void) constructCoverImageView {
	%orig;
	NSLog(@"-(void) constructCoverImageView");
}

-(void) constructSponsoredView {
	%orig;
	NSLog(@"-(void) constructSponsoredView");
}

-(void) constructBodyView {
	%orig;
	NSLog(@"-(void) constructBodyView");
}

-(void) updateClickableViews {
	%orig;
	NSLog(@"-(void) updateClickableViews");
}

-(bool) usesMediaView {
	%orig;
	NSLog(@"-(bool) usesMediaView");
}

-(id) coverImageView {
	%orig;
	NSLog(@"-(id) coverImageView");
}

-(id) clickableViews {
	%orig;
	NSLog(@"-(id) clickableViews");
}

-(id) excludedClickableViews {
	%orig;
	NSLog(@"-(id) excludedClickableViews");
}

-(void) resetViews {
	%orig;
	NSLog(@"-(void) resetViews");
}

-(bool) implementsSelector:(SEL) {
	%orig;
	NSLog(@"-(bool) implementsSelector:(SEL)");
}

-(void) initializeView {
	%orig;
	NSLog(@"-(void) initializeView");
}

-(void) setLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setLoaded:(bool)");
}

-(id) descriptionLabel {
	%orig;
	NSLog(@"-(id) descriptionLabel");
}

-(void) setDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionLabel:(id)");
}

-(id) fixedHeight {
	%orig;
	NSLog(@"-(id) fixedHeight");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(CGRect) bounds {
	%orig;
	NSLog(@"-(CGRect) bounds");
}

-(bool) isLoaded {
	%orig;
	NSLog(@"-(bool) isLoaded");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(id) viewController {
	%orig;
	NSLog(@"-(id) viewController");
}

-(void) setViewController:(id) {
	%orig;
	NSLog(@"-(void) setViewController:(id)");
}

-(void) willMoveToWindow:(id) {
	%orig;
	NSLog(@"-(void) willMoveToWindow:(id)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(void) setAttributes:(id) {
	%orig;
	NSLog(@"-(void) setAttributes:(id)");
}

-(void) updateAttributes:(id) {
	%orig;
	NSLog(@"-(void) updateAttributes:(id)");
}

-(id) iconImageView {
	%orig;
	NSLog(@"-(id) iconImageView");
}

-(void) setIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setIconImageView:(id)");
}

-(id) bodyView {
	%orig;
	NSLog(@"-(id) bodyView");
}

-(void) setBodyView:(id) {
	%orig;
	NSLog(@"-(void) setBodyView:(id)");
}

%end

%hook FBNativeAdTemplateView

+(id) defaultAttributes {
	%orig;
	NSLog(@"+(id) defaultAttributes");
}

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(void) constructCallToActionButton {
	%orig;
	NSLog(@"-(void) constructCallToActionButton");
}

-(void) constructIconImageView {
	%orig;
	NSLog(@"-(void) constructIconImageView");
}

-(void) constructBodyView {
	%orig;
	NSLog(@"-(void) constructBodyView");
}

-(id) coverImageSize {
	%orig;
	NSLog(@"-(id) coverImageSize");
}

-(id) detailsSize {
	%orig;
	NSLog(@"-(id) detailsSize");
}

-(bool) isBodyTextEnabled {
	%orig;
	NSLog(@"-(bool) isBodyTextEnabled");
}

-(void) setBodyTextEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setBodyTextEnabled:(bool)");
}

-(void) setCoverImageSize:(id) {
	%orig;
	NSLog(@"-(void) setCoverImageSize:(id)");
}

-(void) setDetailsSize:(id) {
	%orig;
	NSLog(@"-(void) setDetailsSize:(id)");
}

-(id) headerBodyLabel {
	%orig;
	NSLog(@"-(id) headerBodyLabel");
}

-(void) setHeaderBodyLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderBodyLabel:(id)");
}

-(void) setHeaderSize:(id) {
	%orig;
	NSLog(@"-(void) setHeaderSize:(id)");
}

-(id) headerSize {
	%orig;
	NSLog(@"-(id) headerSize");
}

-(void) setDetailsView:(id) {
	%orig;
	NSLog(@"-(void) setDetailsView:(id)");
}

-(id) detailsView {
	%orig;
	NSLog(@"-(id) detailsView");
}

-(void) setHeaderTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderTitleLabel:(id)");
}

-(id) headerTitleLabel {
	%orig;
	NSLog(@"-(id) headerTitleLabel");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) headerView {
	%orig;
	NSLog(@"-(id) headerView");
}

-(void) setHeaderView:(id) {
	%orig;
	NSLog(@"-(void) setHeaderView:(id)");
}

%end

%hook FBAdGenericHeight120View

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(bool) usesMediaView {
	%orig;
	NSLog(@"-(bool) usesMediaView");
}

-(id) fixedHeight {
	%orig;
	NSLog(@"-(id) fixedHeight");
}

%end

%hook FBAdGenericHeight100View

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(bool) usesMediaView {
	%orig;
	NSLog(@"-(bool) usesMediaView");
}

-(id) fixedHeight {
	%orig;
	NSLog(@"-(id) fixedHeight");
}

%end

%hook FBAdGenericHeight300View

-(void) updateView:(bool) {
	%orig;
	NSLog(@"-(void) updateView:(bool)");
}

-(id) fixedHeight {
	%orig;
	NSLog(@"-(id) fixedHeight");
}

%end

%hook FBAdGenericHeight400View

-(id) fixedHeight {
	%orig;
	NSLog(@"-(id) fixedHeight");
}

%end

%hook FBInstreamAdRendererView

-(bool) isAdValid {
	%orig;
	NSLog(@"-(bool) isAdValid");
}

-(bool) showAdFromRootViewController:(id) {
	%orig;
	NSLog(@"-(bool) showAdFromRootViewController:(id)");
}

-(void) adapter:(id) didFailWithError:(id) {
	%orig;
	NSLog(@"-(void) adapter:(id) didFailWithError:(id)");
}

-(void) adapterDidClick:(id) url:(id) playerHandles:(bool) {
	%orig;
	NSLog(@"-(void) adapterDidClick:(id) url:(id) playerHandles:(bool)");
}

-(void) adapterDidUnload:(id) {
	%orig;
	NSLog(@"-(void) adapterDidUnload:(id)");
}

-(void) adapterWillUnload:(id) {
	%orig;
	NSLog(@"-(void) adapterWillUnload:(id)");
}

-(void) adapterDidLoad:(id) {
	%orig;
	NSLog(@"-(void) adapterDidLoad:(id)");
}

-(void) adapterWillLogImpression:(id) {
	%orig;
	NSLog(@"-(void) adapterWillLogImpression:(id)");
}

-(id) instreamAdapter {
	%orig;
	NSLog(@"-(id) instreamAdapter");
}

-(void) failedWithError:(id) {
	%orig;
	NSLog(@"-(void) failedWithError:(id)");
}

-(void) setInstreamAdapter:(id) {
	%orig;
	NSLog(@"-(void) setInstreamAdapter:(id)");
}

-(void) adapterDidFinishHandlingClick:(id) {
	%orig;
	NSLog(@"-(void) adapterDidFinishHandlingClick:(id)");
}

-(void) loadAdFromAdParameters:(id) {
	%orig;
	NSLog(@"-(void) loadAdFromAdParameters:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) started {
	%orig;
	NSLog(@"-(bool) started");
}

-(void) setStarted:(bool) {
	%orig;
	NSLog(@"-(void) setStarted:(bool)");
}

%end

%hook FBRewardedVideoAdEndView

-(bool) isModalViewPresenting {
	%orig;
	NSLog(@"-(bool) isModalViewPresenting");
}

-(void) setModalViewPresenting:(bool) {
	%orig;
	NSLog(@"-(void) setModalViewPresenting:(bool)");
}

-(id) viewControllerForPresentingModalView {
	%orig;
	NSLog(@"-(id) viewControllerForPresentingModalView");
}

-(id) placementID {
	%orig;
	NSLog(@"-(id) placementID");
}

-(void) setPlacementID:(id) {
	%orig;
	NSLog(@"-(void) setPlacementID:(id)");
}

-(id) commandProcessorTouchInformation:(id) {
	%orig;
	NSLog(@"-(id) commandProcessorTouchInformation:(id)");
}

-(void) viewControllerDismissed:(id) {
	%orig;
	NSLog(@"-(void) viewControllerDismissed:(id)");
}

-(id) initWithPlacementID:(id) adData:(id) minViewability:(long long) rootViewController:(id) orientation:(long long) {
	%orig;
	NSLog(@"-(id) initWithPlacementID:(id) adData:(id) minViewability:(long long) rootViewController:(id) orientation:(long long)");
}

-(void) setForceUIWebView:(bool) {
	%orig;
	NSLog(@"-(void) setForceUIWebView:(bool)");
}

-(bool) forceUIWebView {
	%orig;
	NSLog(@"-(bool) forceUIWebView");
}

-(bool) isAutoRotateEnabled {
	%orig;
	NSLog(@"-(bool) isAutoRotateEnabled");
}

-(void) setFrameOnShow:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrameOnShow:(CGRect)");
}

-(bool) isFBAdScheme:(id) {
	%orig;
	NSLog(@"-(bool) isFBAdScheme:(id)");
}

-(bool) processFBAdSchemeLink:(id) adDataModel:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(bool) processFBAdSchemeLink:(id) adDataModel:(id) withExtraData:(id)");
}

-(void) handleClickWithExtraData:(id) {
	%orig;
	NSLog(@"-(void) handleClickWithExtraData:(id)");
}

-(id) commandHandler {
	%orig;
	NSLog(@"-(id) commandHandler");
}

-(void) adDidLogClick {
	%orig;
	NSLog(@"-(void) adDidLogClick");
}

-(bool) processRequestURL:(id) adDataModel:(id) withExtraData:(id) {
	%orig;
	NSLog(@"-(bool) processRequestURL:(id) adDataModel:(id) withExtraData:(id)");
}

-(void) adDidLoad {
	%orig;
	NSLog(@"-(void) adDidLoad");
}

-(void) adWillLogImpression {
	%orig;
	NSLog(@"-(void) adWillLogImpression");
}

-(void) adDidFailToLoadWithError:(id) {
	%orig;
	NSLog(@"-(void) adDidFailToLoadWithError:(id)");
}

-(void) setupNotification {
	%orig;
	NSLog(@"-(void) setupNotification");
}

-(id) rewardedVideoDataModel {
	%orig;
	NSLog(@"-(id) rewardedVideoDataModel");
}

-(long long) minViewabilityPercentage {
	%orig;
	NSLog(@"-(long long) minViewabilityPercentage");
}

-(void) setMinViewabilityPercentage:(long long) {
	%orig;
	NSLog(@"-(void) setMinViewabilityPercentage:(long long)");
}

-(void) setCommandHandler:(id) {
	%orig;
	NSLog(@"-(void) setCommandHandler:(id)");
}

-(void) setIsAutoRotateEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setIsAutoRotateEnabled:(bool)");
}

-(void) setContentContainer:(id) {
	%orig;
	NSLog(@"-(void) setContentContainer:(id)");
}

-(id) contentContainer {
	%orig;
	NSLog(@"-(id) contentContainer");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) rootViewController {
	%orig;
	NSLog(@"-(id) rootViewController");
}

-(void) setRootViewController:(id) {
	%orig;
	NSLog(@"-(void) setRootViewController:(id)");
}

%end

%hook FBAdTouchPassthroughView

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) passthroughView {
	%orig;
	NSLog(@"-(id) passthroughView");
}

-(void) setPassthroughView:(id) {
	%orig;
	NSLog(@"-(void) setPassthroughView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

%end

%hook BFAppLinkReturnToRefererView

-(void) setIncludeStatusBarInSize:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setIncludeStatusBarInSize:(unsigned long long)");
}

-(void) setRefererAppLink:(id) {
	%orig;
	NSLog(@"-(void) setRefererAppLink:(id)");
}

-(id) refererAppLink {
	%orig;
	NSLog(@"-(id) refererAppLink");
}

-(void) onTapInside:(id) {
	%orig;
	NSLog(@"-(void) onTapInside:(id)");
}

-(bool) hasRefererData {
	%orig;
	NSLog(@"-(bool) hasRefererData");
}

-(void) updateHidden {
	%orig;
	NSLog(@"-(void) updateHidden");
}

-(id) localizedLabelForReferer:(id) {
	%orig;
	NSLog(@"-(id) localizedLabelForReferer:(id)");
}

-(id) drawCloseButtonImageWithColor:(id) {
	%orig;
	NSLog(@"-(id) drawCloseButtonImageWithColor:(id)");
}

-(unsigned long long) includeStatusBarInSize {
	%orig;
	NSLog(@"-(unsigned long long) includeStatusBarInSize");
}

-(void) setLabelView:(id) {
	%orig;
	NSLog(@"-(void) setLabelView:(id)");
}

-(id) insideTapGestureRecognizer {
	%orig;
	NSLog(@"-(id) insideTapGestureRecognizer");
}

-(void) setInsideTapGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setInsideTapGestureRecognizer:(id)");
}

-(bool) closed {
	%orig;
	NSLog(@"-(bool) closed");
}

-(void) setClosed:(bool) {
	%orig;
	NSLog(@"-(void) setClosed:(bool)");
}

-(void) initViews {
	%orig;
	NSLog(@"-(void) initViews");
}

-(id) labelView {
	%orig;
	NSLog(@"-(id) labelView");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(void) closeButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) closeButtonTapped:(id)");
}

-(void) updateLabelText {
	%orig;
	NSLog(@"-(void) updateLabelText");
}

-(void) updateColors {
	%orig;
	NSLog(@"-(void) updateColors");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) setTextColor:(id) {
	%orig;
	NSLog(@"-(void) setTextColor:(id)");
}

-(id) textColor {
	%orig;
	NSLog(@"-(id) textColor");
}

-(double) statusBarHeight {
	%orig;
	NSLog(@"-(double) statusBarHeight");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook PMBlurredAlbumBackgroundView

-(id) albumArtBlurredImageView {
	%orig;
	NSLog(@"-(id) albumArtBlurredImageView");
}

-(void) setAlbumArtBlurredImageView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtBlurredImageView:(id)");
}

-(id) dominantColorView {
	%orig;
	NSLog(@"-(id) dominantColorView");
}

-(void) setDominantColorView:(id) {
	%orig;
	NSLog(@"-(void) setDominantColorView:(id)");
}

-(id) coverView {
	%orig;
	NSLog(@"-(id) coverView");
}

-(void) setCoverView:(id) {
	%orig;
	NSLog(@"-(void) setCoverView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMNavigationBarTitleSubtitleView

-(id) topPaddingConstrain {
	%orig;
	NSLog(@"-(id) topPaddingConstrain");
}

-(void) setTopPaddingConstrain:(id) {
	%orig;
	NSLog(@"-(void) setTopPaddingConstrain:(id)");
}

-(id) titleLabelHeightConstraint {
	%orig;
	NSLog(@"-(id) titleLabelHeightConstraint");
}

-(void) setTitleLabelHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabelHeightConstraint:(id)");
}

-(id) subtitleLabel {
	%orig;
	NSLog(@"-(id) subtitleLabel");
}

-(void) setSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook PMShieldGradientView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMRecentlyPlayedScrollToFirstCellTouchView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook _TtCC7Pandora27PMNowPlayingProgressBarViewP33_A7E46FC0EE8D22AE7F7911296C14439B24ProgressBarIndicatorView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

%end

%hook PMNowPlayingProgressBarView

-(void) progressBarIndicatorPressGestureHandler:(id) {
	%orig;
	NSLog(@"-(void) progressBarIndicatorPressGestureHandler:(id)");
}

-(void) progressBarIndicatorPanGestureHandler:(id) {
	%orig;
	NSLog(@"-(void) progressBarIndicatorPanGestureHandler:(id)");
}

-(bool) gestureRecognizerShouldBegin:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizerShouldBegin:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(void) castButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) castButtonTapped:(id)");
}

-(void) handleWirelessRoutesAvailableDidChange {
	%orig;
	NSLog(@"-(void) handleWirelessRoutesAvailableDidChange");
}

-(void) runBufferingLabelAnimationIfNeeded {
	%orig;
	NSLog(@"-(void) runBufferingLabelAnimationIfNeeded");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMNowPlayingProgressBarTrackView

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMMediaBadge

-(id) badgeTypeString {
	%orig;
	NSLog(@"-(id) badgeTypeString");
}

-(void) setBadgeTypeString:(id) {
	%orig;
	NSLog(@"-(void) setBadgeTypeString:(id)");
}

-(bool) highContrast {
	%orig;
	NSLog(@"-(bool) highContrast");
}

-(void) setHighContrast:(bool) {
	%orig;
	NSLog(@"-(void) setHighContrast:(bool)");
}

-(id) badgeTintColor {
	%orig;
	NSLog(@"-(id) badgeTintColor");
}

-(void) setBadgeTintColor:(id) {
	%orig;
	NSLog(@"-(void) setBadgeTintColor:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(void) sizeToFit {
	%orig;
	NSLog(@"-(void) sizeToFit");
}

-(bool) isHidden {
	%orig;
	NSLog(@"-(bool) isHidden");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook VideoPlayerUnmuteUITreatmentOverlayView

-(id) wholeViewButton {
	%orig;
	NSLog(@"-(id) wholeViewButton");
}

-(void) setWholeViewButton:(id) {
	%orig;
	NSLog(@"-(void) setWholeViewButton:(id)");
}

-(id) videoLabel {
	%orig;
	NSLog(@"-(id) videoLabel");
}

-(void) setVideoLabel:(id) {
	%orig;
	NSLog(@"-(void) setVideoLabel:(id)");
}

-(void) setUnmuteButton:(id) {
	%orig;
	NSLog(@"-(void) setUnmuteButton:(id)");
}

-(id) videoImageView {
	%orig;
	NSLog(@"-(id) videoImageView");
}

-(void) setVideoImageView:(id) {
	%orig;
	NSLog(@"-(void) setVideoImageView:(id)");
}

-(id) unmuteButton {
	%orig;
	NSLog(@"-(id) unmuteButton");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PremiumSearchBar

-(bool) textFieldShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldReturn:(id)");
}

-(void) searchFieldTextDidChange {
	%orig;
	NSLog(@"-(void) searchFieldTextDidChange");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) becomeFirstResponder {
	%orig;
	NSLog(@"-(bool) becomeFirstResponder");
}

-(bool) resignFirstResponder {
	%orig;
	NSLog(@"-(bool) resignFirstResponder");
}

-(bool) isFirstResponder {
	%orig;
	NSLog(@"-(bool) isFirstResponder");
}

-(bool) canBecomeFirstResponder {
	%orig;
	NSLog(@"-(bool) canBecomeFirstResponder");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(bool) canResignFirstResponder {
	%orig;
	NSLog(@"-(bool) canResignFirstResponder");
}

-(void) clear {
	%orig;
	NSLog(@"-(void) clear");
}

%end

%hook PremiumSearchBarVoice

-(void) searchFieldTextDidChange {
	%orig;
	NSLog(@"-(void) searchFieldTextDidChange");
}

-(void) voiceButtonClicked {
	%orig;
	NSLog(@"-(void) voiceButtonClicked");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PremiumSearchBarNonVoice

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

%end

%hook FooterView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMPageView

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(void) valueChanged:(id) {
	%orig;
	NSLog(@"-(void) valueChanged:(id)");
}

-(double) leftAndRightMargin {
	%orig;
	NSLog(@"-(double) leftAndRightMargin");
}

-(void) setLeftAndRightMargin:(double) {
	%orig;
	NSLog(@"-(void) setLeftAndRightMargin:(double)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(void) setItemSpacing:(double) {
	%orig;
	NSLog(@"-(void) setItemSpacing:(double)");
}

-(double) itemSpacing {
	%orig;
	NSLog(@"-(double) itemSpacing");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

%end

%hook PMAirplayButton

-(void) routePickerViewWillBeginPresentingRoutes:(id) {
	%orig;
	NSLog(@"-(void) routePickerViewWillBeginPresentingRoutes:(id)");
}

-(void) routePickerViewDidEndPresentingRoutes:(id) {
	%orig;
	NSLog(@"-(void) routePickerViewDidEndPresentingRoutes:(id)");
}

-(void) setShouldNotHighlightIconWhenSelected:(bool) {
	%orig;
	NSLog(@"-(void) setShouldNotHighlightIconWhenSelected:(bool)");
}

-(bool) shouldNotHighlightIconWhenSelected {
	%orig;
	NSLog(@"-(bool) shouldNotHighlightIconWhenSelected");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMEmptyBrowseFooterView

-(id) stationListButton {
	%orig;
	NSLog(@"-(id) stationListButton");
}

-(void) setStationListButton:(id) {
	%orig;
	NSLog(@"-(void) setStationListButton:(id)");
}

-(id) emptyBrowseLabel {
	%orig;
	NSLog(@"-(id) emptyBrowseLabel");
}

-(void) setEmptyBrowseLabel:(id) {
	%orig;
	NSLog(@"-(void) setEmptyBrowseLabel:(id)");
}

-(void) tappedStationListButton:(id) {
	%orig;
	NSLog(@"-(void) tappedStationListButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PlaylistCommonView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook SnapPhotoView

-(id) albumArtImageView {
	%orig;
	NSLog(@"-(id) albumArtImageView");
}

-(void) setAlbumArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtImageView:(id)");
}

-(id) dominantColorOverlayView {
	%orig;
	NSLog(@"-(id) dominantColorOverlayView");
}

-(void) setDominantColorOverlayView:(id) {
	%orig;
	NSLog(@"-(void) setDominantColorOverlayView:(id)");
}

-(id) funkyPImageView {
	%orig;
	NSLog(@"-(id) funkyPImageView");
}

-(void) setFunkyPImageView:(id) {
	%orig;
	NSLog(@"-(void) setFunkyPImageView:(id)");
}

-(id) metadataView {
	%orig;
	NSLog(@"-(id) metadataView");
}

-(void) setMetadataView:(id) {
	%orig;
	NSLog(@"-(void) setMetadataView:(id)");
}

-(id) primaryTextLabel {
	%orig;
	NSLog(@"-(id) primaryTextLabel");
}

-(void) setPrimaryTextLabel:(id) {
	%orig;
	NSLog(@"-(void) setPrimaryTextLabel:(id)");
}

-(id) secondaryTextLabel {
	%orig;
	NSLog(@"-(id) secondaryTextLabel");
}

-(void) setSecondaryTextLabel:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryTextLabel:(id)");
}

-(id) tertiaryTextLabel {
	%orig;
	NSLog(@"-(id) tertiaryTextLabel");
}

-(void) setTertiaryTextLabel:(id) {
	%orig;
	NSLog(@"-(void) setTertiaryTextLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(void) layoutIfNeeded {
	%orig;
	NSLog(@"-(void) layoutIfNeeded");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

%end

%hook LockScreenVoiceFABView

-(void) addToView:(id) {
	%orig;
	NSLog(@"-(void) addToView:(id)");
}

-(void) triggerVoiceMode:(id) {
	%orig;
	NSLog(@"-(void) triggerVoiceMode:(id)");
}

-(void) handleOfflineChange {
	%orig;
	NSLog(@"-(void) handleOfflineChange");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook MiniCalloutView

-(void) update:(long long) withSize:(CGSize) pointerCenter:(double) {
	%orig;
	NSLog(@"-(void) update:(long long) withSize:(CGSize) pointerCenter:(double)");
}

-(void) calloutViewTapped:(id) {
	%orig;
	NSLog(@"-(void) calloutViewTapped:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(CGRect) frame {
	%orig;
	NSLog(@"-(CGRect) frame");
}

%end

%hook PMBlurredDominantColorView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMPremiumTrackInfoDetailView

-(void) stationSettingButtonTapped {
	%orig;
	NSLog(@"-(void) stationSettingButtonTapped");
}

-(void) artistImageTapped {
	%orig;
	NSLog(@"-(void) artistImageTapped");
}

-(void) sourceImageTapped {
	%orig;
	NSLog(@"-(void) sourceImageTapped");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMLevel2WebViewPageNotFoundView

-(id) tryAgainButton {
	%orig;
	NSLog(@"-(id) tryAgainButton");
}

-(void) setTryAgainButton:(id) {
	%orig;
	NSLog(@"-(void) setTryAgainButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMLoadingProgressView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook RingView

-(double) strokeWidth {
	%orig;
	NSLog(@"-(double) strokeWidth");
}

-(void) setStrokeWidth:(double) {
	%orig;
	NSLog(@"-(void) setStrokeWidth:(double)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) fillColor {
	%orig;
	NSLog(@"-(id) fillColor");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(void) setFillColor:(id) {
	%orig;
	NSLog(@"-(void) setFillColor:(id)");
}

-(void) setStrokeColor:(id) {
	%orig;
	NSLog(@"-(void) setStrokeColor:(id)");
}

-(id) strokeColor {
	%orig;
	NSLog(@"-(id) strokeColor");
}

%end

%hook PremiumAudioAdContainerView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMCatalogHeaderView

-(void) miniCoachmarkHasDismissedWithMiniCoachmark:(id) type:(long long) {
	%orig;
	NSLog(@"-(void) miniCoachmarkHasDismissedWithMiniCoachmark:(id) type:(long long)");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook EmptyCatalogView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMTimerView

-(void) update {
	%orig;
	NSLog(@"-(void) update");
}

-(double) fraction {
	%orig;
	NSLog(@"-(double) fraction");
}

-(void) setFraction:(double) {
	%orig;
	NSLog(@"-(void) setFraction:(double)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook PMVoiceModeButtonView

-(void) microphoneButtonClicked {
	%orig;
	NSLog(@"-(void) microphoneButtonClicked");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PMOfflineHeaderView

-(void) updateStyle {
	%orig;
	NSLog(@"-(void) updateStyle");
}

-(id) offlineButton {
	%orig;
	NSLog(@"-(id) offlineButton");
}

-(void) setOfflineButton:(id) {
	%orig;
	NSLog(@"-(void) setOfflineButton:(id)");
}

-(void) offlineButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) offlineButtonPressed:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(void) setOverlayView:(id) {
	%orig;
	NSLog(@"-(void) setOverlayView:(id)");
}

-(id) overlayView {
	%orig;
	NSLog(@"-(id) overlayView");
}

%end

%hook PMCatalogControlBar

-(void) handleCollectButtonTouched {
	%orig;
	NSLog(@"-(void) handleCollectButtonTouched");
}

-(void) handleEditButtonTouched {
	%orig;
	NSLog(@"-(void) handleEditButtonTouched");
}

-(void) handleStartStationButtonTouched {
	%orig;
	NSLog(@"-(void) handleStartStationButtonTouched");
}

-(void) handleDownloadButtonTouched {
	%orig;
	NSLog(@"-(void) handleDownloadButtonTouched");
}

-(void) handlePlayButtonTouched {
	%orig;
	NSLog(@"-(void) handlePlayButtonTouched");
}

-(void) handlePauseButtonTouched {
	%orig;
	NSLog(@"-(void) handlePauseButtonTouched");
}

-(void) handleShareButtonTouched {
	%orig;
	NSLog(@"-(void) handleShareButtonTouched");
}

-(void) handleMoreButtonTouched {
	%orig;
	NSLog(@"-(void) handleMoreButtonTouched");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook FBNativeAdDefaultTemplateView

-(id) adIconImageView {
	%orig;
	NSLog(@"-(id) adIconImageView");
}

-(void) setAdIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setAdIconImageView:(id)");
}

-(id) adCallToActionButton {
	%orig;
	NSLog(@"-(id) adCallToActionButton");
}

-(void) setAdCallToActionButton:(id) {
	%orig;
	NSLog(@"-(void) setAdCallToActionButton:(id)");
}

-(id) adTitleLabel {
	%orig;
	NSLog(@"-(id) adTitleLabel");
}

-(void) setAdTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setAdTitleLabel:(id)");
}

-(id) adBodyLabel {
	%orig;
	NSLog(@"-(id) adBodyLabel");
}

-(void) setAdBodyLabel:(id) {
	%orig;
	NSLog(@"-(void) setAdBodyLabel:(id)");
}

-(id) adCoverMediaView {
	%orig;
	NSLog(@"-(id) adCoverMediaView");
}

-(void) setAdCoverMediaView:(id) {
	%orig;
	NSLog(@"-(void) setAdCoverMediaView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook SwipableCellMoreActionView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMControlBarButton

-(void) animationDidStop:(id) finished:(bool) {
	%orig;
	NSLog(@"-(void) animationDidStop:(id) finished:(bool)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setUserInteractionEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setUserInteractionEnabled:(bool)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(bool) isUserInteractionEnabled {
	%orig;
	NSLog(@"-(bool) isUserInteractionEnabled");
}

%end

%hook PMCatalogMetadataView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMCircleView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMUserDatumView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook ExtraControlBarView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMAvatarCatalogHeaderView

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMVideoPlayerControlOverlayView

-(id) controlButtonStackView {
	%orig;
	NSLog(@"-(id) controlButtonStackView");
}

-(void) setControlButtonStackView:(id) {
	%orig;
	NSLog(@"-(void) setControlButtonStackView:(id)");
}

-(id) controlButtonStackViewTrailingConstraint {
	%orig;
	NSLog(@"-(id) controlButtonStackViewTrailingConstraint");
}

-(void) setControlButtonStackViewTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setControlButtonStackViewTrailingConstraint:(id)");
}

-(id) videoSlider {
	%orig;
	NSLog(@"-(id) videoSlider");
}

-(void) setVideoSlider:(id) {
	%orig;
	NSLog(@"-(void) setVideoSlider:(id)");
}

-(id) timeCodeLabel {
	%orig;
	NSLog(@"-(id) timeCodeLabel");
}

-(void) setTimeCodeLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimeCodeLabel:(id)");
}

-(id) expandButton {
	%orig;
	NSLog(@"-(id) expandButton");
}

-(void) setExpandButton:(id) {
	%orig;
	NSLog(@"-(void) setExpandButton:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(id) playButton {
	%orig;
	NSLog(@"-(id) playButton");
}

-(void) setPlayButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayButton:(id)");
}

-(id) subTitleLabel {
	%orig;
	NSLog(@"-(id) subTitleLabel");
}

-(void) setSubTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubTitleLabel:(id)");
}

-(id) pauseButton {
	%orig;
	NSLog(@"-(id) pauseButton");
}

-(void) setPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPauseButton:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook WazeBannerContainerView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

%end

%hook PMLevel2SLAPAdView

-(void) beginActionButtonTouched:(id) {
	%orig;
	NSLog(@"-(void) beginActionButtonTouched:(id)");
}

-(id) beginRicherActivityButton {
	%orig;
	NSLog(@"-(id) beginRicherActivityButton");
}

-(void) setBeginRicherActivityButton:(id) {
	%orig;
	NSLog(@"-(void) setBeginRicherActivityButton:(id)");
}

-(id) beginVideoActivityButton {
	%orig;
	NSLog(@"-(id) beginVideoActivityButton");
}

-(void) setBeginVideoActivityButton:(id) {
	%orig;
	NSLog(@"-(void) setBeginVideoActivityButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) view {
	%orig;
	NSLog(@"-(id) view");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) setView:(id) {
	%orig;
	NSLog(@"-(void) setView:(id)");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook FTUXView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMCoachmarkView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PieView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook EmptySearchView

-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapBrowseButtonFooterView:(id) withBrowseButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMCalloutView

-(long long) skinCode {
	%orig;
	NSLog(@"-(long long) skinCode");
}

-(void) setSkinCode:(long long) {
	%orig;
	NSLog(@"-(void) setSkinCode:(long long)");
}

-(long long) directionCode {
	%orig;
	NSLog(@"-(long long) directionCode");
}

-(void) setDirectionCode:(long long) {
	%orig;
	NSLog(@"-(void) setDirectionCode:(long long)");
}

-(void) animateVisibility:(bool) {
	%orig;
	NSLog(@"-(void) animateVisibility:(bool)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(CGRect) bounds {
	%orig;
	NSLog(@"-(CGRect) bounds");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(void) sizeToFit {
	%orig;
	NSLog(@"-(void) sizeToFit");
}

-(bool) isHidden {
	%orig;
	NSLog(@"-(bool) isHidden");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook SwipableCellDeleteActionView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMPremiumTrackInfoThumbView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMCatalogFooterView

-(void) didTapViewInCatalogMoreView:(id) {
	%orig;
	NSLog(@"-(void) didTapViewInCatalogMoreView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMPlaylistEditingHeaderView

-(void) textViewDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textViewDidBeginEditing:(id)");
}

-(bool) textView:(id) shouldChangeTextInRange:(_NSRange) replacementText:(id) {
	%orig;
	NSLog(@"-(bool) textView:(id) shouldChangeTextInRange:(_NSRange) replacementText:(id)");
}

-(void) doneEditing {
	%orig;
	NSLog(@"-(void) doneEditing");
}

-(void) keyboardWillShowWithNotification:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShowWithNotification:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook LoadingView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) isHidden {
	%orig;
	NSLog(@"-(bool) isHidden");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

-(id) spinner {
	%orig;
	NSLog(@"-(id) spinner");
}

-(void) setSpinner:(id) {
	%orig;
	NSLog(@"-(void) setSpinner:(id)");
}

%end

%hook PMPremiumTrackInfoCoverView

-(void) miniCoachmarkHasDismissedWithMiniCoachmark:(id) type:(long long) {
	%orig;
	NSLog(@"-(void) miniCoachmarkHasDismissedWithMiniCoachmark:(id) type:(long long)");
}

-(void) artistMessageOverlayViewCallToActionButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) artistMessageOverlayViewCallToActionButtonPressed:(id)");
}

-(void) moreButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) moreButtonTapped:(id)");
}

-(void) didTapCoverImage:(id) {
	%orig;
	NSLog(@"-(void) didTapCoverImage:(id)");
}

-(void) collectButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) collectButtonTapped:(id)");
}

-(void) flagButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) flagButtonTapped:(id)");
}

-(void) titleButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) titleButtonTapped:(id)");
}

-(void) shareButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) shareButtonTapped:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook VoiceSpeakingBubbleView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMVideoTitleFullScreenOverlay

-(id) subTitleLabel {
	%orig;
	NSLog(@"-(id) subTitleLabel");
}

-(void) setSubTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubTitleLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook PMPremiumNowPlayingViewGradientView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMMyStationsMusicCellDrawerButtonsContainer

-(id) personalizeButton {
	%orig;
	NSLog(@"-(id) personalizeButton");
}

-(void) updateForType:(long long) {
	%orig;
	NSLog(@"-(void) updateForType:(long long)");
}

-(void) setPersonalizeButton:(id) {
	%orig;
	NSLog(@"-(void) setPersonalizeButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) infoButton {
	%orig;
	NSLog(@"-(id) infoButton");
}

-(void) setInfoButton:(id) {
	%orig;
	NSLog(@"-(void) setInfoButton:(id)");
}

%end

%hook PMStreamViolationView

-(void) setStreamViolationEvent:(id) {
	%orig;
	NSLog(@"-(void) setStreamViolationEvent:(id)");
}

-(id) streamViolationEvent {
	%orig;
	NSLog(@"-(id) streamViolationEvent");
}

-(void) refreshFont {
	%orig;
	NSLog(@"-(void) refreshFont");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMPremiumTrackCellContentView

-(void) moreButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) moreButtonTapped:(id)");
}

-(void) cellLongPressed:(id) {
	%orig;
	NSLog(@"-(void) cellLongPressed:(id)");
}

-(void) infoButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) infoButtonTapped:(id)");
}

-(id) eqImageView {
	%orig;
	NSLog(@"-(id) eqImageView");
}

-(void) setEqImageView:(id) {
	%orig;
	NSLog(@"-(void) setEqImageView:(id)");
}

-(id) availabilityBadge {
	%orig;
	NSLog(@"-(id) availabilityBadge");
}

-(void) setAvailabilityBadge:(id) {
	%orig;
	NSLog(@"-(void) setAvailabilityBadge:(id)");
}

-(id) explicitnessBadge {
	%orig;
	NSLog(@"-(id) explicitnessBadge");
}

-(void) setExplicitnessBadge:(id) {
	%orig;
	NSLog(@"-(void) setExplicitnessBadge:(id)");
}

-(id) voiceTrackIcon {
	%orig;
	NSLog(@"-(id) voiceTrackIcon");
}

-(void) setVoiceTrackIcon:(id) {
	%orig;
	NSLog(@"-(void) setVoiceTrackIcon:(id)");
}

-(id) voiceTrackIconWidthConstraint {
	%orig;
	NSLog(@"-(id) voiceTrackIconWidthConstraint");
}

-(void) setVoiceTrackIconWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setVoiceTrackIconWidthConstraint:(id)");
}

-(id) nonAnnotatedView {
	%orig;
	NSLog(@"-(id) nonAnnotatedView");
}

-(void) setNonAnnotatedView:(id) {
	%orig;
	NSLog(@"-(void) setNonAnnotatedView:(id)");
}

-(id) collectionBadgeContainer {
	%orig;
	NSLog(@"-(id) collectionBadgeContainer");
}

-(void) setCollectionBadgeContainer:(id) {
	%orig;
	NSLog(@"-(void) setCollectionBadgeContainer:(id)");
}

-(id) moreButtonTrailConstraint {
	%orig;
	NSLog(@"-(id) moreButtonTrailConstraint");
}

-(void) setMoreButtonTrailConstraint:(id) {
	%orig;
	NSLog(@"-(void) setMoreButtonTrailConstraint:(id)");
}

-(id) numberLabelLeadConstraint {
	%orig;
	NSLog(@"-(id) numberLabelLeadConstraint");
}

-(void) setNumberLabelLeadConstraint:(id) {
	%orig;
	NSLog(@"-(void) setNumberLabelLeadConstraint:(id)");
}

-(id) badgeContainerTrailingConstraint {
	%orig;
	NSLog(@"-(id) badgeContainerTrailingConstraint");
}

-(void) setBadgeContainerTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBadgeContainerTrailingConstraint:(id)");
}

-(id) collectionBadgeContainerCenterXConstraint {
	%orig;
	NSLog(@"-(id) collectionBadgeContainerCenterXConstraint");
}

-(void) setCollectionBadgeContainerCenterXConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCollectionBadgeContainerCenterXConstraint:(id)");
}

-(id) collectionBadgeContainerTrailingConstraint {
	%orig;
	NSLog(@"-(id) collectionBadgeContainerTrailingConstraint");
}

-(void) setCollectionBadgeContainerTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCollectionBadgeContainerTrailingConstraint:(id)");
}

-(id) collectionBadgeContainerLeadingConstraint {
	%orig;
	NSLog(@"-(id) collectionBadgeContainerLeadingConstraint");
}

-(void) setCollectionBadgeContainerLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCollectionBadgeContainerLeadingConstraint:(id)");
}

-(id) subtitleLabel {
	%orig;
	NSLog(@"-(id) subtitleLabel");
}

-(void) setSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleLabel:(id)");
}

-(id) titleStackView {
	%orig;
	NSLog(@"-(id) titleStackView");
}

-(void) setTitleStackView:(id) {
	%orig;
	NSLog(@"-(void) setTitleStackView:(id)");
}

-(id) numberLabel {
	%orig;
	NSLog(@"-(id) numberLabel");
}

-(void) setNumberLabel:(id) {
	%orig;
	NSLog(@"-(void) setNumberLabel:(id)");
}

-(void) setMoreButton:(id) {
	%orig;
	NSLog(@"-(void) setMoreButton:(id)");
}

-(id) moreButton {
	%orig;
	NSLog(@"-(id) moreButton");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) infoButton {
	%orig;
	NSLog(@"-(id) infoButton");
}

-(void) setInfoButton:(id) {
	%orig;
	NSLog(@"-(void) setInfoButton:(id)");
}

%end

%hook ToastView

-(void) doSwipeAway:(id) {
	%orig;
	NSLog(@"-(void) doSwipeAway:(id)");
}

-(void) doTimerFinished {
	%orig;
	NSLog(@"-(void) doTimerFinished");
}

-(void) doCallToAction {
	%orig;
	NSLog(@"-(void) doCallToAction");
}

-(void) handleRotation {
	%orig;
	NSLog(@"-(void) handleRotation");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMNowPlayingControlBarView

-(id) provideThumbUpView {
	%orig;
	NSLog(@"-(id) provideThumbUpView");
}

-(id) provideThumbDownView {
	%orig;
	NSLog(@"-(id) provideThumbDownView");
}

-(void) bubbleViewHasDismissed:(id) {
	%orig;
	NSLog(@"-(void) bubbleViewHasDismissed:(id)");
}

-(bool) tryToPresentReplayMiniCoachWith:(id) {
	%orig;
	NSLog(@"-(bool) tryToPresentReplayMiniCoachWith:(id)");
}

-(bool) tryToPresentTPRMiniCoachWith:(id) {
	%orig;
	NSLog(@"-(bool) tryToPresentTPRMiniCoachWith:(id)");
}

-(void) dismissMiniCoach {
	%orig;
	NSLog(@"-(void) dismissMiniCoach");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook VoiceLoadingRingView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook HighlightableView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

%end

%hook PMCatalogMoreView

-(void) didTapCell:(id) {
	%orig;
	NSLog(@"-(void) didTapCell:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMStationCatalogFooterView

-(void) didTapViewInCatalogMoreView:(id) {
	%orig;
	NSLog(@"-(void) didTapViewInCatalogMoreView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMAdHTMLView

-(CGRect) mraidContainerViewDimensions {
	%orig;
	NSLog(@"-(CGRect) mraidContainerViewDimensions");
}

-(CGPoint) mraidCreativeOffset {
	%orig;
	NSLog(@"-(CGPoint) mraidCreativeOffset");
}

-(void) resizeWithDimensions:(id) {
	%orig;
	NSLog(@"-(void) resizeWithDimensions:(id)");
}

-(CGRect) mraidExpand {
	%orig;
	NSLog(@"-(CGRect) mraidExpand");
}

-(void) dismissWebView {
	%orig;
	NSLog(@"-(void) dismissWebView");
}

-(void) mraidUnload {
	%orig;
	NSLog(@"-(void) mraidUnload");
}

-(void) mraidPlayVideo:(id) {
	%orig;
	NSLog(@"-(void) mraidPlayVideo:(id)");
}

-(void) mraidBridge:(id) didCallOpenURL:(id) {
	%orig;
	NSLog(@"-(void) mraidBridge:(id) didCallOpenURL:(id)");
}

-(void) mraidBridge:(id) didLogConsoleMessage:(id) {
	%orig;
	NSLog(@"-(void) mraidBridge:(id) didLogConsoleMessage:(id)");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHostDidFinishRendering:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishRendering:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(id) webViewHostRequestsAdIdentifiers:(id) {
	%orig;
	NSLog(@"-(id) webViewHostRequestsAdIdentifiers:(id)");
}

-(id) webViewHostRequestsHaymakerAd:(id) {
	%orig;
	NSLog(@"-(id) webViewHostRequestsHaymakerAd:(id)");
}

-(void) webViewHost:(id) requestsViewportHeight:(double) completion:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) requestsViewportHeight:(double) completion:(id)");
}

-(void) webViewHostDidReceiveMouseDownEvent:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidReceiveMouseDownEvent:(id)");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

%end

%hook PMStationCatalogEditHeaderView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook NavBarCoachMarkView

-(bool) gestureRecognizerShouldBegin:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizerShouldBegin:(id)");
}

-(void) handleRotation {
	%orig;
	NSLog(@"-(void) handleRotation");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) description {
	%orig;
	NSLog(@"-(id) description");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(void) handleTap {
	%orig;
	NSLog(@"-(void) handleTap");
}

%end

%hook PMPremiumTrackHistoryControlView

-(void) bubbleViewHasDismissed:(id) {
	%orig;
	NSLog(@"-(void) bubbleViewHasDismissed:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMNowPlayingNonPremiumCollapsedTunerView

-(void) progressViewDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidUpdate:(id)");
}

-(void) progressViewDidStartBuffering:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidStartBuffering:(id)");
}

-(void) progressViewDidFinishBuffering:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidFinishBuffering:(id)");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(id) trackNameLabel {
	%orig;
	NSLog(@"-(id) trackNameLabel");
}

-(id) artistNameLabel {
	%orig;
	NSLog(@"-(id) artistNameLabel");
}

-(id) albumCoverImageView {
	%orig;
	NSLog(@"-(id) albumCoverImageView");
}

-(void) setArtistNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistNameLabel:(id)");
}

-(void) setTrackNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setTrackNameLabel:(id)");
}

-(void) updateViewMetadataWith:(id) {
	%orig;
	NSLog(@"-(void) updateViewMetadataWith:(id)");
}

-(id) progressViewContainer {
	%orig;
	NSLog(@"-(id) progressViewContainer");
}

-(void) setProgressViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setProgressViewContainer:(id)");
}

-(void) setAlbumCoverImageView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCoverImageView:(id)");
}

-(void) playTapped:(id) {
	%orig;
	NSLog(@"-(void) playTapped:(id)");
}

-(void) pauseTapped:(id) {
	%orig;
	NSLog(@"-(void) pauseTapped:(id)");
}

-(void) nowPlayingTapped:(id) {
	%orig;
	NSLog(@"-(void) nowPlayingTapped:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(id) playButton {
	%orig;
	NSLog(@"-(id) playButton");
}

-(void) setPlayButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayButton:(id)");
}

-(id) nowPlayingButton {
	%orig;
	NSLog(@"-(id) nowPlayingButton");
}

-(void) setNowPlayingButton:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingButton:(id)");
}

-(id) pauseButton {
	%orig;
	NSLog(@"-(id) pauseButton");
}

-(void) setPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPauseButton:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

%end

%hook PMPlaylistSearchBarView

-(void) handleSearchButtonClick {
	%orig;
	NSLog(@"-(void) handleSearchButtonClick");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook VideoPlayerReplayOverlayView

-(id) replayButton {
	%orig;
	NSLog(@"-(id) replayButton");
}

-(void) setReplayButton:(id) {
	%orig;
	NSLog(@"-(void) setReplayButton:(id)");
}

-(id) shrinkButton {
	%orig;
	NSLog(@"-(id) shrinkButton");
}

-(void) setShrinkButton:(id) {
	%orig;
	NSLog(@"-(void) setShrinkButton:(id)");
}

-(id) wholeViewButton {
	%orig;
	NSLog(@"-(id) wholeViewButton");
}

-(void) setWholeViewButton:(id) {
	%orig;
	NSLog(@"-(void) setWholeViewButton:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

%end

%hook PML2SponsoredListeningTopBanner

-(void) refreshTimerView {
	%orig;
	NSLog(@"-(void) refreshTimerView");
}

-(void) setTimerView:(id) {
	%orig;
	NSLog(@"-(void) setTimerView:(id)");
}

-(id) timerView {
	%orig;
	NSLog(@"-(id) timerView");
}

-(id) subTitleLabel {
	%orig;
	NSLog(@"-(id) subTitleLabel");
}

-(void) setSubTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubTitleLabel:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook ConnectionErrorView

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(id) disableAlarmButton {
	%orig;
	NSLog(@"-(id) disableAlarmButton");
}

-(void) setDisableAlarmButton:(id) {
	%orig;
	NSLog(@"-(void) setDisableAlarmButton:(id)");
}

-(id) errorImageView {
	%orig;
	NSLog(@"-(id) errorImageView");
}

-(void) setErrorImageView:(id) {
	%orig;
	NSLog(@"-(void) setErrorImageView:(id)");
}

-(id) stopPlaybackButton {
	%orig;
	NSLog(@"-(id) stopPlaybackButton");
}

-(void) setStopPlaybackButton:(id) {
	%orig;
	NSLog(@"-(void) setStopPlaybackButton:(id)");
}

-(void) pauseButtonTapped {
	%orig;
	NSLog(@"-(void) pauseButtonTapped");
}

-(void) disableAlarmButtonTapped {
	%orig;
	NSLog(@"-(void) disableAlarmButtonTapped");
}

-(void) setReason:(long long) {
	%orig;
	NSLog(@"-(void) setReason:(long long)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) isHidden {
	%orig;
	NSLog(@"-(bool) isHidden");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

-(long long) reason {
	%orig;
	NSLog(@"-(long long) reason");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMCompositeBackgroundView

-(void) onOfflineUpdated:(id) {
	%orig;
	NSLog(@"-(void) onOfflineUpdated:(id)");
}

-(id) initWithBackgroundColor:(id) {
	%orig;
	NSLog(@"-(id) initWithBackgroundColor:(id)");
}

-(id) initWithImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setImageName:(id) {
	%orig;
	NSLog(@"-(void) setImageName:(id)");
}

-(id) imageName {
	%orig;
	NSLog(@"-(id) imageName");
}

%end

%hook PMCatalogBackgroundView

-(id) initWithBackgroundColor:(id) {
	%orig;
	NSLog(@"-(id) initWithBackgroundColor:(id)");
}

-(id) initWithImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMBadgedTitleView

-(id) availabilityBadge {
	%orig;
	NSLog(@"-(id) availabilityBadge");
}

-(void) setAvailabilityBadge:(id) {
	%orig;
	NSLog(@"-(void) setAvailabilityBadge:(id)");
}

-(id) explicitnessBadge {
	%orig;
	NSLog(@"-(id) explicitnessBadge");
}

-(void) setExplicitnessBadge:(id) {
	%orig;
	NSLog(@"-(void) setExplicitnessBadge:(id)");
}

-(id) hostedIcon {
	%orig;
	NSLog(@"-(id) hostedIcon");
}

-(void) setHostedIcon:(id) {
	%orig;
	NSLog(@"-(void) setHostedIcon:(id)");
}

-(id) hostedIconView {
	%orig;
	NSLog(@"-(id) hostedIconView");
}

-(void) setHostedIconView:(id) {
	%orig;
	NSLog(@"-(void) setHostedIconView:(id)");
}

-(id) subtitleLabel {
	%orig;
	NSLog(@"-(id) subtitleLabel");
}

-(void) setSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setAlpha:(double) {
	%orig;
	NSLog(@"-(void) setAlpha:(double)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(double) alpha {
	%orig;
	NSLog(@"-(double) alpha");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMUserEditingView

-(void) textViewDidChange:(id) {
	%orig;
	NSLog(@"-(void) textViewDidChange:(id)");
}

-(void) doneSelected {
	%orig;
	NSLog(@"-(void) doneSelected");
}

-(void) cancelSelected {
	%orig;
	NSLog(@"-(void) cancelSelected");
}

-(void) importSelected {
	%orig;
	NSLog(@"-(void) importSelected");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) isHidden {
	%orig;
	NSLog(@"-(bool) isHidden");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

%end

%hook PMSettingsSectionHeaderView

-(void) setupFont {
	%orig;
	NSLog(@"-(void) setupFont");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook PMPillSwitchControl

-(id) createPillBackgroundImageWithSize:(CGSize) color:(id) {
	%orig;
	NSLog(@"-(id) createPillBackgroundImageWithSize:(CGSize) color:(id)");
}

-(id) leftImageView {
	%orig;
	NSLog(@"-(id) leftImageView");
}

-(id) rightImageView {
	%orig;
	NSLog(@"-(id) rightImageView");
}

-(void) setLeftImageView:(id) {
	%orig;
	NSLog(@"-(void) setLeftImageView:(id)");
}

-(void) setRightImageView:(id) {
	%orig;
	NSLog(@"-(void) setRightImageView:(id)");
}

-(id) pillImageView {
	%orig;
	NSLog(@"-(id) pillImageView");
}

-(void) setPillImageView:(id) {
	%orig;
	NSLog(@"-(void) setPillImageView:(id)");
}

-(void) updateContentStyle {
	%orig;
	NSLog(@"-(void) updateContentStyle");
}

-(void) updateLableStyle:(id) {
	%orig;
	NSLog(@"-(void) updateLableStyle:(id)");
}

-(void) layoutPillImageView {
	%orig;
	NSLog(@"-(void) layoutPillImageView");
}

-(void) layoutLeftContentView {
	%orig;
	NSLog(@"-(void) layoutLeftContentView");
}

-(void) layoutRightContentView {
	%orig;
	NSLog(@"-(void) layoutRightContentView");
}

-(double) pillPadding {
	%orig;
	NSLog(@"-(double) pillPadding");
}

-(CGRect) pillLeftFrame {
	%orig;
	NSLog(@"-(CGRect) pillLeftFrame");
}

-(CGRect) pillRightFrame {
	%orig;
	NSLog(@"-(CGRect) pillRightFrame");
}

-(id) targetActionBlock {
	%orig;
	NSLog(@"-(id) targetActionBlock");
}

-(double) switchControlOriginCenterX {
	%orig;
	NSLog(@"-(double) switchControlOriginCenterX");
}

-(void) setSwitchControlOriginCenterX:(double) {
	%orig;
	NSLog(@"-(void) setSwitchControlOriginCenterX:(double)");
}

-(double) panSwitchDistance {
	%orig;
	NSLog(@"-(double) panSwitchDistance");
}

-(void) setTargetActionBlock:(id) {
	%orig;
	NSLog(@"-(void) setTargetActionBlock:(id)");
}

-(void) updateContentStyleLabel:(id) imageView:(id) selected:(bool) {
	%orig;
	NSLog(@"-(void) updateContentStyleLabel:(id) imageView:(id) selected:(bool)");
}

-(CGRect) pillLeftContentFrame {
	%orig;
	NSLog(@"-(CGRect) pillLeftContentFrame");
}

-(void) setValueWithoutAnimation:(long long) {
	%orig;
	NSLog(@"-(void) setValueWithoutAnimation:(long long)");
}

-(void) addTargetAction:(id) {
	%orig;
	NSLog(@"-(void) addTargetAction:(id)");
}

-(void) enableLabelAccessibility:(id) leftIdentifier:(id) rightLabel:(id) rightIdentifier:(id) {
	%orig;
	NSLog(@"-(void) enableLabelAccessibility:(id) leftIdentifier:(id) rightLabel:(id) rightIdentifier:(id)");
}

-(void) setLeftContentView:(id) {
	%orig;
	NSLog(@"-(void) setLeftContentView:(id)");
}

-(void) setRightContentView:(id) {
	%orig;
	NSLog(@"-(void) setRightContentView:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) setLeftText:(id) {
	%orig;
	NSLog(@"-(void) setLeftText:(id)");
}

-(void) setRightText:(id) {
	%orig;
	NSLog(@"-(void) setRightText:(id)");
}

-(void) setRightLabel:(id) {
	%orig;
	NSLog(@"-(void) setRightLabel:(id)");
}

-(void) handleTapGesture:(id) {
	%orig;
	NSLog(@"-(void) handleTapGesture:(id)");
}

-(void) handlePanGesture:(id) {
	%orig;
	NSLog(@"-(void) handlePanGesture:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(void) setLeftLabel:(id) {
	%orig;
	NSLog(@"-(void) setLeftLabel:(id)");
}

-(id) leftLabel {
	%orig;
	NSLog(@"-(id) leftLabel");
}

-(id) rightLabel {
	%orig;
	NSLog(@"-(id) rightLabel");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(long long) value {
	%orig;
	NSLog(@"-(long long) value");
}

-(void) setValue:(long long) {
	%orig;
	NSLog(@"-(void) setValue:(long long)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(void) setValue:(long long) animated:(bool) {
	%orig;
	NSLog(@"-(void) setValue:(long long) animated:(bool)");
}

-(id) leftContentView {
	%orig;
	NSLog(@"-(id) leftContentView");
}

-(id) rightContentView {
	%orig;
	NSLog(@"-(id) rightContentView");
}

-(id) panGestureRecognizer {
	%orig;
	NSLog(@"-(id) panGestureRecognizer");
}

-(void) setPanGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setPanGestureRecognizer:(id)");
}

-(CGSize) pillSize {
	%orig;
	NSLog(@"-(CGSize) pillSize");
}

%end

%hook PMCustomContentTrackFollowOnView

-(id) autoDismissTimer {
	%orig;
	NSLog(@"-(id) autoDismissTimer");
}

-(void) setAutoDismissTimer:(id) {
	%orig;
	NSLog(@"-(void) setAutoDismissTimer:(id)");
}

-(void) setMessageFromLabel:(id) {
	%orig;
	NSLog(@"-(void) setMessageFromLabel:(id)");
}

-(id) messageFromLabel {
	%orig;
	NSLog(@"-(id) messageFromLabel");
}

-(void) setArtistNameForMessageFromLabel {
	%orig;
	NSLog(@"-(void) setArtistNameForMessageFromLabel");
}

-(id) mainView {
	%orig;
	NSLog(@"-(id) mainView");
}

-(void) setMainView:(id) {
	%orig;
	NSLog(@"-(void) setMainView:(id)");
}

-(void) removeViaUserInteraction:(bool) {
	%orig;
	NSLog(@"-(void) removeViaUserInteraction:(bool)");
}

-(void) setupTransparentBackgroundView {
	%orig;
	NSLog(@"-(void) setupTransparentBackgroundView");
}

-(void) setupFollowOnButton {
	%orig;
	NSLog(@"-(void) setupFollowOnButton");
}

-(void) setupFollowOnImageView {
	%orig;
	NSLog(@"-(void) setupFollowOnImageView");
}

-(void) setTransparentBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setTransparentBackgroundView:(id)");
}

-(id) transparentBackgroundView {
	%orig;
	NSLog(@"-(id) transparentBackgroundView");
}

-(void) setFollowOnButton:(id) {
	%orig;
	NSLog(@"-(void) setFollowOnButton:(id)");
}

-(id) followOnButton {
	%orig;
	NSLog(@"-(id) followOnButton");
}

-(void) followOnButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) followOnButtonClicked:(id)");
}

-(id) followOnButtonContainer {
	%orig;
	NSLog(@"-(id) followOnButtonContainer");
}

-(id) followOnImageView {
	%orig;
	NSLog(@"-(id) followOnImageView");
}

-(void) closeButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) closeButtonClicked:(id)");
}

-(void) setFollowOnImageView:(id) {
	%orig;
	NSLog(@"-(void) setFollowOnImageView:(id)");
}

-(void) setFollowOnButtonContainer:(id) {
	%orig;
	NSLog(@"-(void) setFollowOnButtonContainer:(id)");
}

-(void) didTimeout {
	%orig;
	NSLog(@"-(void) didTimeout");
}

-(id) initWithViewModel:(id) {
	%orig;
	NSLog(@"-(id) initWithViewModel:(id)");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) setViewModel:(id) {
	%orig;
	NSLog(@"-(void) setViewModel:(id)");
}

-(void) orientationDidChange {
	%orig;
	NSLog(@"-(void) orientationDidChange");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) show {
	%orig;
	NSLog(@"-(void) show");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

%end

%hook PMRadialGradientView

-(id) gradientColorRefs {
	%orig;
	NSLog(@"-(id) gradientColorRefs");
}

-(void) setGradientColorRefs:(id) {
	%orig;
	NSLog(@"-(void) setGradientColorRefs:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setGradientColors:(id) {
	%orig;
	NSLog(@"-(void) setGradientColors:(id)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(id) gradientColors {
	%orig;
	NSLog(@"-(id) gradientColors");
}

%end

%hook PMTrackHistoryView

-(id) titleStringForIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(id) titleStringForIndex:(unsigned long long)");
}

-(id) descriptionStringForIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(id) descriptionStringForIndex:(unsigned long long)");
}

-(void) addNewTrack {
	%orig;
	NSLog(@"-(void) addNewTrack");
}

-(void) collectionViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) collectionViewDidScroll:(id)");
}

-(void) thumbUpButtonTappedAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) thumbUpButtonTappedAtIndex:(unsigned long long)");
}

-(void) thumbDownButtonTappedAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) thumbDownButtonTappedAtIndex:(unsigned long long)");
}

-(void) scrollToLastItemAnimated:(bool) {
	%orig;
	NSLog(@"-(void) scrollToLastItemAnimated:(bool)");
}

-(id) historyImageListView {
	%orig;
	NSLog(@"-(id) historyImageListView");
}

-(id) trackDetailView {
	%orig;
	NSLog(@"-(id) trackDetailView");
}

-(double) bottomOfHistoryImageListView {
	%orig;
	NSLog(@"-(double) bottomOfHistoryImageListView");
}

-(void) updateTrackDataByIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) updateTrackDataByIndex:(unsigned long long)");
}

-(void) setHistoryImageListView:(id) {
	%orig;
	NSLog(@"-(void) setHistoryImageListView:(id)");
}

-(void) setTrackDetailView:(id) {
	%orig;
	NSLog(@"-(void) setTrackDetailView:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(unsigned long long) itemCount {
	%orig;
	NSLog(@"-(unsigned long long) itemCount");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

%end

%hook PMMessageView

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) setHorizontalLine:(id) {
	%orig;
	NSLog(@"-(void) setHorizontalLine:(id)");
}

-(id) horizontalLine {
	%orig;
	NSLog(@"-(id) horizontalLine");
}

-(void) setHorizontalLineForFooter:(id) {
	%orig;
	NSLog(@"-(void) setHorizontalLineForFooter:(id)");
}

-(id) horizontalLineForFooter {
	%orig;
	NSLog(@"-(id) horizontalLineForFooter");
}

-(void) setVerticalLine:(id) {
	%orig;
	NSLog(@"-(void) setVerticalLine:(id)");
}

-(id) verticalLine {
	%orig;
	NSLog(@"-(id) verticalLine");
}

-(void) layoutHorizontalWithMessage:(id) header:(id) andImageNamed:(id) {
	%orig;
	NSLog(@"-(void) layoutHorizontalWithMessage:(id) header:(id) andImageNamed:(id)");
}

-(void) layoutVerticalWithMessage:(id) header:(id) andImageNamed:(id) {
	%orig;
	NSLog(@"-(void) layoutVerticalWithMessage:(id) header:(id) andImageNamed:(id)");
}

-(void) showWithMessage:(id) header:(id) imageNamed:(id) andLayout:(long long) {
	%orig;
	NSLog(@"-(void) showWithMessage:(id) header:(id) imageNamed:(id) andLayout:(long long)");
}

-(bool) debug {
	%orig;
	NSLog(@"-(bool) debug");
}

-(void) setDebug:(bool) {
	%orig;
	NSLog(@"-(void) setDebug:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(void) setHeader:(id) {
	%orig;
	NSLog(@"-(void) setHeader:(id)");
}

-(id) header {
	%orig;
	NSLog(@"-(id) header");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

-(id) footerView {
	%orig;
	NSLog(@"-(id) footerView");
}

-(void) setFooterView:(id) {
	%orig;
	NSLog(@"-(void) setFooterView:(id)");
}

%end

%hook PMGetPersonalInfoView

-(void) hitImpressionUrls {
	%orig;
	NSLog(@"-(void) hitImpressionUrls");
}

-(void) recordImpressionStat {
	%orig;
	NSLog(@"-(void) recordImpressionStat");
}

-(id) mainView {
	%orig;
	NSLog(@"-(id) mainView");
}

-(void) setMainView:(id) {
	%orig;
	NSLog(@"-(void) setMainView:(id)");
}

-(void) finishInitWithData:(id) {
	%orig;
	NSLog(@"-(void) finishInitWithData:(id)");
}

-(id) submitConnection {
	%orig;
	NSLog(@"-(id) submitConnection");
}

-(id) imageBannerUrl {
	%orig;
	NSLog(@"-(id) imageBannerUrl");
}

-(id) emailLabel {
	%orig;
	NSLog(@"-(id) emailLabel");
}

-(id) introBodyView {
	%orig;
	NSLog(@"-(id) introBodyView");
}

-(void) setCurrentBodyView:(id) {
	%orig;
	NSLog(@"-(void) setCurrentBodyView:(id)");
}

-(void) setPrivacyPolicyUrl:(id) {
	%orig;
	NSLog(@"-(void) setPrivacyPolicyUrl:(id)");
}

-(void) setImageBannerUrl:(id) {
	%orig;
	NSLog(@"-(void) setImageBannerUrl:(id)");
}

-(void) setSubmitUrl:(id) {
	%orig;
	NSLog(@"-(void) setSubmitUrl:(id)");
}

-(void) setLearnMoreUrl:(id) {
	%orig;
	NSLog(@"-(void) setLearnMoreUrl:(id)");
}

-(id) introHeadline {
	%orig;
	NSLog(@"-(id) introHeadline");
}

-(id) introDescription {
	%orig;
	NSLog(@"-(id) introDescription");
}

-(id) confirmationLabel {
	%orig;
	NSLog(@"-(id) confirmationLabel");
}

-(void) setInitiationUrls:(id) {
	%orig;
	NSLog(@"-(void) setInitiationUrls:(id)");
}

-(void) setConversionUrls:(id) {
	%orig;
	NSLog(@"-(void) setConversionUrls:(id)");
}

-(id) initiationUrls {
	%orig;
	NSLog(@"-(id) initiationUrls");
}

-(id) conversionUrls {
	%orig;
	NSLog(@"-(id) conversionUrls");
}

-(id) submitUrl {
	%orig;
	NSLog(@"-(id) submitUrl");
}

-(void) setSubmitRequestTimestamp:(double) {
	%orig;
	NSLog(@"-(void) setSubmitRequestTimestamp:(double)");
}

-(void) setSubmitConnection:(id) {
	%orig;
	NSLog(@"-(void) setSubmitConnection:(id)");
}

-(double) submitRequestTimestamp {
	%orig;
	NSLog(@"-(double) submitRequestTimestamp");
}

-(void) loadState:(long long) {
	%orig;
	NSLog(@"-(void) loadState:(long long)");
}

-(void) transitionToBodyView:(id) {
	%orig;
	NSLog(@"-(void) transitionToBodyView:(id)");
}

-(void) hitInitiationUrls {
	%orig;
	NSLog(@"-(void) hitInitiationUrls");
}

-(id) disclaimerBodyView {
	%orig;
	NSLog(@"-(id) disclaimerBodyView");
}

-(id) submittingBodyView {
	%orig;
	NSLog(@"-(id) submittingBodyView");
}

-(id) actionButtonContainer {
	%orig;
	NSLog(@"-(id) actionButtonContainer");
}

-(void) hitConversionUrls {
	%orig;
	NSLog(@"-(void) hitConversionUrls");
}

-(id) confirmationBodyView {
	%orig;
	NSLog(@"-(id) confirmationBodyView");
}

-(id) errorBodyView {
	%orig;
	NSLog(@"-(id) errorBodyView");
}

-(id) currentBodyView {
	%orig;
	NSLog(@"-(id) currentBodyView");
}

-(void) submitUserInfo {
	%orig;
	NSLog(@"-(void) submitUserInfo");
}

-(id) learnMoreUrl {
	%orig;
	NSLog(@"-(id) learnMoreUrl");
}

-(id) privacyPolicyUrl {
	%orig;
	NSLog(@"-(id) privacyPolicyUrl");
}

-(void) submitWasSuccessful {
	%orig;
	NSLog(@"-(void) submitWasSuccessful");
}

-(void) submitFailed {
	%orig;
	NSLog(@"-(void) submitFailed");
}

-(void) actionPressed:(id) {
	%orig;
	NSLog(@"-(void) actionPressed:(id)");
}

-(void) privacyPolicyPressed:(id) {
	%orig;
	NSLog(@"-(void) privacyPolicyPressed:(id)");
}

-(void) setActionButtonContainer:(id) {
	%orig;
	NSLog(@"-(void) setActionButtonContainer:(id)");
}

-(id) privacyPolicyButton {
	%orig;
	NSLog(@"-(id) privacyPolicyButton");
}

-(void) setPrivacyPolicyButton:(id) {
	%orig;
	NSLog(@"-(void) setPrivacyPolicyButton:(id)");
}

-(void) setIntroHeadline:(id) {
	%orig;
	NSLog(@"-(void) setIntroHeadline:(id)");
}

-(void) setIntroDescription:(id) {
	%orig;
	NSLog(@"-(void) setIntroDescription:(id)");
}

-(void) setIntroBodyView:(id) {
	%orig;
	NSLog(@"-(void) setIntroBodyView:(id)");
}

-(void) setDisclaimerBodyView:(id) {
	%orig;
	NSLog(@"-(void) setDisclaimerBodyView:(id)");
}

-(void) setEmailLabel:(id) {
	%orig;
	NSLog(@"-(void) setEmailLabel:(id)");
}

-(void) setSubmittingBodyView:(id) {
	%orig;
	NSLog(@"-(void) setSubmittingBodyView:(id)");
}

-(void) setConfirmationBodyView:(id) {
	%orig;
	NSLog(@"-(void) setConfirmationBodyView:(id)");
}

-(void) setConfirmationLabel:(id) {
	%orig;
	NSLog(@"-(void) setConfirmationLabel:(id)");
}

-(void) setErrorBodyView:(id) {
	%orig;
	NSLog(@"-(void) setErrorBodyView:(id)");
}

-(id) impressionUrls {
	%orig;
	NSLog(@"-(id) impressionUrls");
}

-(void) setImpressionUrls:(id) {
	%orig;
	NSLog(@"-(void) setImpressionUrls:(id)");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(void) parseData:(id) {
	%orig;
	NSLog(@"-(void) parseData:(id)");
}

-(void) setHeaderImage:(id) {
	%orig;
	NSLog(@"-(void) setHeaderImage:(id)");
}

-(id) headerImage {
	%orig;
	NSLog(@"-(id) headerImage");
}

-(id) actionButton {
	%orig;
	NSLog(@"-(id) actionButton");
}

-(void) setActionButton:(id) {
	%orig;
	NSLog(@"-(void) setActionButton:(id)");
}

-(void) setCreativeId:(id) {
	%orig;
	NSLog(@"-(void) setCreativeId:(id)");
}

-(id) creativeId {
	%orig;
	NSLog(@"-(id) creativeId");
}

-(void) setBodyContainerView:(id) {
	%orig;
	NSLog(@"-(void) setBodyContainerView:(id)");
}

-(id) bodyContainerView {
	%orig;
	NSLog(@"-(id) bodyContainerView");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) currentState {
	%orig;
	NSLog(@"-(long long) currentState");
}

-(void) setCurrentState:(long long) {
	%orig;
	NSLog(@"-(void) setCurrentState:(long long)");
}

-(id) initWithData:(id) {
	%orig;
	NSLog(@"-(id) initWithData:(id)");
}

%end

%hook PMSPArcView

-(void) setArcMask:(id) {
	%orig;
	NSLog(@"-(void) setArcMask:(id)");
}

-(id) arcMask {
	%orig;
	NSLog(@"-(id) arcMask");
}

-(void) updateArcHeightUsingOffset:(double) {
	%orig;
	NSLog(@"-(void) updateArcHeightUsingOffset:(double)");
}

-(void) setArcShadow:(id) {
	%orig;
	NSLog(@"-(void) setArcShadow:(id)");
}

-(id) arcShadow {
	%orig;
	NSLog(@"-(id) arcShadow");
}

-(double) arcHeight {
	%orig;
	NSLog(@"-(double) arcHeight");
}

-(void) setArcHeight:(double) {
	%orig;
	NSLog(@"-(void) setArcHeight:(double)");
}

-(void) redrawArc {
	%orig;
	NSLog(@"-(void) redrawArc");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) gradientLayer {
	%orig;
	NSLog(@"-(id) gradientLayer");
}

-(void) setGradientLayer:(id) {
	%orig;
	NSLog(@"-(void) setGradientLayer:(id)");
}

%end

%hook PMArrowView

-(void) setArrowColor:(id) {
	%orig;
	NSLog(@"-(void) setArrowColor:(id)");
}

-(id) arrowColor {
	%orig;
	NSLog(@"-(id) arrowColor");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook PMNoSearchMatchView

-(id) noMatchMessageLabel {
	%orig;
	NSLog(@"-(id) noMatchMessageLabel");
}

-(void) setNoMatchMessageLabel:(id) {
	%orig;
	NSLog(@"-(void) setNoMatchMessageLabel:(id)");
}

-(id) noMatchSearchQueryLabel {
	%orig;
	NSLog(@"-(id) noMatchSearchQueryLabel");
}

-(void) setNoMatchSearchQueryLabel:(id) {
	%orig;
	NSLog(@"-(void) setNoMatchSearchQueryLabel:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) searchQuery {
	%orig;
	NSLog(@"-(id) searchQuery");
}

-(void) setSearchQuery:(id) {
	%orig;
	NSLog(@"-(void) setSearchQuery:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(void) sizeToFit {
	%orig;
	NSLog(@"-(void) sizeToFit");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

%end

%hook PMCoverFlowView

+(id) easeOutAnimationCurve {
	%orig;
	NSLog(@"+(id) easeOutAnimationCurve");
}

-(void) coverFlowImageReplaceDidEnd:(id) {
	%orig;
	NSLog(@"-(void) coverFlowImageReplaceDidEnd:(id)");
}

-(void) coverFlowImageReplaceWillBegin:(id) {
	%orig;
	NSLog(@"-(void) coverFlowImageReplaceWillBegin:(id)");
}

-(void) coverFlowImageViewRotationToActiveDidEnd:(id) {
	%orig;
	NSLog(@"-(void) coverFlowImageViewRotationToActiveDidEnd:(id)");
}

-(void) coverFlowImageViewRotationFromActiveWillBegin:(id) {
	%orig;
	NSLog(@"-(void) coverFlowImageViewRotationFromActiveWillBegin:(id)");
}

-(void) coverFlowImageViewFlipWillBegin:(id) {
	%orig;
	NSLog(@"-(void) coverFlowImageViewFlipWillBegin:(id)");
}

-(void) coverFlowImageViewFlipDidEnd:(id) {
	%orig;
	NSLog(@"-(void) coverFlowImageViewFlipDidEnd:(id)");
}

-(CGAffineTransform) detailContentTransform {
	%orig;
	NSLog(@"-(CGAffineTransform) detailContentTransform");
}

-(void) application:(id) willReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) willReceiveUIEvent:(id)");
}

-(void) application:(id) didReceiveUIEvent:(id) {
	%orig;
	NSLog(@"-(void) application:(id) didReceiveUIEvent:(id)");
}

-(id) activeData {
	%orig;
	NSLog(@"-(id) activeData");
}

-(bool) showsCustomSubviewOnfront {
	%orig;
	NSLog(@"-(bool) showsCustomSubviewOnfront");
}

-(void) setImageView:(id) forObject:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id) forObject:(id)");
}

-(void) updateViewAtIndex:(long long) animationType:(long long) {
	%orig;
	NSLog(@"-(void) updateViewAtIndex:(long long) animationType:(long long)");
}

-(double) insetWidth {
	%orig;
	NSLog(@"-(double) insetWidth");
}

-(bool) willNotScrollOffScreen {
	%orig;
	NSLog(@"-(bool) willNotScrollOffScreen");
}

-(double) insetWidthForIndex:(long long) {
	%orig;
	NSLog(@"-(double) insetWidthForIndex:(long long)");
}

-(double) activeImageXCoordinate {
	%orig;
	NSLog(@"-(double) activeImageXCoordinate");
}

-(double) durationForAnimationType:(long long) {
	%orig;
	NSLog(@"-(double) durationForAnimationType:(long long)");
}

-(double) xForImageIndex:(long long) {
	%orig;
	NSLog(@"-(double) xForImageIndex:(long long)");
}

-(void) createViewForIndex:(long long) {
	%orig;
	NSLog(@"-(void) createViewForIndex:(long long)");
}

-(void) notifyDelegateOfActiveImageIndexChange:(long long) {
	%orig;
	NSLog(@"-(void) notifyDelegateOfActiveImageIndexChange:(long long)");
}

-(void) setActiveImageIndex:(long long) {
	%orig;
	NSLog(@"-(void) setActiveImageIndex:(long long)");
}

-(long long) imageIndexForX:(double) {
	%orig;
	NSLog(@"-(long long) imageIndexForX:(double)");
}

-(void) animateXEaseOut:(double) duration:(double) {
	%orig;
	NSLog(@"-(void) animateXEaseOut:(double) duration:(double)");
}

-(void) updateForScrollToX:(double) index:(long long) allowDetailContent:(bool) animationType:(long long) {
	%orig;
	NSLog(@"-(void) updateForScrollToX:(double) index:(long long) allowDetailContent:(bool) animationType:(long long)");
}

-(void) setActiveImageIndex:(long long) withDetailContent:(bool) animationType:(long long) {
	%orig;
	NSLog(@"-(void) setActiveImageIndex:(long long) withDetailContent:(bool) animationType:(long long)");
}

-(id) activeImageView {
	%orig;
	NSLog(@"-(id) activeImageView");
}

-(void) setIsShowingDetailContentIfPossible:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingDetailContentIfPossible:(bool)");
}

-(id) touchForEvent:(id) {
	%orig;
	NSLog(@"-(id) touchForEvent:(id)");
}

-(double) xForTouch:(id) {
	%orig;
	NSLog(@"-(double) xForTouch:(id)");
}

-(void) updateSwipeInfo:(id) {
	%orig;
	NSLog(@"-(void) updateSwipeInfo:(id)");
}

-(void) notifyDelegateOfSingleTap {
	%orig;
	NSLog(@"-(void) notifyDelegateOfSingleTap");
}

-(void) handleSwipe {
	%orig;
	NSLog(@"-(void) handleSwipe");
}

-(bool) isActiveImageLastImage {
	%orig;
	NSLog(@"-(bool) isActiveImageLastImage");
}

-(void) setDistanceBetweenImages:(double) {
	%orig;
	NSLog(@"-(void) setDistanceBetweenImages:(double)");
}

-(double) xForFirstImage {
	%orig;
	NSLog(@"-(double) xForFirstImage");
}

-(long long) activeImageIndex {
	%orig;
	NSLog(@"-(long long) activeImageIndex");
}

-(bool) isShowingDetailContent {
	%orig;
	NSLog(@"-(bool) isShowingDetailContent");
}

-(void) setDetailContentTransform:(CGAffineTransform) {
	%orig;
	NSLog(@"-(void) setDetailContentTransform:(CGAffineTransform)");
}

-(bool) hidesInactiveImages {
	%orig;
	NSLog(@"-(bool) hidesInactiveImages");
}

-(void) setHidesInactiveImages:(bool) {
	%orig;
	NSLog(@"-(void) setHidesInactiveImages:(bool)");
}

-(void) clearInstance {
	%orig;
	NSLog(@"-(void) clearInstance");
}

-(bool) showsImageReflections {
	%orig;
	NSLog(@"-(bool) showsImageReflections");
}

-(void) setShowsImageReflections:(bool) {
	%orig;
	NSLog(@"-(void) setShowsImageReflections:(bool)");
}

-(bool) showsInactiveTilt {
	%orig;
	NSLog(@"-(bool) showsInactiveTilt");
}

-(void) setShowsInactiveTilt:(bool) {
	%orig;
	NSLog(@"-(void) setShowsInactiveTilt:(bool)");
}

-(bool) activeImageIsCentered {
	%orig;
	NSLog(@"-(bool) activeImageIsCentered");
}

-(void) setActiveImageIsCentered:(bool) {
	%orig;
	NSLog(@"-(void) setActiveImageIsCentered:(bool)");
}

-(bool) activeImageIsAlignedRight {
	%orig;
	NSLog(@"-(bool) activeImageIsAlignedRight");
}

-(void) setActiveImageIsAlignedRight:(bool) {
	%orig;
	NSLog(@"-(void) setActiveImageIsAlignedRight:(bool)");
}

-(bool) showsNextImageSnippetWhenAlignedRight {
	%orig;
	NSLog(@"-(bool) showsNextImageSnippetWhenAlignedRight");
}

-(void) setShowsNextImageSnippetWhenAlignedRight:(bool) {
	%orig;
	NSLog(@"-(void) setShowsNextImageSnippetWhenAlignedRight:(bool)");
}

-(double) nextImageSnippetWidth {
	%orig;
	NSLog(@"-(double) nextImageSnippetWidth");
}

-(void) setNextImageSnippetWidth:(double) {
	%orig;
	NSLog(@"-(void) setNextImageSnippetWidth:(double)");
}

-(bool) dimsInactivePastImages {
	%orig;
	NSLog(@"-(bool) dimsInactivePastImages");
}

-(void) setDimsInactivePastImages:(bool) {
	%orig;
	NSLog(@"-(void) setDimsInactivePastImages:(bool)");
}

-(double) distanceBetweenImages {
	%orig;
	NSLog(@"-(double) distanceBetweenImages");
}

-(double) touchToScrollRatio {
	%orig;
	NSLog(@"-(double) touchToScrollRatio");
}

-(void) setTouchToScrollRatio:(double) {
	%orig;
	NSLog(@"-(void) setTouchToScrollRatio:(double)");
}

-(bool) showsDetailOnSingleTap {
	%orig;
	NSLog(@"-(bool) showsDetailOnSingleTap");
}

-(void) setShowsDetailOnSingleTap:(bool) {
	%orig;
	NSLog(@"-(void) setShowsDetailOnSingleTap:(bool)");
}

-(double) dimLevelForInactivePastImages {
	%orig;
	NSLog(@"-(double) dimLevelForInactivePastImages");
}

-(void) setDimLevelForInactivePastImages:(double) {
	%orig;
	NSLog(@"-(void) setDimLevelForInactivePastImages:(double)");
}

-(void) setInsetWidth:(double) {
	%orig;
	NSLog(@"-(void) setInsetWidth:(double)");
}

-(void) setShowsCustomSubviewOnfront:(bool) {
	%orig;
	NSLog(@"-(void) setShowsCustomSubviewOnfront:(bool)");
}

-(void) array:(id) didInsertWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didInsertWithUpdate:(id)");
}

-(void) array:(id) didRemoveWithUpdate:(id) {
	%orig;
	NSLog(@"-(void) array:(id) didRemoveWithUpdate:(id)");
}

-(void) arrayDidRefresh:(id) {
	%orig;
	NSLog(@"-(void) arrayDidRefresh:(id)");
}

-(void) doInit {
	%orig;
	NSLog(@"-(void) doInit");
}

-(void) refreshData {
	%orig;
	NSLog(@"-(void) refreshData");
}

-(double) minX {
	%orig;
	NSLog(@"-(double) minX");
}

-(bool) scrollEnabled {
	%orig;
	NSLog(@"-(bool) scrollEnabled");
}

-(void) updateObject:(id) {
	%orig;
	NSLog(@"-(void) updateObject:(id)");
}

-(void) handleDoubleTap:(id) {
	%orig;
	NSLog(@"-(void) handleDoubleTap:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isAccessibilityElement {
	%orig;
	NSLog(@"-(bool) isAccessibilityElement");
}

-(id) accessibilityElements {
	%orig;
	NSLog(@"-(id) accessibilityElements");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setScrollEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setScrollEnabled:(bool)");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesMoved:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesMoved:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

-(void) animationDidStop:(id) finished:(bool) {
	%orig;
	NSLog(@"-(void) animationDidStop:(id) finished:(bool)");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

-(CGSize) imageSize {
	%orig;
	NSLog(@"-(CGSize) imageSize");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) data {
	%orig;
	NSLog(@"-(id) data");
}

-(double) contentWidth {
	%orig;
	NSLog(@"-(double) contentWidth");
}

-(double) maxX {
	%orig;
	NSLog(@"-(double) maxX");
}

-(void) handleTap:(id) {
	%orig;
	NSLog(@"-(void) handleTap:(id)");
}

-(void) refresh {
	%orig;
	NSLog(@"-(void) refresh");
}

%end

%hook PMBinarySegmentedControl

+(id) segmentedControlWithFirstSegment:(id) secondSegment:(id) {
	%orig;
	NSLog(@"+(id) segmentedControlWithFirstSegment:(id) secondSegment:(id)");
}

-(void) selectFirstSegment {
	%orig;
	NSLog(@"-(void) selectFirstSegment");
}

-(void) selectSecondSegment {
	%orig;
	NSLog(@"-(void) selectSecondSegment");
}

-(int) currentSelectedSegment {
	%orig;
	NSLog(@"-(int) currentSelectedSegment");
}

-(void) setupFont {
	%orig;
	NSLog(@"-(void) setupFont");
}

-(void) setupFirstSegment {
	%orig;
	NSLog(@"-(void) setupFirstSegment");
}

-(void) setupSecondSegment {
	%orig;
	NSLog(@"-(void) setupSecondSegment");
}

-(void) setupColor {
	%orig;
	NSLog(@"-(void) setupColor");
}

-(void) setupBottomSeparator {
	%orig;
	NSLog(@"-(void) setupBottomSeparator");
}

-(id) secondSegmentButton {
	%orig;
	NSLog(@"-(id) secondSegmentButton");
}

-(id) firstSegmentButton {
	%orig;
	NSLog(@"-(id) firstSegmentButton");
}

-(id) firstSegmentText {
	%orig;
	NSLog(@"-(id) firstSegmentText");
}

-(id) secondSegmentText {
	%orig;
	NSLog(@"-(id) secondSegmentText");
}

-(void) setFirstSegmentText:(id) {
	%orig;
	NSLog(@"-(void) setFirstSegmentText:(id)");
}

-(void) setSecondSegmentText:(id) {
	%orig;
	NSLog(@"-(void) setSecondSegmentText:(id)");
}

-(void) setFirstSegmentButton:(id) {
	%orig;
	NSLog(@"-(void) setFirstSegmentButton:(id)");
}

-(void) setSecondSegmentButton:(id) {
	%orig;
	NSLog(@"-(void) setSecondSegmentButton:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(id) selectedColor {
	%orig;
	NSLog(@"-(id) selectedColor");
}

-(void) setSelectedColor:(id) {
	%orig;
	NSLog(@"-(void) setSelectedColor:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setSelectedSegmentIndex:(int) {
	%orig;
	NSLog(@"-(void) setSelectedSegmentIndex:(int)");
}

-(int) selectedSegmentIndex {
	%orig;
	NSLog(@"-(int) selectedSegmentIndex");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMStackedImageView

-(double) imageWidthForCount:(long long) {
	%orig;
	NSLog(@"-(double) imageWidthForCount:(long long)");
}

-(bool) hidesBordersOnBoundary {
	%orig;
	NSLog(@"-(bool) hidesBordersOnBoundary");
}

-(CGPoint) pointForOffset:(double) andWidth:(double) {
	%orig;
	NSLog(@"-(CGPoint) pointForOffset:(double) andWidth:(double)");
}

-(void) setHidesBordersOnBoundary:(bool) {
	%orig;
	NSLog(@"-(void) setHidesBordersOnBoundary:(bool)");
}

-(void) setupSubviews {
	%orig;
	NSLog(@"-(void) setupSubviews");
}

-(void) setDefaultImage:(id) {
	%orig;
	NSLog(@"-(void) setDefaultImage:(id)");
}

-(id) defaultImage {
	%orig;
	NSLog(@"-(id) defaultImage");
}

-(void) setOverlap:(double) {
	%orig;
	NSLog(@"-(void) setOverlap:(double)");
}

-(double) overlap {
	%orig;
	NSLog(@"-(double) overlap");
}

-(long long) count {
	%orig;
	NSLog(@"-(long long) count");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setBorderColor:(id) {
	%orig;
	NSLog(@"-(void) setBorderColor:(id)");
}

-(void) setBorderWidth:(double) {
	%orig;
	NSLog(@"-(void) setBorderWidth:(double)");
}

-(double) borderWidth {
	%orig;
	NSLog(@"-(double) borderWidth");
}

-(id) borderColor {
	%orig;
	NSLog(@"-(id) borderColor");
}

-(long long) anchor {
	%orig;
	NSLog(@"-(long long) anchor");
}

-(void) setAnchor:(long long) {
	%orig;
	NSLog(@"-(void) setAnchor:(long long)");
}

-(void) setCount:(long long) {
	%orig;
	NSLog(@"-(void) setCount:(long long)");
}

-(void) setImageViews:(id) {
	%orig;
	NSLog(@"-(void) setImageViews:(id)");
}

-(id) imageViews {
	%orig;
	NSLog(@"-(id) imageViews");
}

%end

%hook PMSearchTextField

-(void) fontDidResize:(id) {
	%orig;
	NSLog(@"-(void) fontDidResize:(id)");
}

-(void) enableAccessibilityUsingLabel:(id) hint:(id) identifier:(id) {
	%orig;
	NSLog(@"-(void) enableAccessibilityUsingLabel:(id) hint:(id) identifier:(id)");
}

-(id) initWithFrame:(CGRect) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) delegate:(id)");
}

-(void) setAddIconLeft:(double) {
	%orig;
	NSLog(@"-(void) setAddIconLeft:(double)");
}

-(void) clearAndResignFirstResponder {
	%orig;
	NSLog(@"-(void) clearAndResignFirstResponder");
}

-(void) updateFontStyleAndSize {
	%orig;
	NSLog(@"-(void) updateFontStyleAndSize");
}

-(void) setLeftViewDisabled:(bool) {
	%orig;
	NSLog(@"-(void) setLeftViewDisabled:(bool)");
}

-(void) setTypeInPlaceholderText:(id) {
	%orig;
	NSLog(@"-(void) setTypeInPlaceholderText:(id)");
}

-(void) setSearchFieldDelegate:(id) {
	%orig;
	NSLog(@"-(void) setSearchFieldDelegate:(id)");
}

-(void) setClearButtonAnimationDirection:(long long) {
	%orig;
	NSLog(@"-(void) setClearButtonAnimationDirection:(long long)");
}

-(void) becomeFirstResponderSetText:(id) {
	%orig;
	NSLog(@"-(void) becomeFirstResponderSetText:(id)");
}

-(id) customPlaceholderColor {
	%orig;
	NSLog(@"-(id) customPlaceholderColor");
}

-(void) redrawSelf {
	%orig;
	NSLog(@"-(void) redrawSelf");
}

-(void) willShowModalControllerOrView:(id) {
	%orig;
	NSLog(@"-(void) willShowModalControllerOrView:(id)");
}

-(void) setUseCustomLeftMargin:(bool) {
	%orig;
	NSLog(@"-(void) setUseCustomLeftMargin:(bool)");
}

-(void) setUseCustomRightMargin:(bool) {
	%orig;
	NSLog(@"-(void) setUseCustomRightMargin:(bool)");
}

-(id) backgroundColorWhenNotFirstResponder {
	%orig;
	NSLog(@"-(id) backgroundColorWhenNotFirstResponder");
}

-(bool) leftViewDisabled {
	%orig;
	NSLog(@"-(bool) leftViewDisabled");
}

-(double) addIconLeft {
	%orig;
	NSLog(@"-(double) addIconLeft");
}

-(void) setPlaceholderTextWithAttributes:(id) {
	%orig;
	NSLog(@"-(void) setPlaceholderTextWithAttributes:(id)");
}

-(id) searchFieldDelegate {
	%orig;
	NSLog(@"-(id) searchFieldDelegate");
}

-(id) typeInPlaceholderText {
	%orig;
	NSLog(@"-(id) typeInPlaceholderText");
}

-(void) setClearButton:(id) {
	%orig;
	NSLog(@"-(void) setClearButton:(id)");
}

-(bool) useCustomLeftMargin {
	%orig;
	NSLog(@"-(bool) useCustomLeftMargin");
}

-(double) clearButtonLeftWhenVisible {
	%orig;
	NSLog(@"-(double) clearButtonLeftWhenVisible");
}

-(bool) useCustomRightMargin {
	%orig;
	NSLog(@"-(bool) useCustomRightMargin");
}

-(long long) clearButtonAnimationDirection {
	%orig;
	NSLog(@"-(long long) clearButtonAnimationDirection");
}

-(void) handleTextFieldBackgroundColor {
	%orig;
	NSLog(@"-(void) handleTextFieldBackgroundColor");
}

-(void) setBackgroundColorWhenNotFirstResponder:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColorWhenNotFirstResponder:(id)");
}

-(id) a11yLabel {
	%orig;
	NSLog(@"-(id) a11yLabel");
}

-(void) setA11yLabel:(id) {
	%orig;
	NSLog(@"-(void) setA11yLabel:(id)");
}

-(id) a11yHint {
	%orig;
	NSLog(@"-(id) a11yHint");
}

-(void) setA11yHint:(id) {
	%orig;
	NSLog(@"-(void) setA11yHint:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) setTextFieldLeft:(double) {
	%orig;
	NSLog(@"-(void) setTextFieldLeft:(double)");
}

-(double) textFieldLeft {
	%orig;
	NSLog(@"-(double) textFieldLeft");
}

-(bool) isInEditMode {
	%orig;
	NSLog(@"-(bool) isInEditMode");
}

-(id) placeholderText {
	%orig;
	NSLog(@"-(id) placeholderText");
}

-(void) setPlaceholderText:(id) {
	%orig;
	NSLog(@"-(void) setPlaceholderText:(id)");
}

-(void) setTextField:(id) {
	%orig;
	NSLog(@"-(void) setTextField:(id)");
}

-(void) textFieldDidChange:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidChange:(id)");
}

-(double) leftMargin {
	%orig;
	NSLog(@"-(double) leftMargin");
}

-(id) bottomBorder {
	%orig;
	NSLog(@"-(id) bottomBorder");
}

-(void) setLeftMargin:(double) {
	%orig;
	NSLog(@"-(void) setLeftMargin:(double)");
}

-(void) setBottomBorder:(id) {
	%orig;
	NSLog(@"-(void) setBottomBorder:(id)");
}

-(void) setIsEditing:(bool) {
	%orig;
	NSLog(@"-(void) setIsEditing:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setIsAccessibilityElement:(bool) {
	%orig;
	NSLog(@"-(void) setIsAccessibilityElement:(bool)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) textField {
	%orig;
	NSLog(@"-(id) textField");
}

-(bool) becomeFirstResponder {
	%orig;
	NSLog(@"-(bool) becomeFirstResponder");
}

-(bool) resignFirstResponder {
	%orig;
	NSLog(@"-(bool) resignFirstResponder");
}

-(void) setRightMargin:(double) {
	%orig;
	NSLog(@"-(void) setRightMargin:(double)");
}

-(id) leftView {
	%orig;
	NSLog(@"-(id) leftView");
}

-(void) setLeftView:(id) {
	%orig;
	NSLog(@"-(void) setLeftView:(id)");
}

-(id) searchText {
	%orig;
	NSLog(@"-(id) searchText");
}

-(bool) isEditing {
	%orig;
	NSLog(@"-(bool) isEditing");
}

-(bool) textFieldShouldBeginEditing:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldBeginEditing:(id)");
}

-(bool) textFieldShouldEndEditing:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldEndEditing:(id)");
}

-(bool) textFieldShouldClear:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldClear:(id)");
}

-(bool) isEmpty {
	%orig;
	NSLog(@"-(bool) isEmpty");
}

-(bool) textFieldShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldReturn:(id)");
}

-(void) setSearchText:(id) {
	%orig;
	NSLog(@"-(void) setSearchText:(id)");
}

-(void) textFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidBeginEditing:(id)");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

-(id) clearButton {
	%orig;
	NSLog(@"-(id) clearButton");
}

-(double) rightMargin {
	%orig;
	NSLog(@"-(double) rightMargin");
}

%end

%hook PMTableSectionView

+(id) sectionWithLeftJustifiedLabel {
	%orig;
	NSLog(@"+(id) sectionWithLeftJustifiedLabel");
}

+(id) sectionWithCenterJustifiedLabel {
	%orig;
	NSLog(@"+(id) sectionWithCenterJustifiedLabel");
}

-(void) setLabelTextVerticalAligment:(long long) {
	%orig;
	NSLog(@"-(void) setLabelTextVerticalAligment:(long long)");
}

-(void) setLabelLeftInset:(double) {
	%orig;
	NSLog(@"-(void) setLabelLeftInset:(double)");
}

-(void) setLabelRightInset:(double) {
	%orig;
	NSLog(@"-(void) setLabelRightInset:(double)");
}

-(void) showTopDivider {
	%orig;
	NSLog(@"-(void) showTopDivider");
}

-(void) showBottomDivider {
	%orig;
	NSLog(@"-(void) showBottomDivider");
}

-(void) setDividerLeftInset:(double) {
	%orig;
	NSLog(@"-(void) setDividerLeftInset:(double)");
}

-(void) setLabelTextAlignment:(long long) {
	%orig;
	NSLog(@"-(void) setLabelTextAlignment:(long long)");
}

-(id) sectionLabel {
	%orig;
	NSLog(@"-(id) sectionLabel");
}

-(void) setSectionLabel:(id) {
	%orig;
	NSLog(@"-(void) setSectionLabel:(id)");
}

-(void) hideTopDivider {
	%orig;
	NSLog(@"-(void) hideTopDivider");
}

-(void) hideBottomDivider {
	%orig;
	NSLog(@"-(void) hideBottomDivider");
}

-(double) labelLeftInset {
	%orig;
	NSLog(@"-(double) labelLeftInset");
}

-(double) labelRightInset {
	%orig;
	NSLog(@"-(double) labelRightInset");
}

-(void) updateSectionLabelFrame {
	%orig;
	NSLog(@"-(void) updateSectionLabelFrame");
}

-(double) dividerLeftInset {
	%orig;
	NSLog(@"-(double) dividerLeftInset");
}

-(long long) labelTextVerticalAligment {
	%orig;
	NSLog(@"-(long long) labelTextVerticalAligment");
}

-(void) setupForAdViewTitle {
	%orig;
	NSLog(@"-(void) setupForAdViewTitle");
}

-(long long) labelTextAlignment {
	%orig;
	NSLog(@"-(long long) labelTextAlignment");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) labelText {
	%orig;
	NSLog(@"-(id) labelText");
}

-(void) setLabelColor:(id) {
	%orig;
	NSLog(@"-(void) setLabelColor:(id)");
}

-(void) setTopDivider:(id) {
	%orig;
	NSLog(@"-(void) setTopDivider:(id)");
}

-(void) setBottomDivider:(id) {
	%orig;
	NSLog(@"-(void) setBottomDivider:(id)");
}

-(id) topDivider {
	%orig;
	NSLog(@"-(id) topDivider");
}

-(id) labelFont {
	%orig;
	NSLog(@"-(id) labelFont");
}

-(void) setLabelText:(id) {
	%orig;
	NSLog(@"-(void) setLabelText:(id)");
}

-(id) bottomDivider {
	%orig;
	NSLog(@"-(id) bottomDivider");
}

-(void) setLabelFont:(id) {
	%orig;
	NSLog(@"-(void) setLabelFont:(id)");
}

-(id) labelColor {
	%orig;
	NSLog(@"-(id) labelColor");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isAccessibilityElement {
	%orig;
	NSLog(@"-(bool) isAccessibilityElement");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) dividerColor {
	%orig;
	NSLog(@"-(id) dividerColor");
}

-(void) setDividerColor:(id) {
	%orig;
	NSLog(@"-(void) setDividerColor:(id)");
}

%end

%hook PMTrackProgressBar

+(id) progressBarWithRoundedCorner {
	%orig;
	NSLog(@"+(id) progressBarWithRoundedCorner");
}

+(id) progressBarWithFlatCorner {
	%orig;
	NSLog(@"+(id) progressBarWithFlatCorner");
}

-(void) progressViewDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) progressViewDidUpdate:(id)");
}

-(void) handleViewResizing {
	%orig;
	NSLog(@"-(void) handleViewResizing");
}

-(id) timePlayedLabel {
	%orig;
	NSLog(@"-(id) timePlayedLabel");
}

-(void) setTimePlayedLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimePlayedLabel:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) timeRemaining {
	%orig;
	NSLog(@"-(id) timeRemaining");
}

-(void) setTimeRemaining:(id) {
	%orig;
	NSLog(@"-(void) setTimeRemaining:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(void) setTimePlayed:(id) {
	%orig;
	NSLog(@"-(void) setTimePlayed:(id)");
}

-(void) clearAll {
	%orig;
	NSLog(@"-(void) clearAll");
}

-(void) setTimeRemainingLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimeRemainingLabel:(id)");
}

-(id) timeRemainingLabel {
	%orig;
	NSLog(@"-(id) timeRemainingLabel");
}

-(id) timePlayed {
	%orig;
	NSLog(@"-(id) timePlayed");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMSlideOrTapSwitch

-(id) createPillBackgroundImageWithSize:(CGSize) color:(id) {
	%orig;
	NSLog(@"-(id) createPillBackgroundImageWithSize:(CGSize) color:(id)");
}

-(void) setupClassicViewWithButtonTitles:(id) accessibilityIdentifiers:(id) {
	%orig;
	NSLog(@"-(void) setupClassicViewWithButtonTitles:(id) accessibilityIdentifiers:(id)");
}

-(void) setupPremiumViewWithButtonTitles:(id) accessibilityIdentifiers:(id) {
	%orig;
	NSLog(@"-(void) setupPremiumViewWithButtonTitles:(id) accessibilityIdentifiers:(id)");
}

-(id) createButtonWithTitle:(id) size:(CGSize) {
	%orig;
	NSLog(@"-(id) createButtonWithTitle:(id) size:(CGSize)");
}

-(id) classicButtonA {
	%orig;
	NSLog(@"-(id) classicButtonA");
}

-(void) setupPremiumButton:(id) title:(id) {
	%orig;
	NSLog(@"-(void) setupPremiumButton:(id) title:(id)");
}

-(void) didSwitch:(id) {
	%orig;
	NSLog(@"-(void) didSwitch:(id)");
}

-(long long) switchStyle {
	%orig;
	NSLog(@"-(long long) switchStyle");
}

-(id) premiumButtonA {
	%orig;
	NSLog(@"-(id) premiumButtonA");
}

-(id) classicButtonB {
	%orig;
	NSLog(@"-(id) classicButtonB");
}

-(id) premiumButtonB {
	%orig;
	NSLog(@"-(id) premiumButtonB");
}

-(void) setCurrentButton:(long long) {
	%orig;
	NSLog(@"-(void) setCurrentButton:(long long)");
}

-(void) didSwitch:(id) byInteraction:(bool) {
	%orig;
	NSLog(@"-(void) didSwitch:(id) byInteraction:(bool)");
}

-(void) redrawUnderlineViewIfNecessary {
	%orig;
	NSLog(@"-(void) redrawUnderlineViewIfNecessary");
}

-(id) pillImageView {
	%orig;
	NSLog(@"-(id) pillImageView");
}

-(long long) currentButton {
	%orig;
	NSLog(@"-(long long) currentButton");
}

-(long long) slideOriginX {
	%orig;
	NSLog(@"-(long long) slideOriginX");
}

-(void) setSlideOriginX:(long long) {
	%orig;
	NSLog(@"-(void) setSlideOriginX:(long long)");
}

-(id) underLineViewWidthConstraint {
	%orig;
	NSLog(@"-(id) underLineViewWidthConstraint");
}

-(id) underLineViewLeadingConstraint {
	%orig;
	NSLog(@"-(id) underLineViewLeadingConstraint");
}

-(id) underLineView {
	%orig;
	NSLog(@"-(id) underLineView");
}

-(id) teachMarkAnimationTouchView {
	%orig;
	NSLog(@"-(id) teachMarkAnimationTouchView");
}

-(void) startAnimatingAfterDelay:(double) {
	%orig;
	NSLog(@"-(void) startAnimatingAfterDelay:(double)");
}

-(id) initWithFrame:(CGRect) buttonTitles:(id) accessibilityIdentifiers:(id) style:(long long) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) buttonTitles:(id) accessibilityIdentifiers:(id) style:(long long)");
}

-(CGRect) createUnderLineFrameSizeWithClickedButton:(id) {
	%orig;
	NSLog(@"-(CGRect) createUnderLineFrameSizeWithClickedButton:(id)");
}

-(void) toggleSwitch:(long long) {
	%orig;
	NSLog(@"-(void) toggleSwitch:(long long)");
}

-(void) redrawIfNecessary {
	%orig;
	NSLog(@"-(void) redrawIfNecessary");
}

-(void) setSwitchStyle:(long long) {
	%orig;
	NSLog(@"-(void) setSwitchStyle:(long long)");
}

-(void) setPillImageView:(id) {
	%orig;
	NSLog(@"-(void) setPillImageView:(id)");
}

-(void) setUnderLineView:(id) {
	%orig;
	NSLog(@"-(void) setUnderLineView:(id)");
}

-(void) setPremiumButtonA:(id) {
	%orig;
	NSLog(@"-(void) setPremiumButtonA:(id)");
}

-(void) setPremiumButtonB:(id) {
	%orig;
	NSLog(@"-(void) setPremiumButtonB:(id)");
}

-(void) setClassicButtonA:(id) {
	%orig;
	NSLog(@"-(void) setClassicButtonA:(id)");
}

-(void) setClassicButtonB:(id) {
	%orig;
	NSLog(@"-(void) setClassicButtonB:(id)");
}

-(void) setTeachMarkAnimationTouchView:(id) {
	%orig;
	NSLog(@"-(void) setTeachMarkAnimationTouchView:(id)");
}

-(id) underLineViewHeightConstraint {
	%orig;
	NSLog(@"-(id) underLineViewHeightConstraint");
}

-(void) setUnderLineViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setUnderLineViewHeightConstraint:(id)");
}

-(void) setUnderLineViewWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setUnderLineViewWidthConstraint:(id)");
}

-(void) setUnderLineViewLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setUnderLineViewLeadingConstraint:(id)");
}

-(id) buttonA {
	%orig;
	NSLog(@"-(id) buttonA");
}

-(id) buttonB {
	%orig;
	NSLog(@"-(id) buttonB");
}

-(void) handlePanGesture:(id) {
	%orig;
	NSLog(@"-(void) handlePanGesture:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setSelected:(long long) {
	%orig;
	NSLog(@"-(void) setSelected:(long long)");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

%end

%hook PMAnimatedString

-(void) setTextFont:(id) {
	%orig;
	NSLog(@"-(void) setTextFont:(id)");
}

-(id) createAndAddLabel {
	%orig;
	NSLog(@"-(id) createAndAddLabel");
}

-(void) updateTextLabelLayout {
	%orig;
	NSLog(@"-(void) updateTextLabelLayout");
}

-(void) showNextAnimatedText {
	%orig;
	NSLog(@"-(void) showNextAnimatedText");
}

-(void) setAnimatedText:(id) {
	%orig;
	NSLog(@"-(void) setAnimatedText:(id)");
}

-(id) animatedText {
	%orig;
	NSLog(@"-(id) animatedText");
}

-(void) doInit {
	%orig;
	NSLog(@"-(void) doInit");
}

-(void) resetToDefaults {
	%orig;
	NSLog(@"-(void) resetToDefaults");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(void) setTextColor:(id) {
	%orig;
	NSLog(@"-(void) setTextColor:(id)");
}

-(id) textColor {
	%orig;
	NSLog(@"-(id) textColor");
}

-(id) textFont {
	%orig;
	NSLog(@"-(id) textFont");
}

%end

%hook PMCreateStationButton

-(void) useSearchIcon:(bool) {
	%orig;
	NSLog(@"-(void) useSearchIcon:(bool)");
}

-(id) initWithFrame:(CGRect) useSearchIcon:(bool) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) useSearchIcon:(bool)");
}

-(void) createStationButtonPressed {
	%orig;
	NSLog(@"-(void) createStationButtonPressed");
}

-(void) animateWithDirection:(long long) onCompletion:(id) {
	%orig;
	NSLog(@"-(void) animateWithDirection:(long long) onCompletion:(id)");
}

-(void) animateCreateStationButtonDown {
	%orig;
	NSLog(@"-(void) animateCreateStationButtonDown");
}

-(void) animateWithDirection:(long long) {
	%orig;
	NSLog(@"-(void) animateWithDirection:(long long)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(long long) animationDirection {
	%orig;
	NSLog(@"-(long long) animationDirection");
}

-(void) setAnimationDirection:(long long) {
	%orig;
	NSLog(@"-(void) setAnimationDirection:(long long)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

%end

%hook PMGalleryViewCell

+(id) galleryViewCellWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"+(id) galleryViewCellWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) setRecommendation:(id) {
	%orig;
	NSLog(@"-(void) setRecommendation:(id)");
}

-(void) cellWasTapped:(id) {
	%orig;
	NSLog(@"-(void) cellWasTapped:(id)");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) detailLabel {
	%orig;
	NSLog(@"-(id) detailLabel");
}

-(void) setDetailLabel:(id) {
	%orig;
	NSLog(@"-(void) setDetailLabel:(id)");
}

-(void) setCellType:(long long) {
	%orig;
	NSLog(@"-(void) setCellType:(long long)");
}

-(long long) cellType {
	%orig;
	NSLog(@"-(long long) cellType");
}

-(id) identifier {
	%orig;
	NSLog(@"-(id) identifier");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setIdentifier:(id) {
	%orig;
	NSLog(@"-(void) setIdentifier:(id)");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

-(id) initWithFrame:(CGRect) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) reuseIdentifier:(id)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook PMSamplesGalleryViewCell

-(void) setupImageView {
	%orig;
	NSLog(@"-(void) setupImageView");
}

-(void) setupPlaybackOverlayView {
	%orig;
	NSLog(@"-(void) setupPlaybackOverlayView");
}

-(void) setupTrackProgressContainerView {
	%orig;
	NSLog(@"-(void) setupTrackProgressContainerView");
}

-(void) setupProgressView {
	%orig;
	NSLog(@"-(void) setupProgressView");
}

-(void) setupPlaybackButton {
	%orig;
	NSLog(@"-(void) setupPlaybackButton");
}

-(void) setPlaybackOverlayView:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackOverlayView:(id)");
}

-(id) playbackOverlayView {
	%orig;
	NSLog(@"-(id) playbackOverlayView");
}

-(void) cellWasTapped:(id) {
	%orig;
	NSLog(@"-(void) cellWasTapped:(id)");
}

-(void) setTrackProgressContainerView:(id) {
	%orig;
	NSLog(@"-(void) setTrackProgressContainerView:(id)");
}

-(id) trackProgressContainerView {
	%orig;
	NSLog(@"-(id) trackProgressContainerView");
}

-(void) cellStateChangedToStopped {
	%orig;
	NSLog(@"-(void) cellStateChangedToStopped");
}

-(void) cellStateChangedToPaused {
	%orig;
	NSLog(@"-(void) cellStateChangedToPaused");
}

-(void) cellStateChangedToPlaying {
	%orig;
	NSLog(@"-(void) cellStateChangedToPlaying");
}

-(void) cellStateChangedToNoSample {
	%orig;
	NSLog(@"-(void) cellStateChangedToNoSample");
}

-(id) playbackButton {
	%orig;
	NSLog(@"-(id) playbackButton");
}

-(void) setPlaybackButton:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackButton:(id)");
}

-(id) descriptionLabel {
	%orig;
	NSLog(@"-(id) descriptionLabel");
}

-(void) setDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionLabel:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(void) setState:(long long) animated:(bool) {
	%orig;
	NSLog(@"-(void) setState:(long long) animated:(bool)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) state {
	%orig;
	NSLog(@"-(long long) state");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setState:(long long) {
	%orig;
	NSLog(@"-(void) setState:(long long)");
}

-(id) initWithFrame:(CGRect) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) reuseIdentifier:(id)");
}

%end

%hook PMArtistGalleryViewCell

-(void) setupImageView {
	%orig;
	NSLog(@"-(void) setupImageView");
}

-(void) setupTitleLabel {
	%orig;
	NSLog(@"-(void) setupTitleLabel");
}

-(void) setTitleLabelContainer:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabelContainer:(id)");
}

-(id) titleLabelContainer {
	%orig;
	NSLog(@"-(id) titleLabelContainer");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) initWithFrame:(CGRect) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) reuseIdentifier:(id)");
}

%end

%hook PMPhoneBannerContainerView

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

%end

%hook PMPhoneTrackActionBarView

-(id) moreOptionsButton {
	%orig;
	NSLog(@"-(id) moreOptionsButton");
}

-(bool) shouldShowUnifiedPlayControl {
	%orig;
	NSLog(@"-(bool) shouldShowUnifiedPlayControl");
}

-(bool) isNowPlaying {
	%orig;
	NSLog(@"-(bool) isNowPlaying");
}

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(void) setIsNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setIsNowPlaying:(bool)");
}

-(void) updateThumbControlsForTrack {
	%orig;
	NSLog(@"-(void) updateThumbControlsForTrack");
}

-(void) enableTrackDetailButtonsAccessbility {
	%orig;
	NSLog(@"-(void) enableTrackDetailButtonsAccessbility");
}

-(void) disableTrackDetailButtonsAccessbility {
	%orig;
	NSLog(@"-(void) disableTrackDetailButtonsAccessbility");
}

-(void) updateBookmarkControlForTrack {
	%orig;
	NSLog(@"-(void) updateBookmarkControlForTrack");
}

-(void) setShareController:(id) {
	%orig;
	NSLog(@"-(void) setShareController:(id)");
}

-(id) shareController {
	%orig;
	NSLog(@"-(id) shareController");
}

-(id) createStationButton {
	%orig;
	NSLog(@"-(id) createStationButton");
}

-(id) thumbUpButton {
	%orig;
	NSLog(@"-(id) thumbUpButton");
}

-(id) thumbDownButton {
	%orig;
	NSLog(@"-(id) thumbDownButton");
}

-(void) setUpAccessibilityLabels {
	%orig;
	NSLog(@"-(void) setUpAccessibilityLabels");
}

-(id) bookmarkButton {
	%orig;
	NSLog(@"-(id) bookmarkButton");
}

-(void) loadViewFromXib {
	%orig;
	NSLog(@"-(void) loadViewFromXib");
}

-(void) setActionBarView:(id) {
	%orig;
	NSLog(@"-(void) setActionBarView:(id)");
}

-(void) bookmarkTrack {
	%orig;
	NSLog(@"-(void) bookmarkTrack");
}

-(void) createStationClicked:(id) {
	%orig;
	NSLog(@"-(void) createStationClicked:(id)");
}

-(void) setTrackAsTired {
	%orig;
	NSLog(@"-(void) setTrackAsTired");
}

-(id) positionOne {
	%orig;
	NSLog(@"-(id) positionOne");
}

-(id) shareButtonLeadingConstraint {
	%orig;
	NSLog(@"-(id) shareButtonLeadingConstraint");
}

-(id) positionTwo {
	%orig;
	NSLog(@"-(id) positionTwo");
}

-(id) createStationButtonLeadingConstraint {
	%orig;
	NSLog(@"-(id) createStationButtonLeadingConstraint");
}

-(id) positionThree {
	%orig;
	NSLog(@"-(id) positionThree");
}

-(id) bookmarkButtonLeadingConstraint {
	%orig;
	NSLog(@"-(id) bookmarkButtonLeadingConstraint");
}

-(id) positionFour {
	%orig;
	NSLog(@"-(id) positionFour");
}

-(id) moreOptionButtonLeadingConstraint {
	%orig;
	NSLog(@"-(id) moreOptionButtonLeadingConstraint");
}

-(id) thumbDownButtonLeadingConstraint {
	%orig;
	NSLog(@"-(id) thumbDownButtonLeadingConstraint");
}

-(id) thumbUpButtonLeadingConstraint {
	%orig;
	NSLog(@"-(id) thumbUpButtonLeadingConstraint");
}

-(id) actionBarView {
	%orig;
	NSLog(@"-(id) actionBarView");
}

-(void) shareClicked:(id) {
	%orig;
	NSLog(@"-(void) shareClicked:(id)");
}

-(void) bookmarkClicked:(id) {
	%orig;
	NSLog(@"-(void) bookmarkClicked:(id)");
}

-(void) thumbUpClicked:(id) {
	%orig;
	NSLog(@"-(void) thumbUpClicked:(id)");
}

-(void) thumbDownClicked:(id) {
	%orig;
	NSLog(@"-(void) thumbDownClicked:(id)");
}

-(void) moreOptionsClicked:(id) {
	%orig;
	NSLog(@"-(void) moreOptionsClicked:(id)");
}

-(void) setBookmarkButton:(id) {
	%orig;
	NSLog(@"-(void) setBookmarkButton:(id)");
}

-(void) setCreateStationButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationButton:(id)");
}

-(void) setThumbUpButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbUpButton:(id)");
}

-(void) setThumbDownButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownButton:(id)");
}

-(void) setMoreOptionsButton:(id) {
	%orig;
	NSLog(@"-(void) setMoreOptionsButton:(id)");
}

-(void) setPositionOne:(id) {
	%orig;
	NSLog(@"-(void) setPositionOne:(id)");
}

-(void) setPositionTwo:(id) {
	%orig;
	NSLog(@"-(void) setPositionTwo:(id)");
}

-(void) setPositionThree:(id) {
	%orig;
	NSLog(@"-(void) setPositionThree:(id)");
}

-(void) setPositionFour:(id) {
	%orig;
	NSLog(@"-(void) setPositionFour:(id)");
}

-(void) setShareButtonLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setShareButtonLeadingConstraint:(id)");
}

-(void) setThumbDownButtonLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownButtonLeadingConstraint:(id)");
}

-(void) setBookmarkButtonLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBookmarkButtonLeadingConstraint:(id)");
}

-(void) setThumbUpButtonLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setThumbUpButtonLeadingConstraint:(id)");
}

-(void) setCreateStationButtonLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCreateStationButtonLeadingConstraint:(id)");
}

-(void) setMoreOptionButtonLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setMoreOptionButtonLeadingConstraint:(id)");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) setLastFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setLastFrame:(CGRect)");
}

-(void) updateViews {
	%orig;
	NSLog(@"-(void) updateViews");
}

-(void) setShareButton:(id) {
	%orig;
	NSLog(@"-(void) setShareButton:(id)");
}

-(id) shareButton {
	%orig;
	NSLog(@"-(id) shareButton");
}

-(CGRect) lastFrame {
	%orig;
	NSLog(@"-(CGRect) lastFrame");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook PMPersonalizationMeterNavigationButton

-(UIEdgeInsets) extendedHitAreaEdges {
	%orig;
	NSLog(@"-(UIEdgeInsets) extendedHitAreaEdges");
}

-(void) setExtendedHitAreaEdges:(UIEdgeInsets) {
	%orig;
	NSLog(@"-(void) setExtendedHitAreaEdges:(UIEdgeInsets)");
}

-(void) animatedMeter:(bool) animatedThumb:(bool) {
	%orig;
	NSLog(@"-(void) animatedMeter:(bool) animatedThumb:(bool)");
}

-(void) rotateThumb:(double) {
	%orig;
	NSLog(@"-(void) rotateThumb:(double)");
}

-(void) setupMeterButton {
	%orig;
	NSLog(@"-(void) setupMeterButton");
}

-(id) meterButton {
	%orig;
	NSLog(@"-(id) meterButton");
}

-(void) setMeterButton:(id) {
	%orig;
	NSLog(@"-(void) setMeterButton:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) addTarget:(id) action:(SEL) forControlEvents:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addTarget:(id) action:(SEL) forControlEvents:(unsigned long long)");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

%end

%hook PMSettingsSectionFooterView

+(double) heightWithTitle:(id) inTableView:(id) {
	%orig;
	NSLog(@"+(double) heightWithTitle:(id) inTableView:(id)");
}

+(id) titleFont {
	%orig;
	NSLog(@"+(id) titleFont");
}

-(void) setupAppearance {
	%orig;
	NSLog(@"-(void) setupAppearance");
}

-(id) initWithTitle:(id) inTableView:(id) {
	%orig;
	NSLog(@"-(id) initWithTitle:(id) inTableView:(id)");
}

-(id) initWithTitle:(id) inTableView:(id) style:(long long) {
	%orig;
	NSLog(@"-(id) initWithTitle:(id) inTableView:(id) style:(long long)");
}

-(id) fontColor {
	%orig;
	NSLog(@"-(id) fontColor");
}

-(void) setFontColor:(id) {
	%orig;
	NSLog(@"-(void) setFontColor:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setStyle:(long long) {
	%orig;
	NSLog(@"-(void) setStyle:(long long)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook PMOfflineSettingsSectionFooterView

+(id) titleFont {
	%orig;
	NSLog(@"+(id) titleFont");
}

-(id) initWithTitle:(id) inTableView:(id) {
	%orig;
	NSLog(@"-(id) initWithTitle:(id) inTableView:(id)");
}

-(id) initWithTitle:(id) inTableView:(id) style:(long long) {
	%orig;
	NSLog(@"-(id) initWithTitle:(id) inTableView:(id) style:(long long)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMProgressView

-(void) cancelAnimation {
	%orig;
	NSLog(@"-(void) cancelAnimation");
}

-(bool) animatesProgressChange {
	%orig;
	NSLog(@"-(bool) animatesProgressChange");
}

-(void) setAnimatesProgressChange:(bool) {
	%orig;
	NSLog(@"-(void) setAnimatesProgressChange:(bool)");
}

-(double) durationBetweenUpdate {
	%orig;
	NSLog(@"-(double) durationBetweenUpdate");
}

-(void) setDurationBetweenUpdate:(double) {
	%orig;
	NSLog(@"-(void) setDurationBetweenUpdate:(double)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setProgress:(double) {
	%orig;
	NSLog(@"-(void) setProgress:(double)");
}

-(double) progress {
	%orig;
	NSLog(@"-(double) progress");
}

%end

%hook PMVideoPlayerView

+(Class) layerClass {
	%orig;
	NSLog(@"+(Class) layerClass");
}

-(bool) isVerticalLayout {
	%orig;
	NSLog(@"-(bool) isVerticalLayout");
}

-(void) prepareForBackgroundPlaying {
	%orig;
	NSLog(@"-(void) prepareForBackgroundPlaying");
}

-(void) exitBackgroundPlaying {
	%orig;
	NSLog(@"-(void) exitBackgroundPlaying");
}

-(id) initWithPlayer:(id) {
	%orig;
	NSLog(@"-(id) initWithPlayer:(id)");
}

-(id) playerLayer {
	%orig;
	NSLog(@"-(id) playerLayer");
}

-(double) currentPlaybackTime {
	%orig;
	NSLog(@"-(double) currentPlaybackTime");
}

-(id) player {
	%orig;
	NSLog(@"-(id) player");
}

-(void) setPlayer:(id) {
	%orig;
	NSLog(@"-(void) setPlayer:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) removeFromSuperview {
	%orig;
	NSLog(@"-(void) removeFromSuperview");
}

-(double) duration {
	%orig;
	NSLog(@"-(double) duration");
}

%end

%hook PMTitleViewLabel

-(void) setTitleViewIcon:(id) text:(id) subtitleText:(id) {
	%orig;
	NSLog(@"-(void) setTitleViewIcon:(id) text:(id) subtitleText:(id)");
}

-(void) setMaxTitleViewLabelWidth:(double) {
	%orig;
	NSLog(@"-(void) setMaxTitleViewLabelWidth:(double)");
}

-(void) setAutoScaleFont:(bool) {
	%orig;
	NSLog(@"-(void) setAutoScaleFont:(bool)");
}

-(double) lastLaidOutWidth {
	%orig;
	NSLog(@"-(double) lastLaidOutWidth");
}

-(bool) widthIsDeterminedBySuperview {
	%orig;
	NSLog(@"-(bool) widthIsDeterminedBySuperview");
}

-(void) redrawTitle {
	%orig;
	NSLog(@"-(void) redrawTitle");
}

-(void) setLastLaidOutWidth:(double) {
	%orig;
	NSLog(@"-(void) setLastLaidOutWidth:(double)");
}

-(double) maxTitleViewLabelWidth {
	%orig;
	NSLog(@"-(double) maxTitleViewLabelWidth");
}

-(double) availableTitleWidth {
	%orig;
	NSLog(@"-(double) availableTitleWidth");
}

-(void) addSubtitleLabelWithText:(id) {
	%orig;
	NSLog(@"-(void) addSubtitleLabelWithText:(id)");
}

-(double) heightForView {
	%orig;
	NSLog(@"-(double) heightForView");
}

-(void) setText:(id) subtitleText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id) subtitleText:(id)");
}

-(void) setTitleViewIcon:(id) text:(id) {
	%orig;
	NSLog(@"-(void) setTitleViewIcon:(id) text:(id)");
}

-(id) copyOfTitleLabel {
	%orig;
	NSLog(@"-(id) copyOfTitleLabel");
}

-(bool) autoScaleFont {
	%orig;
	NSLog(@"-(bool) autoScaleFont");
}

-(id) subtitleText {
	%orig;
	NSLog(@"-(id) subtitleText");
}

-(id) titleTextColor {
	%orig;
	NSLog(@"-(id) titleTextColor");
}

-(void) setTitleTextColor:(id) {
	%orig;
	NSLog(@"-(void) setTitleTextColor:(id)");
}

-(id) subtitleLabel {
	%orig;
	NSLog(@"-(id) subtitleLabel");
}

-(void) setSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleLabel:(id)");
}

-(void) setSubtitleText:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleText:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(void) willMoveToSuperview:(id) {
	%orig;
	NSLog(@"-(void) willMoveToSuperview:(id)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook PMStationPersonalizationMeterThumbCountView

-(id) kvoController {
	%orig;
	NSLog(@"-(id) kvoController");
}

-(void) setKvoController:(id) {
	%orig;
	NSLog(@"-(void) setKvoController:(id)");
}

-(id) personalizationMeterButton {
	%orig;
	NSLog(@"-(id) personalizationMeterButton");
}

-(void) setPersonalizationMeterButton:(id) {
	%orig;
	NSLog(@"-(void) setPersonalizationMeterButton:(id)");
}

-(id) pillThumbDownButton {
	%orig;
	NSLog(@"-(id) pillThumbDownButton");
}

-(id) pillThumbUpButton {
	%orig;
	NSLog(@"-(id) pillThumbUpButton");
}

-(void) setThumbUpMeterCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setThumbUpMeterCount:(unsigned long long)");
}

-(void) setThumbDownMeterCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setThumbDownMeterCount:(unsigned long long)");
}

-(id) thumbUpPillView {
	%orig;
	NSLog(@"-(id) thumbUpPillView");
}

-(id) thumbDownPillView {
	%orig;
	NSLog(@"-(id) thumbDownPillView");
}

-(void) setPillThumbDownButton:(id) {
	%orig;
	NSLog(@"-(void) setPillThumbDownButton:(id)");
}

-(void) setPillThumbUpButton:(id) {
	%orig;
	NSLog(@"-(void) setPillThumbUpButton:(id)");
}

-(void) setThumbUpPillView:(id) {
	%orig;
	NSLog(@"-(void) setThumbUpPillView:(id)");
}

-(void) setThumbDownPillView:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownPillView:(id)");
}

-(unsigned long long) thumbUpMeterCount {
	%orig;
	NSLog(@"-(unsigned long long) thumbUpMeterCount");
}

-(unsigned long long) thumbDownMeterCount {
	%orig;
	NSLog(@"-(unsigned long long) thumbDownMeterCount");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMSleepDialView

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) batteryStateDidChange {
	%orig;
	NSLog(@"-(void) batteryStateDidChange");
}

-(void) orientationWillChange {
	%orig;
	NSLog(@"-(void) orientationWillChange");
}

-(id) countdownView {
	%orig;
	NSLog(@"-(id) countdownView");
}

-(void) setIsConnectedToPower:(bool) {
	%orig;
	NSLog(@"-(void) setIsConnectedToPower:(bool)");
}

-(void) alarmSnoozed {
	%orig;
	NSLog(@"-(void) alarmSnoozed");
}

-(void) sleepTimerEnded {
	%orig;
	NSLog(@"-(void) sleepTimerEnded");
}

-(void) volumeUpdated {
	%orig;
	NSLog(@"-(void) volumeUpdated");
}

-(void) checkForModeUpdate {
	%orig;
	NSLog(@"-(void) checkForModeUpdate");
}

-(void) setVolumeWasUpdatedRecently:(bool) {
	%orig;
	NSLog(@"-(void) setVolumeWasUpdatedRecently:(bool)");
}

-(void) clearVolumeUpdated {
	%orig;
	NSLog(@"-(void) clearVolumeUpdated");
}

-(long long) modeForCurrentState {
	%orig;
	NSLog(@"-(long long) modeForCurrentState");
}

-(void) switchToMode:(long long) {
	%orig;
	NSLog(@"-(void) switchToMode:(long long)");
}

-(bool) volumeWasUpdatedRecently {
	%orig;
	NSLog(@"-(bool) volumeWasUpdatedRecently");
}

-(bool) isConnectedToPower {
	%orig;
	NSLog(@"-(bool) isConnectedToPower");
}

-(id) sleepTimerView {
	%orig;
	NSLog(@"-(id) sleepTimerView");
}

-(id) connectToPowerView {
	%orig;
	NSLog(@"-(id) connectToPowerView");
}

-(id) snoozeView {
	%orig;
	NSLog(@"-(id) snoozeView");
}

-(id) volumeIconImageView {
	%orig;
	NSLog(@"-(id) volumeIconImageView");
}

-(bool) isSwitchingModes {
	%orig;
	NSLog(@"-(bool) isSwitchingModes");
}

-(void) setIsSwitchingModes:(bool) {
	%orig;
	NSLog(@"-(void) setIsSwitchingModes:(bool)");
}

-(id) viewForMode:(long long) {
	%orig;
	NSLog(@"-(id) viewForMode:(long long)");
}

-(bool) shouldShowCountdownForMode:(long long) {
	%orig;
	NSLog(@"-(bool) shouldShowCountdownForMode:(long long)");
}

-(void) setTransitioningFromMode:(long long) {
	%orig;
	NSLog(@"-(void) setTransitioningFromMode:(long long)");
}

-(void) updateViewForMode:(long long) {
	%orig;
	NSLog(@"-(void) updateViewForMode:(long long)");
}

-(id) powerLineView {
	%orig;
	NSLog(@"-(id) powerLineView");
}

-(id) powerCircleView {
	%orig;
	NSLog(@"-(id) powerCircleView");
}

-(double) powerLineTopInset {
	%orig;
	NSLog(@"-(double) powerLineTopInset");
}

-(id) powerCircleImageView {
	%orig;
	NSLog(@"-(id) powerCircleImageView");
}

-(long long) transitioningFromMode {
	%orig;
	NSLog(@"-(long long) transitioningFromMode");
}

-(id) sleepTimeLabel {
	%orig;
	NSLog(@"-(id) sleepTimeLabel");
}

-(id) snoozeTimeLabel {
	%orig;
	NSLog(@"-(id) snoozeTimeLabel");
}

-(void) startSnoozeAnimation {
	%orig;
	NSLog(@"-(void) startSnoozeAnimation");
}

-(bool) volumeIsShowingMuted {
	%orig;
	NSLog(@"-(bool) volumeIsShowingMuted");
}

-(void) setVolumeIsShowingMuted:(bool) {
	%orig;
	NSLog(@"-(void) setVolumeIsShowingMuted:(bool)");
}

-(bool) isSnoozeAnimationActive {
	%orig;
	NSLog(@"-(bool) isSnoozeAnimationActive");
}

-(id) snoozeIconImageView {
	%orig;
	NSLog(@"-(id) snoozeIconImageView");
}

-(void) setIsSnoozeAnimationActive:(bool) {
	%orig;
	NSLog(@"-(void) setIsSnoozeAnimationActive:(bool)");
}

-(void) setCountdownView:(id) {
	%orig;
	NSLog(@"-(void) setCountdownView:(id)");
}

-(void) setConnectToPowerView:(id) {
	%orig;
	NSLog(@"-(void) setConnectToPowerView:(id)");
}

-(void) setDefaultView:(id) {
	%orig;
	NSLog(@"-(void) setDefaultView:(id)");
}

-(void) setPowerCircleView:(id) {
	%orig;
	NSLog(@"-(void) setPowerCircleView:(id)");
}

-(void) setPowerCircleImageView:(id) {
	%orig;
	NSLog(@"-(void) setPowerCircleImageView:(id)");
}

-(void) setPowerLineView:(id) {
	%orig;
	NSLog(@"-(void) setPowerLineView:(id)");
}

-(void) setSleepTimeLabel:(id) {
	%orig;
	NSLog(@"-(void) setSleepTimeLabel:(id)");
}

-(void) setSleepTimerView:(id) {
	%orig;
	NSLog(@"-(void) setSleepTimerView:(id)");
}

-(void) setSnoozeIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setSnoozeIconImageView:(id)");
}

-(void) setSnoozeTimeLabel:(id) {
	%orig;
	NSLog(@"-(void) setSnoozeTimeLabel:(id)");
}

-(void) setSnoozeView:(id) {
	%orig;
	NSLog(@"-(void) setSnoozeView:(id)");
}

-(void) setVolumeIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setVolumeIconImageView:(id)");
}

-(id) defaultView {
	%orig;
	NSLog(@"-(id) defaultView");
}

-(id) alarm {
	%orig;
	NSLog(@"-(id) alarm");
}

-(void) setAlarm:(id) {
	%orig;
	NSLog(@"-(void) setAlarm:(id)");
}

-(void) updateDisplay {
	%orig;
	NSLog(@"-(void) updateDisplay");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(long long) mode {
	%orig;
	NSLog(@"-(long long) mode");
}

-(void) setMode:(long long) {
	%orig;
	NSLog(@"-(void) setMode:(long long)");
}

%end

%hook PMBadgeView

-(void) setupBadgeView {
	%orig;
	NSLog(@"-(void) setupBadgeView");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook PMTokenizerView

-(void) setSpecialEmptySpaceString:(id) {
	%orig;
	NSLog(@"-(void) setSpecialEmptySpaceString:(id)");
}

-(void) setHiddenTextField:(id) {
	%orig;
	NSLog(@"-(void) setHiddenTextField:(id)");
}

-(void) handleTextDidChange:(id) {
	%orig;
	NSLog(@"-(void) handleTextDidChange:(id)");
}

-(void) setDeletedToken:(id) {
	%orig;
	NSLog(@"-(void) setDeletedToken:(id)");
}

-(long long) addToken:(id) becomeFirstResponder:(bool) {
	%orig;
	NSLog(@"-(long long) addToken:(id) becomeFirstResponder:(bool)");
}

-(void) activateTokenButton:(id) {
	%orig;
	NSLog(@"-(void) activateTokenButton:(id)");
}

-(id) cleanInputText:(id) {
	%orig;
	NSLog(@"-(id) cleanInputText:(id)");
}

-(long long) deleteActiveTokens {
	%orig;
	NSLog(@"-(long long) deleteActiveTokens");
}

-(long long) removeTokensWithObject:(id) {
	%orig;
	NSLog(@"-(long long) removeTokensWithObject:(id)");
}

-(id) hiddenTextField {
	%orig;
	NSLog(@"-(id) hiddenTextField");
}

-(id) deletedToken {
	%orig;
	NSLog(@"-(id) deletedToken");
}

-(id) specialEmptySpaceString {
	%orig;
	NSLog(@"-(id) specialEmptySpaceString");
}

-(void) doInit {
	%orig;
	NSLog(@"-(void) doInit");
}

-(long long) addToken:(id) {
	%orig;
	NSLog(@"-(long long) addToken:(id)");
}

-(void) setTokens:(id) {
	%orig;
	NSLog(@"-(void) setTokens:(id)");
}

-(id) addButton {
	%orig;
	NSLog(@"-(id) addButton");
}

-(void) setTextField:(id) {
	%orig;
	NSLog(@"-(void) setTextField:(id)");
}

-(void) setAddButton:(id) {
	%orig;
	NSLog(@"-(void) setAddButton:(id)");
}

-(bool) removeTokenAtIndex:(long long) {
	%orig;
	NSLog(@"-(bool) removeTokenAtIndex:(long long)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) textField {
	%orig;
	NSLog(@"-(id) textField");
}

-(bool) becomeFirstResponder {
	%orig;
	NSLog(@"-(bool) becomeFirstResponder");
}

-(bool) resignFirstResponder {
	%orig;
	NSLog(@"-(bool) resignFirstResponder");
}

-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id) {
	%orig;
	NSLog(@"-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) buttonPressed:(id) {
	%orig;
	NSLog(@"-(void) buttonPressed:(id)");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

-(id) tokens {
	%orig;
	NSLog(@"-(id) tokens");
}

-(bool) textFieldShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldReturn:(id)");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

%end

%hook PMArcView

-(void) setGradientLayerColors:(id) {
	%orig;
	NSLog(@"-(void) setGradientLayerColors:(id)");
}

-(id) gradientLayerColors {
	%orig;
	NSLog(@"-(id) gradientLayerColors");
}

-(void) updateGradientLayerFrame {
	%orig;
	NSLog(@"-(void) updateGradientLayerFrame");
}

-(void) setArcMask:(id) {
	%orig;
	NSLog(@"-(void) setArcMask:(id)");
}

-(id) arcMask {
	%orig;
	NSLog(@"-(id) arcMask");
}

-(void) updateArcHeightUsingOffset:(double) {
	%orig;
	NSLog(@"-(void) updateArcHeightUsingOffset:(double)");
}

-(void) setArcShadow:(id) {
	%orig;
	NSLog(@"-(void) setArcShadow:(id)");
}

-(id) arcShadow {
	%orig;
	NSLog(@"-(id) arcShadow");
}

-(UIEdgeInsets) gradientLayerInsets {
	%orig;
	NSLog(@"-(UIEdgeInsets) gradientLayerInsets");
}

-(double) arcHeight {
	%orig;
	NSLog(@"-(double) arcHeight");
}

-(void) setArcHeight:(double) {
	%orig;
	NSLog(@"-(void) setArcHeight:(double)");
}

-(void) redrawArc {
	%orig;
	NSLog(@"-(void) redrawArc");
}

-(void) setGradientLayerInsets:(UIEdgeInsets) {
	%orig;
	NSLog(@"-(void) setGradientLayerInsets:(UIEdgeInsets)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) gradientLayer {
	%orig;
	NSLog(@"-(id) gradientLayer");
}

-(void) setGradientLayer:(id) {
	%orig;
	NSLog(@"-(void) setGradientLayer:(id)");
}

%end

%hook PMCommentForm

-(id) initWithSuperview:(id) buttonTitle:(id) {
	%orig;
	NSLog(@"-(id) initWithSuperview:(id) buttonTitle:(id)");
}

-(void) enableCallbackForWebViewHost:(id) andCommand:(id) {
	%orig;
	NSLog(@"-(void) enableCallbackForWebViewHost:(id) andCommand:(id)");
}

-(void) setDisappearWhenDone:(bool) {
	%orig;
	NSLog(@"-(void) setDisappearWhenDone:(bool)");
}

-(void) focusNow {
	%orig;
	NSLog(@"-(void) focusNow");
}

-(void) setupMainButtonUsingTitle:(id) {
	%orig;
	NSLog(@"-(void) setupMainButtonUsingTitle:(id)");
}

-(void) setupTextField {
	%orig;
	NSLog(@"-(void) setupTextField");
}

-(id) topShadow {
	%orig;
	NSLog(@"-(id) topShadow");
}

-(void) submitComment:(id) {
	%orig;
	NSLog(@"-(void) submitComment:(id)");
}

-(void) setInitialTextFieldHeight:(float) {
	%orig;
	NSLog(@"-(void) setInitialTextFieldHeight:(float)");
}

-(CGRect) resizeTextFieldToFrame {
	%orig;
	NSLog(@"-(CGRect) resizeTextFieldToFrame");
}

-(bool) currentEditIsBulk {
	%orig;
	NSLog(@"-(bool) currentEditIsBulk");
}

-(float) initialTextFieldHeight {
	%orig;
	NSLog(@"-(float) initialTextFieldHeight");
}

-(void) lowerWithKeyboard {
	%orig;
	NSLog(@"-(void) lowerWithKeyboard");
}

-(void) setCurrentEditIsBulk:(bool) {
	%orig;
	NSLog(@"-(void) setCurrentEditIsBulk:(bool)");
}

-(void) resizeTextFieldIfNeeded {
	%orig;
	NSLog(@"-(void) resizeTextFieldIfNeeded");
}

-(void) setKeyboardAnimationCurve:(long long) {
	%orig;
	NSLog(@"-(void) setKeyboardAnimationCurve:(long long)");
}

-(void) riseWithKeyboard {
	%orig;
	NSLog(@"-(void) riseWithKeyboard");
}

-(bool) disappearWhenDone {
	%orig;
	NSLog(@"-(bool) disappearWhenDone");
}

-(long long) keyboardAnimationCurve {
	%orig;
	NSLog(@"-(long long) keyboardAnimationCurve");
}

-(void) setTopShadow:(id) {
	%orig;
	NSLog(@"-(void) setTopShadow:(id)");
}

-(void) setHost:(id) {
	%orig;
	NSLog(@"-(void) setHost:(id)");
}

-(void) setTopGlow:(id) {
	%orig;
	NSLog(@"-(void) setTopGlow:(id)");
}

-(id) topGlow {
	%orig;
	NSLog(@"-(id) topGlow");
}

-(float) keyboardHeight {
	%orig;
	NSLog(@"-(float) keyboardHeight");
}

-(void) setKeyboardHeight:(float) {
	%orig;
	NSLog(@"-(void) setKeyboardHeight:(float)");
}

-(void) setupView {
	%orig;
	NSLog(@"-(void) setupView");
}

-(void) keyboardWillShow:(id) {
	%orig;
	NSLog(@"-(void) keyboardWillShow:(id)");
}

-(id) command {
	%orig;
	NSLog(@"-(id) command");
}

-(void) setCommand:(id) {
	%orig;
	NSLog(@"-(void) setCommand:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) removeFromSuperview {
	%orig;
	NSLog(@"-(void) removeFromSuperview");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setPlaceholder:(id) {
	%orig;
	NSLog(@"-(void) setPlaceholder:(id)");
}

-(double) animationDuration {
	%orig;
	NSLog(@"-(double) animationDuration");
}

-(void) setAnimationDuration:(double) {
	%orig;
	NSLog(@"-(void) setAnimationDuration:(double)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(void) didRotate:(id) {
	%orig;
	NSLog(@"-(void) didRotate:(id)");
}

-(id) host {
	%orig;
	NSLog(@"-(id) host");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

-(void) setTextView:(id) {
	%orig;
	NSLog(@"-(void) setTextView:(id)");
}

-(void) textViewDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textViewDidBeginEditing:(id)");
}

-(void) textViewDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textViewDidEndEditing:(id)");
}

-(bool) textView:(id) shouldChangeTextInRange:(_NSRange) replacementText:(id) {
	%orig;
	NSLog(@"-(bool) textView:(id) shouldChangeTextInRange:(_NSRange) replacementText:(id)");
}

-(void) textViewDidChange:(id) {
	%orig;
	NSLog(@"-(void) textViewDidChange:(id)");
}

-(id) textView {
	%orig;
	NSLog(@"-(id) textView");
}

%end

%hook PointsInsideSubviewsUIView

-(bool) ignoresHiddenSubviews {
	%orig;
	NSLog(@"-(bool) ignoresHiddenSubviews");
}

-(void) setIgnoresHiddenSubviews:(bool) {
	%orig;
	NSLog(@"-(void) setIgnoresHiddenSubviews:(bool)");
}

-(bool) ignoresTransparentSubviews {
	%orig;
	NSLog(@"-(bool) ignoresTransparentSubviews");
}

-(void) setIgnoresTransparentSubviews:(bool) {
	%orig;
	NSLog(@"-(void) setIgnoresTransparentSubviews:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMTrackHistoryImageListView

-(id) innerCollectionView {
	%orig;
	NSLog(@"-(id) innerCollectionView");
}

-(void) setInnerCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setInnerCollectionView:(id)");
}

-(void) reloadCellAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) reloadCellAtIndex:(unsigned long long)");
}

-(void) addNewTrack {
	%orig;
	NSLog(@"-(void) addNewTrack");
}

-(void) resetUI {
	%orig;
	NSLog(@"-(void) resetUI");
}

-(CGPoint) baseContentOffset {
	%orig;
	NSLog(@"-(CGPoint) baseContentOffset");
}

-(void) setBaseContentOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) setBaseContentOffset:(CGPoint)");
}

-(double) cellspace {
	%orig;
	NSLog(@"-(double) cellspace");
}

-(void) setCellspace:(double) {
	%orig;
	NSLog(@"-(void) setCellspace:(double)");
}

-(double) selectLineOffset {
	%orig;
	NSLog(@"-(double) selectLineOffset");
}

-(void) setSelectLineOffset:(double) {
	%orig;
	NSLog(@"-(void) setSelectLineOffset:(double)");
}

-(void) setSelectedArea:(CGRect) {
	%orig;
	NSLog(@"-(void) setSelectedArea:(CGRect)");
}

-(void) updateSelectedStatusUI {
	%orig;
	NSLog(@"-(void) updateSelectedStatusUI");
}

-(void) thumbUpButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) thumbUpButtonClicked:(id)");
}

-(void) thumbDownButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) thumbDownButtonClicked:(id)");
}

-(void) updateCell:(id) withIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) updateCell:(id) withIndex:(unsigned long long)");
}

-(CGRect) selectedArea {
	%orig;
	NSLog(@"-(CGRect) selectedArea");
}

-(CGPoint) targetContentOffsetBySelectedCellFrame:(CGRect) {
	%orig;
	NSLog(@"-(CGPoint) targetContentOffsetBySelectedCellFrame:(CGRect)");
}

-(void) scrollToLastItemAnimated:(bool) {
	%orig;
	NSLog(@"-(void) scrollToLastItemAnimated:(bool)");
}

-(bool) isInBadState {
	%orig;
	NSLog(@"-(bool) isInBadState");
}

-(unsigned long long*) selectCellIndex {
	%orig;
	NSLog(@"-(unsigned long long*) selectCellIndex");
}

-(void) setSelectCellIndex:(unsigned long long*) {
	%orig;
	NSLog(@"-(void) setSelectCellIndex:(unsigned long long*)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) setCellWidth:(double) {
	%orig;
	NSLog(@"-(void) setCellWidth:(double)");
}

-(double) cellWidth {
	%orig;
	NSLog(@"-(double) cellWidth");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*)");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(unsigned long long) itemCount {
	%orig;
	NSLog(@"-(unsigned long long) itemCount");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(void) setItemCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setItemCount:(unsigned long long)");
}

-(id) flowLayout {
	%orig;
	NSLog(@"-(id) flowLayout");
}

-(void) setFlowLayout:(id) {
	%orig;
	NSLog(@"-(void) setFlowLayout:(id)");
}

%end

%hook PMWebAlertView

+(id) standardAlertViewWithURL:(id) {
	%orig;
	NSLog(@"+(id) standardAlertViewWithURL:(id)");
}

-(id) webViewHost {
	%orig;
	NSLog(@"-(id) webViewHost");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(void) webViewHostDidRequestCustomWebViewContainerClose:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidRequestCustomWebViewContainerClose:(id)");
}

-(void) webViewHostDidRequestDismiss:(id) command:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidRequestDismiss:(id) command:(id)");
}

-(bool) tapAnywhereToClose {
	%orig;
	NSLog(@"-(bool) tapAnywhereToClose");
}

-(void) setTapAnywhereToClose:(bool) {
	%orig;
	NSLog(@"-(void) setTapAnywhereToClose:(bool)");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) setWebViewHost:(id) {
	%orig;
	NSLog(@"-(void) setWebViewHost:(id)");
}

-(void) showAsSystemAlert {
	%orig;
	NSLog(@"-(void) showAsSystemAlert");
}

-(void) setUsesModalPresenter:(bool) {
	%orig;
	NSLog(@"-(void) setUsesModalPresenter:(bool)");
}

-(void) setWebViewInitialSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setWebViewInitialSize:(CGSize)");
}

-(void) setWebViewScalesPageToFit:(bool) {
	%orig;
	NSLog(@"-(void) setWebViewScalesPageToFit:(bool)");
}

-(void) setWebViewAutoResizeFrameToFit:(bool) {
	%orig;
	NSLog(@"-(void) setWebViewAutoResizeFrameToFit:(bool)");
}

-(void) setWebViewIsFramed:(bool) {
	%orig;
	NSLog(@"-(void) setWebViewIsFramed:(bool)");
}

-(bool) usesModalPresenter {
	%orig;
	NSLog(@"-(bool) usesModalPresenter");
}

-(void) showAlertAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) showAlertAnimated:(bool) completion:(id)");
}

-(CGRect) acceptableFrameFromSize:(CGSize) {
	%orig;
	NSLog(@"-(CGRect) acceptableFrameFromSize:(CGSize)");
}

-(void) handleWebViewTap:(id) {
	%orig;
	NSLog(@"-(void) handleWebViewTap:(id)");
}

-(void) setDismissHasBegun:(bool) {
	%orig;
	NSLog(@"-(void) setDismissHasBegun:(bool)");
}

-(void) setupLoadingIndicator {
	%orig;
	NSLog(@"-(void) setupLoadingIndicator");
}

-(void) dismissAlertAnimated:(bool) completion:(id) {
	%orig;
	NSLog(@"-(void) dismissAlertAnimated:(bool) completion:(id)");
}

-(bool) dismissHasBegun {
	%orig;
	NSLog(@"-(bool) dismissHasBegun");
}

-(id) dismissCommand {
	%orig;
	NSLog(@"-(id) dismissCommand");
}

-(void) setDismissCommand:(id) {
	%orig;
	NSLog(@"-(void) setDismissCommand:(id)");
}

-(void) showWebViewIfCapableWithStartTime:(id) retryInterval:(double) {
	%orig;
	NSLog(@"-(void) showWebViewIfCapableWithStartTime:(id) retryInterval:(double)");
}

-(bool) isWebRenderingDone:(id) {
	%orig;
	NSLog(@"-(bool) isWebRenderingDone:(id)");
}

-(void) showWebView {
	%orig;
	NSLog(@"-(void) showWebView");
}

-(void) dismissLoadingIndicator {
	%orig;
	NSLog(@"-(void) dismissLoadingIndicator");
}

-(id) initWithUrl:(id) {
	%orig;
	NSLog(@"-(id) initWithUrl:(id)");
}

-(id) initWithHtmlContent:(id) {
	%orig;
	NSLog(@"-(id) initWithHtmlContent:(id)");
}

-(CGSize) webViewInitialSize {
	%orig;
	NSLog(@"-(CGSize) webViewInitialSize");
}

-(bool) webViewIsFramed {
	%orig;
	NSLog(@"-(bool) webViewIsFramed");
}

-(bool) webViewScalesPageToFit {
	%orig;
	NSLog(@"-(bool) webViewScalesPageToFit");
}

-(bool) webViewAutoResizeFrameToFit {
	%orig;
	NSLog(@"-(bool) webViewAutoResizeFrameToFit");
}

-(void) showLoadingIndicator {
	%orig;
	NSLog(@"-(void) showLoadingIndicator");
}

-(id) loadingIndicatorTimer {
	%orig;
	NSLog(@"-(id) loadingIndicatorTimer");
}

-(void) setLoadingIndicatorTimer:(id) {
	%orig;
	NSLog(@"-(void) setLoadingIndicatorTimer:(id)");
}

-(id) htmlContent {
	%orig;
	NSLog(@"-(id) htmlContent");
}

-(void) updateToolbar {
	%orig;
	NSLog(@"-(void) updateToolbar");
}

-(void) dismissView {
	%orig;
	NSLog(@"-(void) dismissView");
}

-(void) setShowDoneButton:(bool) {
	%orig;
	NSLog(@"-(void) setShowDoneButton:(bool)");
}

-(bool) showDoneButton {
	%orig;
	NSLog(@"-(bool) showDoneButton");
}

-(void) setHtmlContent:(id) {
	%orig;
	NSLog(@"-(void) setHtmlContent:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(id) toolbar {
	%orig;
	NSLog(@"-(id) toolbar");
}

-(void) setToolbar:(id) {
	%orig;
	NSLog(@"-(void) setToolbar:(id)");
}

-(id) url {
	%orig;
	NSLog(@"-(id) url");
}

-(void) setUrl:(id) {
	%orig;
	NSLog(@"-(void) setUrl:(id)");
}

%end

%hook PMRadialProgressView

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(double) strokeWidth {
	%orig;
	NSLog(@"-(double) strokeWidth");
}

-(void) setStrokeWidth:(double) {
	%orig;
	NSLog(@"-(void) setStrokeWidth:(double)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setProgress:(double) {
	%orig;
	NSLog(@"-(void) setProgress:(double)");
}

-(id) fillColor {
	%orig;
	NSLog(@"-(id) fillColor");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(double) progress {
	%orig;
	NSLog(@"-(double) progress");
}

-(void) setFillColor:(id) {
	%orig;
	NSLog(@"-(void) setFillColor:(id)");
}

%end

%hook PMBrowseButtonFooterView

-(id) searchSuggestionLabel {
	%orig;
	NSLog(@"-(id) searchSuggestionLabel");
}

-(void) updateBrowseButtonLayoutForSearchUnification {
	%orig;
	NSLog(@"-(void) updateBrowseButtonLayoutForSearchUnification");
}

-(id) browseButton {
	%orig;
	NSLog(@"-(id) browseButton");
}

-(void) addBrowseButtonBorder {
	%orig;
	NSLog(@"-(void) addBrowseButtonBorder");
}

-(id) browseButtonFixedWidthConstraint {
	%orig;
	NSLog(@"-(id) browseButtonFixedWidthConstraint");
}

-(void) didTapBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapBrowseButton:(id)");
}

-(void) setSearchSuggestionLabel:(id) {
	%orig;
	NSLog(@"-(void) setSearchSuggestionLabel:(id)");
}

-(void) setBrowseButtonFixedWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBrowseButtonFixedWidthConstraint:(id)");
}

-(void) setBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) setBrowseButton:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMSettingsNotificationView

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) drawLineOfColor:(id) from:(CGPoint) to:(CGPoint) withContext:(CGContext*) {
	%orig;
	NSLog(@"-(void) drawLineOfColor:(id) from:(CGPoint) to:(CGPoint) withContext:(CGContext*)");
}

-(id) initWithFrame:(CGRect) userNotification:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) userNotification:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook PMFormCellBackground

-(bool) omitsBorder {
	%orig;
	NSLog(@"-(bool) omitsBorder");
}

-(CGPath*) newWholePath {
	%orig;
	NSLog(@"-(CGPath*) newWholePath");
}

-(CGPath*) newLabelPath {
	%orig;
	NSLog(@"-(CGPath*) newLabelPath");
}

-(void) setStrokePath {
	%orig;
	NSLog(@"-(void) setStrokePath");
}

-(id) initWithFrame:(CGRect) type:(long long) lableWidth:(float) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) type:(long long) lableWidth:(float)");
}

-(void) setOmitsBorder:(bool) {
	%orig;
	NSLog(@"-(void) setOmitsBorder:(bool)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook PMLoadingView

-(void) setVisible:(bool) inView:(id) {
	%orig;
	NSLog(@"-(void) setVisible:(bool) inView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) showInView:(id) {
	%orig;
	NSLog(@"-(void) showInView:(id)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(void) hide {
	%orig;
	NSLog(@"-(void) hide");
}

-(id) spinner {
	%orig;
	NSLog(@"-(id) spinner");
}

-(void) setSpinner:(id) {
	%orig;
	NSLog(@"-(void) setSpinner:(id)");
}

%end

%hook PMBrowseFeatureStationsView

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(id) stationAlbumArtImageView {
	%orig;
	NSLog(@"-(id) stationAlbumArtImageView");
}

-(void) didTapFeatureStationsViewFromSender:(id) {
	%orig;
	NSLog(@"-(void) didTapFeatureStationsViewFromSender:(id)");
}

-(void) positionStationTitleLabelWithColor:(id) {
	%orig;
	NSLog(@"-(void) positionStationTitleLabelWithColor:(id)");
}

-(id) stationTitleLabel {
	%orig;
	NSLog(@"-(id) stationTitleLabel");
}

-(id) stationSubTitleLabel {
	%orig;
	NSLog(@"-(id) stationSubTitleLabel");
}

-(id) playButtonImageView {
	%orig;
	NSLog(@"-(id) playButtonImageView");
}

-(id) stationTitleContainer {
	%orig;
	NSLog(@"-(id) stationTitleContainer");
}

-(id) stationAttributesContainer {
	%orig;
	NSLog(@"-(id) stationAttributesContainer");
}

-(void) setStationAttributesContainer:(id) {
	%orig;
	NSLog(@"-(void) setStationAttributesContainer:(id)");
}

-(void) setStationTitleContainer:(id) {
	%orig;
	NSLog(@"-(void) setStationTitleContainer:(id)");
}

-(void) setPlayButtonImageView:(id) {
	%orig;
	NSLog(@"-(void) setPlayButtonImageView:(id)");
}

-(void) setStationAlbumArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setStationAlbumArtImageView:(id)");
}

-(void) setStationTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationTitleLabel:(id)");
}

-(void) setStationSubTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationSubTitleLabel:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) updateUI {
	%orig;
	NSLog(@"-(void) updateUI");
}

-(void) setTapGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setTapGestureRecognizer:(id)");
}

-(id) tapGestureRecognizer {
	%orig;
	NSLog(@"-(id) tapGestureRecognizer");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

%end

%hook PMPillView

-(bool) isInCircleMode {
	%orig;
	NSLog(@"-(bool) isInCircleMode");
}

-(void) setContractType:(long long) {
	%orig;
	NSLog(@"-(void) setContractType:(long long)");
}

-(long long) contractType {
	%orig;
	NSLog(@"-(long long) contractType");
}

-(id) leftImageView {
	%orig;
	NSLog(@"-(id) leftImageView");
}

-(id) rightImageView {
	%orig;
	NSLog(@"-(id) rightImageView");
}

-(id) topImageView {
	%orig;
	NSLog(@"-(id) topImageView");
}

-(id) bottomImageView {
	%orig;
	NSLog(@"-(id) bottomImageView");
}

-(void) updateImageViewFrame {
	%orig;
	NSLog(@"-(void) updateImageViewFrame");
}

-(void) setIsInCircleMode:(bool) {
	%orig;
	NSLog(@"-(void) setIsInCircleMode:(bool)");
}

-(void) setViewCenter:(CGPoint) {
	%orig;
	NSLog(@"-(void) setViewCenter:(CGPoint)");
}

-(void) setLeftImageView:(id) {
	%orig;
	NSLog(@"-(void) setLeftImageView:(id)");
}

-(void) setRightImageView:(id) {
	%orig;
	NSLog(@"-(void) setRightImageView:(id)");
}

-(void) setTopImageView:(id) {
	%orig;
	NSLog(@"-(void) setTopImageView:(id)");
}

-(void) setBottomImageView:(id) {
	%orig;
	NSLog(@"-(void) setBottomImageView:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(CGPoint) circleCenter {
	%orig;
	NSLog(@"-(CGPoint) circleCenter");
}

-(void) contract {
	%orig;
	NSLog(@"-(void) contract");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) expand {
	%orig;
	NSLog(@"-(void) expand");
}

%end

%hook PMThumbPillView

-(void) setupThumbs {
	%orig;
	NSLog(@"-(void) setupThumbs");
}

-(id) thumbCountLabel {
	%orig;
	NSLog(@"-(id) thumbCountLabel");
}

-(void) updateThumbView {
	%orig;
	NSLog(@"-(void) updateThumbView");
}

-(void) updateThumbCountLabel {
	%orig;
	NSLog(@"-(void) updateThumbCountLabel");
}

-(CGRect) thumbCountLocation {
	%orig;
	NSLog(@"-(CGRect) thumbCountLocation");
}

-(CGRect) thumbFrameInExpandMode {
	%orig;
	NSLog(@"-(CGRect) thumbFrameInExpandMode");
}

-(long long) thumbPillViewContractType {
	%orig;
	NSLog(@"-(long long) thumbPillViewContractType");
}

-(id) countToString:(unsigned long long) {
	%orig;
	NSLog(@"-(id) countToString:(unsigned long long)");
}

-(id) scaleUpAnimation {
	%orig;
	NSLog(@"-(id) scaleUpAnimation");
}

-(void) centerThumb {
	%orig;
	NSLog(@"-(void) centerThumb");
}

-(void) setThumbPillViewContractType:(long long) {
	%orig;
	NSLog(@"-(void) setThumbPillViewContractType:(long long)");
}

-(void) expandAnimated:(bool) duration:(double) delay:(double) completion:(id) {
	%orig;
	NSLog(@"-(void) expandAnimated:(bool) duration:(double) delay:(double) completion:(id)");
}

-(void) contractAnimated:(bool) {
	%orig;
	NSLog(@"-(void) contractAnimated:(bool)");
}

-(void) setThumbCount:(unsigned long long) animated:(bool) {
	%orig;
	NSLog(@"-(void) setThumbCount:(unsigned long long) animated:(bool)");
}

-(void) showTouchAnimation {
	%orig;
	NSLog(@"-(void) showTouchAnimation");
}

-(void) setThumbCountLabel:(id) {
	%orig;
	NSLog(@"-(void) setThumbCountLabel:(id)");
}

-(unsigned long long) thumbCount {
	%orig;
	NSLog(@"-(unsigned long long) thumbCount");
}

-(void) setThumbCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setThumbCount:(unsigned long long)");
}

-(id) thumbView {
	%orig;
	NSLog(@"-(id) thumbView");
}

-(void) contract {
	%orig;
	NSLog(@"-(void) contract");
}

-(void) setThumbView:(id) {
	%orig;
	NSLog(@"-(void) setThumbView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) expand {
	%orig;
	NSLog(@"-(void) expand");
}

%end

%hook PMModalStatusDisplay

+(id) newVisibleModalStatusDisplayInView:(id) withMessage:(id) {
	%orig;
	NSLog(@"+(id) newVisibleModalStatusDisplayInView:(id) withMessage:(id)");
}

+(id) newVisibleFullScreenModalStatusDisplay:(id) withMessage:(id) {
	%orig;
	NSLog(@"+(id) newVisibleFullScreenModalStatusDisplay:(id) withMessage:(id)");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(CGContext*) createContextForRoundedRect {
	%orig;
	NSLog(@"-(CGContext*) createContextForRoundedRect");
}

-(void) fadeOutAnimDone:(id) finished:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) fadeOutAnimDone:(id) finished:(id) context:(void*)");
}

-(void) fadeOutFinished {
	%orig;
	NSLog(@"-(void) fadeOutFinished");
}

-(id) initWithFrame:(CGRect) message:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) message:(id)");
}

-(bool) isFullScreen {
	%orig;
	NSLog(@"-(bool) isFullScreen");
}

-(void) setIsFullScreen:(bool) {
	%orig;
	NSLog(@"-(void) setIsFullScreen:(bool)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) dismiss {
	%orig;
	NSLog(@"-(void) dismiss");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook PMPillSegmentedControl

-(id) initWithSegmentTitles:(id) accessibilityIds:(id) {
	%orig;
	NSLog(@"-(id) initWithSegmentTitles:(id) accessibilityIds:(id)");
}

-(void) setAccessibilityIds:(id) {
	%orig;
	NSLog(@"-(void) setAccessibilityIds:(id)");
}

-(id) createButtonWithTitle:(id) {
	%orig;
	NSLog(@"-(id) createButtonWithTitle:(id)");
}

-(id) accessibilityIds {
	%orig;
	NSLog(@"-(id) accessibilityIds");
}

-(id) createPillBackgroundImageWithSize:(CGSize) color:(id) {
	%orig;
	NSLog(@"-(id) createPillBackgroundImageWithSize:(CGSize) color:(id)");
}

-(void) didTapButton:(id) {
	%orig;
	NSLog(@"-(void) didTapButton:(id)");
}

-(void) initButtons {
	%orig;
	NSLog(@"-(void) initButtons");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setSelectedSegmentIndex:(long long) {
	%orig;
	NSLog(@"-(void) setSelectedSegmentIndex:(long long)");
}

-(long long) selectedSegmentIndex {
	%orig;
	NSLog(@"-(long long) selectedSegmentIndex");
}

-(id) segmentButtons {
	%orig;
	NSLog(@"-(id) segmentButtons");
}

-(void) setSegmentButtons:(id) {
	%orig;
	NSLog(@"-(void) setSegmentButtons:(id)");
}

-(void) setSegmentTitles:(id) {
	%orig;
	NSLog(@"-(void) setSegmentTitles:(id)");
}

-(id) segmentTitles {
	%orig;
	NSLog(@"-(id) segmentTitles");
}

%end

%hook PMGradientView

-(id) gradientColorRefs {
	%orig;
	NSLog(@"-(id) gradientColorRefs");
}

-(void) setGradientColorRefs:(id) {
	%orig;
	NSLog(@"-(void) setGradientColorRefs:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) initialize {
	%orig;
	NSLog(@"-(void) initialize");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setGradientColors:(id) {
	%orig;
	NSLog(@"-(void) setGradientColors:(id)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(long long) direction {
	%orig;
	NSLog(@"-(long long) direction");
}

-(void) setDirection:(long long) {
	%orig;
	NSLog(@"-(void) setDirection:(long long)");
}

-(id) gradientColors {
	%orig;
	NSLog(@"-(id) gradientColors");
}

%end

%hook PMAlphabeticalSectionIndexView

-(void) didPress:(id) {
	%orig;
	NSLog(@"-(void) didPress:(id)");
}

-(void) initSectionLabels {
	%orig;
	NSLog(@"-(void) initSectionLabels");
}

-(void) setSectionLabels:(id) {
	%orig;
	NSLog(@"-(void) setSectionLabels:(id)");
}

-(void) findSectionIndexUnderPoint:(CGPoint) {
	%orig;
	NSLog(@"-(void) findSectionIndexUnderPoint:(CGPoint)");
}

-(id) sectionLabels {
	%orig;
	NSLog(@"-(id) sectionLabels");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

%end

%hook PMErrorView

-(id) actionURL {
	%orig;
	NSLog(@"-(id) actionURL");
}

-(void) setActionURL:(id) {
	%orig;
	NSLog(@"-(void) setActionURL:(id)");
}

-(void) setActionTitle:(id) {
	%orig;
	NSLog(@"-(void) setActionTitle:(id)");
}

-(id) messageLabel {
	%orig;
	NSLog(@"-(id) messageLabel");
}

-(id) actionTitle {
	%orig;
	NSLog(@"-(id) actionTitle");
}

-(id) actionButton {
	%orig;
	NSLog(@"-(id) actionButton");
}

-(void) setActionButton:(id) {
	%orig;
	NSLog(@"-(void) setActionButton:(id)");
}

-(void) setMessageLabel:(id) {
	%orig;
	NSLog(@"-(void) setMessageLabel:(id)");
}

-(id) headerLabel {
	%orig;
	NSLog(@"-(id) headerLabel");
}

-(void) setHeaderLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderLabel:(id)");
}

-(void) handleAction {
	%orig;
	NSLog(@"-(void) handleAction");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setMessage:(id) {
	%orig;
	NSLog(@"-(void) setMessage:(id)");
}

-(id) message {
	%orig;
	NSLog(@"-(id) message");
}

-(id) action {
	%orig;
	NSLog(@"-(id) action");
}

-(void) setAction:(id) {
	%orig;
	NSLog(@"-(void) setAction:(id)");
}

%end

%hook PMBaseNavigationButton

-(UIEdgeInsets) extendedHitAreaEdges {
	%orig;
	NSLog(@"-(UIEdgeInsets) extendedHitAreaEdges");
}

-(void) setExtendedHitAreaEdges:(UIEdgeInsets) {
	%orig;
	NSLog(@"-(void) setExtendedHitAreaEdges:(UIEdgeInsets)");
}

-(void) redrawButton {
	%orig;
	NSLog(@"-(void) redrawButton");
}

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

-(void) addAction:(id) event:(?) {
	%orig;
	NSLog(@"-(void) addAction:(id) event:(?)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(bool) isEqualToButton:(id) {
	%orig;
	NSLog(@"-(bool) isEqualToButton:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) addTarget:(id) action:(SEL) forControlEvents:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addTarget:(id) action:(SEL) forControlEvents:(unsigned long long)");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

%end

%hook PMBackTintColorNavigationButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

-(void) setButtonTintColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonTintColor:(id)");
}

-(id) buttonTintColor {
	%orig;
	NSLog(@"-(id) buttonTintColor");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMSearchNavigationButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

-(void) setUpAccessibility {
	%orig;
	NSLog(@"-(void) setUpAccessibility");
}

-(void) setButtonTintColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonTintColor:(id)");
}

-(id) buttonTintColor {
	%orig;
	NSLog(@"-(id) buttonTintColor");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMSettingsTintColorNavigationButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

-(void) setButtonTintColor:(id) {
	%orig;
	NSLog(@"-(void) setButtonTintColor:(id)");
}

-(id) buttonTintColor {
	%orig;
	NSLog(@"-(id) buttonTintColor");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMAddNavigationButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

%end

%hook PMShareButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setHidden:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool) animated:(bool)");
}

%end

%hook PMInfoNavigationButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMLabelNavigationButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

-(void) setTitleLabel:(id) forceRedraw:(bool) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id) forceRedraw:(bool)");
}

-(void) drawStationPersonalizationStyleButton:(id) {
	%orig;
	NSLog(@"-(void) drawStationPersonalizationStyleButton:(id)");
}

-(void) drawButton:(id) {
	%orig;
	NSLog(@"-(void) drawButton:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook PMDoneNavigationButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

%end

%hook PMBackNavigationButton

-(void) redrawButton:(id) {
	%orig;
	NSLog(@"-(void) redrawButton:(id)");
}

-(void) setUpAccessibility {
	%orig;
	NSLog(@"-(void) setUpAccessibility");
}

-(void) setButtonType:(long long) {
	%orig;
	NSLog(@"-(void) setButtonType:(long long)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(long long) buttonType {
	%orig;
	NSLog(@"-(long long) buttonType");
}

-(id) navigationBar {
	%orig;
	NSLog(@"-(id) navigationBar");
}

-(void) setNavigationBar:(id) {
	%orig;
	NSLog(@"-(void) setNavigationBar:(id)");
}

%end

%hook DFPAdCreativeView

-(id) webViewHost {
	%orig;
	NSLog(@"-(id) webViewHost");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHostDidFinishRendering:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishRendering:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(id) webViewHostRequestsAdIdentifiers:(id) {
	%orig;
	NSLog(@"-(id) webViewHostRequestsAdIdentifiers:(id)");
}

-(void) webViewHost:(id) didReceiveEvent:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) didReceiveEvent:(id)");
}

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) webViewHostRequestsAdView:(id) {
	%orig;
	NSLog(@"-(id) webViewHostRequestsAdView:(id)");
}

-(void) webViewHostDisableVideoAdsUntilNextStationChange:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDisableVideoAdsUntilNextStationChange:(id)");
}

-(void) webViewHost:(id) requestsCloseButtonVisibility:(bool) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) requestsCloseButtonVisibility:(bool)");
}

-(void) webViewHostRequestsAdViewFillNowPlayingContentArea:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) webViewHostRequestsAdViewFillNowPlayingContentArea:(id) completion:(id)");
}

-(void) webViewHost:(id) requestsViewportHeight:(double) completion:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) requestsViewportHeight:(double) completion:(id)");
}

-(void) webViewHostDidReceiveMouseDownEvent:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidReceiveMouseDownEvent:(id)");
}

-(id) creative {
	%orig;
	NSLog(@"-(id) creative");
}

-(void) setWebViewHost:(id) {
	%orig;
	NSLog(@"-(void) setWebViewHost:(id)");
}

-(void) landingPageWillDismiss:(id) {
	%orig;
	NSLog(@"-(void) landingPageWillDismiss:(id)");
}

-(void) landingPageDidLoad:(id) {
	%orig;
	NSLog(@"-(void) landingPageDidLoad:(id)");
}

-(void) landingPageDidFailLoad:(id) {
	%orig;
	NSLog(@"-(void) landingPageDidFailLoad:(id)");
}

-(id) initWithFrame:(CGRect) creative:(id) shouldRenderInDark:(bool) delegate:(id) shouldCutGutterPadding:(bool) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) creative:(id) shouldRenderInDark:(bool) delegate:(id) shouldCutGutterPadding:(bool)");
}

-(void) setCreative:(id) {
	%orig;
	NSLog(@"-(void) setCreative:(id)");
}

-(void) applyConstraintsForUnifiedUI:(id) {
	%orig;
	NSLog(@"-(void) applyConstraintsForUnifiedUI:(id)");
}

-(void) loadCreativeHTML {
	%orig;
	NSLog(@"-(void) loadCreativeHTML");
}

-(void) openL2WebAdWithURL:(id) {
	%orig;
	NSLog(@"-(void) openL2WebAdWithURL:(id)");
}

-(id) mraidBridge {
	%orig;
	NSLog(@"-(id) mraidBridge");
}

-(id) initWithFrame:(CGRect) creative:(id) shouldRenderInDark:(bool) delegate:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) creative:(id) shouldRenderInDark:(bool) delegate:(id)");
}

-(void) willBecomeUnusable {
	%orig;
	NSLog(@"-(void) willBecomeUnusable");
}

-(void) setMraidBridge:(id) {
	%orig;
	NSLog(@"-(void) setMraidBridge:(id)");
}

-(void) mraidBridge:(id) didCallOpenURL:(id) {
	%orig;
	NSLog(@"-(void) mraidBridge:(id) didCallOpenURL:(id)");
}

-(CGRect) mraidContainerViewDimensions {
	%orig;
	NSLog(@"-(CGRect) mraidContainerViewDimensions");
}

-(CGPoint) mraidCreativeOffset {
	%orig;
	NSLog(@"-(CGPoint) mraidCreativeOffset");
}

-(void) resizeWithDimensions:(id) {
	%orig;
	NSLog(@"-(void) resizeWithDimensions:(id)");
}

-(void) mraidBridge:(id) didLogConsoleMessage:(id) {
	%orig;
	NSLog(@"-(void) mraidBridge:(id) didLogConsoleMessage:(id)");
}

-(CGRect) mraidExpand {
	%orig;
	NSLog(@"-(CGRect) mraidExpand");
}

-(void) dismissWebView {
	%orig;
	NSLog(@"-(void) dismissWebView");
}

-(void) mraidUnload {
	%orig;
	NSLog(@"-(void) mraidUnload");
}

-(void) mraidPlayVideo:(id) {
	%orig;
	NSLog(@"-(void) mraidPlayVideo:(id)");
}

-(bool) loaded {
	%orig;
	NSLog(@"-(bool) loaded");
}

-(void) setLoaded:(bool) {
	%orig;
	NSLog(@"-(void) setLoaded:(bool)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

-(void) setHeight:(double) {
	%orig;
	NSLog(@"-(void) setHeight:(double)");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

%end

%hook PMTrackDetailView

-(id) innerCollectionView {
	%orig;
	NSLog(@"-(id) innerCollectionView");
}

-(void) setInnerCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setInnerCollectionView:(id)");
}

-(void) reloadCellAtIndex:(unsigned long long) {
	%orig;
	NSLog(@"-(void) reloadCellAtIndex:(unsigned long long)");
}

-(void) addNewTrack {
	%orig;
	NSLog(@"-(void) addNewTrack");
}

-(void) resetUI {
	%orig;
	NSLog(@"-(void) resetUI");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) setContentOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) setContentOffset:(CGPoint)");
}

-(unsigned long long) itemCount {
	%orig;
	NSLog(@"-(unsigned long long) itemCount");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setItemCount:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setItemCount:(unsigned long long)");
}

-(id) flowLayout {
	%orig;
	NSLog(@"-(id) flowLayout");
}

-(void) setFlowLayout:(id) {
	%orig;
	NSLog(@"-(void) setFlowLayout:(id)");
}

%end

%hook PMSelfCenteredTwoLabelView

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(id) leftLabelFont {
	%orig;
	NSLog(@"-(id) leftLabelFont");
}

-(id) leftLabelText {
	%orig;
	NSLog(@"-(id) leftLabelText");
}

-(id) rightLabelFont {
	%orig;
	NSLog(@"-(id) rightLabelFont");
}

-(id) rightLabelText {
	%orig;
	NSLog(@"-(id) rightLabelText");
}

-(CGSize) centerViewOffset {
	%orig;
	NSLog(@"-(CGSize) centerViewOffset");
}

-(id) leftLabelTextColor {
	%orig;
	NSLog(@"-(id) leftLabelTextColor");
}

-(id) rightLabelTextColor {
	%orig;
	NSLog(@"-(id) rightLabelTextColor");
}

-(void) setCenterViewOffset:(CGSize) {
	%orig;
	NSLog(@"-(void) setCenterViewOffset:(CGSize)");
}

-(void) setLeftLabelFont:(id) {
	%orig;
	NSLog(@"-(void) setLeftLabelFont:(id)");
}

-(void) setLeftLabelText:(id) {
	%orig;
	NSLog(@"-(void) setLeftLabelText:(id)");
}

-(void) setLeftLabelTextColor:(id) {
	%orig;
	NSLog(@"-(void) setLeftLabelTextColor:(id)");
}

-(void) setRightLabelFont:(id) {
	%orig;
	NSLog(@"-(void) setRightLabelFont:(id)");
}

-(void) setRightLabelText:(id) {
	%orig;
	NSLog(@"-(void) setRightLabelText:(id)");
}

-(void) setRightLabelTextColor:(id) {
	%orig;
	NSLog(@"-(void) setRightLabelTextColor:(id)");
}

-(void) setRightLabel:(id) {
	%orig;
	NSLog(@"-(void) setRightLabel:(id)");
}

-(id) centerView {
	%orig;
	NSLog(@"-(id) centerView");
}

-(void) setCenterView:(id) {
	%orig;
	NSLog(@"-(void) setCenterView:(id)");
}

-(void) setLeftLabel:(id) {
	%orig;
	NSLog(@"-(void) setLeftLabel:(id)");
}

-(id) leftLabel {
	%orig;
	NSLog(@"-(id) leftLabel");
}

-(id) rightLabel {
	%orig;
	NSLog(@"-(id) rightLabel");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setPadding:(double) {
	%orig;
	NSLog(@"-(void) setPadding:(double)");
}

-(double) padding {
	%orig;
	NSLog(@"-(double) padding");
}

%end

%hook PMCoverFlowImageView

-(void) setFeaturedTrackLabel:(id) {
	%orig;
	NSLog(@"-(void) setFeaturedTrackLabel:(id)");
}

-(id) featuredTrackLabel {
	%orig;
	NSLog(@"-(id) featuredTrackLabel");
}

-(void) updateXOffsets:(double) {
	%orig;
	NSLog(@"-(void) updateXOffsets:(double)");
}

-(void) receivedPanGesture:(id) {
	%orig;
	NSLog(@"-(void) receivedPanGesture:(id)");
}

-(void) doInitWithFrame:(CGRect) showsImageReflection:(bool) {
	%orig;
	NSLog(@"-(void) doInitWithFrame:(CGRect) showsImageReflection:(bool)");
}

-(void) replaceAnimation:(id) didFinish:(bool) withContext:(id) {
	%orig;
	NSLog(@"-(void) replaceAnimation:(id) didFinish:(bool) withContext:(id)");
}

-(CATransform3D) rotationWithZ:(double) {
	%orig;
	NSLog(@"-(CATransform3D) rotationWithZ:(double)");
}

-(CATransform3D) rotationFinal {
	%orig;
	NSLog(@"-(CATransform3D) rotationFinal");
}

-(double) xFinal {
	%orig;
	NSLog(@"-(double) xFinal");
}

-(void) rotationDidComplete {
	%orig;
	NSLog(@"-(void) rotationDidComplete");
}

-(bool) detailContentIsVisible {
	%orig;
	NSLog(@"-(bool) detailContentIsVisible");
}

-(void) fadeOutDetailContent {
	%orig;
	NSLog(@"-(void) fadeOutDetailContent");
}

-(id) customFrontSubview {
	%orig;
	NSLog(@"-(id) customFrontSubview");
}

-(void) updateBoundsForDetailContent {
	%orig;
	NSLog(@"-(void) updateBoundsForDetailContent");
}

-(bool) isReadyToFlipInDetailContent {
	%orig;
	NSLog(@"-(bool) isReadyToFlipInDetailContent");
}

-(void) flipInFirstHalfAnimation:(id) didFinish:(bool) withContext:(id) {
	%orig;
	NSLog(@"-(void) flipInFirstHalfAnimation:(id) didFinish:(bool) withContext:(id)");
}

-(CATransform3D) makeFlipRotation:(double) {
	%orig;
	NSLog(@"-(CATransform3D) makeFlipRotation:(double)");
}

-(void) addDetailContent {
	%orig;
	NSLog(@"-(void) addDetailContent");
}

-(void) flipAnimation:(id) didFinish:(bool) withContext:(id) {
	%orig;
	NSLog(@"-(void) flipAnimation:(id) didFinish:(bool) withContext:(id)");
}

-(void) flipOutFirstHalfAnimation:(id) didFinish:(bool) withContext:(id) {
	%orig;
	NSLog(@"-(void) flipOutFirstHalfAnimation:(id) didFinish:(bool) withContext:(id)");
}

-(void) removeDetailContent {
	%orig;
	NSLog(@"-(void) removeDetailContent");
}

-(bool) customFrontSubviewIsVisible {
	%orig;
	NSLog(@"-(bool) customFrontSubviewIsVisible");
}

-(void) setCustomFrontSubview:(id) {
	%orig;
	NSLog(@"-(void) setCustomFrontSubview:(id)");
}

-(void) fadeInCustomFrontSubviewAnimated:(bool) withAutoFadeOut:(bool) {
	%orig;
	NSLog(@"-(void) fadeInCustomFrontSubviewAnimated:(bool) withAutoFadeOut:(bool)");
}

-(bool) customFeaturedTrackLabelIsVisible {
	%orig;
	NSLog(@"-(bool) customFeaturedTrackLabelIsVisible");
}

-(bool) userInteractionEnabledForced {
	%orig;
	NSLog(@"-(bool) userInteractionEnabledForced");
}

-(void) setDetailContent:(id) withTransform:(CGAffineTransform) {
	%orig;
	NSLog(@"-(void) setDetailContent:(id) withTransform:(CGAffineTransform)");
}

-(void) fadeOutAnimation:(id) didFinish:(bool) withContext:(id) {
	%orig;
	NSLog(@"-(void) fadeOutAnimation:(id) didFinish:(bool) withContext:(id)");
}

-(bool) addGestureRecognizer {
	%orig;
	NSLog(@"-(bool) addGestureRecognizer");
}

-(id) initWithFrame:(CGRect) showsImageReflection:(bool) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) showsImageReflection:(bool)");
}

-(void) setActiveX:(double) {
	%orig;
	NSLog(@"-(void) setActiveX:(double)");
}

-(double) dimLevel {
	%orig;
	NSLog(@"-(double) dimLevel");
}

-(void) setDimLevel:(double) {
	%orig;
	NSLog(@"-(void) setDimLevel:(double)");
}

-(void) setRotation:(long long) animationType:(long long) {
	%orig;
	NSLog(@"-(void) setRotation:(long long) animationType:(long long)");
}

-(void) rotationAnimation:(id) didFinish:(bool) withContext:(id) {
	%orig;
	NSLog(@"-(void) rotationAnimation:(id) didFinish:(bool) withContext:(id)");
}

-(void) flipInDetailContent:(id) withTransform:(CGAffineTransform) {
	%orig;
	NSLog(@"-(void) flipInDetailContent:(id) withTransform:(CGAffineTransform)");
}

-(void) flipOutDetailContent {
	%orig;
	NSLog(@"-(void) flipOutDetailContent");
}

-(void) addCustomFrontSubview:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) addCustomFrontSubview:(id) animated:(bool)");
}

-(void) addFeaturedTrackLabel {
	%orig;
	NSLog(@"-(void) addFeaturedTrackLabel");
}

-(void) removeCustomFrontSubviewAnimated:(bool) {
	%orig;
	NSLog(@"-(void) removeCustomFrontSubviewAnimated:(bool)");
}

-(void) removeFeaturedTrackLabel {
	%orig;
	NSLog(@"-(void) removeFeaturedTrackLabel");
}

-(void) fadeInDetailContent:(id) withTransform:(CGAffineTransform) {
	%orig;
	NSLog(@"-(void) fadeInDetailContent:(id) withTransform:(CGAffineTransform)");
}

-(bool) containsTouchX:(double) {
	%orig;
	NSLog(@"-(bool) containsTouchX:(double)");
}

-(bool) hiddenWhenInactive {
	%orig;
	NSLog(@"-(bool) hiddenWhenInactive");
}

-(void) setHiddenWhenInactive:(bool) {
	%orig;
	NSLog(@"-(void) setHiddenWhenInactive:(bool)");
}

-(id) detailContent {
	%orig;
	NSLog(@"-(id) detailContent");
}

-(bool) isAnimatingDetailContentChange {
	%orig;
	NSLog(@"-(bool) isAnimatingDetailContentChange");
}

-(bool) showsImageReflection {
	%orig;
	NSLog(@"-(bool) showsImageReflection");
}

-(void) setShowsImageReflection:(bool) {
	%orig;
	NSLog(@"-(void) setShowsImageReflection:(bool)");
}

-(void) setReflectionOpacity:(double) {
	%orig;
	NSLog(@"-(void) setReflectionOpacity:(double)");
}

-(void) setUserInteractionEnabledForced:(bool) {
	%orig;
	NSLog(@"-(void) setUserInteractionEnabledForced:(bool)");
}

-(bool) dimmed {
	%orig;
	NSLog(@"-(bool) dimmed");
}

-(void) setDimmed:(bool) {
	%orig;
	NSLog(@"-(void) setDimmed:(bool)");
}

-(double) reflectionOpacity {
	%orig;
	NSLog(@"-(double) reflectionOpacity");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isAccessibilityElement {
	%orig;
	NSLog(@"-(bool) isAccessibilityElement");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setImage:(id) {
	%orig;
	NSLog(@"-(void) setImage:(id)");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) animationDidStop:(id) finished:(bool) {
	%orig;
	NSLog(@"-(void) animationDidStop:(id) finished:(bool)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setX:(double) {
	%orig;
	NSLog(@"-(void) setX:(double)");
}

-(void) setInteractionDelegate:(id) {
	%orig;
	NSLog(@"-(void) setInteractionDelegate:(id)");
}

-(id) interactionDelegate {
	%orig;
	NSLog(@"-(id) interactionDelegate");
}

%end

%hook ImageDrawingView

-(id) mainView {
	%orig;
	NSLog(@"-(id) mainView");
}

-(id) initWithFrame:(CGRect) image:(id) reflect:(bool) reflectionOpacity:(double) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) image:(id) reflect:(bool) reflectionOpacity:(double)");
}

-(id) initWithFrame:(CGRect) image:(id) reflectedImage:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) image:(id) reflectedImage:(id)");
}

-(bool) hasDefaultImage {
	%orig;
	NSLog(@"-(bool) hasDefaultImage");
}

-(void) setMainView:(id) {
	%orig;
	NSLog(@"-(void) setMainView:(id)");
}

-(id) initWithFrame:(CGRect) image:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) image:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMStationNameDescriptionView

-(id) stationNameLabel {
	%orig;
	NSLog(@"-(id) stationNameLabel");
}

-(void) setStationNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationNameLabel:(id)");
}

-(id) stationDescriptionTextView {
	%orig;
	NSLog(@"-(id) stationDescriptionTextView");
}

-(void) setStationDescriptionTextView:(id) {
	%orig;
	NSLog(@"-(void) setStationDescriptionTextView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMNoStationsSearchView

-(void) addBottomBorder {
	%orig;
	NSLog(@"-(void) addBottomBorder");
}

-(void) setIconHidden:(bool) animated:(bool) onCompletion:(id) {
	%orig;
	NSLog(@"-(void) setIconHidden:(bool) animated:(bool) onCompletion:(id)");
}

-(bool) isIconHidden {
	%orig;
	NSLog(@"-(bool) isIconHidden");
}

-(void) setIsIconHidden:(bool) {
	%orig;
	NSLog(@"-(void) setIsIconHidden:(bool)");
}

-(void) setIconHidden:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setIconHidden:(bool) animated:(bool)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) leftView {
	%orig;
	NSLog(@"-(id) leftView");
}

-(void) setLeftView:(id) {
	%orig;
	NSLog(@"-(void) setLeftView:(id)");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

-(void) handleSingleTap:(id) {
	%orig;
	NSLog(@"-(void) handleSingleTap:(id)");
}

%end

%hook PMArtistMessageOverlayView

-(void) setupMessageFromLabel {
	%orig;
	NSLog(@"-(void) setupMessageFromLabel");
}

-(void) setupCallToActionButton {
	%orig;
	NSLog(@"-(void) setupCallToActionButton");
}

-(void) setMessageFromLabel:(id) {
	%orig;
	NSLog(@"-(void) setMessageFromLabel:(id)");
}

-(id) messageFromLabel {
	%orig;
	NSLog(@"-(id) messageFromLabel");
}

-(void) setCallToActionButton:(id) {
	%orig;
	NSLog(@"-(void) setCallToActionButton:(id)");
}

-(id) callToActionButton {
	%orig;
	NSLog(@"-(id) callToActionButton");
}

-(void) callToActionButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) callToActionButtonPressed:(id)");
}

-(void) setArtistNameForMessageFromLabel {
	%orig;
	NSLog(@"-(void) setArtistNameForMessageFromLabel");
}

-(void) setTextForCallToActionButton {
	%orig;
	NSLog(@"-(void) setTextForCallToActionButton");
}

-(id) stationVoiceTrack {
	%orig;
	NSLog(@"-(id) stationVoiceTrack");
}

-(id) playlistVoiceTrack {
	%orig;
	NSLog(@"-(id) playlistVoiceTrack");
}

-(void) setArtistMessageTrack:(id) {
	%orig;
	NSLog(@"-(void) setArtistMessageTrack:(id)");
}

-(void) setPlaylistMessageVoiceTrack:(id) {
	%orig;
	NSLog(@"-(void) setPlaylistMessageVoiceTrack:(id)");
}

-(void) setStationVoiceTrack:(id) {
	%orig;
	NSLog(@"-(void) setStationVoiceTrack:(id)");
}

-(void) setPlaylistVoiceTrack:(id) {
	%orig;
	NSLog(@"-(void) setPlaylistVoiceTrack:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

%end

%hook PMTeachMark

+(bool) cannotPresentNewTeachmark {
	%orig;
	NSLog(@"+(bool) cannotPresentNewTeachmark");
}

+(id) rootViewForDevice {
	%orig;
	NSLog(@"+(id) rootViewForDevice");
}

+(id) clickThoughTextForString:(id) {
	%orig;
	NSLog(@"+(id) clickThoughTextForString:(id)");
}

+(void) dismissCurrentTeachMark {
	%orig;
	NSLog(@"+(void) dismissCurrentTeachMark");
}

+(void) dismissCurrentTeachMarkCompletion:(id) {
	%orig;
	NSLog(@"+(void) dismissCurrentTeachMarkCompletion:(id)");
}

+(long long) teachMarkTypeForStatsId:(long long) {
	%orig;
	NSLog(@"+(long long) teachMarkTypeForStatsId:(long long)");
}

+(void) enableTeachMarksWithPriority:(unsigned long long) isFinalAction:(bool) {
	%orig;
	NSLog(@"+(void) enableTeachMarksWithPriority:(unsigned long long) isFinalAction:(bool)");
}

+(void) disableTeachMarksWithPriority:(unsigned long long) isFinalAction:(bool) {
	%orig;
	NSLog(@"+(void) disableTeachMarksWithPriority:(unsigned long long) isFinalAction:(bool)");
}

+(void) presentTeachMarkWithCommand:(id) {
	%orig;
	NSLog(@"+(void) presentTeachMarkWithCommand:(id)");
}

+(bool) presentWebViewTeachMarkWithCommand:(id) {
	%orig;
	NSLog(@"+(bool) presentWebViewTeachMarkWithCommand:(id)");
}

+(long long) statsIdOfCurrentlyDisplayingTeachMark {
	%orig;
	NSLog(@"+(long long) statsIdOfCurrentlyDisplayingTeachMark");
}

+(bool) isEnabled {
	%orig;
	NSLog(@"+(bool) isEnabled");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(long long) teachMarkId {
	%orig;
	NSLog(@"-(long long) teachMarkId");
}

-(void) setTeachMarkId:(long long) {
	%orig;
	NSLog(@"-(void) setTeachMarkId:(long long)");
}

-(bool) shouldHideButtonBorder {
	%orig;
	NSLog(@"-(bool) shouldHideButtonBorder");
}

-(void) setShouldHideButtonBorder:(bool) {
	%orig;
	NSLog(@"-(void) setShouldHideButtonBorder:(bool)");
}

-(id) onDisplayBlock {
	%orig;
	NSLog(@"-(id) onDisplayBlock");
}

-(void) setOnDisplayBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnDisplayBlock:(id)");
}

-(id) onTapBlock {
	%orig;
	NSLog(@"-(id) onTapBlock");
}

-(void) setOnTapBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnTapBlock:(id)");
}

-(id) onDismissBlock {
	%orig;
	NSLog(@"-(id) onDismissBlock");
}

-(void) setOnDismissBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnDismissBlock:(id)");
}

-(id) onBackgroundBlock {
	%orig;
	NSLog(@"-(id) onBackgroundBlock");
}

-(void) setOnBackgroundBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnBackgroundBlock:(id)");
}

-(double) spotlightRadius {
	%orig;
	NSLog(@"-(double) spotlightRadius");
}

-(void) setSpotlightRadius:(double) {
	%orig;
	NSLog(@"-(void) setSpotlightRadius:(double)");
}

-(CGPoint) spotlightCenter {
	%orig;
	NSLog(@"-(CGPoint) spotlightCenter");
}

-(void) setSpotlightCenter:(CGPoint) {
	%orig;
	NSLog(@"-(void) setSpotlightCenter:(CGPoint)");
}

-(bool) presentOverModalView {
	%orig;
	NSLog(@"-(bool) presentOverModalView");
}

-(void) setPresentOverModalView:(bool) {
	%orig;
	NSLog(@"-(void) setPresentOverModalView:(bool)");
}

-(bool) shouldTimeOut {
	%orig;
	NSLog(@"-(bool) shouldTimeOut");
}

-(void) setShouldTimeOut:(bool) {
	%orig;
	NSLog(@"-(void) setShouldTimeOut:(bool)");
}

-(bool) tapAnywhereToClose {
	%orig;
	NSLog(@"-(bool) tapAnywhereToClose");
}

-(void) setTapAnywhereToClose:(bool) {
	%orig;
	NSLog(@"-(void) setTapAnywhereToClose:(bool)");
}

-(void) setCurrentActionPriority:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setCurrentActionPriority:(unsigned long long)");
}

-(CGRect) useAppropriateFrame {
	%orig;
	NSLog(@"-(CGRect) useAppropriateFrame");
}

-(void) setTeachmarkView:(id) {
	%orig;
	NSLog(@"-(void) setTeachmarkView:(id)");
}

-(id) teachmarkView {
	%orig;
	NSLog(@"-(id) teachmarkView");
}

-(void) setRecreateSpotlightCircleLayer:(bool) {
	%orig;
	NSLog(@"-(void) setRecreateSpotlightCircleLayer:(bool)");
}

-(id) teachmarkLabel {
	%orig;
	NSLog(@"-(id) teachmarkLabel");
}

-(id) teachmarkImageView {
	%orig;
	NSLog(@"-(id) teachmarkImageView");
}

-(id) clickThroughActionButton {
	%orig;
	NSLog(@"-(id) clickThroughActionButton");
}

-(id) closeLabel {
	%orig;
	NSLog(@"-(id) closeLabel");
}

-(id) spotLightLayer {
	%orig;
	NSLog(@"-(id) spotLightLayer");
}

-(CGPoint) spotlightTopLeft {
	%orig;
	NSLog(@"-(CGPoint) spotlightTopLeft");
}

-(void) drawSpotlightWithRadius:(double) andTopLeft:(CGPoint) {
	%orig;
	NSLog(@"-(void) drawSpotlightWithRadius:(double) andTopLeft:(CGPoint)");
}

-(id) spotLightCircleLayer {
	%orig;
	NSLog(@"-(id) spotLightCircleLayer");
}

-(void) drawShrinkingCircleWithRadius:(double) andTopLeft:(CGPoint) {
	%orig;
	NSLog(@"-(void) drawShrinkingCircleWithRadius:(double) andTopLeft:(CGPoint)");
}

-(void) setPrepareForNextTeachMarkAnimation:(id) {
	%orig;
	NSLog(@"-(void) setPrepareForNextTeachMarkAnimation:(id)");
}

-(void) onAppEnteredBackground:(id) {
	%orig;
	NSLog(@"-(void) onAppEnteredBackground:(id)");
}

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(void) redrawUI {
	%orig;
	NSLog(@"-(void) redrawUI");
}

-(unsigned long long) currentActionPriority {
	%orig;
	NSLog(@"-(unsigned long long) currentActionPriority");
}

-(void) setEnabled:(bool) priority:(unsigned long long) isFinalAction:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool) priority:(unsigned long long) isFinalAction:(bool)");
}

-(void) setSentDismissCallBack:(bool) {
	%orig;
	NSLog(@"-(void) setSentDismissCallBack:(bool)");
}

-(void) setClickThroughActionBlock:(id) {
	%orig;
	NSLog(@"-(void) setClickThroughActionBlock:(id)");
}

-(void) setDismissActionBlock:(id) {
	%orig;
	NSLog(@"-(void) setDismissActionBlock:(id)");
}

-(void) setOnTimeOutBlock:(id) {
	%orig;
	NSLog(@"-(void) setOnTimeOutBlock:(id)");
}

-(void) setViewsSurroundedByTeachMark:(id) {
	%orig;
	NSLog(@"-(void) setViewsSurroundedByTeachMark:(id)");
}

-(void) presentTeachMarkWithHeader:(id) attributedMessage:(id) message:(id) image:(id) clickThroughText:(id) closeLabelText:(id) footerText:(id) buttonColor:(id) buttonBackgroundColor:(id) buttonBorderRadius:(id) {
	%orig;
	NSLog(@"-(void) presentTeachMarkWithHeader:(id) attributedMessage:(id) message:(id) image:(id) clickThroughText:(id) closeLabelText:(id) footerText:(id) buttonColor:(id) buttonBackgroundColor:(id) buttonBorderRadius:(id)");
}

-(void) presentTeachMarkWithWebView:(id) {
	%orig;
	NSLog(@"-(void) presentTeachMarkWithWebView:(id)");
}

-(void) dismissCurrentTeachMark {
	%orig;
	NSLog(@"-(void) dismissCurrentTeachMark");
}

-(void) dismissCurrentTeachMarkCompletion:(id) {
	%orig;
	NSLog(@"-(void) dismissCurrentTeachMarkCompletion:(id)");
}

-(void) setupSpringsAndStruts {
	%orig;
	NSLog(@"-(void) setupSpringsAndStruts");
}

-(void) removeAllChildViews {
	%orig;
	NSLog(@"-(void) removeAllChildViews");
}

-(id) prepareForNextTeachMarkAnimation {
	%orig;
	NSLog(@"-(id) prepareForNextTeachMarkAnimation");
}

-(void) removeTeachmark {
	%orig;
	NSLog(@"-(void) removeTeachmark");
}

-(void) didTapOnPresentedWebview:(id) {
	%orig;
	NSLog(@"-(void) didTapOnPresentedWebview:(id)");
}

-(void) presentTeachMarkCompletionRoutine {
	%orig;
	NSLog(@"-(void) presentTeachMarkCompletionRoutine");
}

-(void) setupSpotlight {
	%orig;
	NSLog(@"-(void) setupSpotlight");
}

-(id) pmTeachMarkFormatedStringWithHeader:(id) andMessage:(id) {
	%orig;
	NSLog(@"-(id) pmTeachMarkFormatedStringWithHeader:(id) andMessage:(id)");
}

-(id) clickThroughActionBlock {
	%orig;
	NSLog(@"-(id) clickThroughActionBlock");
}

-(void) updateButtonForText:(id) buttonColor:(id) buttonBackgroundColor:(id) buttonBorderRadius:(id) {
	%orig;
	NSLog(@"-(void) updateButtonForText:(id) buttonColor:(id) buttonBackgroundColor:(id) buttonBorderRadius:(id)");
}

-(void) layoutUIElements {
	%orig;
	NSLog(@"-(void) layoutUIElements");
}

-(void) setSpotLightLayer:(id) {
	%orig;
	NSLog(@"-(void) setSpotLightLayer:(id)");
}

-(void) presentTeachmarkCompletionAnimations {
	%orig;
	NSLog(@"-(void) presentTeachmarkCompletionAnimations");
}

-(void) drawGrowingCircleWithRadius:(double) andTopLeft:(CGPoint) {
	%orig;
	NSLog(@"-(void) drawGrowingCircleWithRadius:(double) andTopLeft:(CGPoint)");
}

-(id) autoDismissTimer {
	%orig;
	NSLog(@"-(id) autoDismissTimer");
}

-(void) teachMarkDidTimeout {
	%orig;
	NSLog(@"-(void) teachMarkDidTimeout");
}

-(void) setAutoDismissTimer:(id) {
	%orig;
	NSLog(@"-(void) setAutoDismissTimer:(id)");
}

-(id) viewsSurroundedByTeachMark {
	%orig;
	NSLog(@"-(id) viewsSurroundedByTeachMark");
}

-(void) setSpotlightTopLeft:(CGPoint) {
	%orig;
	NSLog(@"-(void) setSpotlightTopLeft:(CGPoint)");
}

-(id) onTimeOutBlock {
	%orig;
	NSLog(@"-(id) onTimeOutBlock");
}

-(void) prepareForNextTeachMarkAnimated:(bool) {
	%orig;
	NSLog(@"-(void) prepareForNextTeachMarkAnimated:(bool)");
}

-(void) setSpotLightCircleLayer:(id) {
	%orig;
	NSLog(@"-(void) setSpotLightCircleLayer:(id)");
}

-(bool) sentDismissCallBack {
	%orig;
	NSLog(@"-(bool) sentDismissCallBack");
}

-(id) dismissActionBlock {
	%orig;
	NSLog(@"-(id) dismissActionBlock");
}

-(void) layoutClickThroughActionButton {
	%orig;
	NSLog(@"-(void) layoutClickThroughActionButton");
}

-(double) labelEdgeMargin {
	%orig;
	NSLog(@"-(double) labelEdgeMargin");
}

-(CGSize) textViewHeightForAttributedText:(id) andWidth:(double) {
	%orig;
	NSLog(@"-(CGSize) textViewHeightForAttributedText:(id) andWidth:(double)");
}

-(bool) recreateSpotlightCircleLayer {
	%orig;
	NSLog(@"-(bool) recreateSpotlightCircleLayer");
}

-(void) setupSpringsAndStrutsFor:(id) {
	%orig;
	NSLog(@"-(void) setupSpringsAndStrutsFor:(id)");
}

-(void) debugViews {
	%orig;
	NSLog(@"-(void) debugViews");
}

-(void) clickThoughButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) clickThoughButtonClicked:(id)");
}

-(void) updateButtonForText:(id) {
	%orig;
	NSLog(@"-(void) updateButtonForText:(id)");
}

-(void) setTeachmarkImageView:(id) {
	%orig;
	NSLog(@"-(void) setTeachmarkImageView:(id)");
}

-(void) setTeachmarkLabel:(id) {
	%orig;
	NSLog(@"-(void) setTeachmarkLabel:(id)");
}

-(void) setCloseLabel:(id) {
	%orig;
	NSLog(@"-(void) setCloseLabel:(id)");
}

-(void) setClickThroughActionButton:(id) {
	%orig;
	NSLog(@"-(void) setClickThroughActionButton:(id)");
}

-(void) setFooterLabel:(id) {
	%orig;
	NSLog(@"-(void) setFooterLabel:(id)");
}

-(id) footerLabel {
	%orig;
	NSLog(@"-(id) footerLabel");
}

-(void) setIsAnimating:(bool) {
	%orig;
	NSLog(@"-(void) setIsAnimating:(bool)");
}

-(id) customOverlayView {
	%orig;
	NSLog(@"-(id) customOverlayView");
}

-(void) setCustomOverlayView:(id) {
	%orig;
	NSLog(@"-(void) setCustomOverlayView:(id)");
}

-(bool) debug {
	%orig;
	NSLog(@"-(bool) debug");
}

-(void) setDebug:(bool) {
	%orig;
	NSLog(@"-(void) setDebug:(bool)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id)");
}

-(id) contentView {
	%orig;
	NSLog(@"-(id) contentView");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) setContentView:(id) {
	%orig;
	NSLog(@"-(void) setContentView:(id)");
}

-(bool) isAnimating {
	%orig;
	NSLog(@"-(bool) isAnimating");
}

-(bool) enabled {
	%orig;
	NSLog(@"-(bool) enabled");
}

-(id) webView {
	%orig;
	NSLog(@"-(id) webView");
}

-(void) handleTap {
	%orig;
	NSLog(@"-(void) handleTap");
}

-(void) setAnimationStyle:(long long) {
	%orig;
	NSLog(@"-(void) setAnimationStyle:(long long)");
}

-(long long) animationStyle {
	%orig;
	NSLog(@"-(long long) animationStyle");
}

-(void) setWebView:(id) {
	%orig;
	NSLog(@"-(void) setWebView:(id)");
}

%end

%hook PMCreateStationButtonFooterView

-(void) updateCreateAStationButtonAppearanceForHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) updateCreateAStationButtonAppearanceForHighlighted:(bool) animated:(bool)");
}

-(id) createAStationButton {
	%orig;
	NSLog(@"-(id) createAStationButton");
}

-(id) createAStationLabel {
	%orig;
	NSLog(@"-(id) createAStationLabel");
}

-(void) createAStationButtonTouchDown:(id) {
	%orig;
	NSLog(@"-(void) createAStationButtonTouchDown:(id)");
}

-(void) createAStationButtonTouchCancel:(id) {
	%orig;
	NSLog(@"-(void) createAStationButtonTouchCancel:(id)");
}

-(void) createAStationButtonTouchDragEnter:(id) {
	%orig;
	NSLog(@"-(void) createAStationButtonTouchDragEnter:(id)");
}

-(void) createAStationButtonTouchDragExit:(id) {
	%orig;
	NSLog(@"-(void) createAStationButtonTouchDragExit:(id)");
}

-(void) createAStationButtonTouchUpInside:(id) {
	%orig;
	NSLog(@"-(void) createAStationButtonTouchUpInside:(id)");
}

-(void) setCreateAStationButton:(id) {
	%orig;
	NSLog(@"-(void) setCreateAStationButton:(id)");
}

-(void) setCreateAStationLabel:(id) {
	%orig;
	NSLog(@"-(void) setCreateAStationLabel:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMTrackProgressView

-(void) didInitialize {
	%orig;
	NSLog(@"-(void) didInitialize");
}

-(void) reconfigureAnimation {
	%orig;
	NSLog(@"-(void) reconfigureAnimation");
}

-(double) updateTimerInterval {
	%orig;
	NSLog(@"-(double) updateTimerInterval");
}

-(void) updateCurrentTrackProgress:(id) {
	%orig;
	NSLog(@"-(void) updateCurrentTrackProgress:(id)");
}

-(double) updateTimerTolerance {
	%orig;
	NSLog(@"-(double) updateTimerTolerance");
}

-(void) animateBuffering:(bool) {
	%orig;
	NSLog(@"-(void) animateBuffering:(bool)");
}

-(bool) isAnimatingBuffer {
	%orig;
	NSLog(@"-(bool) isAnimatingBuffer");
}

-(void) setIsAnimatingBuffer:(bool) {
	%orig;
	NSLog(@"-(void) setIsAnimatingBuffer:(bool)");
}

-(id) bufferColor {
	%orig;
	NSLog(@"-(id) bufferColor");
}

-(id) layerForBufferingAnimation {
	%orig;
	NSLog(@"-(id) layerForBufferingAnimation");
}

-(double) effectiveAnimationWidth {
	%orig;
	NSLog(@"-(double) effectiveAnimationWidth");
}

-(void) setAnimationForLayer:(id) fromPreviousLayer:(id) {
	%orig;
	NSLog(@"-(void) setAnimationForLayer:(id) fromPreviousLayer:(id)");
}

-(id) layersForBufferingAnimation {
	%orig;
	NSLog(@"-(id) layersForBufferingAnimation");
}

-(void) setAnimationLayers:(id) {
	%orig;
	NSLog(@"-(void) setAnimationLayers:(id)");
}

-(void) restartAnimation {
	%orig;
	NSLog(@"-(void) restartAnimation");
}

-(void) updateProgressFrame {
	%orig;
	NSLog(@"-(void) updateProgressFrame");
}

-(void) forceSyncTrackProgress {
	%orig;
	NSLog(@"-(void) forceSyncTrackProgress");
}

-(void) setUpdateTimerInterval:(double) {
	%orig;
	NSLog(@"-(void) setUpdateTimerInterval:(double)");
}

-(void) setUpdateTimerTolerance:(double) {
	%orig;
	NSLog(@"-(void) setUpdateTimerTolerance:(double)");
}

-(id) animationLayers {
	%orig;
	NSLog(@"-(id) animationLayers");
}

-(bool) isBuffering {
	%orig;
	NSLog(@"-(bool) isBuffering");
}

-(float) trackProgress {
	%orig;
	NSLog(@"-(float) trackProgress");
}

-(id) progressLayer {
	%orig;
	NSLog(@"-(id) progressLayer");
}

-(void) setProgressLayer:(id) {
	%orig;
	NSLog(@"-(void) setProgressLayer:(id)");
}

-(void) stopTimer {
	%orig;
	NSLog(@"-(void) stopTimer");
}

-(void) enableAccessibility {
	%orig;
	NSLog(@"-(void) enableAccessibility");
}

-(id) trackLayer {
	%orig;
	NSLog(@"-(id) trackLayer");
}

-(void) setTrackLayer:(id) {
	%orig;
	NSLog(@"-(void) setTrackLayer:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) accessibilityValue {
	%orig;
	NSLog(@"-(id) accessibilityValue");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setProgress:(float) {
	%orig;
	NSLog(@"-(void) setProgress:(float)");
}

-(float) progress {
	%orig;
	NSLog(@"-(float) progress");
}

-(void) setProgress:(float) animated:(bool) {
	%orig;
	NSLog(@"-(void) setProgress:(float) animated:(bool)");
}

-(void) startTimer {
	%orig;
	NSLog(@"-(void) startTimer");
}

-(void) resetTimer {
	%orig;
	NSLog(@"-(void) resetTimer");
}

-(id) updateTimer {
	%orig;
	NSLog(@"-(id) updateTimer");
}

-(id) trackTintColor {
	%orig;
	NSLog(@"-(id) trackTintColor");
}

-(id) progressTintColor {
	%orig;
	NSLog(@"-(id) progressTintColor");
}

-(void) setProgressTintColor:(id) {
	%orig;
	NSLog(@"-(void) setProgressTintColor:(id)");
}

-(void) setTrackTintColor:(id) {
	%orig;
	NSLog(@"-(void) setTrackTintColor:(id)");
}

%end

%hook PMRadioTrackProgressView

-(bool) isUsingAVQueuePlayerBasedAudioEngine {
	%orig;
	NSLog(@"-(bool) isUsingAVQueuePlayerBasedAudioEngine");
}

-(bool) isBuffering {
	%orig;
	NSLog(@"-(bool) isBuffering");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(float) trackProgress {
	%orig;
	NSLog(@"-(float) trackProgress");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) dataSource {
	%orig;
	NSLog(@"-(id) dataSource");
}

-(void) setDataSource:(id) {
	%orig;
	NSLog(@"-(void) setDataSource:(id)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook PMSampleTrackProgressView

-(id) bufferColor {
	%orig;
	NSLog(@"-(id) bufferColor");
}

-(void) commontInit {
	%orig;
	NSLog(@"-(void) commontInit");
}

-(bool) isBuffering {
	%orig;
	NSLog(@"-(bool) isBuffering");
}

-(float) trackProgress {
	%orig;
	NSLog(@"-(float) trackProgress");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) trackTintColor {
	%orig;
	NSLog(@"-(id) trackTintColor");
}

-(id) progressTintColor {
	%orig;
	NSLog(@"-(id) progressTintColor");
}

-(void) setProgressTintColor:(id) {
	%orig;
	NSLog(@"-(void) setProgressTintColor:(id)");
}

-(void) setTrackTintColor:(id) {
	%orig;
	NSLog(@"-(void) setTrackTintColor:(id)");
}

%end

%hook PMArtistMessageSampleTrackProgressView

-(double) updateTimerInterval {
	%orig;
	NSLog(@"-(double) updateTimerInterval");
}

-(double) updateTimerTolerance {
	%orig;
	NSLog(@"-(double) updateTimerTolerance");
}

-(void) commontArtistMessageSampleTrackProgressViewInit {
	%orig;
	NSLog(@"-(void) commontArtistMessageSampleTrackProgressViewInit");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMGalleryView

-(void) setFinishedInit:(bool) {
	%orig;
	NSLog(@"-(void) setFinishedInit:(bool)");
}

-(void) setIsCentering:(bool) {
	%orig;
	NSLog(@"-(void) setIsCentering:(bool)");
}

-(void) setEnlargeCenter:(bool) {
	%orig;
	NSLog(@"-(void) setEnlargeCenter:(bool)");
}

-(void) setShrinkPercentage:(double) {
	%orig;
	NSLog(@"-(void) setShrinkPercentage:(double)");
}

-(void) setAlphaForInactive:(double) {
	%orig;
	NSLog(@"-(void) setAlphaForInactive:(double)");
}

-(void) setInactiveFading:(bool) {
	%orig;
	NSLog(@"-(void) setInactiveFading:(bool)");
}

-(void) setHideInactiveTitle:(bool) {
	%orig;
	NSLog(@"-(void) setHideInactiveTitle:(bool)");
}

-(void) setAutoCenter:(bool) {
	%orig;
	NSLog(@"-(void) setAutoCenter:(bool)");
}

-(void) setSeparationWidth:(double) {
	%orig;
	NSLog(@"-(void) setSeparationWidth:(double)");
}

-(void) setCenterIndex:(long long) {
	%orig;
	NSLog(@"-(void) setCenterIndex:(long long)");
}

-(void) setSpinTiltEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setSpinTiltEnabled:(bool)");
}

-(void) setCircularTiltEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setCircularTiltEnabled:(bool)");
}

-(void) setNumberOfVisibleCells:(double) {
	%orig;
	NSLog(@"-(void) setNumberOfVisibleCells:(double)");
}

-(void) setVisibleCells:(id) {
	%orig;
	NSLog(@"-(void) setVisibleCells:(id)");
}

-(void) setCellCache:(id) {
	%orig;
	NSLog(@"-(void) setCellCache:(id)");
}

-(void) setCellContainerView:(id) {
	%orig;
	NSLog(@"-(void) setCellContainerView:(id)");
}

-(id) cellContainerView {
	%orig;
	NSLog(@"-(id) cellContainerView");
}

-(void) setMaxScrollDistanceFromCenter:(double) {
	%orig;
	NSLog(@"-(void) setMaxScrollDistanceFromCenter:(double)");
}

-(id) cellCache {
	%orig;
	NSLog(@"-(id) cellCache");
}

-(double) numberOfVisibleCells {
	%orig;
	NSLog(@"-(double) numberOfVisibleCells");
}

-(void) setInactiveEdgeFading:(bool) {
	%orig;
	NSLog(@"-(void) setInactiveEdgeFading:(bool)");
}

-(void) setCenterFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setCenterFrame:(CGRect)");
}

-(CGRect) centerFrame {
	%orig;
	NSLog(@"-(CGRect) centerFrame");
}

-(void) insertCellsFromMinX:(double) toMaxX:(double) {
	%orig;
	NSLog(@"-(void) insertCellsFromMinX:(double) toMaxX:(double)");
}

-(bool) autoCenter {
	%orig;
	NSLog(@"-(bool) autoCenter");
}

-(void) adjustCells {
	%orig;
	NSLog(@"-(void) adjustCells");
}

-(bool) isCentering {
	%orig;
	NSLog(@"-(bool) isCentering");
}

-(long long) centerIndex {
	%orig;
	NSLog(@"-(long long) centerIndex");
}

-(void) recenterIfNecessary {
	%orig;
	NSLog(@"-(void) recenterIfNecessary");
}

-(double) maxScrollDistanceFromCenter {
	%orig;
	NSLog(@"-(double) maxScrollDistanceFromCenter");
}

-(void) placeNewCellOnCenter:(double) {
	%orig;
	NSLog(@"-(void) placeNewCellOnCenter:(double)");
}

-(double) separationWidth {
	%orig;
	NSLog(@"-(double) separationWidth");
}

-(double) placeNewCellOnRight:(double) {
	%orig;
	NSLog(@"-(double) placeNewCellOnRight:(double)");
}

-(double) placeNewCellOnLeft:(double) {
	%orig;
	NSLog(@"-(double) placeNewCellOnLeft:(double)");
}

-(bool) enlargeCenter {
	%orig;
	NSLog(@"-(bool) enlargeCenter");
}

-(double) shrinkPercentage {
	%orig;
	NSLog(@"-(double) shrinkPercentage");
}

-(void) setMinDistanceFromCenter:(double) {
	%orig;
	NSLog(@"-(void) setMinDistanceFromCenter:(double)");
}

-(double) minDistanceFromCenter {
	%orig;
	NSLog(@"-(double) minDistanceFromCenter");
}

-(bool) inactiveFading {
	%orig;
	NSLog(@"-(bool) inactiveFading");
}

-(double) alphaForInactive {
	%orig;
	NSLog(@"-(double) alphaForInactive");
}

-(bool) inactiveEdgeFading {
	%orig;
	NSLog(@"-(bool) inactiveEdgeFading");
}

-(bool) hideInactiveTitle {
	%orig;
	NSLog(@"-(bool) hideInactiveTitle");
}

-(bool) spinTiltEnabled {
	%orig;
	NSLog(@"-(bool) spinTiltEnabled");
}

-(bool) circularTiltEnabled {
	%orig;
	NSLog(@"-(bool) circularTiltEnabled");
}

-(void) setPreviousIndex:(long long) {
	%orig;
	NSLog(@"-(void) setPreviousIndex:(long long)");
}

-(long long) previousIndex {
	%orig;
	NSLog(@"-(long long) previousIndex");
}

-(void) cellSelected:(id) {
	%orig;
	NSLog(@"-(void) cellSelected:(id)");
}

-(id) cellForItemAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) cellForItemAtIndex:(long long)");
}

-(void) moveToCell:(long long) animated:(bool) {
	%orig;
	NSLog(@"-(void) moveToCell:(long long) animated:(bool)");
}

-(void) removeCellAnimations {
	%orig;
	NSLog(@"-(void) removeCellAnimations");
}

-(void) setImage:(id) forCellAtIndex:(long long) {
	%orig;
	NSLog(@"-(void) setImage:(id) forCellAtIndex:(long long)");
}

-(bool) finishedInit {
	%orig;
	NSLog(@"-(bool) finishedInit");
}

-(bool) shuffleEnabled {
	%orig;
	NSLog(@"-(bool) shuffleEnabled");
}

-(void) setShuffleEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setShuffleEnabled:(bool)");
}

-(void) setCellSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setCellSize:(CGSize)");
}

-(id) centerView {
	%orig;
	NSLog(@"-(id) centerView");
}

-(void) setCenterView:(id) {
	%orig;
	NSLog(@"-(void) setCenterView:(id)");
}

-(void) setDatasource:(id) {
	%orig;
	NSLog(@"-(void) setDatasource:(id)");
}

-(id) datasource {
	%orig;
	NSLog(@"-(id) datasource");
}

-(bool) pagingEnabled {
	%orig;
	NSLog(@"-(bool) pagingEnabled");
}

-(CGPoint) targetOffset {
	%orig;
	NSLog(@"-(CGPoint) targetOffset");
}

-(void) setTargetOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) setTargetOffset:(CGPoint)");
}

-(bool) scrollEnabled {
	%orig;
	NSLog(@"-(bool) scrollEnabled");
}

-(void) setCellWidth:(double) {
	%orig;
	NSLog(@"-(void) setCellWidth:(double)");
}

-(double) cellWidth {
	%orig;
	NSLog(@"-(double) cellWidth");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) initialize {
	%orig;
	NSLog(@"-(void) initialize");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setScrollEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setScrollEnabled:(bool)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) reloadData {
	%orig;
	NSLog(@"-(void) reloadData");
}

-(id) visibleCells {
	%orig;
	NSLog(@"-(id) visibleCells");
}

-(CGPoint) contentOffset {
	%orig;
	NSLog(@"-(CGPoint) contentOffset");
}

-(void) setContentOffset:(CGPoint) animated:(bool) {
	%orig;
	NSLog(@"-(void) setContentOffset:(CGPoint) animated:(bool)");
}

-(id) dequeueReusableCellWithIdentifier:(id) {
	%orig;
	NSLog(@"-(id) dequeueReusableCellWithIdentifier:(id)");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setPagingEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setPagingEnabled:(bool)");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(bool) isScrolling {
	%orig;
	NSLog(@"-(bool) isScrolling");
}

-(void) setIsScrolling:(bool) {
	%orig;
	NSLog(@"-(void) setIsScrolling:(bool)");
}

-(CGSize) cellSize {
	%orig;
	NSLog(@"-(CGSize) cellSize");
}

%end

%hook PMSamplesGalleryView

-(void) setCenterIndex:(long long) {
	%orig;
	NSLog(@"-(void) setCenterIndex:(long long)");
}

-(void) setCellCache:(id) {
	%orig;
	NSLog(@"-(void) setCellCache:(id)");
}

-(void) setCellContainerView:(id) {
	%orig;
	NSLog(@"-(void) setCellContainerView:(id)");
}

-(id) cellContainerView {
	%orig;
	NSLog(@"-(id) cellContainerView");
}

-(id) cellCache {
	%orig;
	NSLog(@"-(id) cellCache");
}

-(long long) centerIndex {
	%orig;
	NSLog(@"-(long long) centerIndex");
}

-(void) setPreviousIndex:(long long) {
	%orig;
	NSLog(@"-(void) setPreviousIndex:(long long)");
}

-(long long) previousIndex {
	%orig;
	NSLog(@"-(long long) previousIndex");
}

-(void) cellSelected:(id) {
	%orig;
	NSLog(@"-(void) cellSelected:(id)");
}

-(void) showiTunesButton {
	%orig;
	NSLog(@"-(void) showiTunesButton");
}

-(void) hideiTunesButton {
	%orig;
	NSLog(@"-(void) hideiTunesButton");
}

-(void) setupSampleTitleLabel {
	%orig;
	NSLog(@"-(void) setupSampleTitleLabel");
}

-(void) setupSampleArtistLabel {
	%orig;
	NSLog(@"-(void) setupSampleArtistLabel");
}

-(void) setupSampleiTunesButton {
	%orig;
	NSLog(@"-(void) setupSampleiTunesButton");
}

-(void) updateSampleDescription {
	%orig;
	NSLog(@"-(void) updateSampleDescription");
}

-(id) sampleArtistLabel {
	%orig;
	NSLog(@"-(id) sampleArtistLabel");
}

-(void) didTapiTunesButton:(id) {
	%orig;
	NSLog(@"-(void) didTapiTunesButton:(id)");
}

-(id) sampleDescriptionContainerView {
	%orig;
	NSLog(@"-(id) sampleDescriptionContainerView");
}

-(id) sampleiTunesButton {
	%orig;
	NSLog(@"-(id) sampleiTunesButton");
}

-(void) setCurrentSampleDescriptionIndex:(long long) {
	%orig;
	NSLog(@"-(void) setCurrentSampleDescriptionIndex:(long long)");
}

-(long long) currentSampleDescriptionIndex {
	%orig;
	NSLog(@"-(long long) currentSampleDescriptionIndex");
}

-(id) sampleTitleLabel {
	%orig;
	NSLog(@"-(id) sampleTitleLabel");
}

-(void) positionSampleDescriptionWithiTunesButton:(bool) {
	%orig;
	NSLog(@"-(void) positionSampleDescriptionWithiTunesButton:(bool)");
}

-(void) setSampleTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSampleTitleLabel:(id)");
}

-(void) setSampleDescriptionContainerView:(id) {
	%orig;
	NSLog(@"-(void) setSampleDescriptionContainerView:(id)");
}

-(void) setSampleArtistLabel:(id) {
	%orig;
	NSLog(@"-(void) setSampleArtistLabel:(id)");
}

-(void) setSampleiTunesButton:(id) {
	%orig;
	NSLog(@"-(void) setSampleiTunesButton:(id)");
}

-(void) setCellSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setCellSize:(CGSize)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) reloadData {
	%orig;
	NSLog(@"-(void) reloadData");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

-(CGSize) cellSize {
	%orig;
	NSLog(@"-(CGSize) cellSize");
}

%end

%hook PMLevel1AdHeaderView

-(void) addGradientMaskWithGutter:(double) {
	%orig;
	NSLog(@"-(void) addGradientMaskWithGutter:(double)");
}

-(void) setHeaderLabelText:(id) {
	%orig;
	NSLog(@"-(void) setHeaderLabelText:(id)");
}

-(void) constrainContainerViewWidthByPercent:(double) {
	%orig;
	NSLog(@"-(void) constrainContainerViewWidthByPercent:(double)");
}

-(id) containerLeadingLayoutConstraint {
	%orig;
	NSLog(@"-(id) containerLeadingLayoutConstraint");
}

-(void) setContainerLeadingLayoutConstraint:(id) {
	%orig;
	NSLog(@"-(void) setContainerLeadingLayoutConstraint:(id)");
}

-(id) containerTrailingLayoutConstraint {
	%orig;
	NSLog(@"-(id) containerTrailingLayoutConstraint");
}

-(void) setContainerTrailingLayoutConstraint:(id) {
	%orig;
	NSLog(@"-(void) setContainerTrailingLayoutConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook CollectionBadgeContainer

-(id) collectedBadge {
	%orig;
	NSLog(@"-(id) collectedBadge");
}

-(void) setCollectedBadge:(id) {
	%orig;
	NSLog(@"-(void) setCollectedBadge:(id)");
}

-(id) pendingDownloadBadge {
	%orig;
	NSLog(@"-(id) pendingDownloadBadge");
}

-(void) setPendingDownloadBadge:(id) {
	%orig;
	NSLog(@"-(void) setPendingDownloadBadge:(id)");
}

-(id) downloadedBadge {
	%orig;
	NSLog(@"-(id) downloadedBadge");
}

-(void) setDownloadedBadge:(id) {
	%orig;
	NSLog(@"-(void) setDownloadedBadge:(id)");
}

-(id) partiallyDownloadedBadge {
	%orig;
	NSLog(@"-(id) partiallyDownloadedBadge");
}

-(void) setPartiallyDownloadedBadge:(id) {
	%orig;
	NSLog(@"-(void) setPartiallyDownloadedBadge:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook MediaHeaderFooterView

-(void) optionButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) optionButtonTapped:(id)");
}

-(id) optionButton {
	%orig;
	NSLog(@"-(id) optionButton");
}

-(void) setOptionButton:(id) {
	%orig;
	NSLog(@"-(void) setOptionButton:(id)");
}

-(id) filterSheetActionButton {
	%orig;
	NSLog(@"-(id) filterSheetActionButton");
}

-(void) setFilterSheetActionButton:(id) {
	%orig;
	NSLog(@"-(void) setFilterSheetActionButton:(id)");
}

-(id) bottomDividingLineHeightConstraint {
	%orig;
	NSLog(@"-(id) bottomDividingLineHeightConstraint");
}

-(void) setBottomDividingLineHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomDividingLineHeightConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook PartiallyDownloadedBadge

-(id) pieView {
	%orig;
	NSLog(@"-(id) pieView");
}

-(void) setPieView:(id) {
	%orig;
	NSLog(@"-(void) setPieView:(id)");
}

-(id) ringView {
	%orig;
	NSLog(@"-(id) ringView");
}

-(void) setRingView:(id) {
	%orig;
	NSLog(@"-(void) setRingView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMMediaCellView

-(bool) handleAccessibilityWithAction:(id) {
	%orig;
	NSLog(@"-(bool) handleAccessibilityWithAction:(id)");
}

-(void) radioOnlyBadgeDidHide:(bool) {
	%orig;
	NSLog(@"-(void) radioOnlyBadgeDidHide:(bool)");
}

-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id)");
}

-(void) didTapCell:(id) {
	%orig;
	NSLog(@"-(void) didTapCell:(id)");
}

-(void) didLongPressCell:(id) {
	%orig;
	NSLog(@"-(void) didLongPressCell:(id)");
}

-(void) didTapPlayButton {
	%orig;
	NSLog(@"-(void) didTapPlayButton");
}

-(void) didTapPauseButton {
	%orig;
	NSLog(@"-(void) didTapPauseButton");
}

-(void) didTapMoreButton {
	%orig;
	NSLog(@"-(void) didTapMoreButton");
}

-(void) didTapCollectButton {
	%orig;
	NSLog(@"-(void) didTapCollectButton");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

-(id) eqImageView {
	%orig;
	NSLog(@"-(id) eqImageView");
}

-(void) setEqImageView:(id) {
	%orig;
	NSLog(@"-(void) setEqImageView:(id)");
}

-(id) dividingLineHeightConstraint {
	%orig;
	NSLog(@"-(id) dividingLineHeightConstraint");
}

-(void) setDividingLineHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setDividingLineHeightConstraint:(id)");
}

-(id) nonAnnotatedView {
	%orig;
	NSLog(@"-(id) nonAnnotatedView");
}

-(void) setNonAnnotatedView:(id) {
	%orig;
	NSLog(@"-(void) setNonAnnotatedView:(id)");
}

-(id) collectionBadgeContainer {
	%orig;
	NSLog(@"-(id) collectionBadgeContainer");
}

-(void) setCollectionBadgeContainer:(id) {
	%orig;
	NSLog(@"-(void) setCollectionBadgeContainer:(id)");
}

-(id) badgeContainerTrailingConstraint {
	%orig;
	NSLog(@"-(id) badgeContainerTrailingConstraint");
}

-(void) setBadgeContainerTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBadgeContainerTrailingConstraint:(id)");
}

-(id) nowPlayingCoverAnimationImageView {
	%orig;
	NSLog(@"-(id) nowPlayingCoverAnimationImageView");
}

-(void) setNowPlayingCoverAnimationImageView:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingCoverAnimationImageView:(id)");
}

-(id) collectButton {
	%orig;
	NSLog(@"-(id) collectButton");
}

-(void) setCollectButton:(id) {
	%orig;
	NSLog(@"-(void) setCollectButton:(id)");
}

-(id) caretImageView {
	%orig;
	NSLog(@"-(id) caretImageView");
}

-(void) setCaretImageView:(id) {
	%orig;
	NSLog(@"-(void) setCaretImageView:(id)");
}

-(id) editImageView {
	%orig;
	NSLog(@"-(id) editImageView");
}

-(void) setEditImageView:(id) {
	%orig;
	NSLog(@"-(void) setEditImageView:(id)");
}

-(id) imageOverlayView {
	%orig;
	NSLog(@"-(id) imageOverlayView");
}

-(void) setImageOverlayView:(id) {
	%orig;
	NSLog(@"-(void) setImageOverlayView:(id)");
}

-(id) radioOnlyBadge {
	%orig;
	NSLog(@"-(id) radioOnlyBadge");
}

-(void) setRadioOnlyBadge:(id) {
	%orig;
	NSLog(@"-(void) setRadioOnlyBadge:(id)");
}

-(id) unavailableBadge {
	%orig;
	NSLog(@"-(id) unavailableBadge");
}

-(void) setUnavailableBadge:(id) {
	%orig;
	NSLog(@"-(void) setUnavailableBadge:(id)");
}

-(id) durationBadge {
	%orig;
	NSLog(@"-(id) durationBadge");
}

-(void) setDurationBadge:(id) {
	%orig;
	NSLog(@"-(void) setDurationBadge:(id)");
}

-(id) explicitBadge {
	%orig;
	NSLog(@"-(id) explicitBadge");
}

-(void) setExplicitBadge:(id) {
	%orig;
	NSLog(@"-(void) setExplicitBadge:(id)");
}

-(id) audioMessageIconAndTitleStackView {
	%orig;
	NSLog(@"-(id) audioMessageIconAndTitleStackView");
}

-(void) setAudioMessageIconAndTitleStackView:(id) {
	%orig;
	NSLog(@"-(void) setAudioMessageIconAndTitleStackView:(id)");
}

-(id) audioMessagePrimaryLabel {
	%orig;
	NSLog(@"-(id) audioMessagePrimaryLabel");
}

-(void) setAudioMessagePrimaryLabel:(id) {
	%orig;
	NSLog(@"-(void) setAudioMessagePrimaryLabel:(id)");
}

-(id) audioMessageIcon {
	%orig;
	NSLog(@"-(id) audioMessageIcon");
}

-(void) setAudioMessageIcon:(id) {
	%orig;
	NSLog(@"-(void) setAudioMessageIcon:(id)");
}

-(id) thumbDownImageView {
	%orig;
	NSLog(@"-(id) thumbDownImageView");
}

-(void) setThumbDownImageView:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownImageView:(id)");
}

-(id) imageLeadingConstraint {
	%orig;
	NSLog(@"-(id) imageLeadingConstraint");
}

-(void) setImageLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setImageLeadingConstraint:(id)");
}

-(id) imageWithoutNumberLeadingConstraint {
	%orig;
	NSLog(@"-(id) imageWithoutNumberLeadingConstraint");
}

-(void) setImageWithoutNumberLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setImageWithoutNumberLeadingConstraint:(id)");
}

-(id) imageIndentedLeadingConstraint {
	%orig;
	NSLog(@"-(id) imageIndentedLeadingConstraint");
}

-(void) setImageIndentedLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setImageIndentedLeadingConstraint:(id)");
}

-(id) imageIndentedRightConstraint {
	%orig;
	NSLog(@"-(id) imageIndentedRightConstraint");
}

-(void) setImageIndentedRightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setImageIndentedRightConstraint:(id)");
}

-(id) playPauseRadioContainerHeightConstraint {
	%orig;
	NSLog(@"-(id) playPauseRadioContainerHeightConstraint");
}

-(void) setPlayPauseRadioContainerHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setPlayPauseRadioContainerHeightConstraint:(id)");
}

-(id) thumbDownPeekView {
	%orig;
	NSLog(@"-(id) thumbDownPeekView");
}

-(void) setThumbDownPeekView:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownPeekView:(id)");
}

-(id) tertiaryLabel {
	%orig;
	NSLog(@"-(id) tertiaryLabel");
}

-(void) setTertiaryLabel:(id) {
	%orig;
	NSLog(@"-(void) setTertiaryLabel:(id)");
}

-(id) playbackControlsView {
	%orig;
	NSLog(@"-(id) playbackControlsView");
}

-(void) setPlaybackControlsView:(id) {
	%orig;
	NSLog(@"-(void) setPlaybackControlsView:(id)");
}

-(id) primaryLabel {
	%orig;
	NSLog(@"-(id) primaryLabel");
}

-(void) setPrimaryLabel:(id) {
	%orig;
	NSLog(@"-(void) setPrimaryLabel:(id)");
}

-(id) playButton {
	%orig;
	NSLog(@"-(id) playButton");
}

-(id) numberLabel {
	%orig;
	NSLog(@"-(id) numberLabel");
}

-(void) setNumberLabel:(id) {
	%orig;
	NSLog(@"-(void) setNumberLabel:(id)");
}

-(id) imageWidthConstraint {
	%orig;
	NSLog(@"-(id) imageWidthConstraint");
}

-(void) setImageWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setImageWidthConstraint:(id)");
}

-(void) setPlayButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayButton:(id)");
}

-(void) setMoreButton:(id) {
	%orig;
	NSLog(@"-(void) setMoreButton:(id)");
}

-(id) moreButton {
	%orig;
	NSLog(@"-(id) moreButton");
}

-(id) pauseButton {
	%orig;
	NSLog(@"-(id) pauseButton");
}

-(void) setPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPauseButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

-(id) secondaryLabel {
	%orig;
	NSLog(@"-(id) secondaryLabel");
}

-(void) setSecondaryLabel:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryLabel:(id)");
}

-(void) setSeparator:(id) {
	%orig;
	NSLog(@"-(void) setSeparator:(id)");
}

-(id) separator {
	%orig;
	NSLog(@"-(id) separator");
}

%end

%hook PodcastProgramMediaCellView

-(id) collectionBadgeContainerLeadingConstraint {
	%orig;
	NSLog(@"-(id) collectionBadgeContainerLeadingConstraint");
}

-(void) setCollectionBadgeContainerLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCollectionBadgeContainerLeadingConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMMediaWebView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMDoneKeyboardToolbar

-(void) setToolbarDelegate:(id) {
	%orig;
	NSLog(@"-(void) setToolbarDelegate:(id)");
}

-(id) toolbarDelegate {
	%orig;
	NSLog(@"-(id) toolbarDelegate");
}

-(void) didTapDoneButton:(id) {
	%orig;
	NSLog(@"-(void) didTapDoneButton:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook BottomNavigationTabBar

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) items {
	%orig;
	NSLog(@"-(id) items");
}

-(void) setItems:(id) {
	%orig;
	NSLog(@"-(void) setItems:(id)");
}

%end

%hook PMTabBar

-(void) setupTabBar {
	%orig;
	NSLog(@"-(void) setupTabBar");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook PMPremiumNowPlayingViewNavigationBar

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMResizingNavigationBar

-(void) setPendingItem:(id) {
	%orig;
	NSLog(@"-(void) setPendingItem:(id)");
}

-(id) pendingItem {
	%orig;
	NSLog(@"-(id) pendingItem");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

%end

%hook PMNavigationBar

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook PMUserDataView

-(void) handleStationsButtonTouched {
	%orig;
	NSLog(@"-(void) handleStationsButtonTouched");
}

-(void) handleThumbsButtonTouched {
	%orig;
	NSLog(@"-(void) handleThumbsButtonTouched");
}

-(void) handlePlaylistsButtonTouched {
	%orig;
	NSLog(@"-(void) handlePlaylistsButtonTouched");
}

-(void) handleFollowersButtonTouched {
	%orig;
	NSLog(@"-(void) handleFollowersButtonTouched");
}

-(void) handleFollowingButtonTouched {
	%orig;
	NSLog(@"-(void) handleFollowingButtonTouched");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMCatalogSectionHeaderView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithReuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithReuseIdentifier:(id)");
}

%end

%hook MyMediaTableViewSectionHeader

-(void) didTapSortButton:(id) {
	%orig;
	NSLog(@"-(void) didTapSortButton:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithReuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithReuseIdentifier:(id)");
}

%end

%hook SuperBrowsePageHeaderView

-(id) headerImageView {
	%orig;
	NSLog(@"-(id) headerImageView");
}

-(void) setHeaderImageView:(id) {
	%orig;
	NSLog(@"-(void) setHeaderImageView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithReuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithReuseIdentifier:(id)");
}

%end

%hook MediaTableViewHeaderFooterView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) initWithReuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithReuseIdentifier:(id)");
}

%end

%hook PMStationsCellScrollView

-(id) cellHighlightOverlay {
	%orig;
	NSLog(@"-(id) cellHighlightOverlay");
}

-(void) setCellHighlightOverlay:(id) {
	%orig;
	NSLog(@"-(void) setCellHighlightOverlay:(id)");
}

-(void) setStopEventPropagation:(bool) {
	%orig;
	NSLog(@"-(void) setStopEventPropagation:(bool)");
}

-(void) rebuildAccessibilityElements {
	%orig;
	NSLog(@"-(void) rebuildAccessibilityElements");
}

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(bool) stopEventPropagation {
	%orig;
	NSLog(@"-(bool) stopEventPropagation");
}

-(void) setCellView:(id) {
	%orig;
	NSLog(@"-(void) setCellView:(id)");
}

-(void) addOverlayViewOnHighLight {
	%orig;
	NSLog(@"-(void) addOverlayViewOnHighLight");
}

-(void) removeOverlayViewOnUnHighlight {
	%orig;
	NSLog(@"-(void) removeOverlayViewOnUnHighlight");
}

-(id) cellView {
	%orig;
	NSLog(@"-(id) cellView");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

%end

%hook PMPrivateScrollView

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

%end

%hook DataDetectingTextView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

-(id) initWithFrame:(CGRect) textContainer:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) textContainer:(id)");
}

%end

%hook PMPlaceholderTextView

-(void) doInits {
	%orig;
	NSLog(@"-(void) doInits");
}

-(CGContext*) createContextForRoundedRect {
	%orig;
	NSLog(@"-(CGContext*) createContextForRoundedRect");
}

-(void) setBorderRadius:(float) {
	%orig;
	NSLog(@"-(void) setBorderRadius:(float)");
}

-(void) determineShouldDrawPlaceholder {
	%orig;
	NSLog(@"-(void) determineShouldDrawPlaceholder");
}

-(float) borderRadius {
	%orig;
	NSLog(@"-(float) borderRadius");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(void) setPlaceholder:(id) {
	%orig;
	NSLog(@"-(void) setPlaceholder:(id)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

-(id) placeholder {
	%orig;
	NSLog(@"-(id) placeholder");
}

-(void) textChanged:(id) {
	%orig;
	NSLog(@"-(void) textChanged:(id)");
}

%end

%hook ReloadNotifyingCollectionView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) collectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) collectionViewLayout:(id)");
}

%end

%hook PremiumAdCollectionView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(long long) numberOfSections {
	%orig;
	NSLog(@"-(long long) numberOfSections");
}

-(id) initWithFrame:(CGRect) collectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) collectionViewLayout:(id)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(void) handleTap:(id) {
	%orig;
	NSLog(@"-(void) handleTap:(id)");
}

%end

%hook PMMediaCarouselCollectionView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) collectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) collectionViewLayout:(id)");
}

%end

%hook PMRecentlyPlayedCollectionView

-(void) updateLoop {
	%orig;
	NSLog(@"-(void) updateLoop");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) collectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) collectionViewLayout:(id)");
}

%end

%hook PMFixedSizeCollectionView

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(bool) isAccessibilityElement {
	%orig;
	NSLog(@"-(bool) isAccessibilityElement");
}

-(id) accessibilityElements {
	%orig;
	NSLog(@"-(id) accessibilityElements");
}

%end

%hook PMNowPlayingCollectionView

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(id) cardsFlowLayout {
	%orig;
	NSLog(@"-(id) cardsFlowLayout");
}

-(double) leftEdgeInsetForLevel1AdViewContainerView:(double) {
	%orig;
	NSLog(@"-(double) leftEdgeInsetForLevel1AdViewContainerView:(double)");
}

-(void) adjustLevel1AdViewContainerViewForMinimumTopOffset:(double) {
	%orig;
	NSLog(@"-(void) adjustLevel1AdViewContainerViewForMinimumTopOffset:(double)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) collectionViewLayout:(id) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) collectionViewLayout:(id)");
}

%end

%hook PMMyStationsCollectionView

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) setContentSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setContentSize:(CGSize)");
}

%end

%hook PMStationUITreatmentTableView

+(double) defaultCellHeight {
	%orig;
	NSLog(@"+(double) defaultCellHeight");
}

-(id) snapShotOfUITreatment {
	%orig;
	NSLog(@"-(id) snapShotOfUITreatment");
}

-(id) numberOfRowShouldShown {
	%orig;
	NSLog(@"-(id) numberOfRowShouldShown");
}

-(void) setNumberOfRowShouldShown:(id) {
	%orig;
	NSLog(@"-(void) setNumberOfRowShouldShown:(id)");
}

-(double) cellHeight {
	%orig;
	NSLog(@"-(double) cellHeight");
}

-(void) setCellHeight:(double) {
	%orig;
	NSLog(@"-(void) setCellHeight:(double)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) initialize {
	%orig;
	NSLog(@"-(void) initialize");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

%end

%hook PMStationPersonalizationTableView

-(void) tapAddVariety:(id) {
	%orig;
	NSLog(@"-(void) tapAddVariety:(id)");
}

-(void) didTapVariety:(id) {
	%orig;
	NSLog(@"-(void) didTapVariety:(id)");
}

-(void) rebuildAccessibilityElementsForImageCell:(id) artistName:(id) songName:(id) {
	%orig;
	NSLog(@"-(void) rebuildAccessibilityElementsForImageCell:(id) artistName:(id) songName:(id)");
}

-(void) updatePlayArtistAudioMessages:(id) {
	%orig;
	NSLog(@"-(void) updatePlayArtistAudioMessages:(id)");
}

-(id) cellForVarietyAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) cellForVarietyAtIndexPath:(id)");
}

-(void) updateAddVarietyActionCell:(id) {
	%orig;
	NSLog(@"-(void) updateAddVarietyActionCell:(id)");
}

-(id) cellForArtistAudioMessagingAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) cellForArtistAudioMessagingAtIndexPath:(id)");
}

-(void) updateEditStationNameCell:(id) {
	%orig;
	NSLog(@"-(void) updateEditStationNameCell:(id)");
}

-(void) updateEditStationDescriptionCell:(id) {
	%orig;
	NSLog(@"-(void) updateEditStationDescriptionCell:(id)");
}

-(id) headerTitleBySection:(unsigned long long) {
	%orig;
	NSLog(@"-(id) headerTitleBySection:(unsigned long long)");
}

-(bool) inEditStationMode {
	%orig;
	NSLog(@"-(bool) inEditStationMode");
}

-(double) stationDescriptionSectionHeight {
	%orig;
	NSLog(@"-(double) stationDescriptionSectionHeight");
}

-(double) editStationDescriptionCellHeight {
	%orig;
	NSLog(@"-(double) editStationDescriptionCellHeight");
}

-(id) callbackHandler {
	%orig;
	NSLog(@"-(id) callbackHandler");
}

-(void) editStationNameButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) editStationNameButtonTapped:(id)");
}

-(void) editStationDescriptionButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) editStationDescriptionButtonTapped:(id)");
}

-(void) setInEditStationMode:(bool) {
	%orig;
	NSLog(@"-(void) setInEditStationMode:(bool)");
}

-(void) editButtonClicked {
	%orig;
	NSLog(@"-(void) editButtonClicked");
}

-(void) didDeleteImageBasedTableViewCell:(id) {
	%orig;
	NSLog(@"-(void) didDeleteImageBasedTableViewCell:(id)");
}

-(void) removeSeedSelectionHighlight {
	%orig;
	NSLog(@"-(void) removeSeedSelectionHighlight");
}

-(void) reloadSeedsWithResults:(id) {
	%orig;
	NSLog(@"-(void) reloadSeedsWithResults:(id)");
}

-(void) reloadEditStationNameDescription {
	%orig;
	NSLog(@"-(void) reloadEditStationNameDescription");
}

-(void) reloadArtistAudioMessagesToggleRow {
	%orig;
	NSLog(@"-(void) reloadArtistAudioMessagesToggleRow");
}

-(bool) shouldShowAddVarietyActionDescriptionSection {
	%orig;
	NSLog(@"-(bool) shouldShowAddVarietyActionDescriptionSection");
}

-(void) transitionToEditStationView {
	%orig;
	NSLog(@"-(void) transitionToEditStationView");
}

-(void) transitionFromEditStationView {
	%orig;
	NSLog(@"-(void) transitionFromEditStationView");
}

-(void) transitionToAddVarietyView {
	%orig;
	NSLog(@"-(void) transitionToAddVarietyView");
}

-(void) transitionToAddVarietySection:(bool) {
	%orig;
	NSLog(@"-(void) transitionToAddVarietySection:(bool)");
}

-(void) setCallbackHandler:(id) {
	%orig;
	NSLog(@"-(void) setCallbackHandler:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(double) dividerHeight {
	%orig;
	NSLog(@"-(double) dividerHeight");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) traitCollectionDidChange:(id) {
	%orig;
	NSLog(@"-(void) traitCollectionDidChange:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(double) tableView:(id) heightForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForRowAtIndexPath:(id)");
}

-(double) tableView:(id) heightForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(double) tableView:(id) heightForHeaderInSection:(long long)");
}

-(id) tableView:(id) viewForHeaderInSection:(long long) {
	%orig;
	NSLog(@"-(id) tableView:(id) viewForHeaderInSection:(long long)");
}

-(void) tableView:(id) didSelectRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) tableView:(id) didSelectRowAtIndexPath:(id)");
}

-(long long) tableView:(id) numberOfRowsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) tableView:(id) numberOfRowsInSection:(long long)");
}

-(id) tableView:(id) cellForRowAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) tableView:(id) cellForRowAtIndexPath:(id)");
}

-(long long) numberOfSectionsInTableView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInTableView:(id)");
}

-(void) setDataProvider:(id) {
	%orig;
	NSLog(@"-(void) setDataProvider:(id)");
}

-(id) dataProvider {
	%orig;
	NSLog(@"-(id) dataProvider");
}

%end

%hook PMMediaHeaderCollectionReusableView

-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long) {
	%orig;
	NSLog(@"-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) optionButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) optionButtonTapped:(id)");
}

-(id) optionButton {
	%orig;
	NSLog(@"-(id) optionButton");
}

-(void) setOptionButton:(id) {
	%orig;
	NSLog(@"-(void) setOptionButton:(id)");
}

-(id) filterSheetActionButton {
	%orig;
	NSLog(@"-(id) filterSheetActionButton");
}

-(void) setFilterSheetActionButton:(id) {
	%orig;
	NSLog(@"-(void) setFilterSheetActionButton:(id)");
}

-(id) bottomDividingLineHeightConstraint {
	%orig;
	NSLog(@"-(id) bottomDividingLineHeightConstraint");
}

-(void) setBottomDividingLineHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomDividingLineHeightConstraint:(id)");
}

-(id) optionDividingLine {
	%orig;
	NSLog(@"-(id) optionDividingLine");
}

-(void) setOptionDividingLine:(id) {
	%orig;
	NSLog(@"-(void) setOptionDividingLine:(id)");
}

-(id) topDividingLineHeightConstraint {
	%orig;
	NSLog(@"-(id) topDividingLineHeightConstraint");
}

-(void) setTopDividingLineHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTopDividingLineHeightConstraint:(id)");
}

-(id) optionDividingLineWidthConstraint {
	%orig;
	NSLog(@"-(id) optionDividingLineWidthConstraint");
}

-(void) setOptionDividingLineWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setOptionDividingLineWidthConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook FindFriendsCollectionHeaderView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMActivityIndicatorFooterView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) activityIndicator {
	%orig;
	NSLog(@"-(id) activityIndicator");
}

-(void) setActivityIndicator:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicator:(id)");
}

%end

%hook PMOfflineStationsFooterView

-(void) onOfflineSwitchValueChanged:(id) {
	%orig;
	NSLog(@"-(void) onOfflineSwitchValueChanged:(id)");
}

-(id) offlineControlSwitch {
	%orig;
	NSLog(@"-(id) offlineControlSwitch");
}

-(void) setOfflineControlSwitch:(id) {
	%orig;
	NSLog(@"-(void) setOfflineControlSwitch:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook EmptyCatalogCollectionReusableView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook MyMusicFooterCollectionReusableView

-(void) onButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) onButtonTapped:(id)");
}

-(id) labelTopConstraint {
	%orig;
	NSLog(@"-(id) labelTopConstraint");
}

-(void) setLabelTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLabelTopConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

-(id) button {
	%orig;
	NSLog(@"-(id) button");
}

-(void) setButton:(id) {
	%orig;
	NSLog(@"-(void) setButton:(id)");
}

%end

%hook PremiumSearchFooterView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook CollectionFooterView

-(void) didTap:(id) {
	%orig;
	NSLog(@"-(void) didTap:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook MyPodcastCollectionFooterView

-(void) didTap:(id) {
	%orig;
	NSLog(@"-(void) didTap:(id)");
}

-(void) browseTileModuleCell:(id) didSelectTileCardCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileModuleCell:(id) didSelectTileCardCell:(id) withData:(id)");
}

-(void) browseTileModuleCell:(id) didLongPressTileCardCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileModuleCell:(id) didLongPressTileCardCell:(id) withData:(id)");
}

-(void) browseTileModuleCellDidSelectViewAll:(id) {
	%orig;
	NSLog(@"-(void) browseTileModuleCellDidSelectViewAll:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook MyPodcastFooterCollectionFooterView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook MyPodcastFooterCollectionHeaderView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook BrowseSectionHeaderView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) backgroundView {
	%orig;
	NSLog(@"-(id) backgroundView");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) setBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundView:(id)");
}

%end

%hook PMMyStationsHeaderView

-(void) configureWithHeaderLabelText:(id) containerViewTrailingSpace:(double) {
	%orig;
	NSLog(@"-(void) configureWithHeaderLabelText:(id) containerViewTrailingSpace:(double)");
}

-(id) topSeparatorHeightConstraint {
	%orig;
	NSLog(@"-(id) topSeparatorHeightConstraint");
}

-(void) setTopSeparatorHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTopSeparatorHeightConstraint:(id)");
}

-(id) bottomSeparatorHeightConstraint {
	%orig;
	NSLog(@"-(id) bottomSeparatorHeightConstraint");
}

-(void) setBottomSeparatorHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparatorHeightConstraint:(id)");
}

-(id) containerViewTrailingSpaceConstraint {
	%orig;
	NSLog(@"-(id) containerViewTrailingSpaceConstraint");
}

-(void) setContainerViewTrailingSpaceConstraint:(id) {
	%orig;
	NSLog(@"-(void) setContainerViewTrailingSpaceConstraint:(id)");
}

-(void) setTopSeparator:(id) {
	%orig;
	NSLog(@"-(void) setTopSeparator:(id)");
}

-(id) topSeparator {
	%orig;
	NSLog(@"-(id) topSeparator");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(id) headerLabel {
	%orig;
	NSLog(@"-(id) headerLabel");
}

-(void) setHeaderLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook FBNativeAdCollectionViewCell

+(Class) specializeCellForType:(long long) forAttributes:(id) {
	%orig;
	NSLog(@"+(Class) specializeCellForType:(long long) forAttributes:(id)");
}

-(void) setNativeAdView:(id) {
	%orig;
	NSLog(@"-(void) setNativeAdView:(id)");
}

-(id) nativeAdView {
	%orig;
	NSLog(@"-(id) nativeAdView");
}

-(void) populate:(id) {
	%orig;
	NSLog(@"-(void) populate:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

%end

%hook PMLevel2SLAPCardViewCell

-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldReceiveTouch:(id)");
}

-(void) beginActivityPressed:(id) {
	%orig;
	NSLog(@"-(void) beginActivityPressed:(id)");
}

-(void) applyLayoutAttributes:(id) {
	%orig;
	NSLog(@"-(void) applyLayoutAttributes:(id)");
}

-(id) beginVideoActivityButton {
	%orig;
	NSLog(@"-(id) beginVideoActivityButton");
}

-(void) setBeginVideoActivityButton:(id) {
	%orig;
	NSLog(@"-(void) setBeginVideoActivityButton:(id)");
}

-(id) interactionButtonTopSpacing {
	%orig;
	NSLog(@"-(id) interactionButtonTopSpacing");
}

-(void) setInteractionButtonTopSpacing:(id) {
	%orig;
	NSLog(@"-(void) setInteractionButtonTopSpacing:(id)");
}

-(id) interactionButtonHeight {
	%orig;
	NSLog(@"-(id) interactionButtonHeight");
}

-(void) setInteractionButtonHeight:(id) {
	%orig;
	NSLog(@"-(void) setInteractionButtonHeight:(id)");
}

-(id) interactionButtonWidth {
	%orig;
	NSLog(@"-(id) interactionButtonWidth");
}

-(void) setInteractionButtonWidth:(id) {
	%orig;
	NSLog(@"-(void) setInteractionButtonWidth:(id)");
}

-(id) adView {
	%orig;
	NSLog(@"-(id) adView");
}

-(void) setAdView:(id) {
	%orig;
	NSLog(@"-(void) setAdView:(id)");
}

-(id) rewardStackView {
	%orig;
	NSLog(@"-(id) rewardStackView");
}

-(void) setRewardStackView:(id) {
	%orig;
	NSLog(@"-(void) setRewardStackView:(id)");
}

-(id) rewardLabel {
	%orig;
	NSLog(@"-(id) rewardLabel");
}

-(void) setRewardLabel:(id) {
	%orig;
	NSLog(@"-(void) setRewardLabel:(id)");
}

-(id) sponsorLabel {
	%orig;
	NSLog(@"-(id) sponsorLabel");
}

-(void) setSponsorLabel:(id) {
	%orig;
	NSLog(@"-(void) setSponsorLabel:(id)");
}

-(id) interactionButton {
	%orig;
	NSLog(@"-(id) interactionButton");
}

-(void) setInteractionButton:(id) {
	%orig;
	NSLog(@"-(void) setInteractionButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook PremiumAudioAdCell

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook NowPlayingSectionHeaderCell

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook QueueFooterCell

-(void) clearQueuePressed {
	%orig;
	NSLog(@"-(void) clearQueuePressed");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMOfflineStationsCell

-(id) stationArtImageView {
	%orig;
	NSLog(@"-(id) stationArtImageView");
}

-(void) setStationArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setStationArtImageView:(id)");
}

-(id) stationSubtitleLabel {
	%orig;
	NSLog(@"-(id) stationSubtitleLabel");
}

-(void) setStationSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationSubtitleLabel:(id)");
}

-(id) stationTitleLabel {
	%orig;
	NSLog(@"-(id) stationTitleLabel");
}

-(void) setStationTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationTitleLabel:(id)");
}

-(id) separatorHeightConstraint {
	%orig;
	NSLog(@"-(id) separatorHeightConstraint");
}

-(void) setSeparatorHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSeparatorHeightConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) separatorView {
	%orig;
	NSLog(@"-(id) separatorView");
}

-(id) leadingSpace {
	%orig;
	NSLog(@"-(id) leadingSpace");
}

-(void) setLeadingSpace:(id) {
	%orig;
	NSLog(@"-(void) setLeadingSpace:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setSeparatorView:(id) {
	%orig;
	NSLog(@"-(void) setSeparatorView:(id)");
}

%end

%hook SwipableCell

-(void) handleScrollingContentViewTap:(id) {
	%orig;
	NSLog(@"-(void) handleScrollingContentViewTap:(id)");
}

-(void) handleActionViewTap:(id) {
	%orig;
	NSLog(@"-(void) handleActionViewTap:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

%end

%hook QueueEntryCell

-(bool) gestureRecognizerShouldBegin:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizerShouldBegin:(id)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(void) didSelectMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didSelectMediaCellView:(id)");
}

-(void) didLongPressMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didLongPressMediaCellView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) handleLongPress:(id) {
	%orig;
	NSLog(@"-(void) handleLongPress:(id)");
}

%end

%hook PremiumAdCell

-(void) handleRotation {
	%orig;
	NSLog(@"-(void) handleRotation");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) traitCollectionDidChange:(id) {
	%orig;
	NSLog(@"-(void) traitCollectionDidChange:(id)");
}

%end

%hook PMPremiumTrackInfoDetailCell

-(void) moreLyricsButtonTapped {
	%orig;
	NSLog(@"-(void) moreLyricsButtonTapped");
}

-(void) trackMoreInfoButtonTapped {
	%orig;
	NSLog(@"-(void) trackMoreInfoButtonTapped");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMSeeMoreSourcesCollectionViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMRecentlyPlayedCollectionViewCell

-(void) musicSessionSourceDidChange {
	%orig;
	NSLog(@"-(void) musicSessionSourceDidChange");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(id) recentlyPlayedCollectionView {
	%orig;
	NSLog(@"-(id) recentlyPlayedCollectionView");
}

-(void) setRecentlyPlayedCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setRecentlyPlayedCollectionView:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook AutoPlayCell

-(void) autoPlayEnabledToggled:(id) {
	%orig;
	NSLog(@"-(void) autoPlayEnabledToggled:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMTargetMarketPickerSelectedMarketCell

-(id) closeButtonEnabledConstraint {
	%orig;
	NSLog(@"-(id) closeButtonEnabledConstraint");
}

-(void) setCloseButtonEnabledConstraint:(id) {
	%orig;
	NSLog(@"-(void) setCloseButtonEnabledConstraint:(id)");
}

-(void) setCloseButton:(id) {
	%orig;
	NSLog(@"-(void) setCloseButton:(id)");
}

-(id) closeButton {
	%orig;
	NSLog(@"-(id) closeButton");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) nameLabel {
	%orig;
	NSLog(@"-(id) nameLabel");
}

-(void) setNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setNameLabel:(id)");
}

%end

%hook QueueHeaderCell

-(void) queueEnabledToggled:(id) {
	%orig;
	NSLog(@"-(void) queueEnabledToggled:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PremiumAudioAdCaptionCell

-(void) handleWhyAdsButtonTap {
	%orig;
	NSLog(@"-(void) handleWhyAdsButtonTap");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMSourceCardActionCollectionViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) isHighlighted {
	%orig;
	NSLog(@"-(bool) isHighlighted");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMPodcastRowCell

-(bool) isCalloutShown {
	%orig;
	NSLog(@"-(bool) isCalloutShown");
}

-(id) pointerViewForPodcastMiniCoachMark {
	%orig;
	NSLog(@"-(id) pointerViewForPodcastMiniCoachMark");
}

-(void) updateCalloutWithShouldShow:(bool) calloutType:(long long) pointerCenter:(double) {
	%orig;
	NSLog(@"-(void) updateCalloutWithShouldShow:(bool) calloutType:(long long) pointerCenter:(double)");
}

-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long) {
	%orig;
	NSLog(@"-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long)");
}

-(id) podcastIconImageView {
	%orig;
	NSLog(@"-(id) podcastIconImageView");
}

-(void) setPodcastIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setPodcastIconImageView:(id)");
}

-(void) setAccessoryImageView:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryImageView:(id)");
}

-(id) accessoryImageView {
	%orig;
	NSLog(@"-(id) accessoryImageView");
}

-(id) cellData {
	%orig;
	NSLog(@"-(id) cellData");
}

-(void) setCellData:(id) {
	%orig;
	NSLog(@"-(void) setCellData:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) hideCallout {
	%orig;
	NSLog(@"-(void) hideCallout");
}

%end

%hook AppIconCollectionViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(bool) isHighlighted {
	%orig;
	NSLog(@"-(bool) isHighlighted");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook PMPremiumTrackInfoCoverCell

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook HighlightableCollectionViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

%end

%hook PMSmallRoutingCollectionViewCell

-(id) caretIcon {
	%orig;
	NSLog(@"-(id) caretIcon");
}

-(void) setCaretIcon:(id) {
	%orig;
	NSLog(@"-(void) setCaretIcon:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

%end

%hook PMRecentlyPlayedItemCollectionViewCell

-(void) didTapPlayButton:(id) {
	%orig;
	NSLog(@"-(void) didTapPlayButton:(id)");
}

-(void) didTapPauseButton:(id) {
	%orig;
	NSLog(@"-(void) didTapPauseButton:(id)");
}

-(id) collectionBadgeContainer {
	%orig;
	NSLog(@"-(id) collectionBadgeContainer");
}

-(void) setCollectionBadgeContainer:(id) {
	%orig;
	NSLog(@"-(void) setCollectionBadgeContainer:(id)");
}

-(id) gradientContainerView {
	%orig;
	NSLog(@"-(id) gradientContainerView");
}

-(void) setGradientContainerView:(id) {
	%orig;
	NSLog(@"-(void) setGradientContainerView:(id)");
}

-(void) setSecondaryTitle:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryTitle:(id)");
}

-(id) secondaryTitle {
	%orig;
	NSLog(@"-(id) secondaryTitle");
}

-(id) playButton {
	%orig;
	NSLog(@"-(id) playButton");
}

-(void) setPrimaryTitle:(id) {
	%orig;
	NSLog(@"-(void) setPrimaryTitle:(id)");
}

-(id) primaryTitle {
	%orig;
	NSLog(@"-(id) primaryTitle");
}

-(void) setPlayButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayButton:(id)");
}

-(id) pauseButton {
	%orig;
	NSLog(@"-(id) pauseButton");
}

-(void) setPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPauseButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) preferredLayoutAttributesFittingAttributes:(id) {
	%orig;
	NSLog(@"-(id) preferredLayoutAttributesFittingAttributes:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook PMActionItemCollectionViewCell

-(void) didTapCell:(id) {
	%orig;
	NSLog(@"-(void) didTapCell:(id)");
}

-(id) actionIcon {
	%orig;
	NSLog(@"-(id) actionIcon");
}

-(void) setActionIcon:(id) {
	%orig;
	NSLog(@"-(void) setActionIcon:(id)");
}

-(void) setLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLeadingConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) leadingConstraint {
	%orig;
	NSLog(@"-(id) leadingConstraint");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

%end

%hook PMMediaCollectionViewCell

-(void) didPressDelete {
	%orig;
	NSLog(@"-(void) didPressDelete");
}

-(bool) gestureRecognizerShouldBegin:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizerShouldBegin:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long) {
	%orig;
	NSLog(@"-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(void) didTapPlayButtonInMediaCellView:(id) isPlaying:(bool) {
	%orig;
	NSLog(@"-(void) didTapPlayButtonInMediaCellView:(id) isPlaying:(bool)");
}

-(void) didTapMoreButtonInMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didTapMoreButtonInMediaCellView:(id)");
}

-(void) didSelectMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didSelectMediaCellView:(id)");
}

-(void) didTapCollectButtonInMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didTapCollectButtonInMediaCellView:(id)");
}

-(void) didLongPressMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didLongPressMediaCellView:(id)");
}

-(void) doSwipe:(id) {
	%orig;
	NSLog(@"-(void) doSwipe:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) applyLayoutAttributes:(id) {
	%orig;
	NSLog(@"-(void) applyLayoutAttributes:(id)");
}

%end

%hook PodcastEpisodeMediaCollectionViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

%end

%hook PMPremiumTrackCollectionViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMMediaCarouselCollectionViewCell

-(void) didLongPressCell:(id) {
	%orig;
	NSLog(@"-(void) didLongPressCell:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

%end

%hook PMPremiumTrackInfoViewCell

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(id) collectionView:(id) targetIndexPathForMoveFromItemAtIndexPath:(id) toProposedIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) targetIndexPathForMoveFromItemAtIndexPath:(id) toProposedIndexPath:(id)");
}

-(bool) collectionView:(id) canMoveItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(bool) collectionView:(id) canMoveItemAtIndexPath:(id)");
}

-(void) collectionView:(id) moveItemAtIndexPath:(id) toIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) moveItemAtIndexPath:(id) toIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(CGPoint*)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(void) moreLyricsButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) moreLyricsButtonTapped:(id)");
}

-(void) trackInfoMoreButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) trackInfoMoreButtonTapped:(id)");
}

-(void) featuredTrackMoreButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) featuredTrackMoreButtonTapped:(id)");
}

-(id) queueCollectionView {
	%orig;
	NSLog(@"-(id) queueCollectionView");
}

-(void) handleOfflineManagerIsOfflineUpdatedWithNote:(id) {
	%orig;
	NSLog(@"-(void) handleOfflineManagerIsOfflineUpdatedWithNote:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

%end

%hook BrowseBillboardCell

-(id) detailLabel {
	%orig;
	NSLog(@"-(id) detailLabel");
}

-(void) setDetailLabel:(id) {
	%orig;
	NSLog(@"-(void) setDetailLabel:(id)");
}

-(void) setBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundImageView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) backgroundImageView {
	%orig;
	NSLog(@"-(id) backgroundImageView");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook PMBrowseFeatureModuleCell

-(void) setCellData:(id) shouldCheckDataIfOrientationChanges:(bool) {
	%orig;
	NSLog(@"-(void) setCellData:(id) shouldCheckDataIfOrientationChanges:(bool)");
}

-(void) updateParallaxOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) updateParallaxOffset:(CGPoint)");
}

-(void) featureStationsView:(id) touchBegan:(CGPoint) {
	%orig;
	NSLog(@"-(void) featureStationsView:(id) touchBegan:(CGPoint)");
}

-(void) didTapFeatureStationsView:(id) {
	%orig;
	NSLog(@"-(void) didTapFeatureStationsView:(id)");
}

-(void) spinCarousel {
	%orig;
	NSLog(@"-(void) spinCarousel");
}

-(void) setFeaturedStationViewReuseQueue:(id) {
	%orig;
	NSLog(@"-(void) setFeaturedStationViewReuseQueue:(id)");
}

-(void) setCarouselOffset:(double) {
	%orig;
	NSLog(@"-(void) setCarouselOffset:(double)");
}

-(void) setFeaturedStationToPageNumberMap:(id) {
	%orig;
	NSLog(@"-(void) setFeaturedStationToPageNumberMap:(id)");
}

-(void) setFeaturedStationsViewArray:(id) {
	%orig;
	NSLog(@"-(void) setFeaturedStationsViewArray:(id)");
}

-(id) dequeueFeaturedStationView {
	%orig;
	NSLog(@"-(id) dequeueFeaturedStationView");
}

-(id) featuredStationsViewArray {
	%orig;
	NSLog(@"-(id) featuredStationsViewArray");
}

-(id) featuredStationToPageNumberMap {
	%orig;
	NSLog(@"-(id) featuredStationToPageNumberMap");
}

-(void) enqueueFeaturedStationView:(id) {
	%orig;
	NSLog(@"-(void) enqueueFeaturedStationView:(id)");
}

-(void) setupFeaturedStationsViews {
	%orig;
	NSLog(@"-(void) setupFeaturedStationsViews");
}

-(void) layoutScrollViewAndSetupFeaturedStationsView {
	%orig;
	NSLog(@"-(void) layoutScrollViewAndSetupFeaturedStationsView");
}

-(void) handleScrollViewPageIndicator {
	%orig;
	NSLog(@"-(void) handleScrollViewPageIndicator");
}

-(void) setPreviousPage:(long long) {
	%orig;
	NSLog(@"-(void) setPreviousPage:(long long)");
}

-(void) rotateViewsRight {
	%orig;
	NSLog(@"-(void) rotateViewsRight");
}

-(void) rotateViewsLeft {
	%orig;
	NSLog(@"-(void) rotateViewsLeft");
}

-(void) setContentViewFrames {
	%orig;
	NSLog(@"-(void) setContentViewFrames");
}

-(double) carouselOffset {
	%orig;
	NSLog(@"-(double) carouselOffset");
}

-(id) featuredStationViewReuseQueue {
	%orig;
	NSLog(@"-(id) featuredStationViewReuseQueue");
}

-(id) generateNewFeatureCellView {
	%orig;
	NSLog(@"-(id) generateNewFeatureCellView");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) cellData {
	%orig;
	NSLog(@"-(id) cellData");
}

-(void) setCellData:(id) {
	%orig;
	NSLog(@"-(void) setCellData:(id)");
}

-(void) updateUI {
	%orig;
	NSLog(@"-(void) updateUI");
}

-(void) setParallaxOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) setParallaxOffset:(CGPoint)");
}

-(long long) previousPage {
	%orig;
	NSLog(@"-(long long) previousPage");
}

-(void) setPageControl:(id) {
	%orig;
	NSLog(@"-(void) setPageControl:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(id) pageControl {
	%orig;
	NSLog(@"-(id) pageControl");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(CGPoint) parallaxOffset {
	%orig;
	NSLog(@"-(CGPoint) parallaxOffset");
}

%end

%hook PMTrackDetailCell

+(id) darkFontColor {
	%orig;
	NSLog(@"+(id) darkFontColor");
}

+(id) lightFontColor {
	%orig;
	NSLog(@"+(id) lightFontColor");
}

-(id) nameLable {
	%orig;
	NSLog(@"-(id) nameLable");
}

-(void) setNameLable:(id) {
	%orig;
	NSLog(@"-(void) setNameLable:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) descriptionLabel {
	%orig;
	NSLog(@"-(id) descriptionLabel");
}

-(void) setDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionLabel:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMTrackHistoryImageCell

-(id) thumbUpButton {
	%orig;
	NSLog(@"-(id) thumbUpButton");
}

-(id) thumbDownButton {
	%orig;
	NSLog(@"-(id) thumbDownButton");
}

-(void) setIsThumbDown:(bool) {
	%orig;
	NSLog(@"-(void) setIsThumbDown:(bool)");
}

-(void) setIsThumbUp:(bool) {
	%orig;
	NSLog(@"-(void) setIsThumbUp:(bool)");
}

-(bool) isThumbUp {
	%orig;
	NSLog(@"-(bool) isThumbUp");
}

-(bool) isThumbDown {
	%orig;
	NSLog(@"-(bool) isThumbDown");
}

-(void) setCoveredWithBlackGradientLayer:(bool) {
	%orig;
	NSLog(@"-(void) setCoveredWithBlackGradientLayer:(bool)");
}

-(void) setCoveredWithBlackLayer:(bool) {
	%orig;
	NSLog(@"-(void) setCoveredWithBlackLayer:(bool)");
}

-(void) setThumbUpButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbUpButton:(id)");
}

-(void) setThumbDownButton:(id) {
	%orig;
	NSLog(@"-(void) setThumbDownButton:(id)");
}

-(id) blackGradientImageView {
	%orig;
	NSLog(@"-(id) blackGradientImageView");
}

-(id) blackView {
	%orig;
	NSLog(@"-(id) blackView");
}

-(bool) coveredWithBlackLayer {
	%orig;
	NSLog(@"-(bool) coveredWithBlackLayer");
}

-(bool) coveredWithBlackGradientLayer {
	%orig;
	NSLog(@"-(bool) coveredWithBlackGradientLayer");
}

-(void) setBlackGradientImageView:(id) {
	%orig;
	NSLog(@"-(void) setBlackGradientImageView:(id)");
}

-(void) setBlackView:(id) {
	%orig;
	NSLog(@"-(void) setBlackView:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) imageView {
	%orig;
	NSLog(@"-(id) imageView");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setImageView:(id) {
	%orig;
	NSLog(@"-(void) setImageView:(id)");
}

%end

%hook PMBrowseTileModuleCell

+(double) cellHeightForWidth:(double) totalCardCount:(long long) {
	%orig;
	NSLog(@"+(double) cellHeightForWidth:(double) totalCardCount:(long long)");
}

-(long long) moduleIndex {
	%orig;
	NSLog(@"-(long long) moduleIndex");
}

-(void) setTileCardCellData:(id) {
	%orig;
	NSLog(@"-(void) setTileCardCellData:(id)");
}

-(void) setModuleTitle:(id) {
	%orig;
	NSLog(@"-(void) setModuleTitle:(id)");
}

-(void) setModuleIndex:(long long) {
	%orig;
	NSLog(@"-(void) setModuleIndex:(long long)");
}

-(void) setViewAllEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setViewAllEnabled:(bool)");
}

-(void) updateParallaxOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) updateParallaxOffset:(CGPoint)");
}

-(id) moduleTitle {
	%orig;
	NSLog(@"-(id) moduleTitle");
}

-(void) browseTileCardCollectionViewController:(id) didSelectCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileCardCollectionViewController:(id) didSelectCell:(id) withData:(id)");
}

-(void) browseTileCardCollectionViewController:(id) didLongPressCell:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileCardCollectionViewController:(id) didLongPressCell:(id) withData:(id)");
}

-(void) browseTileCardCollectionViewController:(id) logBrowseViewEventWithCell:(id) atIndexpath:(id) withData:(id) {
	%orig;
	NSLog(@"-(void) browseTileCardCollectionViewController:(id) logBrowseViewEventWithCell:(id) atIndexpath:(id) withData:(id)");
}

-(id) tileCardCellData {
	%orig;
	NSLog(@"-(id) tileCardCellData");
}

-(void) headerContainerViewTapRecognized:(id) {
	%orig;
	NSLog(@"-(void) headerContainerViewTapRecognized:(id)");
}

-(id) moduleTitleLabel {
	%orig;
	NSLog(@"-(id) moduleTitleLabel");
}

-(id) viewAllLabel {
	%orig;
	NSLog(@"-(id) viewAllLabel");
}

-(id) viewAllArrow {
	%orig;
	NSLog(@"-(id) viewAllArrow");
}

-(void) setCardCollectionViewController:(id) {
	%orig;
	NSLog(@"-(void) setCardCollectionViewController:(id)");
}

-(id) cardCollectionViewController {
	%orig;
	NSLog(@"-(id) cardCollectionViewController");
}

-(id) cardCollectionViewContainer {
	%orig;
	NSLog(@"-(id) cardCollectionViewContainer");
}

-(void) setIndexPathImpressions:(id) {
	%orig;
	NSLog(@"-(void) setIndexPathImpressions:(id)");
}

-(id) indexPathImpressions {
	%orig;
	NSLog(@"-(id) indexPathImpressions");
}

-(bool) viewAllEnabled {
	%orig;
	NSLog(@"-(bool) viewAllEnabled");
}

-(void) adjustAppearanceForSelectedOrHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) adjustAppearanceForSelectedOrHighlighted:(bool)");
}

-(void) setCardCollectionViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setCardCollectionViewContainer:(id)");
}

-(void) setModuleTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setModuleTitleLabel:(id)");
}

-(void) setViewAllLabel:(id) {
	%orig;
	NSLog(@"-(void) setViewAllLabel:(id)");
}

-(void) setViewAllArrow:(id) {
	%orig;
	NSLog(@"-(void) setViewAllArrow:(id)");
}

-(void) setModuleId:(long long) {
	%orig;
	NSLog(@"-(void) setModuleId:(long long)");
}

-(long long) moduleId {
	%orig;
	NSLog(@"-(long long) moduleId");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) setSelected:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setHeaderContainerView:(id) {
	%orig;
	NSLog(@"-(void) setHeaderContainerView:(id)");
}

-(id) headerContainerView {
	%orig;
	NSLog(@"-(id) headerContainerView");
}

%end

%hook PMBrowseListCell

-(void) setActiveUI:(bool) {
	%orig;
	NSLog(@"-(void) setActiveUI:(bool)");
}

-(id) titleText {
	%orig;
	NSLog(@"-(id) titleText");
}

-(id) subtitleText {
	%orig;
	NSLog(@"-(id) subtitleText");
}

-(id) subtitleLabel {
	%orig;
	NSLog(@"-(id) subtitleLabel");
}

-(void) setSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleLabel:(id)");
}

-(void) setSubtitleText:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleText:(id)");
}

-(void) setDividerView:(id) {
	%orig;
	NSLog(@"-(void) setDividerView:(id)");
}

-(id) dividerView {
	%orig;
	NSLog(@"-(id) dividerView");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) setSelected:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setTitleText:(id) {
	%orig;
	NSLog(@"-(void) setTitleText:(id)");
}

%end

%hook PMMyStationsMusicCell

-(void) setupKVOController {
	%orig;
	NSLog(@"-(void) setupKVOController");
}

-(id) kvoController {
	%orig;
	NSLog(@"-(id) kvoController");
}

-(void) setKvoController:(id) {
	%orig;
	NSLog(@"-(void) setKvoController:(id)");
}

-(id) albumArtImageView {
	%orig;
	NSLog(@"-(id) albumArtImageView");
}

-(void) setAlbumArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtImageView:(id)");
}

-(void) didTapInfoButton {
	%orig;
	NSLog(@"-(void) didTapInfoButton");
}

-(id) stationSubtitleLabel {
	%orig;
	NSLog(@"-(id) stationSubtitleLabel");
}

-(void) setStationSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationSubtitleLabel:(id)");
}

-(id) stationTitleLabel {
	%orig;
	NSLog(@"-(id) stationTitleLabel");
}

-(void) setStationTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationTitleLabel:(id)");
}

-(void) invalidateDisplay {
	%orig;
	NSLog(@"-(void) invalidateDisplay");
}

-(bool) buttonDrawerIsVisible {
	%orig;
	NSLog(@"-(bool) buttonDrawerIsVisible");
}

-(void) hideButtonDrawerAnimated:(bool) {
	%orig;
	NSLog(@"-(void) hideButtonDrawerAnimated:(bool)");
}

-(void) cancelGestureRecognizers {
	%orig;
	NSLog(@"-(void) cancelGestureRecognizers");
}

-(id) separatorViewHeightConstraint {
	%orig;
	NSLog(@"-(id) separatorViewHeightConstraint");
}

-(void) setSeparatorViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSeparatorViewHeightConstraint:(id)");
}

-(id) stationScrollView {
	%orig;
	NSLog(@"-(id) stationScrollView");
}

-(void) setupStationButtons {
	%orig;
	NSLog(@"-(void) setupStationButtons");
}

-(id) stationSubtitleIconView {
	%orig;
	NSLog(@"-(id) stationSubtitleIconView");
}

-(id) sharedStationIconView {
	%orig;
	NSLog(@"-(id) sharedStationIconView");
}

-(void) setupStationArtAccessibility {
	%orig;
	NSLog(@"-(void) setupStationArtAccessibility");
}

-(void) didTapCell:(id) {
	%orig;
	NSLog(@"-(void) didTapCell:(id)");
}

-(id) leftDrawerButtonsContainer {
	%orig;
	NSLog(@"-(id) leftDrawerButtonsContainer");
}

-(id) personalizeButton {
	%orig;
	NSLog(@"-(id) personalizeButton");
}

-(void) didTapPersonalize {
	%orig;
	NSLog(@"-(void) didTapPersonalize");
}

-(void) didTapAccessoryButton {
	%orig;
	NSLog(@"-(void) didTapAccessoryButton");
}

-(id) buttonSeparator {
	%orig;
	NSLog(@"-(id) buttonSeparator");
}

-(void) updateAlbumArtAccessibilityWithImage:(id) selected:(bool) {
	%orig;
	NSLog(@"-(void) updateAlbumArtAccessibilityWithImage:(id) selected:(bool)");
}

-(id) albumArtContainer {
	%orig;
	NSLog(@"-(id) albumArtContainer");
}

-(id) getAccessibilityPrefix {
	%orig;
	NSLog(@"-(id) getAccessibilityPrefix");
}

-(void) voiceOverSetup {
	%orig;
	NSLog(@"-(void) voiceOverSetup");
}

-(void) voiceoverStatusDidChange:(id) {
	%orig;
	NSLog(@"-(void) voiceoverStatusDidChange:(id)");
}

-(bool) canSupportMultiLinesTitle {
	%orig;
	NSLog(@"-(bool) canSupportMultiLinesTitle");
}

-(id) stationContentView {
	%orig;
	NSLog(@"-(id) stationContentView");
}

-(bool) shouldShowLeftDrawerButtonsContainer {
	%orig;
	NSLog(@"-(bool) shouldShowLeftDrawerButtonsContainer");
}

-(void) rebuildAccessibilityElements {
	%orig;
	NSLog(@"-(void) rebuildAccessibilityElements");
}

-(id) sharedStationIconViewWidth {
	%orig;
	NSLog(@"-(id) sharedStationIconViewWidth");
}

-(id) subtitleIconViewWidthConstraint {
	%orig;
	NSLog(@"-(id) subtitleIconViewWidthConstraint");
}

-(id) separatorViewLeadingConstraint {
	%orig;
	NSLog(@"-(id) separatorViewLeadingConstraint");
}

-(id) separatorViewLabelsContainerAlignLeadingConstraint {
	%orig;
	NSLog(@"-(id) separatorViewLabelsContainerAlignLeadingConstraint");
}

-(double) buttonContainerWidth {
	%orig;
	NSLog(@"-(double) buttonContainerWidth");
}

-(id) stationContentTrailingConstraint {
	%orig;
	NSLog(@"-(id) stationContentTrailingConstraint");
}

-(CGPoint) expectedStationScrollViewContentOffset {
	%orig;
	NSLog(@"-(CGPoint) expectedStationScrollViewContentOffset");
}

-(bool) isAnimatingButtonDrawer {
	%orig;
	NSLog(@"-(bool) isAnimatingButtonDrawer");
}

-(void) setIsAnimatingButtonDrawer:(bool) {
	%orig;
	NSLog(@"-(void) setIsAnimatingButtonDrawer:(bool)");
}

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(id) accessibleSubtitleForMusicCellData:(id) {
	%orig;
	NSLog(@"-(id) accessibleSubtitleForMusicCellData:(id)");
}

-(id) customActionsForMusicCellData:(id) {
	%orig;
	NSLog(@"-(id) customActionsForMusicCellData:(id)");
}

-(id) accessibleAccessoryButtonLabelForMusicCellData:(id) {
	%orig;
	NSLog(@"-(id) accessibleAccessoryButtonLabelForMusicCellData:(id)");
}

-(id) tightLineSpacingText:(id) {
	%orig;
	NSLog(@"-(id) tightLineSpacingText:(id)");
}

-(void) setStationScrollView:(id) {
	%orig;
	NSLog(@"-(void) setStationScrollView:(id)");
}

-(void) setStationContentView:(id) {
	%orig;
	NSLog(@"-(void) setStationContentView:(id)");
}

-(id) stationLabelsContainer {
	%orig;
	NSLog(@"-(id) stationLabelsContainer");
}

-(void) setStationLabelsContainer:(id) {
	%orig;
	NSLog(@"-(void) setStationLabelsContainer:(id)");
}

-(void) setAlbumArtContainer:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtContainer:(id)");
}

-(void) setStationSubtitleIconView:(id) {
	%orig;
	NSLog(@"-(void) setStationSubtitleIconView:(id)");
}

-(void) setSharedStationIconView:(id) {
	%orig;
	NSLog(@"-(void) setSharedStationIconView:(id)");
}

-(void) setStationContentTrailingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setStationContentTrailingConstraint:(id)");
}

-(void) setLeftDrawerButtonsContainer:(id) {
	%orig;
	NSLog(@"-(void) setLeftDrawerButtonsContainer:(id)");
}

-(void) setButtonSeparator:(id) {
	%orig;
	NSLog(@"-(void) setButtonSeparator:(id)");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(void) setSharedStationIconViewWidth:(id) {
	%orig;
	NSLog(@"-(void) setSharedStationIconViewWidth:(id)");
}

-(void) setSubtitleIconViewWidthConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleIconViewWidthConstraint:(id)");
}

-(void) setSeparatorViewLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSeparatorViewLeadingConstraint:(id)");
}

-(void) setSeparatorViewLabelsContainerAlignLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSeparatorViewLabelsContainerAlignLeadingConstraint:(id)");
}

-(id) cellData {
	%orig;
	NSLog(@"-(id) cellData");
}

-(void) setCellData:(id) {
	%orig;
	NSLog(@"-(void) setCellData:(id)");
}

-(void) updateUI {
	%orig;
	NSLog(@"-(void) updateUI");
}

-(void) setTapGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setTapGestureRecognizer:(id)");
}

-(id) accessoryButton {
	%orig;
	NSLog(@"-(id) accessoryButton");
}

-(void) setAccessoryButton:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryButton:(id)");
}

-(id) tapGestureRecognizer {
	%orig;
	NSLog(@"-(id) tapGestureRecognizer");
}

-(id) accessibilityScrollStatusForScrollView:(id) {
	%orig;
	NSLog(@"-(id) accessibilityScrollStatusForScrollView:(id)");
}

-(id) buttonContainerView {
	%orig;
	NSLog(@"-(id) buttonContainerView");
}

-(void) setButtonContainerView:(id) {
	%orig;
	NSLog(@"-(void) setButtonContainerView:(id)");
}

-(void) setupAccessibility {
	%orig;
	NSLog(@"-(void) setupAccessibility");
}

-(id) subtitleLeadingConstraint {
	%orig;
	NSLog(@"-(id) subtitleLeadingConstraint");
}

-(void) setSubtitleLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleLeadingConstraint:(id)");
}

-(void) didLongPress:(id) {
	%orig;
	NSLog(@"-(void) didLongPress:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) accessibilityScroll:(long long) {
	%orig;
	NSLog(@"-(bool) accessibilityScroll:(long long)");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*)");
}

-(id) separatorView {
	%orig;
	NSLog(@"-(id) separatorView");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setSeparatorView:(id) {
	%orig;
	NSLog(@"-(void) setSeparatorView:(id)");
}

%end

%hook PMMyStationsButtonCell

-(void) setIconHidden:(bool) animated:(bool) onCompletion:(id) {
	%orig;
	NSLog(@"-(void) setIconHidden:(bool) animated:(bool) onCompletion:(id)");
}

-(bool) isIconHidden {
	%orig;
	NSLog(@"-(bool) isIconHidden");
}

-(void) setIsIconHidden:(bool) {
	%orig;
	NSLog(@"-(void) setIsIconHidden:(bool)");
}

-(void) setIconHidden:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setIconHidden:(bool) animated:(bool)");
}

-(void) invalidateDisplay {
	%orig;
	NSLog(@"-(void) invalidateDisplay");
}

-(id) iconLeadingLayoutConstraint {
	%orig;
	NSLog(@"-(id) iconLeadingLayoutConstraint");
}

-(void) setupAccessibilityLabels {
	%orig;
	NSLog(@"-(void) setupAccessibilityLabels");
}

-(id) separatorViewHeightConstraint {
	%orig;
	NSLog(@"-(id) separatorViewHeightConstraint");
}

-(void) setSeparatorViewHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSeparatorViewHeightConstraint:(id)");
}

-(void) setIconLeadingLayoutConstraint:(id) {
	%orig;
	NSLog(@"-(void) setIconLeadingLayoutConstraint:(id)");
}

-(void) updateUI {
	%orig;
	NSLog(@"-(void) updateUI");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) separatorView {
	%orig;
	NSLog(@"-(id) separatorView");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setSeparatorView:(id) {
	%orig;
	NSLog(@"-(void) setSeparatorView:(id)");
}

-(id) iconImageView {
	%orig;
	NSLog(@"-(id) iconImageView");
}

-(void) setIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setIconImageView:(id)");
}

%end

%hook PMMyStationsMoreRecommendationsCell

-(void) setupAccessibilityLabels {
	%orig;
	NSLog(@"-(void) setupAccessibilityLabels");
}

-(void) setActiveUI:(bool) {
	%orig;
	NSLog(@"-(void) setActiveUI:(bool)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) setSelected:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool)");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

%end

%hook PMInboxView

-(bool) omitDate {
	%orig;
	NSLog(@"-(bool) omitDate");
}

-(id) fullImageView {
	%orig;
	NSLog(@"-(id) fullImageView");
}

-(bool) shouldShowCircularImage {
	%orig;
	NSLog(@"-(bool) shouldShowCircularImage");
}

-(id) infoImageView {
	%orig;
	NSLog(@"-(id) infoImageView");
}

-(id) ticketBackground {
	%orig;
	NSLog(@"-(id) ticketBackground");
}

-(id) eventDateLabel {
	%orig;
	NSLog(@"-(id) eventDateLabel");
}

-(void) buildAccessibilityElements {
	%orig;
	NSLog(@"-(void) buildAccessibilityElements");
}

-(void) setShowsPlayButton:(bool) {
	%orig;
	NSLog(@"-(void) setShowsPlayButton:(bool)");
}

-(bool) neverSetSeen {
	%orig;
	NSLog(@"-(bool) neverSetSeen");
}

-(void) setNeverSetSeen:(bool) {
	%orig;
	NSLog(@"-(void) setNeverSetSeen:(bool)");
}

-(void) setShouldShowCircularImage:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowCircularImage:(bool)");
}

-(void) setClickedButtonColor:(id) {
	%orig;
	NSLog(@"-(void) setClickedButtonColor:(id)");
}

-(void) setClickedButtonTitle:(id) {
	%orig;
	NSLog(@"-(void) setClickedButtonTitle:(id)");
}

-(id) clickedButtonTitle {
	%orig;
	NSLog(@"-(id) clickedButtonTitle");
}

-(id) clickedButtonColor {
	%orig;
	NSLog(@"-(id) clickedButtonColor");
}

-(void) setActionItemColor:(id) {
	%orig;
	NSLog(@"-(void) setActionItemColor:(id)");
}

-(id) actionItemColor {
	%orig;
	NSLog(@"-(id) actionItemColor");
}

-(void) setOmitDate:(bool) {
	%orig;
	NSLog(@"-(void) setOmitDate:(bool)");
}

-(bool) dismissOnClick {
	%orig;
	NSLog(@"-(bool) dismissOnClick");
}

-(void) setDismissOnClick:(bool) {
	%orig;
	NSLog(@"-(void) setDismissOnClick:(bool)");
}

-(id) playImageView {
	%orig;
	NSLog(@"-(id) playImageView");
}

-(id) inboxBackgroundView {
	%orig;
	NSLog(@"-(id) inboxBackgroundView");
}

-(bool) showsPlayButton {
	%orig;
	NSLog(@"-(bool) showsPlayButton");
}

-(void) updateWithNotification:(id) {
	%orig;
	NSLog(@"-(void) updateWithNotification:(id)");
}

-(void) setFullImageView:(id) {
	%orig;
	NSLog(@"-(void) setFullImageView:(id)");
}

-(void) setInfoImageView:(id) {
	%orig;
	NSLog(@"-(void) setInfoImageView:(id)");
}

-(void) setEventDateLabel:(id) {
	%orig;
	NSLog(@"-(void) setEventDateLabel:(id)");
}

-(void) setInboxBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setInboxBackgroundView:(id)");
}

-(void) setPlayImageView:(id) {
	%orig;
	NSLog(@"-(void) setPlayImageView:(id)");
}

-(void) setTicketBackground:(id) {
	%orig;
	NSLog(@"-(void) setTicketBackground:(id)");
}

-(void) setSeen:(bool) {
	%orig;
	NSLog(@"-(void) setSeen:(bool)");
}

-(id) captionLabel {
	%orig;
	NSLog(@"-(id) captionLabel");
}

-(void) setCaptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setCaptionLabel:(id)");
}

-(id) actionButton {
	%orig;
	NSLog(@"-(id) actionButton");
}

-(void) setActionButton:(id) {
	%orig;
	NSLog(@"-(void) setActionButton:(id)");
}

-(bool) actionable {
	%orig;
	NSLog(@"-(bool) actionable");
}

-(void) setTimeLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimeLabel:(id)");
}

-(id) timeLabel {
	%orig;
	NSLog(@"-(id) timeLabel");
}

-(void) setActionable:(bool) {
	%orig;
	NSLog(@"-(void) setActionable:(bool)");
}

-(bool) seen {
	%orig;
	NSLog(@"-(bool) seen");
}

-(void) actionButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) actionButtonTapped:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(CGSize) contentSize {
	%orig;
	NSLog(@"-(CGSize) contentSize");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) setContentSize:(CGSize) {
	%orig;
	NSLog(@"-(void) setContentSize:(CGSize)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(id) textLabel {
	%orig;
	NSLog(@"-(id) textLabel");
}

-(void) setTextLabel:(id) {
	%orig;
	NSLog(@"-(void) setTextLabel:(id)");
}

-(id) iconImageView {
	%orig;
	NSLog(@"-(id) iconImageView");
}

-(void) setIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setIconImageView:(id)");
}

-(id) line {
	%orig;
	NSLog(@"-(id) line");
}

-(void) setLine:(id) {
	%orig;
	NSLog(@"-(void) setLine:(id)");
}

%end

%hook PMBrowseTileCardCell

+(id) nib {
	%orig;
	NSLog(@"+(id) nib");
}

+(double) cellHeightForWidth:(double) {
	%orig;
	NSLog(@"+(double) cellHeightForWidth:(double)");
}

+(id) reuseIdentifier {
	%orig;
	NSLog(@"+(id) reuseIdentifier");
}

-(id) albumArtImageView {
	%orig;
	NSLog(@"-(id) albumArtImageView");
}

-(void) setupLongPressRecognizer {
	%orig;
	NSLog(@"-(void) setupLongPressRecognizer");
}

-(void) removeHighlightOverlay {
	%orig;
	NSLog(@"-(void) removeHighlightOverlay");
}

-(void) updateTileForPodcast:(id) {
	%orig;
	NSLog(@"-(void) updateTileForPodcast:(id)");
}

-(void) didLongPressBrowseTileCardCell:(id) {
	%orig;
	NSLog(@"-(void) didLongPressBrowseTileCardCell:(id)");
}

-(id) cellHighlightOverlay {
	%orig;
	NSLog(@"-(id) cellHighlightOverlay");
}

-(void) setCellHighlightOverlay:(id) {
	%orig;
	NSLog(@"-(void) setCellHighlightOverlay:(id)");
}

-(void) addHighlightOverlay {
	%orig;
	NSLog(@"-(void) addHighlightOverlay");
}

-(void) enableAccessibilityUsingIdentifier:(id) {
	%orig;
	NSLog(@"-(void) enableAccessibilityUsingIdentifier:(id)");
}

-(void) setAlbumArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumArtImageView:(id)");
}

-(id) cellData {
	%orig;
	NSLog(@"-(id) cellData");
}

-(void) setCellData:(id) {
	%orig;
	NSLog(@"-(void) setCellData:(id)");
}

-(id) labelsContainer {
	%orig;
	NSLog(@"-(id) labelsContainer");
}

-(void) setLabelsContainer:(id) {
	%orig;
	NSLog(@"-(void) setLabelsContainer:(id)");
}

-(id) subtitleLabel {
	%orig;
	NSLog(@"-(id) subtitleLabel");
}

-(void) setSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubtitleLabel:(id)");
}

-(id) detailLabel {
	%orig;
	NSLog(@"-(id) detailLabel");
}

-(void) setDetailLabel:(id) {
	%orig;
	NSLog(@"-(void) setDetailLabel:(id)");
}

-(void) setDividerView:(id) {
	%orig;
	NSLog(@"-(void) setDividerView:(id)");
}

-(id) longPressRecognizer {
	%orig;
	NSLog(@"-(id) longPressRecognizer");
}

-(void) setLongPressRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setLongPressRecognizer:(id)");
}

-(id) dividerView {
	%orig;
	NSLog(@"-(id) dividerView");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) setTitleAttributes:(id) {
	%orig;
	NSLog(@"-(void) setTitleAttributes:(id)");
}

-(id) titleAttributes {
	%orig;
	NSLog(@"-(id) titleAttributes");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMNowPlayingPhoneCard

-(id) albumCoverImageView {
	%orig;
	NSLog(@"-(id) albumCoverImageView");
}

-(bool) hasExpandedTrackDetails {
	%orig;
	NSLog(@"-(bool) hasExpandedTrackDetails");
}

-(void) setIsHighlightedCard:(bool) {
	%orig;
	NSLog(@"-(void) setIsHighlightedCard:(bool)");
}

-(bool) isHighlightedCard {
	%orig;
	NSLog(@"-(bool) isHighlightedCard");
}

-(void) setAlbumCoverImageView:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCoverImageView:(id)");
}

-(bool) isShowingExpandedTrackDetails {
	%orig;
	NSLog(@"-(bool) isShowingExpandedTrackDetails");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isAccessibilityElement {
	%orig;
	NSLog(@"-(bool) isAccessibilityElement");
}

-(void) accessibilityElementDidBecomeFocused {
	%orig;
	NSLog(@"-(void) accessibilityElementDidBecomeFocused");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMNowPlayingPhoneStationCard

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMNowPlayingPhoneArtistMessageCard

-(bool) isNowPlaying {
	%orig;
	NSLog(@"-(bool) isNowPlaying");
}

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(void) setIsNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setIsNowPlaying:(bool)");
}

-(void) setIsHighlightedCard:(bool) {
	%orig;
	NSLog(@"-(void) setIsHighlightedCard:(bool)");
}

-(void) trackRatingUpdatedByTrackActionBar:(id) {
	%orig;
	NSLog(@"-(void) trackRatingUpdatedByTrackActionBar:(id)");
}

-(id) mainView {
	%orig;
	NSLog(@"-(id) mainView");
}

-(void) setMainView:(id) {
	%orig;
	NSLog(@"-(void) setMainView:(id)");
}

-(id) replayButton {
	%orig;
	NSLog(@"-(id) replayButton");
}

-(void) updateFlagImageFilled:(bool) {
	%orig;
	NSLog(@"-(void) updateFlagImageFilled:(bool)");
}

-(void) setReplayButton:(id) {
	%orig;
	NSLog(@"-(void) setReplayButton:(id)");
}

-(double) topOfTunerBar {
	%orig;
	NSLog(@"-(double) topOfTunerBar");
}

-(void) setArtistMessageCaptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistMessageCaptionLabel:(id)");
}

-(id) artistMessageCaptionLabel {
	%orig;
	NSLog(@"-(id) artistMessageCaptionLabel");
}

-(void) handleSingleTapGesture:(id) {
	%orig;
	NSLog(@"-(void) handleSingleTapGesture:(id)");
}

-(id) inappropriateFlagButton {
	%orig;
	NSLog(@"-(id) inappropriateFlagButton");
}

-(id) artistMessageViewModel {
	%orig;
	NSLog(@"-(id) artistMessageViewModel");
}

-(void) setImageForAlbumCoverImageView {
	%orig;
	NSLog(@"-(void) setImageForAlbumCoverImageView");
}

-(void) setTextForArtistMessageCaptionLabel {
	%orig;
	NSLog(@"-(void) setTextForArtistMessageCaptionLabel");
}

-(id) inappropriateFlagContainer {
	%orig;
	NSLog(@"-(id) inappropriateFlagContainer");
}

-(id) inappropriateFlagLabel {
	%orig;
	NSLog(@"-(id) inappropriateFlagLabel");
}

-(void) setupArtistMessageCaptionLabel {
	%orig;
	NSLog(@"-(void) setupArtistMessageCaptionLabel");
}

-(void) inappropriateFlagTouched:(id) {
	%orig;
	NSLog(@"-(void) inappropriateFlagTouched:(id)");
}

-(void) replayButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) replayButtonPressed:(id)");
}

-(void) setInappropriateFlagContainer:(id) {
	%orig;
	NSLog(@"-(void) setInappropriateFlagContainer:(id)");
}

-(void) setInappropriateFlagButton:(id) {
	%orig;
	NSLog(@"-(void) setInappropriateFlagButton:(id)");
}

-(void) setInappropriateFlagLabel:(id) {
	%orig;
	NSLog(@"-(void) setInappropriateFlagLabel:(id)");
}

-(void) setArtistMessageViewModel:(id) {
	%orig;
	NSLog(@"-(void) setArtistMessageViewModel:(id)");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setOverlayView:(id) {
	%orig;
	NSLog(@"-(void) setOverlayView:(id)");
}

-(id) overlayView {
	%orig;
	NSLog(@"-(id) overlayView");
}

%end

%hook PMNowPlayingPhoneTrackCard

-(void) updateLabelStyles {
	%orig;
	NSLog(@"-(void) updateLabelStyles");
}

-(bool) shouldShowUnifiedPlayControl {
	%orig;
	NSLog(@"-(bool) shouldShowUnifiedPlayControl");
}

-(void) updateThumbAccessibility {
	%orig;
	NSLog(@"-(void) updateThumbAccessibility");
}

-(void) setupKVOController {
	%orig;
	NSLog(@"-(void) setupKVOController");
}

-(void) setupTrackLabelsContainerView {
	%orig;
	NSLog(@"-(void) setupTrackLabelsContainerView");
}

-(void) setupAudioAdLabelsVisibleRegion {
	%orig;
	NSLog(@"-(void) setupAudioAdLabelsVisibleRegion");
}

-(void) setUpTrackActionBar {
	%orig;
	NSLog(@"-(void) setUpTrackActionBar");
}

-(void) addTrackContentViewToWebView {
	%orig;
	NSLog(@"-(void) addTrackContentViewToWebView");
}

-(void) setupTransientMessageLabel {
	%orig;
	NSLog(@"-(void) setupTransientMessageLabel");
}

-(void) setupWebView {
	%orig;
	NSLog(@"-(void) setupWebView");
}

-(void) updateReplayControl {
	%orig;
	NSLog(@"-(void) updateReplayControl");
}

-(void) didReceiveShouldUpdateScrollLayoutNotification:(id) {
	%orig;
	NSLog(@"-(void) didReceiveShouldUpdateScrollLayoutNotification:(id)");
}

-(void) updateForNewTrack {
	%orig;
	NSLog(@"-(void) updateForNewTrack");
}

-(id) caretIconButton {
	%orig;
	NSLog(@"-(id) caretIconButton");
}

-(id) albumCoverButton {
	%orig;
	NSLog(@"-(id) albumCoverButton");
}

-(id) webview {
	%orig;
	NSLog(@"-(id) webview");
}

-(void) releaseBioConnection {
	%orig;
	NSLog(@"-(void) releaseBioConnection");
}

-(id) trackNameLabel {
	%orig;
	NSLog(@"-(id) trackNameLabel");
}

-(id) artistNameLabel {
	%orig;
	NSLog(@"-(id) artistNameLabel");
}

-(id) albumNameLabel {
	%orig;
	NSLog(@"-(id) albumNameLabel");
}

-(id) trackLabelsContainerView {
	%orig;
	NSLog(@"-(id) trackLabelsContainerView");
}

-(double) trackLabelExpandedTop {
	%orig;
	NSLog(@"-(double) trackLabelExpandedTop");
}

-(id) previousThumbContainer {
	%orig;
	NSLog(@"-(id) previousThumbContainer");
}

-(void) toggleTrackDetailsView:(id) {
	%orig;
	NSLog(@"-(void) toggleTrackDetailsView:(id)");
}

-(void) albumCoverForceTouchRecognized:(id) {
	%orig;
	NSLog(@"-(void) albumCoverForceTouchRecognized:(id)");
}

-(id) audioAdLabelsVisibleRegion {
	%orig;
	NSLog(@"-(id) audioAdLabelsVisibleRegion");
}

-(id) whyAdsButton {
	%orig;
	NSLog(@"-(id) whyAdsButton");
}

-(id) audioAdTitleLabel {
	%orig;
	NSLog(@"-(id) audioAdTitleLabel");
}

-(id) audioAdSubtitleLabel {
	%orig;
	NSLog(@"-(id) audioAdSubtitleLabel");
}

-(void) showReplayControl {
	%orig;
	NSLog(@"-(void) showReplayControl");
}

-(void) hideReplayControl {
	%orig;
	NSLog(@"-(void) hideReplayControl");
}

-(id) previousReplayButton {
	%orig;
	NSLog(@"-(id) previousReplayButton");
}

-(id) previousThumbDown {
	%orig;
	NSLog(@"-(id) previousThumbDown");
}

-(id) previousThumbUp {
	%orig;
	NSLog(@"-(id) previousThumbUp");
}

-(bool) currentTrackAllowsReplay {
	%orig;
	NSLog(@"-(bool) currentTrackAllowsReplay");
}

-(id) trackActionBar {
	%orig;
	NSLog(@"-(id) trackActionBar");
}

-(bool) isNowPlaying {
	%orig;
	NSLog(@"-(bool) isNowPlaying");
}

-(id) transientMessageLabel {
	%orig;
	NSLog(@"-(id) transientMessageLabel");
}

-(CGRect) albumCoverViewContainerInitialFrame {
	%orig;
	NSLog(@"-(CGRect) albumCoverViewContainerInitialFrame");
}

-(void) updateAccessibleView:(id) withProposedAlpha:(double) {
	%orig;
	NSLog(@"-(void) updateAccessibleView:(id) withProposedAlpha:(double)");
}

-(id) trackContentView {
	%orig;
	NSLog(@"-(id) trackContentView");
}

-(void) updateWebViewSize {
	%orig;
	NSLog(@"-(void) updateWebViewSize");
}

-(id) cardBackgroundImageView {
	%orig;
	NSLog(@"-(id) cardBackgroundImageView");
}

-(void) setupAlbumCover {
	%orig;
	NSLog(@"-(void) setupAlbumCover");
}

-(double) verticalMarginBetweenAlbumAndTrackLabelsContainer {
	%orig;
	NSLog(@"-(double) verticalMarginBetweenAlbumAndTrackLabelsContainer");
}

-(id) albumCoverViewContainer {
	%orig;
	NSLog(@"-(id) albumCoverViewContainer");
}

-(id) remoteRadioIconsContainer {
	%orig;
	NSLog(@"-(id) remoteRadioIconsContainer");
}

-(void) setAlwaysShowAlbumTitle:(bool) {
	%orig;
	NSLog(@"-(void) setAlwaysShowAlbumTitle:(bool)");
}

-(void) setTrackLabelsContainerInitialFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setTrackLabelsContainerInitialFrame:(CGRect)");
}

-(void) setTrackContentViewInitialFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setTrackContentViewInitialFrame:(CGRect)");
}

-(void) setAlbumCoverViewContainerInitialFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setAlbumCoverViewContainerInitialFrame:(CGRect)");
}

-(void) setFeaturedTrackLabel:(id) {
	%orig;
	NSLog(@"-(void) setFeaturedTrackLabel:(id)");
}

-(id) featuredTrackLabel {
	%orig;
	NSLog(@"-(id) featuredTrackLabel");
}

-(id) kvoController {
	%orig;
	NSLog(@"-(id) kvoController");
}

-(void) setKvoController:(id) {
	%orig;
	NSLog(@"-(void) setKvoController:(id)");
}

-(id) trackViewModel {
	%orig;
	NSLog(@"-(id) trackViewModel");
}

-(void) setTrack:(id) {
	%orig;
	NSLog(@"-(void) setTrack:(id)");
}

-(bool) showTrafficDrivingPartnerMessageIfApplicable:(bool) {
	%orig;
	NSLog(@"-(bool) showTrafficDrivingPartnerMessageIfApplicable:(bool)");
}

-(bool) shouldShowTrafficDrivingPartnerMessage {
	%orig;
	NSLog(@"-(bool) shouldShowTrafficDrivingPartnerMessage");
}

-(bool) hasExpandedTrackDetails {
	%orig;
	NSLog(@"-(bool) hasExpandedTrackDetails");
}

-(void) compressTrackDetailView:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) compressTrackDetailView:(bool) animated:(bool)");
}

-(bool) showOnDemandArtistAudioMessageExpirationMessageIfApplicable:(bool) {
	%orig;
	NSLog(@"-(bool) showOnDemandArtistAudioMessageExpirationMessageIfApplicable:(bool)");
}

-(bool) shouldShowOnDemandArtistAudioMessageExpirationMessage {
	%orig;
	NSLog(@"-(bool) shouldShowOnDemandArtistAudioMessageExpirationMessage");
}

-(void) setIsNowPlaying:(bool) {
	%orig;
	NSLog(@"-(void) setIsNowPlaying:(bool)");
}

-(id) webViewHost {
	%orig;
	NSLog(@"-(id) webViewHost");
}

-(void) updateViewsForIsNowPlayingChange {
	%orig;
	NSLog(@"-(void) updateViewsForIsNowPlayingChange");
}

-(void) updateTrackLabelAccessibility {
	%orig;
	NSLog(@"-(void) updateTrackLabelAccessibility");
}

-(void) updateArtworkAccessibility {
	%orig;
	NSLog(@"-(void) updateArtworkAccessibility");
}

-(void) enableNowPlayingAccessibilityWithTrackLabel:(id) artistLabel:(id) albumLabel:(id) moreLabel:(id) {
	%orig;
	NSLog(@"-(void) enableNowPlayingAccessibilityWithTrackLabel:(id) artistLabel:(id) albumLabel:(id) moreLabel:(id)");
}

-(void) enablePreviousTrackAccessibilityWithTrackLabel:(id) artistLabel:(id) albumLabel:(id) moreLabel:(id) {
	%orig;
	NSLog(@"-(void) enablePreviousTrackAccessibilityWithTrackLabel:(id) artistLabel:(id) albumLabel:(id) moreLabel:(id)");
}

-(void) expandCellButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) expandCellButtonClicked:(id)");
}

-(void) compressCellButtonClicked:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) compressCellButtonClicked:(id) animated:(bool)");
}

-(void) expandCellButtonClicked:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) expandCellButtonClicked:(id) animated:(bool)");
}

-(void) handleThumbDownDelegateMethod:(id) {
	%orig;
	NSLog(@"-(void) handleThumbDownDelegateMethod:(id)");
}

-(id) nowPlayingPhoneTunerTeachMarks {
	%orig;
	NSLog(@"-(id) nowPlayingPhoneTunerTeachMarks");
}

-(void) updateThumbControlsForTrack {
	%orig;
	NSLog(@"-(void) updateThumbControlsForTrack");
}

-(void) handleThumbUpDelegateMethod:(id) {
	%orig;
	NSLog(@"-(void) handleThumbUpDelegateMethod:(id)");
}

-(void) compressCellButtonClicked:(id) {
	%orig;
	NSLog(@"-(void) compressCellButtonClicked:(id)");
}

-(void) setCanSendWillChangeTrackViewDelegateCall:(bool) {
	%orig;
	NSLog(@"-(void) setCanSendWillChangeTrackViewDelegateCall:(bool)");
}

-(CGPoint) compressedOffset {
	%orig;
	NSLog(@"-(CGPoint) compressedOffset");
}

-(CGRect) trackContentViewInitialFrame {
	%orig;
	NSLog(@"-(CGRect) trackContentViewInitialFrame");
}

-(double) minTrackContentHeight {
	%orig;
	NSLog(@"-(double) minTrackContentHeight");
}

-(void) notifyDelegateOfScrollViewDidScroll:(double) {
	%orig;
	NSLog(@"-(void) notifyDelegateOfScrollViewDidScroll:(double)");
}

-(double) trackLabelsContainerViewTopForPercentScrolled:(double) {
	%orig;
	NSLog(@"-(double) trackLabelsContainerViewTopForPercentScrolled:(double)");
}

-(double) maxAlbumCoverTop {
	%orig;
	NSLog(@"-(double) maxAlbumCoverTop");
}

-(double) minAlbumCoverScale {
	%orig;
	NSLog(@"-(double) minAlbumCoverScale");
}

-(double) albumCoverViewContainerRightWithAlbumCoverScale:(double) {
	%orig;
	NSLog(@"-(double) albumCoverViewContainerRightWithAlbumCoverScale:(double)");
}

-(bool) alwaysShowAlbumTitle {
	%orig;
	NSLog(@"-(bool) alwaysShowAlbumTitle");
}

-(CGRect) trackLabelsContainerInitialFrame {
	%orig;
	NSLog(@"-(CGRect) trackLabelsContainerInitialFrame");
}

-(void) positionCardView:(id) {
	%orig;
	NSLog(@"-(void) positionCardView:(id)");
}

-(void) endOfScrolling {
	%orig;
	NSLog(@"-(void) endOfScrolling");
}

-(void) completeAnimation {
	%orig;
	NSLog(@"-(void) completeAnimation");
}

-(long long) trackCardState {
	%orig;
	NSLog(@"-(long long) trackCardState");
}

-(long long) trackCardAnimationState {
	%orig;
	NSLog(@"-(long long) trackCardAnimationState");
}

-(void) printLogs {
	%orig;
	NSLog(@"-(void) printLogs");
}

-(void) setTrackCardAnimationState:(long long) {
	%orig;
	NSLog(@"-(void) setTrackCardAnimationState:(long long)");
}

-(void) setTrackContentOffset:(CGPoint) animated:(bool) {
	%orig;
	NSLog(@"-(void) setTrackContentOffset:(CGPoint) animated:(bool)");
}

-(void) enableTrackDetailButtonsAccessbility {
	%orig;
	NSLog(@"-(void) enableTrackDetailButtonsAccessbility");
}

-(void) disableTrackDetailButtonsAccessbility {
	%orig;
	NSLog(@"-(void) disableTrackDetailButtonsAccessbility");
}

-(id) bioConnection {
	%orig;
	NSLog(@"-(id) bioConnection");
}

-(void) setBioConnection:(id) {
	%orig;
	NSLog(@"-(void) setBioConnection:(id)");
}

-(bool) canSendWillChangeTrackViewDelegateCall {
	%orig;
	NSLog(@"-(bool) canSendWillChangeTrackViewDelegateCall");
}

-(bool) canShowTrackActionBar {
	%orig;
	NSLog(@"-(bool) canShowTrackActionBar");
}

-(void) enableMarqueeLabels:(bool) {
	%orig;
	NSLog(@"-(void) enableMarqueeLabels:(bool)");
}

-(void) resizeTrackLabel {
	%orig;
	NSLog(@"-(void) resizeTrackLabel");
}

-(void) resetScrollView {
	%orig;
	NSLog(@"-(void) resetScrollView");
}

-(void) adjustLayoutIfTrackIsAudioAd {
	%orig;
	NSLog(@"-(void) adjustLayoutIfTrackIsAudioAd");
}

-(id) labelsButton {
	%orig;
	NSLog(@"-(id) labelsButton");
}

-(void) setIsHighlightedCard:(bool) {
	%orig;
	NSLog(@"-(void) setIsHighlightedCard:(bool)");
}

-(id) audioAdLabelsContainer {
	%orig;
	NSLog(@"-(id) audioAdLabelsContainer");
}

-(void) resizeAudioAdLabelsContainerView {
	%orig;
	NSLog(@"-(void) resizeAudioAdLabelsContainerView");
}

-(bool) isHighlightedCard {
	%orig;
	NSLog(@"-(bool) isHighlightedCard");
}

-(void) trackRatingUpdatedByTrackActionBar:(id) {
	%orig;
	NSLog(@"-(void) trackRatingUpdatedByTrackActionBar:(id)");
}

-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool) {
	%orig;
	NSLog(@"-(bool) webViewHost:(id) shouldLoadURL:(id) clicked:(bool)");
}

-(void) webViewHostDidStartLoading:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidStartLoading:(id)");
}

-(void) webViewHostDidFinishLoad:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFinishLoad:(id)");
}

-(void) webViewHostDidFailLoad:(id) withError:(id) {
	%orig;
	NSLog(@"-(void) webViewHostDidFailLoad:(id) withError:(id)");
}

-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id) {
	%orig;
	NSLog(@"-(void) webViewHost:(id) delegateCommand:(id) returnedValue:(id)");
}

-(id) webViewHostRequestsTrack:(id) {
	%orig;
	NSLog(@"-(id) webViewHostRequestsTrack:(id)");
}

-(void) transientMessageLabelIsBeingDisplayed:(id) {
	%orig;
	NSLog(@"-(void) transientMessageLabelIsBeingDisplayed:(id)");
}

-(void) transientMessageLabelWillDisappear:(id) {
	%orig;
	NSLog(@"-(void) transientMessageLabelWillDisappear:(id)");
}

-(void) transientMessageLabelDidDisappear:(id) {
	%orig;
	NSLog(@"-(void) transientMessageLabelDidDisappear:(id)");
}

-(void) transientMessageLabelWasReset:(id) {
	%orig;
	NSLog(@"-(void) transientMessageLabelWasReset:(id)");
}

-(void) updateControlsWithOfflineState:(bool) {
	%orig;
	NSLog(@"-(void) updateControlsWithOfflineState:(bool)");
}

-(bool) showTrafficDrivingPartnerMessageIfApplicable {
	%orig;
	NSLog(@"-(bool) showTrafficDrivingPartnerMessageIfApplicable");
}

-(bool) showOnDemandArtistAudioMessageExpirationMessageIfApplicable {
	%orig;
	NSLog(@"-(bool) showOnDemandArtistAudioMessageExpirationMessageIfApplicable");
}

-(id) viewForRemoteRadioIcons {
	%orig;
	NSLog(@"-(id) viewForRemoteRadioIcons");
}

-(void) thumbDownPressed:(id) {
	%orig;
	NSLog(@"-(void) thumbDownPressed:(id)");
}

-(void) thumbUpPressed:(id) {
	%orig;
	NSLog(@"-(void) thumbUpPressed:(id)");
}

-(void) replayPressed:(id) {
	%orig;
	NSLog(@"-(void) replayPressed:(id)");
}

-(void) albumCoverPressed:(id) {
	%orig;
	NSLog(@"-(void) albumCoverPressed:(id)");
}

-(void) whyAdsWasClicked:(id) {
	%orig;
	NSLog(@"-(void) whyAdsWasClicked:(id)");
}

-(double) replayCoachmarkXPosition {
	%orig;
	NSLog(@"-(double) replayCoachmarkXPosition");
}

-(void) didScrollLevel1AdViewContainerWithPercentage:(double) {
	%orig;
	NSLog(@"-(void) didScrollLevel1AdViewContainerWithPercentage:(double)");
}

-(void) setNowPlayingPhoneTunerTeachMarks:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingPhoneTunerTeachMarks:(id)");
}

-(void) setTrackLabelsContainerView:(id) {
	%orig;
	NSLog(@"-(void) setTrackLabelsContainerView:(id)");
}

-(void) setArtistNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistNameLabel:(id)");
}

-(void) setAlbumNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setAlbumNameLabel:(id)");
}

-(void) setTrackNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setTrackNameLabel:(id)");
}

-(void) setAudioAdTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdTitleLabel:(id)");
}

-(void) setTrackContentView:(id) {
	%orig;
	NSLog(@"-(void) setTrackContentView:(id)");
}

-(void) setTransientMessageLabel:(id) {
	%orig;
	NSLog(@"-(void) setTransientMessageLabel:(id)");
}

-(void) setCardBackgroundImageView:(id) {
	%orig;
	NSLog(@"-(void) setCardBackgroundImageView:(id)");
}

-(void) setWebview:(id) {
	%orig;
	NSLog(@"-(void) setWebview:(id)");
}

-(void) setAlbumCoverViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCoverViewContainer:(id)");
}

-(void) setAlbumCoverButton:(id) {
	%orig;
	NSLog(@"-(void) setAlbumCoverButton:(id)");
}

-(void) setCaretIconButton:(id) {
	%orig;
	NSLog(@"-(void) setCaretIconButton:(id)");
}

-(void) setLabelsButton:(id) {
	%orig;
	NSLog(@"-(void) setLabelsButton:(id)");
}

-(void) setRemoteRadioIconsContainer:(id) {
	%orig;
	NSLog(@"-(void) setRemoteRadioIconsContainer:(id)");
}

-(void) setPreviousThumbContainer:(id) {
	%orig;
	NSLog(@"-(void) setPreviousThumbContainer:(id)");
}

-(void) setPreviousThumbDown:(id) {
	%orig;
	NSLog(@"-(void) setPreviousThumbDown:(id)");
}

-(void) setPreviousThumbUp:(id) {
	%orig;
	NSLog(@"-(void) setPreviousThumbUp:(id)");
}

-(void) setPreviousReplayButton:(id) {
	%orig;
	NSLog(@"-(void) setPreviousReplayButton:(id)");
}

-(void) setTrackActionBar:(id) {
	%orig;
	NSLog(@"-(void) setTrackActionBar:(id)");
}

-(CGPoint) currentScollviewContentOffset {
	%orig;
	NSLog(@"-(CGPoint) currentScollviewContentOffset");
}

-(void) setCurrentScollviewContentOffset:(CGPoint) {
	%orig;
	NSLog(@"-(void) setCurrentScollviewContentOffset:(CGPoint)");
}

-(void) setTrackViewModel:(id) {
	%orig;
	NSLog(@"-(void) setTrackViewModel:(id)");
}

-(void) setAudioAdLabelsVisibleRegion:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdLabelsVisibleRegion:(id)");
}

-(void) setAudioAdLabelsContainer:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdLabelsContainer:(id)");
}

-(void) setWhyAdsButton:(id) {
	%orig;
	NSLog(@"-(void) setWhyAdsButton:(id)");
}

-(void) setAudioAdSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setAudioAdSubtitleLabel:(id)");
}

-(void) level1AdViewContainerViewController:(id) didScroll:(double) {
	%orig;
	NSLog(@"-(void) level1AdViewContainerViewController:(id) didScroll:(double)");
}

-(void) HTTPConnectionFailed:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnectionFailed:(id)");
}

-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id) {
	%orig;
	NSLog(@"-(void) HTTPConnection:(id) finishedWithStatus:(long long) context:(id) andUTF8Text:(id)");
}

-(id) track {
	%orig;
	NSLog(@"-(id) track");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) setLabelsHidden:(bool) {
	%orig;
	NSLog(@"-(void) setLabelsHidden:(bool)");
}

-(bool) isDebug {
	%orig;
	NSLog(@"-(bool) isDebug");
}

-(void) setIsDebug:(bool) {
	%orig;
	NSLog(@"-(void) setIsDebug:(bool)");
}

-(void) reloadWebView {
	%orig;
	NSLog(@"-(void) reloadWebView");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*) {
	%orig;
	NSLog(@"-(void) scrollViewWillEndDragging:(id) withVelocity:(CGPoint) targetContentOffset:(inout CGPoint*)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(bool) scrollViewShouldScrollToTop:(id) {
	%orig;
	NSLog(@"-(bool) scrollViewShouldScrollToTop:(id)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(void) setInteractionDelegate:(id) {
	%orig;
	NSLog(@"-(void) setInteractionDelegate:(id)");
}

-(id) interactionDelegate {
	%orig;
	NSLog(@"-(id) interactionDelegate");
}

%end

%hook FBNativeAdTableViewCell

+(Class) specializeCellForType:(long long) forAttributes:(id) {
	%orig;
	NSLog(@"+(Class) specializeCellForType:(long long) forAttributes:(id)");
}

-(void) setNativeAdView:(id) {
	%orig;
	NSLog(@"-(void) setNativeAdView:(id)");
}

-(id) nativeAdView {
	%orig;
	NSLog(@"-(id) nativeAdView");
}

-(id) initWithType:(long long) withAttributes:(id) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithType:(long long) withAttributes:(id) reuseIdentifier:(id)");
}

-(void) populate:(id) {
	%orig;
	NSLog(@"-(void) populate:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(id) attributes {
	%orig;
	NSLog(@"-(id) attributes");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMArtistMessagingCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMTrackFeaturesCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMArtistAudioMessageMultiOptionDetailsCell

-(void) updateWith:(id) {
	%orig;
	NSLog(@"-(void) updateWith:(id)");
}

-(id) collectionViewHeight {
	%orig;
	NSLog(@"-(id) collectionViewHeight");
}

-(void) setCollectionViewHeight:(id) {
	%orig;
	NSLog(@"-(void) setCollectionViewHeight:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) collectionView {
	%orig;
	NSLog(@"-(id) collectionView");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) setCollectionView:(id) {
	%orig;
	NSLog(@"-(void) setCollectionView:(id)");
}

%end

%hook ProgressSwitchTableViewCell

-(void) pm_updateForEnabled:(bool) {
	%orig;
	NSLog(@"-(void) pm_updateForEnabled:(bool)");
}

-(void) setASwitch:(id) {
	%orig;
	NSLog(@"-(void) setASwitch:(id)");
}

-(id) aSwitch {
	%orig;
	NSLog(@"-(id) aSwitch");
}

-(id) primaryLabel {
	%orig;
	NSLog(@"-(id) primaryLabel");
}

-(void) setPrimaryLabel:(id) {
	%orig;
	NSLog(@"-(void) setPrimaryLabel:(id)");
}

-(id) progressView {
	%orig;
	NSLog(@"-(id) progressView");
}

-(void) setProgressView:(id) {
	%orig;
	NSLog(@"-(void) setProgressView:(id)");
}

-(id) progressLabel {
	%orig;
	NSLog(@"-(id) progressLabel");
}

-(id) leftMarginConstraint {
	%orig;
	NSLog(@"-(id) leftMarginConstraint");
}

-(void) setLeftMarginConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLeftMarginConstraint:(id)");
}

-(id) rightMarginConstraint {
	%orig;
	NSLog(@"-(id) rightMarginConstraint");
}

-(void) setRightMarginConstraint:(id) {
	%orig;
	NSLog(@"-(void) setRightMarginConstraint:(id)");
}

-(void) setProgressLabel:(id) {
	%orig;
	NSLog(@"-(void) setProgressLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMTargetMarketPickerCell

-(id) subheaderLabel {
	%orig;
	NSLog(@"-(id) subheaderLabel");
}

-(void) setSubheaderLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubheaderLabel:(id)");
}

-(id) headerLabel {
	%orig;
	NSLog(@"-(id) headerLabel");
}

-(void) setHeaderLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(id) percentageLabel {
	%orig;
	NSLog(@"-(id) percentageLabel");
}

-(void) setPercentageLabel:(id) {
	%orig;
	NSLog(@"-(void) setPercentageLabel:(id)");
}

%end

%hook PMMediaCarouselContainerTableViewCell

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(CGSize) collectionView:(id) layout:(id) sizeForItemAtIndexPath:(id)");
}

-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(UIEdgeInsets) collectionView:(id) layout:(id) insetForSectionAtIndex:(long long)");
}

-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long) {
	%orig;
	NSLog(@"-(double) collectionView:(id) layout:(id) minimumInteritemSpacingForSectionAtIndex:(long long)");
}

-(long long) numberOfSectionsInCollectionView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfSectionsInCollectionView:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMPlaylistCommonTableViewCell

-(void) handleButtonTouch:(id) {
	%orig;
	NSLog(@"-(void) handleButtonTouch:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMSeeMoreSongCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook CastDeviceDetailCell

-(void) editTapped:(id) {
	%orig;
	NSLog(@"-(void) editTapped:(id)");
}

-(id) groupButton {
	%orig;
	NSLog(@"-(id) groupButton");
}

-(void) setGroupButton:(id) {
	%orig;
	NSLog(@"-(void) setGroupButton:(id)");
}

-(void) showGroupTapped:(id) {
	%orig;
	NSLog(@"-(void) showGroupTapped:(id)");
}

-(void) onVolumeValueChanged:(id) {
	%orig;
	NSLog(@"-(void) onVolumeValueChanged:(id)");
}

-(void) setVolumeSlider:(id) {
	%orig;
	NSLog(@"-(void) setVolumeSlider:(id)");
}

-(id) volumeSlider {
	%orig;
	NSLog(@"-(id) volumeSlider");
}

-(id) editButton {
	%orig;
	NSLog(@"-(id) editButton");
}

-(id) detailLabel {
	%orig;
	NSLog(@"-(id) detailLabel");
}

-(void) setDetailLabel:(id) {
	%orig;
	NSLog(@"-(void) setDetailLabel:(id)");
}

-(void) setDeviceImage:(id) {
	%orig;
	NSLog(@"-(void) setDeviceImage:(id)");
}

-(id) deviceImage {
	%orig;
	NSLog(@"-(id) deviceImage");
}

-(void) setEditButton:(id) {
	%orig;
	NSLog(@"-(void) setEditButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(id) nameLabel {
	%orig;
	NSLog(@"-(id) nameLabel");
}

-(void) setNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setNameLabel:(id)");
}

%end

%hook PMThumbprintStationDescriptionCell

-(id) stationTitleLabel {
	%orig;
	NSLog(@"-(id) stationTitleLabel");
}

-(void) setStationTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationTitleLabel:(id)");
}

-(id) countDescriptionContainerView {
	%orig;
	NSLog(@"-(id) countDescriptionContainerView");
}

-(void) setCountDescriptionContainerView:(id) {
	%orig;
	NSLog(@"-(void) setCountDescriptionContainerView:(id)");
}

-(id) thumbImageView {
	%orig;
	NSLog(@"-(id) thumbImageView");
}

-(void) setThumbImageView:(id) {
	%orig;
	NSLog(@"-(void) setThumbImageView:(id)");
}

-(id) countLabel {
	%orig;
	NSLog(@"-(id) countLabel");
}

-(void) setCountLabel:(id) {
	%orig;
	NSLog(@"-(void) setCountLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMSeeMoreSourcesCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook CastGroupEditCell

-(id) eqImageView {
	%orig;
	NSLog(@"-(id) eqImageView");
}

-(void) setEqImageView:(id) {
	%orig;
	NSLog(@"-(void) setEqImageView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(id) label {
	%orig;
	NSLog(@"-(id) label");
}

-(void) setLabel:(id) {
	%orig;
	NSLog(@"-(void) setLabel:(id)");
}

%end

%hook SplitUnitCell

-(id) tertiaryLabel {
	%orig;
	NSLog(@"-(id) tertiaryLabel");
}

-(void) setTertiaryLabel:(id) {
	%orig;
	NSLog(@"-(void) setTertiaryLabel:(id)");
}

-(id) descriptionLabel {
	%orig;
	NSLog(@"-(id) descriptionLabel");
}

-(void) setDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionLabel:(id)");
}

-(id) heroImageView {
	%orig;
	NSLog(@"-(id) heroImageView");
}

-(void) setHeroImageView:(id) {
	%orig;
	NSLog(@"-(void) setHeroImageView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(id) secondaryLabel {
	%orig;
	NSLog(@"-(id) secondaryLabel");
}

-(void) setSecondaryLabel:(id) {
	%orig;
	NSLog(@"-(void) setSecondaryLabel:(id)");
}

%end

%hook CastDeviceListCell

-(void) editTapped:(id) {
	%orig;
	NSLog(@"-(void) editTapped:(id)");
}

-(id) editButton {
	%orig;
	NSLog(@"-(id) editButton");
}

-(id) detailLabel {
	%orig;
	NSLog(@"-(id) detailLabel");
}

-(void) setDetailLabel:(id) {
	%orig;
	NSLog(@"-(void) setDetailLabel:(id)");
}

-(void) setDeviceImage:(id) {
	%orig;
	NSLog(@"-(void) setDeviceImage:(id)");
}

-(id) deviceImage {
	%orig;
	NSLog(@"-(id) deviceImage");
}

-(void) setEditButton:(id) {
	%orig;
	NSLog(@"-(void) setEditButton:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(id) nameLabel {
	%orig;
	NSLog(@"-(id) nameLabel");
}

-(void) setNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setNameLabel:(id)");
}

%end

%hook CatalogDescriptionCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook AlbumDescriptionCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook UserDescriptionCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook ArtistDescriptionCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMThumbEmptyStateCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMSourceCardActionButtonsCell

-(void) collectionView:(id) didSelectItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(void) collectionView:(id) didSelectItemAtIndexPath:(id)");
}

-(long long) collectionView:(id) numberOfItemsInSection:(long long) {
	%orig;
	NSLog(@"-(long long) collectionView:(id) numberOfItemsInSection:(long long)");
}

-(id) collectionView:(id) cellForItemAtIndexPath:(id) {
	%orig;
	NSLog(@"-(id) collectionView:(id) cellForItemAtIndexPath:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook SharingMethodTableViewCell

-(id) sharingMethodIconImageView {
	%orig;
	NSLog(@"-(id) sharingMethodIconImageView");
}

-(void) setSharingMethodIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setSharingMethodIconImageView:(id)");
}

-(id) sharingMethodNameLabel {
	%orig;
	NSLog(@"-(id) sharingMethodNameLabel");
}

-(void) setSharingMethodNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setSharingMethodNameLabel:(id)");
}

-(id) sharingMethodIconImageViewLeadingSpaceToSuperviewConstraint {
	%orig;
	NSLog(@"-(id) sharingMethodIconImageViewLeadingSpaceToSuperviewConstraint");
}

-(void) setSharingMethodIconImageViewLeadingSpaceToSuperviewConstraint:(id) {
	%orig;
	NSLog(@"-(void) setSharingMethodIconImageViewLeadingSpaceToSuperviewConstraint:(id)");
}

-(id) chevronImageViewTrailingSpaceToSuperviewConstraint {
	%orig;
	NSLog(@"-(id) chevronImageViewTrailingSpaceToSuperviewConstraint");
}

-(void) setChevronImageViewTrailingSpaceToSuperviewConstraint:(id) {
	%orig;
	NSLog(@"-(void) setChevronImageViewTrailingSpaceToSuperviewConstraint:(id)");
}

-(id) chevronImageView {
	%orig;
	NSLog(@"-(id) chevronImageView");
}

-(void) setChevronImageView:(id) {
	%orig;
	NSLog(@"-(void) setChevronImageView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

%end

%hook PodcastProgramRetiredEpisodesCell

-(id) browseButton {
	%orig;
	NSLog(@"-(id) browseButton");
}

-(void) setBrowseButton:(id) {
	%orig;
	NSLog(@"-(void) setBrowseButton:(id)");
}

-(void) browseButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) browseButtonTapped:(id)");
}

-(id) headerLabel {
	%orig;
	NSLog(@"-(id) headerLabel");
}

-(void) setHeaderLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMUserDataCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook CastDeviceDisconnectCell

-(void) onDisconnectPressed:(id) {
	%orig;
	NSLog(@"-(void) onDisconnectPressed:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook MyMusicFilterOptionTableViewCell

-(id) optionNameLabel {
	%orig;
	NSLog(@"-(id) optionNameLabel");
}

-(void) setOptionNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setOptionNameLabel:(id)");
}

-(id) activeOptionIcon {
	%orig;
	NSLog(@"-(id) activeOptionIcon");
}

-(void) setActiveOptionIcon:(id) {
	%orig;
	NSLog(@"-(void) setActiveOptionIcon:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

%end

%hook PMThumbprintStationSettingTableViewArtistMessagingCell

-(id) artistMessagingSwitch {
	%orig;
	NSLog(@"-(id) artistMessagingSwitch");
}

-(void) setArtistMessagingSwitch:(id) {
	%orig;
	NSLog(@"-(void) setArtistMessagingSwitch:(id)");
}

-(void) didChangeSwitchValue:(id) {
	%orig;
	NSLog(@"-(void) didChangeSwitchValue:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMArtistSocialCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMProductFeatureEditorCell

-(id) featureIDLabel {
	%orig;
	NSLog(@"-(id) featureIDLabel");
}

-(void) setFeatureIDLabel:(id) {
	%orig;
	NSLog(@"-(void) setFeatureIDLabel:(id)");
}

-(id) featureDescriptionLabel {
	%orig;
	NSLog(@"-(id) featureDescriptionLabel");
}

-(void) setFeatureDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setFeatureDescriptionLabel:(id)");
}

-(id) sourceFileLabel {
	%orig;
	NSLog(@"-(id) sourceFileLabel");
}

-(void) setSourceFileLabel:(id) {
	%orig;
	NSLog(@"-(void) setSourceFileLabel:(id)");
}

-(void) didChangeSwitch:(id) {
	%orig;
	NSLog(@"-(void) didChangeSwitch:(id)");
}

-(void) setEnabledSwitch:(id) {
	%orig;
	NSLog(@"-(void) setEnabledSwitch:(id)");
}

-(id) enabledSwitch {
	%orig;
	NSLog(@"-(id) enabledSwitch");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMCatalogTextCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMStationDescriptionCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMTrackLyricsCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMPlaylistDescriptionCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PodcastProgramCatalogDescriptionCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMDiscoveryTunerTableViewCell

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(id) playIconImageView {
	%orig;
	NSLog(@"-(id) playIconImageView");
}

-(void) setPlayIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setPlayIconImageView:(id)");
}

-(id) modeNameLabel {
	%orig;
	NSLog(@"-(id) modeNameLabel");
}

-(void) setModeNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setModeNameLabel:(id)");
}

-(id) modeDescriptionLabel {
	%orig;
	NSLog(@"-(id) modeDescriptionLabel");
}

-(void) setModeDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setModeDescriptionLabel:(id)");
}

-(id) gradientView {
	%orig;
	NSLog(@"-(id) gradientView");
}

-(void) setGradientView:(id) {
	%orig;
	NSLog(@"-(void) setGradientView:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

%end

%hook PMPlaylistEmptyStateCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook HighlightableTableViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) touchesBegan:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesBegan:(id) withEvent:(id)");
}

-(void) touchesEnded:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesEnded:(id) withEvent:(id)");
}

-(void) touchesCancelled:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(void) touchesCancelled:(id) withEvent:(id)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMPremiumTrackTableViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMStationCatalogEditSeeAllTracksCell

-(id) numberOfTracksLabel {
	%orig;
	NSLog(@"-(id) numberOfTracksLabel");
}

-(void) setNumberOfTracksLabel:(id) {
	%orig;
	NSLog(@"-(void) setNumberOfTracksLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMMediaTableViewCell

-(void) doSwipe:(id) {
	%orig;
	NSLog(@"-(void) doSwipe:(id)");
}

-(bool) gestureRecognizerShouldBegin:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizerShouldBegin:(id)");
}

-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(bool) gestureRecognizer:(id) shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)");
}

-(void) willTransitionToState:(unsigned long long) {
	%orig;
	NSLog(@"-(void) willTransitionToState:(unsigned long long)");
}

-(void) didTransitionToState:(unsigned long long) {
	%orig;
	NSLog(@"-(void) didTransitionToState:(unsigned long long)");
}

-(long long) getHorizontalSizeClass {
	%orig;
	NSLog(@"-(long long) getHorizontalSizeClass");
}

-(void) didTapPlayButtonInMediaCellView:(id) isPlaying:(bool) {
	%orig;
	NSLog(@"-(void) didTapPlayButtonInMediaCellView:(id) isPlaying:(bool)");
}

-(void) didTapMoreButtonInMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didTapMoreButtonInMediaCellView:(id)");
}

-(void) didSelectMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didSelectMediaCellView:(id)");
}

-(void) didTapCollectButtonInMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didTapCollectButtonInMediaCellView:(id)");
}

-(void) didLongPressMediaCellView:(id) {
	%orig;
	NSLog(@"-(void) didLongPressMediaCellView:(id)");
}

-(void) didPressDelete {
	%orig;
	NSLog(@"-(void) didPressDelete");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) setTag:(long long) {
	%orig;
	NSLog(@"-(void) setTag:(long long)");
}

-(long long) tag {
	%orig;
	NSLog(@"-(long long) tag");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) setEditing:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setEditing:(bool) animated:(bool)");
}

%end

%hook PodcastProgramMediaTableViewCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMArtistTourDateCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMCatalogMoreCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMUserMoreCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMActionTableViewCell

-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long) {
	%orig;
	NSLog(@"-(void) miniCalloutView:(id) didTapCalloutViewWithAction:(long long)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMAddVarietyCell

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMTargetMarketPickerTopCell

-(id) headerLabel {
	%orig;
	NSLog(@"-(id) headerLabel");
}

-(void) setHeaderLabel:(id) {
	%orig;
	NSLog(@"-(void) setHeaderLabel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(id) percentageLabel {
	%orig;
	NSLog(@"-(id) percentageLabel");
}

-(void) setPercentageLabel:(id) {
	%orig;
	NSLog(@"-(void) setPercentageLabel:(id)");
}

%end

%hook PodcastEpisodeDescriptionCell

-(id) dateDurationLabel {
	%orig;
	NSLog(@"-(id) dateDurationLabel");
}

-(void) setDateDurationLabel:(id) {
	%orig;
	NSLog(@"-(void) setDateDurationLabel:(id)");
}

-(id) podcastDescriptionLabel {
	%orig;
	NSLog(@"-(id) podcastDescriptionLabel");
}

-(void) setPodcastDescriptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setPodcastDescriptionLabel:(id)");
}

-(id) verticalSpacingConstraint {
	%orig;
	NSLog(@"-(id) verticalSpacingConstraint");
}

-(void) setVerticalSpacingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setVerticalSpacingConstraint:(id)");
}

-(void) setTopConstraint:(id) {
	%orig;
	NSLog(@"-(void) setTopConstraint:(id)");
}

-(void) setBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setBottomConstraint:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) topConstraint {
	%orig;
	NSLog(@"-(id) topConstraint");
}

-(id) bottomConstraint {
	%orig;
	NSLog(@"-(id) bottomConstraint");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMFastSwitchTextFieldCell

+(id) cellForTableView:(id) label:(id) text:(id) keyboardType:(long long) indexPath:(id) cellType:(long long) keyboardToolbar:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id) label:(id) text:(id) keyboardType:(long long) indexPath:(id) cellType:(long long) keyboardToolbar:(id) delegate:(id)");
}

-(void) updateText:(id) {
	%orig;
	NSLog(@"-(void) updateText:(id)");
}

-(void) setTextField:(id) {
	%orig;
	NSLog(@"-(void) setTextField:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) textField {
	%orig;
	NSLog(@"-(id) textField");
}

-(bool) textFieldShouldBeginEditing:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldBeginEditing:(id)");
}

-(id) indexPath {
	%orig;
	NSLog(@"-(id) indexPath");
}

-(void) setIndexPath:(id) {
	%orig;
	NSLog(@"-(void) setIndexPath:(id)");
}

-(void) textFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidBeginEditing:(id)");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

%end

%hook PMStationViewCell

+(id) classReuseIdentifier {
	%orig;
	NSLog(@"+(id) classReuseIdentifier");
}

+(CGSize) stationArtSize {
	%orig;
	NSLog(@"+(CGSize) stationArtSize");
}

+(id) cellForTableView:(id) station:(id) style:(long long) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id) station:(id) style:(long long)");
}

+(double) rowHeight {
	%orig;
	NSLog(@"+(double) rowHeight");
}

-(void) fontDidResize:(id) {
	%orig;
	NSLog(@"-(void) fontDidResize:(id)");
}

-(void) setupLabelTextColors {
	%orig;
	NSLog(@"-(void) setupLabelTextColors");
}

-(void) setupScrollViewAndContent {
	%orig;
	NSLog(@"-(void) setupScrollViewAndContent");
}

-(id) stationNameLabel {
	%orig;
	NSLog(@"-(id) stationNameLabel");
}

-(id) moreOptionsButton {
	%orig;
	NSLog(@"-(id) moreOptionsButton");
}

-(id) stationArtImageView {
	%orig;
	NSLog(@"-(id) stationArtImageView");
}

-(void) didDismissStationOnPMRecommendationCellMoreOptionsController:(id) {
	%orig;
	NSLog(@"-(void) didDismissStationOnPMRecommendationCellMoreOptionsController:(id)");
}

-(void) didCreateStationOnPMRecommendationCellMoreOptionsController:(id) {
	%orig;
	NSLog(@"-(void) didCreateStationOnPMRecommendationCellMoreOptionsController:(id)");
}

-(void) setStationArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setStationArtImageView:(id)");
}

-(void) setStationNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationNameLabel:(id)");
}

-(void) setupKVOController {
	%orig;
	NSLog(@"-(void) setupKVOController");
}

-(id) kvoController {
	%orig;
	NSLog(@"-(id) kvoController");
}

-(void) setKvoController:(id) {
	%orig;
	NSLog(@"-(void) setKvoController:(id)");
}

-(void) didTapInfoButton:(id) {
	%orig;
	NSLog(@"-(void) didTapInfoButton:(id)");
}

-(id) stationArtContainer {
	%orig;
	NSLog(@"-(id) stationArtContainer");
}

-(void) setStationArtContainer:(id) {
	%orig;
	NSLog(@"-(void) setStationArtContainer:(id)");
}

-(id) stationSubtitleLabel {
	%orig;
	NSLog(@"-(id) stationSubtitleLabel");
}

-(void) setStationSubtitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationSubtitleLabel:(id)");
}

-(void) hideBottomSeparator {
	%orig;
	NSLog(@"-(void) hideBottomSeparator");
}

-(void) showBottomSeparator {
	%orig;
	NSLog(@"-(void) showBottomSeparator");
}

-(bool) shouldShowInfoButton {
	%orig;
	NSLog(@"-(bool) shouldShowInfoButton");
}

-(void) popoverManager:(id) didDismissViewController:(id) {
	%orig;
	NSLog(@"-(void) popoverManager:(id) didDismissViewController:(id)");
}

-(void) setupStationArtAccessibility {
	%orig;
	NSLog(@"-(void) setupStationArtAccessibility");
}

-(void) rebuildAccessibilityElements {
	%orig;
	NSLog(@"-(void) rebuildAccessibilityElements");
}

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(void) setMoreOptionsButton:(id) {
	%orig;
	NSLog(@"-(void) setMoreOptionsButton:(id)");
}

-(bool) isScrollViewOpen {
	%orig;
	NSLog(@"-(bool) isScrollViewOpen");
}

-(id) innerScrollViewContainerView {
	%orig;
	NSLog(@"-(id) innerScrollViewContainerView");
}

-(void) didTapDeleteButton:(id) {
	%orig;
	NSLog(@"-(void) didTapDeleteButton:(id)");
}

-(void) setInnerScrollViewContainerView:(id) {
	%orig;
	NSLog(@"-(void) setInnerScrollViewContainerView:(id)");
}

-(void) didRevealRightButtonsOnOtherCells:(id) {
	%orig;
	NSLog(@"-(void) didRevealRightButtonsOnOtherCells:(id)");
}

-(double) revealContentWidth {
	%orig;
	NSLog(@"-(double) revealContentWidth");
}

-(void) addLeftButtonsIfScrollViewOpen {
	%orig;
	NSLog(@"-(void) addLeftButtonsIfScrollViewOpen");
}

-(void) didEndRevealingRightButtons {
	%orig;
	NSLog(@"-(void) didEndRevealingRightButtons");
}

-(void) setBackgroundColorTo:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColorTo:(id)");
}

-(void) didSingleTap:(id) {
	%orig;
	NSLog(@"-(void) didSingleTap:(id)");
}

-(bool) isShowingButtons {
	%orig;
	NSLog(@"-(bool) isShowingButtons");
}

-(void) showNowPlayingTrackImageAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showNowPlayingTrackImageAnimated:(bool)");
}

-(bool) isShowingNowPlayingTrackImage {
	%orig;
	NSLog(@"-(bool) isShowingNowPlayingTrackImage");
}

-(void) setupInfoButton {
	%orig;
	NSLog(@"-(void) setupInfoButton");
}

-(void) setupLeftButtonContainer {
	%orig;
	NSLog(@"-(void) setupLeftButtonContainer");
}

-(void) setupPersonalizationButton {
	%orig;
	NSLog(@"-(void) setupPersonalizationButton");
}

-(void) setupSelectedBackgroundView {
	%orig;
	NSLog(@"-(void) setupSelectedBackgroundView");
}

-(id) promotedImageView {
	%orig;
	NSLog(@"-(id) promotedImageView");
}

-(void) updateWithStation:(id) style:(long long) {
	%orig;
	NSLog(@"-(void) updateWithStation:(id) style:(long long)");
}

-(id) leftButtonContainer {
	%orig;
	NSLog(@"-(id) leftButtonContainer");
}

-(void) setLeftButtonContainer:(id) {
	%orig;
	NSLog(@"-(void) setLeftButtonContainer:(id)");
}

-(void) didTapLeftButtonContainer:(id) {
	%orig;
	NSLog(@"-(void) didTapLeftButtonContainer:(id)");
}

-(id) personalizationButton {
	%orig;
	NSLog(@"-(id) personalizationButton");
}

-(void) didTapPersonalizationButton:(id) {
	%orig;
	NSLog(@"-(void) didTapPersonalizationButton:(id)");
}

-(void) setPersonalizationButton:(id) {
	%orig;
	NSLog(@"-(void) setPersonalizationButton:(id)");
}

-(void) updateStationArtAccessibilityWithImage:(id) selected:(bool) {
	%orig;
	NSLog(@"-(void) updateStationArtAccessibilityWithImage:(id) selected:(bool)");
}

-(bool) shouldAllowDeletion {
	%orig;
	NSLog(@"-(bool) shouldAllowDeletion");
}

-(bool) shouldAllowPersonalization {
	%orig;
	NSLog(@"-(bool) shouldAllowPersonalization");
}

-(void) addCenteredViewToLeftButtonContainer:(id) {
	%orig;
	NSLog(@"-(void) addCenteredViewToLeftButtonContainer:(id)");
}

-(void) postNotificationToCloseOtherCells {
	%orig;
	NSLog(@"-(void) postNotificationToCloseOtherCells");
}

-(bool) isCellSelected {
	%orig;
	NSLog(@"-(bool) isCellSelected");
}

-(void) handleSharedOrPlaylistImageStateUsingImageNamed:(id) {
	%orig;
	NSLog(@"-(void) handleSharedOrPlaylistImageStateUsingImageNamed:(id)");
}

-(void) setIsShowingNowPlayingTrackImage:(bool) {
	%orig;
	NSLog(@"-(void) setIsShowingNowPlayingTrackImage:(bool)");
}

-(void) setupStationBadgeDetailsForSelection {
	%orig;
	NSLog(@"-(void) setupStationBadgeDetailsForSelection");
}

-(void) updatePromotedStation {
	%orig;
	NSLog(@"-(void) updatePromotedStation");
}

-(void) updateCustomContentStation {
	%orig;
	NSLog(@"-(void) updateCustomContentStation");
}

-(void) updateSharedStation {
	%orig;
	NSLog(@"-(void) updateSharedStation");
}

-(void) markAsSelected {
	%orig;
	NSLog(@"-(void) markAsSelected");
}

-(void) markAsUnselected {
	%orig;
	NSLog(@"-(void) markAsUnselected");
}

-(id) buttonsSeparator {
	%orig;
	NSLog(@"-(id) buttonsSeparator");
}

-(id) moreOptionsMenu {
	%orig;
	NSLog(@"-(id) moreOptionsMenu");
}

-(id) sharedOrOnePlaylistImageView {
	%orig;
	NSLog(@"-(id) sharedOrOnePlaylistImageView");
}

-(void) setSharedOrOnePlaylistImageView:(id) {
	%orig;
	NSLog(@"-(void) setSharedOrOnePlaylistImageView:(id)");
}

-(void) setButtonsSeparator:(id) {
	%orig;
	NSLog(@"-(void) setButtonsSeparator:(id)");
}

-(void) adjustSeparatorsFrame {
	%orig;
	NSLog(@"-(void) adjustSeparatorsFrame");
}

-(id) showMoreOptionButtonWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) showMoreOptionButtonWithDelegate:(id)");
}

-(void) setMoreOptionsMenu:(id) {
	%orig;
	NSLog(@"-(void) setMoreOptionsMenu:(id)");
}

-(void) clearMoreOptionsMenu {
	%orig;
	NSLog(@"-(void) clearMoreOptionsMenu");
}

-(id) trackImageView {
	%orig;
	NSLog(@"-(id) trackImageView");
}

-(id) customActionsForStationCell:(id) {
	%orig;
	NSLog(@"-(id) customActionsForStationCell:(id)");
}

-(void) updateSelectedStateAnimated:(bool) {
	%orig;
	NSLog(@"-(void) updateSelectedStateAnimated:(bool)");
}

-(void) showMeterButtons {
	%orig;
	NSLog(@"-(void) showMeterButtons");
}

-(void) closeMeterButtonWithAnimationDuration:(double) {
	%orig;
	NSLog(@"-(void) closeMeterButtonWithAnimationDuration:(double)");
}

-(void) setTrackImageView:(id) {
	%orig;
	NSLog(@"-(void) setTrackImageView:(id)");
}

-(void) setPromotedImageView:(id) {
	%orig;
	NSLog(@"-(void) setPromotedImageView:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(void) setupDeleteButton {
	%orig;
	NSLog(@"-(void) setupDeleteButton");
}

-(id) deleteButton {
	%orig;
	NSLog(@"-(id) deleteButton");
}

-(void) setDeleteButton:(id) {
	%orig;
	NSLog(@"-(void) setDeleteButton:(id)");
}

-(void) setTopSeparator:(id) {
	%orig;
	NSLog(@"-(void) setTopSeparator:(id)");
}

-(id) topSeparator {
	%orig;
	NSLog(@"-(id) topSeparator");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(void) showTopSeparator {
	%orig;
	NSLog(@"-(void) showTopSeparator");
}

-(void) hideTopSeparator {
	%orig;
	NSLog(@"-(void) hideTopSeparator");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) accessibilityValue {
	%orig;
	NSLog(@"-(id) accessibilityValue");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setStyle:(long long) {
	%orig;
	NSLog(@"-(void) setStyle:(long long)");
}

-(long long) style {
	%orig;
	NSLog(@"-(long long) style");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

-(id) reuseIdentifier {
	%orig;
	NSLog(@"-(id) reuseIdentifier");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

-(void) showMoreOptions {
	%orig;
	NSLog(@"-(void) showMoreOptions");
}

-(id) infoButton {
	%orig;
	NSLog(@"-(id) infoButton");
}

-(void) setInfoButton:(id) {
	%orig;
	NSLog(@"-(void) setInfoButton:(id)");
}

%end

%hook PMAllYourArtistsCell

-(id) artistNameLabel {
	%orig;
	NSLog(@"-(id) artistNameLabel");
}

-(void) setArtistNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistNameLabel:(id)");
}

-(id) profileImageView {
	%orig;
	NSLog(@"-(id) profileImageView");
}

-(void) setProfileImageView:(id) {
	%orig;
	NSLog(@"-(void) setProfileImageView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMLabeledAccessoryUnifiedCell

-(id) accessoryLabel {
	%orig;
	NSLog(@"-(id) accessoryLabel");
}

-(id) customCellTextLabel {
	%orig;
	NSLog(@"-(id) customCellTextLabel");
}

-(void) setAccessoryLabel:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryLabel:(id)");
}

-(void) setCustomCellTextLabel:(id) {
	%orig;
	NSLog(@"-(void) setCustomCellTextLabel:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMSocialConnectAccountCell

-(void) fontDidResize:(id) {
	%orig;
	NSLog(@"-(void) fontDidResize:(id)");
}

-(void) updateFontStyleAndSize {
	%orig;
	NSLog(@"-(void) updateFontStyleAndSize");
}

-(id) initWithPlatformType:(long long) {
	%orig;
	NSLog(@"-(id) initWithPlatformType:(long long)");
}

-(id) profileImageView {
	%orig;
	NSLog(@"-(id) profileImageView");
}

-(id) connectStatusLabel {
	%orig;
	NSLog(@"-(id) connectStatusLabel");
}

-(id) userNameLabel {
	%orig;
	NSLog(@"-(id) userNameLabel");
}

-(void) loadProfilePhotoForUser:(id) {
	%orig;
	NSLog(@"-(void) loadProfilePhotoForUser:(id)");
}

-(void) setProfileImageView:(id) {
	%orig;
	NSLog(@"-(void) setProfileImageView:(id)");
}

-(void) setConnectStatusLabel:(id) {
	%orig;
	NSLog(@"-(void) setConnectStatusLabel:(id)");
}

-(void) setUserNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setUserNameLabel:(id)");
}

-(void) setPlatform:(long long) {
	%orig;
	NSLog(@"-(void) setPlatform:(long long)");
}

-(long long) platform {
	%orig;
	NSLog(@"-(long long) platform");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setCustomView:(id) {
	%orig;
	NSLog(@"-(void) setCustomView:(id)");
}

-(id) customView {
	%orig;
	NSLog(@"-(id) customView");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMLabeledAccessoryCell

-(id) accessoryLabel {
	%orig;
	NSLog(@"-(id) accessoryLabel");
}

-(void) setAccessoryLabel:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryLabel:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setCustomView:(id) {
	%orig;
	NSLog(@"-(void) setCustomView:(id)");
}

-(id) customView {
	%orig;
	NSLog(@"-(id) customView");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMTabMenuTableViewCell

-(void) setIconImageViewWidthHeight:(double) {
	%orig;
	NSLog(@"-(void) setIconImageViewWidthHeight:(double)");
}

-(void) updateIconRound:(bool) {
	%orig;
	NSLog(@"-(void) updateIconRound:(bool)");
}

-(id) iconImageWidthHeightConstraint {
	%orig;
	NSLog(@"-(id) iconImageWidthHeightConstraint");
}

-(void) setIconImageWidthHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setIconImageWidthHeightConstraint:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) badgeView {
	%orig;
	NSLog(@"-(id) badgeView");
}

-(id) iconImageView {
	%orig;
	NSLog(@"-(id) iconImageView");
}

-(void) setIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setIconImageView:(id)");
}

-(void) setBadgeView:(id) {
	%orig;
	NSLog(@"-(void) setBadgeView:(id)");
}

%end

%hook PMOnboardingCell

-(bool) isValidInputWithErrorMessage:(id*) {
	%orig;
	NSLog(@"-(bool) isValidInputWithErrorMessage:(id*)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(long long) state {
	%orig;
	NSLog(@"-(long long) state");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setState:(long long) {
	%orig;
	NSLog(@"-(void) setState:(long long)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMOnboardingGenderCell

-(id) maleButton {
	%orig;
	NSLog(@"-(id) maleButton");
}

-(id) femaleButton {
	%orig;
	NSLog(@"-(id) femaleButton");
}

-(void) femaleButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) femaleButtonTapped:(id)");
}

-(void) maleButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) maleButtonTapped:(id)");
}

-(void) whyButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) whyButtonTapped:(id)");
}

-(void) setFemaleButton:(id) {
	%orig;
	NSLog(@"-(void) setFemaleButton:(id)");
}

-(void) setMaleButton:(id) {
	%orig;
	NSLog(@"-(void) setMaleButton:(id)");
}

-(void) setGender:(id) {
	%orig;
	NSLog(@"-(void) setGender:(id)");
}

-(id) gender {
	%orig;
	NSLog(@"-(id) gender");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMOnboardingTextCell

-(void) logPresubmitErrorWithPageView:(id) {
	%orig;
	NSLog(@"-(void) logPresubmitErrorWithPageView:(id)");
}

-(void) setupRightButton {
	%orig;
	NSLog(@"-(void) setupRightButton");
}

-(void) rightButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) rightButtonTapped:(id)");
}

-(void) contentViewTapped {
	%orig;
	NSLog(@"-(void) contentViewTapped");
}

-(void) setMainBackground:(id) {
	%orig;
	NSLog(@"-(void) setMainBackground:(id)");
}

-(id) mainBackground {
	%orig;
	NSLog(@"-(id) mainBackground");
}

-(void) setErrorStateWithMessage:(id) {
	%orig;
	NSLog(@"-(void) setErrorStateWithMessage:(id)");
}

-(id) textColorForCurrentState {
	%orig;
	NSLog(@"-(id) textColorForCurrentState");
}

-(id) rightButton {
	%orig;
	NSLog(@"-(id) rightButton");
}

-(void) setRightButton:(id) {
	%orig;
	NSLog(@"-(void) setRightButton:(id)");
}

-(id) errorLabel {
	%orig;
	NSLog(@"-(id) errorLabel");
}

-(void) setErrorLabel:(id) {
	%orig;
	NSLog(@"-(void) setErrorLabel:(id)");
}

-(void) setTextField:(id) {
	%orig;
	NSLog(@"-(void) setTextField:(id)");
}

-(void) textFieldDidChange:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidChange:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) textField {
	%orig;
	NSLog(@"-(id) textField");
}

-(bool) textFieldShouldClear:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldClear:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(bool) textFieldShouldReturn:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldReturn:(id)");
}

-(void) validate {
	%orig;
	NSLog(@"-(void) validate");
}

-(void) textFieldDidBeginEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidBeginEditing:(id)");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

%end

%hook PMOnboardingZipcodeCell

-(bool) isValidInputWithErrorMessage:(id*) {
	%orig;
	NSLog(@"-(bool) isValidInputWithErrorMessage:(id*)");
}

-(void) logPresubmitErrorWithPageView:(id) {
	%orig;
	NSLog(@"-(void) logPresubmitErrorWithPageView:(id)");
}

-(void) setupRightButton {
	%orig;
	NSLog(@"-(void) setupRightButton");
}

-(void) rightButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) rightButtonTapped:(id)");
}

-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id) {
	%orig;
	NSLog(@"-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

%end

%hook PMOnboardingBirthYearCell

-(bool) isValidInputWithErrorMessage:(id*) {
	%orig;
	NSLog(@"-(bool) isValidInputWithErrorMessage:(id*)");
}

-(void) logPresubmitErrorWithPageView:(id) {
	%orig;
	NSLog(@"-(void) logPresubmitErrorWithPageView:(id)");
}

-(void) setupRightButton {
	%orig;
	NSLog(@"-(void) setupRightButton");
}

-(void) rightButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) rightButtonTapped:(id)");
}

-(void) pickerDoneClicked:(id) {
	%orig;
	NSLog(@"-(void) pickerDoneClicked:(id)");
}

-(id) leftDateField {
	%orig;
	NSLog(@"-(id) leftDateField");
}

-(id) rightDateField {
	%orig;
	NSLog(@"-(id) rightDateField");
}

-(id) birthMonthDayView {
	%orig;
	NSLog(@"-(id) birthMonthDayView");
}

-(id) constructArrayOfYearsFrom1900 {
	%orig;
	NSLog(@"-(id) constructArrayOfYearsFrom1900");
}

-(void) setYearsData:(id) {
	%orig;
	NSLog(@"-(void) setYearsData:(id)");
}

-(void) setDidSelectDate:(bool) {
	%orig;
	NSLog(@"-(void) setDidSelectDate:(bool)");
}

-(void) dateUpdated:(id) {
	%orig;
	NSLog(@"-(void) dateUpdated:(id)");
}

-(void) checkCoppaEdgeBirthday {
	%orig;
	NSLog(@"-(void) checkCoppaEdgeBirthday");
}

-(bool) didSelectDate {
	%orig;
	NSLog(@"-(bool) didSelectDate");
}

-(bool) shouldShowDetailedBirthday {
	%orig;
	NSLog(@"-(bool) shouldShowDetailedBirthday");
}

-(void) updateCellForCoppaEdgeBirthYear {
	%orig;
	NSLog(@"-(void) updateCellForCoppaEdgeBirthYear");
}

-(void) updateCellForValidBirthDate {
	%orig;
	NSLog(@"-(void) updateCellForValidBirthDate");
}

-(void) initializeDatePickerInputView {
	%orig;
	NSLog(@"-(void) initializeDatePickerInputView");
}

-(id) monthDayWidth {
	%orig;
	NSLog(@"-(id) monthDayWidth");
}

-(id) rightDivider {
	%orig;
	NSLog(@"-(id) rightDivider");
}

-(id) leftDivider {
	%orig;
	NSLog(@"-(id) leftDivider");
}

-(id) yearsData {
	%orig;
	NSLog(@"-(id) yearsData");
}

-(void) setBirthMonthDayView:(id) {
	%orig;
	NSLog(@"-(void) setBirthMonthDayView:(id)");
}

-(void) setLeftDateField:(id) {
	%orig;
	NSLog(@"-(void) setLeftDateField:(id)");
}

-(void) setRightDateField:(id) {
	%orig;
	NSLog(@"-(void) setRightDateField:(id)");
}

-(void) setMonthDayWidth:(id) {
	%orig;
	NSLog(@"-(void) setMonthDayWidth:(id)");
}

-(id) monthDayHeightConstraint {
	%orig;
	NSLog(@"-(id) monthDayHeightConstraint");
}

-(void) setMonthDayHeightConstraint:(id) {
	%orig;
	NSLog(@"-(void) setMonthDayHeightConstraint:(id)");
}

-(void) setLeftDivider:(id) {
	%orig;
	NSLog(@"-(void) setLeftDivider:(id)");
}

-(void) setRightDivider:(id) {
	%orig;
	NSLog(@"-(void) setRightDivider:(id)");
}

-(void) setSelectedDate:(id) {
	%orig;
	NSLog(@"-(void) setSelectedDate:(id)");
}

-(id) selectedDate {
	%orig;
	NSLog(@"-(id) selectedDate");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id) {
	%orig;
	NSLog(@"-(bool) textField:(id) shouldChangeCharactersInRange:(_NSRange) replacementString:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(long long) numberOfComponentsInPickerView:(id) {
	%orig;
	NSLog(@"-(long long) numberOfComponentsInPickerView:(id)");
}

-(long long) pickerView:(id) numberOfRowsInComponent:(long long) {
	%orig;
	NSLog(@"-(long long) pickerView:(id) numberOfRowsInComponent:(long long)");
}

-(id) pickerView:(id) titleForRow:(long long) forComponent:(long long) {
	%orig;
	NSLog(@"-(id) pickerView:(id) titleForRow:(long long) forComponent:(long long)");
}

-(void) pickerView:(id) didSelectRow:(long long) inComponent:(long long) {
	%orig;
	NSLog(@"-(void) pickerView:(id) didSelectRow:(long long) inComponent:(long long)");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

%end

%hook PMOnboardingEmailCell

-(bool) isValidInputWithErrorMessage:(id*) {
	%orig;
	NSLog(@"-(bool) isValidInputWithErrorMessage:(id*)");
}

-(void) logPresubmitErrorWithPageView:(id) {
	%orig;
	NSLog(@"-(void) logPresubmitErrorWithPageView:(id)");
}

-(void) setupRightButton {
	%orig;
	NSLog(@"-(void) setupRightButton");
}

-(void) prePopulateEmail:(id) {
	%orig;
	NSLog(@"-(void) prePopulateEmail:(id)");
}

-(void) rightButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) rightButtonTapped:(id)");
}

-(id) makeEmailInputAccessoryViewController {
	%orig;
	NSLog(@"-(id) makeEmailInputAccessoryViewController");
}

-(void) setEmailInputAccessoryViewController:(id) {
	%orig;
	NSLog(@"-(void) setEmailInputAccessoryViewController:(id)");
}

-(id) emailInputAccessoryViewController {
	%orig;
	NSLog(@"-(id) emailInputAccessoryViewController");
}

-(id) previouslyAutocorrectedEmail {
	%orig;
	NSLog(@"-(id) previouslyAutocorrectedEmail");
}

-(void) setPreviouslyAutocorrectedEmail:(id) {
	%orig;
	NSLog(@"-(void) setPreviouslyAutocorrectedEmail:(id)");
}

-(void) emailInputAccessoryWithViewController:(id) suggestedAppendingString:(id) {
	%orig;
	NSLog(@"-(void) emailInputAccessoryWithViewController:(id) suggestedAppendingString:(id)");
}

-(id) email {
	%orig;
	NSLog(@"-(id) email");
}

-(void) textFieldDidChange:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidChange:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) textFieldShouldBeginEditing:(id) {
	%orig;
	NSLog(@"-(bool) textFieldShouldBeginEditing:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) textFieldDidEndEditing:(id) {
	%orig;
	NSLog(@"-(void) textFieldDidEndEditing:(id)");
}

%end

%hook PMOnboardingPasswordCell

-(bool) isValidInputWithErrorMessage:(id*) {
	%orig;
	NSLog(@"-(bool) isValidInputWithErrorMessage:(id*)");
}

-(void) logPresubmitErrorWithPageView:(id) {
	%orig;
	NSLog(@"-(void) logPresubmitErrorWithPageView:(id)");
}

-(void) setupRightButton {
	%orig;
	NSLog(@"-(void) setupRightButton");
}

-(void) toggleSecureTextEntry {
	%orig;
	NSLog(@"-(void) toggleSecureTextEntry");
}

-(id) passwordCellDelegate {
	%orig;
	NSLog(@"-(id) passwordCellDelegate");
}

-(void) rightButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) rightButtonTapped:(id)");
}

-(void) setPasswordCellDelegate:(id) {
	%orig;
	NSLog(@"-(void) setPasswordCellDelegate:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMInboxNotificationCell

+(id) cellIdentifier {
	%orig;
	NSLog(@"+(id) cellIdentifier");
}

-(bool) omitDate {
	%orig;
	NSLog(@"-(bool) omitDate");
}

-(id) fullImageView {
	%orig;
	NSLog(@"-(id) fullImageView");
}

-(bool) shouldShowCircularImage {
	%orig;
	NSLog(@"-(bool) shouldShowCircularImage");
}

-(id) infoImageView {
	%orig;
	NSLog(@"-(id) infoImageView");
}

-(id) ticketBackground {
	%orig;
	NSLog(@"-(id) ticketBackground");
}

-(id) eventDateLabel {
	%orig;
	NSLog(@"-(id) eventDateLabel");
}

-(void) buildAccessibilityElements {
	%orig;
	NSLog(@"-(void) buildAccessibilityElements");
}

-(void) setShowsPlayButton:(bool) {
	%orig;
	NSLog(@"-(void) setShowsPlayButton:(bool)");
}

-(bool) neverSetSeen {
	%orig;
	NSLog(@"-(bool) neverSetSeen");
}

-(void) setNeverSetSeen:(bool) {
	%orig;
	NSLog(@"-(void) setNeverSetSeen:(bool)");
}

-(void) setShouldShowCircularImage:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowCircularImage:(bool)");
}

-(void) setClickedButtonColor:(id) {
	%orig;
	NSLog(@"-(void) setClickedButtonColor:(id)");
}

-(void) setClickedButtonTitle:(id) {
	%orig;
	NSLog(@"-(void) setClickedButtonTitle:(id)");
}

-(id) clickedButtonTitle {
	%orig;
	NSLog(@"-(id) clickedButtonTitle");
}

-(id) clickedButtonColor {
	%orig;
	NSLog(@"-(id) clickedButtonColor");
}

-(void) setActionItemColor:(id) {
	%orig;
	NSLog(@"-(void) setActionItemColor:(id)");
}

-(id) actionItemColor {
	%orig;
	NSLog(@"-(id) actionItemColor");
}

-(void) setOmitDate:(bool) {
	%orig;
	NSLog(@"-(void) setOmitDate:(bool)");
}

-(bool) dismissOnClick {
	%orig;
	NSLog(@"-(bool) dismissOnClick");
}

-(void) setDismissOnClick:(bool) {
	%orig;
	NSLog(@"-(void) setDismissOnClick:(bool)");
}

-(id) playImageView {
	%orig;
	NSLog(@"-(id) playImageView");
}

-(id) inboxBackgroundView {
	%orig;
	NSLog(@"-(id) inboxBackgroundView");
}

-(bool) showsPlayButton {
	%orig;
	NSLog(@"-(bool) showsPlayButton");
}

-(void) updateWithNotification:(id) {
	%orig;
	NSLog(@"-(void) updateWithNotification:(id)");
}

-(void) setFullImageView:(id) {
	%orig;
	NSLog(@"-(void) setFullImageView:(id)");
}

-(void) setInfoImageView:(id) {
	%orig;
	NSLog(@"-(void) setInfoImageView:(id)");
}

-(void) setEventDateLabel:(id) {
	%orig;
	NSLog(@"-(void) setEventDateLabel:(id)");
}

-(void) setInboxBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setInboxBackgroundView:(id)");
}

-(void) setPlayImageView:(id) {
	%orig;
	NSLog(@"-(void) setPlayImageView:(id)");
}

-(void) setTicketBackground:(id) {
	%orig;
	NSLog(@"-(void) setTicketBackground:(id)");
}

-(void) prepareForGenericNotificationCell {
	%orig;
	NSLog(@"-(void) prepareForGenericNotificationCell");
}

-(void) prepareForSongKickNotificationCell {
	%orig;
	NSLog(@"-(void) prepareForSongKickNotificationCell");
}

-(void) prepareForTicketFlyNotificationCell {
	%orig;
	NSLog(@"-(void) prepareForTicketFlyNotificationCell");
}

-(void) updateTicketFlyCellWithNotification:(id) {
	%orig;
	NSLog(@"-(void) updateTicketFlyCellWithNotification:(id)");
}

-(id) ticketFlyInfoImage {
	%orig;
	NSLog(@"-(id) ticketFlyInfoImage");
}

-(id) ticketFlyVenueLabel {
	%orig;
	NSLog(@"-(id) ticketFlyVenueLabel");
}

-(id) ticketFlyFullImage {
	%orig;
	NSLog(@"-(id) ticketFlyFullImage");
}

-(id) htmlStringForNotificationTextWithNotification:(id) {
	%orig;
	NSLog(@"-(id) htmlStringForNotificationTextWithNotification:(id)");
}

-(id) textContentLabel {
	%orig;
	NSLog(@"-(id) textContentLabel");
}

-(void) setUpActionButtonWithNotification:(id) {
	%orig;
	NSLog(@"-(void) setUpActionButtonWithNotification:(id)");
}

-(void) setTextContentLabel:(id) {
	%orig;
	NSLog(@"-(void) setTextContentLabel:(id)");
}

-(void) setTicketFlyFullImage:(id) {
	%orig;
	NSLog(@"-(void) setTicketFlyFullImage:(id)");
}

-(void) setTicketFlyVenueLabel:(id) {
	%orig;
	NSLog(@"-(void) setTicketFlyVenueLabel:(id)");
}

-(void) setTicketFlyInfoImage:(id) {
	%orig;
	NSLog(@"-(void) setTicketFlyInfoImage:(id)");
}

-(bool) heightCalculated {
	%orig;
	NSLog(@"-(bool) heightCalculated");
}

-(void) setHeightCalculated:(bool) {
	%orig;
	NSLog(@"-(void) setHeightCalculated:(bool)");
}

-(void) setSeen:(bool) {
	%orig;
	NSLog(@"-(void) setSeen:(bool)");
}

-(id) captionLabel {
	%orig;
	NSLog(@"-(id) captionLabel");
}

-(void) setCaptionLabel:(id) {
	%orig;
	NSLog(@"-(void) setCaptionLabel:(id)");
}

-(id) actionButton {
	%orig;
	NSLog(@"-(id) actionButton");
}

-(void) setActionButton:(id) {
	%orig;
	NSLog(@"-(void) setActionButton:(id)");
}

-(bool) actionable {
	%orig;
	NSLog(@"-(bool) actionable");
}

-(void) setTimeLabel:(id) {
	%orig;
	NSLog(@"-(void) setTimeLabel:(id)");
}

-(id) timeLabel {
	%orig;
	NSLog(@"-(id) timeLabel");
}

-(void) setActionable:(bool) {
	%orig;
	NSLog(@"-(void) setActionable:(bool)");
}

-(bool) seen {
	%orig;
	NSLog(@"-(bool) seen");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(id) titleLabel {
	%orig;
	NSLog(@"-(id) titleLabel");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) setTitleLabel:(id) {
	%orig;
	NSLog(@"-(void) setTitleLabel:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) iconImageView {
	%orig;
	NSLog(@"-(id) iconImageView");
}

-(void) setIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setIconImageView:(id)");
}

-(id) line {
	%orig;
	NSLog(@"-(id) line");
}

-(void) setLine:(id) {
	%orig;
	NSLog(@"-(void) setLine:(id)");
}

%end

%hook PMInboxPandoraNotificationCell

+(id) cellIdentifier {
	%orig;
	NSLog(@"+(id) cellIdentifier");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMInboxUnhandledMessageTypeCell

+(id) cellIdentifier {
	%orig;
	NSLog(@"+(id) cellIdentifier");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMInboxWelcomeNotificationCell

+(id) cellIdentifier {
	%orig;
	NSLog(@"+(id) cellIdentifier");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMInboxNagNotificationCell

+(id) cellIdentifier {
	%orig;
	NSLog(@"+(id) cellIdentifier");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMEnvironmentCell

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMArtistAudioMessageDetailsCell

-(id) detailTextField {
	%orig;
	NSLog(@"-(id) detailTextField");
}

-(void) updateWithViewModel:(id) {
	%orig;
	NSLog(@"-(void) updateWithViewModel:(id)");
}

-(void) setDetailTextField:(id) {
	%orig;
	NSLog(@"-(void) setDetailTextField:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMSwitchTableViewCell

+(id) cellForTableView:(id) label:(id) value:(bool) indexPath:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id) label:(id) value:(bool) indexPath:(id) delegate:(id)");
}

-(void) settingSwitchChanged {
	%orig;
	NSLog(@"-(void) settingSwitchChanged");
}

-(void) setASwitch:(id) {
	%orig;
	NSLog(@"-(void) setASwitch:(id)");
}

-(id) aSwitch {
	%orig;
	NSLog(@"-(id) aSwitch");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) indexPath {
	%orig;
	NSLog(@"-(id) indexPath");
}

-(void) setIndexPath:(id) {
	%orig;
	NSLog(@"-(void) setIndexPath:(id)");
}

%end

%hook PMTableViewCell

+(id) cellForTableView:(id) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id)");
}

+(double) rowHeight {
	%orig;
	NSLog(@"+(double) rowHeight");
}

-(void) setupDivider {
	%orig;
	NSLog(@"-(void) setupDivider");
}

-(void) fontDidResize:(id) {
	%orig;
	NSLog(@"-(void) fontDidResize:(id)");
}

-(void) setupLabelTextColors {
	%orig;
	NSLog(@"-(void) setupLabelTextColors");
}

-(void) hideSeparator {
	%orig;
	NSLog(@"-(void) hideSeparator");
}

-(void) setStretchSeparatorToLeftEdgeOfCell:(bool) {
	%orig;
	NSLog(@"-(void) setStretchSeparatorToLeftEdgeOfCell:(bool)");
}

-(void) updateFontStyleAndSize {
	%orig;
	NSLog(@"-(void) updateFontStyleAndSize");
}

-(void) setBoldTextLabel:(bool) {
	%orig;
	NSLog(@"-(void) setBoldTextLabel:(bool)");
}

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(void) setUseCustomLeftMargin:(bool) {
	%orig;
	NSLog(@"-(void) setUseCustomLeftMargin:(bool)");
}

-(void) setUseCustomRightMargin:(bool) {
	%orig;
	NSLog(@"-(void) setUseCustomRightMargin:(bool)");
}

-(bool) useCustomLeftMargin {
	%orig;
	NSLog(@"-(bool) useCustomLeftMargin");
}

-(bool) useCustomRightMargin {
	%orig;
	NSLog(@"-(bool) useCustomRightMargin");
}

-(void) setHighlightedMainTextColor:(id) {
	%orig;
	NSLog(@"-(void) setHighlightedMainTextColor:(id)");
}

-(void) setMainTextColor:(id) {
	%orig;
	NSLog(@"-(void) setMainTextColor:(id)");
}

-(void) setTextLabelXPositon:(double) {
	%orig;
	NSLog(@"-(void) setTextLabelXPositon:(double)");
}

-(double) textLabelXPositon {
	%orig;
	NSLog(@"-(double) textLabelXPositon");
}

-(bool) stretchSeparatorToLeftEdgeOfCell {
	%orig;
	NSLog(@"-(bool) stretchSeparatorToLeftEdgeOfCell");
}

-(bool) boldTextLabel {
	%orig;
	NSLog(@"-(bool) boldTextLabel");
}

-(id) mainTextColor {
	%orig;
	NSLog(@"-(id) mainTextColor");
}

-(id) highlightedMainTextColor {
	%orig;
	NSLog(@"-(id) highlightedMainTextColor");
}

-(id) highlightedDetailTextColor {
	%orig;
	NSLog(@"-(id) highlightedDetailTextColor");
}

-(void) setHighlightedDetailTextColor:(id) {
	%orig;
	NSLog(@"-(void) setHighlightedDetailTextColor:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) showSeparator {
	%orig;
	NSLog(@"-(void) showSeparator");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(id) detailTextColor {
	%orig;
	NSLog(@"-(id) detailTextColor");
}

-(void) setDetailTextColor:(id) {
	%orig;
	NSLog(@"-(void) setDetailTextColor:(id)");
}

-(double) leftMargin {
	%orig;
	NSLog(@"-(double) leftMargin");
}

-(void) setLeftMargin:(double) {
	%orig;
	NSLog(@"-(void) setLeftMargin:(double)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) setRightMargin:(double) {
	%orig;
	NSLog(@"-(void) setRightMargin:(double)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(double) rightMargin {
	%orig;
	NSLog(@"-(double) rightMargin");
}

%end

%hook PMAddVarietyTableCell

+(id) cellForTable:(id) station:(id) {
	%orig;
	NSLog(@"+(id) cellForTable:(id) station:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMEditStationDescriptionCell

+(double) heightToFitDescription:(id) limitToWidth:(double) {
	%orig;
	NSLog(@"+(double) heightToFitDescription:(id) limitToWidth:(double)");
}

+(id) stationDescriptionTextViewColor {
	%orig;
	NSLog(@"+(id) stationDescriptionTextViewColor");
}

+(id) descriptionFont {
	%orig;
	NSLog(@"+(id) descriptionFont");
}

-(void) setCustomLineFragmentPadding:(double) {
	%orig;
	NSLog(@"-(void) setCustomLineFragmentPadding:(double)");
}

-(void) setUseCustomLineFragmentPadding:(bool) {
	%orig;
	NSLog(@"-(void) setUseCustomLineFragmentPadding:(bool)");
}

-(bool) useCustomLineFragmentPadding {
	%orig;
	NSLog(@"-(bool) useCustomLineFragmentPadding");
}

-(double) customLineFragmentPadding {
	%orig;
	NSLog(@"-(double) customLineFragmentPadding");
}

-(double) defaultLineFragmentPadding {
	%orig;
	NSLog(@"-(double) defaultLineFragmentPadding");
}

-(void) setDefaultLineFragmentPadding:(double) {
	%orig;
	NSLog(@"-(void) setDefaultLineFragmentPadding:(double)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) updateTextView {
	%orig;
	NSLog(@"-(void) updateTextView");
}

-(id) descriptionTextView {
	%orig;
	NSLog(@"-(id) descriptionTextView");
}

-(void) setDescriptionTextView:(id) {
	%orig;
	NSLog(@"-(void) setDescriptionTextView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

%end

%hook PMCheckmarkTableViewCell

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(void) setIsChecked:(bool) {
	%orig;
	NSLog(@"-(void) setIsChecked:(bool)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isAccessibilityElement {
	%orig;
	NSLog(@"-(bool) isAccessibilityElement");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

%end

%hook PMShuffleTableViewCell

+(id) cellForShuffleTableViewCell:(id) station:(id) {
	%orig;
	NSLog(@"+(id) cellForShuffleTableViewCell:(id) station:(id)");
}

-(void) fontDidResize:(id) {
	%orig;
	NSLog(@"-(void) fontDidResize:(id)");
}

-(void) setupScrollViewAndContent {
	%orig;
	NSLog(@"-(void) setupScrollViewAndContent");
}

-(id) stationNameLabel {
	%orig;
	NSLog(@"-(id) stationNameLabel");
}

-(id) stationArtImageView {
	%orig;
	NSLog(@"-(id) stationArtImageView");
}

-(void) hideBottomSeparator {
	%orig;
	NSLog(@"-(void) hideBottomSeparator");
}

-(void) showBottomSeparator {
	%orig;
	NSLog(@"-(void) showBottomSeparator");
}

-(void) updateFontStyleAndSize {
	%orig;
	NSLog(@"-(void) updateFontStyleAndSize");
}

-(void) rebuildAccessibilityElements {
	%orig;
	NSLog(@"-(void) rebuildAccessibilityElements");
}

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(void) setOverrideActiveStationSelection:(bool) {
	%orig;
	NSLog(@"-(void) setOverrideActiveStationSelection:(bool)");
}

-(bool) isScrollViewOpen {
	%orig;
	NSLog(@"-(bool) isScrollViewOpen");
}

-(id) innerScrollViewContainerView {
	%orig;
	NSLog(@"-(id) innerScrollViewContainerView");
}

-(void) setInnerScrollViewContainerView:(id) {
	%orig;
	NSLog(@"-(void) setInnerScrollViewContainerView:(id)");
}

-(void) didRevealRightButtonsOnOtherCells:(id) {
	%orig;
	NSLog(@"-(void) didRevealRightButtonsOnOtherCells:(id)");
}

-(void) addLeftButtonsIfScrollViewOpen {
	%orig;
	NSLog(@"-(void) addLeftButtonsIfScrollViewOpen");
}

-(void) didEndRevealingRightButtons {
	%orig;
	NSLog(@"-(void) didEndRevealingRightButtons");
}

-(bool) overrideActiveStationSelection {
	%orig;
	NSLog(@"-(bool) overrideActiveStationSelection");
}

-(void) markSelected {
	%orig;
	NSLog(@"-(void) markSelected");
}

-(void) markUnselected {
	%orig;
	NSLog(@"-(void) markUnselected");
}

-(id) shuffleIcon {
	%orig;
	NSLog(@"-(id) shuffleIcon");
}

-(void) setBackgroundColorTo:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColorTo:(id)");
}

-(void) didSingleTap:(id) {
	%orig;
	NSLog(@"-(void) didSingleTap:(id)");
}

-(bool) isShowingButtons {
	%orig;
	NSLog(@"-(bool) isShowingButtons");
}

-(void) setupEditButton {
	%orig;
	NSLog(@"-(void) setupEditButton");
}

-(void) updateScrollViewState {
	%orig;
	NSLog(@"-(void) updateScrollViewState");
}

-(void) didTapEditButton {
	%orig;
	NSLog(@"-(void) didTapEditButton");
}

-(void) showNowPlayingTrackImageAnimated:(bool) {
	%orig;
	NSLog(@"-(void) showNowPlayingTrackImageAnimated:(bool)");
}

-(bool) isShowingNowPlayingTrackImage {
	%orig;
	NSLog(@"-(bool) isShowingNowPlayingTrackImage");
}

-(void) setShuffleIcon:(id) {
	%orig;
	NSLog(@"-(void) setShuffleIcon:(id)");
}

-(id) station {
	%orig;
	NSLog(@"-(id) station");
}

-(void) setStation:(id) {
	%orig;
	NSLog(@"-(void) setStation:(id)");
}

-(id) editButton {
	%orig;
	NSLog(@"-(id) editButton");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(void) setEditButton:(id) {
	%orig;
	NSLog(@"-(void) setEditButton:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

%end

%hook PMEditStationNameCell

+(id) nameFieldTextColor {
	%orig;
	NSLog(@"+(id) nameFieldTextColor");
}

+(id) stationDescriptionTextViewColor {
	%orig;
	NSLog(@"+(id) stationDescriptionTextViewColor");
}

-(void) updateFieldFrame {
	%orig;
	NSLog(@"-(void) updateFieldFrame");
}

-(void) updateButtonFrame {
	%orig;
	NSLog(@"-(void) updateButtonFrame");
}

-(id) editStationNameDescriptionButton {
	%orig;
	NSLog(@"-(id) editStationNameDescriptionButton");
}

-(void) editStationNameDescriptionButtonTapped:(id) {
	%orig;
	NSLog(@"-(void) editStationNameDescriptionButtonTapped:(id)");
}

-(void) setEditStationNameDescriptionButton:(id) {
	%orig;
	NSLog(@"-(void) setEditStationNameDescriptionButton:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(bool) showEditButton {
	%orig;
	NSLog(@"-(bool) showEditButton");
}

-(void) setShowEditButton:(bool) {
	%orig;
	NSLog(@"-(void) setShowEditButton:(bool)");
}

-(void) setNameTextField:(id) {
	%orig;
	NSLog(@"-(void) setNameTextField:(id)");
}

-(id) nameTextField {
	%orig;
	NSLog(@"-(id) nameTextField");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMMoreOptionsCell

-(void) hideSeparator {
	%orig;
	NSLog(@"-(void) hideSeparator");
}

-(void) setupSeparator {
	%orig;
	NSLog(@"-(void) setupSeparator");
}

-(void) handleSelectionState {
	%orig;
	NSLog(@"-(void) handleSelectionState");
}

-(void) setSelectedIconImageName:(id) {
	%orig;
	NSLog(@"-(void) setSelectedIconImageName:(id)");
}

-(void) setIconImageName:(id) selectedIconImageName:(id) {
	%orig;
	NSLog(@"-(void) setIconImageName:(id) selectedIconImageName:(id)");
}

-(id) selectedIconImageName {
	%orig;
	NSLog(@"-(id) selectedIconImageName");
}

-(void) showSeparator {
	%orig;
	NSLog(@"-(void) showSeparator");
}

-(id) iconImageName {
	%orig;
	NSLog(@"-(id) iconImageName");
}

-(void) setIconImageName:(id) {
	%orig;
	NSLog(@"-(void) setIconImageName:(id)");
}

-(void) setupCell {
	%orig;
	NSLog(@"-(void) setupCell");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

-(void) setSeparator:(id) {
	%orig;
	NSLog(@"-(void) setSeparator:(id)");
}

-(id) separator {
	%orig;
	NSLog(@"-(id) separator");
}

%end

%hook PMShuffleEditorCell

+(id) cellFortableView:(id) forShuffleItem:(id) {
	%orig;
	NSLog(@"+(id) cellFortableView:(id) forShuffleItem:(id)");
}

-(void) setShuffleItem:(id) {
	%orig;
	NSLog(@"-(void) setShuffleItem:(id)");
}

-(void) setSelectedForQuickMix:(bool) enabled:(bool) {
	%orig;
	NSLog(@"-(void) setSelectedForQuickMix:(bool) enabled:(bool)");
}

-(void) updateFontStyleAndSize {
	%orig;
	NSLog(@"-(void) updateFontStyleAndSize");
}

-(id) shuffleItem {
	%orig;
	NSLog(@"-(id) shuffleItem");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

%end

%hook PMGroupedTableViewCell

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

%end

%hook PMCastDeviceDetailCell

+(double) rowHeight {
	%orig;
	NSLog(@"+(double) rowHeight");
}

-(id) artistNameLabel {
	%orig;
	NSLog(@"-(id) artistNameLabel");
}

-(void) setArtistNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setArtistNameLabel:(id)");
}

-(void) setUIForActiveTrack {
	%orig;
	NSLog(@"-(void) setUIForActiveTrack");
}

-(void) setPlayPauseButtonImage {
	%orig;
	NSLog(@"-(void) setPlayPauseButtonImage");
}

-(void) stopObservingRadio {
	%orig;
	NSLog(@"-(void) stopObservingRadio");
}

-(id) songNameLabel {
	%orig;
	NSLog(@"-(id) songNameLabel");
}

-(id) disconnectButton {
	%orig;
	NSLog(@"-(id) disconnectButton");
}

-(void) castVolumeUpdated:(id) {
	%orig;
	NSLog(@"-(void) castVolumeUpdated:(id)");
}

-(void) nowPlayingButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) nowPlayingButtonPressed:(id)");
}

-(void) disconnectButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) disconnectButtonPressed:(id)");
}

-(void) playPauseButtonPressed:(id) {
	%orig;
	NSLog(@"-(void) playPauseButtonPressed:(id)");
}

-(void) setDisconnectButton:(id) {
	%orig;
	NSLog(@"-(void) setDisconnectButton:(id)");
}

-(void) setSongNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setSongNameLabel:(id)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(void) activeTrackModelDidChange:(id) isNewTrack:(bool) {
	%orig;
	NSLog(@"-(void) activeTrackModelDidChange:(id) isNewTrack:(bool)");
}

-(void) musicSessionPlayStateDidChangeTo:(bool) {
	%orig;
	NSLog(@"-(void) musicSessionPlayStateDidChangeTo:(bool)");
}

-(void) setVolumeSlider:(id) {
	%orig;
	NSLog(@"-(void) setVolumeSlider:(id)");
}

-(id) volumeSlider {
	%orig;
	NSLog(@"-(id) volumeSlider");
}

-(id) artworkImageView {
	%orig;
	NSLog(@"-(id) artworkImageView");
}

-(void) volumeSliderValueChanged:(id) {
	%orig;
	NSLog(@"-(void) volumeSliderValueChanged:(id)");
}

-(void) setActivityIndicatorView:(id) {
	%orig;
	NSLog(@"-(void) setActivityIndicatorView:(id)");
}

-(id) activityIndicatorView {
	%orig;
	NSLog(@"-(id) activityIndicatorView");
}

-(id) loadingLabel {
	%orig;
	NSLog(@"-(id) loadingLabel");
}

-(id) device {
	%orig;
	NSLog(@"-(id) device");
}

-(void) setDevice:(id) {
	%orig;
	NSLog(@"-(void) setDevice:(id)");
}

-(void) setLoadingLabel:(id) {
	%orig;
	NSLog(@"-(void) setLoadingLabel:(id)");
}

-(id) playPauseButton {
	%orig;
	NSLog(@"-(id) playPauseButton");
}

-(void) setPlayPauseButton:(id) {
	%orig;
	NSLog(@"-(void) setPlayPauseButton:(id)");
}

-(id) infoView {
	%orig;
	NSLog(@"-(id) infoView");
}

-(void) setInfoView:(id) {
	%orig;
	NSLog(@"-(void) setInfoView:(id)");
}

-(id) volumeContainerView {
	%orig;
	NSLog(@"-(id) volumeContainerView");
}

-(void) setVolumeContainerView:(id) {
	%orig;
	NSLog(@"-(void) setVolumeContainerView:(id)");
}

-(void) setArtworkImageView:(id) {
	%orig;
	NSLog(@"-(void) setArtworkImageView:(id)");
}

-(id) nowPlayingButton {
	%orig;
	NSLog(@"-(id) nowPlayingButton");
}

-(void) setNowPlayingButton:(id) {
	%orig;
	NSLog(@"-(void) setNowPlayingButton:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) removeFromSuperview {
	%orig;
	NSLog(@"-(void) removeFromSuperview");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) willMoveToSuperview:(id) {
	%orig;
	NSLog(@"-(void) willMoveToSuperview:(id)");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) setVolume:(float) {
	%orig;
	NSLog(@"-(void) setVolume:(float)");
}

-(float) volume {
	%orig;
	NSLog(@"-(float) volume");
}

%end

%hook PMImageBaseTableViewCell

+(id) cellForTableView:(id) withStyle:(long long) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id) withStyle:(long long)");
}

+(id) cellForTableView:(id) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id)");
}

+(double) rowHeight {
	%orig;
	NSLog(@"+(double) rowHeight");
}

-(void) setupDivider {
	%orig;
	NSLog(@"-(void) setupDivider");
}

-(void) fontDidResize:(id) {
	%orig;
	NSLog(@"-(void) fontDidResize:(id)");
}

-(void) setupLabelTextColors {
	%orig;
	NSLog(@"-(void) setupLabelTextColors");
}

-(void) setupScrollViewAndContent {
	%orig;
	NSLog(@"-(void) setupScrollViewAndContent");
}

-(void) rebuildBaseAccessibilityElementsForArtistName:(id) songName:(id) artistLabel:(id) songLabel:(id) identifier:(id) {
	%orig;
	NSLog(@"-(void) rebuildBaseAccessibilityElementsForArtistName:(id) songName:(id) artistLabel:(id) songLabel:(id) identifier:(id)");
}

-(void) rebuildBaseAccessibilityElementsForArtistName:(id) songName:(id) artistLabel:(id) songLabel:(id) hint:(id) primaryIdentifier:(id) secondaryIdentifier:(id) {
	%orig;
	NSLog(@"-(void) rebuildBaseAccessibilityElementsForArtistName:(id) songName:(id) artistLabel:(id) songLabel:(id) hint:(id) primaryIdentifier:(id) secondaryIdentifier:(id)");
}

-(id) remoteImageView {
	%orig;
	NSLog(@"-(id) remoteImageView");
}

-(id) cellLabel {
	%orig;
	NSLog(@"-(id) cellLabel");
}

-(id) cellDetailedLabel {
	%orig;
	NSLog(@"-(id) cellDetailedLabel");
}

-(void) setAllowDeletion:(bool) {
	%orig;
	NSLog(@"-(void) setAllowDeletion:(bool)");
}

-(void) setStopEventPropagation:(bool) {
	%orig;
	NSLog(@"-(void) setStopEventPropagation:(bool)");
}

-(void) setImageBaseTableViewDelegate:(id) {
	%orig;
	NSLog(@"-(void) setImageBaseTableViewDelegate:(id)");
}

-(void) hideBottomSeparator {
	%orig;
	NSLog(@"-(void) hideBottomSeparator");
}

-(void) showBottomSeparator {
	%orig;
	NSLog(@"-(void) showBottomSeparator");
}

-(bool) isScrollViewOpen {
	%orig;
	NSLog(@"-(bool) isScrollViewOpen");
}

-(void) setupImageView {
	%orig;
	NSLog(@"-(void) setupImageView");
}

-(id) innerScrollViewContainerView {
	%orig;
	NSLog(@"-(id) innerScrollViewContainerView");
}

-(void) setupRemoteImageDefaultSize {
	%orig;
	NSLog(@"-(void) setupRemoteImageDefaultSize");
}

-(void) initializeViewAndSubviews {
	%orig;
	NSLog(@"-(void) initializeViewAndSubviews");
}

-(void) setupLabel {
	%orig;
	NSLog(@"-(void) setupLabel");
}

-(void) setupDetailedLabel {
	%orig;
	NSLog(@"-(void) setupDetailedLabel");
}

-(bool) allowDeletion {
	%orig;
	NSLog(@"-(bool) allowDeletion");
}

-(bool) stopEventPropagation {
	%orig;
	NSLog(@"-(bool) stopEventPropagation");
}

-(void) didTapDeleteButton:(id) {
	%orig;
	NSLog(@"-(void) didTapDeleteButton:(id)");
}

-(id) imageBaseTableViewDelegate {
	%orig;
	NSLog(@"-(id) imageBaseTableViewDelegate");
}

-(void) setInnerScrollViewContainerView:(id) {
	%orig;
	NSLog(@"-(void) setInnerScrollViewContainerView:(id)");
}

-(void) didRevealRightButtonsOnOtherCells:(id) {
	%orig;
	NSLog(@"-(void) didRevealRightButtonsOnOtherCells:(id)");
}

-(void) setCellLabel:(id) {
	%orig;
	NSLog(@"-(void) setCellLabel:(id)");
}

-(void) setCellDetailedLabel:(id) {
	%orig;
	NSLog(@"-(void) setCellDetailedLabel:(id)");
}

-(void) setRemoteImageView:(id) {
	%orig;
	NSLog(@"-(void) setRemoteImageView:(id)");
}

-(double) revealContentWidth {
	%orig;
	NSLog(@"-(double) revealContentWidth");
}

-(void) addLeftButtonsIfScrollViewOpen {
	%orig;
	NSLog(@"-(void) addLeftButtonsIfScrollViewOpen");
}

-(void) didEndRevealingRightButtons {
	%orig;
	NSLog(@"-(void) didEndRevealingRightButtons");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) setupDeleteButton {
	%orig;
	NSLog(@"-(void) setupDeleteButton");
}

-(id) deleteButton {
	%orig;
	NSLog(@"-(id) deleteButton");
}

-(void) setDeleteButton:(id) {
	%orig;
	NSLog(@"-(void) setDeleteButton:(id)");
}

-(void) setTopSeparator:(id) {
	%orig;
	NSLog(@"-(void) setTopSeparator:(id)");
}

-(id) topSeparator {
	%orig;
	NSLog(@"-(id) topSeparator");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(void) showTopSeparator {
	%orig;
	NSLog(@"-(void) showTopSeparator");
}

-(void) hideTopSeparator {
	%orig;
	NSLog(@"-(void) hideTopSeparator");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setStyle:(long long) {
	%orig;
	NSLog(@"-(void) setStyle:(long long)");
}

-(long long) style {
	%orig;
	NSLog(@"-(long long) style");
}

-(void) setContext:(id) {
	%orig;
	NSLog(@"-(void) setContext:(id)");
}

-(id) context {
	%orig;
	NSLog(@"-(id) context");
}

-(void) scrollViewDidScroll:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidScroll:(id)");
}

-(void) scrollViewWillBeginDragging:(id) {
	%orig;
	NSLog(@"-(void) scrollViewWillBeginDragging:(id)");
}

-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDragging:(id) willDecelerate:(bool)");
}

-(void) scrollViewDidEndDecelerating:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndDecelerating:(id)");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(id) initWithStyle:(long long) reuseIdentifier:(id) {
	%orig;
	NSLog(@"-(id) initWithStyle:(long long) reuseIdentifier:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) scrollView {
	%orig;
	NSLog(@"-(id) scrollView");
}

-(void) setScrollView:(id) {
	%orig;
	NSLog(@"-(void) setScrollView:(id)");
}

%end

%hook PMStackedImageTableViewCell

+(CGSize) defaultImageSize {
	%orig;
	NSLog(@"+(CGSize) defaultImageSize");
}

+(id) cellForTableView:(id) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id)");
}

-(void) setupImageView {
	%orig;
	NSLog(@"-(void) setupImageView");
}

-(id) stackedImageView {
	%orig;
	NSLog(@"-(id) stackedImageView");
}

-(void) setStackedImageView:(id) {
	%orig;
	NSLog(@"-(void) setStackedImageView:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMGenreStationViewCell

+(id) cellForTableView:(id) genreStation:(id) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id) genreStation:(id)");
}

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(void) setGenreStation:(id) {
	%orig;
	NSLog(@"-(void) setGenreStation:(id)");
}

-(id) genreStation {
	%orig;
	NSLog(@"-(id) genreStation");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isAccessibilityElement {
	%orig;
	NSLog(@"-(bool) isAccessibilityElement");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

%end

%hook PMAddVarietyActionCell

-(void) addVarietyActionCellSetup {
	%orig;
	NSLog(@"-(void) addVarietyActionCellSetup");
}

-(id) addIconImageView {
	%orig;
	NSLog(@"-(id) addIconImageView");
}

-(void) updateComponentPosition {
	%orig;
	NSLog(@"-(void) updateComponentPosition");
}

-(void) setTopLine:(id) {
	%orig;
	NSLog(@"-(void) setTopLine:(id)");
}

-(void) setBottomLine:(id) {
	%orig;
	NSLog(@"-(void) setBottomLine:(id)");
}

-(id) topLine {
	%orig;
	NSLog(@"-(id) topLine");
}

-(id) bottomLine {
	%orig;
	NSLog(@"-(id) bottomLine");
}

-(void) setAddIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setAddIconImageView:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMStationTrackCell

-(void) rebuildAccessibilityElementsForArtistName:(id) songName:(id) songRating:(long long) {
	%orig;
	NSLog(@"-(void) rebuildAccessibilityElementsForArtistName:(id) songName:(id) songRating:(long long)");
}

-(id) trackThumbHistory {
	%orig;
	NSLog(@"-(id) trackThumbHistory");
}

-(void) setTrackThumbHistory:(id) {
	%orig;
	NSLog(@"-(void) setTrackThumbHistory:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMBaseRecommendationViewCell

-(void) setupBaseRecommentation {
	%orig;
	NSLog(@"-(void) setupBaseRecommentation");
}

-(void) showAsUnselected {
	%orig;
	NSLog(@"-(void) showAsUnselected");
}

-(void) showAsSelected {
	%orig;
	NSLog(@"-(void) showAsSelected");
}

-(id) moreOptionsButton {
	%orig;
	NSLog(@"-(id) moreOptionsButton");
}

-(void) setRecommendation:(id) {
	%orig;
	NSLog(@"-(void) setRecommendation:(id)");
}

-(void) didDismissStationOnPMRecommendationCellMoreOptionsController:(id) {
	%orig;
	NSLog(@"-(void) didDismissStationOnPMRecommendationCellMoreOptionsController:(id)");
}

-(void) didCreateStationOnPMRecommendationCellMoreOptionsController:(id) {
	%orig;
	NSLog(@"-(void) didCreateStationOnPMRecommendationCellMoreOptionsController:(id)");
}

-(void) setAllowDeletion:(bool) {
	%orig;
	NSLog(@"-(void) setAllowDeletion:(bool)");
}

-(void) popoverManager:(id) didDismissViewController:(id) {
	%orig;
	NSLog(@"-(void) popoverManager:(id) didDismissViewController:(id)");
}

-(id) accessibleElements {
	%orig;
	NSLog(@"-(id) accessibleElements");
}

-(void) setAccessibleElements:(id) {
	%orig;
	NSLog(@"-(void) setAccessibleElements:(id)");
}

-(void) setMoreOptionsButton:(id) {
	%orig;
	NSLog(@"-(void) setMoreOptionsButton:(id)");
}

-(void) didTapDeleteButton:(id) {
	%orig;
	NSLog(@"-(void) didTapDeleteButton:(id)");
}

-(void) didSingleTap:(id) {
	%orig;
	NSLog(@"-(void) didSingleTap:(id)");
}

-(id) showMoreOptionButtonWithDelegate:(id) {
	%orig;
	NSLog(@"-(id) showMoreOptionButtonWithDelegate:(id)");
}

-(void) clearMoreOptionsMenu {
	%orig;
	NSLog(@"-(void) clearMoreOptionsMenu");
}

-(id) customActionsForRecommendationStationCell {
	%orig;
	NSLog(@"-(id) customActionsForRecommendationStationCell");
}

-(void) setMoreOptionsMenuPopover:(id) {
	%orig;
	NSLog(@"-(void) setMoreOptionsMenuPopover:(id)");
}

-(void) showAsSelectedWithCustomBgColor:(id) {
	%orig;
	NSLog(@"-(void) showAsSelectedWithCustomBgColor:(id)");
}

-(id) moreOptionsMenuPopover {
	%orig;
	NSLog(@"-(id) moreOptionsMenuPopover");
}

-(bool) shouldAllowDismiss {
	%orig;
	NSLog(@"-(bool) shouldAllowDismiss");
}

-(void) setDisableLongPress:(bool) {
	%orig;
	NSLog(@"-(void) setDisableLongPress:(bool)");
}

-(bool) disableLongPress {
	%orig;
	NSLog(@"-(bool) disableLongPress");
}

-(void) setupDeleteButton {
	%orig;
	NSLog(@"-(void) setupDeleteButton");
}

-(id) recommendation {
	%orig;
	NSLog(@"-(id) recommendation");
}

-(void) setupGestures {
	%orig;
	NSLog(@"-(void) setupGestures");
}

-(void) setupAccessibility {
	%orig;
	NSLog(@"-(void) setupAccessibility");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(long long) accessibilityElementCount {
	%orig;
	NSLog(@"-(long long) accessibilityElementCount");
}

-(id) accessibilityElementAtIndex:(long long) {
	%orig;
	NSLog(@"-(id) accessibilityElementAtIndex:(long long)");
}

-(long long) indexOfAccessibilityElement:(id) {
	%orig;
	NSLog(@"-(long long) indexOfAccessibilityElement:(id)");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool) animated:(bool)");
}

-(void) setHighlighted:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool) animated:(bool)");
}

-(void) showMoreOptions {
	%orig;
	NSLog(@"-(void) showMoreOptions");
}

%end

%hook PMSmallRecommendationViewCell

+(id) classReuseIdentifier {
	%orig;
	NSLog(@"+(id) classReuseIdentifier");
}

+(id) cellForTableView:(id) recommendation:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id) recommendation:(id) delegate:(id)");
}

+(double) rowHeight {
	%orig;
	NSLog(@"+(double) rowHeight");
}

-(void) showAsUnselected {
	%orig;
	NSLog(@"-(void) showAsUnselected");
}

-(void) showAsSelected {
	%orig;
	NSLog(@"-(void) showAsSelected");
}

-(id) kvoController {
	%orig;
	NSLog(@"-(id) kvoController");
}

-(void) setKvoController:(id) {
	%orig;
	NSLog(@"-(void) setKvoController:(id)");
}

-(void) setupStationArtAccessibility {
	%orig;
	NSLog(@"-(void) setupStationArtAccessibility");
}

-(void) setupMoreOptionsButton {
	%orig;
	NSLog(@"-(void) setupMoreOptionsButton");
}

-(void) setUpKVOController {
	%orig;
	NSLog(@"-(void) setUpKVOController");
}

-(void) setupAccessibility {
	%orig;
	NSLog(@"-(void) setupAccessibility");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) reuseIdentifier {
	%orig;
	NSLog(@"-(id) reuseIdentifier");
}

%end

%hook PMLargeRecommendationViewCell

+(id) classReuseIdentifier {
	%orig;
	NSLog(@"+(id) classReuseIdentifier");
}

+(id) cellForTableView:(id) recommendation:(id) delegate:(id) {
	%orig;
	NSLog(@"+(id) cellForTableView:(id) recommendation:(id) delegate:(id)");
}

+(double) rowHeight {
	%orig;
	NSLog(@"+(double) rowHeight");
}

-(void) setupDivider {
	%orig;
	NSLog(@"-(void) setupDivider");
}

-(void) showAsUnselected {
	%orig;
	NSLog(@"-(void) showAsUnselected");
}

-(void) fontDidResize:(id) {
	%orig;
	NSLog(@"-(void) fontDidResize:(id)");
}

-(void) setupLabelTextColors {
	%orig;
	NSLog(@"-(void) setupLabelTextColors");
}

-(id) stationNameLabel {
	%orig;
	NSLog(@"-(id) stationNameLabel");
}

-(id) moreStationsLabel {
	%orig;
	NSLog(@"-(id) moreStationsLabel");
}

-(void) showAsSelected {
	%orig;
	NSLog(@"-(void) showAsSelected");
}

-(id) stationArtImageView {
	%orig;
	NSLog(@"-(id) stationArtImageView");
}

-(void) hideSeparator {
	%orig;
	NSLog(@"-(void) hideSeparator");
}

-(void) setStationArtImageView:(id) {
	%orig;
	NSLog(@"-(void) setStationArtImageView:(id)");
}

-(void) setStationNameLabel:(id) {
	%orig;
	NSLog(@"-(void) setStationNameLabel:(id)");
}

-(void) setMoreStationsLabel:(id) {
	%orig;
	NSLog(@"-(void) setMoreStationsLabel:(id)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) showSeparator {
	%orig;
	NSLog(@"-(void) showSeparator");
}

-(void) setBottomSeparator:(id) {
	%orig;
	NSLog(@"-(void) setBottomSeparator:(id)");
}

-(id) bottomSeparator {
	%orig;
	NSLog(@"-(id) bottomSeparator");
}

-(void) setupAccessibility {
	%orig;
	NSLog(@"-(void) setupAccessibility");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) reuseIdentifier {
	%orig;
	NSLog(@"-(id) reuseIdentifier");
}

%end

%hook FBSDKLikeControl

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(bool) isSoundEnabled {
	%orig;
	NSLog(@"-(bool) isSoundEnabled");
}

-(void) setSoundEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setSoundEnabled:(bool)");
}

-(void) _likeActionControllerDidDisableNotification:(id) {
	%orig;
	NSLog(@"-(void) _likeActionControllerDidDisableNotification:(id)");
}

-(void) _likeActionControllerDidUpdateNotification:(id) {
	%orig;
	NSLog(@"-(void) _likeActionControllerDidUpdateNotification:(id)");
}

-(void) _updateLikeBoxCaretPosition {
	%orig;
	NSLog(@"-(void) _updateLikeBoxCaretPosition");
}

-(FBSDKLikeControlLayout) _layoutWithBounds:(CGRect) subviewSizingBlock:(id) {
	%orig;
	NSLog(@"-(FBSDKLikeControlLayout) _layoutWithBounds:(CGRect) subviewSizingBlock:(id)");
}

-(void) _ensureLikeActionController {
	%orig;
	NSLog(@"-(void) _ensureLikeActionController");
}

-(id) _auxiliaryView {
	%orig;
	NSLog(@"-(id) _auxiliaryView");
}

-(unsigned long long) likeControlAuxiliaryPosition {
	%orig;
	NSLog(@"-(unsigned long long) likeControlAuxiliaryPosition");
}

-(unsigned long long) likeControlHorizontalAlignment {
	%orig;
	NSLog(@"-(unsigned long long) likeControlHorizontalAlignment");
}

-(unsigned long long) likeControlStyle {
	%orig;
	NSLog(@"-(unsigned long long) likeControlStyle");
}

-(void) _likeActionControllerDidUpdateWithAnimated:(bool) {
	%orig;
	NSLog(@"-(void) _likeActionControllerDidUpdateWithAnimated:(bool)");
}

-(double) _auxiliaryViewPadding {
	%orig;
	NSLog(@"-(double) _auxiliaryViewPadding");
}

-(void) setLikeControlAuxiliaryPosition:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLikeControlAuxiliaryPosition:(unsigned long long)");
}

-(void) setLikeControlHorizontalAlignment:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLikeControlHorizontalAlignment:(unsigned long long)");
}

-(void) setLikeControlStyle:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLikeControlStyle:(unsigned long long)");
}

-(id) analyticsParameters {
	%orig;
	NSLog(@"-(id) analyticsParameters");
}

-(void) _initializeContent {
	%orig;
	NSLog(@"-(void) _initializeContent");
}

-(void) setObjectID:(id) {
	%orig;
	NSLog(@"-(void) setObjectID:(id)");
}

-(id) objectID {
	%orig;
	NSLog(@"-(id) objectID");
}

-(void) _handleLikeButtonTap:(id) {
	%orig;
	NSLog(@"-(void) _handleLikeButtonTap:(id)");
}

-(unsigned long long) objectType {
	%orig;
	NSLog(@"-(unsigned long long) objectType");
}

-(void) setObjectType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setObjectType:(unsigned long long)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(void) setOpaque:(bool) {
	%orig;
	NSLog(@"-(void) setOpaque:(bool)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*) {
	%orig;
	NSLog(@"-(void) observeValueForKeyPath:(id) ofObject:(id) change:(id) context:(void*)");
}

-(void) _updateEnabled {
	%orig;
	NSLog(@"-(void) _updateEnabled");
}

-(void) setPreferredMaxLayoutWidth:(double) {
	%orig;
	NSLog(@"-(void) setPreferredMaxLayoutWidth:(double)");
}

-(void) setForegroundColor:(id) {
	%orig;
	NSLog(@"-(void) setForegroundColor:(id)");
}

-(id) foregroundColor {
	%orig;
	NSLog(@"-(id) foregroundColor");
}

-(double) preferredMaxLayoutWidth {
	%orig;
	NSLog(@"-(double) preferredMaxLayoutWidth");
}

%end

%hook PMThumbprintRadioStickyView

-(id) arcView {
	%orig;
	NSLog(@"-(id) arcView");
}

-(void) setArcView:(id) {
	%orig;
	NSLog(@"-(void) setArcView:(id)");
}

-(id) whiteBackgroundView {
	%orig;
	NSLog(@"-(id) whiteBackgroundView");
}

-(void) setWhiteBackgroundView:(id) {
	%orig;
	NSLog(@"-(void) setWhiteBackgroundView:(id)");
}

-(id) visualEffectViewContainer {
	%orig;
	NSLog(@"-(id) visualEffectViewContainer");
}

-(void) setVisualEffectViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setVisualEffectViewContainer:(id)");
}

-(id) pillViewContainer {
	%orig;
	NSLog(@"-(id) pillViewContainer");
}

-(void) setPillViewContainer:(id) {
	%orig;
	NSLog(@"-(void) setPillViewContainer:(id)");
}

-(id) mainBackgrounView {
	%orig;
	NSLog(@"-(id) mainBackgrounView");
}

-(void) setMainBackgrounView:(id) {
	%orig;
	NSLog(@"-(void) setMainBackgrounView:(id)");
}

-(void) updateTransitionPercentage:(float) {
	%orig;
	NSLog(@"-(void) updateTransitionPercentage:(float)");
}

-(void) shareButtonDidTap:(id) {
	%orig;
	NSLog(@"-(void) shareButtonDidTap:(id)");
}

-(void) setShareButton:(id) {
	%orig;
	NSLog(@"-(void) setShareButton:(id)");
}

-(id) shareButton {
	%orig;
	NSLog(@"-(id) shareButton");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) hitTest:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(id) hitTest:(CGPoint) withEvent:(id)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook OnDemandDownloadsOnlySwitchControl

-(void) onDownloadsOnlySwitchValueChanged:(id) {
	%orig;
	NSLog(@"-(void) onDownloadsOnlySwitchValueChanged:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

-(bool) isEnabled {
	%orig;
	NSLog(@"-(bool) isEnabled");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMMiniCoachMarkView

+(double) minimumHeight {
	%orig;
	NSLog(@"+(double) minimumHeight");
}

-(void) setMarkFocusHorizontalPosition:(double) {
	%orig;
	NSLog(@"-(void) setMarkFocusHorizontalPosition:(double)");
}

-(void) showMiniCoachMarkAccessibility {
	%orig;
	NSLog(@"-(void) showMiniCoachMarkAccessibility");
}

-(void) setMarkFocusEdge:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMarkFocusEdge:(unsigned long long)");
}

-(void) setContentWithDate:(id) contentType:(long long) {
	%orig;
	NSLog(@"-(void) setContentWithDate:(id) contentType:(long long)");
}

-(void) playPopUpAnimation {
	%orig;
	NSLog(@"-(void) playPopUpAnimation");
}

-(void) hideMiniCoachMarkAccessibility {
	%orig;
	NSLog(@"-(void) hideMiniCoachMarkAccessibility");
}

-(void) dismissAnimated {
	%orig;
	NSLog(@"-(void) dismissAnimated");
}

-(void) contentViewDidTap {
	%orig;
	NSLog(@"-(void) contentViewDidTap");
}

-(id) pointerLeadingConstraint {
	%orig;
	NSLog(@"-(id) pointerLeadingConstraint");
}

-(void) setPointerLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setPointerLeadingConstraint:(id)");
}

-(id) pointerBottomConstraint {
	%orig;
	NSLog(@"-(id) pointerBottomConstraint");
}

-(void) setPointerBottomConstraint:(id) {
	%orig;
	NSLog(@"-(void) setPointerBottomConstraint:(id)");
}

-(id) thumbHistoryCoachMarkView {
	%orig;
	NSLog(@"-(id) thumbHistoryCoachMarkView");
}

-(void) setThumbHistoryCoachMarkView:(id) {
	%orig;
	NSLog(@"-(void) setThumbHistoryCoachMarkView:(id)");
}

-(id) pointerImageView {
	%orig;
	NSLog(@"-(id) pointerImageView");
}

-(void) setPointerImageView:(id) {
	%orig;
	NSLog(@"-(void) setPointerImageView:(id)");
}

-(id) thumbHistoryLabel {
	%orig;
	NSLog(@"-(id) thumbHistoryLabel");
}

-(void) setThumbHistoryLabel:(id) {
	%orig;
	NSLog(@"-(void) setThumbHistoryLabel:(id)");
}

-(double) markFocusHorizontalPosition {
	%orig;
	NSLog(@"-(double) markFocusHorizontalPosition");
}

-(unsigned long long) markFocusEdge {
	%orig;
	NSLog(@"-(unsigned long long) markFocusEdge");
}

-(void) setLabelLeadingConstraint:(id) {
	%orig;
	NSLog(@"-(void) setLabelLeadingConstraint:(id)");
}

-(id) labelLeadingConstraint {
	%orig;
	NSLog(@"-(id) labelLeadingConstraint");
}

-(id) contentContainerView {
	%orig;
	NSLog(@"-(id) contentContainerView");
}

-(void) setContentContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContentContainerView:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) iconImageView {
	%orig;
	NSLog(@"-(id) iconImageView");
}

-(void) setIconImageView:(id) {
	%orig;
	NSLog(@"-(void) setIconImageView:(id)");
}

%end

%hook SegmentedControl

-(void) scrollViewDidEndScrollingAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollViewDidEndScrollingAnimation:(id)");
}

-(void) segmentPressed:(id) {
	%orig;
	NSLog(@"-(void) segmentPressed:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

%end

%hook PMOfflineSwitchControl

-(void) updateOfflineControlsWithSwitchOn:(bool) uiDefault:(bool) disabled:(bool) {
	%orig;
	NSLog(@"-(void) updateOfflineControlsWithSwitchOn:(bool) uiDefault:(bool) disabled:(bool)");
}

-(void) onOfflineSwitchValueChanged:(id) {
	%orig;
	NSLog(@"-(void) onOfflineSwitchValueChanged:(id)");
}

-(void) onDisabledSwitchTouchUpInside:(id) {
	%orig;
	NSLog(@"-(void) onDisabledSwitchTouchUpInside:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(void) setOn:(bool) {
	%orig;
	NSLog(@"-(void) setOn:(bool)");
}

-(bool) on {
	%orig;
	NSLog(@"-(bool) on");
}

%end

%hook PMPremiumTrackInfoDetailRoutingView

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook BubbleView

-(id) pointedToView {
	%orig;
	NSLog(@"-(id) pointedToView");
}

-(void) setPointedToView:(id) {
	%orig;
	NSLog(@"-(void) setPointedToView:(id)");
}

-(double) pointerMargin {
	%orig;
	NSLog(@"-(double) pointerMargin");
}

-(void) setPointerMargin:(double) {
	%orig;
	NSLog(@"-(void) setPointerMargin:(double)");
}

-(id) initWithId:(id) andAttributedText:(id) andTheme:(long long) andFontSize:(long long) {
	%orig;
	NSLog(@"-(id) initWithId:(id) andAttributedText:(id) andTheme:(long long) andFontSize:(long long)");
}

-(id) initWithId:(id) andText:(id) andTheme:(long long) andFontSize:(long long) {
	%orig;
	NSLog(@"-(id) initWithId:(id) andText:(id) andTheme:(long long) andFontSize:(long long)");
}

-(id) initWithId:(id) andContains:(id) {
	%orig;
	NSLog(@"-(id) initWithId:(id) andContains:(id)");
}

-(void) dismissAnimated {
	%orig;
	NSLog(@"-(void) dismissAnimated");
}

-(void) contentViewDidTap {
	%orig;
	NSLog(@"-(void) contentViewDidTap");
}

-(id) id {
	%orig;
	NSLog(@"-(id) id");
}

-(void) setId:(id) {
	%orig;
	NSLog(@"-(void) setId:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) updateConstraints {
	%orig;
	NSLog(@"-(void) updateConstraints");
}

-(id) containerView {
	%orig;
	NSLog(@"-(id) containerView");
}

-(void) setContainerView:(id) {
	%orig;
	NSLog(@"-(void) setContainerView:(id)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook AvatarCatalogActionButton

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook FBAdVideoScrubber

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(id) _imageWithColor:(id) andSize:(CGRect) {
	%orig;
	NSLog(@"-(id) _imageWithColor:(id) andSize:(CGRect)");
}

-(id) _imageWithColor:(id) {
	%orig;
	NSLog(@"-(id) _imageWithColor:(id)");
}

-(void) _scrubberIsBeingUsed:(id) {
	%orig;
	NSLog(@"-(void) _scrubberIsBeingUsed:(id)");
}

-(void) _scrubberIsNotBeingUsed:(id) {
	%orig;
	NSLog(@"-(void) _scrubberIsNotBeingUsed:(id)");
}

-(void) _updateTrackLoadingViewFrame {
	%orig;
	NSLog(@"-(void) _updateTrackLoadingViewFrame");
}

-(void) setPlayableDuration:(double) animated:(bool) {
	%orig;
	NSLog(@"-(void) setPlayableDuration:(double) animated:(bool)");
}

-(double) trackInsetWhileScrubbing {
	%orig;
	NSLog(@"-(double) trackInsetWhileScrubbing");
}

-(void) setTrackInsetWhileScrubbing:(double) {
	%orig;
	NSLog(@"-(void) setTrackInsetWhileScrubbing:(double)");
}

-(double) hitAreaBelowScrubber {
	%orig;
	NSLog(@"-(double) hitAreaBelowScrubber");
}

-(void) setHitAreaBelowScrubber:(double) {
	%orig;
	NSLog(@"-(void) setHitAreaBelowScrubber:(double)");
}

-(double) playableDuration {
	%orig;
	NSLog(@"-(double) playableDuration");
}

-(void) setPlayableDuration:(double) {
	%orig;
	NSLog(@"-(void) setPlayableDuration:(double)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(bool) beginTrackingWithTouch:(id) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) beginTrackingWithTouch:(id) withEvent:(id)");
}

%end

%hook PMCustomClearTextField

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) clear {
	%orig;
	NSLog(@"-(void) clear");
}

%end

%hook PMOnboardingTextField

-(void) onEditing:(id) {
	%orig;
	NSLog(@"-(void) onEditing:(id)");
}

-(void) clearText:(id) {
	%orig;
	NSLog(@"-(void) clearText:(id)");
}

-(bool) becomeFirstResponder {
	%orig;
	NSLog(@"-(bool) becomeFirstResponder");
}

-(bool) resignFirstResponder {
	%orig;
	NSLog(@"-(bool) resignFirstResponder");
}

-(void) drawPlaceholderInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawPlaceholderInRect:(CGRect)");
}

%end

%hook FBSDKButton

-(void) configureButton {
	%orig;
	NSLog(@"-(void) configureButton");
}

-(void) checkImplicitlyDisabled {
	%orig;
	NSLog(@"-(void) checkImplicitlyDisabled");
}

-(double) _heightForContentRect:(CGRect) {
	%orig;
	NSLog(@"-(double) _heightForContentRect:(CGRect)");
}

-(double) _marginForHeight:(double) {
	%orig;
	NSLog(@"-(double) _marginForHeight:(double)");
}

-(CGSize) sizeThatFits:(CGSize) title:(id) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize) title:(id)");
}

-(double) _paddingForHeight:(double) {
	%orig;
	NSLog(@"-(double) _paddingForHeight:(double)");
}

-(bool) isImplicitlyDisabled {
	%orig;
	NSLog(@"-(bool) isImplicitlyDisabled");
}

-(void) configureWithIcon:(id) title:(id) backgroundColor:(id) highlightedColor:(id) {
	%orig;
	NSLog(@"-(void) configureWithIcon:(id) title:(id) backgroundColor:(id) highlightedColor:(id)");
}

-(void) _configureWithIcon:(id) title:(id) backgroundColor:(id) highlightedColor:(id) selectedTitle:(id) selectedIcon:(id) selectedColor:(id) selectedHighlightedColor:(id) {
	%orig;
	NSLog(@"-(void) _configureWithIcon:(id) title:(id) backgroundColor:(id) highlightedColor:(id) selectedTitle:(id) selectedIcon:(id) selectedColor:(id) selectedHighlightedColor:(id)");
}

-(double) _heightForFont:(id) {
	%orig;
	NSLog(@"-(double) _heightForFont:(id)");
}

-(double) _textPaddingCorrectionForHeight:(double) {
	%orig;
	NSLog(@"-(double) _textPaddingCorrectionForHeight:(double)");
}

-(id) _backgroundImageWithColor:(id) cornerRadius:(double) scale:(double) {
	%orig;
	NSLog(@"-(id) _backgroundImageWithColor:(id) cornerRadius:(double) scale:(double)");
}

-(void) logTapEventWithEventName:(id) parameters:(id) {
	%orig;
	NSLog(@"-(void) logTapEventWithEventName:(id) parameters:(id)");
}

-(void) configureWithIcon:(id) title:(id) backgroundColor:(id) highlightedColor:(id) selectedTitle:(id) selectedIcon:(id) selectedColor:(id) selectedHighlightedColor:(id) {
	%orig;
	NSLog(@"-(void) configureWithIcon:(id) title:(id) backgroundColor:(id) highlightedColor:(id) selectedTitle:(id) selectedIcon:(id) selectedColor:(id) selectedHighlightedColor:(id)");
}

-(double) _fontSizeForHeight:(double) {
	%orig;
	NSLog(@"-(double) _fontSizeForHeight:(double)");
}

-(id) defaultHighlightedColor {
	%orig;
	NSLog(@"-(id) defaultHighlightedColor");
}

-(id) defaultDisabledColor {
	%orig;
	NSLog(@"-(id) defaultDisabledColor");
}

-(id) defaultSelectedColor {
	%orig;
	NSLog(@"-(id) defaultSelectedColor");
}

-(id) defaultIcon {
	%orig;
	NSLog(@"-(id) defaultIcon");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(void) sizeToFit {
	%orig;
	NSLog(@"-(void) sizeToFit");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(id) defaultFont {
	%orig;
	NSLog(@"-(id) defaultFont");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(CGRect) titleRectForContentRect:(CGRect) {
	%orig;
	NSLog(@"-(CGRect) titleRectForContentRect:(CGRect)");
}

-(CGRect) imageRectForContentRect:(CGRect) {
	%orig;
	NSLog(@"-(CGRect) imageRectForContentRect:(CGRect)");
}

-(id) defaultBackgroundColor {
	%orig;
	NSLog(@"-(id) defaultBackgroundColor");
}

-(void) _applicationDidBecomeActiveNotification:(id) {
	%orig;
	NSLog(@"-(void) _applicationDidBecomeActiveNotification:(id)");
}

%end

%hook FBSDKShareButton

-(void) setShareContent:(id) {
	%orig;
	NSLog(@"-(void) setShareContent:(id)");
}

-(void) configureButton {
	%orig;
	NSLog(@"-(void) configureButton");
}

-(id) impressionTrackingEventName {
	%orig;
	NSLog(@"-(id) impressionTrackingEventName");
}

-(id) impressionTrackingIdentifier {
	%orig;
	NSLog(@"-(id) impressionTrackingIdentifier");
}

-(bool) isImplicitlyDisabled {
	%orig;
	NSLog(@"-(bool) isImplicitlyDisabled");
}

-(id) shareContent {
	%orig;
	NSLog(@"-(id) shareContent");
}

-(id) analyticsParameters {
	%orig;
	NSLog(@"-(id) analyticsParameters");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) _share:(id) {
	%orig;
	NSLog(@"-(void) _share:(id)");
}

%end

%hook FBSDKSendButton

-(void) setShareContent:(id) {
	%orig;
	NSLog(@"-(void) setShareContent:(id)");
}

-(void) configureButton {
	%orig;
	NSLog(@"-(void) configureButton");
}

-(id) impressionTrackingEventName {
	%orig;
	NSLog(@"-(id) impressionTrackingEventName");
}

-(id) impressionTrackingIdentifier {
	%orig;
	NSLog(@"-(id) impressionTrackingIdentifier");
}

-(bool) isImplicitlyDisabled {
	%orig;
	NSLog(@"-(bool) isImplicitlyDisabled");
}

-(id) shareContent {
	%orig;
	NSLog(@"-(id) shareContent");
}

-(id) analyticsParameters {
	%orig;
	NSLog(@"-(id) analyticsParameters");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) _share:(id) {
	%orig;
	NSLog(@"-(void) _share:(id)");
}

%end

%hook FBSDKLikeButton

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) configureButton {
	%orig;
	NSLog(@"-(void) configureButton");
}

-(id) impressionTrackingEventName {
	%orig;
	NSLog(@"-(id) impressionTrackingEventName");
}

-(id) impressionTrackingIdentifier {
	%orig;
	NSLog(@"-(id) impressionTrackingIdentifier");
}

-(bool) isImplicitlyDisabled {
	%orig;
	NSLog(@"-(bool) isImplicitlyDisabled");
}

-(void) _ensureLikeActionController:(bool) {
	%orig;
	NSLog(@"-(void) _ensureLikeActionController:(bool)");
}

-(void) _setLikeActionController:(id) {
	%orig;
	NSLog(@"-(void) _setLikeActionController:(id)");
}

-(void) _resetLikeActionController {
	%orig;
	NSLog(@"-(void) _resetLikeActionController");
}

-(bool) isSoundEnabled {
	%orig;
	NSLog(@"-(bool) isSoundEnabled");
}

-(void) setSoundEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setSoundEnabled:(bool)");
}

-(void) _likeActionControllerDidDisableNotification:(id) {
	%orig;
	NSLog(@"-(void) _likeActionControllerDidDisableNotification:(id)");
}

-(void) _likeActionControllerDidResetNotification:(id) {
	%orig;
	NSLog(@"-(void) _likeActionControllerDidResetNotification:(id)");
}

-(void) _likeActionControllerDidUpdateNotification:(id) {
	%orig;
	NSLog(@"-(void) _likeActionControllerDidUpdateNotification:(id)");
}

-(void) setLikeActionController:(id) {
	%orig;
	NSLog(@"-(void) setLikeActionController:(id)");
}

-(id) likeActionController {
	%orig;
	NSLog(@"-(id) likeActionController");
}

-(void) _like:(id) {
	%orig;
	NSLog(@"-(void) _like:(id)");
}

-(id) analyticsParameters {
	%orig;
	NSLog(@"-(id) analyticsParameters");
}

-(void) setObjectID:(id) {
	%orig;
	NSLog(@"-(void) setObjectID:(id)");
}

-(id) objectID {
	%orig;
	NSLog(@"-(id) objectID");
}

-(unsigned long long) objectType {
	%orig;
	NSLog(@"-(unsigned long long) objectType");
}

-(void) setObjectType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setObjectType:(unsigned long long)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) _setSelected:(bool) animated:(bool) {
	%orig;
	NSLog(@"-(void) _setSelected:(bool) animated:(bool)");
}

-(void) _handleTap:(id) {
	%orig;
	NSLog(@"-(void) _handleTap:(id)");
}

%end

%hook FBSDKLoginButton

-(void) setDefaultAudience:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setDefaultAudience:(unsigned long long)");
}

-(void) configureButton {
	%orig;
	NSLog(@"-(void) configureButton");
}

-(id) impressionTrackingEventName {
	%orig;
	NSLog(@"-(id) impressionTrackingEventName");
}

-(id) impressionTrackingIdentifier {
	%orig;
	NSLog(@"-(id) impressionTrackingIdentifier");
}

-(void) _accessTokenDidChangeNotification:(id) {
	%orig;
	NSLog(@"-(void) _accessTokenDidChangeNotification:(id)");
}

-(unsigned long long) defaultAudience {
	%orig;
	NSLog(@"-(unsigned long long) defaultAudience");
}

-(unsigned long long) loginBehavior {
	%orig;
	NSLog(@"-(unsigned long long) loginBehavior");
}

-(void) setLoginBehavior:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setLoginBehavior:(unsigned long long)");
}

-(unsigned long long) tooltipBehavior {
	%orig;
	NSLog(@"-(unsigned long long) tooltipBehavior");
}

-(void) _showTooltipIfNeeded {
	%orig;
	NSLog(@"-(void) _showTooltipIfNeeded");
}

-(id) _longLogInTitle {
	%orig;
	NSLog(@"-(id) _longLogInTitle");
}

-(id) _shortLogInTitle {
	%orig;
	NSLog(@"-(id) _shortLogInTitle");
}

-(id) _logOutTitle {
	%orig;
	NSLog(@"-(id) _logOutTitle");
}

-(id) publishPermissions {
	%orig;
	NSLog(@"-(id) publishPermissions");
}

-(id) readPermissions {
	%orig;
	NSLog(@"-(id) readPermissions");
}

-(unsigned long long) tooltipColorStyle {
	%orig;
	NSLog(@"-(unsigned long long) tooltipColorStyle");
}

-(void) setPublishPermissions:(id) {
	%orig;
	NSLog(@"-(void) setPublishPermissions:(id)");
}

-(void) setReadPermissions:(id) {
	%orig;
	NSLog(@"-(void) setReadPermissions:(id)");
}

-(void) setTooltipBehavior:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setTooltipBehavior:(unsigned long long)");
}

-(void) setTooltipColorStyle:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setTooltipColorStyle:(unsigned long long)");
}

-(id) analyticsParameters {
	%orig;
	NSLog(@"-(id) analyticsParameters");
}

-(void) _updateContent {
	%orig;
	NSLog(@"-(void) _updateContent");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) didMoveToWindow {
	%orig;
	NSLog(@"-(void) didMoveToWindow");
}

-(id) defaultFont {
	%orig;
	NSLog(@"-(id) defaultFont");
}

-(CGRect) titleRectForContentRect:(CGRect) {
	%orig;
	NSLog(@"-(CGRect) titleRectForContentRect:(CGRect)");
}

-(CGRect) imageRectForContentRect:(CGRect) {
	%orig;
	NSLog(@"-(CGRect) imageRectForContentRect:(CGRect)");
}

-(void) _buttonPressed:(id) {
	%orig;
	NSLog(@"-(void) _buttonPressed:(id)");
}

%end

%hook FBAdVideoDismissButton

+(id) videoDismissButton {
	%orig;
	NSLog(@"+(id) videoDismissButton");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook FBAdVideoPlayPauseButton

+(id) videoPlayPauseButton {
	%orig;
	NSLog(@"+(id) videoPlayPauseButton");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook FBAdVideoPlayButton

+(id) videoPlayButton {
	%orig;
	NSLog(@"+(id) videoPlayButton");
}

+(void) initialize {
	%orig;
	NSLog(@"+(void) initialize");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) drawRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawRect:(CGRect)");
}

%end

%hook FBAdVideoCallToActionButton

-(void) sizeToFitText {
	%orig;
	NSLog(@"-(void) sizeToFitText");
}

-(void) setDefaults {
	%orig;
	NSLog(@"-(void) setDefaults");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) initWithText:(id) {
	%orig;
	NSLog(@"-(id) initWithText:(id)");
}

%end

%hook PMBadgeableNavigationBarButton

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMThemeableButton

-(void) setPmTheme:(long long) {
	%orig;
	NSLog(@"-(void) setPmTheme:(long long)");
}

-(id) darkFontColor {
	%orig;
	NSLog(@"-(id) darkFontColor");
}

-(id) lightFontColor {
	%orig;
	NSLog(@"-(id) lightFontColor");
}

-(id) lightDefaultBackgroundColor {
	%orig;
	NSLog(@"-(id) lightDefaultBackgroundColor");
}

-(void) setLightDefaultBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setLightDefaultBackgroundColor:(id)");
}

-(id) lightHighlightedBackgroundColor {
	%orig;
	NSLog(@"-(id) lightHighlightedBackgroundColor");
}

-(void) setLightHighlightedBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setLightHighlightedBackgroundColor:(id)");
}

-(id) lightDisabledBackgroundColor {
	%orig;
	NSLog(@"-(id) lightDisabledBackgroundColor");
}

-(void) setLightDisabledBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setLightDisabledBackgroundColor:(id)");
}

-(void) setLightFontColor:(id) {
	%orig;
	NSLog(@"-(void) setLightFontColor:(id)");
}

-(id) lightDisabledFontColor {
	%orig;
	NSLog(@"-(id) lightDisabledFontColor");
}

-(void) setLightDisabledFontColor:(id) {
	%orig;
	NSLog(@"-(void) setLightDisabledFontColor:(id)");
}

-(id) darkDefaultBackgroundColor {
	%orig;
	NSLog(@"-(id) darkDefaultBackgroundColor");
}

-(void) setDarkDefaultBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setDarkDefaultBackgroundColor:(id)");
}

-(id) darkHighlightedBackgroundColor {
	%orig;
	NSLog(@"-(id) darkHighlightedBackgroundColor");
}

-(void) setDarkHighlightedBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setDarkHighlightedBackgroundColor:(id)");
}

-(id) darkDisabledBackgroundColor {
	%orig;
	NSLog(@"-(id) darkDisabledBackgroundColor");
}

-(void) setDarkDisabledBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setDarkDisabledBackgroundColor:(id)");
}

-(void) setDarkFontColor:(id) {
	%orig;
	NSLog(@"-(void) setDarkFontColor:(id)");
}

-(id) darkDisabledFontColor {
	%orig;
	NSLog(@"-(id) darkDisabledFontColor");
}

-(void) setDarkDisabledFontColor:(id) {
	%orig;
	NSLog(@"-(void) setDarkDisabledFontColor:(id)");
}

-(id) selectedBorderColor {
	%orig;
	NSLog(@"-(id) selectedBorderColor");
}

-(void) setSelectedBorderColor:(id) {
	%orig;
	NSLog(@"-(void) setSelectedBorderColor:(id)");
}

-(long long) pmTheme {
	%orig;
	NSLog(@"-(long long) pmTheme");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

-(bool) isEnabled {
	%orig;
	NSLog(@"-(bool) isEnabled");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) isHighlighted {
	%orig;
	NSLog(@"-(bool) isHighlighted");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) prepareForInterfaceBuilder {
	%orig;
	NSLog(@"-(void) prepareForInterfaceBuilder");
}

%end

%hook LearnMoreL2APVNavigationItemButton

-(id) nextAdCommandResponder {
	%orig;
	NSLog(@"-(id) nextAdCommandResponder");
}

-(bool) handleAdCommand:(id) {
	%orig;
	NSLog(@"-(bool) handleAdCommand:(id)");
}

-(void) setNextAdCommandResponder:(id) {
	%orig;
	NSLog(@"-(void) setNextAdCommandResponder:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMMyStationsMusicCellAccessoryButton

-(void) updateForType:(long long) {
	%orig;
	NSLog(@"-(void) updateForType:(long long)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMClearButton

-(void) didPress:(id) {
	%orig;
	NSLog(@"-(void) didPress:(id)");
}

-(void) setOnClear:(id) {
	%orig;
	NSLog(@"-(void) setOnClear:(id)");
}

-(id) onClear {
	%orig;
	NSLog(@"-(id) onClear");
}

-(id) viewModel {
	%orig;
	NSLog(@"-(id) viewModel");
}

-(void) setViewModel:(id) {
	%orig;
	NSLog(@"-(void) setViewModel:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMPhoneTrackCardAlbumArtButton

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMDiscoveryTunerButton

-(void) setDominantColor:(id) {
	%orig;
	NSLog(@"-(void) setDominantColor:(id)");
}

-(id) dominantColor {
	%orig;
	NSLog(@"-(id) dominantColor");
}

-(bool) shouldShowPrompt {
	%orig;
	NSLog(@"-(bool) shouldShowPrompt");
}

-(void) setShouldShowPrompt:(bool) {
	%orig;
	NSLog(@"-(void) setShouldShowPrompt:(bool)");
}

-(id) stationMode {
	%orig;
	NSLog(@"-(id) stationMode");
}

-(void) setStationMode:(id) {
	%orig;
	NSLog(@"-(void) setStationMode:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(bool) isHighlighted {
	%orig;
	NSLog(@"-(bool) isHighlighted");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

%end

%hook PMCircleCheckBoxButton

-(void) setFilledCircle:(id) {
	%orig;
	NSLog(@"-(void) setFilledCircle:(id)");
}

-(void) setIsChecked:(bool) {
	%orig;
	NSLog(@"-(void) setIsChecked:(bool)");
}

-(id) filledCircle {
	%orig;
	NSLog(@"-(id) filledCircle");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) initialize {
	%orig;
	NSLog(@"-(void) initialize");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) isChecked {
	%orig;
	NSLog(@"-(bool) isChecked");
}

%end

%hook PMInfoButton

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setSelected:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool)");
}

%end

%hook PMTableViewCellDeleteButton

-(void) setupColors {
	%orig;
	NSLog(@"-(void) setupColors");
}

-(void) setupFont {
	%orig;
	NSLog(@"-(void) setupFont");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setTitle:(id) {
	%orig;
	NSLog(@"-(void) setTitle:(id)");
}

-(id) title {
	%orig;
	NSLog(@"-(id) title");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setSelected:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool)");
}

%end

%hook PMThumbDownPillView

-(void) setUpAccessibility {
	%orig;
	NSLog(@"-(void) setUpAccessibility");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PMTokenButton

+(id) tokenWithType:(long long) object:(id) {
	%orig;
	NSLog(@"+(id) tokenWithType:(long long) object:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) image {
	%orig;
	NSLog(@"-(id) image");
}

-(void) setActive:(bool) {
	%orig;
	NSLog(@"-(void) setActive:(bool)");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(id) object {
	%orig;
	NSLog(@"-(id) object");
}

-(id) color {
	%orig;
	NSLog(@"-(id) color");
}

-(bool) active {
	%orig;
	NSLog(@"-(bool) active");
}

-(void) setObject:(id) {
	%orig;
	NSLog(@"-(void) setObject:(id)");
}

-(bool) isValid {
	%orig;
	NSLog(@"-(bool) isValid");
}

%end

%hook PMGradientButton

+(id) buttonWithGradientTopColor:(id) bottomColor:(id) {
	%orig;
	NSLog(@"+(id) buttonWithGradientTopColor:(id) bottomColor:(id)");
}

+(Class) layerClass {
	%orig;
	NSLog(@"+(Class) layerClass");
}

-(void) setGradientWithTopColor:(id) bottomColor:(id) {
	%orig;
	NSLog(@"-(void) setGradientWithTopColor:(id) bottomColor:(id)");
}

-(void) setBorderWithColor:(id) width:(double) cornerRadius:(double) {
	%orig;
	NSLog(@"-(void) setBorderWithColor:(id) width:(double) cornerRadius:(double)");
}

-(void) setGradientTopColor:(id) {
	%orig;
	NSLog(@"-(void) setGradientTopColor:(id)");
}

-(void) setHiliteTopColor:(id) {
	%orig;
	NSLog(@"-(void) setHiliteTopColor:(id)");
}

-(void) setGradientBottomColor:(id) {
	%orig;
	NSLog(@"-(void) setGradientBottomColor:(id)");
}

-(void) setHiliteBottomColor:(id) {
	%orig;
	NSLog(@"-(void) setHiliteBottomColor:(id)");
}

-(id) gradientTopColor {
	%orig;
	NSLog(@"-(id) gradientTopColor");
}

-(id) gradientBottomColor {
	%orig;
	NSLog(@"-(id) gradientBottomColor");
}

-(id) hiliteTopColor {
	%orig;
	NSLog(@"-(id) hiliteTopColor");
}

-(id) hiliteBottomColor {
	%orig;
	NSLog(@"-(id) hiliteBottomColor");
}

-(void) stylizeDarkBlueButton {
	%orig;
	NSLog(@"-(void) stylizeDarkBlueButton");
}

-(void) stylizeLightBlueButton {
	%orig;
	NSLog(@"-(void) stylizeLightBlueButton");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(id) gradientLayer {
	%orig;
	NSLog(@"-(id) gradientLayer");
}

%end

%hook PMCastButton

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) updateForCurrentCastState {
	%orig;
	NSLog(@"-(void) updateForCurrentCastState");
}

-(void) castDeviceDidConnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnectWithDevice:(id)");
}

-(void) castDeviceDidDisconnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnectWithDevice:(id)");
}

-(void) castManagerIsConnectingDidChange {
	%orig;
	NSLog(@"-(void) castManagerIsConnectingDidChange");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook PMPlayerControlsButton

-(void) castDeviceListUpdated {
	%orig;
	NSLog(@"-(void) castDeviceListUpdated");
}

-(void) updatePlaybackControlsState {
	%orig;
	NSLog(@"-(void) updatePlaybackControlsState");
}

-(void) castDeviceDidConnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnect:(id)");
}

-(void) castDeviceDidDisconnect:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnect:(id)");
}

-(void) castDeviceDidConnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidConnectWithDevice:(id)");
}

-(void) castDeviceDidDisconnectWithDevice:(id) {
	%orig;
	NSLog(@"-(void) castDeviceDidDisconnectWithDevice:(id)");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) radioActiveTrackDidSuspendPlayback {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidSuspendPlayback");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(void) radioTrackRatingDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioTrackRatingDidChange:(id)");
}

-(void) radioBookmarkedSongDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedSongDidChange:(id)");
}

-(void) radioBookmarkedArtistDidChange:(id) {
	%orig;
	NSLog(@"-(void) radioBookmarkedArtistDidChange:(id)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) finishInit {
	%orig;
	NSLog(@"-(void) finishInit");
}

-(void) buttonTapped:(id) {
	%orig;
	NSLog(@"-(void) buttonTapped:(id)");
}

%end

%hook PMPlayPauseButton

-(void) updatePlaybackControlsState {
	%orig;
	NSLog(@"-(void) updatePlaybackControlsState");
}

-(void) finishPlayPauseButtonInit {
	%orig;
	NSLog(@"-(void) finishPlayPauseButtonInit");
}

-(void) setPlayImageDisabled:(id) {
	%orig;
	NSLog(@"-(void) setPlayImageDisabled:(id)");
}

-(void) setPauseImageDisabled:(id) {
	%orig;
	NSLog(@"-(void) setPauseImageDisabled:(id)");
}

-(id) pauseImageDisabled {
	%orig;
	NSLog(@"-(id) pauseImageDisabled");
}

-(id) playImageDisabled {
	%orig;
	NSLog(@"-(id) playImageDisabled");
}

-(id) pauseImageHighlighted {
	%orig;
	NSLog(@"-(id) pauseImageHighlighted");
}

-(id) playImageHighlighted {
	%orig;
	NSLog(@"-(id) playImageHighlighted");
}

-(void) setPlayImageHighlighted:(id) {
	%orig;
	NSLog(@"-(void) setPlayImageHighlighted:(id)");
}

-(void) setPauseImageHighlighted:(id) {
	%orig;
	NSLog(@"-(void) setPauseImageHighlighted:(id)");
}

-(id) playImage {
	%orig;
	NSLog(@"-(id) playImage");
}

-(id) pauseImage {
	%orig;
	NSLog(@"-(id) pauseImage");
}

-(void) setPlayImage:(id) {
	%orig;
	NSLog(@"-(void) setPlayImage:(id)");
}

-(void) setPauseImage:(id) {
	%orig;
	NSLog(@"-(void) setPauseImage:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) buttonTapped:(id) {
	%orig;
	NSLog(@"-(void) buttonTapped:(id)");
}

%end

%hook PMThumbsButton

-(void) updatePlaybackControlsState {
	%orig;
	NSLog(@"-(void) updatePlaybackControlsState");
}

-(void) setThumbedImageName:(id) {
	%orig;
	NSLog(@"-(void) setThumbedImageName:(id)");
}

-(void) setDisabledImageName:(id) {
	%orig;
	NSLog(@"-(void) setDisabledImageName:(id)");
}

-(id) disabledImageName {
	%orig;
	NSLog(@"-(id) disabledImageName");
}

-(void) setThumbType:(long long) {
	%orig;
	NSLog(@"-(void) setThumbType:(long long)");
}

-(id) highlightedImageName {
	%orig;
	NSLog(@"-(id) highlightedImageName");
}

-(long long) thumbType {
	%orig;
	NSLog(@"-(long long) thumbType");
}

-(id) thumbedImageName {
	%orig;
	NSLog(@"-(id) thumbedImageName");
}

-(void) updateToIndicateDisabledState {
	%orig;
	NSLog(@"-(void) updateToIndicateDisabledState");
}

-(void) enableAccessibilityForDisabledState {
	%orig;
	NSLog(@"-(void) enableAccessibilityForDisabledState");
}

-(void) setHighlightedImageName:(id) {
	%orig;
	NSLog(@"-(void) setHighlightedImageName:(id)");
}

-(void) setDefaultImageName:(id) {
	%orig;
	NSLog(@"-(void) setDefaultImageName:(id)");
}

-(id) defaultImageName {
	%orig;
	NSLog(@"-(id) defaultImageName");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook PMThumbsDownButton

-(void) finishThumbsDownInit {
	%orig;
	NSLog(@"-(void) finishThumbsDownInit");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) buttonTapped:(id) {
	%orig;
	NSLog(@"-(void) buttonTapped:(id)");
}

%end

%hook PMThumbsUpButton

-(void) finishThumbsUpInit {
	%orig;
	NSLog(@"-(void) finishThumbsUpInit");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) buttonTapped:(id) {
	%orig;
	NSLog(@"-(void) buttonTapped:(id)");
}

%end

%hook PMSkipButton

-(id) trackProgressTimer {
	%orig;
	NSLog(@"-(id) trackProgressTimer");
}

-(void) setTrackProgressTimer:(id) {
	%orig;
	NSLog(@"-(void) setTrackProgressTimer:(id)");
}

-(void) updatePlaybackControlsState {
	%orig;
	NSLog(@"-(void) updatePlaybackControlsState");
}

-(void) finishSkipButtonInit {
	%orig;
	NSLog(@"-(void) finishSkipButtonInit");
}

-(void) enableSkipButtonIfRequirementSatisfied {
	%orig;
	NSLog(@"-(void) enableSkipButtonIfRequirementSatisfied");
}

-(void) updateTrackProgressTimer {
	%orig;
	NSLog(@"-(void) updateTrackProgressTimer");
}

-(void) radioPlayingDidChange {
	%orig;
	NSLog(@"-(void) radioPlayingDidChange");
}

-(void) radioActiveTrackWillChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackWillChange");
}

-(void) radioActiveTrackDidChange {
	%orig;
	NSLog(@"-(void) radioActiveTrackDidChange");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) buttonTapped:(id) {
	%orig;
	NSLog(@"-(void) buttonTapped:(id)");
}

%end

%hook PMThumbUpPillView

-(void) setUpAccessibility {
	%orig;
	NSLog(@"-(void) setUpAccessibility");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMExtendedHitAreaButton

-(UIEdgeInsets) extendedHitAreaEdges {
	%orig;
	NSLog(@"-(UIEdgeInsets) extendedHitAreaEdges");
}

-(void) setExtendedHitAreaEdges:(UIEdgeInsets) {
	%orig;
	NSLog(@"-(void) setExtendedHitAreaEdges:(UIEdgeInsets)");
}

-(bool) pointInside:(CGPoint) withEvent:(id) {
	%orig;
	NSLog(@"-(bool) pointInside:(CGPoint) withEvent:(id)");
}

%end

%hook PMPersonalizationMeterButton

-(void) animatedMeter:(bool) animatedThumb:(bool) {
	%orig;
	NSLog(@"-(void) animatedMeter:(bool) animatedThumb:(bool)");
}

-(void) rotateThumb:(double) {
	%orig;
	NSLog(@"-(void) rotateThumb:(double)");
}

-(void) setMeterStyle:(long long) {
	%orig;
	NSLog(@"-(void) setMeterStyle:(long long)");
}

-(void) setThumbColor:(id) {
	%orig;
	NSLog(@"-(void) setThumbColor:(id)");
}

-(void) showTapAnimation {
	%orig;
	NSLog(@"-(void) showTapAnimation");
}

-(void) setSelectedMeterStyle:(long long) {
	%orig;
	NSLog(@"-(void) setSelectedMeterStyle:(long long)");
}

-(void) setThumbSelectedColor:(id) {
	%orig;
	NSLog(@"-(void) setThumbSelectedColor:(id)");
}

-(id) initWithFrame:(CGRect) useStaticImage:(bool) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) useStaticImage:(bool)");
}

-(id) meterImageView {
	%orig;
	NSLog(@"-(id) meterImageView");
}

-(bool) useStaticImage {
	%orig;
	NSLog(@"-(bool) useStaticImage");
}

-(void) updateThumbLayer {
	%orig;
	NSLog(@"-(void) updateThumbLayer");
}

-(id) thumbPath {
	%orig;
	NSLog(@"-(id) thumbPath");
}

-(void) adjustThumbColorForSelection {
	%orig;
	NSLog(@"-(void) adjustThumbColorForSelection");
}

-(void) adjustMeterStyleForSelection {
	%orig;
	NSLog(@"-(void) adjustMeterStyleForSelection");
}

-(long long) selectedMeterStyle {
	%orig;
	NSLog(@"-(long long) selectedMeterStyle");
}

-(id) imageForStyle:(long long) {
	%orig;
	NSLog(@"-(id) imageForStyle:(long long)");
}

-(long long) meterStyle {
	%orig;
	NSLog(@"-(long long) meterStyle");
}

-(id) thumbSelectedColor {
	%orig;
	NSLog(@"-(id) thumbSelectedColor");
}

-(id) thumbColor {
	%orig;
	NSLog(@"-(id) thumbColor");
}

-(void) setThumbLayer:(id) {
	%orig;
	NSLog(@"-(void) setThumbLayer:(id)");
}

-(void) setMeterImageView:(id) {
	%orig;
	NSLog(@"-(void) setMeterImageView:(id)");
}

-(void) setUseStaticImage:(bool) {
	%orig;
	NSLog(@"-(void) setUseStaticImage:(bool)");
}

-(void) setup {
	%orig;
	NSLog(@"-(void) setup");
}

-(id) thumbLayer {
	%orig;
	NSLog(@"-(id) thumbLayer");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setSelected:(bool) {
	%orig;
	NSLog(@"-(void) setSelected:(bool)");
}

-(double) progress {
	%orig;
	NSLog(@"-(double) progress");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

%end

%hook PMNowPlayingControlBarButton

-(void) setRepeatOne {
	%orig;
	NSLog(@"-(void) setRepeatOne");
}

-(void) updateControlsForDarkTheme {
	%orig;
	NSLog(@"-(void) updateControlsForDarkTheme");
}

-(void) updateControlsForLightTheme {
	%orig;
	NSLog(@"-(void) updateControlsForLightTheme");
}

-(void) callOnTouchUp:(id) {
	%orig;
	NSLog(@"-(void) callOnTouchUp:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) addTarget:(id) action:(SEL) forControlEvents:(unsigned long long) {
	%orig;
	NSLog(@"-(void) addTarget:(id) action:(SEL) forControlEvents:(unsigned long long)");
}

-(bool) isHighlighted {
	%orig;
	NSLog(@"-(bool) isHighlighted");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

%end

%hook DetailedControlButton

-(void) updateControlsForDarkTheme {
	%orig;
	NSLog(@"-(void) updateControlsForDarkTheme");
}

-(void) updateControlsForLightTheme {
	%orig;
	NSLog(@"-(void) updateControlsForLightTheme");
}

-(void) setRepeatOne {
	%orig;
	NSLog(@"-(void) setRepeatOne");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(void) prepareForInterfaceBuilder {
	%orig;
	NSLog(@"-(void) prepareForInterfaceBuilder");
}

%end

%hook PMPremiumStationSettingButton

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook EQImageView

-(id) initWithImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) isHighlighted {
	%orig;
	NSLog(@"-(bool) isHighlighted");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) initWithImage:(id) highlightedImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id) highlightedImage:(id)");
}

%end

%hook PMCircleImageView

-(id) initWithImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) initWithImage:(id) highlightedImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id) highlightedImage:(id)");
}

%end

%hook AvatarImageView

-(id) initWithImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) initWithImage:(id) highlightedImage:(id) {
	%orig;
	NSLog(@"-(id) initWithImage:(id) highlightedImage:(id)");
}

%end

%hook PMBrowseStationGradientImageView

-(void) setGradientImageView:(id) {
	%orig;
	NSLog(@"-(void) setGradientImageView:(id)");
}

-(id) gradientImageView {
	%orig;
	NSLog(@"-(id) gradientImageView");
}

-(id) findDominantColorsOperation {
	%orig;
	NSLog(@"-(id) findDominantColorsOperation");
}

-(id) renderGradientOperation {
	%orig;
	NSLog(@"-(id) renderGradientOperation");
}

-(void) calculateDominantColors {
	%orig;
	NSLog(@"-(void) calculateDominantColors");
}

-(id) dominantColorCache {
	%orig;
	NSLog(@"-(id) dominantColorCache");
}

-(void) updateGradientUsingColors:(id) {
	%orig;
	NSLog(@"-(void) updateGradientUsingColors:(id)");
}

-(void) setFindDominantColorsOperation:(id) {
	%orig;
	NSLog(@"-(void) setFindDominantColorsOperation:(id)");
}

-(id) dominantColorFromColors:(id) {
	%orig;
	NSLog(@"-(id) dominantColorFromColors:(id)");
}

-(void) finalizeGradientWithImage:(id) dominantColor:(id) {
	%orig;
	NSLog(@"-(void) finalizeGradientWithImage:(id) dominantColor:(id)");
}

-(void) renderGradientImageUsingColors:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) renderGradientImageUsingColors:(id) completion:(id)");
}

-(void) setRenderGradientOperation:(id) {
	%orig;
	NSLog(@"-(void) setRenderGradientOperation:(id)");
}

-(void) setImageForStation:(id) completion:(id) {
	%orig;
	NSLog(@"-(void) setImageForStation:(id) completion:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) prepareForReuse {
	%orig;
	NSLog(@"-(void) prepareForReuse");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(void) setCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setCompletionBlock:(id)");
}

-(id) operationQueue {
	%orig;
	NSLog(@"-(id) operationQueue");
}

-(id) cacheKey {
	%orig;
	NSLog(@"-(id) cacheKey");
}

-(void) setCacheKey:(id) {
	%orig;
	NSLog(@"-(void) setCacheKey:(id)");
}

-(id) completionBlock {
	%orig;
	NSLog(@"-(id) completionBlock");
}

%end

%hook FBVideoAdLabel

-(void) setDefaults {
	%orig;
	NSLog(@"-(void) setDefaults");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) initWithText:(id) {
	%orig;
	NSLog(@"-(id) initWithText:(id)");
}

%end

%hook FBInstreamAdButton

-(void) sizeToFitText {
	%orig;
	NSLog(@"-(void) sizeToFitText");
}

-(void) setDefaults {
	%orig;
	NSLog(@"-(void) setDefaults");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook FBInstreamLearnMoreView

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithText:(id) {
	%orig;
	NSLog(@"-(id) initWithText:(id)");
}

%end

%hook FBInstreamSkipButtonView

-(void) setRemainingSeconds:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setRemainingSeconds:(unsigned long long)");
}

-(id) initWithRemainingSeconds:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithRemainingSeconds:(unsigned long long)");
}

-(id) textWithRemainingSeconds:(unsigned long long) {
	%orig;
	NSLog(@"-(id) textWithRemainingSeconds:(unsigned long long)");
}

-(unsigned long long) remainingSeconds {
	%orig;
	NSLog(@"-(unsigned long long) remainingSeconds");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook RadioOnlyBadge

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(bool) isHidden {
	%orig;
	NSLog(@"-(bool) isHidden");
}

-(void) setHidden:(bool) {
	%orig;
	NSLog(@"-(void) setHidden:(bool)");
}

%end

%hook InlineBadge

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) .cxx_destruct {
	%orig;
	NSLog(@"-(id) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PodcastInlineBadge

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

%end

%hook PaddedLabel

-(void) setTopPadding:(double) {
	%orig;
	NSLog(@"-(void) setTopPadding:(double)");
}

-(double) topPadding {
	%orig;
	NSLog(@"-(double) topPadding");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) drawTextInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawTextInRect:(CGRect)");
}

%end

%hook _TtCC7Pandora27PMPremiumTrackInfoCoverView11MarginLabel

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) drawTextInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawTextInRect:(CGRect)");
}

%end

%hook MarqueeLabel

+(void) notifyController:(id) withMessage:(id) {
	%orig;
	NSLog(@"+(void) notifyController:(id) withMessage:(id)");
}

+(void) restartLabelsOfController:(id) {
	%orig;
	NSLog(@"+(void) restartLabelsOfController:(id)");
}

+(void) controllerViewWillAppear:(id) {
	%orig;
	NSLog(@"+(void) controllerViewWillAppear:(id)");
}

+(void) controllerViewDidAppear:(id) {
	%orig;
	NSLog(@"+(void) controllerViewDidAppear:(id)");
}

+(void) controllerViewAppearing:(id) {
	%orig;
	NSLog(@"+(void) controllerViewAppearing:(id)");
}

+(void) controllerLabelsShouldLabelize:(id) {
	%orig;
	NSLog(@"+(void) controllerLabelsShouldLabelize:(id)");
}

+(void) controllerLabelsShouldAnimate:(id) {
	%orig;
	NSLog(@"+(void) controllerLabelsShouldAnimate:(id)");
}

+(Class) layerClass {
	%orig;
	NSLog(@"+(Class) layerClass");
}

-(void) setLabelize:(bool) {
	%orig;
	NSLog(@"-(void) setLabelize:(bool)");
}

-(void) minimizeLabelFrameWithMaximumSize:(CGSize) adjustHeight:(bool) {
	%orig;
	NSLog(@"-(void) minimizeLabelFrameWithMaximumSize:(CGSize) adjustHeight:(bool)");
}

-(void) setMarqueeType:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setMarqueeType:(unsigned long long)");
}

-(void) setTrailingBuffer:(double) {
	%orig;
	NSLog(@"-(void) setTrailingBuffer:(double)");
}

-(void) setFadeLength:(double) {
	%orig;
	NSLog(@"-(void) setFadeLength:(double)");
}

-(void) setupLabel {
	%orig;
	NSLog(@"-(void) setupLabel");
}

-(void) restartLabel {
	%orig;
	NSLog(@"-(void) restartLabel");
}

-(id) initWithFrame:(CGRect) duration:(double) andFadeLength:(double) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) duration:(double) andFadeLength:(double)");
}

-(double) scrollDuration {
	%orig;
	NSLog(@"-(double) scrollDuration");
}

-(void) setScrollDuration:(double) {
	%orig;
	NSLog(@"-(void) setScrollDuration:(double)");
}

-(void) forwardPropertiesToSubLabel {
	%orig;
	NSLog(@"-(void) forwardPropertiesToSubLabel");
}

-(void) viewControllerShouldRestart:(id) {
	%orig;
	NSLog(@"-(void) viewControllerShouldRestart:(id)");
}

-(void) labelsShouldLabelize:(id) {
	%orig;
	NSLog(@"-(void) labelsShouldLabelize:(id)");
}

-(void) labelsShouldAnimate:(id) {
	%orig;
	NSLog(@"-(void) labelsShouldAnimate:(id)");
}

-(void) shutdownLabel {
	%orig;
	NSLog(@"-(void) shutdownLabel");
}

-(CGSize) subLabelSize {
	%orig;
	NSLog(@"-(CGSize) subLabelSize");
}

-(void) updateSublabel {
	%orig;
	NSLog(@"-(void) updateSublabel");
}

-(void) updateSublabelAndBeginScroll:(bool) {
	%orig;
	NSLog(@"-(void) updateSublabelAndBeginScroll:(bool)");
}

-(void) returnLabelToOriginImmediately {
	%orig;
	NSLog(@"-(void) returnLabelToOriginImmediately");
}

-(void) applyGradientMaskForFadeLength:(double) animated:(bool) {
	%orig;
	NSLog(@"-(void) applyGradientMaskForFadeLength:(double) animated:(bool)");
}

-(bool) labelShouldScroll {
	%orig;
	NSLog(@"-(bool) labelShouldScroll");
}

-(unsigned long long) marqueeType {
	%orig;
	NSLog(@"-(unsigned long long) marqueeType");
}

-(double) leadingBuffer {
	%orig;
	NSLog(@"-(double) leadingBuffer");
}

-(void) setHomeLabelFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setHomeLabelFrame:(CGRect)");
}

-(void) setAwayOffset:(double) {
	%orig;
	NSLog(@"-(void) setAwayOffset:(double)");
}

-(id) repliLayer {
	%orig;
	NSLog(@"-(id) repliLayer");
}

-(void) removeGradientMask {
	%orig;
	NSLog(@"-(void) removeGradientMask");
}

-(double) trailingBuffer {
	%orig;
	NSLog(@"-(double) trailingBuffer");
}

-(CGRect) homeLabelFrame {
	%orig;
	NSLog(@"-(CGRect) homeLabelFrame");
}

-(double) awayOffset {
	%orig;
	NSLog(@"-(double) awayOffset");
}

-(bool) tapToScroll {
	%orig;
	NSLog(@"-(bool) tapToScroll");
}

-(bool) holdScrolling {
	%orig;
	NSLog(@"-(bool) holdScrolling");
}

-(void) beginScroll {
	%orig;
	NSLog(@"-(void) beginScroll");
}

-(bool) labelize {
	%orig;
	NSLog(@"-(bool) labelize");
}

-(void) beginScrollWithDelay:(bool) {
	%orig;
	NSLog(@"-(void) beginScrollWithDelay:(bool)");
}

-(double) animationDelay {
	%orig;
	NSLog(@"-(double) animationDelay");
}

-(void) scrollContinuousWithInterval:(double) after:(double) {
	%orig;
	NSLog(@"-(void) scrollContinuousWithInterval:(double) after:(double)");
}

-(void) scrollAwayWithInterval:(double) delayAmount:(double) shouldReturn:(bool) {
	%orig;
	NSLog(@"-(void) scrollAwayWithInterval:(double) delayAmount:(double) shouldReturn:(bool)");
}

-(void) scrollAwayWithInterval:(double) {
	%orig;
	NSLog(@"-(void) scrollAwayWithInterval:(double)");
}

-(void) setScrollCompletionBlock:(id) {
	%orig;
	NSLog(@"-(void) setScrollCompletionBlock:(id)");
}

-(void) scrollAwayWithInterval:(double) delay:(bool) {
	%orig;
	NSLog(@"-(void) scrollAwayWithInterval:(double) delay:(bool)");
}

-(bool) labelReadyForScroll {
	%orig;
	NSLog(@"-(bool) labelReadyForScroll");
}

-(void) labelWillBeginScroll {
	%orig;
	NSLog(@"-(void) labelWillBeginScroll");
}

-(id) keyFrameAnimationForGradientFadeLength:(double) interval:(double) delay:(double) {
	%orig;
	NSLog(@"-(id) keyFrameAnimationForGradientFadeLength:(double) interval:(double) delay:(double)");
}

-(void) labelReturnedToHome:(bool) {
	%orig;
	NSLog(@"-(void) labelReturnedToHome:(bool)");
}

-(id) keyFrameAnimationForProperty:(id) values:(id) interval:(double) delay:(double) {
	%orig;
	NSLog(@"-(id) keyFrameAnimationForProperty:(id) values:(id) interval:(double) delay:(double)");
}

-(void) scrollContinuousWithInterval:(double) after:(double) labelAnimation:(id) gradientAnimation:(id) {
	%orig;
	NSLog(@"-(void) scrollContinuousWithInterval:(double) after:(double) labelAnimation:(id) gradientAnimation:(id)");
}

-(id) timingFunctionForAnimationOptions:(unsigned long long) {
	%orig;
	NSLog(@"-(id) timingFunctionForAnimationOptions:(unsigned long long)");
}

-(id) scrollCompletionBlock {
	%orig;
	NSLog(@"-(id) scrollCompletionBlock");
}

-(bool) awayFromHome {
	%orig;
	NSLog(@"-(bool) awayFromHome");
}

-(void) labelWasTapped:(id) {
	%orig;
	NSLog(@"-(void) labelWasTapped:(id)");
}

-(id) initWithFrame:(CGRect) rate:(double) andFadeLength:(double) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect) rate:(double) andFadeLength:(double)");
}

-(void) resetLabel {
	%orig;
	NSLog(@"-(void) resetLabel");
}

-(void) pauseLabel {
	%orig;
	NSLog(@"-(void) pauseLabel");
}

-(void) unpauseLabel {
	%orig;
	NSLog(@"-(void) unpauseLabel");
}

-(void) triggerScrollStart {
	%orig;
	NSLog(@"-(void) triggerScrollStart");
}

-(void) setLeadingBuffer:(double) {
	%orig;
	NSLog(@"-(void) setLeadingBuffer:(double)");
}

-(void) setContinuousMarqueeExtraBuffer:(double) {
	%orig;
	NSLog(@"-(void) setContinuousMarqueeExtraBuffer:(double)");
}

-(double) continuousMarqueeExtraBuffer {
	%orig;
	NSLog(@"-(double) continuousMarqueeExtraBuffer");
}

-(void) setTapToScroll:(bool) {
	%orig;
	NSLog(@"-(void) setTapToScroll:(bool)");
}

-(void) setHoldScrolling:(bool) {
	%orig;
	NSLog(@"-(void) setHoldScrolling:(bool)");
}

-(void) setIsPaused:(bool) {
	%orig;
	NSLog(@"-(void) setIsPaused:(bool)");
}

-(id) maskLayer {
	%orig;
	NSLog(@"-(id) maskLayer");
}

-(void) setTapRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setTapRecognizer:(id)");
}

-(id) tapRecognizer {
	%orig;
	NSLog(@"-(id) tapRecognizer");
}

-(double) fadeLength {
	%orig;
	NSLog(@"-(double) fadeLength");
}

-(id) subLabel {
	%orig;
	NSLog(@"-(id) subLabel");
}

-(void) setSubLabel:(id) {
	%orig;
	NSLog(@"-(void) setSubLabel:(id)");
}

-(void) setFrame:(CGRect) {
	%orig;
	NSLog(@"-(void) setFrame:(CGRect)");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setEnabled:(bool)");
}

-(bool) isEnabled {
	%orig;
	NSLog(@"-(bool) isEnabled");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setBackgroundColor:(id) {
	%orig;
	NSLog(@"-(void) setBackgroundColor:(id)");
}

-(void) setContentMode:(long long) {
	%orig;
	NSLog(@"-(void) setContentMode:(long long)");
}

-(void) setTintColor:(id) {
	%orig;
	NSLog(@"-(void) setTintColor:(id)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(void) setFont:(id) {
	%orig;
	NSLog(@"-(void) setFont:(id)");
}

-(id) font {
	%orig;
	NSLog(@"-(id) font");
}

-(void) setMinimumScaleFactor:(double) {
	%orig;
	NSLog(@"-(void) setMinimumScaleFactor:(double)");
}

-(void) setAdjustsFontSizeToFitWidth:(bool) {
	%orig;
	NSLog(@"-(void) setAdjustsFontSizeToFitWidth:(bool)");
}

-(void) setBaselineAdjustment:(long long) {
	%orig;
	NSLog(@"-(void) setBaselineAdjustment:(long long)");
}

-(void) layoutSubviews {
	%orig;
	NSLog(@"-(void) layoutSubviews");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(CGSize) sizeThatFits:(CGSize) {
	%orig;
	NSLog(@"-(CGSize) sizeThatFits:(CGSize)");
}

-(id) text {
	%orig;
	NSLog(@"-(id) text");
}

-(void) setNumberOfLines:(long long) {
	%orig;
	NSLog(@"-(void) setNumberOfLines:(long long)");
}

-(bool) isHighlighted {
	%orig;
	NSLog(@"-(bool) isHighlighted");
}

-(id) tintColor {
	%orig;
	NSLog(@"-(id) tintColor");
}

-(void) setHighlighted:(bool) {
	%orig;
	NSLog(@"-(void) setHighlighted:(bool)");
}

-(id) backgroundColor {
	%orig;
	NSLog(@"-(id) backgroundColor");
}

-(void) tintColorDidChange {
	%orig;
	NSLog(@"-(void) tintColorDidChange");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) setGradientColors:(id) {
	%orig;
	NSLog(@"-(void) setGradientColors:(id)");
}

-(void) setAttributedText:(id) {
	%orig;
	NSLog(@"-(void) setAttributedText:(id)");
}

-(void) setTextColor:(id) {
	%orig;
	NSLog(@"-(void) setTextColor:(id)");
}

-(void) didMoveToSuperview {
	%orig;
	NSLog(@"-(void) didMoveToSuperview");
}

-(void) didMoveToWindow {
	%orig;
	NSLog(@"-(void) didMoveToWindow");
}

-(void) setAnimationCurve:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setAnimationCurve:(unsigned long long)");
}

-(unsigned long long) animationCurve {
	%orig;
	NSLog(@"-(unsigned long long) animationCurve");
}

-(void) animationDidStop:(id) finished:(bool) {
	%orig;
	NSLog(@"-(void) animationDidStop:(id) finished:(bool)");
}

-(void) drawLayer:(id) inContext:(CGContext*) {
	%orig;
	NSLog(@"-(void) drawLayer:(id) inContext:(CGContext*)");
}

-(void) willMoveToWindow:(id) {
	%orig;
	NSLog(@"-(void) willMoveToWindow:(id)");
}

-(double) animationDuration {
	%orig;
	NSLog(@"-(double) animationDuration");
}

-(void) setAnimationDuration:(double) {
	%orig;
	NSLog(@"-(void) setAnimationDuration:(double)");
}

-(void) setShadowOffset:(CGSize) {
	%orig;
	NSLog(@"-(void) setShadowOffset:(CGSize)");
}

-(void) setShadowColor:(id) {
	%orig;
	NSLog(@"-(void) setShadowColor:(id)");
}

-(CGSize) shadowOffset {
	%orig;
	NSLog(@"-(CGSize) shadowOffset");
}

-(id) shadowColor {
	%orig;
	NSLog(@"-(id) shadowColor");
}

-(id) textColor {
	%orig;
	NSLog(@"-(id) textColor");
}

-(id) attributedText {
	%orig;
	NSLog(@"-(id) attributedText");
}

-(void) setAnimationDelay:(double) {
	%orig;
	NSLog(@"-(void) setAnimationDelay:(double)");
}

-(void) awakeFromNib {
	%orig;
	NSLog(@"-(void) awakeFromNib");
}

-(id) viewForLastBaselineLayout {
	%orig;
	NSLog(@"-(id) viewForLastBaselineLayout");
}

-(void) setRate:(double) {
	%orig;
	NSLog(@"-(void) setRate:(double)");
}

-(double) rate {
	%orig;
	NSLog(@"-(double) rate");
}

-(void) prepareForInterfaceBuilder {
	%orig;
	NSLog(@"-(void) prepareForInterfaceBuilder");
}

-(id) gradientColors {
	%orig;
	NSLog(@"-(id) gradientColors");
}

-(void) setHighlightedTextColor:(id) {
	%orig;
	NSLog(@"-(void) setHighlightedTextColor:(id)");
}

-(id) highlightedTextColor {
	%orig;
	NSLog(@"-(id) highlightedTextColor");
}

-(long long) contentMode {
	%orig;
	NSLog(@"-(long long) contentMode");
}

-(id) viewForFirstBaselineLayout {
	%orig;
	NSLog(@"-(id) viewForFirstBaselineLayout");
}

-(bool) isPaused {
	%orig;
	NSLog(@"-(bool) isPaused");
}

-(void) setMinimumFontSize:(double) {
	%orig;
	NSLog(@"-(void) setMinimumFontSize:(double)");
}

-(id) viewForBaselineLayout {
	%orig;
	NSLog(@"-(id) viewForBaselineLayout");
}

-(void) setAdjustsLetterSpacingToFitWidth:(bool) {
	%orig;
	NSLog(@"-(void) setAdjustsLetterSpacingToFitWidth:(bool)");
}

-(long long) baselineAdjustment {
	%orig;
	NSLog(@"-(long long) baselineAdjustment");
}

%end

%hook PMMarqueeLabel

+(id) marqueeLabelForType:(long long) {
	%orig;
	NSLog(@"+(id) marqueeLabelForType:(long long)");
}

-(void) initializeMarqueeLabelType:(long long) {
	%orig;
	NSLog(@"-(void) initializeMarqueeLabelType:(long long)");
}

-(id) uiLabel {
	%orig;
	NSLog(@"-(id) uiLabel");
}

-(long long) type {
	%orig;
	NSLog(@"-(long long) type");
}

-(void) setType:(long long) {
	%orig;
	NSLog(@"-(void) setType:(long long)");
}

-(CGSize) intrinsicContentSize {
	%orig;
	NSLog(@"-(CGSize) intrinsicContentSize");
}

-(void) drawTextInRect:(CGRect) {
	%orig;
	NSLog(@"-(void) drawTextInRect:(CGRect)");
}

%end

%hook PMBadgeLabel

-(void) doInit {
	%orig;
	NSLog(@"-(void) doInit");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(double) maximumWidth {
	%orig;
	NSLog(@"-(double) maximumWidth");
}

-(void) setBorderColor:(id) {
	%orig;
	NSLog(@"-(void) setBorderColor:(id)");
}

-(void) setBorderWidth:(double) {
	%orig;
	NSLog(@"-(void) setBorderWidth:(double)");
}

-(double) borderWidth {
	%orig;
	NSLog(@"-(double) borderWidth");
}

-(void) setMaximumWidth:(double) {
	%orig;
	NSLog(@"-(void) setMaximumWidth:(double)");
}

-(void) setPadding:(double) {
	%orig;
	NSLog(@"-(void) setPadding:(double)");
}

-(double) padding {
	%orig;
	NSLog(@"-(double) padding");
}

-(id) borderColor {
	%orig;
	NSLog(@"-(id) borderColor");
}

%end

%hook PMNumericBadgeLabel

-(void) setMaximumValue:(long long) {
	%orig;
	NSLog(@"-(void) setMaximumValue:(long long)");
}

-(long long) maximumValue {
	%orig;
	NSLog(@"-(long long) maximumValue");
}

-(void) setBadge:(long long) {
	%orig;
	NSLog(@"-(void) setBadge:(long long)");
}

%end

%hook PMTransientMessageLabel

-(void) displayMessage:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) displayMessage:(id) animated:(bool)");
}

-(id) autoDismissTimer {
	%orig;
	NSLog(@"-(id) autoDismissTimer");
}

-(void) setAutoDismissTimer:(id) {
	%orig;
	NSLog(@"-(void) setAutoDismissTimer:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) reset {
	%orig;
	NSLog(@"-(void) reset");
}

-(void) hide {
	%orig;
	NSLog(@"-(void) hide");
}

-(void) startTimer {
	%orig;
	NSLog(@"-(void) startTimer");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

%end

%hook PMMoreLabel

-(void) setMoreTextColor:(id) {
	%orig;
	NSLog(@"-(void) setMoreTextColor:(id)");
}

-(void) didTapMore:(id) {
	%orig;
	NSLog(@"-(void) didTapMore:(id)");
}

-(id) tapMoreGestureRecognizer {
	%orig;
	NSLog(@"-(id) tapMoreGestureRecognizer");
}

-(id) moreView {
	%orig;
	NSLog(@"-(id) moreView");
}

-(void) adjustTextToFitBounds {
	%orig;
	NSLog(@"-(void) adjustTextToFitBounds");
}

-(void) setOriginalTextColor:(id) {
	%orig;
	NSLog(@"-(void) setOriginalTextColor:(id)");
}

-(void) setupTextKitForAttributedString:(id) {
	%orig;
	NSLog(@"-(void) setupTextKitForAttributedString:(id)");
}

-(void) setupTextKitForString:(id) {
	%orig;
	NSLog(@"-(void) setupTextKitForString:(id)");
}

-(id) moreString {
	%orig;
	NSLog(@"-(id) moreString");
}

-(id) originalTextColor {
	%orig;
	NSLog(@"-(id) originalTextColor");
}

-(void) setMoreString:(id) {
	%orig;
	NSLog(@"-(void) setMoreString:(id)");
}

-(id) moreTextColor {
	%orig;
	NSLog(@"-(id) moreTextColor");
}

-(void) setMoreView:(id) {
	%orig;
	NSLog(@"-(void) setMoreView:(id)");
}

-(void) setTapMoreGestureRecognizer:(id) {
	%orig;
	NSLog(@"-(void) setTapMoreGestureRecognizer:(id)");
}

-(id) initWithCoder:(id) {
	%orig;
	NSLog(@"-(id) initWithCoder:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setDelegate:(id) {
	%orig;
	NSLog(@"-(void) setDelegate:(id)");
}

-(id) initWithFrame:(CGRect) {
	%orig;
	NSLog(@"-(id) initWithFrame:(CGRect)");
}

-(void) setText:(id) {
	%orig;
	NSLog(@"-(void) setText:(id)");
}

-(void) setBounds:(CGRect) {
	%orig;
	NSLog(@"-(void) setBounds:(CGRect)");
}

-(id) layoutManager {
	%orig;
	NSLog(@"-(id) layoutManager");
}

-(id) delegate {
	%orig;
	NSLog(@"-(id) delegate");
}

-(void) setTextColor:(id) {
	%orig;
	NSLog(@"-(void) setTextColor:(id)");
}

-(void) setLayoutManager:(id) {
	%orig;
	NSLog(@"-(void) setLayoutManager:(id)");
}

-(id) textContainer {
	%orig;
	NSLog(@"-(id) textContainer");
}

-(id) originalText {
	%orig;
	NSLog(@"-(id) originalText");
}

-(id) textStorage {
	%orig;
	NSLog(@"-(id) textStorage");
}

-(void) setOriginalText:(id) {
	%orig;
	NSLog(@"-(void) setOriginalText:(id)");
}

-(void) commonInit {
	%orig;
	NSLog(@"-(void) commonInit");
}

-(void) setTextContainer:(id) {
	%orig;
	NSLog(@"-(void) setTextContainer:(id)");
}

-(void) setTextStorage:(id) {
	%orig;
	NSLog(@"-(void) setTextStorage:(id)");
}

%end

%hook ABQFileManager

+(id) sharedFileManager {
	%orig;
	NSLog(@"+(id) sharedFileManager");
}

-(unsigned long long) freeDiskspace {
	%orig;
	NSLog(@"-(unsigned long long) freeDiskspace");
}

-(void) postNotificationWithErrorMessage:(id) {
	%orig;
	NSLog(@"-(void) postNotificationWithErrorMessage:(id)");
}

-(bool) createPath:(id) {
	%orig;
	NSLog(@"-(bool) createPath:(id)");
}

-(bool) copyAndOverwriteItemAtPath:(id) toPath:(id) {
	%orig;
	NSLog(@"-(bool) copyAndOverwriteItemAtPath:(id) toPath:(id)");
}

-(bool) copyItemAtPath:(id) toPath:(id) {
	%orig;
	NSLog(@"-(bool) copyItemAtPath:(id) toPath:(id)");
}

-(void) postNotificationWithError:(id) {
	%orig;
	NSLog(@"-(void) postNotificationWithError:(id)");
}

-(bool) fileManager:(id) shouldCopyItemAtURL:(id) toURL:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldCopyItemAtURL:(id) toURL:(id)");
}

-(bool) fileManager:(id) shouldCopyItemAtPath:(id) toPath:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldCopyItemAtPath:(id) toPath:(id)");
}

-(bool) fileManager:(id) shouldProceedAfterError:(id) copyingItemAtURL:(id) toURL:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldProceedAfterError:(id) copyingItemAtURL:(id) toURL:(id)");
}

-(bool) fileManager:(id) shouldProceedAfterError:(id) copyingItemAtPath:(id) toPath:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldProceedAfterError:(id) copyingItemAtPath:(id) toPath:(id)");
}

-(bool) fileManager:(id) shouldMoveItemAtURL:(id) toURL:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldMoveItemAtURL:(id) toURL:(id)");
}

-(bool) fileManager:(id) shouldMoveItemAtPath:(id) toPath:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldMoveItemAtPath:(id) toPath:(id)");
}

-(bool) fileManager:(id) shouldProceedAfterError:(id) movingItemAtURL:(id) toURL:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldProceedAfterError:(id) movingItemAtURL:(id) toURL:(id)");
}

-(bool) fileManager:(id) shouldProceedAfterError:(id) movingItemAtPath:(id) toPath:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldProceedAfterError:(id) movingItemAtPath:(id) toPath:(id)");
}

-(bool) fileManager:(id) shouldLinkItemAtURL:(id) toURL:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldLinkItemAtURL:(id) toURL:(id)");
}

-(bool) fileManager:(id) shouldLinkItemAtPath:(id) toPath:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldLinkItemAtPath:(id) toPath:(id)");
}

-(bool) fileManager:(id) shouldProceedAfterError:(id) linkingItemAtURL:(id) toURL:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldProceedAfterError:(id) linkingItemAtURL:(id) toURL:(id)");
}

-(bool) fileManager:(id) shouldProceedAfterError:(id) linkingItemAtPath:(id) toPath:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldProceedAfterError:(id) linkingItemAtPath:(id) toPath:(id)");
}

-(bool) fileManager:(id) shouldRemoveItemAtURL:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldRemoveItemAtURL:(id)");
}

-(bool) fileManager:(id) shouldRemoveItemAtPath:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldRemoveItemAtPath:(id)");
}

-(bool) fileManager:(id) shouldProceedAfterError:(id) removingItemAtURL:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldProceedAfterError:(id) removingItemAtURL:(id)");
}

-(bool) fileManager:(id) shouldProceedAfterError:(id) removingItemAtPath:(id) {
	%orig;
	NSLog(@"-(bool) fileManager:(id) shouldProceedAfterError:(id) removingItemAtPath:(id)");
}

-(id) accessoryName {
	%orig;
	NSLog(@"-(id) accessoryName");
}

-(void) setAccessoryName:(id) {
	%orig;
	NSLog(@"-(void) setAccessoryName:(id)");
}

-(bool) removeItemAtPath:(id) {
	%orig;
	NSLog(@"-(bool) removeItemAtPath:(id)");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

%end

%hook IDWorkerThread

-(id) initWithThreadName:(id) {
	%orig;
	NSLog(@"-(id) initWithThreadName:(id)");
}

-(void) cancelWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) cancelWithCompletionHandler:(id)");
}

-(id) workerThreadLock {
	%orig;
	NSLog(@"-(id) workerThreadLock");
}

-(void) setStartupCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setStartupCompletionHandler:(id)");
}

-(id) startupCompletionHandler {
	%orig;
	NSLog(@"-(id) startupCompletionHandler");
}

-(void) setWorkerThreadLock:(id) {
	%orig;
	NSLog(@"-(void) setWorkerThreadLock:(id)");
}

-(id) cancelCompletionHandler {
	%orig;
	NSLog(@"-(id) cancelCompletionHandler");
}

-(void) setCancelCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) setCancelCompletionHandler:(id)");
}

-(void) setThreadName:(id) {
	%orig;
	NSLog(@"-(void) setThreadName:(id)");
}

-(id) threadName {
	%orig;
	NSLog(@"-(id) threadName");
}

-(id) runLoop {
	%orig;
	NSLog(@"-(id) runLoop");
}

-(void) setRunLoop:(id) {
	%orig;
	NSLog(@"-(void) setRunLoop:(id)");
}

-(void) startWithCompletionHandler:(id) {
	%orig;
	NSLog(@"-(void) startWithCompletionHandler:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) cancel {
	%orig;
	NSLog(@"-(void) cancel");
}

-(void) main {
	%orig;
	NSLog(@"-(void) main");
}

%end

%hook FNFRenderingThread

+(id) renderingThreadAllowingAppInactivePlayback:(bool) {
	%orig;
	NSLog(@"+(id) renderingThreadAllowingAppInactivePlayback:(bool)");
}

-(id) initAllowingAppInactivePlayback:(bool) {
	%orig;
	NSLog(@"-(id) initAllowingAppInactivePlayback:(bool)");
}

-(void) _addDisplayLinkInternal:(id) {
	%orig;
	NSLog(@"-(void) _addDisplayLinkInternal:(id)");
}

-(void) addDisplayLink:(id) {
	%orig;
	NSLog(@"-(void) addDisplayLink:(id)");
}

-(void) dispatchSync:(id) {
	%orig;
	NSLog(@"-(void) dispatchSync:(id)");
}

-(id) runLoop {
	%orig;
	NSLog(@"-(id) runLoop");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(void) setPriority:(double) {
	%orig;
	NSLog(@"-(void) setPriority:(double)");
}

-(double) priority {
	%orig;
	NSLog(@"-(double) priority");
}

-(void) performBlock:(id) {
	%orig;
	NSLog(@"-(void) performBlock:(id)");
}

-(void) main {
	%orig;
	NSLog(@"-(void) main");
}

-(void) _applicationWillResignActive:(id) {
	%orig;
	NSLog(@"-(void) _applicationWillResignActive:(id)");
}

-(void) _applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) _applicationDidBecomeActive:(id)");
}

%end

%hook ABQAFMultipartBodyStream

-(id) initWithStringEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(id) initWithStringEncoding:(unsigned long long)");
}

-(void) appendHTTPBodyPart:(id) {
	%orig;
	NSLog(@"-(void) appendHTTPBodyPart:(id)");
}

-(void) setNumberOfBytesInPacket:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setNumberOfBytesInPacket:(unsigned long long)");
}

-(void) setInitialAndFinalBoundaries {
	%orig;
	NSLog(@"-(void) setInitialAndFinalBoundaries");
}

-(void) setHTTPBodyParts:(id) {
	%orig;
	NSLog(@"-(void) setHTTPBodyParts:(id)");
}

-(id) HTTPBodyParts {
	%orig;
	NSLog(@"-(id) HTTPBodyParts");
}

-(unsigned long long) numberOfBytesInPacket {
	%orig;
	NSLog(@"-(unsigned long long) numberOfBytesInPacket");
}

-(id) currentHTTPBodyPart {
	%orig;
	NSLog(@"-(id) currentHTTPBodyPart");
}

-(id) HTTPBodyPartEnumerator {
	%orig;
	NSLog(@"-(id) HTTPBodyPartEnumerator");
}

-(void) setCurrentHTTPBodyPart:(id) {
	%orig;
	NSLog(@"-(void) setCurrentHTTPBodyPart:(id)");
}

-(void) setHTTPBodyPartEnumerator:(id) {
	%orig;
	NSLog(@"-(void) setHTTPBodyPartEnumerator:(id)");
}

-(bool) getBuffer:(char**) length:(unsigned long long*) {
	%orig;
	NSLog(@"-(bool) getBuffer:(char**) length:(unsigned long long*)");
}

-(bool) _setCFClientFlags:(unsigned long long) callback:(?*) context:(?*) {
	%orig;
	NSLog(@"-(bool) _setCFClientFlags:(unsigned long long) callback:(?*) context:(?*)");
}

-(void) _scheduleInCFRunLoop:(__CFRunLoop*) forMode:(__CFString*) {
	%orig;
	NSLog(@"-(void) _scheduleInCFRunLoop:(__CFRunLoop*) forMode:(__CFString*)");
}

-(void) _unscheduleFromCFRunLoop:(__CFRunLoop*) forMode:(__CFString*) {
	%orig;
	NSLog(@"-(void) _unscheduleFromCFRunLoop:(__CFRunLoop*) forMode:(__CFString*)");
}

-(id) buffer {
	%orig;
	NSLog(@"-(id) buffer");
}

-(void) scheduleInRunLoop:(id) forMode:(id) {
	%orig;
	NSLog(@"-(void) scheduleInRunLoop:(id) forMode:(id)");
}

-(unsigned long long) contentLength {
	%orig;
	NSLog(@"-(unsigned long long) contentLength");
}

-(unsigned long long) stringEncoding {
	%orig;
	NSLog(@"-(unsigned long long) stringEncoding");
}

-(void) setBuffer:(id) {
	%orig;
	NSLog(@"-(void) setBuffer:(id)");
}

-(id) outputStream {
	%orig;
	NSLog(@"-(id) outputStream");
}

-(void) setInputStream:(id) {
	%orig;
	NSLog(@"-(void) setInputStream:(id)");
}

-(void) setOutputStream:(id) {
	%orig;
	NSLog(@"-(void) setOutputStream:(id)");
}

-(id) inputStream {
	%orig;
	NSLog(@"-(id) inputStream");
}

-(long long) read:(char*) maxLength:(unsigned long long) {
	%orig;
	NSLog(@"-(long long) read:(char*) maxLength:(unsigned long long)");
}

-(void) setStringEncoding:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setStringEncoding:(unsigned long long)");
}

-(bool) hasBytesAvailable {
	%orig;
	NSLog(@"-(bool) hasBytesAvailable");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) copyWithZone:(_NSZone*) {
	%orig;
	NSLog(@"-(id) copyWithZone:(_NSZone*)");
}

-(double) delay {
	%orig;
	NSLog(@"-(double) delay");
}

-(void) setDelay:(double) {
	%orig;
	NSLog(@"-(void) setDelay:(double)");
}

-(bool) isEmpty {
	%orig;
	NSLog(@"-(bool) isEmpty");
}

-(void) open {
	%orig;
	NSLog(@"-(void) open");
}

-(void) close {
	%orig;
	NSLog(@"-(void) close");
}

-(void) removeFromRunLoop:(id) forMode:(id) {
	%orig;
	NSLog(@"-(void) removeFromRunLoop:(id) forMode:(id)");
}

-(id) propertyForKey:(id) {
	%orig;
	NSLog(@"-(id) propertyForKey:(id)");
}

-(bool) setProperty:(id) forKey:(id) {
	%orig;
	NSLog(@"-(bool) setProperty:(id) forKey:(id)");
}

%end

%hook GADApplication

+(void) load {
	%orig;
	NSLog(@"+(void) load");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(void) enableBackgroundAdLoading {
	%orig;
	NSLog(@"-(void) enableBackgroundAdLoading");
}

-(void) createConfiguration {
	%orig;
	NSLog(@"-(void) createConfiguration");
}

-(id) javaScriptForRequestingServerSideConfiguration {
	%orig;
	NSLog(@"-(id) javaScriptForRequestingServerSideConfiguration");
}

-(id) fingerprintWithServedPenaltyDeduction {
	%orig;
	NSLog(@"-(id) fingerprintWithServedPenaltyDeduction");
}

-(void) setAvailableAdapterNames:(id) {
	%orig;
	NSLog(@"-(void) setAvailableAdapterNames:(id)");
}

-(void) resetPreqsInSession {
	%orig;
	NSLog(@"-(void) resetPreqsInSession");
}

-(void) resetTimeInSession {
	%orig;
	NSLog(@"-(void) resetTimeInSession");
}

-(void) sendForegroundPing {
	%orig;
	NSLog(@"-(void) sendForegroundPing");
}

-(void) incrementSequenceNumber {
	%orig;
	NSLog(@"-(void) incrementSequenceNumber");
}

-(void) updateTimeInSession {
	%orig;
	NSLog(@"-(void) updateTimeInSession");
}

-(void) incrementTotalAdRequestCount {
	%orig;
	NSLog(@"-(void) incrementTotalAdRequestCount");
}

-(void) decrementTotalAdRequestCount {
	%orig;
	NSLog(@"-(void) decrementTotalAdRequestCount");
}

-(void) incrementTotalAdRequestCountInCurrentSession {
	%orig;
	NSLog(@"-(void) incrementTotalAdRequestCountInCurrentSession");
}

-(void) willLeaveApplicationDueToClickOnAd:(id) {
	%orig;
	NSLog(@"-(void) willLeaveApplicationDueToClickOnAd:(id)");
}

-(void) incrementTotalAdClickCount {
	%orig;
	NSLog(@"-(void) incrementTotalAdClickCount");
}

-(id) nextSequenceNumberAsString {
	%orig;
	NSLog(@"-(id) nextSequenceNumberAsString");
}

-(id) timeSinceFirstAdRequestInMilliseconds {
	%orig;
	NSLog(@"-(id) timeSinceFirstAdRequestInMilliseconds");
}

-(id) nextRequestStatisticsDictionaryForSlot:(id) {
	%orig;
	NSLog(@"-(id) nextRequestStatisticsDictionaryForSlot:(id)");
}

-(void) appDidFinishLaunching {
	%orig;
	NSLog(@"-(void) appDidFinishLaunching");
}

-(void) runEarlyActivities {
	%orig;
	NSLog(@"-(void) runEarlyActivities");
}

-(void) runAdditionalEarlyActivities {
	%orig;
	NSLog(@"-(void) runAdditionalEarlyActivities");
}

-(void) startContentHashing {
	%orig;
	NSLog(@"-(void) startContentHashing");
}

-(void) refreshServerSideConfiguration {
	%orig;
	NSLog(@"-(void) refreshServerSideConfiguration");
}

-(id) iTunesMetadataPath {
	%orig;
	NSLog(@"-(id) iTunesMetadataPath");
}

-(id) adStatistics {
	%orig;
	NSLog(@"-(id) adStatistics");
}

-(bool) isSplitScreenEnabled {
	%orig;
	NSLog(@"-(bool) isSplitScreenEnabled");
}

-(unsigned long long) mainWindowSupportedInterfaceOrientations {
	%orig;
	NSLog(@"-(unsigned long long) mainWindowSupportedInterfaceOrientations");
}

-(void) didUpdateStatisticDictionary:(id) {
	%orig;
	NSLog(@"-(void) didUpdateStatisticDictionary:(id)");
}

-(bool) backgroundLoadingEnabled {
	%orig;
	NSLog(@"-(bool) backgroundLoadingEnabled");
}

-(bool) backgroundReloadingEnabled {
	%orig;
	NSLog(@"-(bool) backgroundReloadingEnabled");
}

-(id) placeholderWindow {
	%orig;
	NSLog(@"-(id) placeholderWindow");
}

-(id) pendingAdStatistics {
	%orig;
	NSLog(@"-(id) pendingAdStatistics");
}

-(void) GADLinkCategories {
	%orig;
	NSLog(@"-(void) GADLinkCategories");
}

-(unsigned long long) nextActiveViewID {
	%orig;
	NSLog(@"-(unsigned long long) nextActiveViewID");
}

-(bool) supportsOrientations:(unsigned long long) {
	%orig;
	NSLog(@"-(bool) supportsOrientations:(unsigned long long)");
}

-(long long) topViewControllerOrientation {
	%orig;
	NSLog(@"-(long long) topViewControllerOrientation");
}

-(void) openURL:(id) strictUniversalLink:(bool) completionHandler:(id) {
	%orig;
	NSLog(@"-(void) openURL:(id) strictUniversalLink:(bool) completionHandler:(id)");
}

-(id) nativeAdStatistics {
	%orig;
	NSLog(@"-(id) nativeAdStatistics");
}

-(id) inAppPreviewCreativeToken {
	%orig;
	NSLog(@"-(id) inAppPreviewCreativeToken");
}

-(void) setInAppPreviewCreativeToken:(id) {
	%orig;
	NSLog(@"-(void) setInAppPreviewCreativeToken:(id)");
}

-(id) notificationSerialQueue {
	%orig;
	NSLog(@"-(id) notificationSerialQueue");
}

-(void) setNotificationSerialQueue:(id) {
	%orig;
	NSLog(@"-(void) setNotificationSerialQueue:(id)");
}

-(id) statisticsSerialQueue {
	%orig;
	NSLog(@"-(id) statisticsSerialQueue");
}

-(void) setStatisticsSerialQueue:(id) {
	%orig;
	NSLog(@"-(void) setStatisticsSerialQueue:(id)");
}

-(void) requesterWillBeginRequest:(id) {
	%orig;
	NSLog(@"-(void) requesterWillBeginRequest:(id)");
}

-(void) requesterDidEndRequest:(id) {
	%orig;
	NSLog(@"-(void) requesterDidEndRequest:(id)");
}

-(long long) currentAdRequestCount {
	%orig;
	NSLog(@"-(long long) currentAdRequestCount");
}

-(void) stopContentHashing {
	%orig;
	NSLog(@"-(void) stopContentHashing");
}

-(void) loadServerSideConfigurationIfNeeded {
	%orig;
	NSLog(@"-(void) loadServerSideConfigurationIfNeeded");
}

-(void) didNotSendAdStatistics:(id) {
	%orig;
	NSLog(@"-(void) didNotSendAdStatistics:(id)");
}

-(id) availableAdapterNames {
	%orig;
	NSLog(@"-(id) availableAdapterNames");
}

-(void) updateAvailableAdapterNamesWithPotentialAdapterNames:(id) {
	%orig;
	NSLog(@"-(void) updateAvailableAdapterNamesWithPotentialAdapterNames:(id)");
}

-(void) configurationDidUpdate:(id) {
	%orig;
	NSLog(@"-(void) configurationDidUpdate:(id)");
}

-(void) loadServerSideConfigurationForPublisherApplicationID:(id) {
	%orig;
	NSLog(@"-(void) loadServerSideConfigurationForPublisherApplicationID:(id)");
}

-(void) setSequenceNumber:(unsigned long long) {
	%orig;
	NSLog(@"-(void) setSequenceNumber:(unsigned long long)");
}

-(unsigned long long) sequenceNumber {
	%orig;
	NSLog(@"-(unsigned long long) sequenceNumber");
}

-(id) mainWindow {
	%orig;
	NSLog(@"-(id) mainWindow");
}

-(void) willResignActive {
	%orig;
	NSLog(@"-(void) willResignActive");
}

-(void) didBecomeActive {
	%orig;
	NSLog(@"-(void) didBecomeActive");
}

-(id) iTunesMetadata {
	%orig;
	NSLog(@"-(id) iTunesMetadata");
}

-(bool) debugModeEnabled {
	%orig;
	NSLog(@"-(bool) debugModeEnabled");
}

-(id) statistics {
	%orig;
	NSLog(@"-(id) statistics");
}

-(id) mainBundleIdentifier {
	%orig;
	NSLog(@"-(id) mainBundleIdentifier");
}

-(id) notificationQueue {
	%orig;
	NSLog(@"-(id) notificationQueue");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(id) UUIDString {
	%orig;
	NSLog(@"-(id) UUIDString");
}

-(id) configuration {
	%orig;
	NSLog(@"-(id) configuration");
}

-(id) version {
	%orig;
	NSLog(@"-(id) version");
}

-(bool) active {
	%orig;
	NSLog(@"-(bool) active");
}

-(id) topViewController {
	%orig;
	NSLog(@"-(id) topViewController");
}

-(id) parameters {
	%orig;
	NSLog(@"-(id) parameters");
}

-(id) sessionIdentifier {
	%orig;
	NSLog(@"-(id) sessionIdentifier");
}

-(void) willEnterForeground {
	%orig;
	NSLog(@"-(void) willEnterForeground");
}

-(void) openURL:(id) {
	%orig;
	NSLog(@"-(void) openURL:(id)");
}

-(void) setDebugModeEnabled:(bool) {
	%orig;
	NSLog(@"-(void) setDebugModeEnabled:(bool)");
}

%end

%hook FBSDKCodelessIndexer

+(void) setupGesture {
	%orig;
	NSLog(@"+(void) setupGesture");
}

+(void) loadCodelessSettingWithCompletionBlock:(id) {
	%orig;
	NSLog(@"+(void) loadCodelessSettingWithCompletionBlock:(id)");
}

+(bool) _codelessSetupTimestampIsValid:(id) {
	%orig;
	NSLog(@"+(bool) _codelessSetupTimestampIsValid:(id)");
}

+(id) requestToLoadCodelessSetup:(id) {
	%orig;
	NSLog(@"+(id) requestToLoadCodelessSetup:(id)");
}

+(void) checkCodelessIndexingSession {
	%orig;
	NSLog(@"+(void) checkCodelessIndexingSession");
}

+(id) currentSessionDeviceID {
	%orig;
	NSLog(@"+(id) currentSessionDeviceID");
}

+(id) extInfo {
	%orig;
	NSLog(@"+(id) extInfo");
}

+(void) uploadIndexing {
	%orig;
	NSLog(@"+(void) uploadIndexing");
}

+(id) currentViewTree {
	%orig;
	NSLog(@"+(id) currentViewTree");
}

+(void) uploadIndexing:(id) {
	%orig;
	NSLog(@"+(void) uploadIndexing:(id)");
}

+(id) recursiveCaptureTree:(id) {
	%orig;
	NSLog(@"+(id) recursiveCaptureTree:(id)");
}

+(id) screenshot {
	%orig;
	NSLog(@"+(id) screenshot");
}

+(id) dimensionOf:(id) {
	%orig;
	NSLog(@"+(id) dimensionOf:(id)");
}

+(void) startIndexing {
	%orig;
	NSLog(@"+(void) startIndexing");
}

+(void) load {
	%orig;
	NSLog(@"+(void) load");
}

%end

%hook FBSDKApplicationDelegate

+(void) initializeWithLaunchData:(id) {
	%orig;
	NSLog(@"+(void) initializeWithLaunchData:(id)");
}

+(void) load {
	%orig;
	NSLog(@"+(void) load");
}

+(id) sharedInstance {
	%orig;
	NSLog(@"+(id) sharedInstance");
}

-(bool) _handleBridgeAPIResponseURL:(id) sourceApplication:(id) {
	%orig;
	NSLog(@"-(bool) _handleBridgeAPIResponseURL:(id) sourceApplication:(id)");
}

-(void) _logIfAppLinkEvent:(id) {
	%orig;
	NSLog(@"-(void) _logIfAppLinkEvent:(id)");
}

-(void) _logSDKInitialize {
	%orig;
	NSLog(@"-(void) _logSDKInitialize");
}

-(void) _cancelBridgeRequest {
	%orig;
	NSLog(@"-(void) _cancelBridgeRequest");
}

-(void) openURLWithSafariViewController:(id) sender:(id) fromViewController:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) openURLWithSafariViewController:(id) sender:(id) fromViewController:(id) handler:(id)");
}

-(void) openURL:(id) sender:(id) handler:(id) {
	%orig;
	NSLog(@"-(void) openURL:(id) sender:(id) handler:(id)");
}

-(void) _setSessionCompletionHandlerFromHandler:(id) {
	%orig;
	NSLog(@"-(void) _setSessionCompletionHandlerFromHandler:(id)");
}

-(void) _openURLWithAuthenticationSession:(id) {
	%orig;
	NSLog(@"-(void) _openURLWithAuthenticationSession:(id)");
}

-(void) viewControllerDidDisappear:(id) animated:(bool) {
	%orig;
	NSLog(@"-(void) viewControllerDidDisappear:(id) animated:(bool)");
}

-(void) openBridgeAPIRequest:(id) useSafariViewController:(bool) fromViewController:(id) completionBlock:(id) {
	%orig;
	NSLog(@"-(void) openBridgeAPIRequest:(id) useSafariViewController:(bool) fromViewController:(id) completionBlock:(id)");
}

-(void) safariViewControllerDidFinish:(id) {
	%orig;
	NSLog(@"-(void) safariViewControllerDidFinish:(id)");
}

-(id) init {
	%orig;
	NSLog(@"-(id) init");
}

-(void) dealloc {
	%orig;
	NSLog(@"-(void) dealloc");
}

-(void) .cxx_destruct {
	%orig;
	NSLog(@"-(void) .cxx_destruct");
}

-(bool) isActive {
	%orig;
	NSLog(@"-(bool) isActive");
}

-(id) _init {
	%orig;
	NSLog(@"-(id) _init");
}

-(void) applicationDidBecomeActive:(id) {
	%orig;
	NSLog(@"-(void) applicationDidBecomeActive:(id)");
}

-(void) applicationDidEnterBackground:(id) {
	%orig;
	NSLog(@"-(void) applicationDidEnterBackground:(id)");
}

-(bool) application:(id) openURL:(id) sourceApplication:(id) annotation:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) openURL:(id) sourceApplication:(id) annotation:(id)");
}

-(bool) application:(id) openURL:(id) options:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) openURL:(id) options:(id)");
}

-(bool) application:(id) didFinishLaunchingWithOptions:(id) {
	%orig;
	NSLog(@"-(bool) application:(id) didFinishLaunchingWithOptions:(id)");
}

%end

%hook FBAdFingerprinter

+(id) coreFingerprint {
	%orig;
	NSLog(@"+(id) coreFingerprint");
}

+(id) fingerprint {
	%orig;
	NSLog(@"+(id) fingerprint");
}

+(void) load {
	%orig;
	NSLog(@"+(void) load");
}

%end

%ctor {
    NSLog(@"PandoraPlus loaded into memory");
}
